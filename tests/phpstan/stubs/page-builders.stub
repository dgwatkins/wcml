<?php

namespace {
    class WPML_Compatibility_Plugin_Visual_Composer_Grid_Hooks implements \IWPML_Action
    {
        /** @var IWPML_Current_Language $current_language */
        private $current_language;
        /** @var WPML_Translation_Element_Factory $element_factory */
        private $element_factory;
        public function __construct(\IWPML_Current_Language $current_language, \WPML_Translation_Element_Factory $element_factory)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param string|array $string
         * @param string       $encoding
         * @param string       $encoded_string
         *
         * @return string|array
         */
        function vc_grid_link_decode($string, $encoding, $encoded_string)
        {
        }
        /**
         * @param string $content
         *
         * @return string
         */
        public function vc_shortcode_content_filter($content)
        {
        }
        /**
         * @param array $matches
         *
         * @return string
         */
        private function replace_grid_id(array $matches)
        {
        }
    }
    /**
     * Class WPML_Compatibility_Plugin_Visual_Composer
     *
     * @author OnTheGoSystems
     */
    class WPML_Compatibility_Plugin_Visual_Composer
    {
        /** @var WPML_Debug_BackTrace $debug_backtrace */
        private $debug_backtrace;
        /** @var array $filters_to_restore */
        private $filters_to_restore = array();
        /**
         * WPML_Compatibility_Plugin_Visual_Composer constructor.
         *
         * @param WPML_Debug_BackTrace $debug_backtrace
         */
        public function __construct(\WPML_Debug_BackTrace $debug_backtrace)
        {
        }
        public function add_hooks()
        {
        }
        private function prevent_registering_widget_strings_twice()
        {
        }
        /**
         * @param string $text
         *
         * @return string
         */
        public function suspend_vc_widget_translation($text)
        {
        }
        /**
         * @param string $text
         *
         * @return mixed
         */
        public function restore_widget_translation($text)
        {
        }
        function vc_safe_encode($string, $encoding)
        {
        }
        function vc_safe_decode($string, $encoding, $encoded_string)
        {
        }
    }
}
namespace WPML\Compatibility\WPBakery {
    class Styles implements \IWPML_Frontend_Action, \IWPML_Backend_Action
    {
        const META_CUSTOM_CSS = '_wpb_shortcodes_custom_css';
        /** @var WPML_Custom_Field_Setting_Factory $metaSettingFactory */
        private $metaSettingFactory;
        public function __construct(\WPML_Custom_Field_Setting_Factory $metaSettingFactory)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param int $postId
         */
        public function copyCssFromOriginal($postId)
        {
        }
        /**
         * As a general rule, we will copy the CSS meta field only once, so
         * it will work fine and independently if the translation is done
         * with the native WP editor. Otherwise, we will programmatically
         * copy the CSS meta to the translation.
         *
         * This adjustment code is required since we are changing the original
         * setting from "copy" to "copy_once" (it will also be updated on the
         * remote config file).
         */
        public function adjustMetaSetting()
        {
        }
    }
}
namespace WPML\PB\SiteOrigin {
    class HandleCustomFieldsFactory implements \IWPML_Backend_Action_Loader, \IWPML_AJAX_Action_Loader, \IWPML_Frontend_Action_Loader
    {
        /**
         * @return \WPML_PB_Handle_Custom_Fields
         */
        public function create()
        {
        }
    }
}
namespace WPML\PB\Config {
    abstract class Factory implements \IWPML_Backend_Action_Loader, \IWPML_Frontend_Action_Loader
    {
        /**
         * @return \IWPML_Action
         * @throws \Auryn\InjectionException
         */
        public function create()
        {
        }
        /**
         * @param string $key
         *
         * @return mixed
         */
        protected abstract function getPbData($key);
    }
}
namespace WPML\PB\SiteOrigin\Config {
    class Factory extends \WPML\PB\Config\Factory
    {
        const DATA = ['configRoot' => 'siteorigin-widgets', 'defaultConditionKey' => '_type', 'pbKey' => 'siteorigin', 'translatableWidgetsHook' => 'wpml_siteorigin_modules_to_translate'];
        /**
         * @inheritDoc
         */
        protected function getPbData($key)
        {
        }
    }
}
namespace WPML\PB\SiteOrigin {
    class Factory
    {
        public function create()
        {
        }
    }
}
namespace {
    class WPML_Page_Builders_Update
    {
        /** @var IWPML_Page_Builders_Data_Settings */
        protected $data_settings;
        public function __construct(\IWPML_Page_Builders_Data_Settings $data_settings)
        {
        }
        /**
         * @param int $post_id
         *
         * @return array
         */
        public function get_converted_data($post_id)
        {
        }
        /**
         * @param int   $post_id
         * @param int   $original_post_id
         * @param array $converted_data
         */
        public function save($post_id, $original_post_id, $converted_data)
        {
        }
        /**
         * @param int   $post_id
         * @param array $fields
         * @param mixed $data
         */
        private function save_data($post_id, $fields, $data)
        {
        }
        /**
         * @param int   $translated_post_id
         * @param int   $original_post_id
         * @param array $meta_fields
         */
        private function copy_meta_fields($translated_post_id, $original_post_id, $meta_fields)
        {
        }
    }
    /**
     * Class WPML_Page_Builders_Update_Translation
     */
    abstract class WPML_Page_Builders_Update_Translation extends \WPML_Page_Builders_Update
    {
        const TRANSLATION_COMPLETE = 10;
        /**
         * @var IWPML_Page_Builders_Translatable_Nodes
         */
        protected $translatable_nodes;
        private $string_translations;
        private $lang;
        public function __construct(\IWPML_Page_Builders_Translatable_Nodes $translatable_nodes, \IWPML_Page_Builders_Data_Settings $data_settings)
        {
        }
        /**
         * @param int               $translated_post_id
         * @param \WP_Post|stdClass $original_post
         * @param array             $string_translations
         * @param string            $lang
         */
        public function update($translated_post_id, $original_post, $string_translations, $lang)
        {
        }
        /**
         * @param WPML_PB_String $string
         *
         * @return WPML_PB_String
         */
        protected function get_translation(\WPML_PB_String $string)
        {
        }
        protected abstract function update_strings_in_modules(array &$data_array);
        protected abstract function update_strings_in_node($node_id, $settings);
    }
}
namespace WPML\PB\SiteOrigin {
    class UpdateTranslation extends \WPML_Page_Builders_Update_Translation
    {
        /** @param array $data_array */
        public function update_strings_in_modules(array &$data_array)
        {
        }
        /**
         * @param string $node_id
         * @param array  $settings
         *
         * @return mixed
         */
        public function update_strings_in_node($node_id, $settings)
        {
        }
    }
}
namespace {
    /**
     * Class WPML_Page_Builders_Register_Strings
     */
    abstract class WPML_Page_Builders_Register_Strings
    {
        /**
         * @var IWPML_Page_Builders_Translatable_Nodes
         */
        private $translatable_nodes;
        /**
         * @var IWPML_Page_Builders_Data_Settings
         */
        protected $data_settings;
        /**
         * @var WPML_PB_String_Registration
         */
        private $string_registration;
        /** @var WPML_PB_Reuse_Translations_By_Strategy|null $reuse_translations */
        private $reuse_translations;
        /** @var int $string_location */
        private $string_location;
        public function __construct(\IWPML_Page_Builders_Translatable_Nodes $translatable_nodes, \IWPML_Page_Builders_Data_Settings $data_settings, \WPML_PB_String_Registration $string_registration, \WPML_PB_Reuse_Translations_By_Strategy $reuse_translations = \null)
        {
        }
        /**
         * @param WP_Post $post
         * @param array $package
         */
        public function register_strings(\WP_Post $post, array $package)
        {
        }
        /**
         * @param string $node_id
         * @param mixed $element
         * @param array $package
         */
        protected function register_strings_for_node($node_id, $element, array $package)
        {
        }
        /**
         * @param array $data_array
         * @param array $package
         */
        protected abstract function register_strings_for_modules(array $data_array, array $package);
    }
}
namespace WPML\PB\SiteOrigin {
    class RegisterStrings extends \WPML_Page_Builders_Register_Strings
    {
        public function register_strings_for_modules(array $data_array, array $package)
        {
        }
    }
}
namespace {
    interface IWPML_Page_Builders_Translatable_Nodes
    {
        /**
         * @param string|int $node_id
         * @param array|stdClass $element
         *
         * @return WPML_PB_String[]
         */
        public function get($node_id, $element);
        /**
         * @param string|int $node_id
         * @param array|stdClass $element
         * @param WPML_PB_String $string
         *
         * @return mixed
         */
        public function update($node_id, $element, \WPML_PB_String $string);
        /**
         * @param string $node_id
         * @param array $field
         * @param mixed $settings
         *
         * @return mixed
         */
        public function get_string_name($node_id, $field, $settings);
        public function initialize_nodes_to_translate();
    }
}
namespace WPML\PB\SiteOrigin {
    class TranslatableNodes implements \IWPML_Page_Builders_Translatable_Nodes
    {
        const SETTINGS_FIELD = 'panels_info';
        /**
         * Nodes to translate.
         *
         * @var array
         */
        private $translatableNodes;
        /**
         * Get translatable node.
         *
         * @param string|int $node_id  Node id.
         * @param array      $settings Node settings.
         *
         * @return \WPML_PB_String[]
         */
        public function get($node_id, $settings)
        {
        }
        /**
         * Update translatable node.
         *
         * @param string          $node_id  Node id.
         * @param array           $settings Node settings.
         * @param \WPML_PB_String $string   String object.
         *
         * @return mixed
         */
        public function update($node_id, $settings, \WPML_PB_String $string)
        {
        }
        /**
         * @param string $field
         *
         * @return string[]
         */
        private static function get_partial_path($field)
        {
        }
        /**
         * @param array $node_data
         *
         * @return ModuleWithItemsFromConfig[]
         */
        private function get_integration_instances(array $node_data)
        {
        }
        /**
         * Get string name.
         *
         * @param string $node_id  Node id.
         * @param array  $field    Page builder field.
         * @param array  $settings Node settings.
         *
         * @return string
         */
        public function get_string_name($node_id, $field, $settings)
        {
        }
        /**
         * Get wrap tag for string.
         * Used for SEO, can contain (h1...h6, etc.)
         *
         * @param array $settings Field settings.
         *
         * @return string
         */
        private function get_wrap_tag($settings)
        {
        }
        /**
         * Check if node condition is ok.
         *
         * @param array $node_data Node data.
         * @param array $settings  Node settings.
         *
         * @return bool
         */
        private function conditions_ok($node_data, $settings)
        {
        }
        private function getTranslatableNodes()
        {
        }
        public function initialize_nodes_to_translate()
        {
        }
    }
}
namespace {
    /**
     * Class IWPML_Page_Builders_Module
     */
    interface IWPML_Page_Builders_Module
    {
        /**
         * @param string|int $node_id
         * @param mixed $element
         * @param WPML_PB_String[] $strings
         *
         * @return WPML_PB_String[]
         */
        public function get($node_id, $element, $strings);
        /**
         * @param string|int $node_id
         * @param mixed $element
         * @param WPML_PB_String $string
         *
         * @return array|null
         */
        public function update($node_id, $element, \WPML_PB_String $string);
    }
}
namespace WPML\PB\SiteOrigin\Modules {
    abstract class ModuleWithItems implements \IWPML_Page_Builders_Module
    {
        /**
         * @param string $field
         *
         * @return string
         */
        protected abstract function get_title($field);
        /** @return array */
        protected abstract function get_fields();
        /**
         * @param string $field
         *
         * @return string
         */
        protected abstract function get_editor_type($field);
        /**
         * @return string
         */
        public abstract function get_items_field();
        /**
         * @param mixed $settings
         *
         * @return array
         */
        public abstract function get_items($settings);
        /**
         * @param string|int $node_id
         * @param mixed $settings
         * @param \WPML_PB_String[] $strings
         *
         * @return \WPML_PB_String[]
         */
        public function get($node_id, $settings, $strings)
        {
        }
        /**
         * @param string|int $node_id
         * @param mixed $element
         * @param \WPML_PB_String $string
         *
         * @return array
         */
        public function update($node_id, $element, \WPML_PB_String $string)
        {
        }
        private function get_string_name($node_id, $type, $key, $field)
        {
        }
        /**
         * @param string $key
         *
         * @return array
         */
        public function get_field_path($key)
        {
        }
    }
    class ModuleWithItemsFromConfig extends \WPML\PB\SiteOrigin\Modules\ModuleWithItems
    {
        /** @var array $fieldDefinitions */
        private $fieldDefinitions = [];
        /** @var string $itemsField */
        private $itemsField;
        /**
         * @param string $itemsField
         * @param array  $config
         */
        public function __construct($itemsField, array $config)
        {
        }
        private function init(array $config)
        {
        }
        private function getFieldData($field, $key)
        {
        }
        /**
         * @inheritDoc
         */
        public function get_title($field)
        {
        }
        /**
         * @inheritDoc
         */
        public function get_fields()
        {
        }
        /**
         * @inheritDoc
         */
        public function get_editor_type($field)
        {
        }
        /**
         * @inheritDoc
         */
        public function get_items_field()
        {
        }
        /**
         * @param array $settings
         *
         * @return array
         */
        public function get_items($settings)
        {
        }
    }
}
namespace {
    /**
     * Interface IWPML_Page_Builders_Data_Settings
     */
    interface IWPML_Page_Builders_Data_Settings
    {
        /**
         * @return string
         */
        public function get_meta_field();
        /**
         * @return string
         */
        public function get_node_id_field();
        /**
         * @return array
         */
        public function get_fields_to_copy();
        /**
         * @return array
         */
        public function get_fields_to_save();
        /**
         * @param mixed $data
         *
         * @return array
         */
        public function convert_data_to_array($data);
        /**
         * @param array $data
         *
         * @return mixed
         */
        public function prepare_data_for_saving(array $data);
        /**
         * @return string
         */
        public function get_pb_name();
        public function add_hooks();
        /**
         * @param int $postId
         *
         * @return bool
         */
        public function is_handling_post($postId);
    }
}
namespace WPML\PB\SiteOrigin {
    class DataSettings implements \IWPML_Page_Builders_Data_Settings
    {
        /**
         * @return string
         */
        public function get_meta_field()
        {
        }
        /**
         * @return string
         */
        public function get_node_id_field()
        {
        }
        /**
         * @return array
         */
        public function get_fields_to_copy()
        {
        }
        /**
         * @param array $data
         *
         * @return array
         */
        public function convert_data_to_array($data)
        {
        }
        /**
         * @param array $data
         *
         * @return array
         */
        public function prepare_data_for_saving(array $data)
        {
        }
        /**
         * @return string
         */
        public function get_pb_name()
        {
        }
        /**
         * @return array
         */
        public function get_fields_to_save()
        {
        }
        public function add_hooks()
        {
        }
        /**
         * By letting WPML think `nav_menu` is translatable, it will filter out items in other languages.
         * To avoid interfeering with anything else, we do this only for the SiteOrigin menu widget.
         *
         * @param bool|null $result
         * @param string    $tax
         *
         * @return bool|null
         */
        public function filterMenus($result, $tax)
        {
        }
        /**
         * @param array $widgets
         *
         * @return array
         */
        public function removeWidgets($widgets)
        {
        }
        /**
         * @param int $postId
         *
         * @return bool
         */
        public function is_handling_post($postId)
        {
        }
        /**
         * @param string $form
         *
         * @return string
         */
        public function removeLanguageSelector($form)
        {
        }
    }
}
namespace WPML\PB\Elementor\DynamicContent {
    class Field
    {
        /**
         * e.g. '[elementor-tag id="cc0b6c6" name="post-title" settings="ENCODED_STRING"]'
         *
         * @var string $tagValue
         */
        public $tagValue;
        /**
         * e.g. 'title'
         *
         * @var string $tagKey
         */
        public $tagKey;
        /**
         * The node ID.
         *
         * @var string $nodeId
         */
        public $nodeId;
        /**
         * The item ID inside the node with items.
         *
         * @var string $itemId
         */
        public $itemId;
        /**
         * @param string $tagValue
         * @param string $tagKey
         * @param string $nodeId
         * @param string $itemId
         */
        public function __construct($tagValue, $tagKey, $nodeId, $itemId = '')
        {
        }
        /**
         * @see \WPML_Elementor_Translatable_Nodes::get_string_name()
         * @see \WPML_Elementor_Module_With_Items::get_string_name()
         *
         * @param WPML_PB_String $string
         *
         * @return bool
         */
        public function isMatchingStaticString(\WPML_PB_String $string)
        {
        }
    }
    class Strings
    {
        const KEY_SETTINGS = \WPML_Elementor_Translatable_Nodes::SETTINGS_FIELD;
        const KEY_DYNAMIC = '__dynamic__';
        const KEY_NODE_ID = 'id';
        const KEY_ITEM_ID = '_id';
        const SETTINGS_REGEX = '/settings="(.*?(?="]))/';
        const NAME_PREFIX = 'dynamic';
        const DELIMITER = '-';
        const TRANSLATABLE_SETTINGS = ['before', 'after', 'fallback'];
        /**
         * Remove the strings overwritten with dynamic content
         * and add the extra strings "before", "after" and "fallback".
         *
         * @param WPML_PB_String[] $strings
         * @param string           $nodeId
         * @param array            $element
         *
         * @return WPML_PB_String[]
         */
        public static function filter(array $strings, $nodeId, array $element)
        {
        }
        /**
         * @param array $element
         *
         * @return Collection
         */
        private static function getDynamicFields(array $element)
        {
        }
        /**
         * @param array $element
         *
         * @return Collection
         */
        private static function getDynamicFieldsForModuleWithItems(array $element)
        {
        }
        /**
         * @param array  $data
         * @param string $nodeId
         * @param string $itemId
         *
         * @return Collection
         */
        private static function getFields(array $data, $nodeId, $itemId = '')
        {
        }
        /**
         * @param array $element
         *
         * @return bool
         */
        private static function isModuleWithItems(array $element)
        {
        }
        /**
         * @param Collection $dynamicFields
         *
         * @return Collection
         */
        private static function addBeforeAfterAndFallback(\WPML\Collect\Support\Collection $dynamicFields)
        {
        }
        /**
         * @param array          $element
         * @param WPML_PB_String $string
         *
         * @return array
         */
        public static function updateNode(array $element, \WPML_PB_String $string)
        {
        }
        /**
         * @param string         $encodedSettings
         * @param WPML_PB_String $string
         * @param string         $settingField
         *
         * @return string|null
         */
        private static function replaceSettingString($encodedSettings, \WPML_PB_String $string, $settingField)
        {
        }
        /**
         * @param array          $element
         * @param WPML_PB_String $string
         * @param array          $stringNameParts
         *
         * @return array
         */
        private static function updateNodeWithItems(array $element, \WPML_PB_String $string, array $stringNameParts)
        {
        }
        /**
         * @param string $settingsString
         *
         * @return array
         */
        private static function decodeSettings($settingsString)
        {
        }
        /**
         * @param string $nodeId
         * @param string $itemId
         * @param string $tagKey
         * @param string $settingField
         *
         * @return string
         */
        public static function getStringName($nodeId, $itemId, $tagKey, $settingField)
        {
        }
    }
}
namespace {
    class WPML_Elementor_WooCommerce_Hooks
    {
        public function add_hooks()
        {
        }
        /**
         * @param WP_Query $query
         *
         * @return WP_Query
         */
        public function do_not_suppress_filters_on_product_widget(\WP_Query $query)
        {
        }
    }
}
namespace WPML\PB\Elementor\Config {
    class Factory extends \WPML\PB\Config\Factory
    {
        const DATA = ['configRoot' => 'elementor-widgets', 'defaultConditionKey' => 'widgetType', 'pbKey' => 'elementor', 'translatableWidgetsHook' => 'wpml_elementor_widgets_to_translate'];
        /**
         * @inheritDoc
         */
        protected function getPbData($key)
        {
        }
    }
}
namespace {
    class WPML_Elementor_URLs_Factory implements \IWPML_Backend_Action_Loader, \IWPML_Frontend_Action_Loader
    {
        public function create()
        {
        }
    }
}
namespace WPML\PB\Elementor\Hooks {
    class DynamicElements implements \IWPML_Frontend_Action, \IWPML_DIC_Action
    {
        public function add_hooks()
        {
        }
        /**
         * @param array $data
         *
         * @return array
         */
        public function convert(array $data)
        {
        }
        /**
         * @param array $data
         *
         * @return bool
         */
        private function isDynamicLink(array $data)
        {
        }
        /**
         * @param string $tagString e.g. "[elementor-tag id="d3587f6" name="popup" settings="%7B%22popup%22%3A%228%22%7D"]"
         *
         * @return string
         */
        private function convertPopUpTag($tagString)
        {
        }
        /**
         * @param int $elementId
         *
         * @return int
         */
        private function convertId($elementId)
        {
        }
    }
    class WordPressWidgets implements \IWPML_Backend_Action
    {
        public function add_hooks()
        {
        }
    }
    class Editor implements \IWPML_Backend_Action
    {
        public function add_hooks()
        {
        }
    }
    class LandingPages implements \IWPML_Frontend_Action, \IWPML_Backend_Action, \IWPML_DIC_Action
    {
        const POST_TYPE = 'e-landing-page';
        /** @var \SitePress $sitepress */
        private $sitepress;
        public function __construct(\SitePress $sitepress)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @see \Elementor\Modules\LandingPages\Module::remove_post_type_slug
         *
         * @param string   $postUrl
         * @param \WP_Post $post
         *
         * @return string
         */
        public function adjustLink($postUrl, $post)
        {
        }
    }
    class WooCommerce implements \IWPML_Frontend_Action
    {
        public function add_hooks()
        {
        }
    }
    class Frontend implements \IWPML_Frontend_Action
    {
        public function add_hooks()
        {
        }
        public function addLanguageFormField()
        {
        }
    }
    class GutenbergCleanup implements \IWPML_Backend_Action, \IWPML_Frontend_Action
    {
        public function add_hooks()
        {
        }
        /**
         * If we detect Gutenberg footprint in the Elementor data,
         * we'll remove it and delete the Gutenberg string package.
         *
         * @param null|bool $check
         * @param int       $postId
         * @param string    $metaKey
         * @param string    $metaValue
         *
         * @return mixed
         */
        public function removeGutenbergFootprint($check, $postId, $metaKey, $metaValue)
        {
        }
        /**
         * @param array $data
         *
         * @return array
         */
        public function removeBlockMetaInEditorWidget(array $data)
        {
        }
    }
}
namespace {
    class WPML_Elementor_Update_Translation extends \WPML_Page_Builders_Update_Translation
    {
        /** @param array $data_array */
        protected function update_strings_in_modules(array &$data_array)
        {
        }
        /**
         * @param int $node_id
         * @param array $settings
         *
         * @return array
         */
        protected function update_strings_in_node($node_id, $settings)
        {
        }
    }
    /**
     * Class WPML_Elementor_Translatable_Nodes
     */
    class WPML_Elementor_Translatable_Nodes implements \IWPML_Page_Builders_Translatable_Nodes
    {
        const SETTINGS_FIELD = 'settings';
        const TYPE = 'widgetType';
        const DEFAULT_HEADING_TAG = 'h2';
        /**
         * @var array
         */
        private $nodes_to_translate;
        /**
         * @param string|int $node_id Translatable node id.
         * @param array $element
         *
         * @return WPML_PB_String[]
         */
        public function get($node_id, $element)
        {
        }
        /**
         * @param string|int $node_id
         * @param array $element
         * @param WPML_PB_String $string
         *
         * @return array
         */
        public function update($node_id, $element, \WPML_PB_String $string)
        {
        }
        /**
         * @param string $field
         *
         * @return string[]
         */
        private static function get_partial_path($field)
        {
        }
        /**
         * @param array $node_data
         *
         * @return WPML_Elementor_Module_With_Items[]
         */
        private function get_integration_instances($node_data)
        {
        }
        /**
         * @param string $node_id
         * @param array $field
         * @param array $settings
         *
         * @return string
         */
        public function get_string_name($node_id, $field, $settings)
        {
        }
        /**
         * Get wrap tag for string.
         * Used for SEO, can contain (h1...h6, etc.)
         *
         * @param array $settings Field settings.
         *
         * @return string
         */
        private function get_wrap_tag($settings)
        {
        }
        /**
         * @param array $node_data
         * @param array $element
         *
         * @return bool
         */
        private function conditions_ok($node_data, $element)
        {
        }
        public static function get_nodes_to_translate()
        {
        }
        public function initialize_nodes_to_translate()
        {
        }
    }
    class WPML_PB_Elementor_Handle_Custom_Fields_Factory implements \IWPML_Backend_Action_Loader, \IWPML_AJAX_Action_Loader, \IWPML_Frontend_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_Elementor_URLs implements \IWPML_Action
    {
        /** @var WPML_Translation_Element_Factory */
        private $element_factory;
        /** @var IWPML_URL_Converter_Strategy */
        private $language_converter;
        /** @var IWPML_Current_Language  */
        private $current_language;
        public function __construct(\WPML_Translation_Element_Factory $element_factory, \IWPML_URL_Converter_Strategy $language_converter, \IWPML_Current_Language $current_language)
        {
        }
        public function add_hooks()
        {
        }
        public function adjust_edit_with_elementor_url($url, $elementor_document)
        {
        }
        /**
         * Check if the given URL is the pagination inside the post.
         *
         * @param bool $is_pagination_url_in_post
         * @param string $url URL to check
         * @param string $post_name Current post name
         *
         * @return bool
         */
        public function is_pagination_url($is_pagination_url_in_post, $url, $post_name)
        {
        }
        public function fix_pagination_link_with_language_param($link)
        {
        }
    }
}
namespace WPML\PB\Elementor {
    class DataConvert
    {
        /**
         * @param array $data
         *
         * @return string
         */
        public static function serialize(array $data)
        {
        }
        /**
         * @param array|string $data
         *
         * @return array
         */
        public static function unserialize($data)
        {
        }
    }
}
namespace {
    class WPML_PB_Fix_Maintenance_Query implements \IWPML_Frontend_Action
    {
        const AFTER_TEMPLATE_APPLY = 12;
        public function add_hooks()
        {
        }
        public function fix_global_query()
        {
        }
    }
    /**
     * Class WPML_Elementor_Translate_IDs
     */
    class WPML_Elementor_Translate_IDs implements \IWPML_Action
    {
        /** @var \WPML\Utils\DebugBackTrace */
        private $debug_backtrace;
        /**
         * WPML_Elementor_Translate_IDs constructor.
         *
         * @param \WPML\Utils\DebugBackTrace $debug_backtrace
         */
        public function __construct(\WPML\Utils\DebugBackTrace $debug_backtrace)
        {
        }
        public function add_hooks()
        {
        }
        public function translate_theme_location_template_id($template_id)
        {
        }
        /**
         * @param int|string $sub_id
         * @param array      $parsed_condition
         *
         * @return int|string
         */
        public function translate_location_condition_sub_id($sub_id, $parsed_condition)
        {
        }
        public function translate_template_id($template_id)
        {
        }
        private function is_WP_widget_call()
        {
        }
        private function is_shortcode_call()
        {
        }
        private function is_template_widget_call()
        {
        }
        public function translate_global_widget_ids($data_array, $post_id)
        {
        }
        /**
         * @param array $data_array
         * @param int   $post_id
         *
         * @return array
         */
        public function translate_product_ids($data_array, $post_id)
        {
        }
        /**
         * @param int|string $element_id
         * @param string     $element_type
         *
         * @return int
         */
        private function translate_id($element_id, $element_type = \null)
        {
        }
    }
    interface IWPML_PB_Media_Nodes_Iterator
    {
        public function translate($data, $lang, $source_lang);
    }
    class WPML_Elementor_Media_Nodes_Iterator implements \IWPML_PB_Media_Nodes_Iterator
    {
        /** @var WPML_Elementor_Media_Node_Provider $node_provider */
        private $node_provider;
        public function __construct(\WPML_Elementor_Media_Node_Provider $node_provider)
        {
        }
        /**
         * @param array $data_array
         * @param string $lang
         * @param string $source_lang
         *
         * @return array
         */
        public function translate($data_array, $lang, $source_lang)
        {
        }
        /**
         * @param array $node
         *
         * @return bool
         */
        private function is_parent_node($node)
        {
        }
        /**
         * @param array $node
         *
         * @return bool
         */
        private function is_valid_media_node($node)
        {
        }
        /**
         * @param stdClass $node_data
         * @param string   $lang
         * @param string   $source_lang
         *
         * @return stdClass
         */
        private function translate_node($node_data, $lang, $source_lang)
        {
        }
    }
    class WPML_Elementor_Media_Hooks_Factory implements \IWPML_Backend_Action_Loader, \IWPML_Frontend_Action_Loader
    {
        public function create()
        {
        }
    }
    interface IWPML_PB_Media_Update_Factory
    {
        /** @return IWPML_PB_Media_Update */
        public function create();
    }
    class WPML_Elementor_Update_Media_Factory implements \IWPML_PB_Media_Update_Factory
    {
        /** @var WPML_Page_Builders_Media_Translate|null $media_translate */
        private $media_translate;
        public function create()
        {
        }
        /** @return WPML_Page_Builders_Media_Translate */
        private function get_media_translate()
        {
        }
    }
    class WPML_Elementor_Media_Node_Provider
    {
        /** @var WPML_Page_Builders_Media_Translate $media_translate */
        private $media_translate;
        /** @var WPML_Elementor_Media_Node[] */
        private $nodes = array();
        public function __construct(\WPML_Page_Builders_Media_Translate $media_translate)
        {
        }
        /**
         * @param string $type
         *
         * @return WPML_Elementor_Media_Node|null
         */
        public function get($type)
        {
        }
    }
    abstract class WPML_Elementor_Media_Node
    {
        /** @var WPML_Page_Builders_Media_Translate $media_translate */
        protected $media_translate;
        public function __construct(\WPML_Page_Builders_Media_Translate $media_translate)
        {
        }
        /**
         * @param array  $settings
         * @param string $property
         * @param string $lang
         * @param string $source_lang
         *
         * @return mixed
         */
        protected function translate_image_property($settings, $property, $lang, $source_lang)
        {
        }
        /**
         * @param array  $settings
         * @param string $property
         * @param string $lang
         * @param string $source_lang
         *
         * @return mixed
         */
        protected function translate_images_property($settings, $property, $lang, $source_lang)
        {
        }
        /**
         * @param array $image
         * @param string $lang
         * @param string $source_lang
         *
         * @return mixed
         */
        public function translate_image_array($image, $lang, $source_lang)
        {
        }
        abstract function translate($settings, $target_lang, $source_lang);
    }
    abstract class WPML_Elementor_Media_Node_With_Images_Property extends \WPML_Elementor_Media_Node
    {
        /** @return string */
        protected abstract function get_property_name();
        /**
         * @param array  $settings
         * @param string $target_lang
         * @param string $source_lang
         *
         * @return mixed
         */
        public function translate($settings, $target_lang, $source_lang)
        {
        }
    }
    abstract class WPML_Elementor_Media_Node_With_Slides extends \WPML_Elementor_Media_Node
    {
        /** @return string */
        protected abstract function get_image_property_name();
        /**
         * @param array  $settings
         * @param string $target_lang
         * @param string $source_lang
         *
         * @return mixed
         */
        public function translate($settings, $target_lang, $source_lang)
        {
        }
    }
    abstract class WPML_Elementor_Media_Node_With_Image_Property extends \WPML_Elementor_Media_Node
    {
        /** @return string */
        protected abstract function get_property_name();
        /**
         * @param array  $settings
         * @param string $target_lang
         * @param string $source_lang
         *
         * @return mixed
         */
        public function translate($settings, $target_lang, $source_lang)
        {
        }
    }
    class WPML_Elementor_Media_Node_Image_Carousel extends \WPML_Elementor_Media_Node_With_Images_Property
    {
        protected function get_property_name()
        {
        }
    }
    class WPML_Elementor_Media_Node_Call_To_Action extends \WPML_Elementor_Media_Node
    {
        public function translate($settings, $target_lang, $source_lang)
        {
        }
    }
    class WPML_Elementor_Media_Node_Image_Gallery extends \WPML_Elementor_Media_Node_With_Images_Property
    {
        protected function get_property_name()
        {
        }
    }
    class WPML_Elementor_Media_Node_WP_Widget_Media_Image extends \WPML_Elementor_Media_Node
    {
        /**
         * @param array  $settings
         * @param string $target_lang
         * @param string $source_lang
         *
         * @return mixed
         */
        public function translate($settings, $target_lang, $source_lang)
        {
        }
    }
    class WPML_Elementor_Media_Node_Image extends \WPML_Elementor_Media_Node
    {
        /**
         * @param array  $settings
         * @param string $target_lang
         * @param string $source_lang
         *
         * @return array
         */
        public function translate($settings, $target_lang, $source_lang)
        {
        }
    }
}
namespace WPML\PB\Elementor\Media\Modules {
    class Hotspot extends \WPML_Elementor_Media_Node_With_Image_Property
    {
        protected function get_property_name()
        {
        }
    }
}
namespace {
    class WPML_Elementor_Media_Node_Slides extends \WPML_Elementor_Media_Node_With_Slides
    {
        protected function get_image_property_name()
        {
        }
    }
    class WPML_Elementor_Media_Node_Image_Box extends \WPML_Elementor_Media_Node_With_Image_Property
    {
        protected function get_property_name()
        {
        }
    }
}
namespace WPML\PB\Elementor\Media\Modules {
    class Gallery extends \WPML_Elementor_Media_Node_With_Images_Property
    {
        protected function get_property_name()
        {
        }
    }
    class Video extends \WPML_Elementor_Media_Node_With_Image_Property
    {
        public function get_property_name()
        {
        }
    }
    class AllNodes extends \WPML_Elementor_Media_Node
    {
        /**
         * @param array $settings
         * @param string $target_lang
         * @param string $source_lang
         *
         * @return array
         */
        public function translate($settings, $target_lang, $source_lang)
        {
        }
    }
}
namespace {
    class WPML_Elementor_Media_Node_Media_Carousel extends \WPML_Elementor_Media_Node_With_Slides
    {
        protected function get_image_property_name()
        {
        }
    }
    class WPML_Elementor_Media_Node_WP_Widget_Media_Gallery extends \WPML_Elementor_Media_Node
    {
        /**
         * @param array  $settings
         * @param string $target_lang
         * @param string $source_lang
         *
         * @return array
         */
        public function translate($settings, $target_lang, $source_lang)
        {
        }
    }
}
namespace WPML\PB\Elementor\Media\Modules {
    class VideoPlaylist extends \WPML_Elementor_Media_Node
    {
        public function translate($settings, $target_lang, $source_lang)
        {
        }
    }
}
namespace {
    class WPML_Elementor_Adjust_Global_Widget_ID
    {
        /** @var IWPML_Page_Builders_Data_Settings */
        private $elementor_settings;
        /** @var WPML_Translation_Element_Factory */
        private $translation_element_factory;
        /** @var SitePress */
        private $sitepress;
        /** @var string */
        private $current_language;
        public function __construct(\IWPML_Page_Builders_Data_Settings $elementor_settings, \WPML_Translation_Element_Factory $translation_element_factory, \SitePress $sitepress)
        {
        }
        public function add_hooks()
        {
        }
        public function adjust_ids()
        {
        }
        private function set_global_widget_id_for_language($data_array, $language)
        {
        }
        public function restore_current_language()
        {
        }
        /**
         * The snippet is a WHERE condition which is added to a DB query.
         * This will include the source element in the query results in case the element
         * does not exist in the current language.
         *
         * @see WPML_Query_Filter::display_as_translated_snippet
         *
         * @param bool  $display_as_translated
         * @param array $post_types
         *
         * @return bool
         */
        public function should_use_display_as_translated_snippet($display_as_translated, $post_types)
        {
        }
        /**
         * @param string $content
         *
         * @return string
         */
        public function duplicate_css_class_with_original_id($content)
        {
        }
        private function convert_id_to_original(array $matches)
        {
        }
    }
    class WPML_Elementor_WooCommerce_Hooks_Factory implements \IWPML_Backend_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_Elementor_Adjust_Global_Widget_ID_Factory implements \IWPML_Backend_Action_Loader, \IWPML_Frontend_Action_Loader
    {
        public function create()
        {
        }
    }
    /**
     * Class WPML_Elementor_Register_Strings
     */
    class WPML_Elementor_Register_Strings extends \WPML_Page_Builders_Register_Strings
    {
        /**
         * @param array $data_array
         * @param array $package
         */
        protected function register_strings_for_modules(array $data_array, array $package)
        {
        }
    }
    class WPML_Elementor_DB
    {
        /**
         * @var \Elementor\DB
         */
        private $elementor_db;
        // @codingStandardsIgnoreLine
        public function __construct(\Elementor\DB $elementor_db)
        {
        }
        /**
         * @param int $post_id
         */
        public function save_plain_text($post_id)
        {
        }
    }
    class WPML_Elementor_Data_Settings implements \IWPML_Page_Builders_Data_Settings
    {
        const META_KEY_DATA = '_elementor_data';
        const META_KEY_MODE = '_elementor_edit_mode';
        /**
         * @var WPML_Elementor_DB|null
         */
        private $elementor_db;
        public function __construct(\WPML_Elementor_DB $elementor_db = \null)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param array $value
         * @param int $translated_post_id
         * @param int $original_post_id
         * @param string $meta_key
         *
         * @return mixed
         */
        public function mark_css_field_as_empty($value, $translated_post_id, $original_post_id, $meta_key)
        {
        }
        public function save_post_body_as_plain_text($type, $post_id, $original_post, $string_translations, $lang)
        {
        }
        /**
         * @return string
         */
        public function get_meta_field()
        {
        }
        /**
         * @return string
         */
        public function get_node_id_field()
        {
        }
        /**
         * @return array
         */
        public function get_fields_to_copy()
        {
        }
        /**
         * @param array|string $data
         *
         * @return array
         */
        public function convert_data_to_array($data)
        {
        }
        /**
         * @param array $data
         *
         * @return string
         */
        public function prepare_data_for_saving(array $data)
        {
        }
        /**
         * @return string
         */
        public function get_pb_name()
        {
        }
        /**
         * @return array
         */
        public function get_fields_to_save()
        {
        }
        /**
         * @param array $custom_fields_values
         * @param int $post_id
         *
         * @return array
         */
        public function add_data_custom_field_to_md5(array $custom_fields_values, $post_id)
        {
        }
        /**
         * @param int $postId
         *
         * @return bool
         */
        public function is_handling_post($postId)
        {
        }
        /**
         * @param int $postId
         *
         * @return bool
         */
        public static function is_edited_with_elementor($postId)
        {
        }
    }
}
namespace WPML\PB\Elementor\LanguageSwitcher {
    class LanguageSwitcher implements \IWPML_Backend_Action, \IWPML_Frontend_Action
    {
        public function add_hooks()
        {
        }
        public function registerWidgets()
        {
        }
    }
    class WidgetAdaptor
    {
        /** @var Widget $widget */
        private $widget;
        public function setTarget(\WPML\PB\Elementor\LanguageSwitcher\Widget $widget)
        {
        }
        /** @return string */
        public function getName()
        {
        }
        /** @return string */
        public function getTitle()
        {
        }
        /** @return string */
        public function getIcon()
        {
        }
        /** @return array */
        public function getCategories()
        {
        }
        /**
         * Register controls.
         *
         * Used to add new controls to any element type. For example, external
         * developers use this method to register controls in a widget.
         *
         * Should be inherited and register new controls using `add_control()`,
         * `add_responsive_control()` and `add_group_control()`, inside control
         * wrappers like `start_controls_section()`, `start_controls_tabs()` and
         * `start_controls_tab()`.
         */
        public function registerControls()
        {
        }
        /**
         * Render element.
         *
         * Generates the final HTML on the frontend.
         */
        public function render()
        {
        }
    }
    class Widget extends \Elementor\Widget_Base
    {
        /** @var WidgetAdaptor $adaptor */
        private $adaptor;
        public function __construct($data = [], $args = null, \WPML\PB\Elementor\LanguageSwitcher\WidgetAdaptor $adaptor = null)
        {
        }
        /** @return string */
        public function get_name()
        {
        }
        /** @return string */
        public function get_title()
        {
        }
        /** @return string */
        public function get_icon()
        {
        }
        /** @return array */
        public function get_categories()
        {
        }
        /**
         * Register controls.
         *
         * Used to add new controls to any element type. For example, external
         * developers use this method to register controls in a widget.
         *
         * Should be inherited and register new controls using `add_control()`,
         * `add_responsive_control()` and `add_group_control()`, inside control
         * wrappers like `start_controls_section()`, `start_controls_tabs()` and
         * `start_controls_tab()`.
         */
        protected function register_controls()
        {
        }
        /**
         * Render element.
         *
         * Generates the final HTML on the frontend.
         */
        protected function render()
        {
        }
    }
}
namespace {
    class WPML_Elementor_Translate_IDs_Factory implements \IWPML_Frontend_Action_Loader
    {
        public function create()
        {
        }
    }
    /**
     * Class WPML_Elementor_Module_With_Items
     */
    abstract class WPML_Elementor_Module_With_Items implements \IWPML_Page_Builders_Module
    {
        /**
         * @param string $field
         *
         * @return string
         */
        protected abstract function get_title($field);
        /** @return array */
        protected abstract function get_fields();
        /**
         * @param string $field
         *
         * @return string mixed
         */
        protected abstract function get_editor_type($field);
        /**
         * @return string
         */
        public abstract function get_items_field();
        /**
         * @param string|int $node_id
         * @param array $element
         * @param WPML_PB_String[] $strings
         *
         * @return WPML_PB_String[]
         */
        public function get($node_id, $element, $strings)
        {
        }
        /**
         * @param int|string $node_id
         * @param mixed $element
         * @param WPML_PB_String $string
         *
         * @return mixed
         */
        public function update($node_id, $element, \WPML_PB_String $string)
        {
        }
        /**
         * @param string $node_id
         * @param string $value
         * @param string $type
         * @param string $key
         * @param string $item_id
         *
         * @return string
         */
        private function get_string_name($node_id, $value, $type, $key = '', $item_id = '')
        {
        }
        /**
         * @param array $element
         *
         * @return mixed
         */
        public function get_items($element)
        {
        }
    }
    /**
     * Class WPML_Elementor_Accordion
     */
    class WPML_Elementor_Testimonial_Carousel extends \WPML_Elementor_Module_With_Items
    {
        /**
         * @return string
         */
        public function get_items_field()
        {
        }
        /**
         * @return array
         */
        public function get_fields()
        {
        }
        /**
         * @param string $field
         *
         * @return string
         */
        protected function get_title($field)
        {
        }
        /**
         * @param string $field
         *
         * @return string
         */
        protected function get_editor_type($field)
        {
        }
    }
}
namespace WPML\PB\Elementor\Modules {
    class ModuleWithItemsFromConfig extends \WPML_Elementor_Module_With_Items
    {
        /** @var array $fields */
        private $fields = [];
        /** @var array $fieldDefinitions */
        private $fieldDefinitions = [];
        /** @var string $itemsField */
        private $itemsField;
        /**
         * @param string $itemsField
         * @param array  $config
         */
        public function __construct($itemsField, array $config)
        {
        }
        private function init(array $config)
        {
        }
        private function getFieldData($field, $key)
        {
        }
        /**
         * @inheritDoc
         */
        public function get_title($field)
        {
        }
        /**
         * @inheritDoc
         */
        public function get_fields()
        {
        }
        /**
         * @inheritDoc
         */
        public function get_editor_type($field)
        {
        }
        /**
         * @inheritDoc
         */
        public function get_items_field()
        {
        }
    }
}
namespace {
    /**
     * Class WPML_Elementor_Price_List
     */
    class WPML_Elementor_Price_List extends \WPML_Elementor_Module_With_Items
    {
        /**
         * @return string
         */
        public function get_items_field()
        {
        }
        /**
         * @return array
         */
        public function get_fields()
        {
        }
        /**
         * @param string $field
         *
         * @return string
         */
        protected function get_title($field)
        {
        }
        /**
         * @param string $field
         *
         * @return string
         */
        protected function get_editor_type($field)
        {
        }
    }
    /**
     * Class WPML_Elementor_Form
     */
    class WPML_Elementor_Form extends \WPML_Elementor_Module_With_Items
    {
        /**
         * @return string
         */
        public function get_items_field()
        {
        }
        /**
         * @return array
         */
        public function get_fields()
        {
        }
        /**
         * @param string $field
         *
         * @return string
         */
        protected function get_title($field)
        {
        }
        /**
         * @param string $field
         *
         * @return string
         */
        protected function get_editor_type($field)
        {
        }
    }
}
namespace WPML\PB\Elementor\Modules {
    class MediaCarousel extends \WPML_Elementor_Module_With_Items
    {
        /**
         * @return string
         */
        public function get_items_field()
        {
        }
        /**
         * @return array
         */
        public function get_fields()
        {
        }
        /**
         * @param string $field
         *
         * @return string
         */
        protected function get_title($field)
        {
        }
        /**
         * @param string $field
         *
         * @return string
         */
        protected function get_editor_type($field)
        {
        }
    }
}
namespace {
    /**
     * Class WPML_Elementor_Accordion
     */
    class WPML_Elementor_Accordion extends \WPML_Elementor_Module_With_Items
    {
        /**
         * @return string
         */
        public function get_items_field()
        {
        }
        /**
         * @return array
         */
        public function get_fields()
        {
        }
        /**
         * @param string $field
         *
         * @return string
         */
        protected function get_title($field)
        {
        }
        /**
         * @param string $field
         *
         * @return string
         */
        protected function get_editor_type($field)
        {
        }
    }
    /**
     * Class WPML_Elementor_Slides
     */
    class WPML_Elementor_Slides extends \WPML_Elementor_Module_With_Items
    {
        /**
         * @return string
         */
        public function get_items_field()
        {
        }
        /**
         * @return array
         */
        public function get_fields()
        {
        }
        /**
         * @param string $field
         *
         * @return string
         */
        protected function get_title($field)
        {
        }
        /**
         * @param string $field
         *
         * @return string
         */
        protected function get_editor_type($field)
        {
        }
    }
}
namespace WPML\PB\Elementor\Modules {
    class MulitpleGallery extends \WPML_Elementor_Module_With_Items
    {
        protected function get_title($field)
        {
        }
        public function get_fields()
        {
        }
        protected function get_editor_type($field)
        {
        }
        public function get_items_field()
        {
        }
    }
}
namespace {
    /**
     * Class WPML_Elementor_Toggle
     */
    class WPML_Elementor_Toggle extends \WPML_Elementor_Module_With_Items
    {
        /**
         * @return string
         */
        public function get_items_field()
        {
        }
        /**
         * @return array
         */
        public function get_fields()
        {
        }
        /**
         * @param string $field
         *
         * @return string
         */
        protected function get_title($field)
        {
        }
        /**
         * @param string $field
         *
         * @return string
         */
        protected function get_editor_type($field)
        {
        }
    }
    /**
     * Class WPML_Elementor_Price_Table
     */
    class WPML_Elementor_Price_Table extends \WPML_Elementor_Module_With_Items
    {
        /**
         * @return string
         */
        public function get_items_field()
        {
        }
        /**
         * @return array
         */
        public function get_fields()
        {
        }
        /**
         * @param string $field
         *
         * @return string
         */
        protected function get_title($field)
        {
        }
        /**
         * @param string $field
         *
         * @return string
         */
        protected function get_editor_type($field)
        {
        }
    }
}
namespace WPML\PB\Elementor\Modules {
    class Reviews extends \WPML_Elementor_Module_With_Items
    {
        protected function get_title($field)
        {
        }
        public function get_fields()
        {
        }
        protected function get_editor_type($field)
        {
        }
        public function get_items_field()
        {
        }
    }
}
namespace {
    /**
     * Class WPML_Elementor_Tabs
     */
    class WPML_Elementor_Tabs extends \WPML_Elementor_Module_With_Items
    {
        /**
         * @return string
         */
        public function get_items_field()
        {
        }
        /**
         * @return array
         */
        public function get_fields()
        {
        }
        /**
         * @param string $field
         *
         * @return string
         */
        protected function get_title($field)
        {
        }
        /**
         * @param string $field
         *
         * @return string
         */
        protected function get_editor_type($field)
        {
        }
    }
    /**
     * Class WPML_Elementor_Icon_List
     */
    class WPML_Elementor_Icon_List extends \WPML_Elementor_Module_With_Items
    {
        /**
         * @return string
         */
        public function get_items_field()
        {
        }
        /**
         * @return array
         */
        public function get_fields()
        {
        }
        /**
         * @param string $field
         *
         * @return string
         */
        protected function get_title($field)
        {
        }
        /**
         * @param string $field
         *
         * @return string
         */
        protected function get_editor_type($field)
        {
        }
    }
    /**
     * Class WPML_Elementor_Integration_Factory
     */
    class WPML_Elementor_Integration_Factory
    {
        const SLUG = 'elementor';
        /**
         * @return WPML_Page_Builders_Integration
         */
        public function create()
        {
        }
    }
    class WPML_Elementor_DB_Factory
    {
        /**
         * @return null|WPML_Elementor_DB
         */
        public function create()
        {
        }
    }
    /**
     * Class WPML_Compatibility_Theme_Enfold
     */
    class WPML_Compatibility_Theme_Enfold
    {
        /** @var TranslationManagement */
        private $translation_management;
        /**
         * @param TranslationManagement $translation_management
         */
        public function __construct(\TranslationManagement $translation_management)
        {
        }
        public function init_hooks()
        {
        }
        /**
         * Enfold's page builder is keeping the content in the custom field "_aviaLayoutBuilderCleanData" (maybe to prevent the content
         * from being altered by another plugin). The standard post content will be displayed only if the field
         * "_aviaLayoutBuilder_active" or "_avia_builder_shortcode_tree" does not exist.
         *
         * "_aviaLayoutBuilder_active" and "_avia_builder_shortcode_tree" fields should be set to "copy" in wpml-config.xml.
         *
         * @param int     $post_id
         * @param WP_Post $post
         */
        public function wp_insert_post_action($post_id, $post)
        {
        }
        /**
         * @param string $content
         * @param int    $post_id
         *
         * @return string
         */
        public function get_content_from_custom_field($content, $post_id)
        {
        }
        /**
         * @param int    $master_post_id
         * @param string $lang
         * @param array  $post_array
         * @param int    $id
         */
        function sync_duplicate($master_post_id, $lang, $post_array, $id)
        {
        }
        /**
         * @param int $post_id
         *
         * @return bool
         */
        private function is_active($post_id)
        {
        }
        /**
         * @return bool
         */
        private function is_using_standard_wp_editor()
        {
        }
        /**
         * Enfold/Avia replaces "'" with "’" in enfold/onfig-templatebuilder/avia-template-builder/assets/js/avia-builder.js:1312
         * We just follow the same replacement pattern for string translations
         *
         * @param null|string $translation
         * @param bool        $is_attribute
         *
         * @return null|string
         */
        public function replace_single_quotes($translation, $is_attribute)
        {
        }
        /**
         * @param bool    $isBuiltWithShortcodes
         * @param WP_Post $post
         *
         * @return bool
         */
        public function isPostBuiltWithShortcodes($isBuiltWithShortcodes, \WP_Post $post)
        {
        }
    }
    class WPML_Cornerstone_Data_Settings implements \IWPML_Page_Builders_Data_Settings
    {
        /**
         * @return string
         */
        public function get_meta_field()
        {
        }
        /**
         * @return string
         */
        public function get_node_id_field()
        {
        }
        /**
         * @return array
         */
        public function get_fields_to_copy()
        {
        }
        /**
         * @param array $data
         *
         * @return array
         */
        public function convert_data_to_array($data)
        {
        }
        /**
         * @param array $data
         *
         * @return string
         */
        public function prepare_data_for_saving(array $data)
        {
        }
        /**
         * @return string
         */
        public function get_pb_name()
        {
        }
        /**
         * @return array
         */
        public function get_fields_to_save()
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param int $postId
         *
         * @return bool
         */
        public function is_handling_post($postId)
        {
        }
    }
    class WPML_PB_Cornerstone_Handle_Custom_Fields_Factory implements \IWPML_Backend_Action_Loader, \IWPML_AJAX_Action_Loader, \IWPML_Frontend_Action_Loader
    {
        public function create()
        {
        }
    }
}
namespace WPML\PB\Cornerstone\Config {
    class Factory extends \WPML\PB\Config\Factory
    {
        const DATA = ['configRoot' => 'cornerstone-widgets', 'defaultConditionKey' => '_type', 'pbKey' => 'cornerstone', 'translatableWidgetsHook' => 'wpml_cornerstone_modules_to_translate'];
        /**
         * @inheritDoc
         */
        protected function getPbData($key)
        {
        }
    }
}
namespace WPML\PB\Cornerstone\Hooks {
    class Editor implements \IWPML_Frontend_Action
    {
        public function add_hooks()
        {
        }
        /**
         * @return int|null
         */
        private static function getEditedId()
        {
        }
    }
}
namespace {
    class WPML_Cornerstone_Update_Translation extends \WPML_Page_Builders_Update_Translation
    {
        /** @param array $data_array */
        public function update_strings_in_modules(array &$data_array)
        {
        }
        /**
         * @param string $node_id
         * @param array  $settings
         *
         * @return mixed
         */
        protected function update_strings_in_node($node_id, $settings)
        {
        }
    }
    class WPML_Cornerstone_Integration_Factory
    {
        const SLUG = 'cornerstone';
        public function create()
        {
        }
    }
    class WPML_Cornerstone_Register_Strings extends \WPML_Page_Builders_Register_Strings
    {
        /**
         * @param array $data_array
         * @param array $package
         */
        protected function register_strings_for_modules(array $data_array, array $package)
        {
        }
    }
}
namespace WPML\PB\Cornerstone {
    class Utils
    {
        const MODULE_TYPE_PREFIX = 'classic:';
        /**
         * @param array $data
         * @return string
         */
        public static function getNodeId($data)
        {
        }
        /**
         * Check if the type is a layout type.
         *
         * @param string $type The type to check.
         * @return bool
         */
        public static function typeIsLayout($type)
        {
        }
    }
}
namespace {
    class WPML_Cornerstone_Media_Nodes_Iterator implements \IWPML_PB_Media_Nodes_Iterator
    {
        const ITEMS_FIELD = \WPML_Cornerstone_Module_With_Items::ITEMS_FIELD;
        /** @var WPML_Cornerstone_Media_Node_Provider $node_provider */
        private $node_provider;
        public function __construct(\WPML_Cornerstone_Media_Node_Provider $node_provider)
        {
        }
        /**
         * @param array $data_array
         * @param string $lang
         * @param string $source_lang
         *
         * @return array
         */
        public function translate($data_array, $lang, $source_lang)
        {
        }
        /**
         * @param stdClass $settings
         * @param string $lang
         * @param string $source_lang
         *
         * @return stdClass
         */
        private function translate_node($settings, $lang, $source_lang)
        {
        }
    }
    class WPML_Cornerstone_Media_Node_Provider
    {
        private $media_translate;
        private $nodes = array();
        public function __construct(\WPML_Page_Builders_Media_Translate $media_translate)
        {
        }
        /**
         * @param string $type
         *
         * @return WPML_Cornerstone_Media_Node|null
         */
        public function get($type)
        {
        }
        /**
         * @param string $type
         */
        private function add($type)
        {
        }
    }
    class WPML_Cornerstone_Update_Media_Factory implements \IWPML_PB_Media_Update_Factory
    {
        /** @var WPML_Page_Builders_Media_Translate|null $media_translate */
        private $media_translate;
        public function create()
        {
        }
        /** @return WPML_Page_Builders_Media_Translate */
        private function get_media_translate()
        {
        }
    }
    class WPML_Cornerstone_Media_Hooks_Factory implements \IWPML_Backend_Action_Loader, \IWPML_Frontend_Action_Loader
    {
        public function create()
        {
        }
    }
    abstract class WPML_Cornerstone_Media_Node
    {
        /** @var WPML_Page_Builders_Media_Translate $media_translate */
        protected $media_translate;
        public function __construct(\WPML_Page_Builders_Media_Translate $media_translate)
        {
        }
        /**
         * @param array  $node_data
         * @param string $target_lang
         * @param string $source_lang
         *
         * @return array
         */
        abstract function translate($node_data, $target_lang, $source_lang);
    }
    abstract class WPML_Cornerstone_Media_Node_With_URLs extends \WPML_Cornerstone_Media_Node
    {
        /** @return array */
        protected abstract function get_keys();
        /**
         * @param array  $node_data
         * @param string $target_lang
         * @param string $source_lang
         *
         * @return array
         */
        public function translate($node_data, $target_lang, $source_lang)
        {
        }
    }
    class WPML_Cornerstone_Media_Node_Classic_Promo extends \WPML_Cornerstone_Media_Node_With_URLs
    {
        protected function get_keys()
        {
        }
    }
    class WPML_Cornerstone_Media_Node_Classic_Image extends \WPML_Cornerstone_Media_Node_With_URLs
    {
        protected function get_keys()
        {
        }
    }
    class WPML_Cornerstone_Media_Node_Image extends \WPML_Cornerstone_Media_Node_With_URLs
    {
        protected function get_keys()
        {
        }
    }
    class WPML_Cornerstone_Media_Node_Classic_Card extends \WPML_Cornerstone_Media_Node_With_URLs
    {
        protected function get_keys()
        {
        }
    }
    class WPML_Cornerstone_Media_Node_Classic_Creative_CTA extends \WPML_Cornerstone_Media_Node_With_URLs
    {
        protected function get_keys()
        {
        }
    }
    class WPML_Cornerstone_Media_Node_Classic_Feature_Box extends \WPML_Cornerstone_Media_Node_With_URLs
    {
        protected function get_keys()
        {
        }
    }
}
namespace WPML\PB\Cornerstone\Styles {
    class Hooks implements \IWPML_Backend_Action, \IWPML_Frontend_Action, \IWPML_DIC_Action
    {
        const META_KEY_OLD = '_cs_generated_styles';
        const META_KEY_V6 = '_cs_generated_tss';
        /** @var callable $shouldInvalidateStyle */
        private $shouldInvalidateStyles;
        /**
         * Hooks constructor.
         *
         * @param \WPML_PB_Last_Translation_Edit_Mode $lastEditMode
         * @param \WPML_Cornerstone_Data_Settings     $dataSettings
         */
        public function __construct(\WPML_PB_Last_Translation_Edit_Mode $lastEditMode, \WPML_Cornerstone_Data_Settings $dataSettings)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param int $postId
         */
        public function invalidateStylesInTranslation($postId)
        {
        }
    }
}
namespace {
    /**
     * Class WPML_Cornerstone_Translatable_Nodes
     */
    class WPML_Cornerstone_Translatable_Nodes implements \IWPML_Page_Builders_Translatable_Nodes
    {
        const SETTINGS_FIELD = '_modules';
        /**
         * Nodes to translate.
         *
         * @var array
         */
        protected $nodes_to_translate;
        /**
         * Get translatable node.
         *
         * @param string|int $node_id  Node id.
         * @param array      $settings Node settings.
         *
         * @return WPML_PB_String[]
         */
        public function get($node_id, $settings)
        {
        }
        /**
         * Update translatable node.
         *
         * @param string         $node_id  Node id.
         * @param array          $settings Node settings.
         * @param WPML_PB_String $string   String object.
         *
         * @return array
         */
        public function update($node_id, $settings, \WPML_PB_String $string)
        {
        }
        /**
         * @param array $node_data
         *
         * @return WPML_Cornerstone_Module_With_Items[]
         */
        private function get_integration_instances($node_data)
        {
        }
        /**
         * Get string name.
         *
         * @param string $node_id  Node id.
         * @param array  $field    Page builder field.
         * @param array  $settings Node settings.
         *
         * @return string
         */
        public function get_string_name($node_id, $field, $settings)
        {
        }
        /**
         * Get wrap tag for string.
         * Used for SEO, can contain (h1...h6, etc.)
         *
         * @param array $settings Field settings.
         *
         * @return string
         */
        private function get_wrap_tag($settings)
        {
        }
        /**
         * Check if node condition is ok.
         *
         * @param array $node_data Node data.
         * @param array $settings  Node settings.
         *
         * @return bool
         */
        private function conditions_ok($node_data, $settings)
        {
        }
        /**
         * @return array[]
         */
        public static function get_nodes_to_translate()
        {
        }
        /**
         * Initialize translatable nodes.
         */
        public function initialize_nodes_to_translate()
        {
        }
    }
    /**
     * Class WPML_Cornerstone_Module_With_Items
     */
    abstract class WPML_Cornerstone_Module_With_Items implements \IWPML_Page_Builders_Module
    {
        const ITEMS_FIELD = \WPML_Cornerstone_Translatable_Nodes::SETTINGS_FIELD;
        /**
         * @param string $field
         *
         * @return string
         */
        protected abstract function get_title($field);
        /** @return array */
        protected abstract function get_fields();
        /**
         * @param string $field
         *
         * @return string
         */
        protected abstract function get_editor_type($field);
        /**
         * @param array $settings
         *
         * @return array
         */
        protected function get_items($settings)
        {
        }
        /**
         * @param string|int $node_id
         * @param array $settings
         * @param WPML_PB_String[] $strings
         *
         * @return WPML_PB_String[]
         */
        public function get($node_id, $settings, $strings)
        {
        }
        /**
         * @param string|int $node_id
         * @param array $settings
         * @param WPML_PB_String $string
         *
         * @return array
         */
        public function update($node_id, $settings, \WPML_PB_String $string)
        {
        }
        private function get_string_name($node_id, $value, $type, $key = '')
        {
        }
    }
}
namespace WPML\PB\Cornerstone\Modules {
    class ModuleWithItemsFromConfig extends \WPML_Cornerstone_Module_With_Items
    {
        /** @var array $fieldDefinitions */
        private $fieldDefinitions;
        public function __construct(array $config)
        {
        }
        /**
         * @inheritDoc
         */
        public function get_title($field)
        {
        }
        /**
         * @inheritDoc
         */
        public function get_fields()
        {
        }
        /**
         * @inheritDoc
         */
        public function get_editor_type($field)
        {
        }
    }
}
namespace {
    class WPML_Cornerstone_Tabs extends \WPML_Cornerstone_Module_With_Items
    {
        /**
         * @return array
         */
        public function get_fields()
        {
        }
        /**
         * @param string $field
         *
         * @return string
         */
        protected function get_title($field)
        {
        }
        /**
         * @param string $field
         *
         * @return string
         */
        protected function get_editor_type($field)
        {
        }
    }
    class WPML_Cornerstone_Accordion extends \WPML_Cornerstone_Module_With_Items
    {
        /**
         * @return array
         */
        public function get_fields()
        {
        }
        /**
         * @param string $field
         *
         * @return string
         */
        protected function get_title($field)
        {
        }
        /**
         * @param string $field
         *
         * @return string
         */
        protected function get_editor_type($field)
        {
        }
    }
}
namespace WPML\Compatibility\Divi {
    /**
     * Divi replaces double quotes with %22 when saving shortcode attributes.
     * ATE needs valid HTML so we temporarily decode the double quotes.
     * When we receive the translation we undo the change.
     *
     * @package WPML\Compatibility\Divi
     */
    class DoubleQuotes implements \IWPML_Backend_Action, \IWPML_Frontend_Action
    {
        public function add_hooks()
        {
        }
        /**
         * @param string $string
         * @param string $encoding
         *
         * @return string
         */
        public function decode($string, $encoding)
        {
        }
        /**
         * @param string $string
         * @param string $encoding
         *
         * @return string
         */
        public function encode($string, $encoding)
        {
        }
        /**
         * @param string $string
         * @param string $encoding
         *
         * @return bool
         */
        private static function canHaveDoubleQuotes($string, $encoding)
        {
        }
    }
}
namespace {
    class WPML_Compatibility_Divi implements \IWPML_DIC_Action, \IWPML_Backend_Action, \IWPML_Frontend_Action
    {
        const REGEX_REMOVE_OPENING_PARAGRAPH = '/(<p>[\\n\\r]*)([\\n\\r]{1}\\[\\/et_)/m';
        const REGEX_REMOVE_CLOSING_PARAGRAPH = '/(\\[et_.*\\][\\n\\r]{1})([\\n\\r]*<\\/p>)/m';
        /** @var SitePress */
        private $sitepress;
        /**
         * @param SitePress $sitepress
         */
        public function __construct(\SitePress $sitepress)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @return bool
         */
        private function is_standard_editor_used()
        {
        }
        public function display_warning_notice()
        {
        }
        /**
         * These actions require the custom widget area to be initialized.
         *
         * @param array $actions
         * @return array
         */
        public function load_builder_for_ajax_actions($actions)
        {
        }
        public function load_resources_if_they_are_required()
        {
        }
        private static function get_translation_dashboard_page()
        {
        }
        private static function get_translation_editor_page()
        {
        }
        private static function get_duplication_action_page()
        {
        }
        private static function get_sl_page()
        {
        }
        private static function is_tm_active()
        {
        }
        private static function is_sl_active()
        {
        }
        private function register_layouts()
        {
        }
        /**
         * The global layout is not properly extracted from the page
         * because it adds <p> tags either not opened or not closed.
         *
         * See the global content below as an example:
         *
         * [et_pb_section prev_background_color="#000000" next_background_color="#000000"][et_pb_text]
         *
         * </p>
         * <p>Global text 1 EN5</p>
         * <p>
         *
         * [/et_pb_text][/et_pb_section]
         *
         * We also need to remove `prev_background` and `next_background` attributes which are added from the page.
         *
         * @param string $content
         * @param int    $post_id
         */
        public function cleanup_global_layout_content($content, $post_id)
        {
        }
        public function should_handle_shortcode_content($handle_content, $shortcode)
        {
        }
        /**
         * Check if a global module has excluded any translatable text that we need to handle
         *
         * @param array $shortcode
         * {
         *      @type string $tag.
         *      @type string $content.
         *      @type string $attributes.
         * }
         * @return bool
         */
        private function is_excluded_from_sync($shortcode)
        {
        }
        /**
         * Get a list of translatable attributes for a shortcode tag.
         * This includes the inner content and any attributes found in XML configuration.
         *
         * @param string $tag The shortcode tag.
         * @return array
         */
        private function get_translatable_shortcode_attributes($tag)
        {
        }
        /**
         * Remove the `_et_pb_old_content` meta field from translation jobs, except for products.
         *
         * @param array  $fields  Array of fields to translate.
         * @param object $post_id The ID of the post being translated.
         *
         * @return array
         */
        public function remove_old_content_from_translation($fields, $post_id)
        {
        }
        /**
         * Remove the `_et_pb_old_content` meta field from words count, except for products.
         *
         * @param array  $fields_to_count Array of custom fields to count.
         * @param object $post_id         The ID of the post for which we are counting the words.
         *
         * @return array
         */
        public function remove_old_content_from_words_count($fields_to_count, $post_id)
        {
        }
    }
}
namespace WPML\Compatibility\Divi\Hooks {
    class Editor implements \IWPML_Backend_Action
    {
        public function add_hooks()
        {
        }
    }
}
namespace {
    class WPML_Compatibility_Divi_Notice extends \WPML_Notice
    {
        const ID = 'wpml-compatibility-divi-editor-warning';
        const GROUP = 'wpml-compatibility-divi';
        public function __construct()
        {
        }
        /**
         * @return string
         */
        private function get_message()
        {
        }
    }
}
namespace WPML\Compatibility\Divi {
    class ThemeBuilder implements \IWPML_Action
    {
        /** @var SitePress */
        private $sitepress;
        /**
         * @param SitePress $sitepress
         */
        public function __construct(\SitePress $sitepress)
        {
        }
        /**
         * Add filters and actions.
         */
        public function add_hooks()
        {
        }
        /**
         * Gets all post types that are layouts.
         */
        private static function get_types()
        {
        }
        /**
         * Access the global post types array to tweak the settings for layouts
         */
        public function make_layouts_editable()
        {
        }
        /**
         * Translate theme builder layout ids in the frontend.
         *
         * @param string $value   The layout id.
         * @param int    $post_id The post it belongs to.
         * @param string $key     The meta key we are handling.
         * @param bool   $single  Fetch a single row or an array.
         * @return string
         */
        public function translate_layout_ids($value, $post_id, $key, $single)
        {
        }
        /**
         * Remove the 'View' link because you can't view layouts alone.
         *
         * @param string $link   The complete link.
         * @param string $text   The text to link.
         * @param object $job    The corresponding translation job.
         * @param string $prefix The prefix of the element type.
         * @param string $type   The element type.
         *
         * @return string
         */
        public function document_view_layout_link($link, $text, $job, $prefix, $type)
        {
        }
        /**
         * Check if a certain Type is a theme builder layout.
         *
         * @param string $type The type to check.
         *
         * @return bool
         */
        private function is_theme_layout($type)
        {
        }
    }
}
namespace WPML\Compatibility {
    abstract class BaseDynamicContent implements \IWPML_DIC_Action, \IWPML_Backend_Action
    {
        /** @var SitePress */
        private $sitepress;
        /**
         * @param SitePress $sitepress
         */
        public function __construct(\SitePress $sitepress)
        {
        }
        /**
         * Add filters and actions.
         */
        public function add_hooks()
        {
        }
        /**
         * Sets dynamic content to be translatable.
         *
         * @param string $string   The decoded string so far.
         * @param string $encoding The encoding used.
         *
         * @return string|array
         */
        public abstract function decode_dynamic_content($string, $encoding);
        /**
         * Rebuilds dynamic content with translated strings.
         *
         * @param string|array $string   The field array or string.
         * @param string       $encoding The encoding used.
         *
         * @return string
         */
        public abstract function encode_dynamic_content($string, $encoding);
        /**
         * Check if a certain field contains dynamic content.
         *
         * @param string $string The string to check.
         *
         * @return bool
         */
        protected abstract function is_dynamic_content($string);
        /**
         * Decode a dynamic-content field.
         *
         * @param string $string The string to decode.
         *
         * @return array
         */
        protected abstract function decode_field($string);
        /**
         * Encode a dynamic-content field.
         *
         * @param array $field The field to encode.
         *
         * @return string
         */
        protected abstract function encode_field($field);
    }
}
namespace WPML\Compatibility\Divi {
    class DynamicContent extends \WPML\Compatibility\BaseDynamicContent
    {
        const ENCODED_CONTENT_START = '@ET-DC@';
        const ENCODED_CONTENT_END = '@';
        /** @var array */
        protected $positions = ['before', 'after'];
        /**
         * Sets $positions dynamic content to be translatable.
         *
         * @param string $string   The decoded string so far.
         * @param string $encoding The encoding used.
         *
         * @return string|array
         */
        public function decode_dynamic_content($string, $encoding)
        {
        }
        /**
         * Rebuilds dynamic content with translated strings.
         *
         * @param string|array $string   The field array or string.
         * @param string       $encoding The encoding used.
         *
         * @return string
         */
        public function encode_dynamic_content($string, $encoding)
        {
        }
        /**
         * Decode a dynamic-content field.
         *
         * @param string $string The string to decode.
         *
         * @return bool
         */
        protected function is_dynamic_content($string)
        {
        }
        /**
         * Decode a dynamic-content field.
         *
         * @param string $string The string to decode.
         *
         * @return array
         */
        protected function decode_field($string)
        {
        }
        /**
         * Encode a dynamic-content field.
         *
         * @param array $field The field to encode.
         *
         * @return string
         */
        protected function encode_field($field)
        {
        }
    }
    class Builder implements \IWPML_Frontend_Action, \IWPML_Backend_Action, \IWPML_AJAX_Action
    {
        public function add_hooks()
        {
        }
        public function switch_to_user_language($locale)
        {
        }
    }
    class ThemeBuilderFactory implements \IWPML_Deferred_Action_Loader, \IWPML_Backend_Action_Loader, \IWPML_Frontend_Action_Loader
    {
        public function get_load_action()
        {
        }
        public function create()
        {
        }
    }
    class TinyMCE implements \IWPML_Backend_Action
    {
        public function add_hooks()
        {
        }
        /**
         * @param array $config
         *
         * @return array
         */
        public function filterEditorAutoTags($config)
        {
        }
    }
    class DiviOptionsEncoding implements \IWPML_Backend_Action, \IWPML_Frontend_Action
    {
        const CHARS_ENCODED = ['%22', '%91', '%93'];
        const CHARS_DECODED = ['"', '[', ']'];
        const DELIMITER = '_';
        const TRANSLATABLE_KEYS = ['value', 'link_url', 'link_text'];
        public function add_hooks()
        {
        }
        public function decode_divi_options($string, $encoding)
        {
        }
        public function encode_divi_options($string, $encoding)
        {
        }
    }
    class DisplayConditions implements \IWPML_Frontend_Action
    {
        const BASE64_EMPTY_ARRAY = 'W10=';
        public function add_hooks()
        {
        }
        /**
         * @param array $atts
         * @return array
         */
        public function translateAttributes($atts)
        {
        }
    }
    class Search implements \IWPML_Frontend_Action
    {
        public function add_hooks()
        {
        }
        public function add_language_form_field()
        {
        }
    }
}
namespace WPML\Compatibility\FusionBuilder\Hooks {
    class Editor implements \IWPML_Backend_Action
    {
        public function add_hooks()
        {
        }
    }
}
namespace WPML\Compatibility\FusionBuilder {
    class FormContent implements \IWPML_Backend_Action, \IWPML_Frontend_Action
    {
        const CPT_FORM = 'fusion_form';
        /** @var null|array $formOptionsInProcess */
        private $formOptionsInProcess;
        public function add_hooks()
        {
        }
        /**
         * Avada's team tried to add WPML support for forms
         * but it's not working at all. We'll just make sure
         * to detach theirs filters.
         */
        public function disableAvadaBuiltinShortcodeHooks()
        {
        }
        /**
         * Decodes form shortcodes.
         *
         * @param string|array $string
         *
         * @return array|string
         */
        public function decode($string)
        {
        }
        /**
         * Encodes form shortcodes.
         *
         * @param string|array $string
         *
         * @return string
         */
        public function encode($string)
        {
        }
        /**
         * @param array $atts
         *
         * @return array
         */
        public function convertForm($atts)
        {
        }
    }
}
namespace WPML\Compatibility\FusionBuilder\Backend {
    class Hooks implements \IWPML_Backend_Action, \IWPML_DIC_Action
    {
        public function add_hooks()
        {
        }
        public function invalidateMegamenuHook()
        {
        }
    }
}
namespace WPML\Compatibility\FusionBuilder {
    abstract class BaseHooks
    {
        const HANDLE = 'wpml-compatibility-fusion';
        const SCRIPT_SRC = '/dist/js/compatibility/fusion_builder/app.js';
        const STYLE_SRC = '/res/css/compatibility/fusion_builder.css';
        const OBJECT_NAME = 'WPML_COMPATIBILITY_FUSION';
        protected function enqueue_style()
        {
        }
        protected function enqueue_script()
        {
        }
        protected function localize_script($data)
        {
        }
        /**
         * This class was originally located in WPML Core
         * and later moved to WPML Page Builders addons.
         * As we don't have needs to build JS/CSS assets
         * in the WPML Page Builder addon, and we want to keep
         * a simple build here, we'll keep the assets in Core
         * (where it's built).
         *
         * @param string $uri
         *
         * @throws \Exception
         */
        private static function check_asset($uri)
        {
        }
        /**
         * @param string $uri
         *
         * @return string
         */
        private static function get_url($uri)
        {
        }
    }
}
namespace {
    class WPML_Compatibility_Plugin_Fusion_Global_Element_Hooks extends \WPML\Compatibility\FusionBuilder\BaseHooks implements \IWPML_Action
    {
        const BEFORE_ADD_GLOBAL_ELEMENTS_PRIORITY = 5;
        const GLOBAL_SHORTCODE_START = '[fusion_global id="';
        const ACTION = 'wpml_compatibility_fusion_get_template_translation_icons';
        const LAYOUTS_SCREEN_ID = 'avada_page_avada-layouts';
        const LAYOUTS_SCREEN_ID_BEFORE_V7 = 'fusion-builder_page_fusion-layouts';
        const SECTIONS_SCREEN_ID = 'avada-layout-sections';
        const SECTIONS_SCREEN_ID_BEFORE_V7 = 'fusion-builder_page_fusion-layout-sections';
        /** @var IWPML_Current_Language */
        private $current_language;
        /** @var WPML_Translation_Element_Factory */
        private $element_factory;
        /** @var WPML_Custom_Columns */
        private $custom_columns;
        /** @var WPML_Post_Status_Display */
        private $postStatusDisplay;
        /** @var array */
        private $activeLanguages;
        public function __construct(\IWPML_Current_Language $current_language, \WPML_Translation_Element_Factory $element_factory, \WPML_Custom_Columns $custom_columns, array $activeLanguages, \WPML_Post_Status_Display $postStatusDisplay)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param bool $render
         *
         * @return bool
         */
        public function wpml_ls_exclude_in_menu_filter($render)
        {
        }
        public function translate_global_element_ids($content)
        {
        }
        private function replace_global_id(array $matches)
        {
        }
        /**
         * Filter overrides.
         *
         * @param WP_Post|stdClass|false $override  The override.
         *
         * @return WP_Post|stdClass|false
         */
        public function fusion_get_override_filter($override)
        {
        }
        /**
         * @param array $columns
         *
         * @return array
         */
        public function add_language_column_header($columns)
        {
        }
        public function enqueue_scripts()
        {
        }
        /**
         * @param string     $column_name
         * @param array|null $item
         */
        public function add_language_column_content($column_name, $item = \null)
        {
        }
        public function get_template_translation_icons()
        {
        }
        /**
         * @param string $screenId
         *
         * @return bool
         */
        private static function isLayoutsScreen($screenId)
        {
        }
        /**
         * @param string $screenId
         *
         * @return bool
         */
        private static function isSectionsScreen($screenId)
        {
        }
    }
}
namespace WPML\Compatibility\FusionBuilder\Frontend {
    class Hooks extends \WPML\Compatibility\FusionBuilder\BaseHooks implements \IWPML_Frontend_Action, \IWPML_DIC_Action
    {
        /** @var \SitePress */
        private $sitepress;
        /** @var \WPML_Translation_Element_Factory */
        private $elementFactory;
        public function __construct(\SitePress $sitepress, \WPML_Translation_Element_Factory $elementFactory)
        {
        }
        public function add_hooks()
        {
        }
        public function frontendScripts()
        {
        }
        private function isFusionBuilderRequest()
        {
        }
        /**
         * Adds required CSS class in menu links. This CSS class is used by
         * WPML_Fix_Links_In_Display_As_Translated_Content::fix_fallback_links() to skip fixing language switcher links.
         *
         * Notes:
         * - This is intended for themes that provide custom menu walkers.
         * - For this to work, the custom menu walker must call `nav_menu_link_attributes` filter.
         *
         * @param array $atts
         * @param mixed $item
         *
         * @return array
         */
        public function addMenuLinkCssClass($atts, $item)
        {
        }
        /**
         * @param array $data
         * @return array
         */
        public function translateOffCanvasConditionId($data)
        {
        }
    }
}
namespace WPML\Compatibility\FusionBuilder {
    class DynamicContent extends \WPML\Compatibility\BaseDynamicContent
    {
        /** @var array */
        protected $positions = ['before', 'after', 'fallback'];
        /**
         * Sets $positions dynamic content to be translatable.
         *
         * @param string|array $string   The decoded string so far.
         * @param string $encoding The encoding used.
         *
         * @return string|array
         */
        public function decode_dynamic_content($string, $encoding)
        {
        }
        /**
         * Rebuilds dynamic content with translated strings.
         *
         * @param string|array $string   The field array or string.
         * @param string       $encoding The encoding used.
         *
         * @return string
         */
        public function encode_dynamic_content($string, $encoding)
        {
        }
        /**
         * Check if a certain field contains dynamic content.
         *
         * @param string $string The string to check.
         *
         * @return bool
         */
        protected function is_dynamic_content($string)
        {
        }
        /**
         * Decode a dynamic-content field.
         *
         * @param string $string The string to decode.
         *
         * @return array
         */
        protected function decode_field($string)
        {
        }
        /**
         * Encode a dynamic-content field.
         *
         * @param array $field The field to encode.
         *
         * @return string
         */
        protected function encode_field($field)
        {
        }
    }
}
namespace {
    class WPML_Compatibility_Plugin_Fusion_Hooks_Factory implements \IWPML_Frontend_Action_Loader, \IWPML_Backend_Action_Loader
    {
        public function create()
        {
        }
        /**
         * Get list of active languages.
         *
         * @return array
         */
        private function get_filtered_active_languages()
        {
        }
    }
}
namespace WPML\PB\BeaverBuilder\Config {
    class Factory extends \WPML\PB\Config\Factory
    {
        const DATA = ['configRoot' => 'beaver-builder-widgets', 'defaultConditionKey' => 'type', 'pbKey' => 'beaver-builder', 'translatableWidgetsHook' => 'wpml_beaver_builder_modules_to_translate'];
        /**
         * @inheritDoc
         */
        protected function getPbData($key)
        {
        }
    }
}
namespace {
    class WPML_Beaver_Builder_Integration_Factory
    {
        const SLUG = 'beaver-builder';
        public function create()
        {
        }
    }
}
namespace WPML\PB\BeaverBuilder\Hooks {
    class Editor implements \IWPML_Frontend_Action
    {
        public function add_hooks()
        {
        }
    }
}
namespace {
    /**
     * Class WPML_Beaver_Builder_Translatable_Nodes
     */
    class WPML_Beaver_Builder_Translatable_Nodes implements \IWPML_Page_Builders_Translatable_Nodes
    {
        /**
         * Nodes to translate.
         *
         * @var array
         */
        private $nodes_to_translate;
        /**
         * Get translatable node.
         *
         * @param string|int $node_id  Node id.
         * @param stdClass   $settings Node settings.
         *
         * @return WPML_PB_String[]
         */
        public function get($node_id, $settings)
        {
        }
        /**
         * Update translatable node.
         *
         * @param string         $node_id  Node id.
         * @param stdClass       $settings Node settings.
         * @param WPML_PB_String $string   String object.
         *
         * @return stdClass
         */
        public function update($node_id, $settings, \WPML_PB_String $string)
        {
        }
        /**
         * @param array $node_data
         *
         * @return WPML_Beaver_Builder_Module_With_Items[]
         */
        private function get_integration_instances(array $node_data)
        {
        }
        /**
         * Get string name.
         *
         * @param string   $node_id  Node id.
         * @param array    $field    Page builder field.
         * @param stdClass $settings Node settings.
         *
         * @return string
         */
        public function get_string_name($node_id, $field, $settings)
        {
        }
        /**
         * Get wrap tag for string.
         * Used for SEO, can contain (h1...h6, etc.)
         *
         * @param stdClass $settings Field settings.
         *
         * @return string
         */
        private function get_wrap_tag($settings)
        {
        }
        /**
         * Check if node condition is ok.
         *
         * @param array    $node_data Node data.
         * @param stdClass $settings  Node settings.
         *
         * @return bool
         */
        private function conditions_ok($node_data, $settings)
        {
        }
        /**
         * @return array
         */
        public static function get_nodes_to_translate()
        {
        }
        /**
         * Initialize translatable nodes.
         */
        public function initialize_nodes_to_translate()
        {
        }
    }
    class WPML_PB_Beaver_Builder_Handle_Custom_Fields_Factory implements \IWPML_Backend_Action_Loader, \IWPML_AJAX_Action_Loader, \IWPML_Frontend_Action_Loader
    {
        public function create()
        {
        }
    }
    /**
     * Class WPML_Beaver_Builder_Register_Strings
     */
    class WPML_Beaver_Builder_Register_Strings extends \WPML_Page_Builders_Register_Strings
    {
        /**
         * @param array $data_array
         * @param array $package
         */
        protected function register_strings_for_modules(array $data_array, array $package)
        {
        }
        /**
         * The modules are not in the order they appear on the page,
         * so we need to sort it before to register the strings.
         *
         * @param array $modules
         *
         * @return array
         */
        private function sort_modules_before_string_registration(array $modules)
        {
        }
        /**
         * We receive all modules as a flat tree and we need to reorder from:
         * - child A
         * - child A
         * - parent A
         * - child B
         * - parent B
         * - child B
         * - child C
         *
         * To:
         * - parent A
         * - child A
         * - child B
         * - parent B
         * - child A
         * - child B
         * - child C
         *
         * The relative positions are already sorted by `sort_modules_by_position_only`
         *
         * @param array        $all_modules
         * @param string|null  $parent_hash
         * @param array        $sorted_modules
         *
         * @return array
         */
        private function sort_modules_by_parent_and_child(array $all_modules, $parent_hash = \null, array $sorted_modules = array())
        {
        }
        /**
         * @param stdClass $a
         * @param stdClass $b
         *
         * @return int
         */
        private function sort_modules_by_position_only(\stdClass $a, \stdClass $b)
        {
        }
        /**
         * @param object $data
         *
         * @return bool
         */
        private function is_embedded_global_module($data)
        {
        }
    }
    class WPML_Beaver_Builder_Data_Settings implements \IWPML_Page_Builders_Data_Settings
    {
        /**
         * @return string
         */
        public function get_meta_field()
        {
        }
        /**
         * @return string
         */
        public function get_node_id_field()
        {
        }
        /**
         * @return array
         */
        public function get_fields_to_copy()
        {
        }
        /**
         * @param array $data
         *
         * @return array
         */
        public function convert_data_to_array($data)
        {
        }
        /**
         * @param array $data
         *
         * @return array
         */
        public function prepare_data_for_saving(array $data)
        {
        }
        /**
         * @return string
         */
        public function get_pb_name()
        {
        }
        /**
         * @return array
         */
        public function get_fields_to_save()
        {
        }
        public function add_hooks()
        {
        }
        /**
         * Adds slashes to data going into the database as WordPress
         * removes them when we save using update_metadata. This is done
         * to ensure slashes in user input aren't removed.
         *
         * Inspired by `\FLBuilderModel::slash_settings`
         *
         * @param mixed $data The data to slash.
         *
         * @return mixed The slashed data.
         */
        private function slash($data)
        {
        }
        /**
         * @param int $postId
         *
         * @return bool
         */
        public function is_handling_post($postId)
        {
        }
    }
    class WPML_Beaver_Builder_Data_Settings_For_Media extends \WPML_Beaver_Builder_Data_Settings
    {
        /**
         * @return array
         */
        public function get_fields_to_copy()
        {
        }
    }
    /**
     * Class WPML_Beaver_Builder_Update_Translation
     */
    class WPML_Beaver_Builder_Update_Translation extends \WPML_Page_Builders_Update_Translation
    {
        /** @param array $data_array */
        public function update_strings_in_modules(array &$data_array)
        {
        }
        /**
         * @param string $node_id
         * @param array $settings
         *
         * @return mixed
         */
        public function update_strings_in_node($node_id, $settings)
        {
        }
    }
}
namespace WPML\PB\BeaverBuilder\TranslationJob {
    class Hooks implements \IWPML_Backend_Action, \IWPML_Frontend_Action, \IWPML_DIC_Action
    {
        /** @var WPML_Beaver_Builder_Data_Settings $dataSettings */
        private $dataSettings;
        public function __construct(\WPML_Beaver_Builder_Data_Settings $dataSettings)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param array              $translationPackage
         * @param \stdClass|\WP_Post $post
         *
         * @return array
         */
        public function filterFieldsByPageBuilderKind(array $translationPackage, $post)
        {
        }
        /**
         * @param array              $translationPackage
         * @param \stdClass|\WP_Post $post
         *
         * @return bool
         */
        private function isPostPackage(array $translationPackage, $post)
        {
        }
        /**
         * @param array  $translationPackage
         * @param int    $postId
         * @param string $kindSlug
         *
         * @return array
         */
        private function removeFieldsFromKind(array $translationPackage, $postId, $kindSlug)
        {
        }
    }
}
namespace {
    class WPML_Beaver_Builder_Media_Node_Provider
    {
        /** @var WPML_Page_Builders_Media_Translate $media_translate */
        private $media_translate;
        /** @var WPML_Beaver_Builder_Media_Node[] */
        private $nodes = array();
        public function __construct(\WPML_Page_Builders_Media_Translate $media_translate)
        {
        }
        /**
         * @param string $type
         *
         * @return WPML_Beaver_Builder_Media_Node|null
         */
        public function get($type)
        {
        }
    }
    class WPML_Beaver_Builder_Media_Hooks_Factory implements \IWPML_Backend_Action_Loader, \IWPML_Frontend_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_Beaver_Builder_Media_Nodes_Iterator implements \IWPML_PB_Media_Nodes_Iterator
    {
        /** @var WPML_Beaver_Builder_Media_Node_Provider $node_provider */
        private $node_provider;
        public function __construct(\WPML_Beaver_Builder_Media_Node_Provider $node_provider)
        {
        }
        /**
         * @param array $data_array
         * @param string $lang
         * @param string $source_lang
         *
         * @return array
         */
        public function translate($data_array, $lang, $source_lang)
        {
        }
        /**
         * @param stdClass $settings
         * @param string $lang
         * @param string $source_lang
         *
         * @return stdClass
         */
        private function translate_node($settings, $lang, $source_lang)
        {
        }
    }
    class WPML_Beaver_Builder_Update_Media_Factory implements \IWPML_PB_Media_Update_Factory
    {
        public function create()
        {
        }
    }
    abstract class WPML_Beaver_Builder_Media_Node
    {
        /** @var WPML_Page_Builders_Media_Translate $media_translate */
        protected $media_translate;
        public function __construct(\WPML_Page_Builders_Media_Translate $media_translate)
        {
        }
        abstract function translate($node_data, $target_lang, $source_lang);
    }
    /**
     * @group media
     */
    class WPML_Beaver_Builder_Media_Node_Slideshow extends \WPML_Beaver_Builder_Media_Node
    {
        private $url_properties = array('largeURL', 'x3largeURL', 'thumbURL');
        public function translate($node_data, $target_lang, $source_lang)
        {
        }
    }
    class WPML_Beaver_Builder_Media_Node_Photo extends \WPML_Beaver_Builder_Media_Node
    {
        public function translate($node_data, $target_lang, $source_lang)
        {
        }
    }
    class WPML_Beaver_Builder_Media_Node_Gallery extends \WPML_Beaver_Builder_Media_Node
    {
        public function translate($node_data, $target_lang, $source_lang)
        {
        }
    }
    class WPML_Beaver_Builder_Media_Node_Content_Slider extends \WPML_Beaver_Builder_Media_Node
    {
        private $property_prefixes = array(
            'bg_',
            // i.e. `bg_photo` for an ID or `bg_photo_src` for a URL
            'fg_',
            'r_',
        );
        public function translate($node_data, $target_lang, $source_lang)
        {
        }
    }
    /**
     * Class WPML_Beaver_Builder_Module_With_Items
     */
    abstract class WPML_Beaver_Builder_Module_With_Items implements \IWPML_Page_Builders_Module
    {
        /**
         * @param string $field
         *
         * @return string
         */
        protected abstract function get_title($field);
        /** @return array */
        protected function get_fields()
        {
        }
        /**
         * @param string $field
         *
         * @return string
         */
        protected function get_editor_type($field)
        {
        }
        /**
         * @param object $settings
         *
         * @return array
         */
        protected function &get_items($settings)
        {
        }
        /**
         * @param string|int $node_id
         * @param object $settings
         * @param WPML_PB_String[] $strings
         *
         * @return WPML_PB_String[]
         */
        public function get($node_id, $settings, $strings)
        {
        }
        /**
         * @param string|int $node_id
         * @param object $settings
         * @param WPML_PB_String $string
         *
         * @return null
         */
        public function update($node_id, $settings, \WPML_PB_String $string)
        {
        }
        private function get_string_name($node_id, $value, $type, $key = '')
        {
        }
    }
}
namespace WPML\PB\BeaverBuilder\Modules {
    class ModuleWithItemsFromConfig extends \WPML_Beaver_Builder_Module_With_Items
    {
        /** @var array $fieldDefinitions */
        private $fieldDefinitions = [];
        /** @var string $itemsField */
        private $itemsField;
        /**
         * @param string $itemsField
         * @param array  $config
         */
        public function __construct($itemsField, array $config)
        {
        }
        private function init(array $config)
        {
        }
        /**
         * @inheritDoc
         */
        public function get_title($field)
        {
        }
        /**
         * @inheritDoc
         */
        public function get_fields()
        {
        }
        /**
         * @inheritDoc
         */
        public function get_editor_type($field)
        {
        }
        /**
         * @inheritDoc
         */
        public function &get_items($settings)
        {
        }
    }
}
namespace {
    class WPML_Beaver_Builder_Pricing_Table extends \WPML_Beaver_Builder_Module_With_Items
    {
        public function &get_items($settings)
        {
        }
        public function get_fields()
        {
        }
        protected function get_title($field)
        {
        }
        protected function get_editor_type($field)
        {
        }
    }
    class WPML_Beaver_Builder_Content_Slider extends \WPML_Beaver_Builder_Module_With_Items
    {
        public function &get_items($settings)
        {
        }
        public function get_fields()
        {
        }
        protected function get_title($field)
        {
        }
        protected function get_editor_type($field)
        {
        }
    }
    class WPML_Beaver_Builder_Tab extends \WPML_Beaver_Builder_Module_With_Items
    {
        protected function get_title($field)
        {
        }
    }
    class WPML_Beaver_Builder_Accordion extends \WPML_Beaver_Builder_Module_With_Items
    {
        protected function get_title($field)
        {
        }
    }
    class WPML_Beaver_Builder_Testimonials extends \WPML_Beaver_Builder_Module_With_Items
    {
        public function &get_items($settings)
        {
        }
        public function get_fields()
        {
        }
        protected function get_title($field)
        {
        }
        protected function get_editor_type($field)
        {
        }
    }
    class WPML_Beaver_Builder_Icon_Group extends \WPML_Beaver_Builder_Module_With_Items
    {
        public function &get_items($settings)
        {
        }
        public function get_fields()
        {
        }
        protected function get_title($field)
        {
        }
        protected function get_editor_type($field)
        {
        }
    }
}
namespace WPML\PB\Gutenberg {
    interface Integration
    {
        public function add_hooks();
    }
    class Integration_Composite implements \WPML\PB\Gutenberg\Integration
    {
        /**
         * @var Integration[] $integrations
         */
        private $integrations;
        public function add(\WPML\PB\Gutenberg\Integration $integration)
        {
        }
        public function add_hooks()
        {
        }
    }
    class XPath
    {
        /**
         * If a sequence has only one element, we will wrap it
         * in order to have the same data shape as for multiple elements.
         * Also check for type attribute
         *
         * @param array|string $data
         *
         * @return array
         */
        public static function normalize($data)
        {
        }
        /**
         * @param string|array $query
         *
         * @return array [query, type, label]
         */
        public static function parse($query)
        {
        }
    }
}
namespace WPML\PB\Gutenberg\Widgets\Block {
    class DisplayTranslation implements \IWPML_Frontend_Action, \WPML\PB\Gutenberg\Integration
    {
        const PRIORITY_BEFORE_REMOVE_BLOCK_MARKUP = 0;
        public function add_hooks()
        {
        }
    }
    class Search implements \IWPML_Frontend_Action, \WPML\PB\Gutenberg\Integration
    {
        public function add_hooks()
        {
        }
    }
    class RegisterStrings implements \IWPML_REST_Action, \WPML\PB\Gutenberg\Integration
    {
        public function add_hooks()
        {
        }
        private function getBlocks($gutenbergIntegration, $options)
        {
        }
    }
    class Strings
    {
        const PACKAGE_KIND = 'Block';
        const PACKAGE_KIND_SLUG = 'block';
        const PACKAGE_NAME = 'widget';
        const PACKAGE_TITLE = 'Widget';
        const DOMAIN = self::PACKAGE_KIND_SLUG . '-' . self::PACKAGE_NAME;
        /**
         * @param string $locale
         *
         * @return array
         * @throws \WPML\Auryn\InjectionException
         */
        public static function fromMo($locale)
        {
        }
        public static function loadStringsFromMOFile($domain, $locale)
        {
        }
        public static function createPackage()
        {
        }
    }
}
namespace {
    class WPML_Gutenberg_Integration_Factory
    {
        /** @return \WPML\PB\Gutenberg\Integration_Composite */
        public function create()
        {
        }
        /**
         * @return WPML_Gutenberg_Integration
         */
        public function create_gutenberg_integration()
        {
        }
        private function create_strings_in_block($config_option)
        {
        }
        /** @return bool */
        private function should_translate_reusable_blocks()
        {
        }
    }
    class WPML_Gutenberg_Strings_Registration
    {
        /** @var WPML\PB\Gutenberg\StringsInBlock\StringsInBlock $strings_in_blocks */
        private $strings_in_blocks;
        /** @var WPML_ST_String_Factory $string_factory */
        private $string_factory;
        /** @var WPML_PB_Reuse_Translations $reuse_translations */
        private $reuse_translations;
        /** @var WPML_PB_String_Translation $string_translation */
        private $string_translation;
        /** @var int $string_location */
        private $string_location;
        /** @var array $leftover_strings */
        private $leftover_strings;
        /** @var WPML_Translate_Link_Targets $translate_link_targets */
        private $translate_link_targets;
        /** @var callable $set_link_translations */
        private $set_link_translations;
        public function __construct(\WPML\PB\Gutenberg\StringsInBlock\StringsInBlock $strings_in_blocks, \WPML_ST_String_Factory $string_factory, \WPML_PB_Reuse_Translations $reuse_translations, \WPML_PB_String_Translation $string_translation, \WPML_Translate_Link_Targets $translate_link_targets, callable $set_link_translations)
        {
        }
        /**
         * @param WP_Post $post
         * @param array $package_data
         */
        public function register_strings(\WP_Post $post, $package_data)
        {
        }
        /**
         * @param array $blocks
         * @param array $package_data
         */
        public function register_strings_from_widget(array $blocks, array $package_data)
        {
        }
        /**
         * @param array $blocks
         * @param array $package_data
         */
        private function register_blocks(array $blocks, array $package_data, $post_id)
        {
        }
        private function update_string_location(array $package_data, \stdClass $string_data)
        {
        }
        /**
         * Update string wrap tag.
         * Used for SEO, can contain (h1...h6, etc.)
         *
         * @param array    $package_data Package.
         * @param stdClass $string_data  String in the package.
         * @param string   $wrap_tag     String wrap.
         */
        private function update_wrap_tag($package_data, \stdClass $string_data, $wrap_tag)
        {
        }
        /** @var string $string_value */
        private function remove_string_from_leftovers($string_value)
        {
        }
    }
    /**
     * Class WPML_Gutenberg_Integration
     */
    class WPML_Gutenberg_Integration implements \WPML\PB\Gutenberg\Integration
    {
        const PACKAGE_ID = 'Gutenberg';
        const GUTENBERG_OPENING_START = '<!-- wp:';
        const GUTENBERG_CLOSING_START = '<!-- /wp:';
        const CLASSIC_BLOCK_NAME = 'core/classic-block';
        /**
         * @var WPML\PB\Gutenberg\StringsInBlock\StringsInBlock
         */
        private $strings_in_blocks;
        /**
         * @var WPML_Gutenberg_Config_Option
         */
        private $config_option;
        /**
         * @var WPML_Gutenberg_Strings_Registration $strings_registration
         */
        private $strings_registration;
        public function __construct(\WPML\PB\Gutenberg\StringsInBlock\StringsInBlock $strings_in_block, \WPML_Gutenberg_Config_Option $config_option, \WPML_Gutenberg_Strings_Registration $strings_registration)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param array $plugins
         *
         * @return array
         */
        function page_builder_support_required($plugins)
        {
        }
        /**
         * @param WP_Post $post
         * @param array $package_data
         */
        function register_strings(\WP_Post $post, $package_data)
        {
        }
        public function register_strings_from_widget(array $blocks, array $package_data)
        {
        }
        /**
         * @param WP_Block_Parser_Block|array $block
         *
         * @return WP_Block_Parser_Block
         */
        public static function sanitize_block($block)
        {
        }
        /**
         * @param string $package_kind
         * @param int $translated_post_id
         * @param WP_Post $original_post
         * @param array $string_translations
         * @param string $lang
         */
        public function string_translated($package_kind, $translated_post_id, $original_post, $string_translations, $lang)
        {
        }
        /**
         * @param string $content
         * @param array  $string_translations
         * @param string $lang
         *
         * @return string
         */
        public function replace_strings_in_blocks($content, $string_translations, $lang)
        {
        }
        /**
         * @param array $blocks
         * @param array $string_translations
         * @param string $lang
         *
         * @return array
         */
        private function update_block_translations($blocks, $string_translations, $lang)
        {
        }
        /**
         * @param array|WP_Block_Parser_Block $block
         *
         * @return string
         */
        public static function render_block($block)
        {
        }
        public static function has_non_empty_attributes(\WP_Block_Parser_Block $block)
        {
        }
        /**
         * @param WP_Block_Parser_Block $block
         *
         * @return string
         */
        private static function render_inner_HTML($block)
        {
        }
        /**
         * Since Gutenberg 4.2.0 and WP 5.0.0 we have a new
         * property WP_Block_Parser_Block::$innerContent which
         * provides the sequence of inner elements:
         * strings or null if it's an inner block.
         *
         * @see WP_Block_Parser_Block::$innerContent
         *
         * @param WP_Block_Parser_Block $block
         *
         * @return string
         */
        private static function render_inner_HTML_with_innerContent($block)
        {
        }
        /**
         * @param WP_Block_Parser_Block $block
         *
         * @return string
         */
        private static function render_inner_HTML_with_guess_parts($block)
        {
        }
        /**
         * The gutenberg parser prior to version 4.2.0 (Gutenberg) and 5.0.0 (WP)
         * doesn't handle inner blocks correctly.
         * It should really return the HTML before and after the blocks
         * We're just guessing what it is here
         * The usual innerHTML would be: <div class="xxx"></div>
         * The columns block also includes new lines: <div class="xxx">\n\n</div>
         * So we try to split at ></ and also include white space and new lines between the tags
         *
         * @param WP_Block_Parser_Block $block
         *
         * @return array
         */
        private static function guess_inner_HTML_parts($block)
        {
        }
        /**
         * @param array $config_data
         *
         * @return array
         */
        public function wpml_config_filter($config_data)
        {
        }
        /**
         * @param bool    $translate
         * @param WP_Post $post
         * @param string  $context
         *
         * @return bool
         */
        public function should_body_be_translated_filter($translate, \WP_Post $post, $context = '')
        {
        }
        /**
         * @param WP_Post $post
         *
         * @return bool
         */
        private function is_gutenberg_post(\WP_Post $post)
        {
        }
        public static function parse_blocks($content)
        {
        }
        /**
         * Remove Gutenberg (string package) from translation dashboard filters
         *
         * @param array $types
         *
         * @return mixed
         */
        public function remove_package_strings_type_filter($types)
        {
        }
    }
}
namespace WPML\PB\Gutenberg\StringsInBlock {
    interface StringsInBlock
    {
        /**
         * @param \WP_Block_Parser_Block $block
         *
         * @return array
         */
        public function find(\WP_Block_Parser_Block $block);
        /**
         * @param \WP_Block_Parser_Block $block
         * @param array                 $string_translations
         * @param string                $lang
         *
         * @return \WP_Block_Parser_Block
         */
        public function update(\WP_Block_Parser_Block $block, array $string_translations, $lang);
    }
    abstract class Base implements \WPML\PB\Gutenberg\StringsInBlock\StringsInBlock
    {
        const LONG_STRING_LENGTH = 80;
        /** @var array */
        private $block_types;
        /** @var \WPML_Gutenberg_Config_Option $config_option */
        private $config_option;
        public function __construct(\WPML_Gutenberg_Config_Option $config_option)
        {
        }
        /**
         * @param \WP_Block_Parser_Block $block
         * @param string                 $type e.g. `xpath` or `key`
         *
         * @return array|string|null
         */
        protected function get_block_config(\WP_Block_Parser_Block $block, $type)
        {
        }
        /**
         * @param  \WP_Block_Parser_Block  $block
         *
         * @return string
         */
        protected function get_block_label(\WP_Block_Parser_Block $block)
        {
        }
        /**
         * @param \WP_Block_Parser_Block $block
         * @param string                 $type
         *
         * @return array|null
         */
        public function get_namespace_config(\WP_Block_Parser_Block $block, $type)
        {
        }
        /**
         * @param \WP_Block_Parser_Block $block
         *
         * @return bool
         */
        private function has_empty_config(\WP_Block_Parser_Block $block)
        {
        }
        /**
         * @param string $string
         *
         * @return string
         */
        public static function get_string_type($string)
        {
        }
        /**
         * @param string $id
         * @param string $name
         * @param string $text
         * @param string $type
         *
         * @return object
         */
        protected function build_string($id, $name, $text, $type)
        {
        }
        /**
         * @param string $name
         * @param string $text
         *
         * @return string
         */
        protected function get_string_id($name, $text)
        {
        }
    }
}
namespace WPML\PB\Gutenberg\StringsInBlock\DOMHandler {
    abstract class DOMHandle
    {
        const INNER_HTML_PARTIAL = 'partial';
        const INNER_HTML_FULL = 'full';
        /**
         * @param string $html
         *
         * @return \DOMXPath
         */
        public function getDomxpath($html)
        {
        }
        /**
         * @param string $html
         *
         * @return \DOMDocument
         */
        public function getDom($html)
        {
        }
        /**
         * @param \DOMNode $element
         * @param string   $context
         *
         * @return array
         */
        protected function getInnerHTML(\DOMNode $element, $context)
        {
        }
        /**
         * @param \DOMNode $element
         * @param string   $context
         *
         * @return string
         */
        protected abstract function getInnerHTMLFromChildNodes(\DOMNode $element, $context);
        /**
         * @param \DOMNode $element
         *
         * @return array
         */
        public function getPartialInnerHTML(\DOMNode $element)
        {
        }
        /**
         * @param \DOMNode $element
         *
         * @return array
         */
        public function getFullInnerHTML(\DOMNode $element)
        {
        }
        /**
         * @param \DOMNode $element
         * @param string   $value
         */
        public function setElementValue(\DOMNode $element, $value)
        {
        }
        /**
         * @param \DOMNode $clone
         * @param \DOMNode $element
         */
        protected abstract function appendExtraChildNodes(\DOMNode $clone, \DOMNode $element);
        /**
         * @param \DOMNode $element
         *
         * @return \DOMNode
         */
        private function cloneNodeWithoutChildren(\DOMNode $element)
        {
        }
        protected function getAsHTML5(\DOMNode $element)
        {
        }
        public static function removeCdataFromStyleTag($innerHTML)
        {
        }
        public static function removeCdataFromScriptTag($innerHTML)
        {
        }
    }
    class StandardBlock extends \WPML\PB\Gutenberg\StringsInBlock\DOMHandler\DOMHandle
    {
        /**
         * @param \DOMNode $element
         * @param string   $context
         *
         * @return string
         */
        protected function getInnerHTMLFromChildNodes(\DOMNode $element, $context)
        {
        }
        /**
         * @param \DOMNode $clone
         * @param \DOMNode $element
         */
        protected function appendExtraChildNodes(\DOMNode $clone, \DOMNode $element)
        {
        }
    }
    class HtmlBlock extends \WPML\PB\Gutenberg\StringsInBlock\DOMHandler\StandardBlock
    {
        /**
         * @param \DOMNode $element
         * @param string   $context
         *
         * @return array
         */
        protected function getInnerHTML(\DOMNode $element, $context)
        {
        }
    }
    class ListBlock extends \WPML\PB\Gutenberg\StringsInBlock\DOMHandler\DOMHandle
    {
        /**
         * @param \DOMNode $element
         * @param string   $context
         *
         * @return string
         */
        protected function getInnerHTMLFromChildNodes(\DOMNode $element, $context)
        {
        }
        /**
         * @param \DOMNode $clone
         * @param \DOMNode $element
         */
        protected function appendExtraChildNodes(\DOMNode $clone, \DOMNode $element)
        {
        }
        /**
         * @param \DOMNode $node
         *
         * @return \DOMNode|null
         */
        private function getChildList(\DOMNode $node)
        {
        }
        /**
         * @param \DOMNode $node
         *
         * @return bool
         */
        private function isListNode(\DOMNode $node)
        {
        }
    }
}
namespace WPML\PB\Gutenberg\StringsInBlock {
    class Collection implements \WPML\PB\Gutenberg\StringsInBlock\StringsInBlock
    {
        /** @var StringsInBlock[] $parsers */
        private $parsers = [];
        /**
         * @param StringsInBlock[] $parsers
         */
        public function __construct(array $parsers)
        {
        }
        /**
         * @param \WP_Block_Parser_Block $block
         *
         * @return array
         */
        public function find(\WP_Block_Parser_Block $block)
        {
        }
        /**
         * @param \WP_Block_Parser_Block $block
         * @param array                  $string_translations
         * @param string                 $lang
         *
         * @return \WP_Block_Parser_Block
         */
        public function update(\WP_Block_Parser_Block $block, array $string_translations, $lang)
        {
        }
    }
    class Attributes extends \WPML\PB\Gutenberg\StringsInBlock\Base
    {
        /**
         * @param \WP_Block_Parser_Block $block
         *
         * @return array
         */
        public function find(\WP_Block_Parser_Block $block)
        {
        }
        /**
         * @param array  $attrs
         * @param array  $config_keys
         * @param \WP_Block_Parser_Block $block
         *
         * @return array
         */
        private function findStringsRecursively(array $attrs, array $config_keys, \WP_Block_Parser_Block $block)
        {
        }
        /**
         * @param string $attr_key
         * @param array  $config_keys
         *
         * @return string|null
         */
        private function getMatchingConfigKey($attr_key, array $config_keys)
        {
        }
        /**
         * @param array  $config_keys
         * @param string $matching_key
         *
         * @return array
         */
        private function getChildrenConfigKeys(array $config_keys, $matching_key)
        {
        }
        /**
         * If the config key is not already a regex
         * we will replace the wildcard (*) and make it a valid regex.
         *
         * @param string $config_key
         * @param array  $key_attrs
         *
         * @return string
         */
        private function getRegex($config_key, array $key_attrs)
        {
        }
        /**
         * @param array $key_attrs
         *
         * @return bool
         */
        private function isRegex(array $key_attrs)
        {
        }
        /**
         * @param \WP_Block_Parser_Block $block
         * @param array                  $string_translations
         * @param string                 $lang
         *
         * @return \WP_Block_Parser_Block
         */
        public function update(\WP_Block_Parser_Block $block, array $string_translations, $lang)
        {
        }
        /**
         * @param array  $attrs
         * @param array  $config_keys
         * @param array  $translations
         * @param string $lang
         * @param string $block_name
         *
         * @return array
         */
        public function updateStringsRecursively(array $attrs, array $config_keys, array $translations, $lang, $block_name)
        {
        }
        /**
         * @param \WP_Block_Parser_Block $block
         *
         * @return array
         */
        private function getAttributes(\WP_Block_Parser_Block $block)
        {
        }
        /**
         * @param \WP_Block_Parser_Block $block
         *
         * @return array
         */
        private function getKeyConfig(\WP_Block_Parser_Block $block)
        {
        }
        /**
         * @return array
         */
        private function getMatchAllKey()
        {
        }
    }
    class HTML extends \WPML\PB\Gutenberg\StringsInBlock\Base
    {
        const LIST_BLOCK_NAME = 'core/list';
        const HTML_BLOCK_NAME = 'core/html';
        /**
         * @param \WP_Block_Parser_Block $block
         *
         * @return array
         */
        public function find(\WP_Block_Parser_Block $block)
        {
        }
        /**
         * @param \WP_Block_Parser_Block $block
         * @param array                  $string_translations
         * @param string                 $lang
         *
         * @return \WP_Block_Parser_Block
         */
        public function update(\WP_Block_Parser_Block $block, array $string_translations, $lang)
        {
        }
        /**
         * This is required when a block has innerBlocks and translatable content at the root.
         * Unfortunately we cannot use the DOM because we have only HTML extracts which
         * are not valid taken independently.
         *
         * {@internal
         *          innerContent => [
         *              '<div><p>The title</p>',
         *              null,
         *              '\n\n',
         *              null,
         *              '</div>'
         *          ]}
         *
         * @param \WP_Block_Parser_Block $block
         * @param \DOMNode               $element
         * @param string                 $translation
         *
         * @return \WP_Block_Parser_Block
         */
        public static function update_string_in_innerContent(\WP_Block_Parser_Block $block, \DOMNode $element, $translation)
        {
        }
        /**
         * @param \WP_Block_Parser_Block $block
         *
         * @return null|string
         */
        private function get_block_string_id(\WP_Block_Parser_Block $block)
        {
        }
        /**
         * @param \WP_Block_Parser_Block $block
         *
         * @return array|null
         */
        private function get_block_queries(\WP_Block_Parser_Block $block)
        {
        }
        /**
         * @param \WP_Block_Parser_Block $block
         *
         * @return ListBlock|StandardBlock|HtmlBlock
         */
        private function get_dom_handler(\WP_Block_Parser_Block $block)
        {
        }
        /**
         * @param string                 $text
         * @param string                 $lang
         * @param \WP_Block_Parser_Block $block
         * @param array                  $string_translations
         * @param \DOMNode               $element
         * @param DOMHandle              $dom_handle
         *
         * @return \WP_Block_Parser_Block
         */
        private function updateTranslationInBlock($text, $lang, \WP_Block_Parser_Block $block, array $string_translations, $element, $dom_handle)
        {
        }
        private function getTranslation($text, $lang, \WP_Block_Parser_Block $block, array $string_translations)
        {
        }
        private static function preserveNewLines($original, $translation)
        {
        }
    }
}
namespace WPML\PB\Gutenberg\Navigation {
    class Frontend implements \WPML\PB\Gutenberg\Integration
    {
        public function add_hooks()
        {
        }
        /**
         * @param array $data
         *
         * @return array
         */
        public function translateNavigationId($data)
        {
        }
    }
}
namespace WPML\PB\Gutenberg\ReusableBlocks {
    class Basket
    {
        /** @var \WPML_Translation_Basket|null $translation_basket */
        private $translation_basket = null;
        public function update_basket($basket_portion)
        {
        }
    }
    abstract class Manage
    {
        /** @var Blocks */
        protected $blocks;
        /** @var Translation */
        protected $translation;
        public function __construct(\WPML\PB\Gutenberg\ReusableBlocks\Blocks $blocks, \WPML\PB\Gutenberg\ReusableBlocks\Translation $translation)
        {
        }
        /**
         * @param \WPML\Collect\Support\Collection $blocks
         *
         * [
         *  (object) [
         *      'block_id'     => 1,
         *      'target_langs' => ['fr' => 1, 'de' => 1],
         *      'source_lang'  => 'en',
         *  ],
         *  (object) [
         *      'block_id'     => 2,
         *      'target_langs' => ['de' => 1],
         *      'source_lang'  => 'en',
         *  ],
         * ]
         *
         * @return \WPML\Collect\Support\Collection
         */
        protected function getBlockElementsToAdd($blocks)
        {
        }
        /**
         * @param \WPML\Collect\Support\Collection $post_elements
         *
         * @return \WPML\Collect\Support\Collection
         */
        protected function getBlocksFromPostElements(\WPML\Collect\Support\Collection $post_elements)
        {
        }
        /**
         * @param \WPML_TM_Translation_Batch_Element|BasketElement|mixed $element
         *
         * @return array
         */
        public function findBlocksInElement($element)
        {
        }
        /**
         * @param int    $block_id
         * @param string $target_lang
         *
         * @return bool
         */
        protected function requiresTranslation($block_id, $target_lang)
        {
        }
        /**
         * We will remove target langs that do not require a job
         * for the reusable block.
         *
         * @param \stdClass $block
         *
         * @return \stdClass
         */
        public function selectTargetLangs(\stdClass $block)
        {
        }
    }
    class AdminIntegration implements \WPML\PB\Gutenberg\Integration
    {
        /** @var ManageBatch $manage_batch */
        private $manage_batch;
        /** @var ManageBasket $manage_basket */
        private $manage_basket;
        /** @var Notice $notice */
        private $notice;
        public function __construct(\WPML\PB\Gutenberg\ReusableBlocks\ManageBatch $manage_batch, \WPML\PB\Gutenberg\ReusableBlocks\ManageBasket $manage_basket, \WPML\PB\Gutenberg\ReusableBlocks\Notice $notice)
        {
        }
        public function add_hooks()
        {
        }
        private function isSubmittingBasket()
        {
        }
        /**
         * Add reusable block elements that are used inside
         * the post elements already in the batch.
         *
         * @param \WPML_TM_Translation_Batch $batch
         *
         * @return \WPML_TM_Translation_Batch
         */
        public function addBlocksToBatch(\WPML_TM_Translation_Batch $batch)
        {
        }
        /**
         * Add reusable blocks that are used in the
         * post items in the basket.
         *
         * @param array $data
         */
        public function addBlocksToBasket(array $data)
        {
        }
        /**
         * @param array $added_jobs
         */
        public function notifyExtraJobsToTranslator(array $added_jobs)
        {
        }
    }
    class Notice
    {
        /** @var \WPML_Notices $notices */
        private $notices;
        /** @var JobLinks */
        private $job_links;
        public function __construct(\WPML_Notices $notices, \WPML\PB\Gutenberg\ReusableBlocks\JobLinks $job_links)
        {
        }
        public function addJobsCreatedAutomatically(array $job_ids)
        {
        }
        /**
         * @return array
         */
        private function getRestrictScreenIDs()
        {
        }
    }
    class ManageBatch extends \WPML\PB\Gutenberg\ReusableBlocks\Manage
    {
        public function addBlocks(\WPML_TM_Translation_Batch $batch)
        {
        }
    }
    class Integration implements \WPML\PB\Gutenberg\Integration
    {
        /** @var Translation $translation */
        private $translation;
        public function __construct(\WPML\PB\Gutenberg\ReusableBlocks\Translation $translation)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * Converts the block in the current language
         *
         * @param array $block
         *
         * @return array
         */
        public function convertReusableBlock(array $block)
        {
        }
        /**
         * The filter hook `render_block_data` applies only for root blocks,
         * nested blocks are not passing through this hook.
         * That's why we need to re-render reusable nested blocks.
         *
         * @param string $blockContent
         * @param array  $block
         *
         * @return string
         */
        public function reRenderInnerReusableBlock($blockContent, $block)
        {
        }
    }
    class BasketElement
    {
        /** @var int */
        private $element_id;
        /** @var string */
        private $source_lang;
        /** @var array */
        private $target_langs;
        /**
         * @param int    $element_id
         * @param string $source_lang
         * @param array  $target_languages
         */
        public function __construct($element_id, $source_lang, array $target_languages)
        {
        }
        /**
         * @return int
         */
        public function get_element_id()
        {
        }
        /**
         * @return string
         */
        public function get_element_type()
        {
        }
        /**
         * @return string
         */
        public function get_source_lang()
        {
        }
        /**
         * @return array
         */
        public function get_target_langs()
        {
        }
    }
    class Blocks
    {
        /**
         * @param array $block
         *
         * @return bool
         */
        public static function isReusable(array $block)
        {
        }
        /**
         * @param array $block
         *
         * @return int
         */
        public static function getReusableId(array $block)
        {
        }
        /**
         * We get block IDs recursively to find possible
         * nested reusable blocks.
         * 
         * @param int $post_id
         *
         * @return array
         */
        public function getChildrenIdsFromPost($post_id)
        {
        }
    }
    class Translation
    {
        const POST_TYPE = 'wp_block';
        /** @var \SitePress $sitepress */
        private $sitepress;
        /**
         * @param \SitePress $sitepress
         */
        public function __construct(\SitePress $sitepress)
        {
        }
        /**
         * @param array        $block
         * @param null|string  $lang
         *
         * @return array
         */
        public function convertBlock(array $block, $lang = null)
        {
        }
        /**
         * @param int         $block_id
         * @param string|null $lang
         *
         * @return int
         */
        public function convertBlockId($block_id, $lang = null)
        {
        }
        /**
         * @param int $post_id
         *
         * @return string|null
         */
        public function getSourceLang($post_id)
        {
        }
    }
    class ManageBasket extends \WPML\PB\Gutenberg\ReusableBlocks\Manage
    {
        /** @var Basket $translation_basket */
        private $translation_basket;
        public function __construct(\WPML\PB\Gutenberg\ReusableBlocks\Blocks $blocks, \WPML\PB\Gutenberg\ReusableBlocks\Translation $translation, \WPML\PB\Gutenberg\ReusableBlocks\Basket $translation_basket)
        {
        }
        /**
         * @param array $data
         */
        public function addBlocks(array $data)
        {
        }
        /**
         * @param array $data
         *
         * @return \WPML\Collect\Support\Collection
         */
        private function extractAddedPostElements(array $data)
        {
        }
        /**
         * @param array $target_langs
         * @param int   $post_id
         *
         * @return array
         */
        private function filterTargetLangs(array $target_langs, $post_id)
        {
        }
    }
    class JobLinks
    {
        /** @var JobFactory $job_factory */
        private $job_factory;
        public function __construct(\WPML\PB\Gutenberg\ReusableBlocks\JobFactory $job_factory)
        {
        }
        /**
         * @param array $job_ids
         *
         * @return \WPML\Collect\Support\Collection
         */
        public function get(array $job_ids)
        {
        }
        /**
         * @param int $job_id
         *
         * @return string|null
         */
        private function getJobEditLink($job_id)
        {
        }
    }
    class JobFactory
    {
        /** @var \WPML_Translation_Job_Factory|null $job_factory */
        private $job_factory;
        public function get_translation_job($job_id)
        {
        }
    }
}
namespace WPML\PB\Gutenberg\ConvertIdsInBlock {
    class Base
    {
        /**
         * @param array $block
         *
         * @return array
         */
        public function convert(array $block)
        {
        }
        /**
         * @param array|int $ids
         * @param string    $elementSlug e.g. "page", "category", ...
         * @param string    $elementType "post" or "taxonomy".
         *
         * @return array|int
         */
        public static function convertIds($ids, $elementSlug, $elementType)
        {
        }
        /**
         * @param string $slug
         * @param string $type
         *
         * @return bool
         */
        private static function isDisplayedAsTranslated($slug, $type)
        {
        }
    }
    class TagAttributes extends \WPML\PB\Gutenberg\ConvertIdsInBlock\Base
    {
        private $attributesToConvert;
        public function __construct(array $attributesToConvert)
        {
        }
        public function convert(array $block)
        {
        }
    }
    class BlockAttributes extends \WPML\PB\Gutenberg\ConvertIdsInBlock\Base
    {
        private $attributesToConvert;
        public function __construct(array $attributesToConvert)
        {
        }
        public function convert(array $block)
        {
        }
    }
    class Composite extends \WPML\PB\Gutenberg\ConvertIdsInBlock\Base
    {
        /** @var Base[] $converters */
        private $converters;
        public function __construct(array $converters)
        {
        }
        public function convert(array $block)
        {
        }
    }
}
namespace {
    /**
     * Class WPML_Gutenberg_Config_Option
     */
    class WPML_Gutenberg_Config_Option
    {
        const OPTION = 'wpml-gutenberg-config';
        const SEARCH_METHOD_WILDCARD = 'wildcards';
        const SEARCH_METHOD_REGEX = 'regex';
        /**
         * @param array $config_data
         */
        public function update_from_config($config_data)
        {
        }
        /**
         * @param array $blocks
         * @param array $block_config
         *
         * @return array
         */
        private function add_block_xpaths(array $blocks, array $block_config)
        {
        }
        /**
         * @param array $blocks
         * @param array $block_config
         *
         * @return array
         */
        private function add_block_attribute_keys(array $blocks, array $block_config)
        {
        }
        private function add_block_label(array $blocks, array $block_config)
        {
        }
        /**
         * @param array $keys_config
         *
         * @return array
         */
        private function get_keys_recursively(array $keys_config)
        {
        }
        /**
         * If a sequence has only one element, we will wrap it
         * in order to have the same data shape as for multiple elements.
         *
         * @param array $data
         *
         * @return array
         */
        private function normalize_key_data(array $data)
        {
        }
        public function get()
        {
        }
    }
}
namespace WPML\PB {
    class LegacyIntegration
    {
        public static function load()
        {
        }
    }
    /**
     * We had a first project of WPML Page Builders abandoned
     * some years before (last version v1.1.3), when we included the code inside ST,
     * and then in Core as composer package.
     *
     * This old plugin contains outdated code and we cannot afford
     * to have it running in parallel while the new version is also
     * embedded in Core.
     */
    class OldPlugin
    {
        /**
         * @return bool
         */
        public static function handle()
        {
        }
        private static function addNotice()
        {
        }
    }
}
namespace WPML\PB\Config {
    class Storage
    {
        const OPTION_GROUP = 'api-pb-config';
        /** @var OptionManager $optionManager */
        private $optionManager;
        /** @var string $pbKey */
        private $pbKey;
        public function __construct(\WPML\WP\OptionManager $optionManager, $pbKey)
        {
        }
        public function get()
        {
        }
        public function update(array $pbConfig)
        {
        }
    }
    class Parser
    {
        /** @var string $configRoot */
        private $configRoot;
        /** @var string $defaultConditionKey */
        private $defaultConditionKey;
        public function __construct($configRoot, $defaultConditionKey)
        {
        }
        /**
         * Receives a raw config array (from XML) and convert it into
         * a page builder configuration array.
         *
         * @see WPML_Elementor_Translatable_Nodes::get_nodes_to_translate()
         *
         * @param array $allConfig
         *
         * @return array
         */
        public function extract(array $allConfig)
        {
        }
        /**
         * @param array  $widget
         * @param string $widgetName
         *
         * @return array
         */
        private function parseConditions(array $widget, $widgetName)
        {
        }
        /**
         * @param array $rawFields
         *
         * @return array
         */
        private function parseFields(array $rawFields)
        {
        }
        /**
         * @param array $widget
         *
         * @return array
         */
        private function parseIntegrationClasses(array $widget)
        {
        }
        /**
         * If a sequence has only one element, we will wrap it
         * in order to have the same data shape as for multiple elements.
         *
         * @param array $partialConfig
         *
         * @return array
         */
        public function normalize(array $partialConfig)
        {
        }
    }
    class Hooks implements \IWPML_Action
    {
        const PRIORITY_AFTER_DEFAULT = 20;
        /** @var Parser $parser */
        private $parser;
        /** @var Storage $storage */
        private $storage;
        /** @var string $translatableWidgetsHook */
        private $translatableWidgetsHook;
        public function __construct(\WPML\PB\Config\Parser $parser, \WPML\PB\Config\Storage $storage, $translatableWidgetsHook)
        {
        }
        public function add_hooks()
        {
        }
        public function extractConfig(array $allConfig)
        {
        }
        /**
         * @param array $widgets
         *
         * @return array
         */
        public function extendTranslatableWidgets(array $widgets)
        {
        }
    }
}
namespace {
    class WPML_TM_Page_Builders
    {
        const PACKAGE_TYPE_EXTERNAL = 'external';
        const TRANSLATION_COMPLETE = 10;
        const FIELD_STYLE_AREA = 'AREA';
        const FIELD_STYLE_VISUAL = 'VISUAL';
        const FIELD_STYLE_LINK = 'LINK';
        /** @var SitePress $sitepress */
        private $sitepress;
        public function __construct(\SitePress $sitepress)
        {
        }
        /**
         * Filter translation job data.
         *
         * @param array $translation_package Translation package.
         * @param mixed $post                Post.
         *
         * @return array
         */
        public function translation_job_data_filter(array $translation_package, $post)
        {
        }
        /**
         * @param int      $new_element_id
         * @param array    $fields
         * @param stdClass $job
         */
        public function pro_translation_completed_action($new_element_id, array $fields, \stdClass $job)
        {
        }
        /**
         * Adjust translation fields.
         *
         * @param array    $fields Translation fields.
         * @param stdClass $job    Translation job.
         *
         * @return array
         */
        public function adjust_translation_fields_filter(array $fields, $job)
        {
        }
        /**
         * @param array $layout
         *
         * @return array
         */
        public function job_layout_filter(array $layout)
        {
        }
        /**
         * @param string $link
         * @param int    $post_id
         * @param string $lang
         * @param int    $trid
         *
         * @return string
         */
        public function link_to_translation_filter($link, $post_id, $lang, $trid)
        {
        }
        /**
         * @param string $field_slug
         *
         * @return WPML_TM_Page_Builders_Field_Wrapper
         */
        public function create_field_wrapper($field_slug)
        {
        }
    }
    class WPML_TM_Page_Builders_Hooks
    {
        /* @var WPML_TM_Page_Builders $worker */
        private $worker;
        /** @var SitePress $sitepress */
        private $sitepress;
        /**
         * WPML_TM_Page_Builders constructor.
         *
         * @param WPML_TM_Page_Builders $worker
         */
        public function __construct(\WPML_TM_Page_Builders $worker = \null, \SitePress $sitepress)
        {
        }
        public function init_hooks()
        {
        }
        /**
         * @param array $translation_package
         * @param mixed $post
         *
         * @return array
         */
        public function translation_job_data_filter(array $translation_package, $post)
        {
        }
        /**
         * @param int      $new_post_id
         * @param array    $fields
         * @param stdClass $job
         */
        public function pro_translation_completed_action($new_post_id, array $fields, \stdClass $job)
        {
        }
        /**
         * Filter translation fields.
         *
         * @param array    $fields Translation fields.
         * @param stdClass $job    Translation job.
         *
         * @return array
         */
        public function adjust_translation_fields_filter(array $fields, $job)
        {
        }
        /**
         * @param array $layout
         *
         * @return array
         */
        public function job_layout_filter(array $layout)
        {
        }
        /**
         * @param string $link
         * @param int    $post_id
         * @param string $lang
         * @param int    $trid
         *
         * @return string
         */
        public function link_to_translation_filter($link, $post_id, $lang, $trid)
        {
        }
        /**
         * Remove "Page Builder ShortCode Strings" from translation dashboard filters
         *
         * @param array $types
         *
         * @return mixed
         */
        public function remove_shortcode_strings_type_filter($types)
        {
        }
        /**
         * @return WPML_TM_Page_Builders
         */
        private function get_worker()
        {
        }
    }
    class WPML_PB_Handle_Post_Body implements \IWPML_Backend_Action, \IWPML_Frontend_Action, \IWPML_DIC_Action
    {
        private $page_builders_built;
        public function __construct(\WPML_Page_Builders_Page_Built $page_builders_built)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param int $translate
         * @param WP_Post $post
         *
         * @return int
         */
        public function should_translate($translate, \WP_Post $post)
        {
        }
        /**
         * @param int $new_post_id
         * @param int $original_post_id
         * @param array $fields
         */
        public function copy($new_post_id, $original_post_id, array $fields)
        {
        }
        /**
         * @param array $fields
         *
         * @return bool
         */
        private function job_has_packages(array $fields)
        {
        }
    }
    class WPML_PB_Handle_Custom_Fields
    {
        protected $data_settings;
        public function __construct(\IWPML_Page_Builders_Data_Settings $data_settings)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param bool $is_page_builder_page
         * @param WP_Post $post
         *
         * @return bool
         */
        public function is_page_builder_page_filter($is_page_builder_page, \WP_Post $post)
        {
        }
        /**
         * @param int $new_post_id
         * @param int $original_post_id
         */
        public function copy_custom_fields($new_post_id, $original_post_id)
        {
        }
        /**
         * @param int $new_post_id
         * @param int $original_post_id
         * @param string $field
         */
        public static function copy_field($new_post_id, $original_post_id, $field)
        {
        }
        /**
         * @param mixed $data
         *
         * @return mixed string
         */
        public static function slash_json($data)
        {
        }
    }
    /**
     * WPML_TM_Page_Builders_Field_Wrapper class file.
     *
     * @package wpml-page-builders
     */
    /**
     * Class WPML_TM_Page_Builders_Field_Wrapper
     */
    class WPML_TM_Page_Builders_Field_Wrapper
    {
        const SLUG_BASE = 'package-string-';
        /**
         * Field slug.
         *
         * @var false|string
         */
        private $field_slug;
        /**
         * Package id.
         *
         * @var string|false|null
         */
        private $package_id;
        /**
         * String id.
         *
         * @var string|false|null
         */
        private $string_id;
        /**
         * WPML_TM_Page_Builders_Field_Wrapper constructor.
         *
         * @param string $field_slug Field slug.
         */
        public function __construct($field_slug)
        {
        }
        /**
         * Check if package is valid.
         *
         * @param bool $package_must_exist Demand existence of the package.
         *
         * @return bool
         */
        public function is_valid($package_must_exist = \false)
        {
        }
        /**
         * Get package id.
         *
         * @return false|string
         */
        public function get_package_id()
        {
        }
        /**
         * Get package.
         *
         * @return WPML_Package|null
         */
        public function get_package()
        {
        }
        /**
         * Get string id.
         *
         * @return false|string
         */
        public function get_string_id()
        {
        }
        /**
         * Get field slug.
         *
         * @return string
         */
        public function get_field_slug()
        {
        }
        /**
         * Get string type.
         *
         * @return false|string
         */
        public function get_string_type()
        {
        }
        /**
         * Get string wrap tag.
         *
         * @param stdClass $string WPML string.
         *
         * @return string
         */
        public static function get_wrap_tag($string)
        {
        }
        /**
         * Generate field slug.
         *
         * @param int $package_id Package id.
         * @param int $string_id  String id.
         *
         * @return string
         */
        public static function generate_field_slug($package_id, $string_id)
        {
        }
        /**
         * Extract string id.
         *
         * @param string $field_slug Field slug.
         *
         * @return false|string
         */
        private function extract_string_id($field_slug)
        {
        }
        /**
         * Extract string package id.
         *
         * @param string $field_slug Field slug.
         *
         * @return false|string
         */
        private function extract_string_package_id($field_slug)
        {
        }
        /**
         * Get string title.
         *
         * @return string|bool
         */
        public function get_string_title()
        {
        }
    }
    class WPML_Page_Builders_Page_Built
    {
        private $config;
        public function __construct(\WPML_Config_Built_With_Page_Builders $config)
        {
        }
        /**
         * @param WP_Post $post
         *
         * @return bool
         */
        public function is_page_builder_page(\WP_Post $post)
        {
        }
    }
    /**
     * Based on https://github.com/paulgb/simplediff/blob/master/php/simplediff.php
     */
    class WPML_ST_Diff
    {
        /**
         * @param string[] $old_words
         * @param string[] $new_words
         *
         * @return array
         */
        public static function diff($old_words, $new_words)
        {
        }
        /**
         * @param string $old_text
         * @param string $new_text
         *
         * @return float|int
         */
        public static function get_sameness_percent($old_text, $new_text)
        {
        }
    }
    interface IWPML_PB_Media_Update
    {
        /**
         * @param WP_Post $post
         */
        public function translate($post);
    }
    class WPML_Page_Builders_Update_Media implements \IWPML_PB_Media_Update
    {
        /** @var WPML_Page_Builders_Update $pb_update */
        private $pb_update;
        /** @var WPML_Translation_Element_Factory $element_factory */
        private $element_factory;
        /** @var IWPML_PB_Media_Nodes_Iterator $node_iterator */
        protected $node_iterator;
        /** @var WPML_Page_Builders_Media_Usage|null $media_usage */
        protected $media_usage;
        public function __construct(\WPML_Page_Builders_Update $pb_update, \WPML_Translation_Element_Factory $element_factory, \IWPML_PB_Media_Nodes_Iterator $node_iterator, \WPML_Page_Builders_Media_Usage $media_usage = \null)
        {
        }
        /**
         * @param WP_Post $post
         */
        public function translate($post)
        {
        }
    }
    class WPML_Page_Builders_Media_Hooks implements \IWPML_Action
    {
        /** @var IWPML_PB_Media_Update_Factory $media_update_factory */
        private $media_update_factory;
        /** @var string $page_builder_slug */
        private $page_builder_slug;
        /**
         * WPML_Page_Builders_Media_Hooks constructor.
         *
         * @param IWPML_PB_Media_Update_Factory $media_update_factory
         * @param string                        $page_builder_slug
         */
        public function __construct(\IWPML_PB_Media_Update_Factory $media_update_factory, $page_builder_slug)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param IWPML_PB_Media_Update[] $updaters
         *
         * @return IWPML_PB_Media_Update[]
         */
        public function add_media_updater($updaters)
        {
        }
        /**
         * @param string  $content
         * @param WP_Post $post
         *
         * @return string
         */
        public function add_package_strings_content($content, $post)
        {
        }
    }
    class WPML_Page_Builders_Media_Usage
    {
        /** @var WPML_Page_Builders_Media_Translate $media_translate */
        private $media_translate;
        /** @var WPML_Media_Usage_Factory $media_usage_factory */
        private $media_usage_factory;
        public function __construct(\WPML_Page_Builders_Media_Translate $media_translate, \WPML_Media_Usage_Factory $media_usage_factory)
        {
        }
        /** @param int $post_id */
        public function update($post_id)
        {
        }
    }
    class WPML_Page_Builders_Media_Translate
    {
        /** @var WPML_Translation_Element_Factory $element_factory */
        private $element_factory;
        /** @var WPML_Media_Image_Translate $image_translate */
        protected $image_translate;
        /** @var array $translated_urls */
        protected $translated_urls = array();
        /** @var (WP_Post|null)[] $translated_posts */
        protected $translated_posts = array();
        /** @var array $translated_ids */
        private $translated_ids = array();
        public function __construct(\WPML_Translation_Element_Factory $element_factory, \WPML_Media_Image_Translate $image_translate)
        {
        }
        /**
         * @param string $url
         * @param string $lang
         * @param string $source_lang
         *
         * @return string
         */
        public function translate_image_url($url, $lang, $source_lang)
        {
        }
        /**
         * @param int    $id
         * @param string $lang
         *
         * @return int
         */
        public function translate_id($id, $lang)
        {
        }
        /**
         * @param int    $id
         * @param string $lang
         *
         * @return WP_Post|null
         */
        private function get_translated_attachment($id, $lang)
        {
        }
        /** @param int $id */
        private function add_translated_id($id)
        {
        }
        public function reset_translated_ids()
        {
        }
        /** @return array */
        public function get_translated_ids()
        {
        }
    }
    class WPML_Page_Builders_Media_Shortcodes
    {
        const TYPE_URL = 'media-url';
        const TYPE_IDS = 'media-ids';
        /** @var WPML_Page_Builders_Media_Translate $media_translate */
        private $media_translate;
        /** @var string $target_lang */
        private $target_lang;
        /** @var string $source_lang */
        private $source_lang;
        /** @var array $config */
        private $config;
        public function __construct(\WPML_Page_Builders_Media_Translate $media_translate, array $config)
        {
        }
        /**
         * @param string $content
         *
         * @return string
         */
        public function translate($content)
        {
        }
        /**
         * @param string $content
         *
         * @return bool
         */
        public function has_media_shortcode($content)
        {
        }
        /**
         * @param array $shortcode
         *
         * @return array
         */
        private function sanitize_shortcode(array $shortcode)
        {
        }
        /**
         * @param string $content
         * @param string $tag
         * @param array  $attributes
         *
         * @return string
         */
        private function translate_attributes($content, $tag, array $attributes)
        {
        }
        /**
         * @param string $content
         * @param string $tag
         * @param array  $data
         *
         * @return string
         */
        private function translate_content($content, $tag, array $data)
        {
        }
        /**
         * @param string $type
         *
         * @return string
         */
        private function get_callback($type)
        {
        }
        /**
         * @param array $matches
         *
         * @return string
         */
        private function replace_url_callback(array $matches)
        {
        }
        /**
         * @param array $matches
         *
         * @return string
         */
        private function replace_ids_callback(array $matches)
        {
        }
        /**
         * @param string $target_lang
         *
         * @return self
         */
        public function set_target_lang($target_lang)
        {
        }
        /**
         * @param string $source_lang
         *
         * @return self
         */
        public function set_source_lang($source_lang)
        {
        }
    }
    class WPML_Page_Builders_Media_Shortcodes_Update implements \IWPML_PB_Media_Update
    {
        /** @var WPML_Translation_Element_Factory $element_factory */
        private $element_factory;
        /** @var WPML_Page_Builders_Media_Shortcodes $media_shortcodes*/
        private $media_shortcodes;
        /** @var WPML_Page_Builders_Media_Usage $media_usage */
        private $media_usage;
        public function __construct(\WPML_Translation_Element_Factory $element_factory, \WPML_Page_Builders_Media_Shortcodes $media_shortcodes, \WPML_Page_Builders_Media_Usage $media_usage)
        {
        }
        /**
         * @param WP_Post $post
         */
        public function translate($post)
        {
        }
    }
    class WPML_Page_Builders_Media_Shortcodes_Update_Factory implements \IWPML_PB_Media_Update_Factory
    {
        /** @var WPML_PB_Config_Import_Shortcode WPML_PB_Config_Import_Shortcode */
        private $page_builder_config_import;
        /** @var WPML_Translation_Element_Factory|null $element_factory */
        private $element_factory;
        /** @var WPML_Page_Builders_Media_Translate|null $media_translate */
        private $media_translate;
        public function __construct(\WPML_PB_Config_Import_Shortcode $page_builder_config_import)
        {
        }
        public function create()
        {
        }
        /** @return WPML_Translation_Element_Factory */
        private function get_element_factory()
        {
        }
        /** @return WPML_Page_Builders_Media_Translate */
        private function get_media_translate()
        {
        }
    }
}
namespace WPML\PB\Container {
    class Config
    {
        public static function getSharedClasses()
        {
        }
    }
}
namespace WPML\PB\GutenbergCleanup {
    class Package
    {
        /**
         * @param int $postId
         *
         * @return \WPML_Package|null
         */
        public static function get($postId)
        {
        }
        /**
         * @param \WPML_Package|null $package
         */
        public static function delete($package)
        {
        }
    }
    class ShortcodeHooks implements \IWPML_Backend_Action
    {
        public function add_hooks()
        {
        }
        /**
         * @param int            $post_ID
         * @param \WP_Post|mixed $post
         */
        public function removeGutenbergFootprint($post_ID, $post)
        {
        }
    }
}
namespace WPML\PB\AutoUpdate {
    class Settings
    {
        /**
         * This is part of the "Translation Auto-Update" feature
         * The "Translation Auto-Update" feature will be released in the next major version.
         * We need a way for users to allow disabling it quickly, if necessary.
         *
         * @return bool
         */
        public static function isEnabled()
        {
        }
    }
    class TranslationStatus
    {
        /**
         * @param WPML_Post_Element $element
         *
         * @return int|null
         */
        public static function get(\WPML_Post_Element $element)
        {
        }
    }
    class Hooks implements \IWPML_Backend_Action, \IWPML_Frontend_Action, \IWPML_DIC_Action
    {
        const HASH_SEP = '-';
        /** @var \WPML_PB_Integration $pbIntegration */
        private $pbIntegration;
        /** @var \WPML_Translation_Element_Factory $elementFactory */
        private $elementFactory;
        /** @var \WPML_Page_Builders_Page_Built $pageBuilt */
        private $pageBuilt;
        /** @var array $translationStatusesUpdaters */
        private $translationStatusesUpdaters = [];
        public function __construct(\WPML_PB_Integration $pbIntegration, \WPML_Translation_Element_Factory $elementFactory, \WPML_Page_Builders_Page_Built $pageBuilt)
        {
        }
        public function add_hooks()
        {
        }
        public function isTmLoaded()
        {
        }
        /**
         * @param bool     $isDelegated
         * @param int      $originalPostId
         * @param callable $statusesUpdater
         *
         * @return bool
         */
        public function enqueueTranslationStatusUpdate($isDelegated, $originalPostId, $statusesUpdater)
        {
        }
        /**
         * @param string   $content
         * @param \WP_Post $post
         *
         * @return string
         */
        public function getMd5ContentFromPackageStrings($content, $post)
        {
        }
        /**
         * @param int $postId
         *
         * @return \WPML_Package[]
         */
        public static function getPackages($postId)
        {
        }
        /**
         * We need to update translation statuses after string registration
         * to make sure we build the content hash with the new strings.
         */
        public function afterRegisterAllStringsInShutdown()
        {
        }
        /**
         * @param int $postId
         */
        private function resaveTranslations($postId)
        {
        }
        /**
         * @param int $postId
         *
         * @return bool
         */
        private function isPageBuilder($postId)
        {
        }
    }
}
namespace {
    class WPML_PB_Reuse_Translations
    {
        /** @var WPML_ST_String_Factory $string_factory */
        private $string_factory;
        /** @var  array $original_strings */
        private $original_strings;
        /** @var  array $current_strings */
        private $current_strings;
        public function __construct(\WPML_ST_String_Factory $string_factory)
        {
        }
        /**
         * We receive arrays of strings with this structure:
         *
         * array(
         *  'gf4544ds454sds542122sd' => array(
         *      'value'      => 'The string value',
         *      'context'    => 'the-string-context',
         *      'name'       => 'the-string-name',
         *      'id'         => 123,
         *      'package_id' => 123,
         *      'location'   => 123,
         *     ),
         *  )
         *
         * The key is the string hash.
         *
         * @param array[] $original_strings
         * @param array[] $current_strings
         * @param array[] $leftover_strings
         */
        public function find_and_reuse_translations(array $original_strings, array $current_strings, array $leftover_strings)
        {
        }
        /** @return array */
        private function find_new_strings()
        {
        }
        /**
         * @param int[]   $new_strings
         * @param array[] $leftover_strings
         *
         * @return int[]
         */
        private function find_existing_strings_for_new_strings(array $new_strings, array $leftover_strings)
        {
        }
        /**
         * @param int[]   $new_strings
         * @param array[] $leftover_strings
         *
         * @return array[]
         */
        private function find_by_location(array $new_strings, array $leftover_strings)
        {
        }
        /**
         * @param int[]   $new_strings
         * @param array[] $leftover_strings
         *
         * @return int[]
         */
        private function find_by_similar_text(array $new_strings, array $leftover_strings)
        {
        }
        /**
         * @param array $current_string
         * @param array $leftover_string
         *
         * @return bool
         */
        private function is_same_location_and_different_ids(array $current_string, array $leftover_string)
        {
        }
        /**
         * @param string $old_text
         * @param string $new_text
         *
         * @return bool
         */
        private function is_similar_text($old_text, $new_text)
        {
        }
        /**
         * @param int[] $strings
         */
        private function reuse_translations(array $strings)
        {
        }
    }
    class WPML_PB_Reuse_Translations_By_Strategy extends \WPML_PB_Reuse_Translations
    {
        /** @var IWPML_PB_Strategy $strategy */
        private $strategy;
        /** @var array $original_strings */
        private $original_strings_by_strategy;
        public function __construct(\IWPML_PB_Strategy $strategy, \WPML_ST_String_Factory $string_factory)
        {
        }
        /** @param array $strings */
        public function set_original_strings(array $strings)
        {
        }
        /**
         * @param int   $post_id
         * @param array $leftover_strings
         */
        public function find_and_reuse($post_id, array $leftover_strings)
        {
        }
        /**
         * @param int $post_id
         *
         * @return array
         */
        public function get_strings($post_id)
        {
        }
    }
    /**
     * Class WPML_Page_Builders_Defined
     */
    class WPML_Page_Builders_Defined
    {
        private $settings;
        public function __construct()
        {
        }
        public function has($page_builder)
        {
        }
        /**
         * @param array $components
         *
         * @return array
         */
        public function add_components($components)
        {
        }
        public function init_settings()
        {
        }
        /**
         * @return array
         */
        public function get_settings()
        {
        }
    }
    class WPML_ST_PB_Plugin
    {
        function check_requirements()
        {
        }
        function is_active()
        {
        }
        function ask_to_deactivate()
        {
        }
        function disable_old_pb_notice()
        {
        }
    }
    class WPML_PB_String_Translation
    {
        /** @var  wpdb $wpdb */
        protected $wpdb;
        public function __construct(\wpdb $wpdb)
        {
        }
        /**
         * @param array $package_data
         *
         * @return array
         */
        public function get_package_strings(array $package_data)
        {
        }
        public function remove_string(array $string_data)
        {
        }
        /**
         * @param string $field_type
         *
         * @return string|null
         */
        private function get_job_id($field_type)
        {
        }
        /**
         * @param int $job_id
         *
         * @return bool
         */
        private function is_job_in_progress($job_id)
        {
        }
        /**
         * @param array $package_data
         *
         * @return bool
         */
        private function get_package_id(array $package_data)
        {
        }
        /**
         * @param string $string_value
         *
         * @return string
         */
        public function get_string_hash($string_value)
        {
        }
    }
}
namespace WPML\PB {
    class TranslateLinks
    {
        /**
         * @param \WPML_ST_String_Factory $stringFactory
         * @param array $activeLanguages
         *
         * @return \Closure
         */
        public static function getTranslatorForString(\WPML_ST_String_Factory $stringFactory, $activeLanguages)
        {
        }
    }
    /**
     * Class ShortCodesInGutenbergBlocks
     * @package WPML\PB
     *
     * This class is to handle an edge case when there is only one Gutenberg block
     * that contains one or more shortcodes.
     * In this case we need to force the Gutenberg processing as there will be
     * no Gutenberg strings and only shortcode strings.
     *
     */
    class ShortCodesInGutenbergBlocks
    {
        const FORCED_GUTENBERG = 'Forced-Gutenberg';
        public static function recordPackage(\WPML_PB_String_Translation_By_Strategy $strategy, $strategyKind, \WPML_Package $package, $language)
        {
        }
        public static function fixupPackage($package_data)
        {
        }
        public static function normalizePackages(array $packagesToUpdate)
        {
        }
    }
}
namespace {
    /**
     * Class WPML_PB_String_Registration
     */
    class WPML_PB_String_Registration
    {
        /** @var IWPML_PB_Strategy $strategy */
        private $strategy;
        /** @var WPML_ST_String_Factory $string_factory */
        private $string_factory;
        /** @var  WPML_ST_Package_Factory $package_factory */
        private $package_factory;
        /** @var WPML_Translate_Link_Targets $translate_link_targets */
        private $translate_link_targets;
        /** @var callable $set_link_translations */
        private $set_link_translations;
        /** @var  bool $migration_mode */
        private $migration_mode;
        /**
         * WPML_PB_String_Registration constructor.
         *
         * @param IWPML_PB_Strategy           $strategy
         * @param WPML_ST_String_Factory      $string_factory
         * @param WPML_ST_Package_Factory     $package_factory
         * @param WPML_Translate_Link_Targets $translate_link_targets
         * @param callable                    $set_link_translations
         * @param bool                        $migration_mode
         */
        public function __construct(\IWPML_PB_Strategy $strategy, \WPML_ST_String_Factory $string_factory, \WPML_ST_Package_Factory $package_factory, \WPML_Translate_Link_Targets $translate_link_targets, callable $set_link_translations, $migration_mode = \false)
        {
        }
        /**
         * @param int    $post_id
         * @param string $content
         * @param string $name
         *
         * @return null|int
         */
        public function get_string_id_from_package($post_id, $content, $name = '')
        {
        }
        public function get_string_title($string_id)
        {
        }
        /**
         * Register string.
         *
         * @param int    $post_id  Post Id.
         * @param string $content  String content.
         * @param string $type     String editor type.
         * @param string $title    String title.
         * @param string $name     String name.
         * @param int    $location String location.
         * @param string $wrap_tag String wrap tag.
         *
         * @return null|integer $string_id
         */
        public function register_string($post_id, $content = '', $type = 'LINE', $title = '', $name = '', $location = 0, $wrap_tag = '')
        {
        }
        /**
         * Update string data: location and wrap tag.
         * Wrap tag is used for SEO significance, can contain values as h1 ... h6, etc.
         *
         * @param int    $string_id String id.
         * @param string $location  String location inside of the page builder content.
         * @param string $wrap_tag  String wrap tag for SEO significance.
         */
        private function update_string_data($string_id, $location, $wrap_tag)
        {
        }
    }
    /**
     * Class WPML_PB_Integration
     */
    class WPML_PB_Integration
    {
        const MIGRATION_DONE_POST_META = '_wpml_location_migration_done';
        private $sitepress;
        private $factory;
        private $new_translations_recieved = \false;
        private $save_post_queue = array();
        private $is_registering_string = \false;
        private $strategies = array();
        /** @var StringCleanUp[]  */
        private $stringCleanUp = [];
        /**
         * @var WPML_PB_Integration_Rescan
         */
        private $rescan;
        /** @var IWPML_PB_Media_Update[]|null $media_updaters */
        private $media_updaters;
        /**
         * WPML_PB_Integration constructor.
         *
         * @param SitePress $sitepress
         * @param WPML_PB_Factory $factory
         */
        public function __construct(\SitePress $sitepress, \WPML_PB_Factory $factory)
        {
        }
        /**
         * @param IWPML_PB_Strategy $strategy
         */
        public function add_strategy(\IWPML_PB_Strategy $strategy)
        {
        }
        /**
         * @return WPML_PB_Integration_Rescan
         */
        public function get_rescan()
        {
        }
        /**
         * @param WPML_PB_Integration_Rescan $rescan
         */
        public function set_rescan(\WPML_PB_Integration_Rescan $rescan)
        {
        }
        public function resave_post_translation_in_shutdown(\WPML_Post_Element $post_element, $disallowed_in_shutdown = \true)
        {
        }
        /**
         * @param int|string $post_id
         * @param \WP_Post   $post
         */
        public function queue_save_post_actions($post_id, $post)
        {
        }
        /**
         * @return \WP_Post[]
         */
        public function get_save_post_queue()
        {
        }
        /** @param int $post_id */
        private function update_last_editor_mode($post_id)
        {
        }
        /**
         * Due to the "translation auto-update" feature, an original update
         * can also trigger an update on the translations.
         * We need to make sure the globally edited post is matching with
         * the local one.
         *
         * @param int $translatedPostId
         *
         * @return bool
         */
        private function is_editing_translation_with_native_editor($translatedPostId)
        {
        }
        /**
         * @param int $postId
         *
         * @return bool
         */
        private function is_translation($postId)
        {
        }
        /**
         * @param WP_Post $post
         */
        public function register_all_strings_for_translation($post)
        {
        }
        /**
         * @param \WP_Post|\stdClass $post
         *
         * @return bool
         */
        private function is_original_post($post)
        {
        }
        /**
         * @param \WP_Post|\stdClass $post
         *
         * @return bool
         */
        private function is_post_status_ok($post)
        {
        }
        /**
         * Add all actions filters.
         */
        public function add_hooks()
        {
        }
        /**
         * @param int      $new_post_id
         * @param array    $fields
         * @param stdClass $job
         */
        public function cleanup_strings_after_translation_completed($new_post_id, array $fields, \stdClass $job)
        {
        }
        public function new_translation($translated_string_id)
        {
        }
        /**
         * @param callable $callable
         */
        private function with_strategies(callable $callable)
        {
        }
        /**
         * When a Page Builder content has only a "LINK" string, it's won't be part
         * of the translation job as it's automatically converted.
         * We need to add the package to the update list (by strategies).
         *
         * @param int $new_post_id
         * @param int $original_doc_id
         */
        public function process_pb_content_with_hidden_strings_only($new_post_id, $original_doc_id)
        {
        }
        public function save_translations_to_post()
        {
        }
        /**
         * @param string $content
         * @param string $lang
         *
         * @return string
         */
        public function update_translations_in_content($content, $lang)
        {
        }
        /**
         * @see https://onthegosystems.myjetbrains.com/youtrack/issue/wpmlst-958
         * @param array                $translation_package
         * @param WP_Post|WPML_Package $post
         *
         * @return array
         */
        public function rescan(array $translation_package, $post)
        {
        }
        /**
         * @param int $post_id
         */
        public function migrate_location($post_id)
        {
        }
        /**
         * @param bool $registered
         * @param string|int $post_id
         * @param string $content
         *
         * @return bool
         */
        public function register_strings_in_content($registered, $post_id, $content)
        {
        }
        public function get_factory()
        {
        }
        public function initialize_string_clean_up(\WP_Post $post)
        {
        }
        public function clean_up_strings(\WP_Post $post)
        {
        }
        /**
         * @param int $post_id
         *
         * @return bool
         */
        private function post_has_strings($post_id)
        {
        }
        /**
         * @param int $post_id
         *
         * @return bool
         */
        private function is_migrate_location_done($post_id)
        {
        }
        /**
         * @param int $post_id
         */
        private function mark_migrate_location_done($post_id)
        {
        }
        /**
         * @param WP_Post $post
         */
        public function translate_media($post)
        {
        }
        /** @return IWPML_PB_Media_Update[] $media_updaters */
        private function get_media_updaters()
        {
        }
    }
    class WPML_PB_Integration_Rescan
    {
        /**
         * @var WPML_PB_Integration
         */
        private $integrator;
        /**
         * @param WPML_PB_Integration $integrator
         */
        public function __construct(\WPML_PB_Integration $integrator)
        {
        }
        /**
         * Rescan post content if it does not contain packages
         *
         * @see https://onthegosystems.myjetbrains.com/youtrack/issue/wpmlst-958
         *
         * @param array    $translation_package
         * @param \WP_Post $post
         *
         * @return array
         */
        public function rescan(array $translation_package, $post)
        {
        }
    }
    /**
     * Class WPML_Page_Builders_App
     */
    class WPML_Page_Builders_App
    {
        /**
         * @var WPML_Page_Builders_Defined
         */
        private $page_builder_plugins;
        /**
         * WPML_Page_Builders_App constructor.
         *
         * @param WPML_Page_Builders_Defined $page_builder_plugins
         */
        public function __construct(\WPML_Page_Builders_Defined $page_builder_plugins)
        {
        }
        public function add_hooks()
        {
        }
        public function load_integration()
        {
        }
        public function add_components($components)
        {
        }
    }
    class WPML_PB_Update_Post
    {
        private $package_data;
        /** @var  IWPML_PB_Strategy $strategy */
        private $strategy;
        /** @var  wpdb $wpdb */
        private $wpdb;
        /** @var  SitePress $sitepress */
        private $sitepress;
        public function __construct($wpdb, $sitepress, $package_data, \IWPML_PB_Strategy $strategy)
        {
        }
        public function update()
        {
        }
        /**
         * @param string $content
         * @param string $lang
         *
         * @return string
         */
        public function update_content($content, $lang)
        {
        }
        private function update_post($translated_post_id, $original_post, $string_translations, $lang)
        {
        }
    }
    /**
     * Class WPML_PB_Register_Shortcodes
     */
    class WPML_PB_Shortcode_Encoding
    {
        const ENCODE_TYPES_BASE64 = 'base64';
        const ENCODE_TYPES_VISUAL_COMPOSER_LINK = 'vc_link';
        const ENCODE_TYPES_ENFOLD_LINK = 'av_link';
        public function decode($string, $encoding, $encoding_condition = '')
        {
        }
        public function encode($string, $encoding)
        {
        }
        /**
         * @param string $condition
         *
         * @return bool
         */
        private function should_decode($condition)
        {
        }
    }
    class WPML_PB_Config_Import_Shortcode
    {
        const PB_SHORTCODE_SETTING = 'pb_shortcode';
        const PB_MEDIA_SHORTCODE_SETTING = 'wpml_pb_media_shortcode';
        /** @var  WPML_ST_Settings $st_settings */
        private $st_settings;
        public function __construct(\WPML_ST_Settings $st_settings)
        {
        }
        public function add_hooks()
        {
        }
        public function wpml_config_filter($config_data)
        {
        }
        /** @param array $config_data */
        private function update_shortcodes_config($config_data)
        {
        }
        /** @param array $config_data */
        private function update_media_shortcodes_config($config_data)
        {
        }
        private function is_media_attribute(array $attribute)
        {
        }
        private function convert_single_attribute_to_multiple_format(array $attribute)
        {
        }
        public function get_settings()
        {
        }
        public function get_media_settings()
        {
        }
        public function has_settings()
        {
        }
    }
    interface IWPML_PB_Strategy
    {
        /**
         * @param \WP_Post|stdClass $post
         */
        public function register_strings($post);
        /**
         * @param int $post_id
         * @param string $content
         * @param WPML\PB\Shortcode\StringCleanUp $stringCleanUp
         *
         * @return bool - true if strings were added.
         */
        public function register_strings_in_content($post_id, $content, \WPML\PB\Shortcode\StringCleanUp $stringCleanUp);
        /**
         * @param WPML_PB_Factory $factory
         *
         */
        public function set_factory($factory);
        public function get_package_key($page_id);
        public function get_package_kind();
        public function get_update_post($package_data);
        public function get_content_updater();
        public function get_package_strings($package_data);
        public function remove_string($string_data);
        public function migrate_location($post_id, $post_content);
    }
    class WPML_PB_Shortcode_Strategy implements \IWPML_PB_Strategy
    {
        private $shortcodes = array(\WPML_PB_Shortcode_Content_Wrapper::WRAPPER_SHORTCODE_NAME => array('encoding' => '', 'encoding-condition' => '', 'type' => '', 'ignore-content' => \false, 'attributes' => array()));
        /** @var  WPML_PB_Factory $factory */
        private $factory;
        /** @var WPML_Page_Builder_Settings $page_builder_settings */
        private $page_builder_settings;
        public function __construct(\WPML_Page_Builder_Settings $page_builder_settings)
        {
        }
        public function add_shortcodes($shortcode_data)
        {
        }
        public function get_shortcodes()
        {
        }
        public function get_shortcode_attributes($tag)
        {
        }
        public function get_shortcode_tag_encoding($tag)
        {
        }
        public function get_shortcode_tag_encoding_condition($tag)
        {
        }
        public function get_shortcode_tag_type($tag)
        {
        }
        public function get_shortcode_ignore_content($tag)
        {
        }
        public function get_shortcode_attribute_encoding($tag, $attribute)
        {
        }
        public function get_shortcode_attribute_type($tag, $attribute)
        {
        }
        public function get_shortcode_attribute_label($tag, $attribute)
        {
        }
        public function get_shortcode_parser()
        {
        }
        /**
         * @param \WP_Post|stdClass $post
         */
        public function register_strings($post)
        {
        }
        /**
         * @param string|int $post_id
         * @param string     $content
         * @param WPML\PB\Shortcode\StringCleanUp $stringCleanUp
         *
         * @return bool
         */
        public function register_strings_in_content($post_id, $content, \WPML\PB\Shortcode\StringCleanUp $stringCleanUp = \null)
        {
        }
        public function set_factory($factory)
        {
        }
        public function get_package_key($page_id)
        {
        }
        public function get_package_kind()
        {
        }
        public function get_update_post($package_data)
        {
        }
        public function get_content_updater()
        {
        }
        public function get_package_strings($package_data)
        {
        }
        public function remove_string($string_data)
        {
        }
        /**
         * @param int $post_id
         * @param object $post_content
         */
        public function migrate_location($post_id, $post_content)
        {
        }
    }
    class WPML_PB_Update_Shortcodes_In_Content
    {
        const LONG_STRING_THRESHOLD = 5000;
        /** @var  WPML_PB_Shortcode_Strategy $strategy */
        private $strategy;
        /** @var WPML_PB_Shortcode_Encoding $encoding */
        private $encoding;
        private $new_content;
        private $string_translations;
        private $lang;
        public function __construct(\WPML_PB_Shortcode_Strategy $strategy, \WPML_PB_Shortcode_Encoding $encoding)
        {
        }
        public function update($translated_post_id, $original_post, $string_translations, $lang)
        {
        }
        public function update_content($original_content, $string_translations, $lang)
        {
        }
        private function update_shortcodes($shortcode_data)
        {
        }
        private function update_shortcode_attributes($shortcode_data)
        {
        }
        private function replace_string_with_translation($block, $original, $translation, $is_attribute = \false, $attr = '')
        {
        }
        /**
         * We need to escape backward references that could be included in the replacement text
         * e.g. '$1999.each' => '$19' is considered as a backward reference
         *
         * @param string $string
         *
         * @return string
         */
        private function escape_backward_reference_on_replacement_string($string)
        {
        }
        private function replace_content_without_delimiters($block, $replacement)
        {
        }
        /**
         * @param string $string
         *
         * @return bool
         */
        private function is_string_too_long_for_regex($string)
        {
        }
        private function get_translation($original, $encoding = \false)
        {
        }
        /**
         * @param string $translation
         * @param string $encoding
         *
         * @return string
         */
        private function filter_attribute_translation($translation, $encoding)
        {
        }
    }
    /**
     * Class WPML_PB_Register_Shortcodes
     */
    class WPML_PB_Register_Shortcodes
    {
        private $handle_strings;
        /** @var  WPML_PB_Shortcode_Strategy $shortcode_strategy */
        private $shortcode_strategy;
        /** @var  WPML_PB_Shortcode_Encoding $encoding */
        private $encoding;
        /** @var WPML_PB_Reuse_Translations_By_Strategy|null $reuse_translations */
        private $reuse_translations;
        /** @var StringCleanUp|null */
        private $existingStrings;
        /** @var  int $location_index */
        private $location_index;
        /**
         * @param WPML_PB_String_Registration                 $handle_strings
         * @param WPML_PB_Shortcode_Strategy                  $shortcode_strategy
         * @param WPML_PB_Shortcode_Encoding                  $encoding
         * @param WPML_PB_Reuse_Translations_By_Strategy|null $reuse_translations
         */
        public function __construct(\WPML_PB_String_Registration $handle_strings, \WPML_PB_Shortcode_Strategy $shortcode_strategy, \WPML_PB_Shortcode_Encoding $encoding, \WPML_PB_Reuse_Translations_By_Strategy $reuse_translations = \null)
        {
        }
        /**
         * @param string|int    $post_id
         * @param string        $content
         * @param StringCleanUp $externalStringCleanUp
         *
         * @return bool
         */
        public function register_shortcode_strings($post_id, $content, \WPML\PB\Shortcode\StringCleanUp $externalStringCleanUp = \null)
        {
        }
        /**
         * @param array $shortcode
         *
         * @return bool
         */
        private function should_handle_content($shortcode)
        {
        }
        function get_updated_shortcode_string_title($string_id, $shortcode, $attribute)
        {
        }
        function get_shortcode_string_title($string_id)
        {
        }
        public function register_string($post_id, $content, $shortcode, $attribute, $editor_type)
        {
        }
        /**
         * @param int $post_id
         */
        private function mark_post_as_migrate_location_done($post_id)
        {
        }
    }
    class WPML_PB_Shortcodes
    {
        /** @var  WPML_PB_Shortcode_Strategy $shortcode_strategy */
        private $shortcode_strategy;
        /** @var bool $is_wrapping_regular_text */
        private $is_wrapping_regular_text = \false;
        public function __construct(\WPML_PB_Shortcode_Strategy $shortcode_strategy)
        {
        }
        public function get_shortcodes($content)
        {
        }
        /**
         * @param string $content
         *
         * @return string
         */
        private function wrap_regular_text($content)
        {
        }
        /**
         * @param string $content
         *
         * @return bool
         */
        private function needs_wrapping_regular_text($content)
        {
        }
    }
    class WPML_PB_Shortcode_Content_Wrapper
    {
        const WRAPPER_SHORTCODE_NAME = 'wpml_string_wrapper';
        /** @var string $content */
        private $content;
        /** @var array $valid_shortcodes */
        private $valid_shortcodes;
        /** @var array $shortcodes */
        private $shortcodes = array();
        /** @var array $content_array */
        private $content_array;
        /** @var array $insert_wrapper */
        private $insert_wrapper = array();
        /**
         * @param string $content
         * @param array  $valid_shortcodes
         */
        public function __construct($content, array $valid_shortcodes)
        {
        }
        public function get_wrapped_content()
        {
        }
        /**
         * This is a multibyte safe version of `str_split`
         */
        private function split_content()
        {
        }
        private function parse_shortcodes()
        {
        }
        /**
         * @param int $open_bracket_position
         *
         * @return int
         */
        private function parse_shortcode($open_bracket_position)
        {
        }
        /**
         * @param int $start
         * @param int $end
         */
        private function remove_nested_shortcodes_between($start, $end)
        {
        }
        private function analyze_unwrapped_text()
        {
        }
        /**
         * @param int $start
         * @param int $end
         */
        private function set_wrapper_positions($start, $end)
        {
        }
        /**
         * @param int    $position
         * @param string $type
         *
         * @return int
         */
        private function get_wrapper_insert_position($position, $type)
        {
        }
        /**
         * @param int $open_bracket_position
         *
         * @return string
         */
        private function get_shortcode_name($open_bracket_position)
        {
        }
        /**
         * @param int    $open_bracket_position
         * @param string $shortcode_name
         *
         * @return int
         */
        private function get_shortcode_end($open_bracket_position, $shortcode_name)
        {
        }
        /**
         * @param string $shortcode_name
         *
         * @return int|null
         */
        private function find_last_opened_shortcode($shortcode_name)
        {
        }
        private function insert_wrappers()
        {
        }
        /**
         * @param string $content
         * @param array  $shortcodes
         *
         * @return string
         */
        public static function maybeWrap($content, array $shortcodes)
        {
        }
        /**
         * This will flag some regular text not wrapped in a shortcode.
         * e.g. "[foo] Some text not wrapped [bar]"
         *
         * @param string $content
         *
         * @return bool
         */
        public static function isStrippedContentDifferent($content)
        {
        }
        /**
         * @param string $content
         *
         * @return string
         */
        public static function wrap($content)
        {
        }
        /**
         * @param string $content
         *
         * @return string
         */
        public static function unwrap($content)
        {
        }
    }
}
namespace WPML\PB\Shortcode {
    class StringCleanUp
    {
        /* @var array */
        private $existingStrings;
        /* @var \WPML_PB_Shortcode_Strategy */
        private $shortcodeStrategy;
        /**
         * StringCleanUp constructor.
         *
         * @param int                         $postId
         * @param \WPML_PB_Shortcode_Strategy $shortcodeStrategy
         */
        public function __construct($postId, \WPML_PB_Shortcode_Strategy $shortcodeStrategy)
        {
        }
        /**
         * @return array
         */
        public function get()
        {
        }
        /**
         * @param string $value
         */
        public function remove($value)
        {
        }
        public function cleanUp()
        {
        }
    }
}
namespace {
    class WPML_PB_API_Hooks_Strategy implements \IWPML_PB_Strategy
    {
        /** @var  WPML_PB_Factory $factory */
        private $factory;
        private $name;
        public function __construct($name)
        {
        }
        /**
         * @param \WP_Post|stdClass $post
         */
        public function register_strings($post)
        {
        }
        /**
         * @param string|int $post_id
         * @param string $content
         * @param WPML\PB\Shortcode\StringCleanUp $stringCleanUp
         *
         * @return bool
         */
        public function register_strings_in_content($post_id, $content, \WPML\PB\Shortcode\StringCleanUp $stringCleanUp)
        {
        }
        public function set_factory($factory)
        {
        }
        /**
         * @param int $page_id
         *
         * @return array
         */
        public function get_package_key($page_id)
        {
        }
        public function get_package_kind()
        {
        }
        public function get_update_post($package_data)
        {
        }
        public function get_content_updater()
        {
        }
        public function get_package_strings($package_data)
        {
        }
        public function remove_string($string_data)
        {
        }
        public function migrate_location($post_id, $post_content)
        {
        }
    }
    class WPML_PB_Update_API_Hooks_In_Content
    {
        /** @var  WPML_PB_API_Hooks_Strategy $strategy */
        private $strategy;
        public function __construct(\WPML_PB_API_Hooks_Strategy $strategy)
        {
        }
        public function update($translated_post_id, $original_post, $string_translations, $lang)
        {
        }
        /**
         * @param string $original_content
         * @param array  $string_translations
         * @param string $lang
         *
         * @return string
         */
        public function update_content($original_content, $string_translations, $lang)
        {
        }
    }
    /**
     * Class WPML_Page_Builders_Integration
     */
    class WPML_Page_Builders_Integration
    {
        const STRINGS_TRANSLATED_PRIORITY = 10;
        /** @var WPML_Page_Builders_Register_Strings */
        private $register_strings;
        /** @var WPML_Page_Builders_Update_Translation */
        private $update_translation;
        /** @var IWPML_Page_Builders_Data_Settings */
        private $data_settings;
        /**
         * WPML_Page_Builders_Integration constructor.
         *
         * @param WPML_Page_Builders_Register_Strings $register_strings
         * @param WPML_Page_Builders_Update_Translation $update_translation
         * @param IWPML_Page_Builders_Data_Settings $data_settings
         */
        public function __construct(\WPML_Page_Builders_Register_Strings $register_strings, \WPML_Page_Builders_Update_Translation $update_translation, \IWPML_Page_Builders_Data_Settings $data_settings)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param array $page_builder_plugins
         *
         * @return array
         */
        public function support_required(array $page_builder_plugins)
        {
        }
        /**
         * @param \WP_Post $post
         * @param array    $package_key
         */
        public function register_pb_strings($post, $package_key)
        {
        }
        /**
         * @param string  $kind
         * @param int     $translated_post_id
         * @param WP_Post $original_post
         * @param array   $string_translations
         * @param string  $lang
         */
        public function update_translated_post($kind, $translated_post_id, \WP_Post $original_post, $string_translations, $lang)
        {
        }
        public function remove_shortcode_strings_type_filter($types)
        {
        }
    }
    class WPML_PB_Package_Strings_Resave
    {
        /** @var WPML_ST_String_Factory $string_factory */
        private $string_factory;
        public function __construct(\WPML_ST_String_Factory $string_factory)
        {
        }
        /**
         * @param WPML_Post_Element $post_element
         *
         * @return WPML_Package[]
         */
        public function from_element(\WPML_Post_Element $post_element)
        {
        }
        /**
         * @param int    $string_id
         * @param string $target_lang
         */
        private function resave_string_translation($string_id, $target_lang)
        {
        }
    }
    class WPML_PB_Loader
    {
        public function __construct(\WPML_ST_Settings $st_settings, $pb_integration = \null)
        {
        }
        private static function load_hooks()
        {
        }
    }
    class WPML_PB_String_Translation_By_Strategy extends \WPML_PB_String_Translation
    {
        /** @var WPML_PB_Factory $factory */
        private $factory;
        /** @var IWPML_PB_Strategy $strategy */
        private $strategy;
        /** @var array $packages_to_update */
        private $packages_to_update = array();
        public function __construct(\wpdb $wpdb, \WPML_PB_Factory $factory, \IWPML_PB_Strategy $strategy)
        {
        }
        /** @param int $translated_string_id */
        public function new_translation($translated_string_id)
        {
        }
        public function save_translations_to_post()
        {
        }
        /**
         * @param string $content
         * @param string $lang
         *
         * @return string
         */
        public function update_translations_in_content($content, $lang)
        {
        }
        /**
         * @param int $translated_string_id
         *
         * @return array
         */
        private function get_package_for_translated_string($translated_string_id)
        {
        }
        /**
         * @param WPML_Package $package
         * @param string       $language
         */
        public function add_package_to_update_list(\WPML_Package $package, $language)
        {
        }
    }
    class WPML_PB_Last_Translation_Edit_Mode
    {
        const POST_META_KEY = '_last_translation_edit_mode';
        const NATIVE_EDITOR = 'native-editor';
        const TRANSLATION_EDITOR = 'translation-editor';
        /**
         * @param int $post_id
         *
         * @return bool
         */
        public static function is_native_editor($post_id)
        {
        }
        /**
         * @param int $post_id
         *
         * @return bool
         */
        public static function is_translation_editor($post_id)
        {
        }
        /**
         * @param int $post_id
         *
         * @return mixed
         */
        private static function get_last_mode($post_id)
        {
        }
        /**
         * @param int $post_id
         */
        public static function set_native_editor($post_id)
        {
        }
        /**
         * @param int $post_id
         */
        public static function set_translation_editor($post_id)
        {
        }
        /**
         * @param int    $post_id
         * @param string $mode
         */
        private static function set_mode($post_id, $mode)
        {
        }
    }
    class WPML_PB_String
    {
        /** @var  string $value */
        private $value;
        /** @var  string $name */
        private $name;
        /** @var  string $title */
        private $title;
        /** @var  string $editor_type */
        private $editor_type;
        /**
         * String wrap tag.
         *
         * @var  string $wrap_tag
         */
        private $wrap_tag;
        /**
         * WPML_PB_String constructor.
         *
         * @param string $value       String value.
         * @param string $name        String name.
         * @param string $title       String title.
         * @param string $editor_type Editor type used.
         * @param string $wrap_tag    String wrap tag.
         */
        public function __construct($value, $name, $title, $editor_type, $wrap_tag = '')
        {
        }
        /**
         * @return string
         */
        public function get_value()
        {
        }
        /**
         * @param string $value
         */
        public function set_value($value)
        {
        }
        /**
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * @return string
         */
        public function get_title()
        {
        }
        /**
         * @return string
         */
        public function get_editor_type()
        {
        }
        /**
         * Get string wrap tag.
         *
         * @return string
         */
        public function get_wrap_tag()
        {
        }
    }
    class WPML_PB_Factory
    {
        /** @var wpdb */
        private $wpdb;
        /** @var SitePress */
        private $sitepress;
        private $string_translations = array();
        public function __construct(\wpdb $wpdb, \SitePress $sitepress)
        {
        }
        public function get_wpml_package($package_id)
        {
        }
        public function get_string_translations(\IWPML_PB_Strategy $strategy)
        {
        }
        public function get_shortcode_parser(\WPML_PB_Shortcode_Strategy $strategy)
        {
        }
        /**
         * @param WPML_PB_Shortcode_Strategy $strategy
         * @param bool $migration_mode
         *
         * @return WPML_PB_Register_Shortcodes
         */
        public function get_register_shortcodes(\WPML_PB_Shortcode_Strategy $strategy, $migration_mode = \false)
        {
        }
        public function get_update_post($package_data, \IWPML_PB_Strategy $strategy)
        {
        }
        public function get_shortcode_content_updater(\IWPML_PB_Strategy $strategy)
        {
        }
        public function get_api_hooks_content_updater(\IWPML_PB_Strategy $strategy)
        {
        }
        public function get_package_strings_resave()
        {
        }
        public function get_handle_post_body()
        {
        }
        /**
         * @depecated Use the static methods instead of the instance.
         */
        public function get_last_translation_edit_mode()
        {
        }
        public function get_post_element($post_id)
        {
        }
    }
    /**
     * Class WPML_String_Registration_Factory
     */
    class WPML_String_Registration_Factory
    {
        private $pb_plugin_name;
        public function __construct($pb_plugin_name)
        {
        }
        /**
         * @return WPML_PB_String_Registration
         */
        public function create()
        {
        }
    }
}
namespace WPML\PB\Shutdown {
    class Hooks implements \IWPML_Frontend_Action, \IWPML_Backend_Action, \IWPML_DIC_Action
    {
        const PRIORITY_REGISTER_STRINGS = 10;
        const PRIORITY_SAVE_TRANSLATIONS_TO_POST = 20;
        const PRIORITY_TRANSLATE_MEDIA = 30;
        /** @var \WPML_PB_Integration $pbIntegration */
        private $pbIntegration;
        public function __construct(\WPML_PB_Integration $pbIntegration)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * This applies only on original posts.
         */
        public function registerStrings()
        {
        }
        /**
         * This applies only on post translations.
         */
        public function translateMedias()
        {
        }
    }
}
namespace WPML\PB {
    class App
    {
        public static function run()
        {
        }
        /**
         * @return bool
         */
        private static function shouldLoadTMHooks()
        {
        }
    }
}