<?php

namespace {
    abstract class WPML_TM_Job_Factory_User
    {
        /** @var  WPML_Translation_Job_Factory $tm_job_factory */
        protected $job_factory;
        /**
         * WPML_TM_Xliff_Reader constructor.
         *
         * @param WPML_Translation_Job_Factory $job_factory
         */
        public function __construct($job_factory)
        {
        }
    }
    class WPML_TM_Record_User
    {
        /** @var WPML_TM_Records $tm_records */
        protected $tm_records;
        /**
         * WPML_TM_Record_User constructor.
         *
         * @param WPML_TM_Records $tm_records
         */
        public function __construct(&$tm_records)
        {
        }
    }
    class WPML_TM_Translation_Status
    {
        /** @var WPML_TM_Records $tm_records */
        protected $tm_records;
        private $element_id_cache;
        private $wpml_cache;
        public function __construct(\WPML_TM_Records $tm_records)
        {
        }
        public function init()
        {
        }
        public function filter_translation_status($status, $trid, $target_lang_code)
        {
        }
        public function reload()
        {
        }
        public function is_in_active_job($element_id, $target_lang_code, $element_type_prefix, $return_status = \false)
        {
        }
        private function is_in_basket($element_id, $lang, $element_type_prefix)
        {
        }
        private function get_element_ids($trid)
        {
        }
    }
    class WPML_TM_Translation_Status_Display
    {
        private $statuses = array();
        private $stats_preloaded = \false;
        /**
         * @var WPML_Post_Status
         */
        private $status_helper;
        /**
         * @var WPML_Translation_Job_Factory
         */
        private $job_factory;
        /**
         * @var WPML_TM_API
         */
        protected $tm_api;
        /**
         * @var WPML_Post_Translation
         */
        private $post_translations;
        /**
         * @var SitePress
         */
        protected $sitepress;
        private $original_links = array();
        private $tm_editor_links = array();
        /**
         * @var \wpdb
         */
        private $wpdb;
        /**
         * WPML_TM_Translation_Status_Display constructor.
         *
         * @param wpdb $wpdb
         * @param SitePress $sitepress
         * @param WPML_Post_Status $status_helper
         * @param WPML_Translation_Job_Factory $job_factory
         * @param WPML_TM_API $tm_api
         */
        public function __construct(\wpdb $wpdb, \SitePress $sitepress, \WPML_Post_Status $status_helper, \WPML_Translation_Job_Factory $job_factory, \WPML_TM_API $tm_api)
        {
        }
        public function init()
        {
        }
        private function preload_stats()
        {
        }
        private function load_stats($trids)
        {
        }
        public function filter_status_css_class($css_class, $post_id, $lang, $trid)
        {
        }
        public function filter_status_text($text, $original_post_id, $lang, $trid)
        {
        }
        /**
         * @param string $link
         * @param int $post_id
         * @param string $lang
         * @param int $trid
         *
         * @return string
         */
        public function filter_status_link($link, $post_id, $lang, $trid)
        {
        }
        /**
         * @param string $html
         * @param int    $post_id
         * @param string $lang
         * @param int    $trid
         *
         * @return string
         */
        public function add_links_data_attributes($html, $post_id, $lang, $trid)
        {
        }
        private function get_link_for_new_job($trid, $lang, $source_lang_code)
        {
        }
        private function get_link_for_existing_job($job_id)
        {
        }
        private function get_tm_editor_base_url()
        {
        }
        private function get_return_url()
        {
        }
        /**
         * @param string $lang_to
         * @param string $lang_from
         * @param int    $post_id
         *
         * @return bool
         */
        protected function is_lang_pair_allowed($lang_to, $lang_from = \null, $post_id = 0)
        {
        }
        protected function is_current_user_admin()
        {
        }
        /**
         * @todo make this into a proper active record user
         *
         * @param int $trid
         */
        private function maybe_load_stats($trid)
        {
        }
        private function is_remote($trid, $lang)
        {
        }
        private function is_in_progress($trid, $lang)
        {
        }
        private function is_in_basket($trid, $lang)
        {
        }
    }
    class WPML_TM_Post_Target_Lang_Filter extends \WPML_TM_Record_User
    {
        /** @var  WPML_TM_Translation_Status */
        private $tm_status;
        /** @var  WPML_Post_Translation $post_translations */
        private $post_translations;
        public function __construct(&$tm_records, &$tm_status, &$post_translations)
        {
        }
        /**
         * @param string[] $allowed_langs
         * @param int      $element_id
         * @param string   $element_type_prefix
         *
         * @return string[]
         */
        public function filter_target_langs($allowed_langs, $element_id, $element_type_prefix)
        {
        }
    }
    class WPML_TM_Serialized_Custom_Field_Package_Handler_Factory implements \IWPML_Backend_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_TM_Default_Settings_Factory implements \IWPML_Frontend_Action_Loader, \IWPML_Backend_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_TM_Serialized_Custom_Field_Package_Handler
    {
        /** @var WPML_Custom_Field_Setting_Factory $custom_field_setting_factory */
        private $custom_field_setting_factory;
        public function __construct(\WPML_Custom_Field_Setting_Factory $custom_field_setting_factory)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param int    $translated
         * @param string $custom_field_job_type - e.g: field-my_custom_field-0-my_attribute.
         *
         * @return int
         */
        public function translate_only_whitelisted_attributes($translated, $custom_field_job_type)
        {
        }
        /**
         * Matches the attributes array to the whitelist array
         * The whitelist array has the attribute as the key to another array for sub keys
         * eg. array( 'attribute1' => array( 'subkey1' => array() ) )
         *
         * @param array $attributes - The attributes in the custom field.
         * @param array $whitelist - The whitelist attributes to match against.
         * @param int   $current_depth - The current depth in the attributes array.
         *
         * @return bool
         */
        private function match_in_order($attributes, $whitelist, $current_depth = 0)
        {
        }
        /**
         * Matches the attribute to the whitelist array using wildcards.
         * Wildcards can only be used at the end of the string.
         * eg. 'title-*', 'data*', '*'
         * A '*' matches everything.
         *
         * @param string $attribute - the current attributes.
         * @param array  $whitelist - the whitelist to match against.
         *
         * @return string - Returns the whitelist string match.
         */
        private function match_with_wildcards($attribute, $whitelist)
        {
        }
    }
    class WPML_TM_Default_Settings implements \IWPML_Action
    {
        /** @var TranslationManagement */
        private $tm;
        public function __construct(\TranslationManagement $tm)
        {
        }
        public function add_hooks()
        {
        }
        public function init_action()
        {
        }
        /**
         * @param string $key
         * @param mixed  $default
         *
         * @return bool
         */
        private function get_notification($key, $default = \null)
        {
        }
        /**
         * @param string $key
         *
         * @return bool
         */
        private function has_notification($key)
        {
        }
        /**
         * @param string $key
         * @param mixed  $value
         */
        private function maybe_update_notification($key, $value)
        {
        }
        /**
         * @param string $key
         * @param mixed  $value
         */
        private function update_notification($key, $value)
        {
        }
    }
}
namespace WPML\TM\Settings {
    class Repository
    {
        public static function getSetting($indexes)
        {
        }
        public static function getCustomFieldsToTranslate()
        {
        }
        public static function getCustomFields()
        {
        }
        /**
         * @return array
         */
        private static function getAllSettings()
        {
        }
    }
}
namespace {
    class WPML_TM_Upgrade_Loader implements \IWPML_Action
    {
        /** @var SitePress */
        private $sitepress;
        /** @var WPML_Upgrade_Schema */
        private $upgrade_schema;
        /** @var WPML_Settings_Helper */
        private $settings;
        /** @var WPML_Upgrade_Command_Factory */
        private $factory;
        /** @var WPML_Notices */
        private $notices;
        public function __construct(\SitePress $sitepress, \WPML_Upgrade_Schema $upgrade_schema, \WPML_Settings_Helper $settings, \WPML_Notices $wpml_notices, \WPML_Upgrade_Command_Factory $factory)
        {
        }
        public function add_hooks()
        {
        }
        public function wpml_tm_upgrade()
        {
        }
    }
    class WPML_TM_Upgrade_Loader_Factory implements \IWPML_Backend_Action_Loader
    {
        public function create()
        {
        }
    }
}
namespace WPML\TM\Upgrade\Commands {
    class CreateAteDownloadQueueTable implements \IWPML_Upgrade_Command
    {
        const TABLE_NAME = 'icl_translation_downloads';
        /** @var \WPML_Upgrade_Schema $schema */
        private $schema;
        /** @var bool $result */
        private $result = false;
        public function __construct(array $args)
        {
        }
        /**
         * @return bool
         */
        public function run()
        {
        }
        /**
         * Runs in admin pages.
         *
         * @return bool
         */
        public function run_admin()
        {
        }
        /**
         * Unused.
         *
         * @return null
         */
        public function run_ajax()
        {
        }
        /**
         * Unused.
         *
         * @return null
         */
        public function run_frontend()
        {
        }
        /**
         * @return bool
         */
        public function get_results()
        {
        }
    }
}
namespace {
    /**
     * Upgrades the former option to the new one.
     */
    class WPML_TM_Upgrade_WPML_Site_ID_ATE implements \IWPML_Upgrade_Command
    {
        /**
         * Runs the upgrade process.
         *
         * @return bool
         */
        public function run()
        {
        }
        /**
         * True if all conditions are met.
         *
         * @return bool
         */
        private function must_run()
        {
        }
        /**
         * Checks has the old option.
         *
         * @return bool
         */
        protected function site_id_ate_does_not_exist()
        {
        }
        /**
         * Runs in admin pages.
         *
         * @return bool
         */
        public function run_admin()
        {
        }
        /**
         * Unused.
         *
         * @return null
         */
        public function run_ajax()
        {
        }
        /**
         * Unused.
         *
         * @return null
         */
        public function run_frontend()
        {
        }
        /**
         * Unused.
         *
         * @return null
         */
        public function get_results()
        {
        }
    }
    class WPML_TM_Upgrade_Service_Redirect_To_Field implements \IWPML_Upgrade_Command
    {
        /** @var bool $result */
        private $result = \true;
        /** @var RefreshServices */
        private $service_refresh;
        public function __construct($args)
        {
        }
        /**
         * Add the default terms for Translation Priority taxonomy
         *
         * @return bool
         */
        private function run()
        {
        }
        public function run_admin()
        {
        }
        public function run_ajax()
        {
        }
        public function run_frontend()
        {
        }
        /** @return bool */
        public function get_results()
        {
        }
        private function get_service_refresh()
        {
        }
    }
    class WPML_TM_Upgrade_Default_Editor_For_Old_Jobs implements \IWPML_Upgrade_Command
    {
        /** @var SitePress */
        private $sitepress;
        public function __construct($args)
        {
        }
        /**
         * @return bool
         */
        private function run()
        {
        }
        public function run_admin()
        {
        }
        public function run_ajax()
        {
        }
        public function run_frontend()
        {
        }
        /** @return bool */
        public function get_results()
        {
        }
    }
    class WPML_TM_Add_TP_Revision_And_TS_Status_Columns_To_Core_Status implements \IWPML_Upgrade_Command
    {
        /** @var WPML_Upgrade_Schema */
        private $upgrade_schema;
        public function __construct(array $args)
        {
        }
        /** @return bool */
        private function run()
        {
        }
        public function run_admin()
        {
        }
        public function run_ajax()
        {
        }
        public function run_frontend()
        {
        }
        /** @return bool */
        public function get_results()
        {
        }
    }
    class WPML_TM_Upgrade_Cancel_Orphan_Jobs implements \IWPML_Upgrade_Command
    {
        /** @var WPML_TP_Sync_Orphan_Jobs_Factory */
        private $factory;
        /** @var WPML_TM_Jobs_Migration_State */
        private $migration_state;
        /**
         * @param array $args
         */
        public function __construct(array $args)
        {
        }
        /**
         * @return bool
         */
        public function run_admin()
        {
        }
        /**
         * @return null
         */
        public function run_ajax()
        {
        }
        /**
         * @return null
         */
        public function run_frontend()
        {
        }
        /**
         * @return null
         */
        public function get_results()
        {
        }
    }
}
namespace WPML\TM\Upgrade\Commands {
    class RefreshTranslationServices implements \IWPML_Upgrade_Command
    {
        const WPML_VERSION_SINCE_PREVIEW_LOGOS_AVAILABLE = '4.4.0';
        /** @var bool $result */
        private $result = false;
        /** @var RefreshServicesFactory */
        private $refreshServicesFactory;
        /** @var callable */
        private $isHigherThanInstallationVersion;
        public function __construct(array $args)
        {
        }
        /**
         * @return bool
         */
        public function run_admin()
        {
        }
        /**
         * Unused.
         *
         * @return null
         */
        public function run_ajax()
        {
        }
        /**
         * Unused.
         *
         * @return null
         */
        public function run_frontend()
        {
        }
        /**
         * @return bool
         */
        public function get_results()
        {
        }
    }
}
namespace {
    class WPML_TM_Upgrade_Translation_Priorities_For_Posts implements \IWPML_Upgrade_Command
    {
        /** @var bool $result */
        private $result = \true;
        const TRANSLATION_PRIORITY_TAXONOMY = 'translation_priority';
        /**
         * Add the default terms for Translation Priority taxonomy
         *
         * @return bool
         */
        private function run()
        {
        }
        public function run_admin()
        {
        }
        public function run_ajax()
        {
        }
        public function run_frontend()
        {
        }
        /** @return bool */
        public function get_results()
        {
        }
    }
    class WPML_TM_Add_TP_Revision_And_TS_Status_Columns_To_Translation_Status extends \WPML_Upgrade_Run_All
    {
        /** @var WPML_Upgrade_Schema */
        private $upgrade_schema;
        public function __construct(array $args)
        {
        }
        /** @return bool */
        protected function run()
        {
        }
    }
    class WPML_TM_Add_TP_ID_Column_To_Translation_Status extends \WPML_Upgrade_Run_All
    {
        /** @var WPML_Upgrade_Schema */
        private $upgrade_schema;
        public function __construct(array $args)
        {
        }
        /** @return bool */
        protected function run()
        {
        }
    }
}
namespace WPML\TM\Upgrade\Commands\SynchronizeSourceIdOfATEJobs {
    class CommandFactory
    {
        const PAGER_OPTION_NAME = 'sync-source-id-ate-jobs-pager';
        /**
         * @return Command
         */
        public function create()
        {
        }
    }
    class Command implements \IWPML_Upgrade_Command
    {
        const CHUNK_SIZE = 1000;
        /** @var Repository */
        private $repository;
        /** @var \WPML_TM_ATE_API */
        private $api;
        /** @var Pager */
        private $pager;
        /** @var CommandsStatus */
        private $commandStatus;
        /** @var bool $result */
        private $result = false;
        /**
         * Command constructor.
         *
         * @param Repository       $repository
         * @param \WPML_TM_ATE_API $api
         * @param Pager            $pager
         * @param CommandsStatus   $commandStatus
         */
        public function __construct(\WPML\TM\Upgrade\Commands\SynchronizeSourceIdOfATEJobs\Repository $repository, \WPML_TM_ATE_API $api, \WPML\Utils\Pager $pager, \WPML\Upgrade\CommandsStatus $commandStatus)
        {
        }
        public function run_admin()
        {
        }
        public function run_ajax()
        {
        }
        public function run_frontend()
        {
        }
        /**
         * @return bool
         */
        public function get_results()
        {
        }
        /**
         * @return mixed
         */
        private function hasBeenMigrateATERepositoryUpgradeRun()
        {
        }
    }
    class Repository
    {
        /** @var \wpdb */
        private $wpdb;
        /**
         * @param \wpdb $wpdb
         */
        public function __construct(\wpdb $wpdb)
        {
        }
        /**
         * @return \WPML\Collect\Support\Collection
         */
        public function getPairs()
        {
        }
    }
}
namespace WPML\TM\Upgrade\Commands {
    class MigrateAteRepository implements \IWPML_Upgrade_Command
    {
        const TABLE_NAME = 'icl_translate_job';
        const COLUMN_EDITOR_JOB_ID = 'editor_job_id';
        const COLUMN_EDIT_TIMESTAMP = 'edit_timestamp';
        const OPTION_NAME_REPO = 'WPML_TM_ATE_JOBS';
        /** @var \WPML_Upgrade_Schema $schema */
        private $schema;
        /** @var bool $result */
        private $result = false;
        public function __construct(array $args)
        {
        }
        /**
         * @return bool
         */
        public function run()
        {
        }
        private function addColumnsToJobsTable()
        {
        }
        private function migrateOldRepository()
        {
        }
        /**
         * @param string $field
         *
         * @return \Closure
         */
        private function getCasesReducer()
        {
        }
        private function disableAutoloadOnOldOption()
        {
        }
        /**
         * Runs in admin pages.
         *
         * @return bool
         */
        public function run_admin()
        {
        }
        /**
         * Unused.
         *
         * @return null
         */
        public function run_ajax()
        {
        }
        /**
         * Unused.
         *
         * @return null
         */
        public function run_frontend()
        {
        }
        /**
         * @return bool
         */
        public function get_results()
        {
        }
    }
}
namespace {
    /**
     * Represents a helper class for building the SQL statement which retrieves the job,
     * as well as for converting this collection to specific implementations of \WPML_Element_Translation_Job.
     *
     * @package WPML\TM
     */
    class WPML_Abstract_Job_Collection
    {
        /**
         * Instance of \wpdb.
         *
         * @var \wpdb $wpdb
         */
        public $wpdb;
        /**
         * Instance of \SitePress.
         *
         * @var \SitePress
         */
        private $sitepress;
        /**
         * WPML_Abstract_Job_Collection constructor.
         *
         * @param WPDB $wpdb An instance of \wpdb.
         */
        public function __construct(\WPDB $wpdb)
        {
        }
        /**
         * It gets the (INNER) JOIN clause of the query.
         *
         * @param bool   $single                            It should only return the last job revision.
         * @param string $icl_translate_alias               The alias for `{$this->wpdb->prefix}icl_translate_job`.
         * @param string $icl_translations_translated_alias The alias for translated documents in `{$this->wpdb->prefix}icl_translations`.
         * @param string $icl_translations_original_alias   The alias for original documents in `{$this->wpdb->prefix}icl_translations`.
         * @param string $icl_translation_status_alias      The alias for `{$this->wpdb->prefix}icl_translation_status`.
         * @param string $icl_translate_job_alias           The alias for `{$this->wpdb->prefix}icl_translate_job`.
         *
         * @return string
         */
        protected function get_table_join($single = \false, $icl_translate_alias = 'iclt', $icl_translations_translated_alias = 't', $icl_translations_original_alias = 'ito', $icl_translation_status_alias = 's', $icl_translate_job_alias = 'j')
        {
        }
        /**
         * It gets the LEFT JOIN clause of the query.
         *
         * @param string $icl_translations_original_alias The alias for original documents in `{$this->wpdb->prefix}icl_translations`.
         * @param string $posts_alias                     The alias for `{$this->wpdb->prefix}posts`.
         *
         * @return array
         */
        protected function left_join_post($icl_translations_original_alias = 'ito', $posts_alias = 'p')
        {
        }
        /**
         * It converts an array of \stdClass jobs into an array of \WPML_Element_Translation_Job instances.
         *
         * @param array $jobs The array of \stdClass jobs.
         *
         * @return \WPML_Element_Translation_Job[]|\WPML_Post_Translation_Job[]|\WPML_String_Translation_Job[]|\WPML_External_Translation_Job[]
         */
        protected function plain_objects_to_job_instances($jobs)
        {
        }
        /**
         * Optional arguments to filter the results.
         *
         * @param array $args {
         *                    Optional. An array of arguments.
         *
         * @type int    translator_id
         * @type int    status
         * @type int    status__not
         * @type bool   include_unassigned
         * @type int    limit_no
         * @type array  language_pairs
         * @type string service
         * @type string from
         * @type string to
         * @type string type
         * @type bool   overdue
         * @type string   title
         * }
         *
         * @return string
         */
        protected function build_where_clause(array $args)
        {
        }
    }
    /**
     * Class WPML_Translation_Job_Factory
     *
     * Use `wpml_tm_load_job_factory` to get an instance of this class
     */
    class WPML_Translation_Job_Factory extends \WPML_Abstract_Job_Collection
    {
        /** @var  WPML_TM_Records $tm_records */
        private $tm_records;
        /**
         * @param WPML_TM_Records $tm_records
         */
        public function __construct(&$tm_records)
        {
        }
        /**
         * @return WPML_TM_Records
         */
        public function &tm_records()
        {
        }
        public function init_hooks()
        {
        }
        /**
         * Creates a local translation job for a given post and target language and returns the job_id of the created job.
         *
         * @param int    $post_id
         * @param string $target_language_code
         * @param int|null   $translator_id
         *
         * @return int|null
         */
        public function create_local_post_job($post_id, $target_language_code, $translator_id = \null)
        {
        }
        public function create_local_job($element_id, $target_language_code, $translator_id, $element_type = \null)
        {
        }
        public function get_translation_jobs_filter($jobs, $args)
        {
        }
        public function get_translation_job_filter($job_id, $include_non_translatable_elements = \false, $revisions = 0)
        {
        }
        /**
         * @param int  $job_id
         * @param bool $include_non_translatable_elements
         * @param int  $revisions
         * @param bool $as_job_instance returns WPML_Element_Translation_Job instead of plain object if true
         *
         * @return bool|stdClass|WPML_Element_Translation_Job
         */
        public function get_translation_job($job_id, $include_non_translatable_elements = \false, $revisions = 0, $as_job_instance = \false)
        {
        }
        /**
         * @param int $translation_id
         *
         * @return bool|stdClass|WPML_Element_Translation_Job
         */
        public function job_by_translation_id($translation_id)
        {
        }
        public function string_job_by_translation_id($string_translation_id)
        {
        }
        public function job_id_by_trid_and_lang($trid, $target_language_code)
        {
        }
        public function get_translation_jobs(array $args = array(), $only_ids = \false, $as_job_instances = \false)
        {
        }
        /**
         * @param array $args
         * @param bool  $include_unassigned
         *
         * @return string
         */
        private function build_order_by_clause(array $args, $include_unassigned)
        {
        }
        private function add_data_to_post_jobs(array $jobs)
        {
        }
        /**
         * It outputs the HTML for displaying a language pair
         *
         * @param array $source The source data. Requires a `display_name` key and an optional `code` for the language code.
         * @param array $target The target data. Requires a `display_name` key and an optional `code` for the language code.
         *
         * @return string
         */
        private function get_language_pair(array $source, array $target)
        {
        }
        private function retrieve_job_data($job_ids)
        {
        }
        private function get_job_sql($where, $order_by, $only_ids = \false)
        {
        }
        public function get_translation_job_types_filter($value, $args)
        {
        }
        /**
         * @param int $job_id
         * @param array $data
         */
        public function update_job_data($job_id, array $data)
        {
        }
        /**
         * @param int $job_id
         */
        public function delete_job_data($job_id)
        {
        }
        private function get_job_select($icl_translate_alias = 'iclt', $icl_translations_translated_alias = 't', $icl_translations_original_alias = 'ito', $icl_translation_status_alias = 's', $icl_translate_job_alias = 'j')
        {
        }
        private function add_job_elements($job, $include_non_translatable_elements)
        {
        }
        /**
         * @param $job_id
         * @param $post_id
         *
         * @return string
         */
        private function get_external_job_post_title($job_id, $post_id)
        {
        }
        private function complete_job_data($job, $include_non_translatable_elements, $revisions)
        {
        }
    }
    class WPML_TM_ICL_Translations extends \WPML_TM_Record_User
    {
        private $table = 'icl_translations';
        private $fields = array();
        private $related = array();
        /** @var wpdb $wpdb */
        private $wpdb;
        private $translation_id = 0;
        /** @var  WPML_Frontend_Post_Actions | WPML_Admin_Post_Actions $post_translations */
        private $post_translations;
        /** @var WPML_Term_Translation $term_translations */
        private $term_translations;
        /**
         * WPML_TM_ICL_Translations constructor.
         *
         * @throws InvalidArgumentException if given data does not correspond to a
         * record in icl_translations
         *
         * @param WPML_TM_Records $tm_records
         * @param int|array       $id
         * @param string          $type translation id, trid_lang or id_prefix for now
         */
        public function __construct(&$tm_records, $id, $type = 'translation_id')
        {
        }
        private function build_from_element_id($id)
        {
        }
        private function build_from_trid($id)
        {
        }
        /**
         * @return WPML_TM_ICL_Translations[]
         */
        public function translations()
        {
        }
        private function select_by($function, $field)
        {
        }
        /**
         * @return null|int
         */
        public function trid()
        {
        }
        /**
         * @return int
         */
        public function translation_id()
        {
        }
        /**
         * @return null|int
         */
        public function element_id()
        {
        }
        /**
         * @return string|null
         */
        public function language_code()
        {
        }
        /**
         * @return string|null
         */
        public function source_language_code()
        {
        }
        /**
         *
         * @return $this
         */
        public function delete()
        {
        }
        private function select_field($field)
        {
        }
        private function get_args()
        {
        }
        private function select_translation_id($where, $prepare_args)
        {
        }
    }
    class WPML_TM_Update_Translation_Status
    {
        /**
         * @param int $job_id
         * @param int $new_status
         */
        public static function by_job_id($job_id, $new_status)
        {
        }
    }
    class WPML_TM_ICL_Translation_Status
    {
        /** @var WPDB $wpdb */
        public $wpdb;
        private $tm_records;
        private $table = 'icl_translation_status';
        private $translation_id = 0;
        private $rid = 0;
        private $status_result;
        /**
         * WPML_TM_ICL_Translation_Status constructor.
         *
         * @param wpdb            $wpdb
         * @param WPML_TM_Records $tm_records
         * @param int             $id
         * @param string          $type
         */
        public function __construct($wpdb, &$tm_records, $id, $type = 'translation_id')
        {
        }
        /**
         * @param array $args in the same format used by \wpdb::update()
         *
         * @return $this
         */
        public function update($args)
        {
        }
        /**
         * Wrapper for \wpdb::delete()
         */
        public function delete()
        {
        }
        /**
         * @return int
         */
        public function rid()
        {
        }
        /**
         * @return int
         */
        public function status()
        {
        }
        /**
         * @return string
         */
        public function md5()
        {
        }
        /**
         * @return int
         */
        public function translation_id()
        {
        }
        public function trid()
        {
        }
        public function element_id()
        {
        }
        /**
         * @return int
         */
        public function translator_id()
        {
        }
        /**
         * @return string|int
         */
        public function service()
        {
        }
        private function get_where()
        {
        }
        private function get_args()
        {
        }
    }
    class WPML_TM_Records
    {
        /** @var WPDB $wpdb */
        public $wpdb;
        /** @var array $cache */
        private $cache = array('icl_translations' => array(), 'status' => array());
        private $preloaded_statuses = \null;
        /** @var  WPML_Frontend_Post_Actions | WPML_Admin_Post_Actions $wpml_post_translations */
        private $wpml_post_translations;
        /** @var WPML_Term_Translation $wpml_term_translations */
        private $wpml_term_translations;
        public function __construct(\wpdb $wpdb, \WPML_Post_Translation $wpml_post_translations, \WPML_Term_Translation $wpml_term_translations)
        {
        }
        public function wpdb()
        {
        }
        public function get_new_wpml_wp_cache($group = '')
        {
        }
        public function get_post_translations()
        {
        }
        public function get_term_translations()
        {
        }
        /**
         * @param int $translation_id
         *
         * @return WPML_TM_ICL_Translation_Status
         */
        public function icl_translation_status_by_translation_id($translation_id)
        {
        }
        private function maybe_preload_translation_statuses()
        {
        }
        public function get_preloaded_translation_status($translation_id, $rid)
        {
        }
        /**
         * @param int $rid
         *
         * @return WPML_TM_ICL_Translation_Status
         */
        public function icl_translation_status_by_rid($rid)
        {
        }
        /**
         * @param int $job_id
         *
         * @return WPML_TM_ICL_Translate_Job
         */
        public function icl_translate_job_by_job_id($job_id)
        {
        }
        /**
         * @param int $translation_id
         *
         * @return WPML_TM_ICL_Translations
         */
        public function icl_translations_by_translation_id($translation_id)
        {
        }
        /**
         * @param int $element_id
         * @param string $type_prefix
         *
         * @return WPML_TM_ICL_Translations
         */
        public function icl_translations_by_element_id_and_type_prefix($element_id, $type_prefix)
        {
        }
        /**
         * @param int $trid
         * @param string $lang
         *
         * @return WPML_TM_ICL_Translations
         */
        public function icl_translations_by_trid_and_lang($trid, $lang)
        {
        }
        /**
         * @param int $trid
         *
         * @return int[]
         */
        public function get_element_ids_from_trid($trid)
        {
        }
    }
    class WPML_TM_ICL_Translate_Job
    {
        private $table = 'icl_translate_job';
        private $job_id = 0;
        /** @var WPML_TM_Records $tm_records */
        private $tm_records;
        /**
         * WPML_TM_ICL_Translation_Status constructor.
         *
         * @param WPML_TM_Records $tm_records
         * @param int             $job_id
         */
        public function __construct($tm_records, $job_id)
        {
        }
        /**
         * @return int
         */
        public function translator_id()
        {
        }
        /**
         * @return string|int
         */
        public function service()
        {
        }
        /**
         * @param array $args in the same format used by \wpdb::update()
         *
         * @return $this
         */
        public function update($args)
        {
        }
        /**
         * @return bool true if this job is the most recent job for the element it
         * belongs to and hence may be updated.
         */
        public function is_open()
        {
        }
        public function rid()
        {
        }
        public function editor()
        {
        }
        private function get_job_column($column)
        {
        }
    }
    /**
     * Class WPML_TM_Translators_Dropdown
     */
    class WPML_TM_Translators_Dropdown
    {
        /**
         * @var WPML_TM_Blog_Translators $blog_translators
         */
        private $blog_translators;
        /**
         * @param WPML_TM_Blog_Translators $blog_translators
         */
        public function __construct($blog_translators)
        {
        }
        /**
         * @param array $args
         *
         * @return string
         */
        public function render($args = array())
        {
        }
    }
    class WPML_Remote_String_Translation
    {
        public static function get_string_status_labels()
        {
        }
        public static function get_string_status_label($status)
        {
        }
        public static function translation_send_strings_local($string_ids, $target, $translator_id = \null, $basket_name = \null)
        {
        }
        public static function display_string_menu($lang_filter)
        {
        }
        public static function string_status_text_filter($text, $string_id)
        {
        }
    }
    class WPML_TM_String_Basket_Request
    {
        /**
         * @param array $post clone of $_POST
         * @param callable $addStringsToBasket :: array $stringIds -> string $fromLang -> array $toLangs -> void
         */
        public static function send_to_basket($post, callable $addStringsToBasket)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_Privacy_Content_Factory implements \IWPML_Backend_Action_Loader
    {
        /**
         * @return IWPML_Action
         */
        public function create()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_Privacy_Content extends \WPML_Privacy_Content
    {
        /**
         * @return string
         */
        protected function get_plugin_name()
        {
        }
        /**
         * @return string|array
         */
        protected function get_privacy_policy()
        {
        }
    }
    abstract class WPML_TM_Post_Link
    {
        /** @var SitePress $sitepress */
        protected $sitepress;
        /** @var int $post */
        protected $post_id;
        /**
         * WPML_TM_Post_Link constructor.
         *
         * @param SitePress $sitepress
         * @param int       $post_id
         */
        public function __construct($sitepress, $post_id)
        {
        }
    }
    abstract class WPML_TM_Post_Link_Anchor extends \WPML_TM_Post_Link
    {
        /** @var string $anchor */
        private $anchor;
        /** @var string $target */
        private $target;
        /**
         * WPML_TM_Post_Link_Anchor constructor.
         *
         * @param SitePress $sitepress
         * @param int $post_id
         * @param string $anchor
         * @param string $target
         */
        public function __construct(\SitePress $sitepress, $post_id, $anchor, $target = '')
        {
        }
        public function __toString()
        {
        }
        protected abstract function link_target();
    }
    /**
     * Class WPML_TM_Post_View_Link_Anchor
     *
     * Creates post links with a given anchor text, pointing at the front-end
     * post view
     */
    class WPML_TM_Post_View_Link_Anchor extends \WPML_TM_Post_Link_Anchor
    {
        protected function link_target()
        {
        }
    }
    /**
     * Class WPML_TM_Post_View_Link_Title
     *
     * Creates post links with the post title as anchor text, pointing at the front-end
     * post view
     */
    class WPML_TM_Post_View_Link_Title extends \WPML_TM_Post_View_Link_Anchor
    {
        public function __construct(&$sitepress, $post_id)
        {
        }
    }
    /**
     * Class WPML_TM_Post_Edit_Link_Anchor
     *
     * Creates post links with a given anchor text, pointing at the back-end
     * post edit view
     */
    class WPML_TM_Post_Edit_Link_Anchor extends \WPML_TM_Post_Link_Anchor
    {
        protected function link_target()
        {
        }
    }
    /**
     * Class WPML_TM_Post_Link_Factory
     *
     * Creates post links for the TM dashboard and the translation queue
     */
    class WPML_TM_Post_Link_Factory
    {
        /** @var SitePress $sitepress */
        private $sitepress;
        public function __construct(\SitePress $sitepress)
        {
        }
        /**
         * Link to the front end, link text is the post title
         *
         * @param int $post_id
         *
         * @return string
         */
        public function view_link($post_id)
        {
        }
        /**
         * Link to the front end, link text is given by the anchor
         *
         * @param int    $post_id
         * @param string $anchor
         *
         * @return string
         */
        public function view_link_anchor($post_id, $anchor, $target = '')
        {
        }
        /**
         * Link to the backend, link text is given by the anchor
         *
         * @param int    $post_id
         * @param string $anchor
         *
         * @return string
         */
        public function edit_link_anchor($post_id, $anchor)
        {
        }
    }
    class WPML_TM_Loader
    {
        /**
         * Sets up the XLIFF class handling the frontend xliff related hooks
         * and rendering
         */
        public function load_xliff_frontend()
        {
        }
        /**
         * Wrapper for \tm_after_load()
         */
        public function tm_after_load()
        {
        }
        /**
         * @param WPML_WP_API $wpml_wp_api
         */
        public function load_pro_translation($wpml_wp_api)
        {
        }
    }
    /**
     * Class WPML_TP_Client
     *
     * @author OnTheGoSystems
     */
    class WPML_TP_Client
    {
        /** @var WPML_TP_Project $project */
        private $project;
        /** @var WPML_TP_TM_Jobs $tm_jobs */
        private $tm_jobs;
        /** @var WPML_TP_API_Services $services */
        private $services;
        /** @var WPML_TP_API_Batches $batches */
        private $batches;
        /** @var WPML_TP_API_TF_Ratings $ratings */
        private $ratings;
        /** @var WPML_TP_API_TF_Feedback $feedback */
        private $feedback;
        public function __construct(\WPML_TP_Project $project, \WPML_TP_TM_Jobs $tm_jobs)
        {
        }
        public function services()
        {
        }
        public function batches()
        {
        }
        /** @return WPML_TP_API_TF_Ratings */
        public function ratings()
        {
        }
        /** @return WPML_TP_API_TF_Feedback */
        public function feedback()
        {
        }
        /** @return WPML_TP_Project */
        public function get_project()
        {
        }
        public function get_tm_jobs()
        {
        }
    }
    abstract class WPML_TP_REST_Object
    {
        public function __construct(\stdClass $object = \null)
        {
        }
        protected abstract function get_properties();
        /**
         * @param stdClass|null $object
         */
        protected function populate_properties_from_object($object)
        {
        }
    }
    /**
     * @link https://git.onthegosystems.com/tp/translation-proxy/wikis/translation_services
     */
    class WPML_TP_Service extends \WPML_TP_REST_Object implements \Serializable
    {
        /**
         * @var int
         */
        public $id;
        /**
         * @var string
         */
        public $logo_url;
        /** @var string */
        public $logo_preview_url;
        /**
         * @var string
         */
        public $name;
        /**
         * @var string
         */
        public $description;
        /**
         * @var string
         */
        public $doc_url;
        /**
         * @var bool
         */
        public $tms;
        /**
         * @var bool
         */
        public $partner;
        /**
         * @var stdClass
         */
        public $custom_fields;
        /**
         * @var array
         * @deprecated
         */
        public $custom_fields_data;
        /**
         * @var bool
         * @deprecated
         */
        public $requires_authentication;
        /**
         * @var stdClass
         */
        public $rankings;
        /**
         * @var bool
         */
        public $has_language_pairs;
        /**
         * @var string
         */
        public $url;
        /** @var string */
        public $project_details_url;
        /** @var string */
        public $add_language_pair_url;
        /** @var string */
        public $custom_text_url;
        /** @var string */
        public $select_translator_iframe_url;
        /** @var string */
        public $translator_contact_iframe_url;
        /** @var string */
        public $quote_iframe_url;
        /** @var bool */
        public $has_translator_selection;
        /** @var int */
        public $project_name_length;
        /** @var string */
        public $suid;
        /** @var bool */
        public $notification;
        /** @var bool */
        public $preview_bundle;
        /** @var bool */
        public $deadline;
        /** @var bool */
        public $oauth;
        /** @var string */
        public $oauth_url;
        /** @var int */
        public $default_service;
        /** @var bool */
        public $translation_feedback;
        /** @var string */
        public $feedback_forward_method;
        /** @var int */
        public $last_refresh;
        /** @var string */
        public $popup_message;
        /** @var string */
        public $how_to_get_credentials_desc;
        /** @var string */
        public $how_to_get_credentials_url;
        /** @var string */
        public $client_create_account_page_url;
        /** bool */
        public $redirect_to_ts;
        /** @var \stdClass[] */
        public $countries = [];
        public function __construct(\stdClass $object = \null)
        {
        }
        /**
         * @return int
         */
        public function get_id()
        {
        }
        /**
         * @return string
         */
        public function get_logo_url()
        {
        }
        public function get_logo_preview_url()
        {
        }
        /**
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * @return string
         */
        public function get_description()
        {
        }
        /**
         * @return string
         */
        public function get_doc_url()
        {
        }
        /**
         * @return string
         */
        public function get_tms()
        {
        }
        /**
         * @return bool
         */
        public function is_partner()
        {
        }
        /**
         * @param bool $partner
         */
        public function set_partner($partner)
        {
        }
        /**
         * @return array
         */
        public function get_custom_fields()
        {
        }
        /**
         * @return array
         */
        public function get_custom_fields_data()
        {
        }
        /**
         * @return bool
         */
        public function get_requires_authentication()
        {
        }
        /**
         * @return bool
         */
        public function get_url()
        {
        }
        /**
         * @return bool
         */
        public function get_has_language_pairs()
        {
        }
        /**
         * @return stdClass
         */
        public function get_rankings()
        {
        }
        /**
         * @return string
         */
        public function get_popup_message()
        {
        }
        /**
         * @param int $id
         */
        public function set_id($id)
        {
        }
        /**
         * @param string $logo_url
         */
        public function set_logo_url($logo_url)
        {
        }
        /**
         * @param  string  $logo_preview_url
         */
        public function set_logo_preview_url($logo_preview_url)
        {
        }
        /**
         * @param string $url
         */
        public function set_url($url)
        {
        }
        /**
         * @param string $name
         */
        public function set_name($name)
        {
        }
        /**
         * @param string $description
         */
        public function set_description($description)
        {
        }
        /**
         * @param string $doc_url
         */
        public function set_doc_url($doc_url)
        {
        }
        /**
         * @param bool $tms
         */
        public function set_tms($tms)
        {
        }
        /**
         * @param stdClass $rankings
         */
        public function set_rankings($rankings)
        {
        }
        /**
         * @param stdClass $custom_fields
         */
        public function set_custom_fields($custom_fields)
        {
        }
        /**
         * @param string $popup_message
         */
        public function set_popup_message($popup_message)
        {
        }
        public function set_custom_fields_data()
        {
        }
        public function set_requires_authentication()
        {
        }
        /**
         * @param bool $value
         */
        public function set_has_language_pairs($value)
        {
        }
        /**
         * @return string
         */
        public function get_project_details_url()
        {
        }
        /**
         * @param string $project_details_url
         */
        public function set_project_details_url($project_details_url)
        {
        }
        /**
         * @return string
         */
        public function get_add_language_pair_url()
        {
        }
        /**
         * @param string $add_language_pair_url
         */
        public function set_add_language_pair_url($add_language_pair_url)
        {
        }
        /**
         * @return string
         */
        public function get_custom_text_url()
        {
        }
        /**
         * @param string $custom_text_url
         */
        public function set_custom_text_url($custom_text_url)
        {
        }
        /**
         * @return string
         */
        public function get_select_translator_iframe_url()
        {
        }
        /**
         * @param string $select_translator_iframe_url
         */
        public function set_select_translator_iframe_url($select_translator_iframe_url)
        {
        }
        /**
         * @return string
         */
        public function get_translator_contact_iframe_url()
        {
        }
        /**
         * @param string $translator_contact_iframe_url
         */
        public function set_translator_contact_iframe_url($translator_contact_iframe_url)
        {
        }
        /**
         * @return string
         */
        public function get_quote_iframe_url()
        {
        }
        /**
         * @param string $quote_iframe_url
         */
        public function set_quote_iframe_url($quote_iframe_url)
        {
        }
        /**
         * @return bool
         */
        public function get_has_translator_selection()
        {
        }
        /**
         * @param bool $has_translator_selection
         */
        public function set_has_translator_selection($has_translator_selection)
        {
        }
        /**
         * @return int
         */
        public function get_project_name_length()
        {
        }
        /**
         * @param int $project_name_length
         */
        public function set_project_name_length($project_name_length)
        {
        }
        /**
         * @return string
         */
        public function get_suid()
        {
        }
        /**
         * @param string $suid
         */
        public function set_suid($suid)
        {
        }
        /**
         * @return bool
         */
        public function get_notification()
        {
        }
        /**
         * @param bool $notification
         */
        public function set_notification($notification)
        {
        }
        /**
         * @return bool
         */
        public function get_preview_bundle()
        {
        }
        /**
         * @param bool $preview_bundle
         */
        public function set_preview_bundle($preview_bundle)
        {
        }
        /**
         * @return bool
         */
        public function get_deadline()
        {
        }
        /**
         * @param bool $deadline
         */
        public function set_deadline($deadline)
        {
        }
        /**
         * @return bool
         */
        public function get_oauth()
        {
        }
        /**
         * @param bool $oauth
         */
        public function set_oauth($oauth)
        {
        }
        /**
         * @return string
         */
        public function get_oauth_url()
        {
        }
        /**
         * @param string $oauth_url
         */
        public function set_oauth_url($oauth_url)
        {
        }
        /**
         * @return int
         */
        public function get_default_service()
        {
        }
        /**
         * @param int $default_service
         */
        public function set_default_service($default_service)
        {
        }
        /**
         * @return bool
         */
        public function get_translation_feedback()
        {
        }
        /**
         * @param bool $translation_feedback
         */
        public function set_translation_feedback($translation_feedback)
        {
        }
        /**
         * @return string
         */
        public function get_feedback_forward_method()
        {
        }
        /**
         * @param string $feedback_forward_method
         */
        public function set_feedback_forward_method($feedback_forward_method)
        {
        }
        /** @return null|int */
        public function get_last_refresh()
        {
        }
        /** @param int */
        public function set_last_refresh($timestamp)
        {
        }
        /** @return null|string */
        public function get_how_to_get_credentials_desc()
        {
        }
        /** @param string */
        public function set_how_to_get_credentials_desc($desc)
        {
        }
        /** @return null|string */
        public function get_how_to_get_credentials_url()
        {
        }
        /** @param string */
        public function set_how_to_get_credentials_url($url)
        {
        }
        /** @return null|string */
        public function get_client_create_account_page_url()
        {
        }
        /** @param string */
        public function set_client_create_account_page_url($url)
        {
        }
        /**
         * @return mixed
         */
        public function get_redirect_to_ts()
        {
        }
        /**
         * @param mixed $redirect_to_ts
         */
        public function set_redirect_to_ts($redirect_to_ts)
        {
        }
        /**
         * @return stdClass[]
         */
        public function get_countries()
        {
        }
        /**
         * @param  stdClass[]  $countries
         */
        public function set_countries(array $countries)
        {
        }
        public function serialize()
        {
        }
        public function unserialize($serialized)
        {
        }
        /**
         * @return array
         */
        protected function get_properties()
        {
        }
    }
    /**
     * @link https://git.onthegosystems.com/tp/translation-proxy/wikis/create_batch_job
     */
    class WPML_TP_Batch extends \WPML_TP_REST_Object
    {
        private $id;
        public function get_id()
        {
        }
        public function set_id($id)
        {
        }
        protected function get_properties()
        {
        }
    }
    class WPML_TP_Job_Factory
    {
        /**
         * @param stdClass $job
         *
         * @return WPML_TP_Job
         */
        public function create(\stdClass $job)
        {
        }
    }
    /**
     * @link https://git.onthegosystems.com/tp/translation-proxy/wikis/add_files_batch_job
     */
    class WPML_TP_Job extends \WPML_TP_REST_Object
    {
        const CANCELLED = 'cancelled';
        /** @var int */
        private $id;
        private $cms_id;
        private $batch;
        private $job_state;
        /** @param int $id */
        public function set_id($id)
        {
        }
        /** @return int */
        public function get_id()
        {
        }
        /** @return string */
        public function get_cms_id()
        {
        }
        /** @return string */
        public function get_job_state()
        {
        }
        /**
         * @return int|null
         */
        public function get_original_element_id()
        {
        }
        /** @return stdClass */
        public function get_batch()
        {
        }
        /**
         * @param int $id
         */
        public function set_cms_id($id)
        {
        }
        /**
         * @param string $state
         */
        public function set_job_state($state)
        {
        }
        public function set_batch(\stdClass $batch)
        {
        }
        /** @return array */
        protected function get_properties()
        {
        }
    }
    class WPML_TP_Jobs_Collection_Factory
    {
        /**
         * @return WPML_TP_Jobs_Collection
         */
        public function create()
        {
        }
    }
    /**
     * Class WPML_TP_TM_Jobs
     *
     * @author OnTheGoSystems
     */
    class WPML_TP_TM_Jobs
    {
        const CACHE_BATCH_ID = 'wpml_tp_tm_jobs_batch_id';
        /** @var wpdb $wpdb */
        private $wpdb;
        /**
         * WPML_TF_Rating_TP_API constructor.
         *
         * @param wpdb $wpdb
         */
        public function __construct(\wpdb $wpdb)
        {
        }
        /**
         * @param int $job_id
         *
         * @return null|string
         */
        public function get_batch_id($job_id)
        {
        }
    }
    class WPML_TP_Exception extends \Exception
    {
    }
    class WPML_TP_Batch_Exception extends \WPML_TP_Exception
    {
    }
    /**
     * Class WPML_TP_Project
     *
     * @author OnTheGoSystems
     */
    class WPML_TP_Project
    {
        /** @var false|stdClass $translation_service */
        private $translation_service;
        /** @var false|array $translation_projects */
        private $translation_projects;
        /** @var array $project */
        private $project;
        /**
         * WPML_TP_Project constructor.
         *
         * @param false|stdClass $translation_service
         * @param false|array    $translation_projects
         */
        public function __construct($translation_service, $translation_projects)
        {
        }
        private function init()
        {
        }
        /** @return int|null */
        public function get_translation_service_id()
        {
        }
        /** @return string|null */
        public function get_access_key()
        {
        }
        /** @return int|null */
        public function get_id()
        {
        }
        /**
         * @param string $project_property
         *
         * @return mixed
         */
        private function get_project_property($project_property)
        {
        }
    }
    /**
     * Class WPML_TP_Abstract_API
     *
     * @author OnTheGoSystems
     */
    abstract class WPML_TP_Abstract_API
    {
        /** @var WPML_TP_Client $tp_client */
        protected $tp_client;
        /** @var null|Exception $exception */
        protected $exception;
        /** @var null|string $error_message */
        protected $error_message;
        public function __construct(\WPML_TP_Client $tp_client)
        {
        }
        /** @return string */
        protected abstract function get_endpoint_uri();
        /** @return bool */
        protected abstract function is_authenticated();
        /**
         * @param array $params
         *
         * @return mixed
         */
        protected function get(array $params = array())
        {
        }
        /**
         * @param array $params
         *
         * @return mixed
         */
        protected function post(array $params = array())
        {
        }
        protected function put(array $params = array())
        {
        }
        protected function delete(array $params = array())
        {
        }
        /**
         * @param array  $params
         * @param string $method
         *
         * @return mixed
         */
        private function remote_call(array $params, $method)
        {
        }
        /**
         * @param array $params
         *
         * @return array
         */
        private function pre_process_params(array $params)
        {
        }
        /**
         * WPML does not store the Translation Proxy Job ID
         * We have to identify the job somehow.
         * This is why we are using `original_file_id`.
         * It is the same as used in the XLIFF file as a value of `original` attribute.
         * The combination of `original_file_id` and `batch_id` will be always unique.
         * Translation Proxy provides this call, with these arguments, for this specific reason.
         *
         * @see https://git.onthegosystems.com/tp/translation-proxy/wikis/rate_translation
         * @see https://git.onthegosystems.com/tp/translation-proxy/wikis/send_feedback
         *
         * @param int $job_id
         * @param int $document_source_id
         *
         * @return string
         */
        protected function get_original_file_id($job_id, $document_source_id)
        {
        }
        /** @return null|Exception */
        public function get_exception()
        {
        }
        /** @return null|string */
        public function get_error_message()
        {
        }
    }
    /**
     * Class WPML_TP_API_TF_Feedback
     *
     * @author OnTheGoSystems
     */
    class WPML_TP_API_TF_Feedback extends \WPML_TP_Abstract_API
    {
        const URI_SEND = '/batches/{batch_id}/jobs/{original_file_id}/feedbacks';
        const URI_GET_STATUS = '/feedbacks/{feedback_id}';
        /** @var string $endpoint_uri */
        private $endpoint_uri;
        /** @return string */
        protected function get_endpoint_uri()
        {
        }
        /** @return bool */
        protected function is_authenticated()
        {
        }
        /**
         * @param WPML_TF_Feedback $feedback
         * @param array            $args
         *
         * @return int|false
         */
        public function send(\WPML_TF_Feedback $feedback, array $args)
        {
        }
        /**
         * @param WPML_TF_Feedback $feedback
         *
         * @return false[string
         */
        public function status(\WPML_TF_Feedback $feedback)
        {
        }
    }
    /**
     * Class WPML_TP_API_Services
     *
     * @author OnTheGoSystems
     */
    class WPML_TP_API_Services extends \WPML_TP_Abstract_API
    {
        const ENDPOINT_SERVICES = '/services.json';
        const ENDPOINT_SERVICE = '/services/{service_id}.json';
        const ENDPOINT_LANGUAGES_MAP = '/services/{service_id}/language_identifiers.json';
        const ENDPOINT_CUSTOM_FIELDS = '/services/{service_id}/custom_fields.json';
        const TRANSLATION_MANAGEMENT_SYSTEM = 'tms';
        const PARTNER = 'partner';
        const TRANSLATION_SERVICE = 'ts';
        const CACHED_SERVICES_KEY_DATA = 'wpml_translation_services';
        const CACHED_SERVICES_TRANSIENT_KEY = 'wpml_translation_services_list';
        const CACHED_SERVICES_KEY_TIMESTAMP = 'wpml_translation_services_timestamp';
        private $endpoint;
        /** @return string */
        protected function get_endpoint_uri()
        {
        }
        /** @return bool */
        protected function is_authenticated()
        {
        }
        /**
         * @param bool $reload
         *
         * @return array
         */
        public function get_all($reload = \false)
        {
        }
        /**
         * @return bool
         */
        public function refresh_cache()
        {
        }
        /**
         * @return mixed
         */
        private function get_cached_services()
        {
        }
        /**
         * @return mixed
         */
        private function get_cached_services_timestamp()
        {
        }
        /**
         * @param $services
         */
        private function cache_services($services)
        {
        }
        /**
         * @return bool
         */
        private function has_cache_services_expired()
        {
        }
        /**
         * @param array $translation_services
         *
         * @return array
         */
        private function convert_to_tp_services($translation_services)
        {
        }
        /**
         * @param bool $partner
         * @return array
         */
        public function get_translation_services($partner = \true)
        {
        }
        /**
         * @return array
         */
        public function get_translation_management_systems()
        {
        }
        /**
         * @param bool $reload
         *
         * @return null|WPML_TP_Service
         */
        public function get_active($reload = \false)
        {
        }
        /**
         * @param int  $service_id
         * @param bool $reload
         *
         * @return null|string
         */
        public function get_name($service_id, $reload = \false)
        {
        }
        public function get_service($service_id, $reload = \false)
        {
        }
        /**
         * @param int  $translation_service_id
         * @param bool $reload
         *
         * @return null|WPML_TP_Service
         */
        private function get_one($translation_service_id, $reload = \false)
        {
        }
        /**
         * @param string $translation_service_id
         *
         * @return null|WPML_TP_Service
         */
        private function get_unlisted_service($translation_service_id)
        {
        }
        /**
         * @param $service_id
         *
         * @return array
         */
        public function get_languages_map($service_id)
        {
        }
        /**
         * @param $service_id
         *
         * @return mixed
         */
        public function get_custom_fields($service_id)
        {
        }
    }
    /**
     * Class WPML_TP_API_Batches
     */
    class WPML_TP_API_Batches extends \WPML_TP_Abstract_API
    {
        const API_VERSION = 1.1;
        const CREATE_BATCH_ENDPOINT = '/projects/{project_id}/batches.json';
        const ADD_JOB_ENDPOINT = '/batches/{batch_id}/jobs.json';
        private $endpoint_uri;
        protected function get_endpoint_uri()
        {
        }
        protected function is_authenticated()
        {
        }
        /**
         * @throws WPML_TP_Batch_Exception
         *
         * @param array       $batch_data
         * @param false|array $extra_fields
         *
         * @return false|stdClass
         *
         * @link https://git.onthegosystems.com/tp/translation-proxy/wikis/create_batch_job
         */
        public function create(array $batch_data, $extra_fields)
        {
        }
        /**
         * @param int   $batch_id
         * @param array $job_data
         *
         * @return false|WPML_TP_Job
         *
         * @link https://git.onthegosystems.com/tp/translation-proxy/wikis/add_files_batch_job
         */
        public function add_job($batch_id, array $job_data)
        {
        }
        /**
         * @link https://git.onthegosystems.com/tp/translation-proxy/wikis/commit_batch_job
         */
        public function commit()
        {
        }
        /**
         * @link https://git.onthegosystems.com/tp/translation-proxy/wikis/send-preview-bundle-job
         */
        public function send_preview_bundle()
        {
        }
    }
    /**
     * Class WPML_TP_API_TF_Ratings
     *
     * @author OnTheGoSystems
     */
    class WPML_TP_API_TF_Ratings extends \WPML_TP_Abstract_API
    {
        /** @return string */
        protected function get_endpoint_uri()
        {
        }
        /** @return bool */
        protected function is_authenticated()
        {
        }
        /**
         * @param WPML_TF_Feedback $feedback
         *
         * @return int|false
         */
        public function send(\WPML_TF_Feedback $feedback)
        {
        }
    }
    class WPML_TP_Jobs_Collection
    {
        private $project;
        private $job_factory;
        private $batch_factory;
        private $jobs;
        public function __construct(\TranslationProxy_Project $project, \WPML_TP_Job_Factory $job_factory, \WPML_Translation_Batch_Factory $batch_factory)
        {
        }
        /**
         * @return WPML_TP_Job[]
         */
        public function get_all()
        {
        }
        /**
         * @param WPML_Translation_Job $job
         *
         * @return bool
         */
        public function is_job_canceled(\WPML_Translation_Job $job)
        {
        }
    }
    /**
     * Class WPML_TP_Client_Factory
     *
     * @author OnTheGoSystems
     */
    class WPML_TP_Client_Factory
    {
        /** @return WPML_TP_Client */
        public function create()
        {
        }
    }
    abstract class WPML_TM_AJAX_Factory_Obsolete
    {
        protected $ajax_actions;
        /**
         * @var WPML_WP_API
         */
        protected $wpml_wp_api;
        public function __construct(&$wpml_wp_api)
        {
        }
        protected function init()
        {
        }
        protected final function add_ajax_action($handle, $callback)
        {
        }
        private final function add_ajax_actions()
        {
        }
        public abstract function enqueue_resources($hook_suffix);
    }
    abstract class WPML_TM_Translatable_Element
    {
        /** @var WPML_TM_Word_Count_Records $word_count_records */
        protected $word_count_records;
        /** @var WPML_TM_Word_Count_Single_Process $single_process */
        protected $single_process;
        /** @var int $id */
        protected $id;
        /**
         * @param int                               $id
         * @param WPML_TM_Word_Count_Records        $word_count_records
         * @param WPML_TM_Word_Count_Single_Process $single_process
         */
        public function __construct($id, \WPML_TM_Word_Count_Records $word_count_records, \WPML_TM_Word_Count_Single_Process $single_process)
        {
        }
        public function set_id($id)
        {
        }
        protected abstract function init($id);
        public abstract function get_type_name($label = \null);
        protected abstract function get_type();
        protected abstract function get_total_words();
        /** @return int */
        public function get_words_count()
        {
        }
    }
    class WPML_TM_Post extends \WPML_TM_Translatable_Element
    {
        /** @var array|null|WP_Post */
        private $wp_post;
        protected function init($id)
        {
        }
        protected function get_type()
        {
        }
        protected function get_total_words()
        {
        }
        public function get_type_name($label = \null)
        {
        }
    }
    class WPML_TM_Word_Count_Records_Factory
    {
        /**
         * @return \WPML_TM_Word_Count_Records
         * @throws \Auryn\InjectionException
         */
        public function create()
        {
        }
    }
    class WPML_TM_Word_Count_Records
    {
        /** @var WPML_TM_Word_Count_Post_Records $post_records */
        private $post_records;
        /** @var WPML_ST_Word_Count_Package_Records|null $package_records */
        private $package_records;
        /** @var WPML_ST_Word_Count_String_Records|null $string_records */
        private $string_records;
        public function __construct(\WPML_TM_Word_Count_Post_Records $post_records, \WPML_ST_Word_Count_Package_Records $package_records = \null, \WPML_ST_Word_Count_String_Records $string_records = \null)
        {
        }
        /** @return array */
        public function get_all_post_ids_without_word_count()
        {
        }
        /**
         * @param $post_id
         *
         * @return WPML_TM_Count
         */
        public function get_post_word_count($post_id)
        {
        }
        /**
         * @param int           $post_id
         * @param WPML_TM_Count $word_count
         *
         * @return bool|int
         */
        public function set_post_word_count($post_id, \WPML_TM_Count $word_count)
        {
        }
        /** @return array */
        public function get_all_package_ids()
        {
        }
        /** @return array */
        public function get_packages_ids_without_word_count()
        {
        }
        /**
         * @param int $post_id
         *
         * @return WPML_TM_Count[]
         */
        public function get_packages_word_counts($post_id)
        {
        }
        /**
         * @param int           $package_id
         * @param WPML_TM_Count $word_count
         */
        public function set_package_word_count($package_id, \WPML_TM_Count $word_count)
        {
        }
        /**
         * @param int $package_id
         *
         * @return WPML_TM_Count
         */
        public function get_package_word_count($package_id)
        {
        }
        /** @return int */
        public function get_strings_total_words()
        {
        }
        /** @return array */
        public function get_all_string_values_without_word_count()
        {
        }
        /**
         * @param string   $lang
         * @param int|null $package_id
         *
         * @return int
         */
        public function get_string_words_to_translate_per_lang($lang, $package_id = \null)
        {
        }
        public function get_string_value_and_language($string_id)
        {
        }
        /**
         * @param int $id
         * @param int $word_count
         */
        public function set_string_word_count($id, $word_count)
        {
        }
        /**
         * @param int $id
         *
         * @return int
         */
        public function get_string_word_count($id)
        {
        }
        public function reset_all(array $requested_types)
        {
        }
        /**
         * @param array $kinds
         *
         * @return array
         */
        public function get_package_ids_from_kind_slugs(array $kinds)
        {
        }
        /**
         * @param array $post_types
         *
         * @return array
         */
        public function get_package_ids_from_post_types(array $post_types)
        {
        }
        /**
         * @param array $package_ids
         *
         * @return array
         */
        public function get_strings_ids_from_package_ids(array $package_ids)
        {
        }
        /**
         * @param array $package_ids
         *
         * @return array
         */
        public function get_post_source_ids_from_types(array $package_ids)
        {
        }
        /**
         * @param string $type
         *
         * @return int
         */
        public function count_items_by_type($group, $type)
        {
        }
        public function count_word_counts_by_type($group, $type)
        {
        }
        public function get_word_counts_by_type($group, $type)
        {
        }
        /**
         * @param array $raw_counts
         *
         * @return WPML_TM_Count_Composite
         */
        private function build_count_composite_from_raw_counts(array $raw_counts)
        {
        }
    }
    class WPML_TM_Word_Count_Post_Records
    {
        const META_KEY = '_wpml_word_count';
        /** @var wpdb $wpdb */
        private $wpdb;
        public function __construct(\wpdb $wpdb)
        {
        }
        /**
         * Returns only IDs in the source language
         *
         * @return array
         */
        public function get_all_ids_without_word_count()
        {
        }
        /**
         * @param int $post_id
         *
         * @return string raw word count
         */
        public function get_word_count($post_id)
        {
        }
        /**
         * @param int    $post_id
         * @param string $word_count raw word count
         *
         * @return bool|int
         */
        public function set_word_count($post_id, $word_count)
        {
        }
        public function reset_all(array $post_types)
        {
        }
        /**
         * @param array $post_types
         *
         * @return array
         */
        public function get_source_ids_from_types(array $post_types)
        {
        }
        /**
         * @param string $post_type
         *
         * @return int
         */
        public function count_source_items_by_type($post_type)
        {
        }
        public function count_word_counts_by_type($post_type)
        {
        }
        /**
         * @param string $post_type
         *
         * @return array
         */
        public function get_word_counts_by_type($post_type)
        {
        }
    }
    interface IWPML_TM_Word_Calculator_Post
    {
        public function count_words(\WPML_Post_Element $post_element, $lang = \null);
    }
    class WPML_TM_Word_Calculator_Post_Object implements \IWPML_TM_Word_Calculator_Post
    {
        /** @var WPML_TM_Word_Calculator $calculator */
        private $calculator;
        /** @var WPML_TM_Word_Calculator_Post_Packages $packages_calculator */
        private $packages_calculator;
        public function __construct(\WPML_TM_Word_Calculator $calculator, \WPML_TM_Word_Calculator_Post_Packages $packages_calculator)
        {
        }
        /**
         * @param WPML_Post_Element $post_element
         * @param string            $lang
         *
         * @return int
         */
        public function count_words(\WPML_Post_Element $post_element, $lang = \null)
        {
        }
        private function has_string_packages(\WPML_Post_Element $post_element)
        {
        }
    }
    class WPML_TM_Word_Calculator_Post_Packages implements \IWPML_TM_Word_Calculator_Post
    {
        /** @var WPML_TM_Word_Count_Records $records */
        private $records;
        /** @var WPML_TM_Count_Composite[] $package_counts */
        private $package_counts;
        public function __construct(\WPML_TM_Word_Count_Records $records)
        {
        }
        /**
         * @param WPML_Post_Element $post_element
         * @param string|null       $lang
         *
         * @return int
         */
        public function count_words(\WPML_Post_Element $post_element, $lang = \null)
        {
        }
        /**
         * @param WPML_Post_Element $post_element
         *
         * @return WPML_TM_Count_Composite
         */
        private function get_package_counts(\WPML_Post_Element $post_element)
        {
        }
    }
    class WPML_TM_Word_Calculator_Post_Custom_Fields implements \IWPML_TM_Word_Calculator_Post
    {
        /** @var WPML_TM_Word_Calculator $calculator */
        private $calculator;
        /** @var array|null $cf_settings from `$sitepress_settings['translation-management']['custom_fields_translation']` */
        private $cf_settings;
        /** @var array $fields_to_count */
        private $fields_to_count = array();
        /**
         * WPML_TM_Word_Calculator_Post_Custom_Fields constructor.
         *
         * $cf_settings:
         *
         * <code>
         * $array = [
         *   'custom-field-1'      =>  WPML_TRANSLATE_CUSTOM_FIELD,
         *   'custom-field-2'      =>  WPML_COPY_CUSTOM_FIELD,
         *   'custom-field-3'      =>  WPML_IGNORE_CUSTOM_FIELD,
         *   'custom-field-4'      =>  WPML_IGNORE_CUSTOM_FIELD,
         *   'custom-field-5'      =>  WPML_COPY_ONCE_CUSTOM_FIELD,
         * ]
         * </code>
         *
         * @param \WPML_TM_Word_Calculator $calculator  An instance of WPML_TM_Word_Calculator.
         * @param array|null               $cf_settings An associative array where they key is the name of the custom field and the value is an integer representing the translation method.
         *
         * @see inc/constants.php for the values of the constsnts
         */
        public function __construct(\WPML_TM_Word_Calculator $calculator, array $cf_settings = \null)
        {
        }
        public function count_words(\WPML_Post_Element $post_element, $lang = \null)
        {
        }
        /** @return bool */
        private function is_registered_type(\WPML_Post_Element $post_element)
        {
        }
        /** @return array */
        private function get_translatable_fields_to_count($post_id)
        {
        }
    }
    /**
     * @see https://onthegosystems.myjetbrains.com/youtrack/issue/wpmltm-2327
     */
    class WPML_TM_Word_Calculator
    {
        const ASIAN_LANGUAGE_CHAR_SIZE = 6;
        /** @var WPML_PHP_Functions $php_functions */
        private $php_functions;
        public function __construct(\WPML_PHP_Functions $php_functions)
        {
        }
        /**
         * @param string $string
         * @param string $language_code
         *
         * @return int
         */
        public function count_words($string, $language_code)
        {
        }
        /** @return bool */
        private function exclude_shortcodes_in_words_count()
        {
        }
        /**
         * @param string $source
         *
         * @return string
         */
        private function sanitize_string($source)
        {
        }
        /**
         * @param string $string
         *
         * @return string
         */
        private function extract_content_in_shortcodes($string)
        {
        }
        /**
         * @param string $string
         *
         * @return string
         */
        private function strip_urls($string)
        {
        }
        public static function get_asian_languages()
        {
        }
    }
    interface IWPML_TM_Word_Count_Set
    {
        public function process($id);
    }
    class WPML_TM_Word_Count_Single_Process_Factory
    {
        public function create()
        {
        }
    }
    class WPML_TM_Word_Count_Set_Post
    {
        /** @var WPML_Translation_Element_Factory $element_factory */
        private $element_factory;
        /** @var WPML_TM_Word_Count_Records $records */
        private $records;
        /** @var IWPML_TM_Word_Calculator_Post[] $post_calculators */
        private $post_calculators;
        /** @var array $active_langs */
        private $active_langs;
        /** @var WPML_Post_Element $post_element */
        private $post_element;
        /**
         * @param WPML_Translation_Element_Factory $element_factory
         * @param WPML_TM_Word_Count_Records       $records
         * @param IWPML_TM_Word_Calculator_Post[]  $calculators
         * @param array                            $active_langs
         */
        public function __construct(\WPML_Translation_Element_Factory $element_factory, \WPML_TM_Word_Count_Records $records, array $calculators, array $active_langs)
        {
        }
        /**
         * @param int $post_id
         */
        public function process($post_id)
        {
        }
        /**
         * @param string $lang
         *
         * @return int
         */
        private function calculate_in_lang($lang)
        {
        }
    }
    class WPML_TM_Word_Count_Set_String
    {
        /** @var WPML_TM_Word_Count_Records $records */
        private $records;
        /** @var WPML_TM_Word_Calculator $calculator */
        private $calculator;
        public function __construct(\WPML_TM_Word_Count_Records $records, \WPML_TM_Word_Calculator $calculator)
        {
        }
        /**
         * @param int $string_id
         */
        public function process($string_id)
        {
        }
    }
    class WPML_TM_Word_Count_Setters_Factory
    {
        /**
         * @return IWPML_TM_Word_Count_Set[]
         */
        public function create()
        {
        }
    }
    class WPML_TM_Word_Count_Single_Process
    {
        /** @var IWPML_TM_Word_Count_Set[] $setters */
        private $setters;
        /** @var WPML_ST_String_Dependencies_Builder $dependencies_builder */
        private $dependencies_builder;
        /**
         * @param IWPML_TM_Word_Count_Set[]           $setters
         * @param WPML_ST_String_Dependencies_Builder $dependencies_builder
         */
        public function __construct(array $setters, \WPML_ST_String_Dependencies_Builder $dependencies_builder = \null)
        {
        }
        /**
         * @param string $element_type
         * @param int    $element_id
         */
        public function process($element_type, $element_id)
        {
        }
    }
    class WPML_TM_Word_Count_Set_Package
    {
        /** @var WPML_ST_Package_Factory $package_factory */
        private $package_factory;
        /** @var WPML_TM_Word_Count_Records $records */
        private $records;
        /** @var array $active_langs */
        private $active_langs;
        public function __construct(\WPML_ST_Package_Factory $package_factory, \WPML_TM_Word_Count_Records $records, array $active_langs)
        {
        }
        /** @param int $package_id */
        public function process($package_id)
        {
        }
    }
    interface IWPML_TM_Count
    {
        public function get_total_words();
        public function get_words_to_translate($lang);
    }
    class WPML_TM_Count_Composite implements \IWPML_TM_Count
    {
        /** @var IWPML_TM_Count[] $counts */
        private $counts = array();
        public function add_count(\IWPML_TM_Count $count)
        {
        }
        /** @var IWPML_TM_Count[] $counts */
        public function add_counts($counts)
        {
        }
        /**
         * @param string $lang
         *
         * @return int
         */
        public function get_words_to_translate($lang)
        {
        }
        /** @return int */
        public function get_total_words()
        {
        }
    }
    class WPML_TM_Count implements \IWPML_TM_Count
    {
        /** @var int $total */
        private $total = 0;
        /** @var array $to_translate */
        private $to_translate;
        /**
         * @param string|null $json_data
         */
        public function __construct($json_data = \null)
        {
        }
        /** @param string $json_data */
        public function set_properties_from_json($json_data)
        {
        }
        /** @return int */
        public function get_total_words()
        {
        }
        /** @param int $total */
        public function set_total_words($total)
        {
        }
        /**
         * @param string $lang
         *
         * @return int|null
         */
        public function get_words_to_translate($lang)
        {
        }
        /** @return string */
        public function to_string()
        {
        }
        public function set_words_to_translate($lang, $quantity)
        {
        }
    }
    class WPML_TM_Package_Element extends \WPML_TM_Translatable_Element
    {
        /** @var WPML_ST_Package_Factory $st_package_factory */
        private $st_package_factory;
        /** @var WPML_Package $st_package */
        private $st_package;
        /**
         * @param int                               $id
         * @param WPML_TM_Word_Count_Records        $word_count_records
         * @param WPML_TM_Word_Count_Single_Process $single_process
         * @param WPML_ST_Package_Factory|null      $st_package_factory
         */
        public function __construct($id, \WPML_TM_Word_Count_Records $word_count_records, \WPML_TM_Word_Count_Single_Process $single_process, \WPML_ST_Package_Factory $st_package_factory = \null)
        {
        }
        /** @param int $id */
        protected function init($id)
        {
        }
        protected function get_type()
        {
        }
        /** @return int */
        protected function get_total_words()
        {
        }
        /**
         * @param null $label
         *
         * @return string
         */
        public function get_type_name($label = \null)
        {
        }
    }
    class WPML_TM_String extends \WPML_TM_Translatable_Element
    {
        protected function init($id)
        {
        }
        protected function get_type()
        {
        }
        protected function get_total_words()
        {
        }
        public function get_type_name($label = \null)
        {
        }
    }
    class WPML_TM_Translatable_Element_Provider
    {
        /** @var WPML_TM_Word_Count_Records $word_count_records */
        private $word_count_records;
        /** @var WPML_TM_Word_Count_Single_Process $single_process */
        private $single_process;
        /** @var null|WPML_ST_Package_Factory $st_package_factory */
        private $st_package_factory;
        public function __construct(\WPML_TM_Word_Count_Records $word_count_records, \WPML_TM_Word_Count_Single_Process $single_process, \WPML_ST_Package_Factory $st_package_factory = \null)
        {
        }
        /**
         * @param WPML_TM_Job_Entity $job
         *
         * @return null|WPML_TM_Package_Element|WPML_TM_Post|WPML_TM_String
         */
        public function get_from_job(\WPML_TM_Job_Entity $job)
        {
        }
        /**
         * @param string $type
         * @param int    $id
         *
         * @return null|WPML_TM_Package_Element|WPML_TM_Post|WPML_TM_String
         */
        public function get_from_type($type, $id)
        {
        }
        /**
         * @param int $id
         *
         * @return WPML_TM_Post
         */
        private function get_post($id)
        {
        }
        /**
         * @param int $id
         *
         * @return WPML_TM_String
         */
        private function get_string($id)
        {
        }
        /**
         * @param int $id
         *
         * @return WPML_TM_Package_Element
         */
        private function get_package($id)
        {
        }
    }
    class WPML_TM_Word_Count_Refresh_Hooks implements \IWPML_Action
    {
        /** @var WPML_TM_Word_Count_Single_Process_Factory $single_process_factory */
        private $single_process_factory;
        /** @var WPML_Translation_Element_Factory $element_factory */
        private $element_factory;
        /** @var WPML_ST_Package_Factory|null $st_package_factory */
        private $st_package_factory;
        /** @var array $packages_to_refresh */
        private $packages_to_refresh = array();
        public function __construct(\WPML_TM_Word_Count_Single_Process_Factory $single_process_factory, \WPML_Translation_Element_Factory $element_factory, \WPML_ST_Package_Factory $st_package_factory = \null)
        {
        }
        public function add_hooks()
        {
        }
        /** @param int $post_id */
        public function refresh_post_word_count($post_id)
        {
        }
        /**
         * @param string $string_value
         * @param string $string_name
         * @param array  $package
         */
        public function register_string_action($string_value, $string_name, $package)
        {
        }
        /** @param array $package */
        public function delete_unused_package_strings_action($package)
        {
        }
        /**
         * @param array $translations
         * @param array $package
         */
        public function set_translated_strings_action($translations, $package)
        {
        }
        /** @param array $package_array */
        private function defer_package_refresh($package_array)
        {
        }
        public function refresh_packages_word_count()
        {
        }
    }
    class WPML_TM_Word_Count_Ajax_Hooks implements \IWPML_Action
    {
        /** @var WPML_TM_Word_Count_Report $report */
        private $report;
        /** @var WPML_TM_Word_Count_Background_Process_Factory $process_factory*/
        private $process_factory;
        /** @var bool $requested_types_status */
        private $requested_types_status;
        public function __construct(\WPML_TM_Word_Count_Report $report, \WPML_TM_Word_Count_Background_Process_Factory $process_factory, $requested_types_status)
        {
        }
        public function add_hooks()
        {
        }
        public function __call($method_name, $arguments)
        {
        }
        private function get_report()
        {
        }
        private function start_count()
        {
        }
        private function cancel_count()
        {
        }
    }
    class WPML_TM_Word_Count_Process_Hooks implements \IWPML_Action
    {
        /** @var WPML_TM_Word_Count_Background_Process_Factory $process_factory */
        private $process_factory;
        /**
         * @param WPML_TM_Word_Count_Background_Process_Factory $process_factory
         */
        public function __construct(\WPML_TM_Word_Count_Background_Process_Factory $process_factory)
        {
        }
        /**
         * We need to include the hooks located in WP_Async_Request::__construct.
         */
        public function add_hooks()
        {
        }
    }
    class WPML_TM_Word_Count_Admin_Hooks implements \IWPML_Action
    {
        /** @var WPML_WP_API $wp_api */
        private $wp_api;
        public function __construct(\WPML_WP_API $wp_api)
        {
        }
        public function add_hooks()
        {
        }
        public function enqueue_scripts()
        {
        }
        /**
         * @param string $default_url
         *
         * @return string
         */
        public function words_count_url_filter($default_url)
        {
        }
        public function display_dialog_open_link()
        {
        }
    }
    class WPML_TM_Word_Count_Hooks_Factory implements \IWPML_Backend_Action_Loader, \IWPML_Frontend_Action_Loader
    {
        const PROCESS_PENDING = 'pending';
        const PROCESS_IN_PROGRESS = 'in-progress';
        const PROCESS_COMPLETED = 'completed';
        const OPTION_KEY_REQUESTED_TYPES_STATUS = 'wpml_word_count_requested_types_status';
        const NONCE_ACTION = 'wpml_tm_word_count_ajax';
        private $hooks = array();
        private $requested_types_status;
        private $translation_element_factory;
        private $words_count_background_process_factory;
        private $words_count_single_process_factory;
        public function create()
        {
        }
        private function add_refresh_hooks()
        {
        }
        private function add_process_hooks()
        {
        }
        private function add_admin_hooks()
        {
        }
        private function add_ajax_hooks()
        {
        }
        /**
         * @return WPML_TM_Word_Count_Single_Process_Factory
         */
        private function get_words_count_single_process_factory()
        {
        }
        private function get_translation_element_factory()
        {
        }
        /**
         * @return WPML_TM_Word_Count_Background_Process_Factory
         */
        private function get_words_count_background_process_factory()
        {
        }
        /**
         * @return SitePress
         */
        private function get_sitepress()
        {
        }
        private function is_heartbeat_autosave()
        {
        }
    }
    abstract class WPML_TM_Word_Count_Background_Process extends \WP_Background_Process
    {
        /** @var IWPML_TM_Word_Count_Queue_Items $queue */
        protected $queue;
        /** @var IWPML_TM_Word_Count_Set[] $setters */
        private $setters;
        /**
         * @param IWPML_TM_Word_Count_Queue_Items $queue
         * @param IWPML_TM_Word_Count_Set[]       $setters
         */
        public function __construct(\IWPML_TM_Word_Count_Queue_Items $queue, array $setters)
        {
        }
        /**
         * This abstract method is not implemented because we override the `handle` method.
         */
        protected function task($item)
        {
        }
        protected function handle()
        {
        }
        protected function is_queue_empty()
        {
        }
    }
    class WPML_TM_Word_Count_Background_Process_Requested_Types extends \WPML_TM_Word_Count_Background_Process
    {
        /** @var WPML_TM_Word_Count_Queue_Items_Requested_Types $queue */
        protected $queue;
        /** @var WPML_TM_Word_Count_Records $records */
        private $records;
        /**
         * @param WPML_TM_Word_Count_Queue_Items_Requested_Types $queue_items
         * @param IWPML_TM_Word_Count_Set[]       $setters
         */
        public function __construct(\WPML_TM_Word_Count_Queue_Items_Requested_Types $queue_items, array $setters, \WPML_TM_Word_Count_Records $records)
        {
        }
        public function init($requested_types)
        {
        }
        public function dispatch()
        {
        }
        public function complete()
        {
        }
        /**
         * Filter result of memory_exceeded() function in WP_Background_Process class.
         * Used by it get_memory_limit() function of WP_Background_Process class contains a number of bugs,
         * producing wrong result when 'memory_limit' setting in php.ini is in human readable format like '1G'.
         *
         * @return bool
         */
        public function memory_exceeded_filter()
        {
        }
        /**
         * Get memory limit in bytes.
         *
         * @return int
         */
        protected function get_memory_limit()
        {
        }
        /**
         * Converts a shorthand byte value to an integer byte value.
         *
         * @param string $value A (PHP ini) byte value, either shorthand or ordinary.
         * @return int An integer byte value.
         */
        protected function convert_shorthand_to_bytes($value)
        {
        }
    }
    class WPML_TM_Word_Count_Background_Process_Factory
    {
        const PREFIX = 'wpml_tm';
        const ACTION_REQUESTED_TYPES = 'word_count_background_process_requested_types';
        /**
         * @return WPML_TM_Word_Count_Background_Process_Requested_Types
         */
        public function create_requested_types()
        {
        }
    }
    interface IWPML_TM_Word_Count_Queue_Items
    {
        /**
         * @return array|null a tuple containing the element id and type or null if queue is empty
         */
        public function get_next();
        /**
         * @param int    $id
         * @param string $type
         */
        public function remove($id, $type);
        /** @return bool */
        public function is_completed();
        public function save();
    }
    class WPML_TM_Word_Count_Queue_Items_Requested_Types implements \IWPML_TM_Word_Count_Queue_Items
    {
        const OPTION_KEY = 'wpml_word_count_queue_items_requested_types';
        const STEP_STANDALONE_PACKAGES = 1;
        const STEP_POST_PACKAGES = 2;
        const STEP_POSTS = 3;
        const STEP_COMPLETED = 4;
        /** @var WPML_TM_Word_Count_Records $records */
        private $records;
        /** @var array $requested_types to be processed */
        private $requested_types;
        /** @var string $step */
        private $step;
        /** @var array|null $items */
        private $items = array('string' => array(), 'package' => array(), 'post' => array());
        public function __construct(\WPML_TM_Word_Count_Records $records)
        {
        }
        /**
         * @return array|null a tuple containing the element id and type or null if queue is empty
         */
        public function get_next()
        {
        }
        private function init_queue()
        {
        }
        private function restore_queue_from_db()
        {
        }
        private function init_step()
        {
        }
        private function add_standalone_packages_to_queue()
        {
        }
        private function add_post_packages_to_queue()
        {
        }
        private function add_posts_to_queue()
        {
        }
        private function make_item_keys_equals_to_id()
        {
        }
        private function maybe_move_to_next_step()
        {
        }
        /**
         * @param int    $id
         * @param string $type
         */
        public function remove($id, $type)
        {
        }
        /** @return bool */
        private function has_items()
        {
        }
        /** @return bool */
        public function is_completed()
        {
        }
        public function save()
        {
        }
        public function reset(array $requested_types)
        {
        }
    }
    class WPML_TM_Word_Count_Report_View
    {
        const TEMPLATE_PATH = '/templates/words-count';
        const TEMPLATE_FILE = 'report.twig';
        /** @var WPML_Twig_Template_Loader $loader */
        private $loader;
        /** @var WPML_WP_Cron_Check $cron_check */
        private $cron_check;
        public function __construct(\WPML_Twig_Template_Loader $loader, \WPML_WP_Cron_Check $cron_check)
        {
        }
        public function show(array $model)
        {
        }
        public static function get_strings()
        {
        }
    }
    class WPML_TM_Word_Count_Report
    {
        const OPTION_KEY = 'wpml_word_count_report';
        const POSTS_PER_MINUTE = 1200;
        const PACKAGES_PER_MINUTE = 5000;
        const POST_TYPES = 'post_types';
        const PACKAGE_KINDS = 'package_kinds';
        const IS_REQUESTED = 'isRequested';
        /** @var WPML_TM_Word_Count_Records $records */
        private $records;
        /** @var WPML_TM_Word_Count_Report_View $view */
        private $view;
        /** @var SitePress $sitepress */
        private $sitepress;
        /** @var array $post_types */
        private $post_types;
        /** @var WPML_Package_Helper $st_package_helper */
        private $st_package_helper;
        /** @var array $package_kinds */
        private $package_kinds = array();
        /** @var bool $requested_types_status */
        private $requested_types_status;
        /** @var array $data */
        private $data;
        /**
         * WPML_TM_Word_Count_Report constructor.
         *
         * @param WPML_TM_Word_Count_Report_View $view
         * @param WPML_TM_Word_Count_Records     $records
         * @param SitePress                      $sitepress
         * @param string|false                   $requested_types_status
         * @param WPML_Package_Helper|null       $st_package_helper
         */
        public function __construct(\WPML_TM_Word_Count_Report_View $view, \WPML_TM_Word_Count_Records $records, \SitePress $sitepress, $requested_types_status, \WPML_Package_Helper $st_package_helper = \null)
        {
        }
        /**
         * @return string
         */
        public function render()
        {
        }
        private function is_requested($group, $type)
        {
        }
        /**
         * @param string                $group
         * @param WP_Post_Type|stdClass $type_object
         *
         * @return array|null
         */
        private function build_type_row($group, $type_object)
        {
        }
        private function get_totals()
        {
        }
        public function set_requested_types(array $requested_types)
        {
        }
        private function set_requested_group($group, $types, $requested_types)
        {
        }
        private function init_data()
        {
        }
        private function save_data()
        {
        }
        private function get_post_types()
        {
        }
        public function get_package_kinds()
        {
        }
    }
    /**
     * Class WPML_TM_Translation_Priorities_Register_Action
     *
     */
    class WPML_TM_Translation_Priorities_Register_Action implements \IWPML_Action
    {
        /** @var SitePress */
        private $sitepress;
        const TRANSLATION_PRIORITY_TAXONOMY = 'translation_priority';
        /**
         * WPML_TM_Translation_Priorities_Register_Action constructor.
         *
         * @param SitePress $sitepress
         */
        public function __construct(\SitePress $sitepress)
        {
        }
        public function add_hooks()
        {
        }
        public function register_translation_priority_taxonomy()
        {
        }
    }
    /**
     * Class WPML_TM_Translation_Priorities_Factory
     *
     */
    class WPML_TM_Translation_Priorities_Factory implements \IWPML_Frontend_Action_Loader, \IWPML_Backend_Action_Loader
    {
        public function create()
        {
        }
    }
    /**
     * Class WPML_Translation_Priorities
     *
     */
    class WPML_TM_Translation_Priorities
    {
        const DEFAULT_TRANSLATION_PRIORITY_VALUE_SLUG = 'optional';
        const TAXONOMY = 'translation_priority';
        public function get_values()
        {
        }
        /**
         * @return int
         */
        public function get_default_value_id()
        {
        }
        /**
         * @return WP_Term
         */
        public static function get_default_term()
        {
        }
        /**
         * @param int    $term_taxonomy_id
         * @param string $original_name
         * @param string $target_language
         *
         * @return int|bool
         */
        public static function insert_missing_translation($term_taxonomy_id, $original_name, $target_language)
        {
        }
        public static function insert_missing_default_terms()
        {
        }
    }
    class WPML_Translate_Link_Target_Global_State extends \WPML_SP_User
    {
        private $rescan_required;
        const OPTION_NAME = 'WPML_Translate_Link_Target_Global_State';
        const SHOULD_FIX_CONTENT_STATE = 'WPML_Translate_Link_Target_Global_State::should_fix_content';
        public function __construct(\SitePress &$sitepress)
        {
        }
        public function should_fix_content()
        {
        }
        public function is_rescan_required()
        {
        }
        public function set_rescan_required()
        {
        }
        public function clear_rescan_required()
        {
        }
    }
    /**
     * Class WPML_Translate_Link_Targets_In_Content
     *
     * @package wpml-tm
     */
    abstract class WPML_Translate_Link_Targets_In_Content extends \WPML_WPDB_User
    {
        protected $scanning_in_progress = \false;
        protected $content_to_fix;
        protected $number_of_links_fixed;
        /* var WPML_Pro_Translation	$pro_translation */
        protected $pro_translation;
        /** @var  WPML_Translate_Link_Target_Global_State $translate_link_target_global_state */
        private $translate_link_target_global_state;
        const MAX_TO_FIX_FOR_NEW_CONTENT = 10;
        public function __construct(\WPML_Translate_Link_Target_Global_State $translate_link_target_global_state, &$wpdb, $pro_translation)
        {
        }
        public function new_content()
        {
        }
        private function do_new_content()
        {
        }
        public function get_number_of_links_that_were_fixed()
        {
        }
        public function fix($start = 0, $count = 0)
        {
        }
        protected abstract function get_contents_with_links_needing_fix($start = 0, $count = 0);
        protected abstract function get_content_type();
        public abstract function get_number_to_be_fixed($start_id = 0);
    }
    /**
     * Class WPML_Translate_Link_Targets_In_Posts
     *
     * @package wpml-tm
     */
    class WPML_Translate_Link_Targets_In_Posts extends \WPML_Translate_Link_Targets_In_Content
    {
        protected function get_contents_with_links_needing_fix($start_id = 0, $count = 0)
        {
        }
        protected function get_content_type()
        {
        }
        public function get_number_to_be_fixed($start_id = 0)
        {
        }
        protected function get_sql($start_id, $count, $return_count_only)
        {
        }
    }
    class WPML_Translate_Link_Targets_In_Posts_Global extends \WPML_Translate_Link_Targets_In_Posts
    {
        protected function get_contents_with_links_needing_fix($start_id = 0, $count = 0)
        {
        }
        public function get_number_to_be_fixed($start_id = 0)
        {
        }
        protected function get_sql($start_id, $count, $return_count_only)
        {
        }
    }
}
namespace WPML\TranslateLinkTargets {
    class Hooks implements \IWPML_Backend_Action_Loader, \IWPML_Frontend_Action_Loader
    {
        public function create()
        {
        }
        public static function add_hooks()
        {
        }
        public static function clearStatus($postId)
        {
        }
    }
}
namespace {
    /**
     * Class WPML_Links_Fixed_Status
     *
     * @package wpml-translation-management
     */
    abstract class WPML_Links_Fixed_Status
    {
        public abstract function set($status);
        public abstract function are_links_fixed();
    }
    /**
     * Class WPML_Links_Fixed_Status_For_Posts
     *
     * @package wpml-tm
     */
    class WPML_Links_Fixed_Status_For_Strings extends \WPML_Links_Fixed_Status
    {
        private $wp_api;
        private $string_id;
        private $option_name = 'wpml_strings_need_links_fixed';
        public function __construct(&$wp_api, $string_id)
        {
        }
        public function set($status)
        {
        }
        public function are_links_fixed()
        {
        }
        private function remove_string_from_strings_that_need_fixing()
        {
        }
        private function add_string_to_strings_that_need_fixing()
        {
        }
        private function load_strings_that_need_fixing()
        {
        }
        private function save_strings_that_need_fixing($strings_that_need_links_fixed)
        {
        }
    }
    abstract class WPML_Ajax_Update_Link_Targets_In_Content extends \WPML_WPDB_User implements \IWPML_AJAX_Action_Run
    {
        /** @var WPML_Translate_Link_Targets_In_Content $translate_link_targets */
        private $translate_link_targets;
        private $post_data;
        /** @var  WPML_Translate_Link_Target_Global_State $translate_link_target_global_state */
        protected $translate_link_target_global_state;
        public function __construct(\WPML_Translate_Link_Target_Global_State $translate_link_target_global_state, &$wpdb, $post_data)
        {
        }
        public function run()
        {
        }
        protected abstract function create_translate_link_target();
    }
    /**
     * Class WPML_Links_Fixed_Status_For_Posts
     *
     * @package wpml-tm
     */
    class WPML_Links_Fixed_Status_For_Posts extends \WPML_Links_Fixed_Status
    {
        /* @var int $translation_id */
        private $translation_id;
        private $wpdb;
        public function __construct(&$wpdb, $element_id, $element_type)
        {
        }
        public function set($status)
        {
        }
        public function are_links_fixed()
        {
        }
        public static function clear($element_id, $element_type)
        {
        }
    }
    class WPML_Ajax_Update_Link_Targets_In_Strings extends \WPML_Ajax_Update_Link_Targets_In_Content
    {
        private $wp_api;
        private $pro_translation;
        public function __construct(\WPML_Translate_Link_Target_Global_State $translate_link_target_global_state, &$wpdb, $wp_api, $pro_translation, $post_data)
        {
        }
        protected function create_translate_link_target()
        {
        }
    }
    /**
     * Class WPML_Translate_Link_Targets_In_Strings
     *
     * @package wpml-tm
     */
    class WPML_Translate_Link_Targets_In_Strings extends \WPML_Translate_Link_Targets_In_Content
    {
        private $option_name = 'wpml_strings_need_links_fixed';
        /* var WPML_WP_API $wp_api */
        private $wp_api;
        public function __construct(\WPML_Translate_Link_Target_Global_State $translate_link_target_global_state, &$wpdb, $wp_api, $pro_translation)
        {
        }
        protected function get_contents_with_links_needing_fix($start = 0, $count = 0)
        {
        }
        protected function get_content_type()
        {
        }
        public function get_number_to_be_fixed($start_id = 0)
        {
        }
    }
    class WPML_Translate_Link_Targets_In_Strings_Global extends \WPML_Translate_Link_Targets_In_Strings
    {
        protected function get_contents_with_links_needing_fix($start_id = 0, $count = 0)
        {
        }
        public function get_number_to_be_fixed($start_id = 0)
        {
        }
    }
    /**
     * Class WPML_Links_Fixed_Status_Factory
     *
     * @package wpml-translation-management
     */
    class WPML_Links_Fixed_Status_Factory extends \WPML_WPDB_User
    {
        private $wp_api;
        public function __construct(&$wpdb, $wp_api)
        {
        }
        public function create($element_id, $element_type)
        {
        }
    }
    class WPML_Ajax_Update_Link_Targets_In_Posts extends \WPML_Ajax_Update_Link_Targets_In_Content
    {
        private $pro_translation;
        public function __construct(\WPML_Translate_Link_Target_Global_State $translate_link_target_global_state, &$wpdb, $pro_translation, $post_data)
        {
        }
        protected function create_translate_link_target()
        {
        }
    }
    class WPML_TM_Email_Twig_Template_Factory
    {
        /** @return WPML_Twig_Template */
        public function create()
        {
        }
    }
    abstract class WPML_TM_Email_View
    {
        const FOOTER_TEMPLATE = 'email-footer.twig';
        const HEADER_TEMPLATE = 'email-header.twig';
        /** @var WPML_Twig_Template $template_service */
        protected $template_service;
        public function __construct(\WPML_Twig_Template $template_service)
        {
        }
        /**
         * @param string $username
         *
         * @return string
         */
        public function render_header($username = '')
        {
        }
        /**
         * @param string $username
         *
         * @return string
         */
        public function render_casual_header($first_name = '')
        {
        }
        /**
         * @param string $bottom_text
         *
         * @return string
         */
        protected function render_email_footer($bottom_text = '')
        {
        }
    }
    class WPML_TM_Overdue_Jobs_Report
    {
        const OVERDUE_JOBS_REPORT_TEMPLATE = 'notification/overdue-jobs-report.twig';
        /** @var  WPML_Translation_Jobs_Collection $jobs_collection */
        private $jobs_collection;
        /** @var WPML_TM_Email_Notification_View $email_view */
        private $email_view;
        /** @var bool $has_active_remote_service */
        private $has_active_remote_service;
        /** @var array $notification_settings */
        private $notification_settings;
        private $sitepress;
        private $tp_jobs;
        /**
         * @param WPML_Translation_Jobs_Collection $jobs_collection
         * @param WPML_TM_Email_Notification_View $email_view
         * @param bool $has_active_remote_service
         * @param array $notification_settings
         * @param SitePress $sitepress
         * @param WPML_TP_Jobs_Collection|null $tp_jobs
         */
        public function __construct(\WPML_Translation_Jobs_Collection $jobs_collection, \WPML_TM_Email_Notification_View $email_view, $has_active_remote_service, array $notification_settings, \SitePress $sitepress, \WPML_TP_Jobs_Collection $tp_jobs = \null)
        {
        }
        public function send()
        {
        }
        /** @return array */
        private function get_overdue_jobs_by_manager_id()
        {
        }
        /**
         * @param string $manager_id
         * @param array  $jobs
         */
        private function send_email($manager_id, array $jobs)
        {
        }
    }
    class WPML_TM_Overdue_Jobs_Report_Factory
    {
        public function create()
        {
        }
    }
    class WPML_TM_Email_Notification_View extends \WPML_TM_Email_View
    {
        const PROMOTE_TRANSLATION_SERVICES_TEMPLATE = 'notification/promote-translation-services.twig';
        /**
         * @param array  $model
         * @param string $template
         *
         * @return string
         */
        public function render_model(array $model, $template)
        {
        }
        /**
         * @param array $model
         *
         * @return string
         */
        private function render_promote_translation_services(array $model)
        {
        }
        /** @return string */
        private function render_footer()
        {
        }
    }
    interface WPML_TM_Jobs_Summary_Report_Model
    {
        /**
         * @return string
         */
        public function get_subject();
        /**
         * @return string
         */
        public function get_summary_text();
    }
    class WPML_TM_Jobs_Weekly_Summary_Report_Model implements \WPML_TM_Jobs_Summary_Report_Model
    {
        /**
         * @return string
         */
        public function get_subject()
        {
        }
        /**
         * @return string
         */
        public function get_summary_text()
        {
        }
    }
    class WPML_TM_Jobs_Summary_Report_Process
    {
        /**
         * @var WPML_TM_Jobs_Summary_Report_View
         */
        private $view;
        /**
         * @var WPML_TM_Jobs_Summary_Report_Model
         */
        private $report_model;
        /**
         * @var array
         */
        private $jobs;
        public function __construct(\WPML_TM_Jobs_Summary_Report_View $view, \WPML_TM_Jobs_Summary_Report_Model $report_model, array $jobs)
        {
        }
        public function send()
        {
        }
        /**
         * @param int $manager_id
         */
        private function send_email($manager_id)
        {
        }
    }
    class WPML_TM_Jobs_Summary
    {
        const WEEKLY_REPORT = 'weekly';
        const DAILY_REPORT = 'daily';
        const DAILY_SCHEDULE = '1 day';
        const WEEKLY_SCHEDULE = '1 week';
        const JOBS_COMPLETED_KEY = 'completed';
        const JOBS_WAITING_KEY = 'waiting';
    }
    class WPML_TM_Jobs_Daily_Summary_Report_Model implements \WPML_TM_Jobs_Summary_Report_Model
    {
        /**
         * @return string
         */
        public function get_subject()
        {
        }
        /**
         * @return string
         */
        public function get_summary_text()
        {
        }
    }
    class WPML_TM_Jobs_Summary_Report_View extends \WPML_TM_Email_View
    {
        const WEEKLY_SUMMARY_TEMPLATE = 'notification/summary/summary.twig';
        /**
         * @var array
         */
        private $jobs;
        /**
         * @var int
         */
        private $manager_id;
        /**
         * @var string
         */
        private $summary_text;
        /**
         * @return string
         */
        public function get_report_content()
        {
        }
        /**
         * @return array
         */
        private function get_model()
        {
        }
        /**
         * @param array $jobs
         *
         * @return $this
         */
        public function set_jobs($jobs)
        {
        }
        /**
         * @param int $manager_id
         *
         * @return $this
         */
        public function set_manager_id($manager_id)
        {
        }
        /**
         * @param string $summary_text
         *
         * @return $this
         */
        public function set_summary_text($summary_text)
        {
        }
    }
    class WPML_TM_Jobs_Summary_Report_Hooks
    {
        const EVENT_HOOK = 'wpml_tm_send_summary_report';
        const EVENT_CALLBACK = 'send_summary_report';
        /**
         * @var WPML_TM_Jobs_Summary_Report_Process_Factory
         */
        private $process_factory;
        /**
         * @var TranslationManagement
         */
        private $tm;
        public function __construct(\WPML_TM_Jobs_Summary_Report_Process_Factory $process_factory, \TranslationManagement $tm)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @return bool
         */
        private function notification_setting_allow_scheduling()
        {
        }
        public function send_summary_report()
        {
        }
        public function schedule_email()
        {
        }
        /**
         * @return int
         */
        private function get_schedule_time()
        {
        }
    }
    class WPML_TM_Jobs_Summary_Report_Hooks_Factory implements \IWPML_Frontend_Action_Loader, \IWPML_Backend_Action_Loader
    {
        /**
         * @return WPML_TM_Jobs_Summary_Report_Hooks
         */
        public function create()
        {
        }
    }
    class WPML_TM_Jobs_Summary_Report_Process_Factory
    {
        /** @var WPML_TM_Jobs_Summary_Report_View $template */
        private $template;
        /** @var WPML_TM_Jobs_Summary_Report_Process $weekly_report */
        private $weekly_report;
        /** @var WPML_TM_Jobs_Summary_Report_Process $daily_report */
        private $daily_report;
        /**
         * @return WPML_TM_Jobs_Summary_Report_Process
         */
        public function create_weekly_report()
        {
        }
        /**
         * @return WPML_TM_Jobs_Summary_Report_Process
         */
        public function create_daily_report()
        {
        }
        /**
         * @param string $frequency
         *
         * @return WPML_TM_Jobs_Summary_Report
         */
        private function get_summary_report($frequency)
        {
        }
        /**
         * @return WPML_TM_Jobs_Summary_Report_View
         */
        private function get_template()
        {
        }
    }
    class WPML_TM_Jobs_Summary_Report
    {
        /**
         * @var WPML_Translation_Jobs_Collection
         */
        private $jobs_collection;
        /**
         * @var array
         */
        private $jobs = array();
        /**
         * @var WPML_TM_String
         */
        private $string_counter;
        /**
         * @var WPML_TM_Post
         */
        private $post_counter;
        /**
         * @var string
         */
        private $type;
        /**
         * @var WPML_Translation_Element_Factory
         */
        private $element_factory;
        public function __construct(\WPML_Translation_Jobs_Collection $jobs_collection, \WPML_TM_String $string_counter, \WPML_TM_Post $post_counter, $type = \WPML_TM_Jobs_Summary::WEEKLY_REPORT, \WPML_Translation_Element_Factory $element_factory)
        {
        }
        private function build_completed_jobs()
        {
        }
        private function build_waiting_jobs()
        {
        }
        /**
         * @param WPML_Element_Translation_Job $job
         *
         * @return string
         */
        private function get_translator_name(\WPML_Element_Translation_Job $job)
        {
        }
        /**
         * @return array
         */
        public function get_jobs()
        {
        }
    }
    /**
     * Class WPML_TM_Mail_Notification
     */
    class WPML_TM_Mail_Notification
    {
        const JOB_COMPLETE_TEMPLATE = 'notification/job-completed.twig';
        const JOB_REVISED_TEMPLATE = 'notification/job-revised.twig';
        const JOB_CANCELED_TEMPLATE = 'notification/job-canceled.twig';
        private $mail_cache = array();
        private $process_mail_queue;
        /** @var wpdb $wpdb */
        private $wpdb;
        /** @var SitePress $sitepress */
        private $sitepress;
        /** @var WPML_Translation_Job_Factory $job_factory */
        private $job_factory;
        /** @var WPML_TM_Email_Notification_View $email_view */
        private $email_view;
        /** @var array $notification_settings */
        private $notification_settings;
        /** @var bool $has_active_remote_service */
        private $has_active_remote_service;
        public function __construct(\SitePress $sitepress, \wpdb $wpdb, \WPML_Translation_Job_Factory $job_factory, \WPML_TM_Email_Notification_View $email_view, array $notification_settings, $has_active_remote_service)
        {
        }
        public function init()
        {
        }
        /**
         * @return bool
         */
        private function should_send_email_on_update()
        {
        }
        public function send_queued_mails()
        {
        }
        /**
         * @param int $job_id
         *
         * @return array|null
         */
        private function get_basic_mail_data($job_id)
        {
        }
        /**
         * @param WPML_Translation_Job|int $job_id
         * @param bool|false               $update
         *
         * @return false|array representation of the email to be sent
         */
        public function wpml_tm_job_complete_mail($job_id, $update = \false)
        {
        }
        /**
         * @param $job_id
         *
         * @return array|bool
         */
        public function revised_job_email($job_id)
        {
        }
        /**
         * @param WPML_TM_Job_Entity $job
         *
         * @return array|bool
         */
        public function canceled_job_email(\WPML_TM_Job_Entity $job)
        {
        }
        private function generic_update_notification_email($job_id, $mail_subject, $body_placeholder, $template)
        {
        }
        private function should_send_immediate_notification($type)
        {
        }
        /**
         * @param array                        $model
         * @param WPML_Element_Translation_Job $job
         *
         * @return array
         */
        private function update_model_for_deadline(array $model, \WPML_Element_Translation_Job $job)
        {
        }
        /**
         * @param int                      $translator_id
         * @param WPML_Translation_Job|int $job
         *
         * @return bool
         */
        public function translator_removed_mail($translator_id, $job)
        {
        }
        /**
         * @param int                      $translator_id
         * @param int|WPML_Translation_Job $job_id
         *
         * @return array|bool
         */
        public function translator_resign_mail($translator_id, $job_id)
        {
        }
        private function enqueue_mail($mail)
        {
        }
        /**
         * @param int|WPML_Translation_Job $job_id
         *
         * @return array
         */
        private function get_mail_elements($job_id)
        {
        }
        /**
         * @param WPML_Translation_Job $job
         * @param string               $user_language
         *
         * @return array
         */
        private function get_lang_to_from($job, $user_language)
        {
        }
    }
    class WPML_TM_ATE_Request_Activation_Email
    {
        const REQUEST_ACTIVATION_TEMPLATE = 'notification/request-ate-activation.twig';
        /** @var WPML_TM_Email_Notification_View */
        private $email_view;
        public function __construct(\WPML_TM_Email_Notification_View $email_view)
        {
        }
        public function send_email($to_manager, $from_user)
        {
        }
    }
    /**
     * Class WPML_TM_Batch_Report_Email_Process
     */
    class WPML_TM_Batch_Report_Email_Process
    {
        /**
         * @var WPML_TM_Batch_Report
         */
        private $batch_report;
        /**
         * @var WPML_TM_Batch_Report_Email_Builder
         */
        private $email_builder;
        /**
         * WPML_TM_Batch_Report_Email_Process constructor.
         *
         * @param WPML_TM_Batch_Report $batch_report
         * @param WPML_TM_Batch_Report_Email_Builder $email_builder
         */
        public function __construct(\WPML_TM_Batch_Report $batch_report, \WPML_TM_Batch_Report_Email_Builder $email_builder)
        {
        }
        public function process_emails()
        {
        }
        private function send_emails()
        {
        }
    }
    /**
     * Class WPML_TM_Email_Jobs_Summary_View
     */
    class WPML_TM_Email_Jobs_Summary_View extends \WPML_TM_Email_View
    {
        const JOBS_TEMPLATE = 'batch-report/email-job-pairs.twig';
        /**
         * @var WPML_TM_Blog_Translators
         */
        private $blog_translators;
        /**
         * @var SitePress
         */
        private $sitepress;
        /**
         * @var array
         */
        private $assigned_jobs;
        /**
         * WPML_TM_Batch_Report_Email_Template constructor.
         *
         * @param WPML_Twig_Template $template_service
         * @param WPML_TM_Blog_Translators $blog_translators
         * @param SitePress $sitepress
         */
        public function __construct(\WPML_Twig_Template $template_service, \WPML_TM_Blog_Translators $blog_translators, \SitePress $sitepress)
        {
        }
        /**
         * @param array $language_pairs
         * @param int $translator_id
         * @param string $title_singular
         * @param string $title_plural
         *
         * @return null|string
         */
        public function render_jobs_list($language_pairs, $translator_id, $title_singular, $title_plural = '')
        {
        }
        /** @return string */
        public function render_footer()
        {
        }
        /**
         * @param int $job_id
         * @param string $type
         */
        private function add_assigned_job($job_id, $type)
        {
        }
        /**
         * @return array
         */
        public function get_assigned_jobs()
        {
        }
        private function empty_assigned_jobs()
        {
        }
        private function get_closing_sentence()
        {
        }
    }
    /**
     * Class WPML_TM_Batch_Report_Email
     */
    class WPML_TM_Batch_Report_Email_Builder
    {
        /**
         * @var WPML_TM_Batch_Report
         */
        private $batch_report;
        /**
         * @var array
         */
        private $emails;
        /**
         * @var WPML_TM_Email_Jobs_Summary_View
         */
        private $email_template;
        /**
         * WPML_TM_Notification_Batch_Email constructor.
         *
         * @param WPML_TM_Batch_Report            $batch_report
         * @param WPML_TM_Email_Jobs_Summary_View $email_template
         */
        public function __construct(\WPML_TM_Batch_Report $batch_report, \WPML_TM_Email_Jobs_Summary_View $email_template)
        {
        }
        /**
         * @param array $batch_jobs
         */
        public function prepare_assigned_jobs_emails($batch_jobs)
        {
        }
        /**
         * @param array $batch_jobs
         */
        public function prepare_unassigned_jobs_emails($batch_jobs)
        {
        }
        /**
         * @param array $email
         * @param array $jobs
         *
         * @return array
         */
        private function add_attachments($email, $jobs)
        {
        }
        /**
         * @return string
         */
        private function get_subject_assigned_job()
        {
        }
        /**
         * @return string
         */
        private function get_subject_unassigned_job()
        {
        }
        /**
         * @return array
         */
        public function get_emails()
        {
        }
    }
    /**
     * Class WPML_TM_Batch_Report
     */
    class WPML_TM_Batch_Report
    {
        const BATCH_REPORT_OPTION = '_wpml_batch_report';
        /**
         * @var WPML_TM_Blog_Translators
         */
        private $blog_translators;
        /**
         * WPML_TM_Batch_Report constructor.
         *
         * @param WPML_TM_Blog_Translators $blog_translators
         */
        public function __construct(\WPML_TM_Blog_Translators $blog_translators)
        {
        }
        /**
         * @param WPML_Translation_Job $job
         */
        public function set_job(\WPML_Translation_Job $job)
        {
        }
        /**
         * @return array
         */
        public function get_unassigned_jobs()
        {
        }
        /**
         * @return array
         */
        public function get_unassigned_translators()
        {
        }
        /**
         * @return array
         */
        public function get_jobs()
        {
        }
        public function reset_batch_report($translator_id)
        {
        }
    }
    /**
     * Class WPML_TM_Notification_Batch_Hooks
     */
    class WPML_TM_Batch_Report_Hooks
    {
        /**
         * @var WPML_TM_Batch_Report
         */
        private $batch_report;
        /**
         * @var WPML_TM_Batch_Report_Email_Process
         */
        private $email_process;
        /**
         * WPML_TM_Batch_Report_Hooks constructor.
         *
         * @param WPML_TM_Batch_Report $batch_report
         * @param WPML_TM_Batch_Report_Email_Process $email_process
         */
        public function __construct(\WPML_TM_Batch_Report $batch_report, \WPML_TM_Batch_Report_Email_Process $email_process)
        {
        }
        public function add_hooks()
        {
        }
        public function set_job($job)
        {
        }
    }
    /**
     * WPML_TM_Reset_Options_Filter class file
     *
     * @package WPML\TM
     */
    /**
     * Class WPML_TM_Reset_Options_Filter
     */
    class WPML_TM_Reset_Options_Filter implements \IWPML_Action
    {
        /**
         * Add hooks
         */
        public function add_hooks()
        {
        }
        /**
         * Add options to reset.
         *
         * @param array $options Options.
         *
         * @return array
         */
        public function reset_options(array $options)
        {
        }
    }
    /**
     * WPML_TM_Reset_Options_Filter_Factory class file.
     *
     * @package WPML\TM
     */
    /**
     * Class WPML_TM_Reset_Options_Filter_Factory
     */
    class WPML_TM_Reset_Options_Filter_Factory implements \IWPML_Backend_Action_Loader
    {
        /**
         * Create reset options filter.
         *
         * @return WPML_TM_Reset_Options_Filter
         */
        public function create()
        {
        }
    }
}
namespace WPML\TM\ATE {
    /**
     * Class ReturnedJobsQueue
     * @package WPML\TM\ATE
     *
     * IMPORTANT!
     * In this class `wpmlJobId` represents job_id column in icl_translate_job
     */
    class ReturnedJobsQueue
    {
        const OPTION_NAME = 'ATE_RETURNED_JOBS_QUEUE';
        const STATUS_COMPLETED = 'complete';
        const STATUS_BACK = 'back';
        /**
         * @param  int  $ateJobId
         * @param  string  $status
         * @param  callable  $ateIdToWpmlId @see comment in the class description
         */
        public static function add($ateJobId, $status, callable $ateIdToWpmlId)
        {
        }
        /**
         * @param  int  $wpmlJobId @see comment in the class description
         *
         * @return string|null
         */
        public static function getStatus($wpmlJobId)
        {
        }
        /**
         * @param $wpmlJobId @see comment in the class description
         */
        public static function remove($wpmlJobId)
        {
        }
    }
}
namespace {
    /**
     * @author OnTheGo Systems
     *
     * AMS: https://git.onthegosystems.com/ate/ams/wikis/home
     * ATE: https://git.onthegosystems.com/ate/ams/wikis/home (https://bitbucket.org/emartini_crossover/ate/wiki/browse/API/V1/jobs)
     */
    class WPML_TM_ATE_AMS_Endpoints
    {
        const AMS_BASE_URL = 'https://ams.wpml.org';
        const ATE_BASE_URL = 'https://ate.wpml.org';
        const ATE_JOB_STATUS_CREATED = 0;
        const ATE_JOB_STATUS_TRANSLATING = 1;
        const ATE_JOB_STATUS_TRANSLATED = 6;
        const ATE_JOB_STATUS_DELIVERING = 7;
        const ATE_JOB_STATUS_DELIVERED = 8;
        /**
         * AMS
         */
        const ENDPOINTS_AUTO_LOGIN = '/panel/autologin';
        const ENDPOINTS_CLIENTS = '/api/wpml/clients';
        const ENDPOINTS_CONFIRM = '/api/wpml/jobs/confirm';
        const ENDPOINTS_EDITOR = '/api/wpml/jobs/{job_id}/open?translator={translator_email}&return_url={return_url}';
        const ENDPOINTS_SUBSCRIPTION = '/api/wpml/websites/translators/{translator_email}/enable';
        const ENDPOINTS_SUBSCRIPTION_STATUS = '/api/wpml/websites/{WEBSITE_UUID}/translators/{translator_email}';
        const ENDPOINTS_WEBSITES = '/api/wpml/websites';
        /**
         * AMS CLONED SITES
         */
        const ENDPOINTS_SITE_COPY = '/api/wpml/websites/copy';
        const ENDPOINTS_SITE_MOVE = '/api/wpml/websites/move';
        const ENDPOINTS_SITE_CONFIRM = '/api/wpml/websites/confirm';
        /**
         * ATE
         */
        const ENDPOINTS_JOB = '/api/wpml/job';
        const ENDPOINTS_JOBS = '/api/wpml/jobs';
        const ENDPOINT_JOBS_BY_WPML_JOB_IDS = '/api/wpml/jobs/wpml';
        const ENDPOINTS_MANAGERS = '/api/wpml/websites/translation_managers';
        const ENDPOINTS_SITE = '/api/wpml/websites/create_unique';
        const ENDPOINTS_STATUS = '/api/wpml/access_keys/{SHARED_KEY}/status';
        const ENDPOINTS_TRANSLATORS = '/api/wpml/websites/translators';
        const ENDPOINT_SOURCE_ID_MIGRATION = '/api/wpml/migration';
        const ENDPOINTS_SYNC_ALL = '/api/wpml/sync/all';
        const ENDPOINTS_SYNC_PAGE = '/api/wpml/sync/page';
        const ENDPOINTS_CLONE_JOB = '/api/wpml/jobs/%s/clone';
        const SERVICE_AMS = 'ams';
        const SERVICE_ATE = 'ate';
        const STORE_JOB = '/ate/jobs/store';
        const SYNC_JOBS = '/ate/jobs/sync';
        const DOWNLOAD_JOBS = '/ate/jobs/download';
        /**
         * @return string
         * @throws \InvalidArgumentException
         */
        public function get_ams_auto_login()
        {
        }
        /**
         * @param string     $service
         * @param string     $endpoint
         * @param array|null $query_string
         *
         * @return string
         * @throws \InvalidArgumentException
         */
        public function get_endpoint_url($service, $endpoint, array $query_string = \null)
        {
        }
        /**
         * @param $service
         *
         * @return string
         * @throws \InvalidArgumentException
         */
        public function get_base_url($service)
        {
        }
        private function get_AMS_base_url()
        {
        }
        private function get_ATE_base_url()
        {
        }
        private function get_service_base_url($service)
        {
        }
        public function get_AMS_host()
        {
        }
        public function get_ATE_host()
        {
        }
        private function get_service_host($service)
        {
        }
        /**
         * @return string
         * @throws \InvalidArgumentException
         */
        public function get_ams_register_client()
        {
        }
        /**
         * @return string
         * @throws \InvalidArgumentException
         */
        public function get_ams_status()
        {
        }
        /**
         * @return string
         * @throws \InvalidArgumentException
         */
        public function get_ams_synchronize_managers()
        {
        }
        /**
         * @return string
         * @throws \InvalidArgumentException
         */
        public function get_ams_synchronize_translators()
        {
        }
        /**
         * @return string
         * @throws \InvalidArgumentException
         */
        public function get_ams_site_copy()
        {
        }
        /**
         * @return string
         * @throws \InvalidArgumentException
         */
        public function get_ams_site_move()
        {
        }
        /**
         * @return string
         * @throws \InvalidArgumentException
         */
        public function get_ams_site_confirm()
        {
        }
        /**
         * @return string
         * @throws \InvalidArgumentException
         */
        public function get_enable_subscription()
        {
        }
        /**
         * @return string
         * @throws \InvalidArgumentException
         */
        public function get_subscription_status()
        {
        }
        /**
         * @param int|string|array $job_params
         *
         * @return string
         * @throws \InvalidArgumentException
         */
        public function get_ate_confirm_job($job_params = \null)
        {
        }
        /**
         * @param null|int|string|array $job_params
         *
         * @return string
         */
        private function parse_job_params($job_params)
        {
        }
        /**
         * @return string
         * @throws \InvalidArgumentException
         */
        public function get_ate_editor()
        {
        }
        /**
         * @param null|int|string|array $job_params
         * @param null|array            $statuses
         *
         * @return string
         * @throws \InvalidArgumentException
         */
        public function get_ate_jobs($job_params = \null, array $statuses = \null)
        {
        }
        /**
         * @param int() $job_ids
         *
         * @return string
         */
        public function get_ate_jobs_by_wpml_job_ids($job_ids)
        {
        }
        /**
         * @return string
         */
        public function get_websites()
        {
        }
        /**
         * @return string
         */
        public function get_source_id_migration()
        {
        }
        /**
         * @return string
         */
        public function get_sync_all()
        {
        }
        /**
         * @param string $paginationToken
         * @param int    $page
         *
         * @return string
         */
        public function get_sync_page($paginationToken, $page)
        {
        }
        /**
         * @param int $job_id
         *
         * @return string
         */
        public function get_clone_job($job_id)
        {
        }
    }
    class WPML_TM_AMS_Users
    {
        /**@var WPML_Translation_Manager_Records */
        private $manager_records;
        /** @var WPML_Translator_Records */
        private $translator_records;
        /** @var WPML_Translator_Admin_Records $translator_admin_records */
        private $translator_admin_records;
        public function __construct(\WPML_Translation_Manager_Records $manager_records, \WPML_Translator_Records $translator_records, \WPML_Translator_Admin_Records $translator_admin_records)
        {
        }
        public function get_translators()
        {
        }
        public function get_managers()
        {
        }
        private function get_admins_that_are_not_translators()
        {
        }
    }
}
namespace WPML\TM\ATE {
    class JobRecord
    {
        /** @var int $wpmlJobId */
        public $wpmlJobId;
        /** @var int $ateJobId */
        public $ateJobId;
        /**
         * @todo: Remove this property.
         *
         * @var int $editTimestamp
         */
        public $editTimestamp = 0;
        public function __construct(\stdClass $dbRow = null)
        {
        }
        /**
         * @todo: Remove the "$editTimestamp" and "is_editing", not handled on WPML side anymore.
         *
         * The job is considered as being edited if
         * the timestamp is not greater than 1 day.
         *
         * @return bool
         */
        public function isEditing()
        {
        }
    }
}
namespace {
    class WPML_TM_AMS_Translator_Activation_Records
    {
        const USER_META = 'ate_activated';
        /** @var WPML_WP_User_Factory $user_factory */
        private $user_factory;
        public function __construct(\WPML_WP_User_Factory $user_factory)
        {
        }
        public function is_activated($user_email)
        {
        }
        public function is_current_user_activated()
        {
        }
        public function is_user_activated(\WPML_User $user)
        {
        }
        public function set_activated($user_email, $state)
        {
        }
        public function update(array $translators)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ATE_Jobs
    {
        /** @var JobRecords $records */
        private $records;
        /**
         * WPML_TM_ATE_Jobs constructor.
         *
         * @param JobRecords $records
         */
        public function __construct(\WPML\TM\ATE\JobRecords $records)
        {
        }
        /**
         * @param int $wpml_job_id
         *
         * @return int
         */
        public function get_ate_job_id($wpml_job_id)
        {
        }
        /**
         * @param int $ate_job_id
         *
         * @return int
         */
        public function get_wpml_job_id($ate_job_id)
        {
        }
        /**
         * @param int $wpml_job_id
         * @param array $ate_job_data
         */
        public function store($wpml_job_id, $ate_job_data)
        {
        }
        /**
         * We update the status from ATE only for non-completed ATE statuses
         * in all other cases, we mark the job as completed when we receive it
         * from ATE in `WPML_TM_ATE_Jobs::apply` which calls `wpml_tm_save_data`.
         *
         * @param int $wpml_job_id
         * @param int $ate_status
         */
        public function set_wpml_status_from_ate($wpml_job_id, $ate_status)
        {
        }
        /**
         * @todo: Check possible duplicated code / We already have functionality to import XLIFF files from Translator's queue
         *
         * @param string $xliff
         *
         * @return bool|int
         * @throws \Requests_Exception|Exception
         */
        public function apply($xliff)
        {
        }
        private function filterJobData($jobData)
        {
        }
        /**
         * getJobTargetLanguage :: void → ( object → string|null )
         * @return callback
         */
        private function getJobTargetLanguage()
        {
        }
        /**
         * @param int $wpml_job_id
         *
         * @return bool
         */
        public function is_editing_job($wpml_job_id)
        {
        }
        /**
         * @param array $wpml_job_ids
         */
        public function warm_cache(array $wpml_job_ids)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ATE_Status
    {
        public static function is_enabled()
        {
        }
        public static function is_active()
        {
        }
        public static function is_enabled_and_activated()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ATE_Models_Language
    {
        public $code;
        public $name;
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ATE_Models_Job_Create
    {
        /** @var int */
        public $deadline;
        /** @var WPML_TM_ATE_Models_Job_File */
        public $file;
        /** @var bool */
        public $notify_enabled;
        /** @var string */
        public $notify_url;
        /** @var int */
        public $source_id;
        /** @var string */
        public $permalink;
        /** @var string */
        public $site_identifier;
        /** @var WPML_TM_ATE_Models_Language */
        public $source_language;
        /** @var WPML_TM_ATE_Models_Language */
        public $target_language;
        /** @var string */
        public $ate_ams_console_url;
        /**
         * WPML_TM_ATE_Models_Job_Create constructor.
         *
         * @param array $args
         *
         * @throws \Auryn\InjectionException
         */
        public function __construct(array $args = array())
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_Job_Created
    {
        public $job_id;
        public $rid;
        public $translation_service;
        public $translator_id;
        public $translation_package;
        public $batch_options;
        public $data;
        /**
         * WPML_TM_Job_Created constructor.
         *
         * @param array $args
         */
        public function __construct(array $args)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ATE_Models_Job_File
    {
        public $content;
        public $name;
        public $type;
        /**
         * WPML_TM_ATE_Models_Job_File constructor.
         *
         * @param array $args
         */
        public function __construct(array $args = array())
        {
        }
    }
    class WPML_TM_ATE_Job_Repository
    {
        /** @var WPML_TM_Jobs_Repository */
        private $job_repository;
        public function __construct(\WPML_TM_Jobs_Repository $job_repository)
        {
        }
        /**
         * @return WPML_TM_Jobs_Collection
         */
        public function get_jobs_to_sync()
        {
        }
        /** @return array */
        public static function get_in_progress_statuses()
        {
        }
    }
}
namespace WPML\TM\ATE\Download {
    class Consumer
    {
        /** @var WPML_TM_ATE_API $ateApi */
        private $ateApi;
        /** @var WPML_TM_ATE_Jobs $ateJobs */
        private $ateJobs;
        public function __construct(\WPML_TM_ATE_API $ateApi, \WPML_TM_ATE_Jobs $ateJobs)
        {
        }
        /**
         * @param  Job  $job
         *
         * @return Job|false
         * @throws Exception
         */
        public function process(\WPML\TM\ATE\Download\Job $job)
        {
        }
    }
    class Result
    {
        /** @var Collection $processedJobs */
        public $processedJobs;
        /** @var int $downloadQueueSize */
        public $downloadQueueSize = 0;
        public function __construct()
        {
        }
    }
    class Queue
    {
        /** @var \wpdb $wpdb */
        private $wpdb;
        public function __construct(\wpdb $wpdb)
        {
        }
        /**
         * @param Collection $jobs A collection of `Job`
         */
        public function push(\WPML\Collect\Support\Collection $jobs)
        {
        }
        /**
         * @return Collection
         */
        public function getEditorJobIds()
        {
        }
        /**
         * @return int
         */
        public function count()
        {
        }
        /** @return Job|null */
        public function getFirst()
        {
        }
        /**
         * @return \stdClass|null
         */
        private function getFirstUnlockedRow()
        {
        }
        public function lockJob(\WPML\TM\ATE\Download\Job $job)
        {
        }
        public function remove(\WPML\TM\ATE\Download\Job $job)
        {
        }
        /** @return string */
        private function getTableName()
        {
        }
        /** @return int */
        public static function getLockExpiration()
        {
        }
    }
    class Job
    {
        /** @var int $ateJobId */
        public $ateJobId;
        /** @var string $url */
        public $url;
        /**
         * This property is not part of the database data,
         * but it can be added when the job is downloaded
         * to provide more information to the UI.
         *
         * @var int $wpmlJobId
         */
        public $wpmlJobId;
        /**
         * @param \stdClass $item
         *
         * @return Job
         */
        public static function fromAteResponse(\stdClass $item)
        {
        }
        /**
         * @param \stdClass $row
         *
         * @return Job
         */
        public static function fromDb(\stdClass $row)
        {
        }
    }
    class Process
    {
        /** @var Queue $queue */
        private $queue;
        /** @var Consumer $consumer */
        private $consumer;
        /** @var WPML_TM_ATE_API $ateApi */
        private $ateApi;
        public function __construct(\WPML\TM\ATE\Download\Queue $queue, \WPML\TM\ATE\Download\Consumer $consumer, \WPML_TM_ATE_API $ateApi)
        {
        }
        /**
         * @param int $quantity
         *
         * @return Result
         */
        public function run($quantity = 5)
        {
        }
        private function acknowledgeAte(\WPML\Collect\Support\Collection $processedJobs)
        {
        }
        /**
         * @param Exception $e
         * @param Job|null  $job
         */
        private function logException(\Exception $e, \WPML\TM\ATE\Download\Job $job = null)
        {
        }
    }
}
namespace {
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ATE_Translator_Login implements \IWPML_Action
    {
        /** @var WPML_TM_AMS_Translator_Activation_Records */
        private $translator_activation_records;
        /** @var WPML_Translator_Records */
        private $translator_records;
        /** @var WPML_TM_AMS_API */
        private $ams_api;
        public function __construct(\WPML_TM_AMS_Translator_Activation_Records $translator_activation_records, \WPML_Translator_Records $translator_records, \WPML_TM_AMS_API $ams_api)
        {
        }
        public function add_hooks()
        {
        }
        public function wp_login($user_login, $user)
        {
        }
    }
    class WPML_TM_AMS_Synchronize_Users_On_Access_Denied_Factory implements \IWPML_Backend_Action_Loader
    {
        public function create()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_AMS_Check_Website_ID implements \IWPML_Action
    {
        /** @var \WPML\WP\OptionManager $option_manager */
        private $option_manager;
        /** @var WPML_TM_ATE_API $ate_api */
        private $ate_api;
        /** @var WPML_TM_AMS_API $ams_api */
        private $ams_api;
        public function __construct(\WPML\WP\OptionManager $option_manager, \WPML_TM_ATE_API $ate_api, \WPML_TM_AMS_API $ams_api)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * Check if the stored site id is different from the one returned by ams api and
         * then:
         * 1) test if the ams one works
         * 2) Update stored id if test is successful
         */
        public function do_check()
        {
        }
        /**
         * @param string $site_id
         *
         * @return bool
         */
        private function does_site_id_work($site_id)
        {
        }
    }
    class WPML_TM_ATE_Translator_Message_Classic_Editor_Factory implements \IWPML_Backend_Action_Loader, \IWPML_AJAX_Action_Loader
    {
        /**
         * @return \WPML_TM_ATE_Translator_Message_Classic_Editor|\IWPML_Action|null
         */
        public function create()
        {
        }
        /**
         * @return bool
         */
        private function is_editing_old_translation_and_te_is_used_for_old_translation()
        {
        }
        /**
         * @return bool
         */
        private function is_ate_enabled_and_manager_wizard_completed()
        {
        }
        /**
         * @return bool
         */
        private function is_ajax_or_translation_queue()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_AMS_Check_Website_ID_Factory implements \IWPML_Backend_Action_Loader
    {
        /**
         * @return \WPML_TM_AMS_Check_Website_ID|null
         * @throws \Auryn\InjectionException
         */
        public function create()
        {
        }
    }
    class WPML_TM_ATE_Jobs_Sync_Script_Loader
    {
        const JS_HANDLER = 'wpml-tm-ate-jobs-sync';
        const JS_VARIABLE = 'WPML_ATE_JOBS_SYNC';
        /** @var WPML_TM_Scripts_Factory */
        private $script_factory;
        /** @var WPML_TM_ATE_Job_Repository */
        private $ate_jobs_repository;
        /** @var Trigger $syncTrigger */
        private $syncTrigger;
        /** @var Queue $downloadQueue */
        private $downloadQueue;
        public function __construct(\WPML_TM_Scripts_Factory $script_factory, \WPML_TM_ATE_Job_Repository $ate_jobs_repository, \WPML\TM\ATE\Sync\Trigger $syncTrigger, \WPML\TM\ATE\Download\Queue $downloadQueue)
        {
        }
        public function load()
        {
        }
    }
    class WPML_TM_Old_Editor_Factory implements \IWPML_Backend_Action_Loader, \IWPML_AJAX_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_TM_ATE_Translator_Message_Classic_Editor implements \IWPML_Action
    {
        const ACTION = 'wpml_ate_translator_classic_editor';
        const USER_OPTION = 'wpml_ate_translator_classic_editor_minimized';
        /** @var WPML_Translation_Manager_Records */
        private $translation_manager_records;
        /** @var WPML_WP_User_Factory */
        private $user_factory;
        /** @var WPML_TM_ATE_Request_Activation_Email */
        private $activation_email;
        public function __construct(\WPML_Translation_Manager_Records $translation_manager_records, \WPML_WP_User_Factory $user_factory, \WPML_TM_ATE_Request_Activation_Email $activation_email)
        {
        }
        public function add_hooks()
        {
        }
        public function classic_editor_message()
        {
        }
        private function output_translation_manager_list()
        {
        }
        public function handle_ajax()
        {
        }
    }
    class WPML_TM_Old_Editor implements \IWPML_Action
    {
        const ACTION = 'icl_ajx_custom_call';
        const CUSTOM_AJAX_CALL = 'icl_doc_translation_method';
        const NOTICE_ID = 'wpml-translation-management-old-editor';
        const NOTICE_GROUP = 'wpml-translation-management';
        public function add_hooks()
        {
        }
        public function handle_custom_ajax_call($call, $data)
        {
        }
        /**
         * @return bool
         */
        private function is_ate_enabled_and_manager_wizard_completed()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ATE_Post_Edit_Actions_Factory implements \IWPML_Backend_Action_Loader
    {
        /**
         * @return IWPML_Action|IWPML_Action[]|null
         */
        public function create()
        {
        }
    }
    /**
     * Factory class for \WPML_TM_ATE_Jobs_Actions.
     *
     * @package wpml\tm
     *
     * @author  OnTheGo Systems
     */
    class WPML_TM_ATE_Jobs_Actions_Factory implements \IWPML_Backend_Action_Loader
    {
        /**
         * The instance of \WPML_Current_Screen.
         *
         * @var WPML_Current_Screen
         */
        private $current_screen;
        /**
         * It returns an instance of \WPML_TM_ATE_Jobs_Actions or null if ATE is not enabled and active.
         *
         * @return \WPML_TM_ATE_Jobs_Actions|null
         * @throws \Auryn\InjectionException
         */
        public function create()
        {
        }
        /**
         * The global instance of \Sitepress.
         *
         * @return SitePress
         */
        private function get_sitepress()
        {
        }
        /**
         * It gets the instance of \WPML_Current_Screen.
         *
         * @return \WPML_Current_Screen
         */
        private function get_current_screen()
        {
        }
    }
    /**
     * @todo Perhaps this class is redundant
     *
     * @author OnTheGo Systems
     */
    class WPML_TM_ATE_Jobs_Store_Actions_Factory implements \IWPML_Backend_Action_Loader
    {
        /**
         * @return IWPML_Action|IWPML_Action[]|null
         */
        public function create()
        {
        }
    }
    class WPML_TM_ATE_Job_Data_Fallback implements \IWPML_Action
    {
        /** @var WPML_TM_ATE_API */
        private $ate_api;
        /**
         * @param WPML_TM_ATE_API $ate_api
         */
        public function __construct(\WPML_TM_ATE_API $ate_api)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param array $data
         * @param int   $wpml_job_id
         *
         * @return array
         */
        public function get_data_from_api(array $data, $wpml_job_id)
        {
        }
    }
    class WPML_TM_ATE_Job_Data_Fallback_Factory implements \IWPML_Backend_Action_Loader, \IWPML_REST_Action_Loader
    {
        /**
         * @return WPML_TM_ATE_Job_Data_Fallback
         */
        public function create()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_AMS_Synchronize_Actions_Factory implements \IWPML_Backend_Action_Loader
    {
        /**
         * @return IWPML_Action|IWPML_Action[]|null
         */
        public function create()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ATE_Jobs_Actions implements \IWPML_Action
    {
        const RESPONSE_ATE_NOT_ACTIVE_ERROR = 403;
        const RESPONSE_ATE_DUPLICATED_SOURCE_ID = 417;
        const RESPONSE_ATE_UNEXPECTED_ERROR = 500;
        const RESPONSE_ATE_ERROR_NOTICE_ID = 'ate-update-error';
        const RESPONSE_ATE_ERROR_NOTICE_GROUP = 'default';
        /**
         * @var WPML_TM_ATE_API
         */
        private $ate_api;
        /**
         * @var WPML_TM_ATE_Jobs
         */
        private $ate_jobs;
        /**
         * @var WPML_TM_AMS_Translator_Activation_Records
         */
        private $translator_activation_records;
        /** @var bool */
        private $is_second_attempt_to_get_jobs_data = \false;
        /**
         * @var SitePress
         */
        private $sitepress;
        /**
         * @var WPML_Current_Screen
         */
        private $current_screen;
        /** @var array */
        private $trid_original_element_map = array();
        /** @var WPML_TM_ATE_Jobs_Sync_Script_Loader */
        private $job_sync_script_loader;
        /**
         * WPML_TM_ATE_Jobs_Actions constructor.
         *
         * @param \WPML_TM_ATE_API                           $ate_api
         * @param \WPML_TM_ATE_Jobs                          $ate_jobs
         * @param \SitePress                                 $sitepress
         * @param \WPML_Current_Screen                       $current_screen
         * @param \WPML_TM_AMS_Translator_Activation_Records $translator_activation_records
         * @param WPML_TM_ATE_Jobs_Sync_Script_Loader        $job_sync_script_loader
         */
        public function __construct(\WPML_TM_ATE_API $ate_api, \WPML_TM_ATE_Jobs $ate_jobs, \SitePress $sitepress, \WPML_Current_Screen $current_screen, \WPML_TM_AMS_Translator_Activation_Records $translator_activation_records, \WPML_TM_ATE_Jobs_Sync_Script_Loader $job_sync_script_loader)
        {
        }
        public function add_hooks()
        {
        }
        public function handle_messages()
        {
        }
        /**
         * @param int $job_id
         * @param string $translation_service
         *
         * @throws \InvalidArgumentException
         * @throws \RuntimeException
         */
        public function added_translation_job($job_id, $translation_service)
        {
        }
        /**
         * @param array $jobs
         *
         * @return bool|void
         * @throws \InvalidArgumentException
         * @throws \RuntimeException
         */
        public function added_translation_jobs(array $jobs)
        {
        }
        private function map_response_jobs($responseJobs, $rid_to_job_id_map)
        {
        }
        /**
         * @param string      $type
         * @param string      $message
         * @param string|null $id
         */
        private function add_message($type, $message, $id = \null)
        {
        }
        /**
         * @param WPML_TM_ATE_Models_Job_Create[] $jobs
         *
         * @return mixed
         * @throws \InvalidArgumentException
         */
        private function create_jobs(array $jobs)
        {
        }
        /**
         * After implementation of wpmltm-3211 and wpmltm-3391, we should not find missing ATE IDs anymore.
         * Some code below seems dead but we'll keep it for now in case we are missing a specific context.
         *
         * @link https://onthegosystems.myjetbrains.com/youtrack/issue/wpmltm-3211
         * @link https://onthegosystems.myjetbrains.com/youtrack/issue/wpmltm-3391
         */
        private function get_ate_jobs_data(array $translation_jobs)
        {
        }
        /**
         * @param string $default_url
         * @param int $job_id
         * @param null|string $return_url
         *
         * @return string
         * @throws \InvalidArgumentException
         */
        public function get_editor_url($default_url, $job_id, $return_url = \null)
        {
        }
        /**
         * @param $ignore
         * @param array $translation_jobs
         *
         * @return array
         */
        public function get_ate_jobs_data_filter($ignore, array $translation_jobs)
        {
        }
        private function get_ate_job_id($job_id)
        {
        }
        public function update_jobs_on_current_screen()
        {
        }
        /**
         * @param string $message
         */
        private function add_update_error_notice($message)
        {
        }
        /**
         * @todo: Remove this method in favor of the new SYNC/DOWNLOAD process.
         *
         * @param bool           $updated
         * @param array|stdClass $translation_jobs
         * @param bool           $ignore_errors
         *
         * @throws \RuntimeException
         *
         * @return int[] Returns an array of WPML job IDs that translation was applied (XLIFF updated)
         */
        public function update_jobs($updated, $translation_jobs, $ignore_errors = \false)
        {
        }
        /**
         * This situation happens when a job was delivered
         * and the translator is editing the job but he did not
         * click on the "Redeliver" button yet.
         *
         * @param int   $wpml_job_id
         * @param array $ate_job_data
         *
         * @return bool
         */
        private function is_delivered_job_being_edited($wpml_job_id, array $ate_job_data)
        {
        }
        /**
         * If we have an XLIFF URL, we will fetch the remote file
         * and try to apply it.
         *
         * @param array $ate_job_data
         *
         * @return bool
         * @throws Requests_Exception
         */
        private function maybe_apply_translation(array $ate_job_data)
        {
        }
        /**
         * @param $ate_job_id
         * @param $ignore_errors
         *
         * @return bool
         */
        private function confirm_received_job($ate_job_id, $ignore_errors)
        {
        }
        /**
         * @param mixed $response
         *
         * @throws \RuntimeException
         */
        protected function check_response_error($response)
        {
        }
        /**
         * @param $ate_job_id
         */
        private function resign_job_on_error($ate_job_id)
        {
        }
        /**
         * @param $translation_job
         *
         * @return bool
         */
        private function is_ate_translation_job($translation_job)
        {
        }
        /**
         * @param $post
         *
         * @return array|null|WP_Post
         */
        private function get_wp_post($post)
        {
        }
        /**
         * @return bool
         */
        private function is_edit_list_page_of_a_translatable_type()
        {
        }
        /**
         * @return bool
         */
        private function is_edit_page_of_a_translatable_type()
        {
        }
        /**
         * @param int    $trid
         * @param string $element_type
         *
         * @return mixed
         */
        private function get_original_element($trid, $element_type)
        {
        }
        /**
         * @param $job_status
         *
         * @return bool
         */
        private function must_acknowledge_ATE($job_status)
        {
        }
    }
}
namespace WPML\TM\ATE\Hooks {
    class ReturnedJobActionsFactory implements \IWPML_Backend_Action_Loader, \IWPML_REST_Action_Loader
    {
        public function create()
        {
        }
    }
}
namespace {
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_AMS_Synchronize_Actions implements \IWPML_Action
    {
        const ENABLED_FOR_TRANSLATION_VIA_ATE = 'wpml_enabled_for_translation_via_ate';
        /**
         * @var WPML_TM_AMS_API
         */
        private $ams_api;
        /**
         * @var WPML_TM_AMS_Users
         */
        private $ams_user_records;
        /**
         * @var WPML_WP_User_Factory $user_factory
         */
        private $user_factory;
        /**
         * @var WPML_TM_AMS_Translator_Activation_Records
         */
        private $translator_activation_records;
        public function __construct(\WPML_TM_AMS_API $ams_api, \WPML_TM_AMS_Users $ams_user_records, \WPML_WP_User_Factory $user_factory, \WPML_TM_AMS_Translator_Activation_Records $translator_activation_records)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @throws \InvalidArgumentException
         */
        public function synchronize_translators()
        {
        }
        /**
         * @throws \InvalidArgumentException
         */
        public function synchronize_managers()
        {
        }
        public function enable_subscription($user_id)
        {
        }
        public function user_changed()
        {
        }
    }
    /**
     * @todo The hook 'wpml_tm_ate_jobs_store' seems to be never used so this class and its factory may be obsolete
     *
     * @author OnTheGo Systems
     */
    class WPML_TM_ATE_Jobs_Store_Actions implements \IWPML_Action
    {
        /**
         * @var WPML_TM_ATE_Jobs
         */
        private $ate_jobs;
        /**
         * WPML_TM_ATE_Jobs_Actions constructor.
         *
         * @param WPML_TM_ATE_Jobs $ate_jobs
         */
        public function __construct(\WPML_TM_ATE_Jobs $ate_jobs)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param int   $wpml_job_id
         * @param array $ate_job_data
         *
         * @return array|null
         */
        public function store($wpml_job_id, $ate_job_data)
        {
        }
    }
    /**
     * \WPML_TM_ATE_Translator_Login factory.
     *
     * @author OnTheGo Systems
     *
     * NOTE: This uses the Frontend loader because is_admin() returns false during wp_login
     */
    class WPML_TM_ATE_Translator_Login_Factory implements \IWPML_Frontend_Action_Loader
    {
        /**
         * It returns an instance of WPML_TM_ATE_Translator_Login is ATE is enabled and active.
         *
         * @return \WPML_TM_ATE_Translator_Logine|\IWPML_Frontend_Action_Loader|null
         */
        public function create()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ATE_Post_Edit_Actions implements \IWPML_Action
    {
        private $endpoints;
        /**
         * WPML_TM_ATE_Jobs_Actions constructor.
         *
         * @param WPML_TM_ATE_AMS_Endpoints $endpoints
         */
        public function __construct(\WPML_TM_ATE_AMS_Endpoints $endpoints)
        {
        }
        public function add_hooks()
        {
        }
        public function allowed_redirect_hosts($hosts)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ATE_Required_Actions_Base
    {
        private $ate_enabled;
        protected function is_ate_enabled()
        {
        }
    }
}
namespace WPML\TM\ATE\Hooks {
    class ReturnedJobActions implements \IWPML_Action
    {
        /** @var callable :: int->string->void */
        private $addToQueue;
        /**
         * @param  callable  $addToQueue
         */
        public function __construct(callable $addToQueue)
        {
        }
        public function add_hooks()
        {
        }
        public function addToQueue()
        {
        }
    }
}
namespace {
    class WPML_TM_ATE_API_Error
    {
        public function log($message)
        {
        }
    }
    class WPML_TM_AMS_Synchronize_Users_On_Access_Denied
    {
        const ERROR_MESSAGE = 'Authentication error, please contact your translation manager to check your subscription';
        /** @var WPML_TM_AMS_Synchronize_Actions */
        private $ams_synchronize_actions;
        /** @var WPML_TM_ATE_Jobs */
        private $ate_jobs;
        public function add_hooks()
        {
        }
        public function catch_access_error()
        {
        }
        /**
         * @return bool
         */
        private function ate_redirected_due_to_lack_of_access()
        {
        }
        /**
         * @return IWPML_Action|IWPML_Action[]|WPML_TM_AMS_Synchronize_Actions
         */
        private function get_ams_synchronize_actions()
        {
        }
        /**
         * @return WPML_TM_ATE_Jobs
         */
        private function get_ate_jobs()
        {
        }
        /**
         * @param WPML_TM_AMS_Synchronize_Actions $ams_synchronize_actions
         */
        public function set_ams_synchronize_actions(\WPML_TM_AMS_Synchronize_Actions $ams_synchronize_actions)
        {
        }
        /**
         * @param WPML_TM_ATE_Jobs $ate_jobs
         */
        public function set_ate_jobs(\WPML_TM_ATE_Jobs $ate_jobs)
        {
        }
    }
}
namespace WPML\TM\ATE {
    class JobRecords
    {
        const FIELD_ATE_JOB_ID = 'ate_job_id';
        const FIELD_IS_EDITING = 'is_editing';
        /** @var \wpdb $wpdb */
        private $wpdb;
        /** @var Collection $jobs */
        private $jobs;
        public function __construct(\wpdb $wpdb)
        {
        }
        /**
         * This method will retrieve data from the ATE job ID.
         * Beware of the returned data shape which is not standard.
         *
         * @param int $ateJobId
         *
         * @return array|null
         */
        public function get_data_from_ate_job_id($ateJobId)
        {
        }
        /**
         * @param int   $wpmlJobId
         * @param array $ateJobData
         */
        public function store($wpmlJobId, array $ateJobData)
        {
        }
        /**
         * @param JobRecord $job
         */
        public function persist(\WPML\TM\ATE\JobRecord $job)
        {
        }
        /**
         * This method will load in-memory the required jobs.
         *
         * @param array $wpmlJobIds
         * @param array $ateJobIds
         */
        public function warmCache(array $wpmlJobIds, array $ateJobIds = [])
        {
        }
        /**
         * @param $idPropertyName
         *
         * @return \Closure
         */
        private function isAlreadyLoaded($idPropertyName)
        {
        }
        /**
         * @param int $wpmlJobId
         *
         * @return int
         */
        public function get_ate_job_id($wpmlJobId)
        {
        }
        /**
         * @param int $wpmlJobId
         *
         * @return bool
         */
        public function is_editing_job($wpmlJobId)
        {
        }
        /**
         * @param $wpmlJobId
         *
         * @return JobRecord
         */
        public function get($wpmlJobId)
        {
        }
        /**
         * This method will try to recover the job data from ATE server,
         * and persist it in the local repository.
         *
         * @param int $wpmlJobId
         */
        private function restoreJobDataFromATE($wpmlJobId)
        {
        }
    }
}
namespace {
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ATE_Authentication
    {
        const AMS_DATA_KEY = 'WPML_TM_AMS';
        const AMS_STATUS_NON_ACTIVE = 'non-active';
        const AMS_STATUS_ENABLED = 'enabled';
        const AMS_STATUS_ACTIVE = 'active';
        /** @var string|null $site_id */
        private $site_id = \null;
        public function get_signed_url_with_parameters($verb, $url, $params = \null)
        {
        }
        public function signUrl($verb, $url, $params = \null)
        {
        }
        private function get_signature($verb, $url, array $params = \null)
        {
        }
        public function has_keys()
        {
        }
        private function get_secret()
        {
        }
        private function get_shared()
        {
        }
        private function get_ams_data_property($field)
        {
        }
        /**
         * @return array
         */
        private function get_ams_data()
        {
        }
        /**
         * @param string     $verb
         * @param string     $url
         * @param array|null $params
         *
         * @return string
         */
        private function add_required_arguments_to_url($verb, $url, array $params = \null)
        {
        }
        /**
         * @param string $url
         *
         * @return array
         */
        private function get_url_query($url)
        {
        }
        /**
         * @param $query
         *
         * @return mixed|string
         */
        protected function build_query($query)
        {
        }
        /**
         * @param string|null $site_id
         */
        public function override_site_id($site_id)
        {
        }
        public function get_site_id()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ATE_API
    {
        private $wp_http;
        private $auth;
        private $endpoints;
        /**
         * @var ClonedSitesHandler
         */
        private $clonedSitesHandler;
        /**
         * @var FingerprintGenerator
         */
        private $fingerprintGenerator;
        /**
         * WPML_TM_ATE_API constructor.
         *
         * @param WP_Http                    $wp_http
         * @param WPML_TM_ATE_Authentication $auth
         * @param WPML_TM_ATE_AMS_Endpoints  $endpoints
         */
        public function __construct(\WP_Http $wp_http, \WPML_TM_ATE_Authentication $auth, \WPML_TM_ATE_AMS_Endpoints $endpoints, \WPML\TM\ATE\ClonedSites\ApiCommunication $clonedSitesHandler, \WPML\TM\ATE\ClonedSites\FingerprintGenerator $fingerprintGenerator)
        {
        }
        /**
         * @param array $params
         *
         * @see https://bitbucket.org/emartini_crossover/ate/wiki/API/V1/jobs/create
         *
         * @return mixed
         * @throws \InvalidArgumentException
         */
        public function create_jobs(array $params)
        {
        }
        /**
         * @param int|string|array $ate_job_id
         *
         * @return array|WP_Error
         * @throws \InvalidArgumentException
         */
        public function confirm_received_job($ate_job_id)
        {
        }
        /**
         * @param int    $job_id
         * @param string $return_url
         *
         * @return string|WP_Error
         * @throws \InvalidArgumentException
         */
        public function get_editor_url($job_id, $return_url)
        {
        }
        /**
         * @param int $ate_job_id
         * @param WPML_Element_Translation_Job $job_object
         *
         * @return array
         */
        public function clone_job($ate_job_id, \WPML_Element_Translation_Job $job_object)
        {
        }
        /**
         * @param int $ate_job_id
         *
         * @return array|WP_Error
         * @throws \InvalidArgumentException
         */
        public function get_job($ate_job_id)
        {
        }
        /**
         * If `$job_ids` is not an empty array,
         * the `$statuses` parameter will be ignored in ATE's endpoint.
         *
         * @see https://bitbucket.org/emartini_crossover/ate/wiki/API/V1/jobs/status
         *
         * @param null|array $job_ids
         * @param null|array $statuses
         *
         * @return array|mixed|null|object|WP_Error
         * @throws \InvalidArgumentException
         */
        public function get_jobs($job_ids, $statuses = \null)
        {
        }
        /**
         * @param $wpml_job_ids
         *
         * @return array|mixed|object|WP_Error|null
         */
        public function get_jobs_by_wpml_ids($wpml_job_ids)
        {
        }
        /**
         * @param array $pairs
         * @see https://bitbucket.org/emartini_crossover/ate/wiki/API/V1/migration/migrate
         * @return bool
         */
        public function migrate_source_id(array $pairs)
        {
        }
        private function get_response($result)
        {
        }
        private function get_response_body($result)
        {
        }
        private function get_response_errors($response)
        {
        }
        /**
         * @return array
         */
        private function json_headers()
        {
        }
        /**
         * @param array $args
         *
         * @return string
         */
        private function encode_body_args(array $args)
        {
        }
        /**
         * @param string $xliff_url
         *
         * @return string
         * @throws Requests_Exception
         */
        public function get_remote_xliff_content($xliff_url)
        {
        }
        public function override_site_id($site_id)
        {
        }
        public function get_website_id($site_url)
        {
        }
        /**
         * @see https://bitbucket.org/emartini_crossover/ate/wiki/API/V1/sync/all
         *
         * @param array $ateJobIds
         *
         * @return array|mixed|null|object|WP_Error
         * @throws \InvalidArgumentException
         */
        public function sync_all(array $ateJobIds)
        {
        }
        /**
         * @see https://bitbucket.org/emartini_crossover/ate/wiki/API/V1/sync/page
         *
         * @param string $token
         * @param int    $page
         *
         * @return array|mixed|null|object|WP_Error
         * @throws \InvalidArgumentException
         */
        public function sync_page($token, $page)
        {
        }
        /**
         * @param string $url
         * @param array  $requestArgs
         *
         * @return array|mixed|object|string|WP_Error|null
         */
        private function request($url, array $requestArgs = [])
        {
        }
        /**
         * @param string $url
         * @param array  $requestArgs
         *
         * @return array|mixed|object|string|WP_Error|null
         */
        private function requestWithLog($url, array $requestArgs = [])
        {
        }
    }
}
namespace WPML\TM\ATE\ClonedSites {
    class Lock
    {
        const CLONED_SITE_OPTION = 'otgs_wpml_tm_ate_cloned_site_lock';
        public function lock($lockData)
        {
        }
        private function isLockDataPresent($lockData)
        {
        }
        public function unlock()
        {
        }
        public static function isLocked()
        {
        }
    }
    class ReportAjax implements \IWPML_Backend_Action, \IWPML_DIC_Action
    {
        /**
         * @var Report
         */
        private $reportHandler;
        /**
         * @param Report $reportHandler
         */
        public function __construct(\WPML\TM\ATE\ClonedSites\Report $reportHandler)
        {
        }
        public function add_hooks()
        {
        }
        public function reportSiteCloned()
        {
        }
        private function isValidRequest()
        {
        }
    }
    class FingerprintGenerator
    {
        const SITE_FINGERPRINT_HEADER = 'SITE-FINGERPRINT';
        const NEW_SITE_FINGERPRINT_HEADER = 'NEW-SITE-FINGERPRINT';
        public function getSiteFingerprint()
        {
        }
        private function getSiteUrl()
        {
        }
        private function getDefaultSiteUrl($siteUrl)
        {
        }
    }
    class ApiCommunication
    {
        const SITE_CLONED_ERROR = 426;
        /**
         * @var Lock
         */
        private $lock;
        /**
         * @param Lock $lock
         */
        public function __construct(\WPML\TM\ATE\ClonedSites\Lock $lock)
        {
        }
        public function handleClonedSiteError($response)
        {
        }
        public function checkCloneSiteLock()
        {
        }
        public function unlockClonedSite()
        {
        }
        private function handleClonedDetection($error_data)
        {
        }
    }
    class Report
    {
        const REPORT_TYPE_COPY = 'copy';
        const REPORT_TYPE_MOVE = 'move';
        /**
         * @var \WPML_TM_AMS_API
         */
        private $apiClient;
        /**
         * @var ApiCommunication
         */
        private $apiCommunicationHandler;
        /**
         * @var \WPML_TM_ATE_Job_Repository
         */
        private $ateJobsRepository;
        /**
         * Update jobs synchronisation
         *
         * @var \WPML_TP_Sync_Update_Job
         */
        private $updateJobs;
        /**
         * @var \WPML_Translation_Job_Factory
         */
        private $translationJobFactory;
        /**
         * @param \WPML_TM_AMS_API $apiClient
         * @param ApiCommunication $apiCommunicationHandler
         * @param \WPML_TM_ATE_Job_Repository $ateJobsRepository
         * @param \WPML_Translation_Job_Factory $translationJobFactory
         */
        public function __construct(\WPML_TM_AMS_API $apiClient, \WPML\TM\ATE\ClonedSites\ApiCommunication $apiCommunicationHandler, \WPML_TM_ATE_Job_Repository $ateJobsRepository, \WPML_TP_Sync_Update_Job $updateJobs, \WPML_Translation_Job_Factory $translationJobFactory)
        {
        }
        /**
         * @param string $reportType
         *
         * @return bool
         */
        public function report($reportType)
        {
        }
        private function reportCopiedSite()
        {
        }
        private function reportMovedSite()
        {
        }
    }
}
namespace {
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_AMS_API
    {
        const HTTP_ERROR_CODE_400 = 400;
        private $auth;
        private $endpoints;
        private $wp_http;
        /**
         * @var ClonedSitesHandler
         */
        private $clonedSitesHandler;
        /**
         * @var FingerprintGenerator
         */
        private $fingerprintGenerator;
        /**
         * WPML_TM_ATE_API constructor.
         *
         * @param WP_Http                    $wp_http
         * @param WPML_TM_ATE_Authentication $auth
         * @param WPML_TM_ATE_AMS_Endpoints  $endpoints
         * @param ClonedSitesHandler  $clonedSitesHandler
         * @param FingerprintGenerator $fingerprintGenerator
         */
        public function __construct(\WP_Http $wp_http, \WPML_TM_ATE_Authentication $auth, \WPML_TM_ATE_AMS_Endpoints $endpoints, \WPML\TM\ATE\ClonedSites\ApiCommunication $clonedSitesHandler, \WPML\TM\ATE\ClonedSites\FingerprintGenerator $fingerprintGenerator)
        {
        }
        /**
         * @param string $translator_email
         *
         * @return array|mixed|null|object|WP_Error
         * @throws \InvalidArgumentException
         */
        public function enable_subscription($translator_email)
        {
        }
        /**
         * @param string $translator_email
         *
         * @return bool|WP_Error
         */
        public function is_subscription_activated($translator_email)
        {
        }
        /**
         * @return array|mixed|null|object|WP_Error
         *
         * @throws \InvalidArgumentException Exception.
         */
        public function get_status()
        {
        }
        /**
         * Used to register a manager and, at the same time, create a website in AMS.
         * This is called only when registering the site with AMS.
         * To register new managers or translators `\WPML_TM_ATE_AMS_Endpoints::get_ams_synchronize_managers`
         * and `\WPML_TM_ATE_AMS_Endpoints::get_ams_synchronize_translators` will be used.
         *
         * @param WP_User   $manager     The WP_User instance of the manager.
         * @param WP_User[] $translators An array of WP_User instances representing the current translators.
         * @param WP_User[] $managers    An array of WP_User instances representing the current managers.
         *
         * @return array|bool|null|WP_Error
         */
        public function register_manager(\WP_User $manager, array $translators, array $managers)
        {
        }
        /**
         * Gets the data required by AMS to register a user.
         *
         * @param WP_User $wp_user           The user from which data should be extracted.
         * @param bool    $with_name_details True if name details should be included.
         *
         * @return array
         */
        private function get_user_data(\WP_User $wp_user, $with_name_details = \false)
        {
        }
        private function prepareClonedSiteArguments($method)
        {
        }
        /**
         * @return array|WP_Error
         */
        public function reportCopiedSite()
        {
        }
        /**
         * @return array|WP_Error
         */
        public function reportMovedSite()
        {
        }
        /**
         * @param array $response Response from reportMovedSite()
         *
         * @return bool|WP_Error
         */
        public function processMoveReport($response)
        {
        }
        /**
         * @param array $response_body body from reportMovedSite() response.
         *
         * @return bool
         */
        private function storeAuthData($response_body)
        {
        }
        /**
         * @param array $response_body body from reportMovedSite() response.
         *
         * @return bool
         */
        private function updateRegistrationData($response_body)
        {
        }
        /**
         * @param array $response_body body from reportMovedSite() response.
         *
         * @return bool
         */
        private function updateSiteUuId($response_body)
        {
        }
        private function sendSiteReportConfirmation()
        {
        }
        /**
         * @param string $url
         * @param string $method
         *
         * @return array|WP_Error
         */
        private function processReport($url, $method)
        {
        }
        /**
         * @param array $response Response from reportCopiedSite()
         *
         * @return bool
         */
        public function processCopyReportConfirmation($response)
        {
        }
        /**
         * Converts an array of WP_User instances into an array of data nedded by AMS to identify users.
         *
         * @param WP_User[] $users             An array of WP_User instances.
         * @param bool      $with_name_details True if name details should be included.
         *
         * @return array
         */
        private function get_users_data(array $users, $with_name_details = \false)
        {
        }
        /**
         * Checks if a reponse has a body.
         *
         * @param array|\WP_Error $response The response of the remote request.
         *
         * @return bool
         */
        private function response_has_body($response)
        {
        }
        private function get_errors(array $response)
        {
        }
        /**
         * @param array  $ams_error
         * @param string $default
         *
         * @return string
         */
        private function get_error_message($ams_error, $default)
        {
        }
        private function response_has_keys($response)
        {
        }
        /**
         * @return array
         */
        public function get_registration_data()
        {
        }
        /**
         * @param $registration_data
         *
         * @return bool
         */
        private function set_registration_data($registration_data)
        {
        }
        /**
         * @param array $managers
         *
         * @return array|mixed|null|object|WP_Error
         * @throws \InvalidArgumentException
         */
        public function synchronize_managers(array $managers)
        {
        }
        /**
         * @param array $translators
         *
         * @return array|mixed|null|object|WP_Error
         * @throws \InvalidArgumentException
         */
        public function synchronize_translators(array $translators)
        {
        }
        /**
         * @param string     $method
         * @param string     $url
         * @param array|null $params
         *
         * @return array|WP_Error
         */
        private function request($method, $url, array $params = \null)
        {
        }
        /**
         * @param string     $verb
         * @param string     $url
         * @param array|null $params
         *
         * @return array|WP_Error
         */
        private function signed_request($verb, $url, array $params = \null)
        {
        }
        /**
         * @param $url
         *
         * @return string
         */
        private function add_versions_to_url($url)
        {
        }
        public function override_site_id($site_id)
        {
        }
    }
    /**
     * Used for helping building other factories.
     *
     * @see    Usage.
     *
     * @author OnTheGo Systems
     */
    class WPML_TM_AMS_ATE_Factories
    {
        /**
         * It returns an cached instance of \WPML_TM_ATE_API.
         *
         * @return \WPML_TM_ATE_API
         */
        public function get_ate_api()
        {
        }
        /**
         * It returns an cached instance of \WPML_TM_ATE_API.
         *
         * @return \WPML_TM_AMS_API
         */
        public function get_ams_api()
        {
        }
        /**
         * If ATE is active, it returns true.
         *
         * @return bool
         */
        public function is_ate_active()
        {
        }
    }
}
namespace WPML\TM\ATE\Log {
    class Hooks implements \IWPML_Backend_Action, \IWPML_DIC_Action
    {
        const SUBMENU_HANDLE = 'wpml-tm-ate-log';
        /** @var ViewFactory $viewFactory */
        private $viewFactory;
        public function __construct(\WPML\TM\ATE\Log\ViewFactory $viewFactory)
        {
        }
        public function add_hooks()
        {
        }
        public function renderSupportSection()
        {
        }
        public function addLogSubmenuPage()
        {
        }
        public function renderPage()
        {
        }
    }
    class ViewFactory
    {
        public function create()
        {
        }
    }
    class Entry
    {
        /**
         * @var int $timestamp The log's creation timestamp.
         */
        public $timestamp = 0;
        /**
         * @see ErrorEvents
         *
         * @var int $event The event code that triggered the log.
         */
        public $event = 0;
        /**
         * @var string $description The details of the log (e.g. exception message).
         */
        public $description = '';
        /**
         * @var int $wpmlJobId [Optional] The WPML Job ID (when applies).
         */
        public $wpmlJobId = 0;
        /**
         * @var int $ateJobId [Optional] The ATE Job ID (when applies).
         */
        public $ateJobId = 0;
        /**
         * @var array $extraData [Optional] Complementary serialized data (e.g. API request/response data).
         */
        public $extraData = [];
        /**
         * @param array $item
         *
         * @return Entry
         */
        public function __construct(array $item = null)
        {
        }
        /**
         * @return string
         */
        public function getFormattedDate()
        {
        }
        /**
         * @return string
         */
        public function getEventLabel()
        {
        }
        /**
         * @return string
         */
        public function getExtraDataToString()
        {
        }
    }
    class ErrorEvents
    {
        /** Communication errors */
        const SERVER_ATE = 1;
        const SERVER_AMS = 2;
        const SERVER_XLIFF = 3;
        /** Internal errors */
        const JOB_DOWNLOAD = 10;
    }
    class View
    {
        /** @var Collection $logs */
        private $logs;
        public function __construct(\WPML\Collect\Support\Collection $logs)
        {
        }
        public function renderSupportSection()
        {
        }
        public function renderPage()
        {
        }
        private function renderTableHeader()
        {
        }
        public function renderTableRow(\WPML\TM\ATE\Log\Entry $entry)
        {
        }
        private function renderEmptyTable()
        {
        }
    }
    class Storage
    {
        const OPTION_GROUP = 'TM\\ATE\\Log';
        const OPTION_NAME = 'logs';
        const MAX_ENTRIES = 50;
        /** @var OptionManager $optionManager */
        private $optionManager;
        public function __construct(\WPML\WP\OptionManager $optionManager)
        {
        }
        public function add(\WPML\TM\ATE\Log\Entry $entry)
        {
        }
        /**
         * @return Collection Collection of Entry objects.
         */
        public function getAll()
        {
        }
    }
}
namespace {
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ATE_Job
    {
        const ATE_JOB_CREATED = 0;
        const ATE_JOB_IN_PROGRESS = 1;
        const ATE_JOB_TRANSLATED = 6;
        const ATE_JOB_DELIVERING = 7;
        const ATE_JOB_DELIVERED = 8;
    }
}
namespace WPML\TM\ATE\Sync {
    class Factory
    {
        const LOCK_NAME = 'ate_sync';
        /**
         * @return Process
         * @throws \Auryn\InjectionException
         */
        public function create()
        {
        }
    }
    class Result
    {
        /** @var string|false|null $lockKey */
        public $lockKey;
        /** @var string|null $ateToken */
        public $ateToken;
        /** @var int|null $nextPage */
        public $nextPage;
        /** @var int|null $numberOfPages */
        public $numberOfPages;
        /** @var int $downloadQueueSize */
        public $downloadQueueSize = 0;
    }
    class Trigger
    {
        const SYNC_TIMEOUT = 10 * MINUTE_IN_SECONDS;
        const OPTION_GROUP = 'WPML\\TM\\ATE\\Sync';
        const SYNC_LAST = 'last';
        const SYNC_REQUIRED_FOR_USERS = 'required_for_users';
        /** @var OptionManager $optionManager */
        private $optionManager;
        public function __construct(\WPML\WP\OptionManager $optionManager)
        {
        }
        /**
         * @return bool
         */
        public function isSyncRequired()
        {
        }
        /**
         * @return bool
         */
        private function isPeriodicSyncRequired()
        {
        }
        /**
         * @return bool
         */
        private function isUserSyncRequired()
        {
        }
        public function setSyncRequiredForCurrentUser()
        {
        }
        public function setLastSync()
        {
        }
        /**
         * @return Collection
         */
        private function getUsersNeedSync()
        {
        }
        private function setUsersNeedSync(\WPML\Collect\Support\Collection $usersNeedSync)
        {
        }
    }
    class Arguments
    {
        /** @var string|null $lockKey */
        public $lockKey;
        /** @var string|null $ateToken */
        public $ateToken;
        /** @var int|null $page */
        public $page;
        /** @var int|null $numberOfPages */
        public $numberOfPages;
    }
    class Process
    {
        const LOCK_RELEASE_TIMEOUT = 1 * MINUTE_IN_SECONDS;
        /** @var WPML_TM_ATE_API $api */
        private $api;
        /** @var KeyedLock $lock */
        private $lock;
        /** @var WPML_TM_ATE_Job_Repository $ateRepository */
        private $ateRepository;
        /** @var Queue $downloadQueue */
        private $downloadQueue;
        /** @var Trigger $trigger */
        private $trigger;
        public function __construct(\WPML_TM_ATE_API $api, \WPML\Utilities\KeyedLock $lock, \WPML_TM_ATE_Job_Repository $ateRepository, \WPML\TM\ATE\Download\Queue $downloadQueue, \WPML\TM\ATE\Sync\Trigger $trigger)
        {
        }
        /**
         * @param Arguments $args
         *
         * @return Result
         */
        public function run(\WPML\TM\ATE\Sync\Arguments $args)
        {
        }
        /**
         * This will run the sync on extra pages.
         *
         * @param Result    $result
         * @param Arguments $args
         *
         * @return Result
         */
        private function runSyncOnPages(\WPML\TM\ATE\Sync\Result $result, \WPML\TM\ATE\Sync\Arguments $args)
        {
        }
        /**
         * This will run the first sync iteration.
         * We send all the job IDs we want to sync.
         *
         * @param Result $result
         *
         * @return Result
         */
        private function runSyncInit(\WPML\TM\ATE\Sync\Result $result)
        {
        }
        /**
         * @return array
         */
        private function getAteJobIdsToSync()
        {
        }
        /**
         * @param \stdClass[] $items
         */
        private function pushToDownloadQueue(array $items)
        {
        }
    }
}
namespace {
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ATE
    {
        const SITE_ID_SCOPE = 'ate';
        private $translation_method_ate_enabled;
        /**
         * @var WPML_TM_ATE_API
         */
        private $tm_ate_api;
        /**
         * @var WPML_TM_ATE_Jobs
         */
        private $tm_ate_jobs;
        public function is_translation_method_ate_enabled()
        {
        }
        /**
         * @param int $trid
         * @param string $language
         *
         * @return bool
         */
        public function is_translation_ready_for_post($trid, $language)
        {
        }
        /**
         * @param int $trid
         * @param string $language
         *
         * @return int|bool
         */
        public function get_translation_status_id_for_post($trid, $language)
        {
        }
        /**
         * @param int    $trid
         * @param string $language
         *
         * @return array|WP_Error
         */
        public function get_job_data_for_post($trid, $language)
        {
        }
        /**
         * @return WPML_TM_ATE_API
         */
        private function get_tm_ate_api()
        {
        }
        /**
         * @return WPML_TM_ATE_Jobs
         */
        private function get_tm_ate_jobs()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    abstract class WPML_TM_ATE_Required_Rest_Base extends \WPML_REST_Base
    {
        const REST_NAMESPACE = 'wpml/tm/v1';
        /**
         * WPML_TM_ATE_Required_Rest_Base constructor.
         */
        public function __construct()
        {
        }
        /**
         * @param WP_REST_Request $request
         *
         * @return bool
         */
        public function validate_permission(\WP_REST_Request $request)
        {
        }
        /**
         * @param string $endpoint
         *
         * @return string
         */
        static function get_url($endpoint)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_REST_XLIFF extends \WPML_TM_ATE_Required_Rest_Base
    {
        const CAPABILITY = 'translate';
        function add_hooks()
        {
        }
        function register_routes()
        {
        }
        /**
         * @param WP_REST_Request $request
         *
         * @return array
         * @throws \InvalidArgumentException
         */
        public function fetch_xliff(\WP_REST_Request $request)
        {
        }
        function get_allowed_capabilities(\WP_REST_Request $request)
        {
        }
    }
}
namespace WPML\TM\REST {
    abstract class Base extends \WPML\Rest\Base
    {
        /**
         * @return string
         */
        public function get_namespace()
        {
        }
    }
}
namespace WPML\TM\ATE\REST {
    class Download extends \WPML\TM\REST\Base
    {
        const PROCESS_QUANTITY = 5;
        /**
         * @return array
         */
        public function get_routes()
        {
        }
        /**
         * @param WP_REST_Request $request
         *
         * @return array
         */
        public function get_allowed_capabilities(\WP_REST_Request $request)
        {
        }
        public function download()
        {
        }
        private function getJobs(\WPML\Collect\Support\Collection $processedJobs)
        {
        }
    }
}
namespace {
    class WPML_TM_REST_ATE_Sync_Jobs_Factory extends \WPML_REST_Factory_Loader
    {
        public function create()
        {
        }
    }
    /**
     * @todo: Remove this endpoint
     */
    class WPML_TM_REST_ATE_Sync_Jobs extends \WPML_TM_ATE_Required_Rest_Base
    {
        /** @var array  */
        private $capabilities = array('manage_translations', 'translate');
        /** @var TranslationManagement */
        private $tm_core;
        /** @var WPML_TM_ATE_Jobs_Actions */
        private $jobs_action;
        /**
         * @param TranslationManagement    $tm_core
         * @param WPML_TM_ATE_Jobs_Actions $jobs_action
         */
        public function __construct(\TranslationManagement $tm_core, \WPML_TM_ATE_Jobs_Actions $jobs_action)
        {
        }
        function add_hooks()
        {
        }
        function register_routes()
        {
        }
        public function sync(\WP_REST_Request $request)
        {
        }
        function get_allowed_capabilities(\WP_REST_Request $request)
        {
        }
        public function validate_permission(\WP_REST_Request $request)
        {
        }
    }
    class WPML_TM_REST_XLIFF_Factory extends \WPML_REST_Factory_Loader
    {
        public function create()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_REST_ATE_API extends \WPML_TM_ATE_Required_Rest_Base
    {
        const CAPABILITY_CREATE = 'manage_translations';
        const CAPABILITY_READ = 'translate';
        private $api;
        /**
         * WPML_TM_REST_AMS_Clients constructor.
         *
         * @param WPML_TM_ATE_API $api
         */
        public function __construct(\WPML_TM_ATE_API $api)
        {
        }
        function add_hooks()
        {
        }
        function register_routes()
        {
        }
        /**
         * @param WP_REST_Request $request
         *
         * @return array|WP_Error
         * @throws \InvalidArgumentException
         */
        public function create_jobs(\WP_REST_Request $request)
        {
        }
        /**
         * @param WP_REST_Request $request
         *
         * @return array|WP_Error
         * @throws \InvalidArgumentException
         */
        public function get_job(\WP_REST_Request $request)
        {
        }
        function get_allowed_capabilities(\WP_REST_Request $request)
        {
        }
    }
    class WPML_TM_REST_ATE_Jobs_Factory extends \WPML_REST_Factory_Loader
    {
        public function create()
        {
        }
    }
    class WPML_TM_REST_ATE_API_Factory extends \WPML_REST_Factory_Loader
    {
        /**
         * @return \WPML_TM_REST_ATE_API
         * @throws \Auryn\InjectionException
         */
        public function create()
        {
        }
    }
    class WPML_TM_REST_AMS_Clients_Factory extends \WPML_REST_Factory_Loader
    {
        /**
         * @return \WPML_TM_REST_AMS_Clients
         * @throws \Auryn\InjectionException
         */
        public function create()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_REST_AMS_Clients extends \WPML_REST_Base
    {
        private $api;
        private $ams_user_records;
        /** @var WPML_TM_AMS_Translator_Activation_Records $translator_activation_records */
        private $translator_activation_records;
        /**
         * @var WPML_TM_ATE_AMS_Endpoints
         */
        private $strings;
        public function __construct(\WPML_TM_AMS_API $api, \WPML_TM_AMS_Users $ams_user_records, \WPML_TM_AMS_Translator_Activation_Records $translator_activation_records, \WPML_TM_MCS_ATE_Strings $strings)
        {
        }
        function add_hooks()
        {
        }
        function register_routes()
        {
        }
        /**
         * @return array|WP_Error
         * @throws \InvalidArgumentException
         */
        public function register_manager()
        {
        }
        /**
         * @return array|WP_Error
         * @throws \InvalidArgumentException
         */
        public function synchronize_translators()
        {
        }
        /**
         * @return array|WP_Error
         * @throws \InvalidArgumentException
         */
        public function synchronize_managers()
        {
        }
        /**
         * @return array|mixed|null|object|WP_Error
         * @throws \InvalidArgumentException
         */
        public function get_status()
        {
        }
        public function get_console()
        {
        }
        function get_allowed_capabilities(\WP_REST_Request $request)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_REST_ATE_Public extends \WPML_TM_ATE_Required_Rest_Base
    {
        const CODE_UNPROCESSABLE_ENTITY = 422;
        const CODE_OK = 200;
        const ENDPOINT_JOBS_RECEIVE = '/ate/jobs/receive/';
        /**
         * @var WPML_TM_ATE_Jobs_Actions
         */
        private $jobs_actions;
        /**
         * @var TranslationManagement
         */
        private $translation_management;
        /**
         * @param WPML_TM_ATE_Jobs_Actions $jobs_actions
         * @param TranslationManagement    $translation_management
         */
        public function __construct(\WPML_TM_ATE_Jobs_Actions $jobs_actions, \TranslationManagement $translation_management)
        {
        }
        function add_hooks()
        {
        }
        function register_routes()
        {
        }
        public function get_allowed_capabilities(\WP_REST_Request $request)
        {
        }
        /**
         * @param WP_REST_Request $request
         *
         * @return WP_REST_Response|WP_Error
         */
        public function receive_ate_job(\WP_REST_Request $request)
        {
        }
        /**
         * @param int $wpml_job_id
         *
         * @return string
         */
        public static function get_receive_ate_job_url($wpml_job_id)
        {
        }
    }
    class WPML_TM_REST_ATE_Public_Factory extends \WPML_REST_Factory_Loader
    {
        public function create()
        {
        }
    }
}
namespace WPML\TM\ATE\REST {
    class Sync extends \WPML\TM\REST\Base
    {
        /**
         * @var Factory $factory
         */
        private $factory;
        public function __construct(\WPML\Rest\Adaptor $adaptor, \WPML\TM\ATE\Sync\Factory $factory)
        {
        }
        /**
         * @return array
         */
        public function get_routes()
        {
        }
        /**
         * @param WP_REST_Request $request
         *
         * @return array
         */
        public function get_allowed_capabilities(\WP_REST_Request $request)
        {
        }
        /**
         * @param WP_REST_Request $request
         *
         * @return array
         * @throws \Auryn\InjectionException
         */
        public function sync(\WP_REST_Request $request)
        {
        }
    }
}
namespace {
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_REST_ATE_Jobs extends \WPML_TM_ATE_Required_Rest_Base
    {
        const CAPABILITY = 'manage_translations';
        private $ate_jobs;
        /** @var WPML_TM_ATE_Job_Repository */
        private $job_repository;
        /**
         * WPML_TM_REST_ATE_Jobs constructor.
         *
         * @param WPML_TM_ATE_Jobs           $ate_jobs
         * @param WPML_TM_ATE_Job_Repository $job_repository
         */
        public function __construct(\WPML_TM_ATE_Jobs $ate_jobs, \WPML_TM_ATE_Job_Repository $job_repository)
        {
        }
        function add_hooks()
        {
        }
        function register_routes()
        {
        }
        /**
         * @param WP_REST_Request $request
         *
         * @return bool
         * @throws \InvalidArgumentException
         */
        public function store_ate_job(\WP_REST_Request $request)
        {
        }
        function get_allowed_capabilities(\WP_REST_Request $request)
        {
        }
    }
    class WPML_TM_AMS_User_Sync
    {
        /**@var WPML_Translation_Manager_Records */
        private $manager_records;
        /** @var WPML_Translator_Records */
        private $translator_records;
        /** @var WPML_Translator_Admin_Records $translator_admin_records */
        private $translator_admin_records;
        public function __construct(\WPML_Translation_Manager_Records $manager_records, \WPML_Translator_Records $translator_records, \WPML_Translator_Admin_Records $translator_admin_records)
        {
        }
        public function get_translators()
        {
        }
        public function get_managers()
        {
        }
        private function get_admins_that_are_not_translators()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TP_Extra_Field_Display
    {
        private $fields_with_items = array('select', 'radio', 'checkbox');
        /**
         * WPML_TP_Extra_Field_Display constructor.
         */
        public function __construct()
        {
        }
        public function render($field)
        {
        }
        /**
         * @param $field
         *
         * @return bool
         */
        private function must_render($field)
        {
        }
    }
    class WPML_TP_Sync_Ajax_Handler
    {
        const AJAX_ACTION = 'wpml-tp-sync-job-states';
        /** @var WPML_TP_Sync_Jobs */
        private $tp_sync;
        /** @var WPML_TM_Sync_Installer_Wrapper */
        private $installer_wrapper;
        /** @var WPML_TM_Last_Picked_Up $wpml_tm_last_picked_up */
        private $wpml_tm_last_picked_up;
        /**
         * WPML_TP_Sync_Jobs constructor.
         *
         * @param WPML_TP_Sync_Jobs              $tp_sync
         * @param WPML_TM_Sync_Installer_Wrapper $installer_wrapper
         * @param WPML_TM_Last_Picked_Up $wpml_tm_last_picked_up
         */
        public function __construct(\WPML_TP_Sync_Jobs $tp_sync, \WPML_TM_Sync_Installer_Wrapper $installer_wrapper, \WPML_TM_Last_Picked_Up $wpml_tm_last_picked_up)
        {
        }
        public function add_hooks()
        {
        }
        public function handle()
        {
        }
        /**
         * @param WPML_TM_Job_Entity $job
         *
         * @return array
         */
        public function map_job_to_result(\WPML_TM_Job_Entity $job)
        {
        }
    }
    class WPML_TM_Sync_Jobs_Status
    {
        /** @var WPML_TM_Jobs_Repository */
        private $jobs_repository;
        /** @var WPML_TP_Jobs_API */
        private $tp_api;
        /**
         * WPML_TM_Sync_Jobs_Status constructor.
         *
         * @param WPML_TM_Jobs_Repository $jobs_repository
         * @param WPML_TP_Jobs_API        $tp_api
         */
        public function __construct(\WPML_TM_Jobs_Repository $jobs_repository, \WPML_TP_Jobs_API $tp_api)
        {
        }
        /**
         * @return WPML_TM_Jobs_Collection
         * @throws WPML_TP_API_Exception
         */
        public function sync()
        {
        }
        /**
         * @param WPML_TM_Jobs_Collection $jobs
         *
         * @return WPML_TM_Jobs_Collection
         * @throws WPML_TP_API_Exception
         */
        private function update_tp_state_of_jobs(\WPML_TM_Jobs_Collection $jobs)
        {
        }
        /**
         * @param WPML_TM_Jobs_Collection $jobs
         *
         * @return array
         */
        private function extract_tp_id_from_jobs(\WPML_TM_Jobs_Collection $jobs)
        {
        }
    }
    class WPML_TM_Sync_Installer_Wrapper
    {
        /**
         * @return bool
         */
        public function is_wpml_registered()
        {
        }
    }
    class WPML_TM_Sync_Jobs_Revision
    {
        /** @var WPML_TM_Jobs_Repository */
        private $jobs_repository;
        /** @var WPML_TP_Jobs_API */
        private $tp_api;
        /**
         * WPML_TM_Sync_Jobs_Revision constructor.
         *
         * @param WPML_TM_Jobs_Repository $jobs_repository
         * @param WPML_TP_Jobs_API        $tp_api
         */
        public function __construct(\WPML_TM_Jobs_Repository $jobs_repository, \WPML_TP_Jobs_API $tp_api)
        {
        }
        /**
         * @return WPML_TM_Job_Entity[]
         * @throws WPML_TP_API_Exception
         */
        public function sync()
        {
        }
    }
    class WPML_TP_Sync_Update_Job
    {
        private $strategies = array(\WPML_TM_Job_Entity::POST_TYPE => 'update_post_job', \WPML_TM_Job_Entity::STRING_TYPE => 'update_string_job', \WPML_TM_Job_Entity::PACKAGE_TYPE => 'update_post_job', \WPML_TM_Job_Entity::STRING_BATCH => 'update_post_job');
        /** @var wpdb */
        private $wpdb;
        /** @var SitePress */
        private $sitepress;
        /**
         * @param wpdb $wpdb
         */
        public function __construct(\wpdb $wpdb, \SitePress $sitepress)
        {
        }
        /**
         * @param WPML_TM_Job_Entity $job
         *
         * @return WPML_TM_Job_Entity
         */
        public function update_state(\WPML_TM_Job_Entity $job)
        {
        }
        /**
         * @param WPML_TM_Job_Entity $job
         *
         * @return WPML_TM_Job_Entity
         */
        private function update_string_job(\WPML_TM_Job_Entity $job)
        {
        }
        /**
         * @param WPML_TM_Job_Entity $job
         *
         * @return WPML_TM_Job_Entity
         */
        private function update_post_job(\WPML_TM_Job_Entity $job)
        {
        }
        private function get_job_prev_status($job_id)
        {
        }
        /**
         * In the db, we store the exact json format that we get from TS. It includes an extra ts_status key
         *
         * @param WPML_TM_Job_Entity $job
         *
         * @return string
         */
        private function get_ts_status_in_ts_format(\WPML_TM_Job_Entity $job)
        {
        }
    }
    class WPML_TP_Sync_Jobs
    {
        /** @var WPML_TM_Sync_Jobs_Status */
        private $jobs_status_sync;
        /** @var WPML_TM_Sync_Jobs_Revision */
        private $jobs_revision_sync;
        /** @var WPML_TP_Sync_Update_Job */
        private $update_job;
        /**
         * WPML_TP_Sync_Jobs constructor.
         *
         * @param WPML_TM_Sync_Jobs_Status   $jobs_status_sync
         * @param WPML_TM_Sync_Jobs_Revision $jobs_revision_sync
         * @param WPML_TP_Sync_Update_Job    $update_job
         */
        public function __construct(\WPML_TM_Sync_Jobs_Status $jobs_status_sync, \WPML_TM_Sync_Jobs_Revision $jobs_revision_sync, \WPML_TP_Sync_Update_Job $update_job)
        {
        }
        /**
         * @return WPML_TM_Jobs_Collection
         * @throws WPML_TP_API_Exception
         */
        public function sync()
        {
        }
    }
    class WPML_TP_Sync_Orphan_Jobs_Factory
    {
        /**
         * @return WPML_TP_Sync_Orphan_Jobs
         */
        public function create()
        {
        }
    }
    class WPML_TP_Sync_Orphan_Jobs
    {
        /** @var WPML_TM_Jobs_Repository */
        private $jobs_repository;
        /** @var WPML_TP_Sync_Update_Job */
        private $update_job;
        /**
         * @param WPML_TM_Jobs_Repository $jobs_repository
         * @param WPML_TP_Sync_Update_Job $update_job
         */
        public function __construct(\WPML_TM_Jobs_Repository $jobs_repository, \WPML_TP_Sync_Update_Job $update_job)
        {
        }
        /**
         * @return WPML_TM_Jobs_Collection
         */
        public function cancel_orphans()
        {
        }
        /**
         * @param WPML_TM_Job_Entity $job
         *
         * @return WPML_TM_Job_Entity
         */
        public function cancel_job(\WPML_TM_Job_Entity $job)
        {
        }
    }
    /**
     * Class WPML_TP_Translator
     */
    class WPML_TP_Translator
    {
        /**
         * Return translator status array.
         *
         * @param bool $force
         *
         * @return array
         */
        public function get_icl_translator_status($force = \false)
        {
        }
    }
    abstract class WPML_TP_Project_User
    {
        /** @var TranslationProxy_Project $project */
        protected $project;
        /**
         * WPML_TP_Project_User constructor.
         *
         * @param TranslationProxy_Project $project
         */
        public function __construct(&$project)
        {
        }
    }
    class WPML_TranslationProxy_Com_Log
    {
        private static $wrapped_class;
        /**
         * @return WPML_TranslationProxy_Communication_Log
         */
        private static function get_wrapped_class_instance()
        {
        }
        public static function log_call($url, $params)
        {
        }
        public static function get_keys_to_block()
        {
        }
        public static function log_response($response)
        {
        }
        public static function log_error($message)
        {
        }
        public static function log_xml_rpc($data)
        {
        }
        public static function get_log()
        {
        }
        public static function clear_log()
        {
        }
        public static function is_logging_enabled()
        {
        }
        /**
         * @param string|array|stdClass $params
         *
         * @return array|stdClass
         */
        public static function sanitize_data($params)
        {
        }
        /**
         * @param $url
         *
         * @return mixed
         */
        public static function sanitize_url($url)
        {
        }
        public static function set_logging_state($state)
        {
        }
        public static function add_com_log_link()
        {
        }
    }
    class WPML_TP_Lock
    {
        private $lockable_endpoints = array('/jobs/{job_id}/xliff.json');
        /** @var WPML_WP_API $wp_api */
        private $wp_api;
        public function __construct(\WPML_WP_API $wp_api)
        {
        }
        /**
         * @param string $url
         *
         * @return bool
         */
        public function is_locked($url)
        {
        }
        /**
         * @return string|false
         */
        public function get_locker_reason()
        {
        }
        /**
         * @param string $url
         *
         * @return bool
         */
        private function is_lockable($url)
        {
        }
    }
    class WPML_TP_Lock_Notice_Factory implements \IWPML_Backend_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_TP_Lock_Notice implements \IWPML_Action
    {
        const NOTICE_GROUP = 'tp-lock';
        const NOTICE_LOCKED = 'locked';
        /** @var WPML_TP_Lock $tp_lock */
        private $tp_lock;
        /** @var WPML_Notices $notices */
        private $notices;
        public function __construct(\WPML_TP_Lock $tp_lock, \WPML_Notices $notices)
        {
        }
        public function add_hooks()
        {
        }
        public function handle_notice()
        {
        }
    }
    class WPML_TP_Lock_Factory
    {
        public function create()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TP_Extra_Field
    {
        /** @var string */
        public $type = 'text';
        /** @var string */
        public $label;
        /** @var string */
        public $name;
        /** @var array */
        public $items;
    }
    /**
     * Class WPML_TM_CMS_ID
     */
    class WPML_TM_CMS_ID extends \WPML_TM_Record_User
    {
        private $cms_id_parts_glue = '_';
        private $cms_id_parts_fallback_glue = '|||';
        /** @var  WPML_Translation_Job_Factory $tm_job_factory */
        private $job_factory;
        /** @var wpdb $wpdb */
        private $wpdb;
        /**
         * WPML_TM_CMS_ID constructor.
         *
         * @param WPML_TM_Records              $tm_records
         * @param WPML_Translation_Job_Factory $job_factory
         */
        public function __construct(&$tm_records, &$job_factory)
        {
        }
        /**
         * @param int    $post_id
         * @param string $post_type
         * @param string $source_language
         * @param string $target_language
         *
         * @return string
         */
        public function build_cms_id($post_id, $post_type, $source_language, $target_language)
        {
        }
        /**
         * Returns the cms_id for a given job
         *
         * @param int $job_id
         *
         * @return false|string
         */
        function cms_id_from_job_id($job_id)
        {
        }
        /**
         * @param string $cms_id
         *
         * @return array;
         */
        public function parse_cms_id($cms_id)
        {
        }
        /**
         * @param string   $cms_id
         * @param bool|TranslationProxy_Service $translation_service
         *
         * @return int|null translation id for the given cms_id's target
         */
        public function get_translation_id($cms_id, $translation_service = \false)
        {
        }
        private function maybe_cleanup_broken_row($translation, $translation_service)
        {
        }
        /**
         * @param $cms_id
         *
         * @return bool
         */
        private function is_standard_format($cms_id)
        {
        }
    }
    class WPML_TP_String_Job extends \WPML_WPDB_User
    {
        /** @var  WPML_Translation_Basket $basket */
        private $basket;
        /** @var WPML_Translation_Job_Factory $job_factory */
        private $job_factory;
        /**
         * WPML_TP_String_Job constructor.
         *
         * @param wpdb                         $wpdb
         * @param WPML_Translation_Basket      $basket
         * @param WPML_Translation_Job_Factory $job_factory
         */
        public function __construct(&$wpdb, &$basket, &$job_factory)
        {
        }
        function send_strings_to_translation_service($string_ids, $target_language, $translator_id)
        {
        }
    }
    class WPML_Translation_Proxy_Networking
    {
        const API_VERSION = 1.1;
        /** @var WP_Http $http */
        private $http;
        /** @var WPML_TP_Lock $tp_lock */
        private $tp_lock;
        public function __construct(\WP_Http $http, \WPML_TP_Lock $tp_lock)
        {
        }
        /**
         * @param string    $url
         * @param array     $params
         * @param string    $method
         * @param bool|true $has_return_value
         * @param bool|true $json_response
         * @param bool|true $has_api_response
         *
         * @return array|mixed|stdClass|string
         * @throws WPMLTranslationProxyApiException
         */
        public function send_request($url, $params = array(), $method = 'GET', $has_return_value = \true, $json_response = \true, $has_api_response = \true)
        {
        }
        public function get_extra_fields_remote($project)
        {
        }
        /**
         * @param string $url
         * @param array  $params
         * @param string $method
         * @param bool   $has_return_value
         *
         * @throws \WPMLTranslationProxyApiException
         *
         * @return null|string
         */
        private function call_remote_api($url, $params, $method, $has_return_value = \true)
        {
        }
        private function get_exception_message($url, $method, $context, $response)
        {
        }
        /**
         * @param array $params request parameters
         * @param string $method HTTP request method
         *
         * @return array
         */
        private function filter_request_params($params, $method)
        {
        }
    }
    class WPML_TP_HTTP_Request_Filter
    {
        /**
         * @return array filtered response
         */
        public function build_request_context(array $request)
        {
        }
        /**
         * Checks if a request contains a file resource handle
         *
         * @param array $request_snippet
         *
         * @return bool
         */
        private function contains_resource(array $request_snippet)
        {
        }
        private function _prepare_multipart_request($params)
        {
        }
        private function _add_multipart_contents($boundary, $params, $context = array())
        {
        }
        private function get_file_name($params, $default = 'file')
        {
        }
    }
    class WPML_TP_Refresh_Language_Pairs
    {
        const AJAX_ACTION = 'wpml-tp-refresh-language-pairs';
        /**
         * @var WPML_TP_Project_API
         */
        private $tp_api;
        /**
         * WPML_TP_AJAX constructor.
         *
         * @param WPML_TP_Project_API $wpml_tp_api
         */
        public function __construct(\WPML_TP_Project_API $wpml_tp_api)
        {
        }
        public function add_hooks()
        {
        }
        public function refresh_language_pairs()
        {
        }
        /**
         * @return bool
         */
        private function is_valid_request()
        {
        }
    }
    class WPML_TP_Job_Status
    {
        /** @var int */
        private $tp_id;
        /** @var int */
        private $batch_id;
        /** @var string */
        private $status;
        /** @var int */
        private $revision;
        /** @var  WPML_TM_Job_TS_Status|null */
        private $ts_status;
        /**
         * @param int                        $tp_id
         * @param int                        $batch_id
         * @param string                     $state
         * @param WPML_TM_Job_TS_Status|null $ts_status
         * @param int                        $revision
         */
        public function __construct($tp_id, $batch_id, $state, $revision = 1, $ts_status = \null)
        {
        }
        /**
         * @return int
         */
        public function get_tp_id()
        {
        }
        /**
         * @return int
         */
        public function get_batch_id()
        {
        }
        /**
         * @return string
         */
        public function get_status()
        {
        }
        /**
         * @return int
         */
        public function get_revision()
        {
        }
        /**
         * @return WPML_TM_Job_TS_Status|null
         */
        public function get_ts_status()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPMLTranslationProxyApiException extends \Exception
    {
        public function __construct($message, $code = 0)
        {
        }
    }
    abstract class WPML_TP_API
    {
        /** @var WPML_TP_API_Client */
        protected $client;
        /** @var WPML_TP_Project */
        protected $project;
        /** @var WPML_TP_API_Log_Interface */
        protected $logger;
        public function __construct(\WPML_TP_API_Client $client, \WPML_TP_Project $project, \WPML_TP_API_Log_Interface $logger = \null)
        {
        }
        protected function log($action, array $params = array())
        {
        }
    }
    class WPML_TP_Project_API extends \WPML_TP_API
    {
        const API_VERSION = 1.1;
        const PROJECTS_ENDPOINT = '/projects.json';
        /**
         * @throws WPML_TP_API_Exception
         */
        public function refresh_language_pairs()
        {
        }
        /**
         * @param stdClass    $service
         * @param SiteDetails $site_details
         *
         * @return stdClass
         * @throws WPML_TP_API_Exception
         */
        public function create_project(\stdClass $service, \WPML\TM\TranslationProxy\Services\Project\SiteDetails $site_details)
        {
        }
        /**
         * @param Project   $project
         * @param \stdClass $credentials
         *
         * @throws WPML_TP_API_Exception
         */
        public function update_project_credentials(\WPML\TM\TranslationProxy\Services\Project\Project $project, \stdClass $credentials)
        {
        }
        /**
         * @param Project $project
         *
         * @return array|mixed|stdClass|string
         * @throws WPML_TP_API_Exception
         */
        public function get_extra_fields(\WPML\TM\TranslationProxy\Services\Project\Project $project)
        {
        }
    }
    class WPML_TP_Xliff_Parser
    {
        /**
         * @param SimpleXMLElement $xliff
         *
         * @return WPML_TP_Translation_Collection
         */
        public function parse(\SimpleXMLElement $xliff)
        {
        }
        /**
         * @param SimpleXMLElement $xliff_node
         * @param string           $field
         *
         * @return string
         */
        protected function get_cdata_value(\SimpleXMLElement $xliff_node, $field)
        {
        }
        /**
         * @param string $string
         *
         * @return string
         */
        public static function restore_new_line($string)
        {
        }
    }
    class WPML_TP_Services
    {
        public function get_current_project()
        {
        }
        public function get_current_service()
        {
        }
        /**
         * @param      $service_id
         * @param bool $custom_fields
         *
         * @throws WPMLTranslationProxyApiException
         */
        public function select_service($service_id, $custom_fields = \false)
        {
        }
    }
    class WPML_TP_XLIFF_API extends \WPML_TP_API
    {
        /** @var WPML_TP_Xliff_Parser */
        private $xliff_parser;
        public function __construct(\WPML_TP_API_Client $client, \WPML_TP_Project $project, \WPML_TP_API_Log_Interface $logger, \WPML_TP_Xliff_Parser $xliff_parser)
        {
        }
        /**
         * @param int $tp_job_id
         * @param bool $parse
         *
         * @return WPML_TP_Translation_Collection|string
         * @throws WPML_TP_API_Exception
         */
        public function get_remote_translations($tp_job_id, $parse = \true)
        {
        }
    }
    interface WPML_TP_API_Log_Interface
    {
        public function log($action, $data = array());
    }
    class WPML_TP_Batch_Sync_API extends \WPML_TP_API
    {
        const INIT_SYNC = '/batches/sync.json';
        const CHECK_STATUS = '/batches/sync/status.json';
        /**
         * @param array $batch_ids
         *
         * @return int[]
         * @throws WPML_TP_API_Exception
         */
        public function init_synchronization(array $batch_ids)
        {
        }
        /**
         * @return int[]
         * @throws WPML_TP_API_Exception
         */
        public function check_progress()
        {
        }
        /**
         * @param WPML_TP_API_Request $request
         *
         * @return array
         * @throws WPML_TP_API_Exception
         */
        private function handle_response(\WPML_TP_API_Request $request)
        {
        }
    }
    class WPML_TM_Log implements \WPML_TP_API_Log_Interface
    {
        const LOG_WP_OPTION = '_wpml_tp_api_Logger';
        const LOG_MAX_SIZE = 500;
        /** @var WPML_WP_API  */
        private $wpml_wp_api;
        /**
         * WPML_TM_Log constructor.
         *
         * @param WPML_WP_API $wpml_wp_api
         */
        public function __construct(\WPML_WP_API $wpml_wp_api = \null)
        {
        }
        public function log($action, $data = array())
        {
        }
        private function update_log($log)
        {
        }
        public function flush_log()
        {
        }
        public function get_log_data()
        {
        }
    }
    class WPML_TP_API_Exception extends \Exception
    {
        public function __construct($message, \WPML_TP_API_Request $request = \null, $response = \null)
        {
        }
        private function get_exception_message($url, $method, $params, $response)
        {
        }
        /**
         * @param array $params
         *
         * @return array mixed
         */
        private function filter_params($params)
        {
        }
    }
    class WPML_TP_Job_States
    {
        const RECEIVED = 'received';
        const WAITING_TRANSLATIONS = 'waiting_translation';
        const TRANSLATION_READY = 'translation_ready';
        const DELIVERED = 'delivered';
        const CANCELLED = 'cancelled';
        const ANY = 'any';
        /**
         * @return array
         */
        public static function get_possible_states()
        {
        }
        /**
         * @return string
         */
        public static function get_default_state()
        {
        }
        /**
         * @return array
         */
        public static function get_finished_states()
        {
        }
        public static function map_tp_state_to_local($tp_state)
        {
        }
    }
    class WPML_TP_Jobs_API extends \WPML_TP_API
    {
        const CHUNK_SIZE = 100;
        /**
         * @param int[] $tp_job_ids
         *
         * @return WPML_TP_Job_Status[]
         * @throws WPML_TP_API_Exception
         */
        public function get_jobs_statuses(array $tp_job_ids)
        {
        }
        private function get_chunk_of_job_statuses($tp_job_ids)
        {
        }
        /**
         * @param array $cms_ids
         * @param bool  $archived
         *
         * @return array|mixed|stdClass|string
         * @throws WPML_TP_API_Exception
         */
        public function get_jobs_per_cms_ids(array $cms_ids, $archived = \false)
        {
        }
        /**
         * @param WPML_TM_Job_Entity $job
         * @param string             $state
         * @param string             $post_url
         *
         * @throws WPML_TP_API_Exception
         */
        public function update_job_state(\WPML_TM_Job_Entity $job, $state = \WPML_TP_Job_States::DELIVERED, $post_url = \null)
        {
        }
        private function build_job_status(\stdClass $raw_data)
        {
        }
        /**
         * @return WPML_TP_Job_Status[]
         * @throws WPML_TP_API_Exception
         */
        public function get_revised_jobs()
        {
        }
    }
    class WPML_TP_API_Request
    {
        const API_VERSION = 1.1;
        /** @var string */
        private $url;
        /** @var array */
        private $params = array('api_version' => self::API_VERSION);
        /** @var string */
        private $method = 'GET';
        /** @var bool */
        private $has_api_response = \true;
        /**
         * @param string $url
         */
        public function __construct($url)
        {
        }
        /**
         * @param array $params
         */
        public function set_params(array $params)
        {
        }
        /**
         * @param string $method
         */
        public function set_method($method)
        {
        }
        /**
         * @param bool $has_api_response
         */
        public function set_has_api_response($has_api_response)
        {
        }
        /**
         * @return string
         */
        public function get_url()
        {
        }
        /**
         * @return array
         */
        public function get_params()
        {
        }
        /**
         * @return string
         */
        public function get_method()
        {
        }
        /**
         * @return bool
         */
        public function has_api_response()
        {
        }
        private function add_parameters_to_path($url, array $params)
        {
        }
        /**
         * @param $params_used_in_path
         * @param $url
         *
         * @return string
         */
        private function add_query_parameters($params_used_in_path, $url)
        {
        }
    }
    class WPML_TP_API_Client
    {
        /** @var string */
        private $proxy_url;
        /** @var WP_Http $http */
        private $http;
        /** @var WPML_TP_Lock $tp_lock */
        private $tp_lock;
        /** @var WPML_TP_HTTP_Request_Filter */
        private $request_filter;
        public function __construct($proxy_url, \WP_Http $http, \WPML_TP_Lock $tp_lock, \WPML_TP_HTTP_Request_Filter $request_filter)
        {
        }
        /**
         * @param WPML_TP_API_Request $request
         * @param bool $raw_json_response
         *
         * @return array|mixed|stdClass|string
         * @throws WPML_TP_API_Exception
         */
        public function send_request(\WPML_TP_API_Request $request, $raw_json_response = \false)
        {
        }
        /**
         * @param WPML_TP_API_Request $request
         *
         * @return null|string
         */
        private function call_remote_api(\WPML_TP_API_Request $request)
        {
        }
        /**
         * @param array  $params request parameters
         * @param string $method HTTP request method
         *
         * @return array
         */
        private function filter_request_params($params, $method)
        {
        }
        /**
         * @param WPML_TP_API_Request $request
         * @param stdClass            $response
         *
         * @return mixed
         * @throws WPML_TP_API_Exception
         */
        private function handle_json_response(\WPML_TP_API_Request $request, $response)
        {
        }
        private function generate_error_message_from_status_field($response)
        {
        }
    }
    class WPML_TranslationProxy_Communication_Log
    {
        private $keys_to_block;
        private $sitepress;
        public function __construct(\SitePress $sitepress)
        {
        }
        public function log_call($url, $params)
        {
        }
        public function get_keys_to_block()
        {
        }
        public function log_response($response)
        {
        }
        public function log_error($message)
        {
        }
        public function log_xml_rpc($data)
        {
        }
        public function get_log()
        {
        }
        public function clear_log()
        {
        }
        public function is_logging_enabled()
        {
        }
        /**
         * @param string|array|stdClass $params
         *
         * @return array|stdClass
         */
        public function sanitize_data($params)
        {
        }
        /**
         * @param string                $key
         * @param string|array|stdClass $item
         *
         * @return string|array|stdClass
         */
        private function sanitize_data_item($key, $item)
        {
        }
        /**
         * @param $url
         *
         * @return mixed
         */
        public function sanitize_url($url)
        {
        }
        public function set_logging_state($state)
        {
        }
        public function add_com_log_link()
        {
        }
        private function now()
        {
        }
        private function add_to_log($string)
        {
        }
        private function save_log($log)
        {
        }
        /**
         * @param mixed $item
         *
         * @return bool
         */
        private function is_json($item)
        {
        }
    }
    interface WPML_TP_Apply_Translation_Strategy
    {
        /**
         * @param WPML_TM_Job_Entity             $job
         * @param WPML_TP_Translation_Collection $translations
         *
         * @return void
         */
        public function apply(\WPML_TM_Job_Entity $job, \WPML_TP_Translation_Collection $translations);
    }
    class WPML_TP_Apply_Single_Job
    {
        /** @var WPML_TP_Translations_Repository */
        private $translations_repository;
        /** @var WPML_TP_Apply_Translation_Strategies */
        private $strategy_dispatcher;
        /**
         * @param WPML_TP_Translations_Repository      $translations_repository
         * @param WPML_TP_Apply_Translation_Strategies $strategy_dispatcher
         */
        public function __construct(\WPML_TP_Translations_Repository $translations_repository, \WPML_TP_Apply_Translation_Strategies $strategy_dispatcher)
        {
        }
        /**
         * @param WPML_TM_Job_Entity $job
         *
         * @return WPML_TM_Job_Entity
         * @throws WPML_TP_API_Exception
         */
        public function apply(\WPML_TM_Job_Entity $job)
        {
        }
    }
    class WPML_TP_Apply_Translation_Strategies
    {
        /** @var WPML_TP_Apply_Translation_Post_Strategy */
        private $post_strategy;
        /** @var WPML_TP_Apply_Translation_String_Strategy */
        private $string_strategy;
        /** @var wpdb */
        private $wpdb;
        /**
         * @param wpdb $wpdb
         */
        public function __construct(\wpdb $wpdb)
        {
        }
        /**
         * @param WPML_TM_Job_Entity $job
         *
         * @return WPML_TP_Apply_Translation_Strategy
         */
        public function get(\WPML_TM_Job_Entity $job)
        {
        }
        /**
         * @return WPML_TP_Apply_Translation_Post_Strategy
         */
        private function get_post_strategy()
        {
        }
        /**
         * @return WPML_TP_Apply_Translation_String_Strategy
         */
        private function get_string_strategy()
        {
        }
    }
    class WPML_TP_Apply_Translation_String_Strategy implements \WPML_TP_Apply_Translation_Strategy
    {
        /** @var WPML_TP_Jobs_API */
        private $jobs_api;
        /** @var wpdb */
        private $wpdb;
        /**
         * @param WPML_TP_Jobs_API $jobs_api
         * @param wpdb             $wpdb
         */
        public function __construct(\WPML_TP_Jobs_API $jobs_api, \wpdb $wpdb)
        {
        }
        /**
         * @param WPML_TM_Job_Entity             $job
         * @param WPML_TP_Translation_Collection $translations
         *
         * @return void
         * @throws WPML_TP_API_Exception
         */
        public function apply(\WPML_TM_Job_Entity $job, \WPML_TP_Translation_Collection $translations)
        {
        }
        /**
         * @param WPML_TM_Job_Entity $job
         * @param int                $status
         */
        private function update_local_job_status(\WPML_TM_Job_Entity $job, $status)
        {
        }
        private function map_translations_to_legacy_array(\WPML_TP_Translation_Collection $translations)
        {
        }
    }
    class WPML_TP_Apply_Translation_Post_Strategy implements \WPML_TP_Apply_Translation_Strategy
    {
        /** @var WPML_TP_Jobs_API */
        private $jobs_api;
        /** @var wpdb */
        private $wpdb;
        /**
         * @param WPML_TP_Jobs_API $jobs_api
         */
        public function __construct(\WPML_TP_Jobs_API $jobs_api)
        {
        }
        /**
         * @param WPML_TM_Job_Entity             $job
         * @param WPML_TP_Translation_Collection $translations
         *
         * @return void
         * @throws WPML_TP_API_Exception
         */
        public function apply(\WPML_TM_Job_Entity $job, \WPML_TP_Translation_Collection $translations)
        {
        }
        /**
         * @param WPML_TM_Job_Entity             $job
         * @param WPML_TP_Translation_Collection $translations
         *
         * @return array
         */
        private function build_data(\WPML_TM_Post_Job_Entity $job, \WPML_TP_Translation_Collection $translations)
        {
        }
    }
    class WPML_TP_Apply_Translations
    {
        /** @var WPML_TM_Jobs_Repository */
        private $jobs_repository;
        /** @var WPML_TP_Apply_Single_Job */
        private $apply_single_job;
        /** @var WPML_TP_Sync_Jobs */
        private $tp_sync;
        /**
         * @param WPML_TM_Jobs_Repository  $jobs_repository
         * @param WPML_TP_Apply_Single_Job $apply_single_job
         * @param WPML_TP_Sync_Jobs        $tp_sync
         */
        public function __construct(\WPML_TM_Jobs_Repository $jobs_repository, \WPML_TP_Apply_Single_Job $apply_single_job, \WPML_TP_Sync_Jobs $tp_sync)
        {
        }
        /**
         * @param array $params
         *
         * @return WPML_TM_Jobs_Collection
         * @throws WPML_TP_API_Exception
         */
        public function apply(array $params)
        {
        }
        /**
         * @param WPML_TM_Jobs_Collection $jobs
         *
         * @return bool
         */
        private function has_in_progress_jobs(\WPML_TM_Jobs_Collection $jobs)
        {
        }
        /**
         * @param array $params
         *
         * @return array|WPML_TM_Jobs_Collection
         */
        private function get_jobs(array $params)
        {
        }
        /**
         * @param int    $original_element_id
         * @param string $element_type
         *
         * @return WPML_TM_Jobs_Collection
         */
        private function get_jobs_by_original_element($original_element_id, $element_type)
        {
        }
        /**
         * @param array $params
         *
         * @return WPML_TM_Jobs_Collection
         */
        private function get_jobs_by_ids(array $params)
        {
        }
        /**
         * @return WPML_TM_Jobs_Collection
         */
        private function get_all_ready_jobs()
        {
        }
        /**
         * @param WPML_TM_Jobs_Collection $jobs
         *
         * @return WPML_TM_Jobs_Collection
         * @throws WPML_TP_API_Exception
         */
        private function sync_jobs(\WPML_TM_Jobs_Collection $jobs)
        {
        }
    }
    class WPML_TP_Translation
    {
        /** @var string */
        private $field;
        /** @var string */
        private $source;
        /** @var string */
        private $target;
        /**
         * @param string $field
         * @param string $source
         * @param string $target
         */
        public function __construct($field, $source, $target)
        {
        }
        /**
         * @return string
         */
        public function get_field()
        {
        }
        /**
         * @return string
         */
        public function get_source()
        {
        }
        /**
         * @return string
         */
        public function get_target()
        {
        }
        public function to_array()
        {
        }
    }
    class WPML_TP_Translations_Repository
    {
        /** @var WPML_TP_XLIFF_API */
        private $xliff_api;
        /** @var WPML_TM_Jobs_Repository */
        private $jobs_repository;
        /**
         * @param WPML_TP_XLIFF_API       $xliff_api
         * @param WPML_TM_Jobs_Repository $jobs_repository
         */
        public function __construct(\WPML_TP_XLIFF_API $xliff_api, \WPML_TM_Jobs_Repository $jobs_repository)
        {
        }
        /**
         * @param int  $job_id
         * @param int  $job_type
         * @param bool $parse When true, it returns the parsed translation, otherwise, it returns the raw XLIFF.
         *
         * @return WPML_TP_Translation_Collection|string
         * @throws WPML_TP_API_Exception|InvalidArgumentException
         */
        public function get_job_translations($job_id, $job_type, $parse = \true)
        {
        }
        /**
         * @param WPML_TM_Job_Entity $job
         * @param bool               $parse When true, it returns the parsed translation, otherwise, it returns the raw XLIFF.
         *
         * @return WPML_TP_Translation_Collection|string
         * @throws WPML_TP_API_Exception
         */
        public function get_job_translations_by_job_entity(\WPML_TM_Job_Entity $job, $parse = \true)
        {
        }
    }
    class WPML_TP_Translation_Collection implements \IteratorAggregate
    {
        /** @var WPML_TP_Translation[] */
        private $translations;
        /** @var string */
        private $source_language;
        /** @var string */
        private $target_language;
        /**
         * @param WPML_TP_Translation[] $translations
         * @param string                $source_language
         * @param string                $target_language
         */
        public function __construct(array $translations, $source_language, $target_language)
        {
        }
        /**
         * @return string
         */
        public function get_source_language()
        {
        }
        /**
         * @return string
         */
        public function get_target_language()
        {
        }
        public function getIterator()
        {
        }
        /**
         * @return array
         */
        public function to_array()
        {
        }
    }
    class WPML_Update_PickUp_Method
    {
        private $sitepress;
        public function __construct($sitepress)
        {
        }
        public function update_pickup_method($data, $project = \false)
        {
        }
    }
}
namespace WPML\TM\TranslationProxy\Services\Project {
    class Project
    {
        /** @var int */
        public $id;
        /** @var string */
        public $accessKey;
        /** @var string */
        public $tsId;
        /** @var string */
        public $tsAccessKey;
        /** @var \stdClass */
        public $extraFields;
        /**
         * @return array
         */
        public function toArray()
        {
        }
        /**
         * @param array $data
         *
         * @return Project
         */
        public static function fromArray(array $data)
        {
        }
        public static function fromResponse(\stdClass $response)
        {
        }
    }
    class Manager
    {
        /** @var \WPML_TP_Project_API */
        private $projectApi;
        /** @var Storage */
        private $projectStorage;
        /** @var SiteDetails */
        private $siteDetails;
        /**
         * @param \WPML_TP_Project_API $projectApi
         * @param Storage              $projectStorage
         * @param SiteDetails          $siteDetails
         */
        public function __construct(\WPML_TP_Project_API $projectApi, \WPML\TM\TranslationProxy\Services\Project\Storage $projectStorage, \WPML\TM\TranslationProxy\Services\Project\SiteDetails $siteDetails)
        {
        }
        /**
         * @param \stdClass $service
         *
         * @return Project
         * @throws \WPML_TP_API_Exception
         */
        public function create(\stdClass $service)
        {
        }
        /**
         * @param \stdClass $service
         * @param \stdClass $credentials
         *
         * @return Project|null
         * @throws \WPML_TP_API_Exception
         */
        public function updateCredentials(\stdClass $service, \stdClass $credentials)
        {
        }
        /**
         * @param \stdClass $service
         *
         * @return Project
         * @throws \WPML_TP_API_Exception
         */
        private function fromTranslationProxy(\stdClass $service)
        {
        }
        /**
         * @param \stdClass $service
         * @param \stdClass $credentials
         *
         * @return \stdClass
         */
        private function createServiceWithNewCredentials(\stdClass $service, \stdClass $credentials)
        {
        }
    }
    class Storage
    {
        /** @var \SitePress */
        private $sitepress;
        /**
         * @param \SitePress $sitepress
         */
        public function __construct(\SitePress $sitepress)
        {
        }
        /**
         * @param \stdClass $service
         *
         * @return Project|null
         */
        public function getByService(\stdClass $service)
        {
        }
        /**
         * @param \stdClass $service
         * @param Project   $project
         */
        public function save(\stdClass $service, \WPML\TM\TranslationProxy\Services\Project\Project $project)
        {
        }
        /**
         * @return Collection
         */
        public function getProjects()
        {
        }
    }
    class SiteDetails
    {
        /** @var \SitePress */
        private $sitepress;
        /**
         * @param \SitePress $sitepress
         */
        public function __construct(\SitePress $sitepress)
        {
        }
        /**
         * @return string
         */
        public function getDeliveryMethod()
        {
        }
        /**
         * @return array
         */
        public function getBlogInfo()
        {
        }
        /**
         * @return array
         */
        public function getClientData()
        {
        }
    }
}
namespace WPML\TM\TranslationProxy\Services {
    class AuthorizationFactory
    {
        /**
         * @return Authorization
         * @throws \Auryn\InjectionException
         */
        public function create()
        {
        }
    }
    class Storage
    {
        /** @var  \SitePress $sitepress */
        private $sitepress;
        /**
         * @param \SitePress $sitepress
         */
        public function __construct(\SitePress $sitepress)
        {
        }
        /**
         * Gets the current translation service
         *
         * @return bool|\stdClass
         */
        public function getCurrentService()
        {
        }
        /**
         * Saves the input service as the current translation service setting.
         *
         * @param \stdClass $service
         */
        public function setCurrentService(\stdClass $service)
        {
        }
    }
    class Authorization
    {
        /** @var Storage */
        private $storage;
        /** @var Manager */
        private $projectManager;
        /**
         * @param Storage $storage
         * @param Manager $projectManager
         */
        public function __construct(\WPML\TM\TranslationProxy\Services\Storage $storage, \WPML\TM\TranslationProxy\Services\Project\Manager $projectManager)
        {
        }
        /**
         * @param \stdClass $credentials
         *
         * @throws \RuntimeException
         * @throws \WPML_TP_API_Exception
         */
        public function authorize(\stdClass $credentials)
        {
        }
        /**
         * @param \stdClass $credentials
         *
         * @throws \WPML_TP_API_Exception
         */
        public function updateCredentials(\stdClass $credentials)
        {
        }
        /**
         * @throws \RuntimeException
         */
        public function deauthorize()
        {
        }
        /**
         * @return \stdClass
         * @throws \RuntimeException
         */
        private function getCurrentService()
        {
        }
    }
}
namespace {
    class WPML_TM_Wizard_Steps implements \IWPML_Action
    {
        const STORE_MODE_ACTION = 'wpml_tm_wizard_store_who_mode';
        const NONCE = 'wpml_tm_wizard';
        /** @var WPML_Translation_Manager_Records $translation_manager_records */
        private $translation_manager_records;
        /** @var WPML_Translator_Records $translator_records */
        private $translator_records;
        /** @var SectionFactory $translation_services_factory */
        private $translation_services_factory;
        /** @var SitePress $sitepress */
        private $sitepress;
        private $language_pair_records;
        public function __construct(\WPML_Translation_Manager_Records $translation_manager_records, \WPML_Translator_Records $translator_records, \WPML\TM\Menu\TranslationServices\SectionFactory $translation_services_factory, \WPML_Language_Pair_Records $language_pair_records, \SitePress $sitepress)
        {
        }
        public function add_hooks()
        {
        }
        public function who_will_translate_step()
        {
        }
        public function render_step($content)
        {
        }
        public function get_step($step_slug)
        {
        }
        private function get_tm_settings_with_reset_defaults()
        {
        }
        public function done()
        {
        }
        private function set_current_user_to_translate_all_langs()
        {
        }
        private function set_current_user_as_translation_manager()
        {
        }
        private function save_current_step($step_slug)
        {
        }
        private function get_step_slug()
        {
        }
        private function get_active_translation_service()
        {
        }
        public function store_mode()
        {
        }
    }
    class WPML_TM_Setup_Wizard extends \WPML_Wizard
    {
        const INITIAL_STEP = 'tm_who_will_translate';
        /**
         * @var WPML_TM_MCS_ATE_Strings
         */
        private $scripts_factory;
        /**
         * WPML_TM_Wizard_For_Manager constructor.
         *
         * @param WPML_TM_Scripts_Factory $mcs_ate
         */
        public function __construct(\WPML_TM_Scripts_Factory $mcs_ate)
        {
        }
        protected function initialize_steps()
        {
        }
        protected function enqueue_scripts()
        {
        }
    }
    class WPML_TM_Wizard_Options
    {
        const CURRENT_STEP = 'WPML_TM_Wizard_For_Manager_Current_Step';
        const WIZARD_COMPLETE_FOR_MANAGER = 'WPML_TM_Wizard_For_Manager_Complete';
        const WIZARD_COMPLETE_FOR_ADMIN = 'WPML_TM_Wizard_For_Admin_Complete';
        const WHO_WILL_TRANSLATE_MODE = 'WPML_TM_Wizard_Who_Mode';
        const ONLY_I_USER_META = 'WPML_TM_Wizard_Only_I';
    }
    class WPML_TM_Wizard_Translation_Editor_Step extends \WPML_Twig_Template_Loader
    {
        private $model = array('editor_types' => array('ate' => \ICL_TM_TMETHOD_ATE, 'classic' => \ICL_TM_TMETHOD_EDITOR, 'manual' => \ICL_TM_TMETHOD_MANUAL));
        /**
         * @var WPML_TM_MCS_ATE
         */
        private $mscs_ate;
        public function __construct(\WPML_TM_MCS_ATE $mcs_ate, $current_mode)
        {
        }
        public function render()
        {
        }
        public function add_strings()
        {
        }
    }
    class WPML_TM_Wizard_Summary_Step extends \WPML_Twig_Template_Loader
    {
        private $model = array();
        /** @var WPML_Translator_Records $translator_records */
        private $translator_records;
        /** @var WPML_TP_Service $active_translation_service */
        private $active_translation_service;
        /** @var array $who_will_translate_mode */
        private $who_will_translate_mode;
        public function __construct(\WPML_Translator_Records $translator_records, $who_will_translate_mode, \WPML_TP_Service $active_translation_service = \null)
        {
        }
        public function render()
        {
        }
        public function add_strings()
        {
        }
        public function add_translators()
        {
        }
        public function add_translation_service()
        {
        }
        private function add_mode()
        {
        }
        private function is_only_i()
        {
        }
        private function has_translators()
        {
        }
        private function has_translation_service()
        {
        }
        /** @return string */
        private function get_instructions()
        {
        }
        private function get_placeholder_value($key)
        {
        }
        private function get_top_instruction($capability)
        {
        }
        private function get_bottom_instruction($capability)
        {
        }
        private function get_instruction_items($capability)
        {
        }
        private function build_string($string_data, $capability = \null)
        {
        }
    }
    class WPML_TM_Wizard_Who_Will_Translate_Step extends \WPML_Twig_Template_Loader
    {
        private $model = array();
        /** @var WP_User $user */
        private $user;
        /** @var WPML_Translation_Manager_Settings $translation_manager_settings */
        private $translation_manager_settings;
        /** @var WPML_TM_Wizard_Translators_Step $translator_settings */
        private $translator_settings;
        /** @var \WPML\TM\Menu\TranslationServices\SectionFactory $translation_services_factory */
        private $translation_services_factory;
        /** @var array $who_will_translate_mode */
        private $who_will_translate_mode;
        public function __construct(\WP_User $user, \WPML_Translation_Manager_Settings $translation_manager_settings, \WPML_Translator_Settings $translator_settings, \WPML\TM\Menu\TranslationServices\SectionFactory $translation_services_factory, $who_will_translate_mode)
        {
        }
        public function render()
        {
        }
        public function add_strings()
        {
        }
        public function add_translation_manager_ui()
        {
        }
        public function add_translators_ui()
        {
        }
        private function add_translation_services_ui()
        {
        }
        private function add_mode()
        {
        }
        private function add_nonce()
        {
        }
        private function add_user_capability()
        {
        }
        private function handle_translation_service_params()
        {
        }
    }
    class WPML_TM_Wizard_Steps_Factory implements \IWPML_AJAX_Action_Loader
    {
        /**
         * @return IWPML_Action|WPML_TM_Wizard_Steps
         */
        public function create()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ICL20_Migration_Locks
    {
        private $progress;
        public function __construct(\WPML_TM_ICL20_Migration_Progress $progress)
        {
        }
        public function add_hooks()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ICL20_Migration_Notices
    {
        const NOTICE_GROUP = 'icl-20-migration';
        const NOTICE_MIGRATION_REQUIRED_ID = 'icl-20-migration';
        const NOTICE_MIGRATION_COMPLETED_ID = 'icl-20-migration-completed';
        /**
         * @var WPML_Notices
         */
        private $notices;
        /**
         * @var WPML_TM_ICL20_Migration_Progress
         */
        private $progress;
        /**
         * WPML_TM_ICL20_Migration_Notices constructor.
         *
         * @param WPML_TM_ICL20_Migration_Progress $progress
         * @param WPML_Notices                     $notices
         */
        public function __construct(\WPML_TM_ICL20_Migration_Progress $progress, \WPML_Notices $notices)
        {
        }
        /**
         * @param bool $requires_migration
         */
        public function run($requires_migration = \false)
        {
        }
        /**
         * Clear all notices created before and during the migration
         */
        public function clear_migration_required()
        {
        }
        /**
         * Builds the notice shown if the migration fails
         */
        private function build_migration_failed()
        {
        }
        /**
         * Builds the notice shown when the migration is required
         */
        private function build_migration_required()
        {
        }
        /**
         * @param       $text
         * @param array $actions
         */
        private function create_notice($text, array $actions = array())
        {
        }
        /**
         * Builds the notice shown when the migration completes
         */
        private function build_migration_completed()
        {
        }
        /**
         * Required by `\WPML_TM_ICL20_Migration_Notices::build_migration_required`
         */
        public function admin_enqueue_scripts()
        {
        }
        /**
         * @return string
         */
        private function get_user_confirmation_input()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ICL20_Migration_Support
    {
        const PREFIX = 'icl20-migration-reset-';
        const TIMESTAMP_FORMAT = 'Y-m-d H:i:s';
        private $can_rollback;
        private $progress;
        private $template_service;
        function __construct(\IWPML_Template_Service $template_service, \WPML_TM_ICL20_Migration_Progress $progress, $can_rollback = \false)
        {
        }
        function add_hooks()
        {
        }
        public function parse_request()
        {
        }
        public function show()
        {
        }
        private function get_model()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ICL20_Migration_Loader
    {
        /** @var WPML_TM_ICL20_Migration_Factory */
        private $factory;
        /** @var  WPML_TM_ICL20_Migration_Progress */
        private $progress;
        /** @var  WPML_TM_ICL20_Migration_Status */
        private $status;
        /** @var WPML_WP_API */
        private $wp_api;
        /**
         * WPML_TM_ICL20_Migration_Loader constructor.
         *
         * @param WPML_WP_API                     $wp_api
         * @param WPML_TM_ICL20_Migration_Factory $factory
         */
        public function __construct(\WPML_WP_API $wp_api, \WPML_TM_ICL20_Migration_Factory $factory)
        {
        }
        /**
         * This is the main method which deals with the whole logic for handling the migration
         */
        public function run()
        {
        }
        /** @return bool */
        private function is_back_end()
        {
        }
        /** @return bool */
        private function requires_migration()
        {
        }
        /**
         * If the website is set to use a preferred translation service which is the legacy ICL, it will replace it with
         * ICL2.0
         */
        private function maybe_fix_preferred_service()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ICL20_Migration_Progress
    {
        const MAX_AUTOMATIC_ATTEMPTS = 5;
        const OPTION_KEY_USER_CONFIRMED = '_wpml_icl20_migration_user_confirmed';
        const OPTION_KEY_MIGRATION_ATTEMPTS = '_wpml_icl20_migration_attempts';
        const OPTION_KEY_MIGRATION_LAST_ATTEMPT = '_wpml_icl20_migration_last_attempt';
        const OPTION_KEY_MIGRATION_LAST_ERROR = '_wpml_icl20_migration_last_error';
        const OPTION_KEY_MIGRATION_LOCAL_PROJECT_INDEX = '_wpml_icl20_migration_local_project_index';
        const OPTION_KEY_MIGRATION_LOCKED = '_wpml_icl20_migration_locked';
        const OPTION_KEY_MIGRATION_REQUIRED = '_wpml_icl20_migration_required';
        const OPTION_KEY_MIGRATION_STEPS = '_wpml_icl20_migration_step_%s';
        const STEP_ICL_ACK = 'icl_ack';
        const STEP_MIGRATE_JOBS_DOCUMENTS = 'migrate_jobs_doc';
        const STEP_MIGRATE_JOBS_STRINGS = 'migrate_jobs_strings';
        const STEP_MIGRATE_LOCAL_PROJECT = 'migrate_local_project';
        const STEP_MIGRATE_LOCAL_SERVICE = 'migrate_local_service';
        const STEP_MIGRATE_REMOTE_PROJECT = 'migrate_remote_project';
        const STEP_TOKEN = 'token';
        const STEP_FAILED = 'failed';
        const STEP_DONE = 'done';
        const VALUE_YES = 'yes';
        const VALUE_NO = 'no';
        /**
         * @var array
         */
        private $steps;
        /**
         * WPML_TM_ICL20_Migration_Progress constructor.
         */
        public function __construct()
        {
        }
        /**
         * @param string $step
         *
         * @return string|null
         */
        public function get_completed_step($step)
        {
        }
        /**
         * @return int|null
         */
        public function get_last_attempt_timestamp()
        {
        }
        /**
         * @return string|null
         */
        public function get_last_migration_error()
        {
        }
        /**
         * @return string|null
         */
        public function get_project_to_migrate()
        {
        }
        /**
         * @return array
         */
        public function get_steps()
        {
        }
        /**
         * @param string $message
         */
        public function log_failed_attempt($message)
        {
        }
        /**
         * @param string $message
         */
        private function update_last_error($message)
        {
        }
        /**
         * @return bool
         */
        public function is_migration_incomplete()
        {
        }
        /**
         * @param string      $step
         * @param string|bool $value
         */
        public function set_completed_step($step, $value)
        {
        }
        /**
         * @return bool
         */
        public function has_migration_ever_started()
        {
        }
        /**
         * It will mark the migration as done
         */
        public function set_migration_done()
        {
        }
        /**
         * It will remove all the temporary options used to store the status of the migration
         */
        public function clear_temporary_options()
        {
        }
        /**
         * @return bool
         */
        public function is_migration_done()
        {
        }
        /**
         * @return bool
         */
        public function requires_migration()
        {
        }
        /**
         * Sets the migration as started so to know, in the next attempts, if the migration was partial or never started.
         */
        public function set_migration_started()
        {
        }
        /**
         * It will increases on every migration attempt
         */
        private function increase_attempts_count()
        {
        }
        /**
         * @return int
         */
        public function get_current_attempts_count()
        {
        }
        /**
         * @return bool
         */
        public function has_too_many_automatic_attempts()
        {
        }
        /**
         * Used when too many attempts are made
         */
        private function block_next_automatic_attempts()
        {
        }
        /**
         * @return bool
         */
        public function are_next_automatic_attempts_locked()
        {
        }
        /**
         * @param string $old_index
         */
        public function set_project_to_migrate($old_index)
        {
        }
        /**
         * @return bool
         */
        public function get_user_confirmed()
        {
        }
        /**
         * User as an opt-in action from the user before starting the migration
         */
        public function set_user_confirmed()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_AJAX
    {
        /**
         * @param string $action
         *
         * @return bool
         */
        protected function is_valid_request($action = '')
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ICL20_Migration_AJAX extends \WPML_TM_AJAX
    {
        /** @var WPML_TM_ICL20_Migration_Progress */
        private $progress;
        /**
         * WPML_TM_ICL20_Migration_AJAX constructor.
         *
         * @param WPML_TM_ICL20_Migration_Progress $progress
         */
        public function __construct(\WPML_TM_ICL20_Migration_Progress $progress)
        {
        }
        /**
         * AJAX callback used to set the user confirmation for starting the migration
         */
        public function user_confirmation()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ICL20_Migration_Status
    {
        const ICL_20_TS_ID = 67;
        const ICL_LEGACY_TS_ID = 4;
        const ICL_LEGACY_TS_SUID = '6ab1000a33e2cc9ecbcf6abc57254be8';
        const ICL_20_TS_SUID = 'dd17d48516ca4bce0b83043583fabd2e';
        private $installer_settings = array();
        private $service;
        public function __construct($service)
        {
        }
        public function has_active_legacy_icl()
        {
        }
        public function has_active_icl_20()
        {
        }
        public function has_active_service()
        {
        }
        public function get_ICL_LEGACY_TS_ID()
        {
        }
        public function get_ICL_20_TS_ID()
        {
        }
        public function get_ICL_LEGACY_TS_SUID()
        {
        }
        public function get_ICL_20_TS_SUID()
        {
        }
        public function is_preferred_service_legacy_ICL()
        {
        }
        public function set_preferred_service_to_ICL20()
        {
        }
        private function has_preferred_service()
        {
        }
        private function get_preferred_service()
        {
        }
        /**
         * @return array
         */
        private function get_installer_settings()
        {
        }
        private function update_installer_settings()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ICL20_Migration_Factory
    {
        /**
         * @var WPML_TM_ICL20_Migration_Notices
         */
        private $notices;
        /**
         * @var WPML_TM_ICL20_Migration_Progress
         */
        private $progress;
        /**
         * @var WPML_TM_ICL20_Migration_Status
         */
        private $status;
        /**
         * @var WPML_TP_Services
         */
        private $tp_services;
        /**
         * @var WP_Http
         */
        private $wp_http;
        /**
         * @return WPML_TM_ICL20_Migration_AJAX
         */
        public function create_ajax()
        {
        }
        /**
         * @return WPML_TM_ICL20_Migration_Locks
         */
        public function create_locks()
        {
        }
        /**
         * @return WPML_TM_ICL20_Migration_Progress
         */
        public function create_progress()
        {
        }
        /**
         * @return WPML_TM_ICL20_Migrate
         */
        public function create_migration()
        {
        }
        /**
         * @return WPML_TM_ICL20_Migration_Status
         */
        public function create_status()
        {
        }
        /**
         * @return WPML_TM_ICL20_Migrate_Remote
         */
        private function get_remote_migration()
        {
        }
        /**
         * @return WPML_TM_ICL20_Migrate_Local
         */
        private function get_local_migration()
        {
        }
        /**
         * @return WPML_TP_Services
         */
        private function get_tp_services()
        {
        }
        /**
         * @return WP_Http
         */
        private function get_wp_http()
        {
        }
        /**
         * @return SitePress
         */
        private function get_sitepress()
        {
        }
        /**
         * @return WPML_TM_ICL20_Migration_Notices
         */
        public function create_notices()
        {
        }
        /**
         * @return WPML_TM_ICL20_Migration_Support
         */
        public function create_ui_support()
        {
        }
        /**
         * @return bool
         */
        public function can_rollback()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ICL20MigrationException extends \WPMLTranslationProxyApiException
    {
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ICL20_Migrate_Local
    {
        const JOBS_TYPES_DOCUMENTS = 'icl_translation_status';
        const JOBS_TYPES_STRINGS = 'icl_string_translations';
        private $progress;
        private $sitepress;
        private $status;
        /** @var WPML_TP_Services */
        private $tp_services;
        /**
         * WPML_TM_ICL20 constructor.
         *
         * @param WPML_TP_Services                 $tp_services
         * @param WPML_TM_ICL20_Migration_Status   $status
         * @param WPML_TM_ICL20_Migration_Progress $progress
         * @param SitePress                        $sitepress
         *
         * @internal param SitePress $sitepress
         */
        public function __construct(\WPML_TP_Services $tp_services, \WPML_TM_ICL20_Migration_Status $status, \WPML_TM_ICL20_Migration_Progress $progress, \SitePress $sitepress)
        {
        }
        public function migrate_jobs($table)
        {
        }
        /**
         * @param $table
         *
         * @return false|int
         */
        private function update_table($table)
        {
        }
        public function migrate_project()
        {
        }
        private function update_project_index($old_service_index, $new_service_index)
        {
        }
        public function migrate_service($new_token)
        {
        }
        public function rollback_service()
        {
        }
    }
    class WPML_TM_ICL20_Migrate_Remote
    {
        private $container;
        private $progress;
        /**
         * WPML_TM_ICL20 constructor.
         *
         * @param WPML_TM_ICL20_Migration_Progress  $progress
         * @param WPML_TM_ICL20_Migration_Container $container
         */
        public function __construct(\WPML_TM_ICL20_Migration_Progress $progress, \WPML_TM_ICL20_Migration_Container $container)
        {
        }
        /**
         * @param string $ts_accesskey
         * @param int    $ts_id
         *
         * @return bool
         *
         * Note: `ts_id` (aka `website_id`) = `website_id`
         *
         * @link https://onthegosystems.myjetbrains.com/youtrack/issue/icldev-2322
         */
        public function acknowledge_icl($ts_id, $ts_accesskey)
        {
        }
        /**
         * @param string $ts_accesskey
         * @param int    $ts_id
         *
         * @return string|null
         *
         * Note: `ts_id` (aka `website_id`) = `website_id`
         *
         * @link https://onthegosystems.myjetbrains.com/youtrack/issue/icldev-2285
         */
        public function get_token($ts_id, $ts_accesskey)
        {
        }
        /**
         * @param int    $project_id
         * @param string $access_key
         * @param string $new_token
         *
         * @return bool|null
         * @link https://onthegosystems.myjetbrains.com/youtrack/issue/tsapi-887
         *
         */
        public function migrate_project($project_id, $access_key, $new_token)
        {
        }
        /**
         * @param int    $project_id
         * @param string $access_key
         *
         * @return bool
         * @link https://onthegosystems.myjetbrains.com/youtrack/issue/tsapi-887
         *
         */
        public function migrate_project_rollback($project_id, $access_key)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ICL20_Migrate
    {
        private $local_migration;
        private $progress;
        private $remote_migration;
        private $status;
        /** @var WPML_TP_Services  */
        private $tp_services;
        public function __construct(\WPML_TM_ICL20_Migration_Progress $progress, \WPML_TM_ICL20_Migration_Status $status, \WPML_TM_ICL20_Migrate_Remote $remote_migration, \WPML_TM_ICL20_Migrate_Local $local_migration, \WPML_TP_Services $tp_services)
        {
        }
        public function migrate_project_rollback()
        {
        }
        public function run()
        {
        }
        /**
         * @param $project
         *
         * @return string
         */
        private function get_token($project)
        {
        }
        /**
         * @param $project
         * @param $token
         *
         * @return bool
         */
        private function migrate_project($project, $token)
        {
        }
        /**
         * @param $project
         *
         * @return bool
         */
        private function acknowledge_icl($project)
        {
        }
        /**
         * @param $token
         *
         * @return bool
         */
        private function migrate_local_service($token)
        {
        }
        /**
         * @return bool
         */
        private function migrate_local_project()
        {
        }
        /**
         * @param string $table
         * @param string $step
         *
         * @return bool
         */
        private function migrate_local_jobs($table, $step)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ICL20_Token
    {
        private $end_point;
        private $http;
        /**
         * WPML_TM_ICL20 constructor.
         *
         * @param WP_Http $http
         * @param string  $end_point
         */
        public function __construct(\WP_Http $http, $end_point)
        {
        }
        /**
         * @param string $ts_accesskey
         * @param int    $ts_id
         *
         * @return string|null
         * @throws \WPML_TM_ICL20MigrationException
         *
         * Note: `ts_id` (aka `website_id`) = `website_id`
         *
         * @link https://onthegosystems.myjetbrains.com/youtrack/issue/icldev-2285
         */
        public function get_token($ts_id, $ts_accesskey)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ICL20_Acknowledge
    {
        private $end_point;
        private $http;
        /**
         * WPML_TM_ICL20 constructor.
         *
         * @param WP_Http $http
         * @param string  $end_point
         */
        public function __construct(\WP_Http $http, $end_point)
        {
        }
        /**
         * @param string $ts_accesskey
         * @param int    $ts_id
         *
         * @return bool
         * @throws \WPML_TM_ICL20MigrationException
         *
         * Note: `ts_id` (aka `website_id`) = `website_id`
         *
         * @link https://onthegosystems.myjetbrains.com/youtrack/issue/icldev-2322
         */
        public function acknowledge_icl($ts_id, $ts_accesskey)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ICL20_Migration_Container
    {
        private $acknowledge;
        private $project;
        private $token;
        public function __construct(\WPML_TM_ICL20_Token $token, \WPML_TM_ICL20_Project $project, \WPML_TM_ICL20_Acknowledge $ack)
        {
        }
        /**
         * @return WPML_TM_ICL20_Acknowledge
         */
        public function get_acknowledge()
        {
        }
        /**
         * @return WPML_TM_ICL20_Project
         */
        public function get_project()
        {
        }
        /**
         * @return WPML_TM_ICL20_Token
         */
        public function get_token()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ICL20_Project
    {
        private $end_point;
        private $http;
        /**
         * WPML_TM_ICL20 constructor.
         *
         * @param WP_Http $http
         * @param string  $end_point
         */
        public function __construct(\WP_Http $http, $end_point)
        {
        }
        /**
         * @param int    $project_id
         * @param string $access_key
         * @param string $new_token
         *
         * @return bool|null
         * @throws \WPML_TM_ICL20MigrationException
         * @link https://onthegosystems.myjetbrains.com/youtrack/issue/tsapi-887
         *
         */
        public function migrate($project_id, $access_key, $new_token)
        {
        }
        /**
         * @param int    $project_id
         * @param string $access_key
         *
         * @return bool
         * @throws WPML_TM_ICL20MigrationException
         */
        public function rollback_migration($project_id, $access_key)
        {
        }
    }
    class WPML_Translator_Role
    {
        const CAPABILITY = 'translate';
    }
    class WPML_Manage_Translations_Role
    {
        const CAPABILITY = 'manage_translations';
    }
    class WPML_TM_Jobs_Deadline_Estimate
    {
        const LATENCY_DAYS = 1;
        const WORDS_PER_DAY = 1200;
        /** @var WPML_TM_Translatable_Element_Provider */
        private $translatable_element_provider;
        /** @var WPML_TM_Jobs_Repository */
        private $jobs_repository;
        public function __construct(\WPML_TM_Translatable_Element_Provider $translatable_element_provider, \WPML_TM_Jobs_Repository $jobs_repository)
        {
        }
        /**
         * @param array $basket
         * @param array $translator_options
         *
         * @return string
         */
        public function get(array $basket, array $translator_options)
        {
        }
        /**
         * @param array $translator_options
         *
         * @return WPML_TM_Jobs_Collection
         */
        private function get_pending_jobs_for_translator(array $translator_options)
        {
        }
        /**
         * @param WPML_TM_Jobs_Collection $pending_jobs
         *
         * @return int[]
         */
        private function get_pending_words_per_langs(\WPML_TM_Jobs_Collection $pending_jobs)
        {
        }
        /**
         * @param array $basket
         * @param int[] $words_per_langs
         *
         * @return int[]
         */
        private function add_basket_words_per_langs(array $basket, array $words_per_langs)
        {
        }
    }
    class WPML_TM_Jobs_Deadline_Cron_Hooks_Factory implements \IWPML_Backend_Action_Loader, \IWPML_Frontend_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_TM_Jobs_Deadline_Estimate_AJAX_Action implements \IWPML_Action
    {
        /** @var WPML_TM_Jobs_Deadline_Estimate $deadline_estimate */
        private $deadline_estimate;
        /** @var array $translation_basket */
        private $translation_basket;
        /** @var array $post_data */
        private $post_data;
        public function __construct(\WPML_TM_Jobs_Deadline_Estimate $deadline_estimate, array $translation_basket, array $post_data)
        {
        }
        public function add_hooks()
        {
        }
        public function refresh()
        {
        }
        /**
         * The translator data for a remote service will be like "ts-7" with 7 the ID of the remote service
         * For a local translator, the translation data will be the ID
         *
         * @param string $translator_data
         *
         * @return array
         */
        private function parse_translator_data($translator_data)
        {
        }
    }
    class WPML_TM_Jobs_Deadline_Estimate_AJAX_Action_Factory extends \WPML_AJAX_Base_Factory
    {
        /** @return null|WPML_TM_Jobs_Deadline_Estimate_AJAX_Action */
        public function create()
        {
        }
    }
    class WPML_TM_Jobs_Deadline_Cron_Hooks implements \IWPML_Action
    {
        const CHECK_OVERDUE_JOBS_EVENT = 'wpml-tm-check-overdue-jobs-event';
        /** @var WPML_TM_Overdue_Jobs_Report_Factory $overdue_jobs_report_factory */
        private $overdue_jobs_report_factory;
        /** @var TranslationManagement $notification_settings */
        private $translation_management;
        public function __construct(\WPML_TM_Overdue_Jobs_Report_Factory $overdue_jobs_report_factory, \TranslationManagement $translation_management)
        {
        }
        public function add_hooks()
        {
        }
        public function schedule_event()
        {
        }
        /** @return int */
        private function get_init_priority()
        {
        }
        /** @return bool */
        private function is_notification_enabled()
        {
        }
        public function send_overdue_email_report()
        {
        }
    }
    class WPML_TM_Jobs_Deadline_Estimate_Factory
    {
        public function create()
        {
        }
    }
    class WPML_WP_Cron_Check
    {
        const TRANSIENT_NAME = 'wpml_cron_check';
        /** @var WPML_PHP_Functions $php_functions */
        private $php_functions;
        public function __construct(\WPML_PHP_Functions $php_functions)
        {
        }
        /** @return bool */
        public function verify()
        {
        }
        /** @return bool */
        public function is_doing_cron()
        {
        }
    }
    class WPML_TM_Array_Search
    {
        /**
         * @var array
         */
        private $where;
        /**
         * @var array
         */
        private $data;
        /**
         * @param array $data
         *
         * @return $this
         */
        public function set_data($data)
        {
        }
        /**
         * @param array $args
         *
         * @return $this
         */
        public function set_where($args)
        {
        }
        /**
         * @return array
         */
        public function get_results()
        {
        }
    }
    class WPML_All_Language_Pairs
    {
        public static function get(\SitePress $sitepress)
        {
        }
    }
    /**
     * Class WPML_Language_Pair_Records
     *
     * Language pairs are stored as user meta as an array of the form
     * array( $from_lang => array( $to_lang_1 => '1', $to_lang_2 => '1' )
     *
     */
    class WPML_Language_Pair_Records
    {
        private $meta_key;
        /** @var WPML_Language_Records $language_records */
        private $language_records;
        public function __construct(\wpdb $wpdb, \WPML_Language_Records $language_records)
        {
        }
        /**
         * @param int $user_id
         * @param array $language_pairs
         *
         * Language pairs are an array of the form
         * array( $from_lang => array( $to_lang_1, $to_lang_2 )
         */
        public function store($user_id, $language_pairs)
        {
        }
        /**
         * @param int $user_id
         * @return array
         *
         * Language pairs are returned in an array of the form
         * array( $from_lang => array( $to_lang_1, $to_lang_2 )
         */
        public function get($user_id)
        {
        }
        private function convert_to_storage_format($language_pairs)
        {
        }
        private function is_in_storage_format($language_pairs)
        {
        }
        private function convert_from_storage_format(array $language_pairs)
        {
        }
    }
}
namespace WPML\TM\User {
    class Hooks implements \IWPML_Backend_Action
    {
        public function add_hooks()
        {
        }
        public function cleanUserCacheAction()
        {
        }
        public function updatedUserMetaAction()
        {
        }
        public function filter_show_hidden_languages_options($show_hidden_languages_options)
        {
        }
        private function flushCache()
        {
        }
    }
}
namespace {
    abstract class WPML_Translation_Roles_Records
    {
        const USERS_WITH_CAPABILITY = 'LIKE';
        const USERS_WITHOUT_CAPABILITY = 'NOT LIKE';
        const MIN_SEARCH_LENGTH = 3;
        const CACHE_GROUP = __CLASS__;
        /** @var wpdb */
        protected $wpdb;
        /** @var WPML_WP_User_Query_Factory */
        private $user_query_factory;
        /** @var \WP_Roles */
        protected $wp_roles;
        /**
         * WPML_Translation_Roles_Records constructor.
         *
         * @param \wpdb                       $wpdb
         * @param \WPML_WP_User_Query_Factory $user_query_factory
         * @param \WP_Roles                   $wp_roles
         */
        public function __construct(\wpdb $wpdb, \WPML_WP_User_Query_Factory $user_query_factory, \WP_Roles $wp_roles)
        {
        }
        public function has_users_with_capability()
        {
        }
        /**
         * @return array
         */
        public function get_users_with_capability()
        {
        }
        /**
         * @return int
         */
        public function get_number_of_users_with_capability()
        {
        }
        /**
         * @param string $search
         * @param int    $limit
         *
         * @return array
         */
        public function search_for_users_without_capability($search = '', $limit = -1)
        {
        }
        /**
         * @param int $user_id
         *
         * @return bool
         */
        public function does_user_have_capability($user_id)
        {
        }
        /**
         * Delete records for all users
         */
        public function delete_all()
        {
        }
        /**
         * Delete the record for the user
         *
         * @param int $user_id
         */
        public function delete($user_id)
        {
        }
        /**
         * @param string $compare
         * @param string $search
         * @param int    $limit
         *
         * @return array
         */
        private function get_records($compare, $search = '', $limit = -1)
        {
        }
        /**
         * @param string $compare
         * @param string $search
         * @param int    $limit
         *
         * @return array
         */
        private function get_records_from_users_metas($compare, $search, $limit = -1)
        {
        }
        /**
         * @return string
         */
        protected abstract function get_capability();
        /**
         * @return array
         */
        protected abstract function get_required_wp_roles();
    }
    class WPML_Translation_Manager_Records extends \WPML_Translation_Roles_Records
    {
        /**
         * @return string
         */
        protected function get_capability()
        {
        }
        /**
         * @return array
         */
        protected function get_required_wp_roles()
        {
        }
        /**
         * Determine if the role can be used for a manager.
         *
         * @param \WP_Role $role The role definition.
         *
         * @return bool
         */
        protected function is_required_role(\WP_Role $role)
        {
        }
    }
    class WPML_TM_Only_I_Language_Pairs_Factory implements \IWPML_AJAX_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_TM_All_Admins_To_Translation_Managers implements \IWPML_Backend_Action, \IWPML_CLI_Action
    {
        const HAS_RUN_OPTION = 'WPML_Upgrade_All_Admins_To_Manage_Translations_Has_Run';
        public function add_hooks()
        {
        }
        /**
         * Upgrade all existing administrators to have Translation Manager capabilities.
         * Also syncs with ATE via action
         */
        public function upgrade_admin_caps()
        {
        }
        /**
         * Upgrade new administrator user to have Translation Manager capabilities.
         * Also syncs with ATE via action
         *
         * @param int $user_id
         */
        public function upgrade_new_admin_to_manager($user_id)
        {
        }
    }
    class WPML_TM_Only_I_language_Pairs implements \IWPML_Action
    {
        /** @var SitePress $sitepress */
        private $sitepress;
        /** @var WPML_Language_Pair_Records $language_pair_records */
        private $language_pair_records;
        public function __construct(\WPML_Language_Pair_Records $language_pair_records, \SitePress $sitepress)
        {
        }
        public function add_hooks()
        {
        }
        public function update_language_pairs()
        {
        }
    }
    /**
     * Class WPML_User_Jobs_Notification_Settings_Template
     */
    class WPML_User_Jobs_Notification_Settings_Template
    {
        const TEMPLATE_FILE = 'job-email-notification.twig';
        /**
         * @var WPML_Twig_Template
         */
        private $template_service;
        /**
         * WPML_User_Jobs_Notification_Settings_Template constructor.
         *
         * @param IWPML_Template_Service $template_service
         */
        public function __construct(\IWPML_Template_Service $template_service)
        {
        }
        /**
         * @param string $notification_input
         *
         * @return string
         */
        public function get_setting_section($notification_input)
        {
        }
        /**
         * @param string $notification_input
         *
         * @return array
         */
        private function get_model($notification_input)
        {
        }
    }
    class WPML_Translator_Records extends \WPML_Translation_Roles_Records
    {
        /**
         * @return string
         */
        protected function get_capability()
        {
        }
        /**
         * @return array
         */
        protected function get_required_wp_roles()
        {
        }
        /**
         * @param string $source_language
         * @param array  $target_languages
         * @param bool   $require_all_languages - Translator must have all target languages if true otherwise they need at least one.
         *
         * @return array
         */
        public function get_users_with_languages($source_language, $target_languages, $require_all_languages = \true)
        {
        }
    }
    class WPML_Translator_Admin_Records extends \WPML_Translator_Records
    {
        protected function get_required_wp_roles()
        {
        }
    }
    class WPML_User_Jobs_Notification_Settings_Render
    {
        private $section_template;
        /**
         * WPML_User_Jobs_Notification_Settings_Render constructor.
         *
         * @param WPML_User_Jobs_Notification_Settings_Template|null $notification_settings_template
         */
        public function __construct(\WPML_User_Jobs_Notification_Settings_Template $notification_settings_template)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param int $user_id
         */
        public function render_options($user_id)
        {
        }
        /**
         * @return null|WPML_User_Jobs_Notification_Settings_Template
         */
        private function get_notification_template()
        {
        }
    }
    /**
     * Class WPML_Jobs_Notification_Settings
     */
    class WPML_User_Jobs_Notification_Settings
    {
        const BLOCK_NEW_NOTIFICATION_FIELD = 'wpml_block_new_email_notifications';
        public function add_hooks()
        {
        }
        /**
         * @param int $user_id
         */
        public function save_new_job_notifications_setting($user_id)
        {
        }
        public static function is_new_job_notification_enabled($user_id)
        {
        }
    }
    class WPML_TM_Troubleshooting_Reset_Pro_Trans_Config_UI_Factory
    {
        /**
         * Sets template base directory.
         */
        private function get_template_base_dir()
        {
        }
        /**
         * Creates WPML_TM_Troubleshooting_Reset_Pro_Trans_Config_UI instance
         *
         * @return WPML_TM_Troubleshooting_Reset_Pro_Trans_Config_UI
         */
        public function create()
        {
        }
    }
    class WPML_TM_Troubleshooting_Reset_Pro_Trans_Config_UI
    {
        const TROUBLESHOOTING_RESET_PRO_TRANS_TEMPLATE = 'reset-pro-trans-config.twig';
        /**
         * Template service.
         *
         * @var IWPML_Template_Service
         */
        private $template_service;
        /**
         * WPML_TM_Troubleshooting_Reset_Pro_Trans_Config_UI constructor.
         *
         * @param IWPML_Template_Service $template_service WPML_Twig_Template twig service.
         */
        public function __construct(\IWPML_Template_Service $template_service)
        {
        }
        /**
         * Returns of template service render result.
         *
         * @return string
         */
        public function show()
        {
        }
        /**
         * Returns model array for Troubleshooting Reset Pro Trans.
         *
         * @return array
         */
        private function get_model()
        {
        }
    }
    class WPML_TM_Troubleshooting_Reset_Pro_Trans_Config extends \WPML_TM_AJAX_Factory_Obsolete
    {
        const SCRIPT_HANDLE = 'wpml_reset_pro_trans_config';
        /**
         * Wpdb Object to perform DB queries.
         *
         * @var wpdb $wpdb
         */
        private $wpdb;
        /**
         * SitePress object - superclass for all WPML classes using the global wpdb object.
         *
         * @var SitePress
         */
        private $sitepress;
        /**
         * Translation Proxy service.
         *
         * @var WPML_Translation_Proxy_API $translation_proxy
         */
        private $translation_proxy;
        /**
         * WPML_TM_Troubleshooting_Clear_TS constructor.
         *
         * @param SitePress                  $sitepress SitePress object.
         * @param WPML_Translation_Proxy_API $translation_proxy Translation Proxy service.
         * @param WPML_WP_API                $wpml_wp_api WPML WordPress API wrapper.
         * @param wpdb                       $wpdb Wpdb Object to perform DB queries.
         */
        public function __construct(&$sitepress, &$translation_proxy, &$wpml_wp_api, &$wpdb)
        {
        }
        /**
         * Loading actions.
         */
        public function load_action()
        {
        }
        /**
         * Adding WP hooks.
         */
        private function add_hooks()
        {
        }
        /**
         * Registering WP scripts.
         */
        public function register_resources()
        {
        }
        /**
         * Enqueue WordPress resources.
         *
         * @param string $hook_suffix Hook suffix.
         */
        public function enqueue_resources($hook_suffix)
        {
        }
        /**
         * Rendering user interface.
         */
        public function render_ui()
        {
        }
        /**
         * Resetting professional translation configuration action.
         *
         * @return array|null
         */
        public function reset_pro_translation_configuration_action()
        {
        }
        /**
         * Implementation of core class functionality - resetting professional translation configuration.
         *
         * @return string
         */
        public function reset_pro_translation_configuration()
        {
        }
    }
}
namespace WPML\TM\Troubleshooting\SynchronizeSourceIdOfATEJobs {
    class TriggerSynchronization implements \IWPML_Backend_Action, \IWPML_DIC_Action
    {
        const ACTION_ID = 'wpml-tm-ate-source-id-migration';
        /** @var CommandsStatus */
        private $commandStatus;
        /**
         * @param CommandsStatus $commandStatus
         */
        public function __construct(\WPML\Upgrade\CommandsStatus $commandStatus)
        {
        }
        public function add_hooks()
        {
        }
        public function displayButton()
        {
        }
        public function enqueueScripts($hook)
        {
        }
        public function clearExecutedStateToForceUpgrade()
        {
        }
    }
}
namespace {
    class WPML_TM_Promotions
    {
        /**
         * @var \WPML_WP_API
         */
        private $wpml_wp_api;
        /**
         * WPML_TM_Promotions constructor.
         *
         * @param \WPML_WP_API $wpml_wp_api
         */
        public function __construct($wpml_wp_api)
        {
        }
        public function promote_wcml_message()
        {
        }
    }
    class WPML_Translation_Jobs_Migration
    {
        const MIGRATION_FIX_LOG_KEY = 'wpml_fixing_migration_log';
        private $jobs_repository;
        private $cms_id_builder;
        private $wpdb;
        private $jobs_api;
        public function __construct(\WPML_Translation_Jobs_Migration_Repository $jobs_repository, \WPML_TM_CMS_ID $cms_id_builder, \wpdb $wpdb, \WPML_TP_Jobs_API $jobs_api)
        {
        }
        /**
         * @param WPML_TM_Post_Job_Entity[] $jobs
         * @param bool                      $recover_status
         *
         * @throws WPML_TP_API_Exception
         */
        public function migrate_jobs(array $jobs, $recover_status = \false)
        {
        }
        /**
         * @param array $mapped_jobs
         *
         * @throws WPML_TP_API_Exception
         * @return array
         */
        private function get_tp_jobs(array $mapped_jobs)
        {
        }
        /**
         * @param WPML_TM_Post_Job_Entity $job
         * @param int                        $tp_id
         * @param int                        $revision_id
         */
        private function recovery_mode(\WPML_TM_Post_Job_Entity $job, $tp_id, $revision_id)
        {
        }
        /**
         * @param WPML_TM_Post_Job_Entity $job
         * @param int                        $tp_id
         * @param int                        $revision_id
         */
        private function first_migration_mode(\WPML_TM_Post_Job_Entity $job, $tp_id, $revision_id)
        {
        }
        /**
         * @param array $tp_jobs
         *
         * @return array
         */
        private function get_latest_jobs_grouped_by_cms_id($tp_jobs)
        {
        }
        /**
         * @param WPML_TM_Post_Job_Entity $job
         * @param int $new_tp_id
         *
         * @return bool
         */
        private function get_new_status(\WPML_TM_Post_Job_Entity $job, $new_tp_id)
        {
        }
        /**
         * @param WPML_TM_Post_Job_Entity $job
         *
         * @return bool
         * @throws Exception
         */
        private function has_been_completed_after_release(\WPML_TM_Post_Job_Entity $job)
        {
        }
        /**
         * @param int $cms_id
         * @param array $tp_jobs
         *
         * @return array
         */
        private function get_tp_id_revision_id($cms_id, $tp_jobs)
        {
        }
        /**
         * @param int $tp_id
         * @param int $revision_id
         * @param int|false $status
         * @param int $job_id
         */
        private function fix_job_fields($tp_id, $revision_id, $status, $job_id)
        {
        }
        /**
         * @param WPML_TM_Post_Job_Entity[] $jobs
         *
         * @return array
         */
        private function map_cms_id_job_id($jobs)
        {
        }
        /**
         * @return DateTime
         * @throws Exception
         */
        private function get_4_2_0_release_date()
        {
        }
        /**
         * @param int $rid
         * @param int $old_tp_id
         * @param int $new_tp_id
         * @param int $old_status
         * @param int $new_status
         */
        private function log($rid, $old_tp_id, $new_tp_id, $old_status, $new_status)
        {
        }
    }
    class WPML_TM_Jobs_Migration_State
    {
        const MIGRATION_DONE_KEY = 'wpml-tm-translation-jobs-migration';
        const FIXING_MIGRATION_STATE_KEY = 'wpml-tm-all-translation-jobs-migration';
        const MIGRATION_SKIPPED = 'wpml-tm-translation-jobs-migration-skipped';
        /**
         * The fixing migration has already been run but it contained errors
         */
        const FIRST_MIGRATION_FIX_HAS_RUN = 1;
        /**
         * We've already cleaned logs of the first fixing migration and are ready to run another this time flawless version
         */
        const READY_TO_RUN_SECOND_MIGRATION_FIX = 2;
        /**
         * The final flawless fixing migration has been run
         */
        const SECOND_MIGRATION_FIX_HAS_RUN = 3;
        /**
         * Checks if the original migration has been finished
         *
         * @return bool
         */
        public function is_migrated()
        {
        }
        /**
         * Checks if the fixing migration ( migration which fixes the flaws of the original migration ) has been run
         *
         * @return bool
         */
        public function is_fixing_migration_done()
        {
        }
        public function mark_migration_as_done()
        {
        }
        public function mark_fixing_migration_as_done()
        {
        }
        /**
         * @param bool $flag
         */
        public function skip_migration($flag = \true)
        {
        }
        /**
         * @return bool
         */
        public function is_skipped()
        {
        }
    }
    class WPML_TM_Troubleshooting_Fix_Translation_Jobs_TP_ID
    {
        const AJAX_ACTION = 'wpml-fix-translation-jobs-tp-id';
        private $jobs_migration;
        private $jobs_repository;
        public function __construct(\WPML_Translation_Jobs_Migration $jobs_migration, \WPML_TM_Jobs_Repository $jobs_repository)
        {
        }
        public function add_hooks()
        {
        }
        public function fix_tp_id_ajax()
        {
        }
        public function enqueue_scripts($hook)
        {
        }
        public function render_troubleshooting_section()
        {
        }
    }
    class WPML_Translation_Jobs_Migration_Repository
    {
        private $jobs_repository;
        private $all_jobs = \false;
        public function __construct(\WPML_TM_Jobs_Repository $jobs_repository, $all_jobs = \false)
        {
        }
        public function get()
        {
        }
        public function get_count()
        {
        }
        private function get_params()
        {
        }
    }
    class WPML_Translation_Jobs_Migration_Hooks
    {
        private $notice;
        private $ajax_handler;
        /** @var WPML_Translation_Jobs_Migration_Repository */
        private $jobs_migration_repository;
        /** @var WPML_Upgrade_Schema $schema */
        private $schema;
        /** @var WPML_TM_Jobs_Migration_State */
        private $migration_state;
        public function __construct(\WPML_Translation_Jobs_Migration_Notice $notice, $ajax_handler, \WPML_Translation_Jobs_Migration_Repository $jobs_migration_repository, \WPML_Upgrade_Schema $schema, \WPML_TM_Jobs_Migration_State $migration_state)
        {
        }
        public function add_hooks()
        {
        }
        public function add_hooks_on_init()
        {
        }
        /**
         * @see
         * `WPML_TM_Add_TP_Revision_And_TS_Status_Columns_To_Core_Status`
         * `WPML_TM_Add_TP_Revision_And_TS_Status_Columns_To_Translation_Status`
         * `WPML_TM_Add_TP_ID_Column_To_Translation_Status`
         *
         * @return bool
         */
        private function new_columns_are_not_added_yet()
        {
        }
        public function enqueue_scripts()
        {
        }
        /**
         * @return bool
         */
        private function needs_migration()
        {
        }
        /**
         * @return bool
         */
        private function skip_migration_if_service_is_not_active()
        {
        }
        /**
         * @return bool
         */
        public function lock_tm_ui()
        {
        }
    }
    class WPML_Translation_Jobs_Migration_Ajax
    {
        const ACTION = 'wpml_translation_jobs_migration';
        const JOBS_MIGRATED_PER_REQUEST = 100;
        /** @var WPML_Translation_Jobs_Migration  */
        private $jobs_migration;
        /** @var WPML_Translation_Jobs_Migration_Repository  */
        private $jobs_repository;
        /** @var WPML_TM_Jobs_Migration_State */
        private $migration_state;
        public function __construct(\WPML_Translation_Jobs_Migration $jobs_migration, \WPML_Translation_Jobs_Migration_Repository $jobs_repository, \WPML_TM_Jobs_Migration_State $migration_state)
        {
        }
        public function run_migration()
        {
        }
        /**
         * @return bool
         */
        private function is_valid_request()
        {
        }
    }
    abstract class WPML_Translation_Jobs_Migration_Notice
    {
        const NOTICE_GROUP_ID = 'translation-jobs';
        const TEMPLATE = 'translation-jobs-migration.twig';
        /**
         * The instance of \WPML_Notices.
         *
         * @var \WPML_Notices
         */
        private $admin_notices;
        /**
         * The instance of \IWPML_Template_Service.
         *
         * @var \IWPML_Template_Service
         */
        private $template_service;
        /**
         * WPML_Translation_Jobs_Migration_Notice constructor.
         *
         * @param \WPML_Notices           $admin_notices    An instance of \WPML_Notices.
         * @param \IWPML_Template_Service $template_service A class implementing \IWPML_Template_Service.
         */
        public function __construct(\WPML_Notices $admin_notices, \IWPML_Template_Service $template_service)
        {
        }
        /**
         * It adds the notice to be shown when conditions meet.
         */
        public function add_notice()
        {
        }
        /**
         * It removes the notice.
         */
        public function remove_notice()
        {
        }
        /**
         * It checks is the notice exists.
         *
         * @return bool
         */
        public function exists()
        {
        }
        /**
         * It gets the notice content.
         *
         * @return string
         */
        private function get_notice_content()
        {
        }
        /**
         * It gets the definition of the notice's content.
         *
         * @return array
         */
        protected abstract function get_model();
        /**
         * It gets the ID of the notice.
         *
         * @return string
         */
        protected abstract function get_notice_id();
    }
    class WPML_TM_Translation_Jobs_Fix_Summary_Notice extends \WPML_Translation_Jobs_Migration_Notice
    {
        protected function get_model()
        {
        }
        protected function get_notice_id()
        {
        }
    }
    class WPML_Translation_Jobs_Missing_TP_ID_Migration_Notice extends \WPML_Translation_Jobs_Migration_Notice
    {
        /**
         * It gets the definition of the notice's content.
         *
         * @return array
         */
        protected function get_model()
        {
        }
        /**
         * It gets the ID of the notice.
         *
         * @return string
         */
        protected function get_notice_id()
        {
        }
    }
    class WPML_All_Translation_Jobs_Migration_Notice extends \WPML_Translation_Jobs_Migration_Notice
    {
        /**
         * It gets the definition of the notice's content.
         *
         * @return array
         */
        protected function get_model()
        {
        }
        /**
         * It gets the ID of the notice.
         *
         * @return string
         */
        protected function get_notice_id()
        {
        }
    }
    class WPML_Translation_Jobs_Migration_Hooks_Factory implements \IWPML_Backend_Action_Loader, \IWPML_AJAX_Action_Loader
    {
        /**
         * It creates an instance of WPML_Translation_Jobs_Migration_Notice.
         *
         * @return null|WPML_Translation_Jobs_Migration_Hooks|WPML_TM_Restore_Skipped_Migration
         */
        public function create()
        {
        }
        /**
         * Check if location is allowed to add migration hooks.
         */
        private function should_add_migration_hooks()
        {
        }
        /**
         * Get request uri.
         *
         * @return string
         */
        private function get_request_uri()
        {
        }
    }
    class WPML_Translation_Jobs_Fixing_Migration_Ajax
    {
        const ACTION = 'wpml_translation_jobs_migration';
        const JOBS_MIGRATED_PER_REQUEST = 100;
        const PAGINATION_OPTION = 'wpml_translation_jobs_migration_processed';
        /** @var WPML_Translation_Jobs_Migration  */
        private $jobs_migration;
        /** @var WPML_Translation_Jobs_Migration_Repository  */
        private $jobs_repository;
        /** @var WPML_TM_Jobs_Migration_State */
        private $migration_state;
        public function __construct(\WPML_Translation_Jobs_Migration $jobs_migration, \WPML_Translation_Jobs_Migration_Repository $jobs_repository, \WPML_TM_Jobs_Migration_State $migration_state)
        {
        }
        public function run_migration()
        {
        }
        /**
         * @return bool
         */
        private function is_valid_request()
        {
        }
        /**
         * @return int
         */
        private function get_already_processed()
        {
        }
    }
    class WPML_TM_Translation_Jobs_Fix_Summary_Factory implements \IWPML_Backend_Action_Loader
    {
        /**
         * @return WPML_TM_Translation_Jobs_Fix_Summary
         */
        public function create()
        {
        }
    }
    class WPML_TM_Translation_Jobs_Fix_Summary
    {
        const INVALID_JOBS_SYNCED_KEY = 'wpml_tm_migration_invalid_jobs_already_synced';
        /** @var WPML_TM_Translation_Jobs_Fix_Summary_Notice  */
        private $notice;
        /** @var WPML_TM_Jobs_Migration_State */
        private $migration_state;
        public function __construct(\WPML_TM_Translation_Jobs_Fix_Summary_Notice $notice, \WPML_TM_Jobs_Migration_State $migration_state)
        {
        }
        public function add_hooks()
        {
        }
        public function display_summary()
        {
        }
        private function should_display_summary_notice()
        {
        }
        public function mark_invalid_jobs_as_synced()
        {
        }
    }
    class WPML_TM_Troubleshooting_Fix_Translation_Jobs_TP_ID_Factory implements \IWPML_Backend_Action_Loader
    {
        public function create()
        {
        }
    }
    /**
     * The class adds the hook which is triggered in the moment of Translation Service authorization.
     * It checks if the migration has been skipped due to lack of activated service and if so, it turns on the migration.
     */
    class WPML_TM_Restore_Skipped_Migration implements \IWPML_Action
    {
        /** @var WPML_TM_Jobs_Migration_State */
        private $migration_state;
        /**
         * @param WPML_TM_Jobs_Migration_State $migration_state
         */
        public function __construct(\WPML_TM_Jobs_Migration_State $migration_state)
        {
        }
        public function add_hooks()
        {
        }
        public function restore()
        {
        }
    }
    class WPML_TM_Post_Edit_Notices_Factory
    {
        const TEMPLATES_PATH = '/templates/notices/post-edit/';
        public function create()
        {
        }
    }
    class WPML_TM_Post_Edit_Notices
    {
        const TEMPLATE_TRANSLATION_IN_PROGRESS = 'translation-in-progress.twig';
        const TEMPLATE_EDIT_ORIGINAL_TRANSLATION_IN_PROGRESS = 'edit-original-translation-in-progress.twig';
        const TEMPLATE_USE_PREFERABLY_TM_DASHBOARD = 'use-preferably-tm-dashboard.twig';
        const TEMPLATE_USE_PREFERABLY_TE = 'use-preferably-translation-editor.twig';
        const DO_NOT_SHOW_AGAIN_EDIT_ORIGINAL_TRANSLATION_IN_PROGRESS_ACTION = 'wpml_dismiss_post_edit_original_te_notice';
        const DO_NOT_SHOW_AGAIN_USE_PREFERABLY_TE_ACTION = 'wpml_dismiss_post_edit_te_notice';
        /** @var WPML_Post_Status $post_status */
        private $post_status;
        /** @var SitePress $sitepress */
        private $sitepress;
        /** @var IWPML_Template_Service $template_render */
        private $template_render;
        /** @var WPML_Super_Globals_Validation $super_globals */
        private $super_globals;
        /** @var WPML_TM_Translation_Status_Display $status_display */
        private $status_display;
        /** @var WPML_Translation_Element_Factory $element_factory */
        private $element_factory;
        /** @var WPML_TM_ATE $tm_ate */
        private $tm_ate;
        /**
         * @param WPML_Post_Status                   $post_status
         * @param SitePress                          $sitepress
         * @param IWPML_Template_Service             $template_render
         * @param WPML_Super_Globals_Validation      $super_globals
         * @param WPML_TM_Translation_Status_Display $status_display
         * @param WPML_Translation_Element_Factory   $element_factory
         */
        public function __construct(\WPML_Post_Status $post_status, \SitePress $sitepress, \IWPML_Template_Service $template_render, \WPML_Super_Globals_Validation $super_globals, \WPML_TM_Translation_Status_Display $status_display, \WPML_Translation_Element_Factory $element_factory, \WPML_TM_ATE $tm_ate)
        {
        }
        public function add_hooks()
        {
        }
        public function enqueue_assets()
        {
        }
        public function display_notices()
        {
        }
        public function do_not_display_it_again_to_user()
        {
        }
        public function do_not_display_it_again()
        {
        }
        /**
         * @return bool
         */
        private function is_valid_request($action)
        {
        }
        /**
         * @return bool
         */
        private function should_display_it_to_user($action)
        {
        }
        /**
         * @return bool
         */
        private function should_display_it($action)
        {
        }
        /**
         * @param WPML_Translation_Element $post_element
         *
         * @return bool
         */
        private function is_waiting_for_a_translations($post_element)
        {
        }
        /**
         * @param int|null $translation_status
         *
         * @return bool
         */
        private function is_waiting_for_a_translation($translation_status)
        {
        }
        /**
         * @param WPML_Post_Element $post_element
         *
         * @return string
         */
        private function get_translation_editor_link(\WPML_Post_Element $post_element)
        {
        }
    }
    class WPML_TM_Disable_Notices_In_Wizard_Factory implements \IWPML_Backend_Action_Loader, \IWPML_Deferred_Action_Loader
    {
        const AFTER_INSTALLER_READY_ACTION = 'otgs_installer_initialized';
        /**
         * Creates the instance.
         *
         * @return \IWPML_Action|\IWPML_Action[]|\WPML_TM_Disable_Notices_In_Wizard|null
         */
        public function create()
        {
        }
        /**
         * It returns the action hook to use to defer the loading of the class.
         *
         * @return string
         */
        public function get_load_action()
        {
        }
    }
}
namespace WPML\TM\Notices {
    class AteLockNotice implements \IWPML_Backend_Action, \IWPML_DIC_Action
    {
        /**
         * @var AteLocked
         */
        private $templateRenderer;
        public function __construct(\WPML\TM\Templates\Notices\AteLocked $templateRenderer)
        {
        }
        public function add_hooks()
        {
        }
        public function enqueueScripts()
        {
        }
        public function ateLockNotice()
        {
        }
        private function shouldRender()
        {
        }
        private function renderNotice()
        {
        }
        private function renderAdminNotice()
        {
        }
        private function renderUserNotice()
        {
        }
        private function shouldDisplayOnCurrentPage()
        {
        }
        /**
         * @param array $screens
         *
         * @return bool
         */
        private function shouldDisplayOnScreen(array $screens)
        {
        }
        /**
         * @param array $pages
         *
         * @return bool
         */
        private function shouldDisplayOnPage(array $pages)
        {
        }
        /**
         * @return array|string[]
         */
        private function getPages()
        {
        }
    }
}
namespace {
    class WPML_TM_Disable_Notices_In_Wizard
    {
        /** @var WPML_WP_API $wp_api */
        private $wp_api;
        /** @var WPML_Translation_Management $wpml_translation_management */
        private $wpml_translation_management;
        public function __construct(\WPML_WP_API $wp_api, \WPML_Translation_Management $wpml_translation_management)
        {
        }
        public function add_hooks()
        {
        }
        public function disable_notices()
        {
        }
    }
    class WPML_TM_TS_Instructions_Notice
    {
        const NOTICE_ID = 'translation-service-instructions';
        const NOTICE_GROUP_ID = 'translation-service-instructions';
        const TEMPLATE = 'translation-service-instructions.twig';
        /** @var WPML_Notices */
        private $admin_notices;
        /** @var IWPML_Template_Service */
        private $template_service;
        public function __construct(\WPML_Notices $admin_notices, \IWPML_Template_Service $template_service)
        {
        }
        /**
         * @param stdClass $service
         */
        public function add_notice($service)
        {
        }
        public function remove_notice()
        {
        }
        /**
         * @return bool
         */
        public function exists()
        {
        }
        /**
         * @param stdClass $service
         *
         * @return string
         */
        private function get_notice_content($service)
        {
        }
        /**
         * @param stdClass $service
         *
         * @return array
         */
        private function get_model($service)
        {
        }
    }
    class WPML_TM_TS_Instructions_Hooks implements \IWPML_Action
    {
        /** @var WPML_TM_TS_Instructions_Notice */
        private $notice;
        /**
         * WPML_TM_TS_Instructions_Hooks constructor.
         *
         * @param WPML_TM_TS_Instructions_Notice $notice
         */
        public function __construct(\WPML_TM_TS_Instructions_Notice $notice)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param stdClass $service
         * @param stdClass $project
         * @param array    $icl_translation_projects
         */
        public function display_message($service, $project, array $icl_translation_projects)
        {
        }
        public function add_hooks_on_init()
        {
        }
        public function enqueue_scripts()
        {
        }
        public function dismiss()
        {
        }
        /**
         * @return bool
         */
        private function has_completed_remote_jobs()
        {
        }
    }
    class WPML_TM_TS_Instructions_Hooks_Factory implements \IWPML_Backend_Action_Loader, \IWPML_AJAX_Action_Loader
    {
        /**
         * @return WPML_TM_TS_Instructions_Hooks
         */
        public function create()
        {
        }
        /**
         * @return WPML_TM_TS_Instructions_Notice
         */
        private function create_notice()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_Shortcodes_Catcher implements \IWPML_Action
    {
        public function add_hooks()
        {
        }
        public function register_shortcode($return, $tag)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_Shortcodes_Catcher_Factory implements \IWPML_Frontend_Action_Loader, \IWPML_Backend_Action_Loader, \IWPML_AJAX_Action_Loader
    {
        /**
         * @return IWPML_Action|IWPML_Action[]|null
         */
        public function create()
        {
        }
    }
    class WPML_TM_Troubleshooting_Clear_TS_UI extends \WPML_Templates_Factory
    {
        public function get_model()
        {
        }
        public function get_template()
        {
        }
        protected function init_template_base_dir()
        {
        }
    }
    abstract class WPML_TM_Resources_Factory
    {
        protected $ajax_actions;
        /**
         * @var WPML_WP_API
         */
        protected $wpml_wp_api;
        /**
         * @param WPML_WP_API $wpml_wp_api
         */
        public function __construct(&$wpml_wp_api)
        {
        }
        public abstract function enqueue_resources($hook_suffix);
        public abstract function register_resources($hook_suffix);
    }
}
namespace WPML\TM\Container {
    class Config
    {
        public static function getDelegated()
        {
        }
        public static function getSharedClasses()
        {
        }
    }
}
namespace {
    class WPML_TM_Requirements
    {
        const INVALID_PHP_EXTENSIONS_OPTION = 'wpml-invalid-php-extensions';
        private $missing;
        private $missing_one;
        public function __construct()
        {
        }
        private function check_required_plugins()
        {
        }
        public function plugins_loaded_action()
        {
        }
        public function missing_php_extensions()
        {
        }
        private function build_invalid_php_extensions_message_args(array $extensions)
        {
        }
        private function get_current_php_extensions()
        {
        }
        /**
         * Missing plugins warning.
         */
        public function missing_plugins_warning()
        {
        }
    }
    class WPML_TM_Translated_Field
    {
        private $original;
        private $translation;
        private $finished_state;
        /**
         * WPML_TM_Translated_Field constructor.
         *
         * @param string $original
         * @param string $translation
         * @param bool   $finished_state
         */
        public function __construct($original, $translation, $finished_state)
        {
        }
        public function get_translation()
        {
        }
        public function is_finished($original)
        {
        }
    }
}
namespace WPML\TM\AdminBar {
    class Hooks implements \IWPML_Frontend_Action, \IWPML_DIC_Action
    {
        /** @var \WPML_Post_Translation */
        private $postTranslations;
        public function __construct(\WPML_Post_Translation $postTranslations)
        {
        }
        public function add_hooks()
        {
        }
        public function addTranslateMenuItem(\WP_Admin_Bar $wpAdminMenu)
        {
        }
        public function enqueueScripts()
        {
        }
    }
}
namespace {
    class WPML_TM_Ajax_Factory extends \WPML_Ajax_Factory
    {
        private $wpdb;
        private $sitepress;
        private $post_data;
        private $wp_api;
        public function __construct($wpdb, $sitepress, $post_data)
        {
        }
        public function get_class_names()
        {
        }
        public function create($class_name)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_Support_Info
    {
        public function is_simplexml_extension_loaded()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_Support_Info_Filter
    {
        /** @var WPML_TM_Support_Info */
        private $support_info;
        function __construct(\WPML_TM_Support_Info $support_info)
        {
        }
        /**
         * @param array $blocks
         *
         * @return array
         */
        public function filter_blocks(array $blocks)
        {
        }
    }
    class WPML_TM_API
    {
        /** @var TranslationManagement */
        private $TranslationManagement;
        /** @var WPML_TM_Blog_Translators $blog_translators */
        private $blog_translators;
        /**
         * @var mised[]
         */
        private $translation_statuses;
        /**
         * WPML_TM_API constructor.
         *
         * @param WPML_TM_Blog_Translators $blog_translators
         * @param TranslationManagement    $TranslationManagement
         */
        public function __construct(&$blog_translators, &$TranslationManagement)
        {
        }
        public function get_translation_status_label($value)
        {
        }
        public function init_hooks()
        {
        }
        /**
         * @param bool        $default
         * @param int|WP_User $user
         * @param array       $args
         *
         * @return bool
         */
        public function is_translator_filter($default, $user, $args)
        {
        }
        public function edit_translator_action($user, $language_pairs)
        {
        }
        /**
         * @param int   $user_id
         * @param array $language_pairs
         */
        private function edit_translator($user_id, $language_pairs)
        {
        }
        public function translator_languages_pairs_filter($default, $user)
        {
        }
        /**
         * @param $user
         *
         * @return int
         */
        private function get_user_id($user)
        {
        }
    }
    abstract class WPML_TM_XLIFF_Phase
    {
        public function get()
        {
        }
        protected abstract function get_data();
        protected abstract function get_phase_name();
        protected abstract function get_process_name();
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_XLIFF
    {
        /** @var DOMElement */
        private $body;
        /** @var DOMDocument */
        private $dom;
        /** @var DOMDocumentType */
        private $dtd;
        /** @var DOMElement */
        private $file;
        /** @var DOMElement */
        private $file_header;
        /** @var DOMElement */
        private $file_reference;
        /** @var DOMElement */
        private $phase_group;
        /** @var DOMElement */
        private $root;
        /** @var array */
        private $trans_units;
        /** @var string */
        private $xliff_version;
        /**
         * WPML_TM_XLIFF constructor.
         *
         * @param string $xliff_version
         * @param string $xml_version
         * @param string $xml_encoding
         */
        public function __construct($xliff_version = '1.2', $xml_version = '1.0', $xml_encoding = 'utf-8')
        {
        }
        /**
         * @param array $attributes
         *
         * @return $this
         */
        public function setFileAttributes($attributes)
        {
        }
        /**
         * @param array $args
         *
         * @return $this
         */
        public function setPhaseGroup(array $args)
        {
        }
        /**
         * @param array $references
         *
         * @return $this
         */
        public function setReferences(array $references)
        {
        }
        // phpcs:disable WordPress.NamingConventions.ValidFunctionName.MethodNameInvalid
        /**
         * Set translation units for xliff.
         *
         * @param array $trans_units Translation units.
         *
         * @return $this
         */
        public function setTranslationUnits($trans_units)
        {
        }
        /**
         * @param string     $type
         * @param array      $trans_unit
         * @param DOMElement $trans_unit_element
         */
        private function appendData($type, $trans_unit, $trans_unit_element)
        {
        }
        /**
         * Validate content.
         *
         * @param string $datatype Type of content data.
         * @param string $content Content.
         *
         * @return string
         */
        private function validate($datatype, $content)
        {
        }
        public function toString()
        {
        }
        private function compose()
        {
        }
        private function setRoot($version)
        {
        }
    }
    /**
     * Class WPML_TM_Validate_HTML
     */
    class WPML_TM_Validate_HTML
    {
        /** @var string Validated html */
        private $html = '';
        /** @var array Tags currently open */
        private $tags = array();
        /** @var int Number of errors */
        private $error_count = 0;
        /**
         * Get validated html.
         *
         * @return string
         */
        public function get_html()
        {
        }
        /**
         * Validate html.
         *
         * @param string $html HTML to process.
         *
         * @return int Number of errors.
         */
        public function validate($html)
        {
        }
        /**
         * Validate first tag in html flow and return processed html and rest.
         * In processed part broken html is replaced by wpml comment.
         *
         * @param string $html HTML to process.
         *
         * @return array|null
         */
        private function validate_next($html)
        {
        }
        /**
         * Convert WP bugs into wpml commented bugs.
         *
         * @param string $html HTML to process.
         *
         * @return false|string
         */
        private function hide_wp_bugs($html)
        {
        }
        /**
         * Callback to convert WP bugs into wpml commented bugs.
         *
         * @param array $matches
         *
         * @return string
         */
        public function hide_wp_bug_callback($matches)
        {
        }
        /**
         * Convert wpml commented bugs to WP bugs.
         *
         * @param $html
         *
         * @return false|string
         */
        private function restore_wp_bugs($html)
        {
        }
        /**
         * Callback to convert wpml commented bugs to WP bugs.
         *
         * @param array $matches
         *
         * @return mixed
         */
        public function restore_bug_callback($matches)
        {
        }
        /**
         * Convert HTML comments into wpml comments.
         *
         * @param string $html HTML to process.
         *
         * @return false|string
         */
        private function hide_comments($html)
        {
        }
        /**
         * Callback to convert HTML comment to wpml comment.
         *
         * @param array $matches
         *
         * @return string
         */
        public function hide_comment_callback($matches)
        {
        }
        /**
         * Callback to convert HTML declaration to wpml declaration.
         *
         * @param array $matches
         *
         * @return string
         */
        public function hide_declaration_callback($matches)
        {
        }
        /**
         * Convert wpml comments to HTML comments.
         *
         * @param string $html
         *
         * @return string
         */
        private function restore_comments($html)
        {
        }
        /**
         * Callback to convert wpml base64 encoded content.
         *
         * @param array $matches
         *
         * @return string
         */
        public function restore_encoded_content_callback($matches)
        {
        }
        /**
         * Convert self-closing tags to wpml self-closing tags.
         *
         * @param string $html HTML to process.
         *
         * @return false|string
         */
        private function hide_self_closing_tags($html)
        {
        }
        /**
         * Callback to convert self-closing tags to wpml self-closing tags.
         *
         * @param $matches
         *
         * @return string
         */
        public function hide_sct_callback($matches)
        {
        }
        /**
         * Convert wpml self-closing tags to HTML self-closing tags.
         *
         * @param $html
         *
         * @return false|string
         */
        private function restore_self_closing_tags($html)
        {
        }
        /**
         * Callback to convert wpml self-closing tags to self-closing tags.
         *
         * @param $matches
         *
         * @return string
         */
        public function restore_sct_callback($matches)
        {
        }
        /**
         * Convert wpml comments to initial HTML.
         *
         * @param $html
         *
         * @return false|string
         */
        public function restore_html($html)
        {
        }
        /**
         * Convert wpml fragments to HTML fragments.
         *
         * @param $html
         *
         * @return false|string
         */
        private function restore_html_fragments($html)
        {
        }
        /**
         * Callback to convert wpml fragment to HTML fragment.
         *
         * @param $matches
         *
         * @return string
         */
        public function restore_html_fragment_callback($matches)
        {
        }
        /**
         * Convert scripts to wpml scripts.
         *
         * @param string $html HTML to process.
         *
         * @return false|string
         */
        private function hide_scripts($html)
        {
        }
        /**
         * Callback to convert script to wpml script.
         *
         * @param array $matches
         *
         * @return string
         */
        public function hide_script_callback($matches)
        {
        }
        /**
         * Convert wpml scripts to scripts.
         *
         * @param $html
         *
         * @return false|string
         */
        private function restore_scripts($html)
        {
        }
        /**
         * Convert CDATA to wpml cdata.
         *
         * @param string $html HTML to process.
         *
         * @return false|string
         */
        private function hide_cdata($html)
        {
        }
        /**
         * Callback to convert CDATA to wpml cdata.
         *
         * @param array $matches
         *
         * @return string
         */
        public function hide_cdata_callback($matches)
        {
        }
        /**
         * Convert wpml cdata to CDATA.
         *
         * @param $html
         *
         * @return false|string
         */
        private function restore_cdata($html)
        {
        }
        /**
         * Convert styles to wpml scripts.
         *
         * @param string $html HTML to process.
         *
         * @return false|string
         */
        private function hide_styles($html)
        {
        }
        /**
         * Callback to convert style to wpml style.
         *
         * @param array $matches
         *
         * @return string
         */
        public function hide_style_callback($matches)
        {
        }
        /**
         * Convert wpml styles to styles.
         *
         * @param $html
         *
         * @return false|string
         */
        private function restore_styles($html)
        {
        }
        /**
         * Open tag encountered in html.
         *
         * @param string $tag Tag name.
         */
        private function open_tag($tag)
        {
        }
        /**
         * Close tag encountered in html.
         *
         * @param string $tag Tag name.
         *
         * @return bool Closed successfully.
         */
        private function close_tag($tag)
        {
        }
    }
    abstract class WPML_TM_Xliff_Shared extends \WPML_TM_Job_Factory_User
    {
        /** @var  WP_Error $error */
        protected $error;
        /** @var WPML_TM_Validate_HTML */
        private $validator = \null;
        /**
         * @param $string
         *
         * @return mixed
         */
        protected function replace_xliff_new_line_tag_with_new_line($string)
        {
        }
        /**
         * @param SimpleXMLElement $xliff
         *
         * @return string
         */
        protected function identifier_from_xliff($xliff)
        {
        }
        /**
         * @param SimpleXMLElement $xliff
         *
         * @return stdClass|WP_Error
         */
        public function get_job_for_xliff(\SimpleXMLElement $xliff)
        {
        }
        /**
         * @param $xliff_node
         *
         * @return string
         */
        protected function get_xliff_node_target($xliff_node)
        {
        }
        /**
         * @param $validator WPML_TM_Validate_HTML
         */
        public function set_validator($validator)
        {
        }
        /**
         * @return WPML_TM_Validate_HTML
         */
        private function get_validator()
        {
        }
        protected function generate_job_data(\SimpleXMLElement $xliff, $job)
        {
        }
        /**
         * Validate XLIFF target on reading XLIFF.
         *
         * @param $target string
         *
         * @return bool
         */
        private function is_valid_target($target)
        {
        }
        protected function validate_file($name, $content, $current_user)
        {
        }
        /**
         * @param string $filename
         * @return bool
         */
        function validate_file_name($filename)
        {
        }
        protected function is_user_the_job_owner($current_user, $job)
        {
        }
        protected function not_the_job_owner_error($job)
        {
        }
        /**
         * @param string $name
         * @param string $content
         *
         * @return bool|SimpleXMLElement|WP_Error
         */
        protected function check_xml_file($name, $content)
        {
        }
        /**
         * @param $errno
         * @param $errstr
         * @param $errfile
         * @param $errline
         *
         * @throws ErrorException
         */
        protected function error_handler($errno, $errstr, $errfile, $errline)
        {
        }
        /**
         * @param string $name
         *
         * @return WP_Error
         */
        protected function not_xml_file_error($name)
        {
        }
        /**
         * @param array $missing_data
         *
         * @return WP_Error
         */
        protected function invalid_xliff_error(array $missing_data = array())
        {
        }
        /**
         * @return WP_Error
         */
        protected function does_not_belong_error()
        {
        }
    }
    abstract class WPML_TM_Xliff_Reader extends \WPML_TM_Xliff_Shared
    {
        /**
         * @param string $content Xliff file string content
         *
         * @return array
         */
        public abstract function get_data($content);
        /**
         * Parse a XML containing the XLIFF
         *
         * @param string $content
         *
         * @return SimpleXMLElement|WP_Error The parsed XLIFF or a WP error in case it could not be parsed
         */
        public function load_xliff($content)
        {
        }
    }
    class WPML_TM_String_Xliff_Reader extends \WPML_TM_Xliff_Reader
    {
        /**
         * Retrieve the string translations from a XLIFF
         *
         * @param string $content The XLIFF representing a set of strings
         *
         * @return WP_Error|array The string translation representation or WP_Error
         * on failure
         */
        public function get_data($content)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_XLIFF_Shortcodes extends \WPML_TM_XLIFF_Phase
    {
        const SHORTCODE_STORE_OPTION_KEY = 'wpml_xliff_shortcodes';
        /**
         * @return string
         */
        protected function get_data()
        {
        }
        /**
         * @return array
         */
        private function get_shortcodes()
        {
        }
        private function get_sanitized_shortcodes(array $shortcodes1, array $shortcodes2)
        {
        }
        protected function get_phase_name()
        {
        }
        protected function get_process_name()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_XLIFF_Post_Type extends \WPML_TM_XLIFF_Phase
    {
        private $post_type;
        public function __construct($post_type = '')
        {
        }
        /**
         * @return string
         */
        protected function get_data()
        {
        }
        protected function get_phase_name()
        {
        }
        protected function get_process_name()
        {
        }
    }
    /**
     * Class WPML_TM_Xliff_Frontend
     */
    class WPML_TM_Xliff_Frontend extends \WPML_TM_Xliff_Shared
    {
        /**
         * Success admin notices
         *
         * @var array
         */
        private $success;
        /**
         * Attachments
         *
         * @var array
         */
        private $attachments = array();
        /**
         * SitePress instance
         *
         * @var SitePress
         */
        private $sitepress;
        /**
         * Name of archive
         *
         * @var string
         */
        private $export_archive_name;
        /**
         * Priority of late initialisation
         *
         * @var int
         */
        private $late_init_priority = 9999;
        /**
         * Is simple xml turned on
         *
         * @var bool
         */
        private $simplexml_on;
        /**
         * WPML_TM_Xliff_Frontend constructor
         *
         * @param WPML_Translation_Job_Factory $job_factory  Job factory.
         * @param SitePress                    $sitepress    SitePress instance.
         * @param boolean                      $simplexml_on Is simple xml turned on.
         */
        public function __construct(\WPML_Translation_Job_Factory $job_factory, \SitePress $sitepress, $simplexml_on)
        {
        }
        /**
         * Get available xliff versions
         *
         * @return array
         */
        public function get_available_xliff_versions()
        {
        }
        /**
         * Get init priority
         *
         * @return int
         */
        public function get_init_priority()
        {
        }
        /**
         * Get late init priority
         *
         * @return int
         */
        public function get_late_init_priority()
        {
        }
        /**
         * Init class
         *
         * @return bool
         * @throws Exception Throws an exception in case of errors.
         */
        public function init()
        {
        }
        /**
         * Set xliff options
         */
        public function ajax_set_xliff_options()
        {
        }
        /**
         * New job notification
         *
         * @param array $mail   Email content.
         * @param int   $job_id Job id.
         *
         * @return array
         */
        public function new_job_notification($mail, $job_id)
        {
        }
        /**
         * Get zip name from jobs
         *
         * @param array $job_ids Job ids.
         *
         * @return string
         */
        private function get_zip_name_from_jobs($job_ids)
        {
        }
        /**
         * New job notification attachments
         *
         * @param array $attachments Job notification attachments.
         *
         * @return array
         */
        public function new_job_notification_attachments($attachments)
        {
        }
        /**
         * Get xliff file
         *
         * @param int    $job_id        Job id.
         * @param string $xliff_version Xliff version.
         *
         * @return string
         */
        private function get_xliff_file($job_id, $xliff_version = \WPML_XLIFF_DEFAULT_VERSION)
        {
        }
        /**
         * Get xliff archive
         *
         * @param string     $xliff_version Xliff version.
         * @param array|null $job_ids       Job ids.
         *
         * @return wpml_zip
         *
         * @throws Exception Throws an exception in case of errors.
         */
        public function get_xliff_archive($xliff_version, $job_ids = array())
        {
        }
        /**
         * Stream xliff archive
         *
         * @param wpml_zip $archive Zip archive.
         *
         * @throws Exception Throws an exception in case of errors.
         */
        private function stream_xliff_archive($archive)
        {
        }
        /**
         * Save zip file
         *
         * @param string   $path    Where to save the archive.
         * @param wpml_zip $archive Zip archive.
         */
        private function save_zip_file($path, $archive)
        {
        }
        /**
         * Get all filtered job ids
         *
         * @return array
         */
        public function get_all_filtered_job_ids()
        {
        }
        /**
         * Stops any redirects from happening when we call the
         * translation manager to save the translations.
         *
         * @return null
         */
        public function stop_redirect()
        {
        }
        /**
         * Import xliff file
         *
         * @param array $file Xliff file data.
         *
         * @return bool|WP_Error
         */
        private function import_xliff($file)
        {
        }
        /**
         * Translation queue actions
         *
         * @param array  $actions          Actions.
         * @param string $action_name      Action name.
         * @param array  $translation_jobs Translation jobs.
         */
        public function translation_queue_xliff_select_actions($actions, $action_name, $translation_jobs)
        {
        }
        /**
         * Has translation jobs
         *
         * @param array $translation_jobs Translation jobs.
         *
         * @return bool
         */
        private function has_translation_jobs($translation_jobs)
        {
        }
        /**
         * Get xliff version select options
         *
         * @return string
         */
        private function get_xliff_version_select_options()
        {
        }
        /**
         * Adds the various possible XLIFF versions to translations queue page's export actions on display
         *
         * @param array $actions Actions.
         *
         * @return array
         */
        public function translation_queue_add_actions($actions)
        {
        }
        /**
         * Export xliff
         *
         * @param array  $data          Xliff data.
         * @param string $xliff_version Xliff version.
         */
        public function translation_queue_do_actions_export_xliff($data, $xliff_version)
        {
        }
        /**
         * Show error messages in admin notices
         */
        public function admin_notices_error()
        {
        }
        /**
         * Show success messages in admin notices
         */
        public function admin_notices_success()
        {
        }
        /**
         * Check translation queue after display
         *
         * @param array $translation_jobs Translation jobs.
         */
        public function translation_queue_after_display($translation_jobs = array())
        {
        }
        /**
         * Print online js script
         */
        public function js_scripts()
        {
        }
        /**
         * Provide translator notification
         */
        public function translator_notification()
        {
        }
        /**
         * Get user xliff version
         *
         * @return bool|string
         */
        private function get_user_xliff_version()
        {
        }
    }
    class WPML_TM_General_Xliff_Reader extends \WPML_TM_Xliff_Reader
    {
        public function get_xliff_job_identifier($content)
        {
        }
        /**
         * Retrieve the translation from a XLIFF
         *
         * @param string $content The XLIFF representing a job
         *
         * @return WP_Error|array
         */
        public function get_data($content)
        {
        }
    }
    class WPML_TM_Xliff_Reader_Factory extends \WPML_TM_Job_Factory_User
    {
        /**
         * @return WPML_TM_General_Xliff_Reader
         */
        public function general_xliff_reader()
        {
        }
        public function general_xliff_import()
        {
        }
        /**
         * @return WPML_TM_String_Xliff_Reader
         */
        public function string_xliff_reader()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_XLIFF_Factory
    {
        const WPML_XLIFF_DEFAULT_VERSION = \WPML_XLIFF_DEFAULT_VERSION;
        const CREATE_FOR_WRITE = 'WPML_TM_Xliff_Writer';
        const CREATE_FOR_FRONT_END = 'WPML_TM_Xliff_Frontend';
        public function create_writer($xliff_version = self::WPML_XLIFF_DEFAULT_VERSION)
        {
        }
        public function create_frontend()
        {
        }
    }
    class WPML_TM_General_Xliff_Import extends \WPML_TM_Job_Factory_User
    {
        /**
         * @var WPML_TM_Xliff_Reader_Factory $xliff_reader_factory
         */
        private $xliff_reader_factory;
        /**
         * WPML_TM_General_Xliff_Import constructor.
         *
         * @param WPML_Translation_Job_Factory $job_factory
         * @param WPML_TM_Xliff_Reader_Factory $xliff_reader_factory
         */
        public function __construct(&$job_factory, &$xliff_reader_factory)
        {
        }
        /**
         * Imports the data in the xliff string into an array representation
         * that fits to the given target translation id.
         *
         * @param string $xliff_string
         * @param int    $target_translation_id
         *
         * @return WP_Error|array
         */
        public function import($xliff_string, $target_translation_id)
        {
        }
    }
    class WPML_TM_Xliff_Writer
    {
        const TAB = "\t";
        protected $job_factory;
        private $xliff_version;
        private $xliff_shortcodes;
        private $translator_notes;
        /**
         * WPML_TM_xliff constructor.
         *
         * @param WPML_Translation_Job_Factory   $job_factory
         * @param string                         $xliff_version
         * @param \WPML_TM_XLIFF_Shortcodes|null $xliff_shortcodes
         */
        public function __construct(\WPML_Translation_Job_Factory $job_factory, $xliff_version = \TRANSLATION_PROXY_XLIFF_VERSION, \WPML_TM_XLIFF_Shortcodes $xliff_shortcodes = \null)
        {
        }
        /**
         * Generate a XLIFF file for a given job.
         *
         * @param int $job_id
         *
         * @return resource XLIFF representation of the job
         */
        public function get_job_xliff_file($job_id)
        {
        }
        /**
         * Generate a XLIFF string for a given post or external type (e.g. package) job.
         *
         * @param int $job_id
         *
         * @return string XLIFF representation of the job
         */
        public function generate_job_xliff($job_id)
        {
        }
        /**
         * Generate a XLIFF file for a given set of strings.
         *
         * @param array  $strings
         * @param string $source_language
         * @param string $target_language
         *
         * @return resource XLIFF file
         */
        public function get_strings_xliff_file($strings, $source_language, $target_language)
        {
        }
        private function generate_xliff($original_id, $source_language, $target_language, array $translation_units = array(), $external_file_url = \null, $original_post_type = \null)
        {
        }
        private function get_xliff_version()
        {
        }
        /**
         * Generate translation units for a given set of strings.
         *
         * The units are the actual content to be translated
         * Represented as a source and a target
         *
         * @param array $strings
         *
         * @return array The translation units representation
         */
        private function generate_strings_translation_units_data($strings)
        {
        }
        /**
         * @param stdClass[] $strings
         * @param string     $source_lang
         * @param string     $target_lang
         *
         * @return stdClass[]
         */
        private function pre_populate_strings_with_translation_memory($strings, $source_lang, $target_lang)
        {
        }
        /**
         * @param array  $strings_to_translate
         * @param string $source_lang
         * @param string $target_lang
         *
         * @return array
         */
        private function get_original_translated_map_from_translation_memory($strings_to_translate, $source_lang, $target_lang)
        {
        }
        /**
         * Generate translation units.
         *
         * The units are the actual content to be translated
         * Represented as a source and a target
         *
         * @param stdClass $job
         *
         * @return array The translation units data
         */
        private function get_job_translation_units_data($job)
        {
        }
        /**
         * @param \stdClass $field
         * @param \stdClass $job
         *
         * @return string
         */
        private function get_field_title($field, $job)
        {
        }
        /**
         * @param array  $elements
         * @param string $source_lang
         * @param string $target_lang
         *
         * @return array
         */
        private function pre_populate_elements_with_translation_memory(array $elements, $source_lang, $target_lang)
        {
        }
        private function is_taxonomy_field($field_type)
        {
        }
        /**
         * Get translation unit data.
         *
         * @param string  $field_id                  Field ID.
         * @param string  $field_name                Field name.
         * @param string  $field_data                Field content.
         * @param string  $field_data_translated     Field translated content.
         * @param boolean $is_translated_from_memory Boolean flag - is translated from memory.
         * @param string  $field_wrap_tag            Field wrap tag (h1...h6, etc.)
         * @param string  $title
         *
         * @return array
         */
        private function get_translation_unit_data($field_id, $field_name, $field_data, $field_data_translated, $is_translated_from_memory = \false, $field_wrap_tag = '', $title = '')
        {
        }
        /**
         * @param string $string
         *
         * @return string
         */
        protected function replace_new_line_with_tag($string)
        {
        }
        private function remove_line_breaks_inside_tags($string)
        {
        }
        /**
         * @param array $matches
         *
         * @return string
         */
        private function remove_line_breaks_inside_tag_callback(array $matches)
        {
        }
        /**
         * @param string $string
         *
         * Remove all characters below 0x20 except for 0x09, 0x0A and 0x0D
         * @see https://www.w3.org/TR/xml/#charsets
         *
         * @return string
         */
        private function remove_invalid_chars($string)
        {
        }
        /**
         * Save a xliff string to a temporary file and return the file ressource
         * handle
         *
         * @param string $xliff_content
         *
         * @return resource XLIFF
         */
        private function generate_xliff_file($xliff_content)
        {
        }
        /**
         * @param $job
         *
         * @return false|null|string
         */
        private function get_external_url($job)
        {
        }
        /**
         * @param $content
         *
         * @return bool
         */
        private function is_valid_unit_content($content)
        {
        }
        private function get_translator_notes($job)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_XLIFF_Translator_Notes extends \WPML_TM_XLIFF_Phase
    {
        private $post_id;
        public function __construct($post_id = 0)
        {
        }
        /**
         * @return string
         */
        protected function get_data()
        {
        }
        protected function get_phase_name()
        {
        }
        protected function get_process_name()
        {
        }
    }
    class WPML_TM_Service_Activation_AJAX extends \WPML_TM_AJAX_Factory_Obsolete
    {
        private $script_handle = 'wpml_tm_service_activation';
        private $ignore_local_jobs;
        /**
         * @var WPML_Translation_Job_Factory
         */
        private $job_factory;
        /**
         * @param WPML_WP_API                  $wpml_wp_api
         * @param WPML_Translation_Job_Factory $job_factory
         */
        public function __construct(&$wpml_wp_api, &$job_factory)
        {
        }
        public function get_ignore_local_jobs()
        {
        }
        public function set_ignore_local_jobs($value)
        {
        }
        public function cancel_open_local_translators_jobs()
        {
        }
        public function keep_open_local_translators_jobs()
        {
        }
        public function register_resources()
        {
        }
        public function enqueue_resources($hook_suffix)
        {
        }
    }
    /**
     * It handles the admin sections shown in the TM page.
     *
     * @author OnTheGo Systems
     */
    class WPML_TM_Admin_Sections
    {
        /**
         * It stores the tab items.
         *
         * @var array The tab items.
         */
        private $tab_items = array();
        /**
         * It stores the tab items.
         *
         * @var IWPML_TM_Admin_Section[] The admin sections.
         */
        private $admin_sections = array();
        /** @var array */
        private $items_urls = array();
        /**
         * It adds the hooks.
         */
        public function init_hooks()
        {
        }
        public function init_sections()
        {
        }
        /**
         * @return \IWPML_TM_Admin_Section[]
         */
        private function get_admin_sections()
        {
        }
        /**
         * It returns the tab items.
         *
         * @return array The tab items.
         */
        public function get_tab_items()
        {
        }
        /**
         * It returns and filters the admin sections in the TM page.
         *
         * @return array<\WPML\TM\Menu\TranslationServices\SectionFactory|\WPML_TM_AMS_ATE_Console_Section_Factory|\WPML_TM_Translation_Roles_Section_Factory>
         */
        private function get_admin_section_factories()
        {
        }
        /**
         * Returns the URL of a tab item or an empty string if it cannot be found.
         *
         * @param string $slug
         *
         * @return string
         */
        public function get_item_url($slug)
        {
        }
        /**
         * Returns an instance of IWPML_TM_Admin_Section from its slug or null if it cannot be found.
         *
         * @param string $slug
         *
         * @return \IWPML_TM_Admin_Section|null
         */
        public function get_section($slug)
        {
        }
    }
    abstract class WPML_TM_Translators_View extends \WPML_Twig_Template_Loader
    {
        protected $model = array();
        /** @var WPML_Translator_Records $user_records */
        private $user_records;
        /** @var WPML_Language_Collection $active_languages */
        private $active_languages;
        /** @var WPML_Language_Collection $source_languages */
        private $source_languages;
        private $default_language;
        public function __construct(\WPML_Translator_Records $user_records, \WPML_Language_Collection $active_languages, $default_language)
        {
        }
        public function render($wizard_mode = \false)
        {
        }
        public function add_strings()
        {
        }
        private function add_roles()
        {
        }
        public function add_add_translator_dialog()
        {
        }
        public function add_edit_translator_languages_dialog()
        {
        }
        public function add_users()
        {
        }
        public function add_languages()
        {
        }
        public function add_nonce()
        {
        }
        public function add_capability($wizard_mode)
        {
        }
        private function get_nonce()
        {
        }
        public abstract function get_twig_template();
        public abstract function get_template_paths();
    }
    interface IWPML_Translation_Roles_View
    {
        public function show($model, $template);
    }
    class WPML_Translation_Manager_View extends \WPML_Twig_Template_Loader implements \IWPML_Translation_Roles_View
    {
        const TEMPLATE_PATH = '/templates/menus/translation-managers';
        public function __construct()
        {
        }
        public function show($model, $template)
        {
        }
        public static function get_strings()
        {
        }
        public static function add_add_translation_manager_dialog()
        {
        }
    }
}
namespace WPML\TM\Menu\TranslationRoles {
    class RoleValidator
    {
        /**
         * @param string $roleName
         *
         * @return string|null
         */
        public static function getTheHighestPossibleIfNotValid($roleName)
        {
        }
    }
}
namespace {
    abstract class WPML_Translation_Roles_Ajax extends \WPML_TM_AJAX implements \IWPML_Action
    {
        const USER_SEARCH_LIMIT = 10;
        /** @var IWPML_Translation_Roles_View $view */
        private $view;
        /** @var WPML_Translation_Roles_Records $records */
        private $records;
        /** @var WPML_Super_Globals_Validation $post_vars */
        protected $post_vars;
        /** @var WPML_WP_User_Factory $user_factory */
        private $user_factory;
        public function __construct(\IWPML_Translation_Roles_View $view, \WPML_Translation_Roles_Records $records, \WPML_Super_Globals_Validation $post_vars, \WPML_WP_User_Factory $user_factory)
        {
        }
        public function add_hooks()
        {
        }
        public function remove_translation_role()
        {
        }
        public function search_for_translation_roles()
        {
        }
        public function add_translation_role()
        {
        }
        public function send_instructions()
        {
        }
        private function get_user()
        {
        }
        /**
         * @return null|WP_Error|WP_User
         */
        private function create_new_wp_user()
        {
        }
        public abstract function get_role();
        public abstract function get_nonce();
        public abstract function get_capability();
        public abstract function get_user_row_template();
        public abstract function on_user_created(\WP_User $user);
        public abstract function on_remove_role(\WP_User $user);
        public abstract function send_instructions_to_user(\WP_User $user);
    }
    class WPML_Translation_Manager_Ajax extends \WPML_Translation_Roles_Ajax
    {
        const TRANSLATION_MANAGER_INSTRUCTIONS_TEMPLATE = 'notification/translation-manager-instructions.twig';
        /** @var WPML_TM_Email_Notification_View $email_view */
        private $email_view;
        public function __construct(\IWPML_Translation_Roles_View $view, \WPML_Translation_Roles_Records $records, \WPML_Super_Globals_Validation $post_vars, \WPML_WP_User_Factory $user_factory, \WPML_TM_Email_Notification_View $email_view)
        {
        }
        public function get_role()
        {
        }
        public function get_nonce()
        {
        }
        public function get_capability()
        {
        }
        public function get_user_row_template()
        {
        }
        public function on_user_created(\WP_User $user)
        {
        }
        public function on_remove_role(\WP_User $user)
        {
        }
        public function send_instructions_to_user(\WP_User $user)
        {
        }
        public function wp_mail_from_name_filter($from_name)
        {
        }
    }
    interface IWPML_TM_Admin_Section
    {
        /**
         * Returns a value which will be used for sorting the sections.
         *
         * @return int
         */
        public function get_order();
        /**
         * Returns the unique slug of the sections which is used to build the URL for opening this section.
         *
         * @return string
         */
        public function get_slug();
        /**
         * Returns one or more capabilities required to display this section.
         *
         * @return string|array
         */
        public function get_capabilities();
        /**
         * Returns the caption to display in the section.
         *
         * @return string
         */
        public function get_caption();
        /**
         * Returns the callback responsible for rendering the content of the section.
         *
         * @return callable
         */
        public function get_callback();
        /**
         * This method is hooked to the `admin_enqueue_scripts` action.
         *
         * @param string $hook The current page.
         */
        public function admin_enqueue_scripts($hook);
        /**
         * Used to extend the logic for displaying/hiding the section.
         *
         * @return bool
         */
        public function is_visible();
    }
    class WPML_TM_Translation_Roles_Section implements \IWPML_TM_Admin_Section
    {
        const SLUG = 'translators';
        /**
         * The WPML_Translation_Manager_Settings instance.
         *
         * @var WPML_Translator_Settings_Interface $translator_settings
         */
        private $translator_settings;
        /**
         * The WPML_Translator_Settings_Interface instance.
         *
         * @var WPML_Translation_Manager_Settings $translation_manager_settings
         */
        private $translation_manager_settings;
        /**
         * WPML_TM_Translation_Roles_Section constructor.
         *
         * @param \WPML_Translation_Manager_Settings  $translation_manager_settings The WPML_Translation_Manager_Settings instance.
         * @param \WPML_Translator_Settings_Interface $translator_settings          The WPML_Translator_Settings_Interface instance.
         */
        public function __construct(\WPML_Translation_Manager_Settings $translation_manager_settings, \WPML_Translator_Settings_Interface $translator_settings)
        {
        }
        /**
         * Returns a value which will be used for sorting the sections.
         *
         * @return int
         */
        public function get_order()
        {
        }
        /**
         * Returns the unique slug of the sections which is used to build the URL for opening this section.
         *
         * @return string
         */
        public function get_slug()
        {
        }
        /**
         * Returns one or more capabilities required to display this section.
         *
         * @return string|array
         */
        public function get_capabilities()
        {
        }
        /**
         * Returns the caption to display in the section.
         *
         * @return string
         */
        public function get_caption()
        {
        }
        /**
         * Returns the callback responsible for rendering the content of the section.
         *
         * @return callable
         */
        public function get_callback()
        {
        }
        /**
         * This method is hooked to the `admin_enqueue_scripts` action.
         *
         * @param string $hook The current page.
         */
        public function admin_enqueue_scripts($hook)
        {
        }
        /**
         * Used to extend the logic for displaying/hiding the section.
         *
         * @return bool
         */
        public function is_visible()
        {
        }
        /**
         * Outputs the content of the section.
         */
        public function render()
        {
        }
    }
    class WPML_Translation_Roles_Ajax_Factory implements \IWPML_AJAX_Action_Loader
    {
        /**
         * @return \IWPML_Action|\IWPML_Action[]
         */
        public function create()
        {
        }
    }
    class WPML_Translation_Manager_Settings
    {
        const MAIN_TEMPLATE = 'translation-managers.twig';
        const NONCE_ACTION = 'wpml_translation_manager_actions';
        /** @var WPML_Translation_Manager_View $view */
        private $view;
        /** @var WPML_Translation_Manager_Records $records */
        private $records;
        public function __construct(\WPML_Translation_Manager_View $view, \WPML_Translation_Manager_Records $records)
        {
        }
        public function render()
        {
        }
        public function get_model()
        {
        }
        private function get_translation_managers()
        {
        }
    }
    interface WPML_Translator_Settings_Interface
    {
        /**
         * @return string
         */
        public function render();
    }
    class WPML_Translator_Settings_Proxy implements \WPML_Translator_Settings_Interface
    {
        /** @var callable */
        private $create_callback;
        /**
         * @param callable $create_callback
         */
        public function __construct($create_callback)
        {
        }
        public function render()
        {
        }
    }
    class WPML_Translator_Settings extends \WPML_TM_Translators_View implements \WPML_Translator_Settings_Interface
    {
        public function get_twig_template()
        {
        }
        public function get_template_paths()
        {
        }
    }
    class WPML_Translator_View extends \WPML_Twig_Template_Loader implements \IWPML_Translation_Roles_View
    {
        const TEMPLATE_PATH = '/templates/translators';
        /** @var WPML_Language_Collection $languages */
        private $languages;
        public function __construct(\WPML_Language_Collection $languages)
        {
        }
        public function show($model, $template)
        {
        }
        public static function get_strings()
        {
        }
    }
    class WPML_Translator_Ajax extends \WPML_Translation_Roles_Ajax
    {
        const NONCE_ACTION = 'wpml_translator_actions';
        /** @var WPML_Language_Pair_Records $language_pair_records */
        private $language_pair_records;
        public function __construct(\IWPML_Translation_Roles_View $view, \WPML_Translation_Roles_Records $records, \WPML_Super_Globals_Validation $post_vars, \WPML_WP_User_Factory $user_factory, \WPML_Language_Pair_Records $language_pair_records)
        {
        }
        public function get_role()
        {
        }
        public function get_nonce()
        {
        }
        public function get_capability()
        {
        }
        public function get_user_row_template()
        {
        }
        public function on_user_created(\WP_User $user)
        {
        }
        public function on_remove_role(\WP_User $user)
        {
        }
        public function send_instructions_to_user(\WP_User $user)
        {
        }
    }
    interface IWPML_TM_Admin_Section_Factory
    {
        /**
         * Returns an instance of a class implementing \IWPML_TM_Admin_Section.
         *
         * @return \IWPML_TM_Admin_Section
         */
        public function create();
    }
    class WPML_TM_Translation_Roles_Section_Factory implements \IWPML_TM_Admin_Section_Factory
    {
        /**
         * @return \WPML_TM_Admin_Section|\WPML_TM_Translation_Roles_Section
         */
        public function create()
        {
        }
        /**
         * @return \WPML_Translator_Settings
         */
        public function create_translator_settings()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_Custom_XML_Factory
    {
        private $custom_xml;
        function __construct()
        {
        }
        public function create_ui()
        {
        }
        public function create_resources(\WPML_WP_API $wpml_wp_api)
        {
        }
        public function create_ajax()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_Custom_XML_AJAX extends \WPML_TM_AJAX
    {
        const AJAX_ACTION_BASE = 'wpml-tm-custom-xml';
        private $custom_xml;
        private $reload_config_callback;
        private $validate;
        function __construct(\WPML_Custom_XML $custom_xml, \WPML_XML_Config_Validate $validate, $reload_config_callback = \null)
        {
        }
        function validate_content()
        {
        }
        function save_content()
        {
        }
        private function get_content()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_Custom_XML_UI
    {
        private $custom_xml;
        private $template_service;
        function __construct(\WPML_Custom_XML $custom_xml, \IWPML_Template_Service $template_service)
        {
        }
        public function show()
        {
        }
        private function get_model()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_Custom_XML_UI_Resources
    {
        private $wpml_wp_api;
        private $wpml_tm_path;
        private $wpml_tm_url;
        private $code_mirror_installed;
        private $vk_beautify_installed;
        function __construct(\WPML_WP_API $wpml_wp_api)
        {
        }
        function admin_enqueue_scripts()
        {
        }
        private function add_code_mirror()
        {
        }
        private function add_code_mirror_scripts()
        {
        }
        private function add_code_mirror_styles()
        {
        }
        private function add_vk_beautify()
        {
        }
        private function register_main_codemirror_style()
        {
        }
        private function register_main_codemirror_script()
        {
        }
        /**
         * @return string
         */
        private function get_code_mirror_directory_url()
        {
        }
        /**
         * @return string
         */
        private function get_codemirror_resource_handle()
        {
        }
        /**
         * @return bool
         */
        private function is_code_mirror_installed()
        {
        }
        /**
         * @return bool
         */
        private function is_vk_beautify_installed()
        {
        }
        /**
         * @return mixed
         */
        private function is_codemirror_in_wp_core()
        {
        }
        /**
         * @return bool
         */
        private function is_syntax_highlighting_enabled()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_Custom_XML_UI_Hooks
    {
        private $ajax;
        private $resources;
        private $ui;
        function __construct(\WPML_TM_Custom_XML_UI $ui, \WPML_TM_Custom_XML_UI_Resources $resources, \WPML_TM_Custom_XML_AJAX $ajax)
        {
        }
        function init()
        {
        }
        function add_items($tab_items)
        {
        }
        public function build_content()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_MCS_ATE_Strings
    {
        const AMS_STATUS_ACTIVE_NOT_ALL_SUBSCRIBED = 'active-not-all-subscribed';
        /**
         * @var WPML_TM_ATE_Authentication
         */
        private $authentication;
        private $authentication_data;
        /**
         * @var WPML_TM_ATE_AMS_Endpoints
         */
        private $endpoints;
        private $statuses;
        /**
         * WPML_TM_MCS_ATE constructor.
         *
         * @param WPML_TM_ATE_Authentication $authentication
         * @param WPML_TM_ATE_AMS_Endpoints  $endpoints
         */
        public function __construct(\WPML_TM_ATE_Authentication $authentication, \WPML_TM_ATE_AMS_Endpoints $endpoints)
        {
        }
        /**
         * @return string|WP_Error
         * @throws \InvalidArgumentException
         */
        public function get_auto_login()
        {
        }
        public function get_status_HTML($status, $all_users_have_subscription = \true)
        {
        }
        /**
         * @return string
         */
        public function get_status()
        {
        }
        /**
         * @param string     $attribute
         * @param null|mixed $default
         *
         * @return mixed
         */
        public function get_current_status_attribute($attribute, $default = \null)
        {
        }
        /**
         * @param string $status
         * @param string $attribute
         * @param null|mixed $default
         *
         * @return mixed
         */
        public function get_status_attribute($status, $attribute, $default = \null)
        {
        }
        public function get_statuses()
        {
        }
        public function get_synchronize_button_text()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_MCS_ATE extends \WPML_Twig_Template_Loader
    {
        /**
         * @var WPML_TM_ATE_Authentication
         */
        private $authentication;
        private $authentication_data;
        /**
         * @var WPML_TM_ATE_AMS_Endpoints
         */
        private $endpoints;
        /**
         * @var WPML_TM_MCS_ATE_Strings
         */
        private $strings;
        private $model = array();
        /**
         *
         * /**
         * WPML_TM_MCS_ATE constructor.
         *
         * @param WPML_TM_ATE_Authentication $authentication
         * @param WPML_TM_ATE_AMS_Endpoints  $endpoints
         *
         * @param WPML_TM_MCS_ATE_Strings    $strings
         */
        public function __construct(\WPML_TM_ATE_Authentication $authentication, \WPML_TM_ATE_AMS_Endpoints $endpoints, \WPML_TM_MCS_ATE_Strings $strings)
        {
        }
        /**
         * @return string
         */
        public function get_template_path()
        {
        }
        public function init_hooks()
        {
        }
        /**
         * @param array $args
         *
         * @return array
         */
        public function get_model(array $args = array())
        {
        }
        public function render()
        {
        }
        public function get_strings()
        {
        }
        private function has_translators()
        {
        }
        /**
         * @return mixed
         */
        private function get_status_button_text()
        {
        }
        /**
         * @return array
         */
        public function get_script_data()
        {
        }
    }
    class WPML_TM_Options_Ajax
    {
        const NONCE_TRANSLATED_DOCUMENT = 'wpml-translated-document-options-nonce';
        private $sitepress;
        public function __construct(\SitePress $sitepress)
        {
        }
        public function ajax_hooks()
        {
        }
        public function wpml_translated_document_options()
        {
        }
        private function is_valid_request()
        {
        }
    }
    abstract class WPML_TM_MCS_Section_UI
    {
        private $id;
        private $title;
        public function __construct($id, $title)
        {
        }
        /**
         * @return mixed
         */
        public function get_id()
        {
        }
        public function add_hooks()
        {
        }
        public function mcsetup_navigation_links(array $mcsetup_sections)
        {
        }
        public function render()
        {
        }
        /**
         * @return string
         */
        protected abstract function render_content();
    }
    class WPML_Translate_Link_Targets_UI extends \WPML_TM_MCS_Section_UI
    {
        const ID = 'ml-content-setup-sec-links-target';
        /** @var WPDB $wpdb */
        private $wpdb;
        /** @var WPML_Pro_Translation $pro_translation */
        private $pro_translation;
        /** @var  WPML_WP_API $wp_api */
        private $wp_api;
        /** @var  SitePress $sitepress */
        private $sitepress;
        public function __construct($title, $wpdb, $sitepress, $pro_translation)
        {
        }
        /**
         * @return string
         */
        protected function render_content()
        {
        }
    }
    abstract class WPML_TM_MCS_Custom_Field_Settings_Menu
    {
        /** @var  WPML_Custom_Field_Setting_Factory $settings_factory */
        protected $settings_factory;
        /** @var WPML_UI_Unlock_Button $unlock_button_ui */
        private $unlock_button_ui;
        /** @var WPML_Custom_Field_Setting_Query_Factory $query_factory */
        private $query_factory;
        /** @var WPML_Custom_Field_Setting_Query $query */
        private $query;
        /** @var string[] Custom field keys */
        private $custom_fields_keys;
        /** @var int $total_keys */
        private $total_keys;
        /** @var array Custom field options */
        private $custom_field_options;
        /** @var int Initial setting of items per page */
        const ITEMS_PER_PAGE = 20;
        public function __construct(\WPML_Custom_Field_Setting_Factory $settings_factory, \WPML_UI_Unlock_Button $unlock_button_ui, \WPML_Custom_Field_Setting_Query_Factory $query_factory)
        {
        }
        /**
         * This will fetch the data from DB
         * depending on the user inputs (pagination/search)
         *
         * @param array $args
         */
        public function init_data(array $args = array())
        {
        }
        /**
         * @return string
         */
        public function render()
        {
        }
        /**
         * @return string
         */
        protected abstract function kind_shorthand();
        /**
         * @return string
         */
        protected abstract function get_title();
        protected abstract function get_meta_type();
        /**
         * @param string $key
         *
         * @return WPML_Custom_Field_Setting
         */
        protected abstract function get_setting($key);
        private function render_radio($cf_key, $html_disabled, $status, $ref_status)
        {
        }
        private function get_radio_name($cf_key)
        {
        }
        private function get_unlock_name($cf_key)
        {
        }
        /**
         * @return string header and footer of the setting table
         */
        private function render_heading()
        {
        }
        /**
         * Render search box for Custom Field Settings.
         *
         * @param string $search_string Search String.
         */
        public function render_search($search_string = '')
        {
        }
        /**
         * Render body of Custom Field Settings.
         */
        public function render_body()
        {
        }
        /**
         * Render pagination for Custom Field Settings.
         *
         * @param int $items_per_page Items per page to display.
         * @param int $current_page Which page to display.
         */
        public function render_pagination($items_per_page, $current_page)
        {
        }
        public abstract function get_no_data_message();
        public abstract function get_column_header($id);
        /**
         * @return WPML_Custom_Field_Setting_Query
         */
        private function get_query()
        {
        }
    }
    /**
     * WPML_TM_MCS_Pagination_Render class file.
     *
     * @package wpml-translation-management
     */
    /**
     * Class WPML_TM_MCS_Pagination_Render
     */
    class WPML_TM_MCS_Pagination_Render
    {
        /**
         * Twig template path.
         */
        const TM_MCS_PAGINATION_TEMPLATE = 'tm-mcs-pagination.twig';
        /**
         * Twig template service.
         *
         * @var IWPML_Template_Service
         */
        private $template;
        /**
         * Admin pagination instance.
         *
         * @var WPML_Admin_Pagination
         */
        private $pagination;
        /**
         * Items per page.
         *
         * @var int Items per page
         */
        private $items_per_page;
        /**
         * Total items.
         *
         * @var int Total items
         */
        private $total_items;
        /**
         * Current page number.
         *
         * @var int Current page
         */
        private $current_page;
        /**
         * Total number of pages.
         *
         * @var int Total pages
         */
        private $total_pages;
        /**
         * WPML_TM_MCS_Pagination_Render constructor.
         *
         * @param IWPML_Template_Service $template   Twig template service.
         * @param WPML_Admin_Pagination  $pagination Admin pagination object.
         */
        public function __construct(\IWPML_Template_Service $template, \WPML_Admin_Pagination $pagination)
        {
        }
        /**
         * Get twig model.
         *
         * @return array
         */
        private function get_model()
        {
        }
        /**
         * Render model via twig.
         *
         * @return mixed
         */
        public function render()
        {
        }
        /**
         * Paginate links.
         *
         * @return array
         */
        public function paginate_links()
        {
        }
    }
    /**
     * Class WPML_TM_MCS_Pagination_Ajax_Factory
     */
    class WPML_TM_MCS_Pagination_Ajax_Factory implements \IWPML_AJAX_Action_Loader
    {
        /**
         * Create MCS Pagination.
         *
         * @return WPML_TM_MCS_Pagination_Ajax
         */
        public function create()
        {
        }
    }
    /**
     * Class WPML_TM_MCS_Pagination_Ajax
     */
    class WPML_TM_MCS_Pagination_Ajax
    {
        /** @var WPML_TM_MCS_Custom_Field_Settings_Menu_Factory */
        private $menu_factory;
        public function __construct(\WPML_TM_MCS_Custom_Field_Settings_Menu_Factory $menu_factory)
        {
        }
        /**
         * Define Ajax hooks.
         */
        public function add_hooks()
        {
        }
        /**
         * Update custom fields form.
         */
        public function update_mcs_cf()
        {
        }
    }
    class WPML_TM_Pickup_Mode_Ajax
    {
        const NONCE_PICKUP_MODE = 'wpml_save_translation_pickup_mode';
        /**
         * @var SitePress
         */
        private $sitepress;
        /**
         * @var WPML_Update_PickUp_Method
         */
        private $update_pickup_mode;
        /**
         * @var WPML_Pro_Translation
         */
        private $icl_pro_translation;
        public function __construct(\SitePress $sitepress, \WPML_Pro_Translation $icl_pro_translation)
        {
        }
        public function ajax_hooks()
        {
        }
        public function wpml_save_translation_pickup_mode()
        {
        }
        private function is_valid_request()
        {
        }
    }
    /**
     * Class WPML_TM_MCS_Search_Render
     */
    class WPML_TM_MCS_Search_Render
    {
        /**
         * Twig template path.
         */
        const TM_MCS_SEARCH_TEMPLATE = 'tm-mcs-search.twig';
        /**
         * @var IWPML_Template_Service
         */
        private $template;
        /**
         * @var string Search string
         */
        private $search_string;
        /**
         * WPML_TM_MCS_Search_Render constructor.
         *
         * @param IWPML_Template_Service $template Twig template service.
         * @param string $search_string Search string.
         */
        public function __construct(\IWPML_Template_Service $template, $search_string)
        {
        }
        /**
         * Get twig model.
         *
         * @return array
         */
        public function get_model()
        {
        }
        /**
         * Render model via twig.
         *
         * @return mixed
         */
        public function render()
        {
        }
    }
    class WPML_TM_MCS_Term_Custom_Field_Settings_Menu extends \WPML_TM_MCS_Custom_Field_Settings_Menu
    {
        /**
         * @return string
         */
        protected function get_meta_type()
        {
        }
        /**
         * @param string $key
         *
         * @return WPML_Term_Custom_Field_Setting
         */
        protected function get_setting($key)
        {
        }
        /**
         * @return string
         */
        protected function get_title()
        {
        }
        /**
         * @return string
         */
        protected function kind_shorthand()
        {
        }
        /**
         * @return string
         */
        public function get_no_data_message()
        {
        }
        /**
         * @param string $id
         *
         * @return string
         */
        public function get_column_header($id)
        {
        }
    }
    /**
     * Class WPML_TM_MCS_Pagination_Render_Factory
     */
    class WPML_TM_MCS_Pagination_Render_Factory
    {
        /**
         * @var int Items per page
         */
        private $items_per_page;
        /**
         * WPML_TM_MCS_Pagination_Render_Factory constructor.
         *
         * @param int $items_per_page
         */
        public function __construct($items_per_page)
        {
        }
        /**
         * @param $items_per_page
         * @param $total_items
         * @param int $current_page
         *
         * @return WPML_TM_MCS_Pagination_Render
         */
        public function create($total_items, $current_page = 1)
        {
        }
    }
    class WPML_TM_MCS_Custom_Field_Settings_Menu_Factory
    {
        /** @var WPML_Custom_Field_Setting_Factory $setting_factory */
        private $setting_factory;
        /** @var WPML_UI_Unlock_Button $unlock_button */
        private $unlock_button;
        /** @var WPML_Custom_Field_Setting_Query_Factory $query_factory */
        private $query_factory;
        /**
         * @return WPML_TM_MCS_Post_Custom_Field_Settings_Menu
         */
        public function create_post()
        {
        }
        /**
         * @return WPML_TM_MCS_Term_Custom_Field_Settings_Menu
         */
        public function create_term()
        {
        }
        private function get_setting_factory()
        {
        }
        private function get_unlock_button()
        {
        }
        private function get_query_factory()
        {
        }
    }
    class WPML_TM_MCS_Post_Custom_Field_Settings_Menu extends \WPML_TM_MCS_Custom_Field_Settings_Menu
    {
        /**
         * @return string
         */
        protected function get_meta_type()
        {
        }
        /**
         * @param string $key
         *
         * @return WPML_Post_Custom_Field_Setting
         */
        protected function get_setting($key)
        {
        }
        /**
         * @return string
         */
        protected function get_title()
        {
        }
        /**
         * @return string
         */
        protected function kind_shorthand()
        {
        }
        /**
         * @return string
         */
        public function get_no_data_message()
        {
        }
        /**
         * @param string $id
         *
         * @return string
         */
        public function get_column_header($id)
        {
        }
    }
    /**
     * Class WPML_TM_MCS_Search_Factory
     */
    class WPML_TM_MCS_Search_Factory
    {
        /**
         * Create MCS Search.
         *
         * @param string $search_string
         *
         * @return WPML_TM_MCS_Search_Render
         */
        public function create($search_string = '')
        {
        }
    }
    /**
     * Class WPML_TM_Polling_Box
     */
    class WPML_TM_Polling_Box
    {
        /**
         * Renders the html for the TM polling pickup box
         * @uses $GLOBALS['sitepress']
         *
         * @return string
         */
        public function render()
        {
        }
    }
    /**
     * Class WPML_TM_Last_Picked_Up
     */
    class WPML_TM_Last_Picked_Up
    {
        /**
         * @var Sitepress $sitepress
         */
        private $sitepress;
        /**
         * WPML_TM_Last_Picked_Up constructor.
         *
         * @param Sitepress $sitepress
         */
        public function __construct($sitepress)
        {
        }
        /**
         * Get last_picked_up setting.
         *
         * @return bool|mixed
         */
        public function get()
        {
        }
        /**
         * Get last_picked_up setting as formatted string.
         *
         * @param string $format
         *
         * @return string
         */
        public function get_formatted($format = 'Y, F jS @g:i a')
        {
        }
        /**
         * Set last_picked_up setting.
         */
        public function set()
        {
        }
    }
}
namespace WPML\TM\Menu\TranslationServices {
    class ActiveServiceTemplate
    {
        const ACTIVE_SERVICE_TEMPLATE = 'active-service.twig';
        const HOURS_BEFORE_TS_REFRESH = 24;
        /**
         * @param  callable  $templateRenderer
         * @param  \WPML_TP_Service  $active_service
         *
         * @return string
         */
        public static function render($templateRenderer, \WPML_TP_Service $active_service)
        {
        }
        /**
         * @return array
         */
        private static function getModel(\WPML_TP_Service $active_service)
        {
        }
        private static function isAuthorizedText($serviceName)
        {
        }
        private static function shouldRefreshData(\WPML_TP_Service $active_service)
        {
        }
    }
    class SectionFactory implements \IWPML_TM_Admin_Section_Factory
    {
        /**
         * @return Section
         */
        public function create()
        {
        }
        /**
         * @return bool|string
         */
        private function site_key_exists()
        {
        }
        /**
         * @param  \WPML_Twig_Template_Loader  $twig_loader
         * @param  \WPML_TP_Client  $tp_client
         *
         * @return callable
         */
        private function createServicesListRenderer()
        {
        }
        /**
         * @return callable
         */
        private function getTemplateRenderer()
        {
        }
        /**
         * @return \WPML_TP_API_Services
         */
        private function getTpApiServices()
        {
        }
    }
    class AuthenticationAjaxFactory implements \IWPML_Backend_Action_Loader
    {
        /**
         * @return AuthenticationAjax
         */
        public function create()
        {
        }
    }
    class ResourcesFactory implements \IWPML_Backend_Action_Loader
    {
        /**
         * @return Resources
         */
        public function create()
        {
        }
    }
}
namespace WPML\TM\Menu\TranslationServices\Troubleshooting {
    class RefreshServicesFactory implements \IWPML_Backend_Action_Loader
    {
        /**
         * @return RefreshServices|null
         * @throws \Auryn\InjectionException
         */
        public function create()
        {
        }
        /**
         * @return RefreshServices
         * @throws \Auryn\InjectionException
         */
        public function create_an_instance()
        {
        }
        /**
         * @return string
         */
        private function is_visible()
        {
        }
    }
    class RefreshServices
    {
        const TEMPLATE = 'refresh-services.twig';
        const AJAX_ACTION = 'wpml_tm_refresh_services';
        /**
         * @var \IWPML_Template_Service
         */
        private $template;
        /**
         * @var \WPML_TP_API_Services
         */
        private $tp_services;
        public function __construct(\IWPML_Template_Service $template, \WPML_TP_API_Services $tp_services)
        {
        }
        public function add_hooks()
        {
        }
        public function render()
        {
        }
        /**
         * @return array
         */
        private function get_model()
        {
        }
        public function refresh_services_ajax_handler()
        {
        }
        /**
         * @return bool
         */
        public function refresh_services()
        {
        }
        private function refresh_active_service()
        {
        }
        /**
         * @return bool
         */
        private function is_valid_request()
        {
        }
        public function enqueue_scripts()
        {
        }
    }
}
namespace WPML\TM\Menu\TranslationServices {
    class AuthenticationAjax
    {
        const AJAX_ACTION = 'translation_service_authentication';
        /** @var  AuthorizationFactory */
        protected $authorize_factory;
        /**
         * @param AuthorizationFactory $authorize_factory
         */
        public function __construct(\WPML\TM\TranslationProxy\Services\AuthorizationFactory $authorize_factory)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @return bool
         */
        public function authenticate_service()
        {
        }
        /**
         * @return bool
         */
        public function update_credentials()
        {
        }
        /**
         * @return bool
         */
        public function invalidate_service()
        {
        }
        /**
         * @param callable $action
         * @param callable $request_validation
         * @param string   $success_message
         * @param string   $failure_message
         *
         * @return bool
         */
        private function handle_action(callable $action, callable $request_validation, $success_message, $failure_message)
        {
        }
        /**
         * @param string $msg
         *
         * @return bool
         */
        private function send_success_response($msg)
        {
        }
        /**
         * @param string $msg
         *
         * @return bool
         */
        private function send_error_message($msg)
        {
        }
        /**
         * @return bool
         */
        public function is_valid_request()
        {
        }
        /**
         * @return bool
         */
        public function is_valid_request_with_params()
        {
        }
    }
    class Section implements \IWPML_TM_Admin_Section
    {
        const SLUG = 'translation-services';
        /**
         * The SitePress instance.
         *
         * @var \SitePress
         */
        private $sitepress;
        /**
         * The WPML_WP_API instance.
         *
         * @var \WPML_WP_API
         */
        private $wp_api;
        /**
         * The template to use.
         *
         * @var mixed $template
         */
        private $template;
        /**
         * WPML_TM_Translation_Services_Admin_Section constructor.
         *
         * @param \SitePress $sitepress The SitePress instance.
         * @param callable     $template  The template to use.
         */
        public function __construct(\SitePress $sitepress, $template)
        {
        }
        /**
         * Returns a value which will be used for sorting the sections.
         *
         * @return int
         */
        public function get_order()
        {
        }
        /**
         * Outputs the content of the section.
         */
        public function render()
        {
        }
        /**
         * Used to extend the logic for displaying/hiding the section.
         *
         * @return bool
         */
        public function is_visible()
        {
        }
        /**
         * Returns the unique slug of the sections which is used to build the URL for opening this section.
         *
         * @return string
         */
        public function get_slug()
        {
        }
        /**
         * Returns one or more capabilities required to display this section.
         *
         * @return string|array
         */
        public function get_capabilities()
        {
        }
        /**
         * Returns the caption to display in the section.
         *
         * @return string
         */
        public function get_caption()
        {
        }
        /**
         * Returns the callback responsible for rendering the content of the section.
         *
         * @return callable
         */
        public function get_callback()
        {
        }
        /**
         * This method is hooked to the `admin_enqueue_scripts` action.
         *
         * @param string $hook The current page.
         */
        public function admin_enqueue_scripts($hook)
        {
        }
    }
    class ServiceMapper
    {
        /**
         * @param \WPML_TP_Service $service
         * @param callable $getActiveServiceId
         *
         * @return array
         */
        public static function map(\WPML_TP_Service $service, $getActiveServiceId)
        {
        }
    }
    class ActiveServiceRepository
    {
        /**
         * @return \WPML_TP_Service|null
         */
        public static function get()
        {
        }
        public static function getId()
        {
        }
    }
    class Resources
    {
        public function add_hooks()
        {
        }
        public function enqueue_styles()
        {
        }
        public function enqueue_scripts()
        {
        }
        private function is_active()
        {
        }
    }
    class ActivationAjax
    {
        const NONCE_ACTION = 'translation_service_toggle';
        const REFRESH_TS_INFO_ACTION = 'refresh_ts_info';
        /** @var \WPML_TP_Client */
        private $tp_client;
        public function __construct(\WPML_TP_Client $tp_client)
        {
        }
        public function add_hooks()
        {
        }
        public function translation_service_toggle()
        {
        }
        public function refresh_ts_info()
        {
        }
        /**
         * @param int $service_id
         *
         * @return array
         * @throws \InvalidArgumentException
         */
        private function activate_service($service_id)
        {
        }
        private function deactivate_service()
        {
        }
        /**
         * @param string $action
         *
         * @return bool
         */
        private function is_valid_request($action)
        {
        }
        private function send_invalid_nonce_error()
        {
        }
    }
    class ServicesRetriever
    {
        public static function get(\WPML_TP_API_Services $servicesAPI, $getUserCountry, $mapService)
        {
        }
        // buildPartnerServicesSections :: \WPML_TP_Services[] -> string[]
        private static function buildPartnerServicesSections($buildSection, $userCountry)
        {
        }
        /**
         * @param  callable  $mapService
         *
         * @return callable
         */
        private static function buildSection($mapService)
        {
        }
        // belongToUserCountry :: \WPML_TP_Service -> bool
        private static function belongToUserCountry($userCountry)
        {
        }
    }
    class ActiveServiceTemplateFactory
    {
        /**
         * @return \Closure
         */
        public static function createRenderer()
        {
        }
        /**
         * @return \WPML_Twig_Template
         */
        private static function getTemplateRenderer()
        {
        }
    }
    class ActivationAjaxFactory implements \IWPML_Backend_Action_Loader
    {
        /**
         * @return ActivationAjax
         */
        public function create()
        {
        }
    }
    class NoSiteKeyTemplate
    {
        const TEMPLATE = 'no-site-key.twig';
        /**
         * @param  callable  $templateRenderer
         */
        public static function render($templateRenderer)
        {
        }
        /**
         * @return array
         */
        private static function get_no_site_key_model()
        {
        }
    }
    class MainLayoutTemplate
    {
        const SERVICES_LIST_TEMPLATE = 'services-layout.twig';
        /**
         * @param  callable  $templateRenderer
         * @param  callable  $activeServiceRenderer
         * @param  bool  $hasPreferredService
         * @param  callable  $retrieveServiceTabsData
         */
        public static function render($templateRenderer, $activeServiceRenderer, $hasPreferredService, $retrieveServiceTabsData)
        {
        }
        /**
         * @param  callable  $activeServiceRenderer
         * @param  bool  $hasPreferredService
         * @param  callable  $retrieveServiceTabsData
         *
         * @return array
         */
        private static function getModel($activeServiceRenderer, $hasPreferredService, $retrieveServiceTabsData)
        {
        }
    }
}
namespace {
    class WPML_TM_Admin_Menus_Factory implements \IWPML_Backend_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_TM_Field_Type_Sanitizer
    {
        /**
         * Get elements custom field `field_type`.
         * Removes last character if it's number.
         * ex. field-custom_field-0 => field-custom_field
         *
         * @param $element
         *
         * @return string
         */
        public static function sanitize($custom_field_type)
        {
        }
    }
    class WPML_TM_Editor_Job_Save
    {
        public function save($data)
        {
        }
    }
    class WPML_Editor_UI_Job
    {
        private $fields = array();
        protected $job_id;
        private $job_type;
        private $job_type_title;
        private $title;
        private $view_link;
        private $source_lang;
        private $target_lang;
        private $translation_complete;
        private $duplicate;
        private $note = '';
        function __construct($job_id, $job_type, $job_type_title, $title, $view_link, $source_lang, $target_lang, $translation_complete, $duplicate)
        {
        }
        public function add_field($field)
        {
        }
        public function add_note($note)
        {
        }
        public function get_all_fields()
        {
        }
        public function get_layout_of_fields()
        {
        }
        public function get_target_language()
        {
        }
        public function is_translation_complete()
        {
        }
        public function save($data)
        {
        }
        private function convert_id_to_translation_key($id)
        {
        }
        public function requires_translation_complete_for_each_field()
        {
        }
        public function display_hide_completed_switcher()
        {
        }
        public function is_hide_empty_fields()
        {
        }
        public function save_translations($translations)
        {
        }
    }
    class WPML_Translation_Editor_Languages extends \WPML_SP_User
    {
        private $job;
        /**
         * @param SitePress $sitepress
         */
        public function __construct(&$sitepress, $job)
        {
        }
        public function get_model()
        {
        }
    }
    class WPML_Translation_Editor_UI
    {
        const MAX_ALLOWED_SINGLE_LINE_LENGTH = 50;
        /** @var SitePress $sitepress */
        private $sitepress;
        /** @var WPDB $wpdb */
        private $wpdb;
        /** @var array */
        private $all_translations;
        /**
         * @var WPML_Translation_Editor
         */
        private $editor_object;
        private $job;
        private $original_post;
        private $rtl_original;
        private $rtl_original_attribute_object;
        private $rtl_translation;
        private $rtl_translation_attribute;
        private $is_duplicate = \false;
        /**
         * @var TranslationManagement
         */
        private $tm_instance;
        /** @var WPML_Element_Translation_Job|WPML_External_Translation_Job */
        private $job_instance;
        private $job_factory;
        private $job_layout;
        /** @var array */
        private $fields;
        function __construct(\wpdb $wpdb, \SitePress $sitepress, \TranslationManagement $iclTranslationManagement, \WPML_Element_Translation_Job $job_instance, \WPML_TM_Job_Action_Factory $job_factory, \WPML_TM_Job_Layout $job_layout)
        {
        }
        function render()
        {
        }
        /**
         * @return array
         */
        private function init_rtl_settings()
        {
        }
        private function init_original_post()
        {
        }
        private function init_editor_object()
        {
        }
        private function output_model()
        {
        }
        private function output_ate_notice()
        {
        }
        private function output_gutenberg_notice()
        {
        }
        private function output_wysiwyg_editors()
        {
        }
        private function output_copy_all_dialog()
        {
        }
        private function output_edit_independently_dialog()
        {
        }
        private function output_editor_form()
        {
        }
        private function add_titles_and_adjust_styles(array $fields)
        {
        }
        private function add_rtl_attributes(array $fields)
        {
        }
        private function filter_the_model(array $model)
        {
        }
    }
    abstract class WPML_TM_Job_Action
    {
        /** @var  WPML_TM_Job_Action_Factory $job_action_factory */
        protected $job_action_factory;
        /**
         * WPML_TM_Job_Action constructor.
         *
         * @param WPML_TM_Job_Action_Factory $job_action_factory
         */
        public function __construct(&$job_action_factory)
        {
        }
    }
    class WPML_TM_Editor_Save_Ajax_Action extends \WPML_TM_Job_Action
    {
        private $data;
        /**
         * WPML_TM_Editor_Save_Ajax_Action constructor.
         *
         * @param WPML_TM_Job_Action_Factory $job_action_factory
         * @param array $data
         */
        public function __construct(&$job_action_factory, array $data)
        {
        }
        public function run()
        {
        }
    }
    class WPML_Editor_UI_Fields
    {
        private $fields = array();
        public function add_field($field)
        {
        }
        public function get_fields()
        {
        }
        public function get_layout()
        {
        }
    }
    class WPML_Editor_UI_Field_Image extends \WPML_Editor_UI_Fields
    {
        private $image_id;
        private $divider;
        private $group;
        function __construct($id, $image_id, $data, $divider = \true)
        {
        }
        public function get_layout()
        {
        }
    }
    class WPML_Editor_UI_Field
    {
        protected $id;
        protected $title;
        protected $original;
        protected $translation;
        private $requires_complete;
        protected $is_complete;
        function __construct($id, $title, $data, $requires_complete = \false)
        {
        }
        public function get_fields()
        {
        }
        public function get_layout()
        {
        }
    }
    class WPML_Editor_UI_TextArea_Field extends \WPML_Editor_UI_Field
    {
        private $include_copy_button;
        function __construct($id, $title, $data, $include_copy_button, $requires_complete = \false)
        {
        }
        public function get_fields()
        {
        }
    }
    class WPML_Editor_UI_WYSIWYG_Field extends \WPML_Editor_UI_Field
    {
        private $include_copy_button;
        function __construct($id, $title, $data, $include_copy_button, $requires_complete = \false)
        {
        }
        public function get_fields()
        {
        }
    }
    class WPML_Editor_UI_Single_Line_Field extends \WPML_Editor_UI_Field
    {
        private $include_copy_button;
        function __construct($id, $title, $data, $include_copy_button, $requires_complete = \false)
        {
        }
        public function get_fields()
        {
        }
    }
    class WPML_Editor_UI_Field_Group extends \WPML_Editor_UI_Fields
    {
        private $title;
        private $divider;
        function __construct($title = '', $divider = \true)
        {
        }
        public function get_layout()
        {
        }
    }
    class WPML_Editor_UI_Field_Section extends \WPML_Editor_UI_Fields
    {
        private $title;
        private $sub_title;
        function __construct($title = '', $sub_title = '')
        {
        }
        public function get_layout()
        {
        }
    }
    class WPML_Custom_Field_Editor_Settings
    {
        /** @var WPML_Custom_Field_Setting_Factory */
        private $settings_factory;
        public function __construct(\WPML_Custom_Field_Setting_Factory $settingsFactory)
        {
        }
        public function filter_name($fieldType, $default)
        {
        }
        public function filter_style($fieldType, $default)
        {
        }
        public function get_group($fieldType)
        {
        }
        private function extractTypeName($fieldType)
        {
        }
    }
    class WPML_Translation_Editor extends \WPML_WPDB_And_SP_User
    {
        /**
         * @var WPML_Element_Translation_Job $job
         */
        private $job;
        /**
         * @param SitePress $sitepress
         * @param wpdb $wpdb
         * @param WPML_Element_Translation_Job $job
         */
        public function __construct(&$sitepress, &$wpdb, $job)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * Enqueues the JavaScript used by the TM editor.
         */
        public function enqueue_js()
        {
        }
        /**
         * @return string[]
         */
        private function get_translation_editor_strings()
        {
        }
        public function filter_original_editor_buttons($config, $editor_id)
        {
        }
        public function output_editors($field)
        {
        }
    }
    class WPML_Translation_Editor_Header
    {
        private $job_instance;
        public function __construct($job_instance)
        {
        }
        public function get_model()
        {
        }
    }
    class WPML_TM_Emails_Settings_Factory implements \IWPML_Backend_Action_Loader
    {
        /**
         * @return WPML_TM_Emails_Settings
         */
        public function create()
        {
        }
        private function is_tm_settings_page()
        {
        }
    }
    class WPML_TM_Emails_Settings
    {
        const TEMPLATE = 'emails-settings.twig';
        const COMPLETED_JOB_FREQUENCY = 'completed_frequency';
        const NOTIFY_IMMEDIATELY = 1;
        const NOTIFY_DAILY = 2;
        const NOTIFY_WEEKLY = 3;
        /**
         * @var IWPML_Template_Service
         */
        private $template_service;
        /**
         * @var array
         */
        private $tm;
        public function __construct(\IWPML_Template_Service $template_service, \TranslationManagement $tm)
        {
        }
        public function add_hooks()
        {
        }
        public function render()
        {
        }
        private function get_model()
        {
        }
        public function remove_scheduled_summary_email()
        {
        }
    }
    class WPML_TM_Dashboard_Document_Row
    {
        /** @var stdClass $data */
        private $data;
        private $post_types;
        private $translation_filter;
        private $active_languages;
        private $selected;
        private $note_text;
        private $note_icon_class;
        private $post_statuses;
        /** @var SitePress $sitepress */
        private $sitepress;
        /** @var WPML_TM_Translatable_Element_Provider $translatable_element_provider */
        private $translatable_element_provider;
        public function __construct($doc_data, $translation_filter, $post_types, $post_statuses, $active_languages, $selected, \SitePress $sitepress, \WPML_TM_Translatable_Element_Provider $translatable_element_provider)
        {
        }
        public function get_word_count()
        {
        }
        public function get_title()
        {
        }
        private function is_external_type()
        {
        }
        public function get_type_prefix()
        {
        }
        public function get_type()
        {
        }
        public function display()
        {
        }
        private function get_date()
        {
        }
        private function has_remote_jobs($jobs)
        {
        }
        private function get_general_status()
        {
        }
        private function get_status_in_lang($language_code)
        {
        }
    }
    class WPML_TM_Dashboard_Display_Filter
    {
        const PARENT_TAXONOMY_CONTAINER = 'parent-taxonomy-container';
        const PARENT_SELECT_ID = 'parent-filter-control';
        const PARENT_SELECT_NAME = 'filter[parent_type]';
        const PARENT_OR_TAXONOMY_ITEM_CONTAINER = 'parent-taxonomy-item-container';
        private $active_languages = array();
        private $translation_filter;
        private $post_types;
        private $post_statuses;
        private $source_language_code;
        private $priorities;
        /** @var wpdb $wpdb */
        private $wpdb;
        public function __construct($active_languages, $source_language_code, $translation_filter, $post_types, $post_statuses, array $priorities, \wpdb $wpdb)
        {
        }
        private function from_lang_select()
        {
        }
        private function get_language_from()
        {
        }
        private function get_language_from_filter()
        {
        }
        private function to_lang_select()
        {
        }
        private function translation_status_select()
        {
        }
        private function get_from_language_filter_lock_message_if_required()
        {
        }
        private function display_post_type_select()
        {
        }
        private function display_parent_taxonomy_controls()
        {
        }
        private function filter_title_textbox()
        {
        }
        private function display_post_statuses_select()
        {
        }
        private function display_post_translation_priority_select()
        {
        }
        private function display_button()
        {
        }
        public function display()
        {
        }
        private function has_taxonomy_terms_in_any_language($taxonomy)
        {
        }
        private function heading($text)
        {
        }
        private function get_admin_page_url(array $query_args)
        {
        }
    }
}
namespace WPML\TM\Menu\Dashboard {
    class PostJobsRepository
    {
        /**
         * @param int    $original_element_id
         * @param string $element_type
         *
         * @return array
         */
        public function getJobsGroupedByLang($original_element_id, $element_type)
        {
        }
        /**
         * @param int    $original_element_id
         * @param string $element_type
         *
         * @return \WPML\Collect\Support\Collection
         */
        private function getJobsFor($original_element_id, $element_type)
        {
        }
        /**
         * @param int    $original_element_id
         * @param string $element_type
         *
         * @return \WPML_TM_Jobs_Search_Params
         */
        private function buildSearchParams($original_element_id, $element_type)
        {
        }
        /**
         * @param \WPML_TM_Post_Job_Entity $job
         *
         * @return array
         */
        public function mapJob(\WPML_TM_Post_Job_Entity $job)
        {
        }
        /**
         * @param \WPML_TM_Job_Entity $job
         *
         * @return int
         */
        private function getJobStatus(\WPML_TM_Job_Entity $job)
        {
        }
        /**
         * @param \WPML_TM_Job_Entity $job
         *
         * @return bool
         */
        private function postHasTranslationButLatestJobCancelled(\WPML_TM_Job_Entity $job)
        {
        }
    }
}
namespace {
    /**
     * Created by PhpStorm.
     * User: bruce
     * Date: 20/04/17
     * Time: 11:39 AM
     */
    class WPML_TM_WP_Query extends \WP_Query
    {
        public function get_found_count()
        {
        }
    }
    /**
     * Class WPML_TM_Dashboard_Pagination
     */
    class WPML_TM_Dashboard_Pagination
    {
        public function add_hooks()
        {
        }
        /**
         * @param array $query_args
         * @param array $args
         *
         * @return array
         */
        public function filter_dashboard_post_query_args_for_pagination($query_args, $args)
        {
        }
        /**
         * @param integer $posts_per_page
         * @param integer $found_documents
         */
        public function add_tm_dashboard_pagination($posts_per_page, $found_documents)
        {
        }
    }
}
namespace WPML\TM\Menu\TranslationBasket {
    class Utility
    {
        /** @var \SitePress */
        private $sitepress;
        /** @var \WPML_Translator_Records */
        private $translatorRecords;
        /**
         * @param \SitePress               $sitepress
         * @param \WPML_Translator_Records $translatorRecords
         */
        public function __construct(\SitePress $sitepress, \WPML_Translator_Records $translatorRecords)
        {
        }
        /**
         * @return array
         */
        public function getTargetLanguages()
        {
        }
        /**
         * @param $targetLanguages
         *
         * @return bool
         */
        public function isTheOnlyAvailableTranslatorForTargetLanguages($targetLanguages)
        {
        }
        /**
         * @return bool
         */
        public function isTheOnlyAvailableTranslator()
        {
        }
    }
}
namespace {
    class SitePress_Table extends \WP_List_Table
    {
        public function __construct()
        {
        }
    }
    class SitePress_Table_Basket extends \SitePress_Table
    {
        public static function enqueue_js()
        {
        }
        function prepare_items()
        {
        }
        function get_columns()
        {
        }
        /**
         * @param object $item
         * @param string $column_name
         *
         * @return mixed|string
         */
        function column_default($item, $column_name)
        {
        }
        function column_title($item)
        {
        }
        /**
         * @param array $item
         *
         * @return string
         */
        function column_delete($item)
        {
        }
        function no_items()
        {
        }
        function get_sortable_columns()
        {
        }
        /**
         * @param $post_id
         * @param $data
         * @param $item_type
         */
        private function build_basket_item($post_id, $data, $item_type)
        {
        }
        /**
         * @param $element_id
         * @param $element_type
         * @param $languages_count
         */
        private function get_words_count($element_id, $element_type, $languages_count)
        {
        }
        /**
         * @param $cart_items
         * @param $item_type
         *
         * @return array
         */
        private function build_basket_items($cart_items, $item_type)
        {
        }
        private function usort_reorder($a, $b)
        {
        }
        /**
         * @param $post_status
         *
         * @return string
         */
        private function get_post_status_label($post_status)
        {
        }
        /**
         * @param string $post_type
         * @param array  $item
         *
         * @return string
         */
        private function get_post_type_label($post_type, array $item)
        {
        }
        private function action_callback()
        {
        }
        private function get_data()
        {
        }
        function display_tablenav($which)
        {
        }
        function display()
        {
        }
        private function display_total_word_count_info()
        {
        }
    }
}
namespace WPML\TM\Menu\TranslationBasket {
    class Strings
    {
        const ATE_AUTOMATIC_TRANSLATION_SUGGESTION = 'wpml-ate-automatic-translation-suggestion';
        /** @var Utility */
        private $utility;
        /** @var DismissNotices */
        private $dismissNotices;
        /**
         * @param Utility        $utility
         * @param DismissNotices $dismissNotices
         */
        public function __construct(\WPML\TM\Menu\TranslationBasket\Utility $utility, \WPML\Notices\DismissNotices $dismissNotices)
        {
        }
        public function getAll()
        {
        }
        /**
         * @return string
         */
        public function duplicatePostTranslationWarning()
        {
        }
        /**
         * @return string
         */
        public function jobsSentToLocalTranslator()
        {
        }
        /**
         * @return string
         */
        public function jobsSentToCurrentUserWhoIsTheOnlyTranslator()
        {
        }
        /**
         * @return string
         */
        private function automaticTranslationTip()
        {
        }
        /**
         * @return string
         */
        public function jobsSentDefaultMessage()
        {
        }
        /**
         * @return string
         */
        private function getJobsLink()
        {
        }
        private function getToolsLink()
        {
        }
        /**
         * @return string
         */
        public function emailNotSentError()
        {
        }
    }
}
namespace {
    class WPML_Basket_Tab_Ajax
    {
        /** @var  TranslationProxy_Project $project */
        private $project;
        /** @var  WPML_Translation_Proxy_Basket_Networking $networking */
        private $networking;
        /** @var  WPML_Translation_Basket $basket */
        private $basket;
        /**
         * @param TranslationProxy_Project                 $project
         * @param WPML_Translation_Proxy_Basket_Networking $networking
         * @param WPML_Translation_Basket                  $basket
         */
        function __construct($project, $networking, $basket)
        {
        }
        function init()
        {
        }
        /**
         * Handler for the ajax call to commit a chunk of the items in a batch provided in the request.
         *
         * @uses \WPML_Translation_Proxy_Basket_Networking::commit_basket_chunk
         *
         */
        function send_basket_chunk()
        {
        }
        /**
         * Ajax handler for the first ajax request call in the basket commit workflow, responding with an message
         * containing information about the basket's contents.
         *
         * @uses \WPML_Basket_Tab_Ajax::create_remote_batch_message
         */
        function begin_basket_commit()
        {
        }
        /**
         * Last ajax call in the multiple ajax calls made during the commit of a batch.
         * Empties the basket in case the commit worked error free responds to the ajax call.
         *
         */
        function send_basket_commit()
        {
        }
        /**
         * @param $translators
         *
         * @return bool
         */
        public function contains_local_translators_different_than_current_user($translators)
        {
        }
        /**
         * Ajax handler for checking if a current basket/batch name is valid for use with the currently used translation
         * service.
         *
         * @uses \WPML_Translation_Basket::check_basket_name
         */
        function check_basket_name()
        {
        }
        public function rollback_basket()
        {
        }
        /** @return string */
        private function get_basket_name()
        {
        }
        private static function sanitize_errors($source)
        {
        }
        /**
         * Sends the response to the ajax for \WPML_Basket_Tab_Ajax::send_basket_commit and rolls back the commit
         * in case of any errors.
         *
         * @see  \WPML_Basket_Tab_Ajax::send_basket_commit
         * @uses \WPML_Translation_Proxy_Basket_Networking::rollback_basket_commit
         * @uses \WPML_Translation_Basket::delete_all_items
         *
         * @param object|bool $response
         * @param array       $errors
         */
        private function send_json_response($response, $errors)
        {
        }
        /**
         * Creates the message that is shown before committing a batch.
         *
         * @see \WPML_Basket_Tab_Ajax::begin_basket_commit
         *
         * @param string $basket_name
         *
         * @return array
         */
        private function create_remote_batch_message($basket_name)
        {
        }
    }
    class WPML_TM_Translate_Independently
    {
        /**	@var TranslationManagement $translation_management */
        private $translation_management;
        /** @var WPML_Translation_Basket $translation_basket */
        private $translation_basket;
        /** @var SitePress $sitepress */
        private $sitepress;
        public function __construct(\TranslationManagement $translation_management, \WPML_Translation_Basket $translation_basket, \SitePress $sitepress)
        {
        }
        /**
         * Init all plugin actions.
         */
        public function init()
        {
        }
        /**
         * Add hidden fields to TM basket.
         * #icl_duplicate_post_in_basket with list of duplicated ids in basket target languages.
         * #icl_disconnect_nonce nonce for AJAX call.
         */
        public function add_hidden_field()
        {
        }
        /**
         * @param array $basket_posts
         *
         * @return array
         */
        private function duplicates_to_disconnect($basket_posts)
        {
        }
        /**
         * AJAX action to bulk disconnect posts before sending them to translation.
         */
        public function ajax_disconnect_duplicates()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_Scripts_Factory
    {
        private $ate;
        private $ams_api;
        private $auth;
        private $endpoints;
        private $http;
        private $strings;
        public function init_hooks()
        {
        }
        /**
         * @throws \InvalidArgumentException
         */
        public function admin_enqueue_scripts()
        {
        }
        private function load_pick_up_box_scripts()
        {
        }
        public function register_otgs_notices()
        {
        }
        public function localize_jobs_list()
        {
        }
        /**
         * @param $handle
         *
         * @throws \InvalidArgumentException
         */
        public function localize_script($handle, $additional_data = array())
        {
        }
        /**
         * @return WPML_TM_MCS_ATE
         * @throws \InvalidArgumentException
         */
        public function create_ate()
        {
        }
        private function get_authentication()
        {
        }
        private function get_endpoints()
        {
        }
        private function create_ate_strings()
        {
        }
        /**
         * @param array $strings
         * @param bool  $all_users_have_subscription
         *
         * @return array
         */
        public function filter_translators_view_strings(array $strings, $all_users_have_subscription)
        {
        }
        /**
         * @return string
         */
        private function get_ate_activation_status()
        {
        }
        /**
         * @return string
         */
        private function fetch_and_update_ate_activation_status()
        {
        }
    }
    /**
     * It handles the TM section responsible for displaying the AMS/ATE console.
     *
     * This class takes care of the following:
     * - enqueuing the external script which holds the React APP
     * - adding the ID to the enqueued script (as it's required by the React APP)
     * - adding an inline script to initialize the React APP
     *
     * @author OnTheGo Systems
     */
    class WPML_TM_AMS_ATE_Console_Section implements \IWPML_TM_Admin_Section
    {
        const ATE_APP_ID = 'eate_widget';
        const TAB_ORDER = 10000;
        const CONTAINER_SELECTOR = '#ams-ate-console';
        const TAB_SELECTOR = '.wpml-tabs .nav-tab.nav-tab-active.nav-tab-ate-ams';
        const SLUG = 'ate-ams';
        /**
         * An instance of \SitePress.
         *
         * @var SitePress The instance of \SitePress.
         */
        private $sitepress;
        /**
         * Instance of WPML_TM_ATE_AMS_Endpoints.
         *
         * @var WPML_TM_ATE_AMS_Endpoints
         */
        private $endpoints;
        /**
         * Instance of WPML_TM_ATE_Authentication.
         *
         * @var WPML_TM_ATE_Authentication
         */
        private $auth;
        /**
         * Instance of WPML_TM_AMS_API.
         *
         * @var WPML_TM_AMS_API
         */
        private $ams_api;
        /**
         * WPML_TM_AMS_ATE_Console_Section constructor.
         *
         * @param SitePress                  $sitepress The instance of \SitePress.
         * @param WPML_TM_ATE_AMS_Endpoints  $endpoints The instance of WPML_TM_ATE_AMS_Endpoints.
         * @param WPML_TM_ATE_Authentication $auth      The instance of WPML_TM_ATE_Authentication.
         * @param WPML_TM_AMS_API            $ams_api   The instance of WPML_TM_AMS_API.
         */
        public function __construct(\SitePress $sitepress, \WPML_TM_ATE_AMS_Endpoints $endpoints, \WPML_TM_ATE_Authentication $auth, \WPML_TM_AMS_API $ams_api)
        {
        }
        /**
         * Returns a value which will be used for sorting the sections.
         *
         * @return int
         */
        public function get_order()
        {
        }
        /**
         * Returns the unique slug of the sections which is used to build the URL for opening this section.
         *
         * @return string
         */
        public function get_slug()
        {
        }
        /**
         * Returns one or more capabilities required to display this section.
         *
         * @return string|array
         */
        public function get_capabilities()
        {
        }
        /**
         * Returns the caption to display in the section.
         *
         * @return string
         */
        public function get_caption()
        {
        }
        /**
         * Returns the callback responsible for rendering the content of the section.
         *
         * @return callable
         */
        public function get_callback()
        {
        }
        /**
         * Used to extend the logic for displaying/hiding the section.
         *
         * @return bool
         */
        public function is_visible()
        {
        }
        /**
         * Outputs the content of the section.
         */
        public function render()
        {
        }
        /**
         * This method is hooked to the `admin_enqueue_scripts` action.
         *
         * @param string $hook The current page.
         */
        public function admin_enqueue_scripts($hook)
        {
        }
        /**
         * It returns true if the current page and tab are the ATE Console.
         *
         * @return bool
         */
        private function is_ate_console_tab()
        {
        }
        /**
         * It returns the list of all translatable post types.
         *
         * @return array
         */
        private function get_post_types_data()
        {
        }
        /**
         * It returns the current user's language.
         *
         * @return string
         */
        private function get_user_admin_language()
        {
        }
        /**
         * Initializes the React APP.
         */
        private function add_initialization_script()
        {
        }
    }
    class WPML_TM_AMS_ATE_Console_Section_Factory implements \IWPML_TM_Admin_Section_Factory
    {
        /**
         * Returns an instance of a class implementing \IWPML_TM_Admin_Section.
         *
         * @return \IWPML_TM_Admin_Section
         */
        public function create()
        {
        }
    }
}
namespace WPML\TM\Menu\TranslationQueue {
    class CloneJobs
    {
        /**
         * @var WPML_TM_ATE_Jobs
         */
        private $ateJobs;
        /**
         * @var WPML_TM_ATE_API
         */
        private $apiClient;
        /**
         * @param WPML_TM_ATE_Jobs $ateJobs
         * @param WPML_TM_ATE_API $apiClient
         */
        public function __construct(\WPML_TM_ATE_Jobs $ateJobs, \WPML_TM_ATE_API $apiClient)
        {
        }
        /**
         * @param int $wpmlJobId
         * @param WPML_Element_Translation_Job $jobObject
         */
        public function cloneCompletedJob($wpmlJobId, \WPML_Element_Translation_Job $jobObject)
        {
        }
    }
}
namespace {
    /**
     * @author OnTheGo Systems
     */
    class WPML_Translations_Queue_Factory
    {
        /**
         * @return \WPML_Translations_Queue|null
         */
        public function create()
        {
        }
    }
    /**
     * Created by OnTheGo Systems
     */
    class WPML_Translations_Queue_Pagination_UI
    {
        private $translation_jobs;
        private $jobs_per_page;
        function __construct($translation_jobs, $jobs_per_page)
        {
        }
        public function show()
        {
        }
        public function get_paged_jobs()
        {
        }
    }
    /**
     * Created by OnTheGo Systems
     */
    class WPML_Translations_Queue_Jobs_Model
    {
        /** @var  TranslationManagement $tm_instance */
        private $tm_instance;
        /** @var array $translation_jobs */
        private $translation_jobs;
        /** @var WPML_TM_API $tm_api */
        private $tm_api;
        /** @var array $post_types */
        private $post_types;
        private $post_type_names = array();
        /** @var ElementLink $element_link */
        private $element_link;
        /**
         * WPML_Translations_Queue_Jobs_Model constructor.
         *
         * @param SitePress             $sitepress
         * @param TranslationManagement $tm_instance
         * @param WPML_TM_API           $tm_api
         * @param ElementLink           $elemen_link
         * @param array                 $translation_jobs
         */
        public function __construct(\SitePress $sitepress, \TranslationManagement $tm_instance, \WPML_TM_API $tm_api, \WPML\TM\Jobs\Utils\ElementLink $elemen_link, array $translation_jobs)
        {
        }
        public function get()
        {
        }
        private function get_post_link($job)
        {
        }
        private function get_view_translation_link($job)
        {
        }
        private function get_post_type($job)
        {
        }
        private function get_status_text($job)
        {
        }
        private function get_edit_url($job)
        {
        }
        private function get_button_text($job)
        {
        }
        private function get_resign_text($job)
        {
        }
        private function is_doing_job($job)
        {
        }
        private function get_resign_url($job)
        {
        }
    }
    class WPML_Translations_Queue
    {
        /** @var  SitePress $sitepress */
        private $sitepress;
        /* @var WPML_UI_Screen_Options_Pagination */
        private $screen_options;
        /** @var WPML_Admin_Table_Sort $table_sort */
        private $table_sort;
        private $must_render_the_editor = \false;
        /** @var WPML_Translation_Editor_UI */
        private $translation_editor;
        /**
         * @var CloneJobs
         */
        private $clone_jobs;
        /**
         * @param SitePress                      $sitepress
         * @param WPML_UI_Screen_Options_Factory $screen_options_factory
         * @param CloneJobs $clone_jobs
         */
        public function __construct($sitepress, $screen_options_factory, \WPML\TM\Menu\TranslationQueue\CloneJobs $clone_jobs)
        {
        }
        public function init_hooks()
        {
        }
        public function load()
        {
        }
        /**
         * @param array $icl_translation_filter
         *
         * @throws \InvalidArgumentException
         */
        public function display(array $icl_translation_filter = array())
        {
        }
        /**
         * @param $translation_jobs
         * @param $has_actions
         * @param $open_job
         */
        public function show_table($translation_jobs, $has_actions, $open_job)
        {
        }
        private function get_job_id_from_request()
        {
        }
        /**
         * @param $job_id
         *
         * @return array ( trid, updated_needed, language_code )
         */
        private function get_job_data_for_restore($job_id)
        {
        }
        /**
         * @param stdClass $job
         *
         * @return string
         */
        private function get_row_css_attribute($job)
        {
        }
        /**
         * @return bool
         */
        private function must_open_the_editor()
        {
        }
        /**
         * @param $job_id
         */
        private function attempt_opening_ATE($job_id)
        {
        }
        /**
         * @return mixed|null|string
         */
        private function get_return_url()
        {
        }
        private function filterQueryParameters($query)
        {
        }
        /**
         * @return array
         */
        public static function get_cookie_filters()
        {
        }
        /**
         * @param  \WPML_Translation_Job  $job_object
         */
        private function mark_job_as_in_progress(\WPML_Translation_Job $job_object)
        {
        }
    }
    class WPML_TM_Admin_Menus_Hooks implements \IWPML_Action
    {
        public function add_hooks()
        {
        }
        public function redirect_settings_menu()
        {
        }
    }
    class WPML_TM_Jobs_List_Translated_By_Filters
    {
        /** @var WPML_TM_Jobs_List_Services */
        private $services;
        /** @var WPML_TM_Jobs_List_Translators */
        private $translators;
        /**
         * @param WPML_TM_Jobs_List_Services    $services
         * @param WPML_TM_Jobs_List_Translators $translators
         */
        public function __construct(\WPML_TM_Jobs_List_Services $services, \WPML_TM_Jobs_List_Translators $translators)
        {
        }
        /**
         * @return array
         */
        public function get()
        {
        }
    }
    class WPML_TM_Jobs_List_Translators
    {
        /** @var WPML_Translator_Records */
        private $translator_records;
        /**
         * @param WPML_Translator_Records $translator_records
         */
        public function __construct(\WPML_Translator_Records $translator_records)
        {
        }
        public function get()
        {
        }
        private function getTranslatorData($translator)
        {
        }
        private function getLanguagePairs($translator)
        {
        }
    }
    class WPML_TM_Jobs_List_Status_Names
    {
        /**
         * @return array
         */
        public static function get_statuses()
        {
        }
    }
    class WPML_TM_Jobs_List_Script_Data
    {
        /** @var WPML_TM_Rest_Jobs_Language_Names */
        private $language_names;
        /** @var WPML_TM_Jobs_List_Translated_By_Filters */
        private $translated_by_filter;
        /** @var WPML_TM_Jobs_List_Translators */
        private $translators;
        /** @var WPML_TM_Jobs_List_Services */
        private $services;
        /**
         * @param WPML_TM_Rest_Jobs_Language_Names|null        $language_names
         * @param WPML_TM_Jobs_List_Translated_By_Filters|null $translated_by_filters
         * @param WPML_TM_Jobs_List_Translators|null           $translators
         * @param WPML_TM_Jobs_List_Services|null              $services
         */
        public function __construct(\WPML_TM_Rest_Jobs_Language_Names $language_names = \null, \WPML_TM_Jobs_List_Translated_By_Filters $translated_by_filters = \null, \WPML_TM_Jobs_List_Translators $translators = \null, \WPML_TM_Jobs_List_Services $services = \null)
        {
        }
        /**
         * @return array
         */
        public function get()
        {
        }
    }
    class WPML_TM_Jobs_List_Services
    {
        /** @var wpdb */
        private $wpdb;
        /** @var WPML_TM_Rest_Jobs_Translation_Service */
        private $service_names;
        /** @var array|null */
        private $cache;
        public function __construct(\WPML_TM_Rest_Jobs_Translation_Service $service_names)
        {
        }
        public function get()
        {
        }
        private function map($translation_service_id)
        {
        }
    }
    class WPML_Translation_Basket_Validation
    {
        private $basket;
        private $encoding_validation;
        private $package_helper;
        public function __construct(\WPML_Translation_Basket $basket, \WPML_Encoding_Validation $encoding_validation, \WPML_Element_Translation_Package $package_helper)
        {
        }
        /**
         * @return array
         */
        public function get_invalid_documents()
        {
        }
        /**
         * @param array $invalid_documents
         * @param array $basket
         * @param string $kind
         *
         * @return array
         */
        private function get_base64_encoded_documents($invalid_documents, $basket, $kind)
        {
        }
    }
    class WPML_TM_Translation_Basket_Dialog_Hooks implements \IWPML_Action
    {
        const PRIORITY_GREATER_THAN_MEDIA_DIALOG = 5;
        /** @var WPML_TM_Translation_Basket_Dialog_View $dialog_view */
        private $dialog_view;
        private $wp_api;
        public function __construct(\WPML_TM_Translation_Basket_Dialog_View $dialog_view, \WPML_WP_API $wp_api)
        {
        }
        public function add_hooks()
        {
        }
        public function enqueue_scripts()
        {
        }
        public function display_dialog_markup()
        {
        }
    }
    class WPML_TM_Translation_Basket_Hooks_Factory implements \IWPML_Backend_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_TM_Translation_Basket_Validation_Notice
    {
        const TEMPLATE_FILE = 'validation-notice.twig';
        private $template_service;
        private $basket_validation;
        private $basket;
        public function __construct(\IWPML_Template_Service $template_service, \WPML_Translation_Basket_Validation $basket_validation, \WPML_Translation_Basket $basket)
        {
        }
        public function add_hooks()
        {
        }
        public function enqueue_scripts()
        {
        }
        public function render()
        {
        }
        private function get_model()
        {
        }
        /**
         * @return array
         */
        private function get_formatted_documents()
        {
        }
    }
    class WPML_TM_Translation_Basket_Dialog_View
    {
        const TEMPLATE_FILE = 'dialog.twig';
        /** @var IWPML_Template_Service $template_service */
        private $template_service;
        /** @var WPML_WP_API $wp_api */
        private $wp_api;
        public function __construct(\IWPML_Template_Service $template_service, \WPML_WP_API $wp_api)
        {
        }
        /**
         * @return string
         */
        public function render()
        {
        }
        public static function get_strings()
        {
        }
    }
    /**
     * Class WPML_TM_API_Hook_Links
     *
     * This class provides various links by hooks
     */
    class WPML_TM_API_Hook_Links implements \IWPML_Action
    {
        public function add_hooks()
        {
        }
        public function get_post_translation_settings_link($link)
        {
        }
    }
    class WPML_TM_API_Hooks_Factory implements \IWPML_Backend_Action_Loader, \IWPML_Frontend_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_TM_REST_TP_XLIFF extends \WPML_REST_Base
    {
        /** @var WPML_TP_Translations_Repository */
        private $translation_repository;
        /** @var WPML_TM_Rest_Download_File */
        private $download_file;
        public function __construct(\WPML_TP_Translations_Repository $translation_repository, \WPML_TM_Rest_Download_File $download_file)
        {
        }
        public function add_hooks()
        {
        }
        public function register_routes()
        {
        }
        /**
         * @param WP_REST_Request $request
         *
         * @return array|string|WP_Error
         */
        public function get_job_translations_from_tp(\WP_REST_Request $request)
        {
        }
        /**
         * @param WP_REST_Request $request
         *
         * @return string
         */
        private function download_job_translation(\WP_REST_Request $request)
        {
        }
        public function get_allowed_capabilities(\WP_REST_Request $request)
        {
        }
        public function validate_job_type($value)
        {
        }
    }
    class WPML_TM_REST_Apply_TP_Translation extends \WPML_REST_Base
    {
        /** @var WPML_TP_Apply_Translations */
        private $apply_translations;
        public function __construct(\WPML_TP_Apply_Translations $apply_translations)
        {
        }
        public function add_hooks()
        {
        }
        public function register_routes()
        {
        }
        /**
         * @return WP_Error|int|array
         */
        public function apply_translations(\WP_REST_Request $request)
        {
        }
        public function get_allowed_capabilities(\WP_REST_Request $request)
        {
        }
        public function map_jobs_to_array(\WPML_TM_Job_Entity $job)
        {
        }
        /**
         * @param array $job
         *
         * @return bool
         */
        private function validate_job(array $job)
        {
        }
    }
    class WPML_TM_Rest_Download_File
    {
        public function send($file_name, $content, $content_type = 'application/x-xliff+xml')
        {
        }
        public function force_wp_rest_server_download($content)
        {
        }
    }
    class WPML_TM_REST_Apply_TP_Translation_Factory extends \WPML_REST_Factory_Loader
    {
        /**
         * @return WPML_TM_REST_Apply_TP_Translation
         */
        public function create()
        {
        }
    }
    class WPML_TM_REST_Batch_Sync extends \WPML_REST_Base
    {
        /** @var WPML_TP_Batch_Sync_API */
        private $batch_sync_api;
        public function __construct(\WPML_TP_Batch_Sync_API $batch_sync_api)
        {
        }
        public function add_hooks()
        {
        }
        public function register_routes()
        {
        }
        public function init(\WP_REST_Request $request)
        {
        }
        public function check_progress()
        {
        }
        public function get_allowed_capabilities(\WP_REST_Request $request)
        {
        }
        public function validate_batch_ids($batches)
        {
        }
        public function sanitize_batch_ids($batches)
        {
        }
    }
}
namespace WPML\TM\REST {
    class FactoryLoader implements \IWPML_REST_Action_Loader, \IWPML_Deferred_Action_Loader
    {
        const REST_API_INIT_ACTION = 'rest_api_init';
        /**
         * @return string
         */
        public function get_load_action()
        {
        }
        public function create()
        {
        }
    }
}
namespace {
    class WPML_TM_REST_Jobs_Factory extends \WPML_REST_Factory_Loader
    {
        /**
         * @return WPML_TM_REST_Jobs
         */
        public function create()
        {
        }
    }
    class WPML_TM_REST_Batch_Sync_Factory extends \WPML_REST_Factory_Loader
    {
        /**
         * @return WPML_TM_REST_Batch_Sync
         */
        public function create()
        {
        }
    }
    class WPML_TM_REST_Settings_Translation_Editor_Factory extends \WPML_REST_Factory_Loader
    {
        public function create()
        {
        }
    }
    /**
     * Class WPML_TM_REST_Jobs
     */
    class WPML_TM_REST_Jobs extends \WPML_REST_Base
    {
        const CAPABILITY = 'translate';
        /**
         * Jobs repository
         *
         * @var WPML_TM_Jobs_Repository
         */
        private $jobs_repository;
        /**
         * Rest jobs criteria parser
         *
         * @var WPML_TM_Rest_Jobs_Criteria_Parser
         */
        private $criteria_parser;
        /**
         * View model
         *
         * @var WPML_TM_Rest_Jobs_View_Model
         */
        private $view_model;
        /**
         * Update jobs synchronisation
         *
         * @var WPML_TP_Sync_Update_Job
         */
        private $update_jobs;
        /**
         * Last picked up jobs
         *
         * @var WPML_TM_Last_Picked_Up $wpml_tm_last_picked_up
         */
        private $wpml_tm_last_picked_up;
        /**
         * WPML_TM_REST_Jobs constructor.
         *
         * @param WPML_TM_Jobs_Repository           $jobs_repository        Jobs repository.
         * @param WPML_TM_Rest_Jobs_Criteria_Parser $criteria_parser        Rest jobs criteria parser.
         * @param WPML_TM_Rest_Jobs_View_Model      $view_model             View model.
         * @param WPML_TP_Sync_Update_Job           $update_jobs            Update jobs synchronisation.
         * @param WPML_TM_Last_Picked_Up            $wpml_tm_last_picked_up Last picked up jobs.
         */
        public function __construct(\WPML_TM_Jobs_Repository $jobs_repository, \WPML_TM_Rest_Jobs_Criteria_Parser $criteria_parser, \WPML_TM_Rest_Jobs_View_Model $view_model, \WPML_TP_Sync_Update_Job $update_jobs, \WPML_TM_Last_Picked_Up $wpml_tm_last_picked_up)
        {
        }
        /**
         * Add hooks
         */
        public function add_hooks()
        {
        }
        /**
         * Register routes
         */
        public function register_routes()
        {
        }
        /**
         * Get jobs
         *
         * @param WP_REST_Request $request REST request.
         *
         * @return array|WP_Error
         */
        public function get_jobs(\WP_REST_Request $request)
        {
        }
        /**
         * Assign job.
         *
         * @param WP_REST_Request $request REST request.
         *
         * @return array
         * @throws \InvalidArgumentException Exception on error.
         */
        public function assign_job(\WP_REST_Request $request)
        {
        }
        /**
         * Cancel job
         *
         * @param WP_REST_Request $request REST request.
         *
         * @return array|WP_Error
         */
        public function cancel_jobs(\WP_REST_Request $request)
        {
        }
        /**
         * Get allowed capabilities
         *
         * @param WP_REST_Request $request REST request.
         *
         * @return array|string
         */
        public function get_allowed_capabilities(\WP_REST_Request $request)
        {
        }
        /**
         * Validate sorting
         *
         * @param mixed $sorting Sorting parameters.
         *
         * @return bool
         */
        public function validate_sorting($sorting)
        {
        }
        /**
         * Validate job
         *
         * @param mixed $job Job.
         *
         * @return bool
         */
        private function validate_job($job)
        {
        }
    }
    class WPML_TM_REST_TP_XLIFF_Factory extends \WPML_REST_Factory_Loader
    {
        public function create()
        {
        }
    }
    class WPML_TM_Rest_Jobs_View_Model
    {
        /** @var WPML_TM_Rest_Jobs_Translation_Service */
        private $translation_service;
        /** @var WPML_TM_Rest_Jobs_Element_Info */
        private $element_info;
        /** @var WPML_TM_Rest_Jobs_Language_Names */
        private $language_names;
        /** @var WPML_TM_Rest_Job_Translator_Name */
        private $translator_name;
        /** @var WPML_TM_Rest_Job_Progress */
        private $progress;
        /**
         * @param WPML_TM_Rest_Jobs_Translation_Service $translation_service
         * @param WPML_TM_Rest_Jobs_Element_Info        $element_info
         * @param SitePress                             $sitepress
         */
        public function __construct(\WPML_TM_Rest_Jobs_Translation_Service $translation_service, \WPML_TM_Rest_Jobs_Element_Info $element_info, \WPML_TM_Rest_Jobs_Language_Names $language_names, \WPML_TM_Rest_Job_Translator_Name $translator_name, \WPML_TM_Rest_Job_Progress $progress)
        {
        }
        /**
         * @param WPML_TM_Jobs_Collection $jobs
         * @param int                     $total_jobs_count
         *
         * @return array
         */
        public function build(\WPML_TM_Jobs_Collection $jobs, $total_jobs_count)
        {
        }
        /**
         * @param WPML_TM_Job_Entity $job
         *
         * @return array
         */
        private function map_job(\WPML_TM_Job_Entity $job)
        {
        }
    }
    class WPML_TM_Rest_Jobs_Columns
    {
        /**
         * @return array
         */
        public static function get_columns()
        {
        }
        /**
         * @return array
         */
        public static function get_sortable()
        {
        }
    }
    class WPML_TM_Rest_Jobs_Package_Helper_Factory
    {
        /** @var WPML_Package_Helper */
        private $package_helper = \false;
        /**
         * @return null|WPML_Package_Helper
         */
        public function create()
        {
        }
    }
    class WPML_TM_Rest_Jobs_Element_Info
    {
        /** @var WPML_TM_Rest_Jobs_Package_Helper_Factory */
        private $package_helper_factory;
        /**
         * @param WPML_TM_Rest_Jobs_Package_Helper_Factory $package_helper_factory
         */
        public function __construct(\WPML_TM_Rest_Jobs_Package_Helper_Factory $package_helper_factory)
        {
        }
        /**
         * @param  WPML_TM_Job_Entity  $job
         *
         * @return array
         */
        public function get(\WPML_TM_Job_Entity $job)
        {
        }
        /**
         * @param int $id
         *
         * @return array
         */
        private function get_for_post($id)
        {
        }
        /**
         * @param int $id
         *
         * @return array
         */
        private function get_for_package($id)
        {
        }
        /**
         * @param string $title
         *
         * @return array
         */
        private function get_for_title($title)
        {
        }
    }
    class WPML_TM_Rest_Jobs_Criteria_Parser
    {
        /**
         * @param WP_REST_Request $request
         *
         * @return WPML_TM_Jobs_Search_Params
         */
        public function build_criteria(\WP_REST_Request $request)
        {
        }
        /**
         * @param WPML_TM_Jobs_Search_Params $params
         * @param WP_REST_Request            $request
         *
         * @return WPML_TM_Jobs_Search_Params
         */
        private function set_scope(\WPML_TM_Jobs_Search_Params $params, \WP_REST_Request $request)
        {
        }
        /**
         * @param WPML_TM_Jobs_Search_Params $params
         * @param WP_REST_Request            $request
         *
         * @return WPML_TM_Jobs_Search_Params
         */
        private function set_pagination(\WPML_TM_Jobs_Search_Params $params, \WP_REST_Request $request)
        {
        }
        private function set_filters(\WPML_TM_Jobs_Search_Params $params, \WP_REST_Request $request)
        {
        }
        private function set_sorting(\WPML_TM_Jobs_Search_Params $params, \WP_REST_Request $request)
        {
        }
        /**
         * @param array $request_param
         *
         * @return WPML_TM_Jobs_Sorting_Param[]
         */
        private function build_sorting_params(array $request_param)
        {
        }
    }
    class WPML_TM_Rest_Job_Progress
    {
        /** @var wpdb */
        private $wpdb;
        public function __construct()
        {
        }
        /**
         * @param WPML_TM_Job_Entity $job
         *
         * @return string
         */
        public function get(\WPML_TM_Job_Entity $job)
        {
        }
    }
    class WPML_TM_Rest_Jobs_Translation_Service
    {
        /** @var WPML_WP_Cache */
        private $cache;
        /**
         * @param WPML_WP_Cache $cache
         */
        public function __construct(\WPML_WP_Cache $cache)
        {
        }
        /**
         * @param string|int $service_id
         *
         * @return string
         */
        public function get_name($service_id)
        {
        }
        private function get_translation_service($service_id)
        {
        }
        /**
         * @return WPML_TM_Rest_Jobs_Translation_Service
         */
        public static function create()
        {
        }
    }
    class WPML_TM_Rest_Job_Translator_Name
    {
        public function get($translator_id)
        {
        }
    }
    class WPML_TM_Rest_Jobs_Language_Names
    {
        /** @var SitePress */
        private $sitepress;
        /** @var array */
        private $active_languages;
        /**
         * @param SitePress $sitepress
         */
        public function __construct(\SitePress $sitepress)
        {
        }
        /**
         * @param string $code
         *
         * @return string
         */
        public function get($code)
        {
        }
        /**
         * @return array
         */
        public function get_active_languages()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_REST_Settings_Translation_Editor extends \WPML_REST_Base
    {
        private $sitepress;
        /**
         * WPML_TM_REST_AMS_Clients constructor.
         *
         * @param SitePress $sitepress
         */
        public function __construct(\SitePress $sitepress)
        {
        }
        function add_hooks()
        {
        }
        function register_routes()
        {
        }
        public function get_allowed_capabilities(\WP_REST_Request $request)
        {
        }
        /**
         * @param WP_REST_Request $request
         *
         * @return array|WP_Error
         */
        public function set_translation_editor(\WP_REST_Request $request)
        {
        }
        public function validate_editor_type($value, $request, $key)
        {
        }
    }
    /**
     * Class WPML_TF_XML_RPC_Feedback_Update
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_XML_RPC_Feedback_Update
    {
        /** @var WPML_TF_Data_Object_Storage $feedback_storage */
        private $feedback_storage;
        /** @var WPML_TP_Project $tp_project */
        private $tp_project;
        public function __construct(\WPML_TF_Data_Object_Storage $feedback_storage, \WPML_TP_Project $tp_project)
        {
        }
        public function set_status(array $args)
        {
        }
        /**
         * @param array $args
         *
         * @return bool
         */
        private function valid_arguments(array $args)
        {
        }
        /**
         * @param int $tp_feedback_id
         *
         * @return null|WPML_TF_Feedback
         */
        private function get_feedback($tp_feedback_id)
        {
        }
    }
    /**
     * Class WPML_TF_Translation_Service_Change_Hooks
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Translation_Service_Change_Hooks implements \IWPML_Action
    {
        /** @var WPML_TF_Settings_Read $settings_read */
        private $settings_read;
        /** @var WPML_TF_Settings_Write $settings_write */
        private $settings_write;
        /** @var WPML_TF_TP_Ratings_Synchronize_Factory $tp_ratings_synchronize_factory */
        private $tp_ratings_synchronize_factory;
        public function __construct(\WPML_TF_Settings_Read $settings_read, \WPML_TF_Settings_Write $settings_write, \WPML_TF_TP_Ratings_Synchronize_Factory $tp_ratings_synchronize_factory)
        {
        }
        public function add_hooks()
        {
        }
        public function before_set_translation_service_callback(\stdClass $service)
        {
        }
        private function cleanup_pending_ratings_queue()
        {
        }
        private function disable_tf_if_not_allowed_by_ts(\stdClass $service)
        {
        }
    }
    /**
     * Class WPML_TF_XML_RPC_Hooks
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_XML_RPC_Hooks implements \IWPML_Action
    {
        /** @var WPML_TF_XML_RPC_Feedback_Update_Factory $xml_rpc_feedback_update_factory */
        private $xml_rpc_feedback_update_factory;
        /** @var WPML_WP_API $wp_api */
        private $wp_api;
        public function __construct(\WPML_TF_XML_RPC_Feedback_Update_Factory $xml_rpc_feedback_update_factory, \WPML_WP_API $wp_api)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param array $methods
         *
         * @return array
         */
        public function add_tf_xmlrpc_methods($methods)
        {
        }
        /** @param array $args */
        public function update_feedback_status(array $args)
        {
        }
    }
    /**
     * Class WPML_TM_TF_Feedback_List_Hooks
     *
     * @author OnTheGoSystems
     */
    class WPML_TM_TF_Feedback_List_Hooks implements \IWPML_Action
    {
        public function add_hooks()
        {
        }
        /**
         * @param int|bool $use_translation_editor
         *
         * @return int|bool
         */
        public function maybe_force_to_use_translation_editor($use_translation_editor)
        {
        }
    }
    /**
     * Class WPML_TF_Translation_Queue_Hooks
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Translation_Queue_Hooks implements \IWPML_Action
    {
        /** @var WPML_TF_Data_Object_Storage $feedback_storage */
        private $feedback_storage;
        public function __construct(\WPML_TF_Data_Object_Storage $feedback_storage)
        {
        }
        public function add_hooks()
        {
        }
        public function add_reviewer_to_allowed_translators(array $allowed_translators, \WPML_Translation_Job $translation_job)
        {
        }
    }
    /**
     * Class WPML_TF_XML_RPC_Feedback_Update_Factory
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_XML_RPC_Feedback_Update_Factory
    {
        /** @return WPML_TF_XML_RPC_Feedback_Update */
        public function create()
        {
        }
    }
    /**
     * Class WPML_TM_TF_AJAX_Feedback_List_Hooks_Factory
     *
     * @author OnTheGoSystems
     */
    class WPML_TM_TF_AJAX_Feedback_List_Hooks_Factory implements \IWPML_AJAX_Action_Loader
    {
        /** @return WPML_TM_TF_Feedback_List_Hooks */
        public function create()
        {
        }
    }
    /**
     * Class WPML_TF_Translation_Service_Change_Hooks_Factory
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Translation_Service_Change_Hooks_Factory implements \IWPML_Backend_Action_Loader
    {
        /** @return WPML_TF_Translation_Service_Change_Hooks */
        public function create()
        {
        }
    }
    /**
     * Class WPML_TF_Translation_Queue_Hooks_Factory
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Translation_Queue_Hooks_Factory extends \WPML_Current_Screen_Loader_Factory
    {
        /** @return string */
        protected function get_screen_regex()
        {
        }
        /** @return WPML_TF_Translation_Queue_Hooks */
        protected function create_hooks()
        {
        }
    }
    /**
     * Class WPML_TF_Common_Hooks_Factory
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_WP_Cron_Events_Factory implements \IWPML_Backend_Action_Loader, \IWPML_Frontend_Action_Loader
    {
        /** @return WPML_TF_WP_Cron_Events */
        public function create()
        {
        }
    }
    /**
     * Class WPML_TM_TF_Feedback_List_Hooks_Factory
     *
     * @author OnTheGoSystems
     */
    class WPML_TM_TF_Feedback_List_Hooks_Factory extends \WPML_Current_Screen_Loader_Factory
    {
        /** @return string */
        protected function get_screen_regex()
        {
        }
        /** @return WPML_TM_TF_Feedback_List_Hooks */
        protected function create_hooks()
        {
        }
    }
    /**
     * Class WPML_TF_XML_RPC_Hooks_Factory
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_XML_RPC_Hooks_Factory implements \IWPML_Frontend_Action_Loader
    {
        /** @return WPML_TF_XML_RPC_Hooks */
        public function create()
        {
        }
    }
    /**
     * Class WPML_TF_TP_Ratings_Synchronize
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_TP_Ratings_Synchronize_Factory
    {
        /**
         * @return WPML_TF_TP_Ratings_Synchronize
         */
        public function create()
        {
        }
    }
    /**
     * Class WPML_TM_TF_Module
     *
     * @author OnTheGoSystems
     */
    class WPML_TM_TF_Module
    {
        /** @var WPML_Action_Filter_Loader $action_filter_loader */
        private $action_filter_loader;
        /** @var WPML_TF_Settings $settings */
        private $settings;
        /**
         * WPML_TF_Module constructor.
         *
         * @param WPML_Action_Filter_Loader $action_filter_loader
         * @param WPML_TF_Settings          $settings
         */
        public function __construct(\WPML_Action_Filter_Loader $action_filter_loader, \WPML_TF_Settings $settings)
        {
        }
        public function run()
        {
        }
        /**
         * @return array
         */
        private function get_actions_to_load_always()
        {
        }
        /**
         * @return array
         */
        private function get_actions_to_load_when_module_enabled()
        {
        }
    }
    /**
     * Class WPML_TF_WP_Cron_Events
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_WP_Cron_Events implements \IWPML_Action
    {
        const SYNCHRONIZE_RATINGS_EVENT = 'wpml_tf_synchronize_ratings_event';
        /** @var WPML_TF_Settings_Read $settings_read */
        private $settings_read;
        /** @var WPML_TF_Settings $settings */
        private $settings;
        /** @var WPML_TF_TP_Ratings_Synchronize_Factory $ratings_synchronize_factory */
        private $ratings_synchronize_factory;
        /**
         * WPML_TF_WP_Cron_Events constructor.
         *
         * @param WPML_TF_Settings_Read                  $settings_read
         * @param WPML_TF_TP_Ratings_Synchronize_Factory $ratings_synchronize_factory
         */
        public function __construct(\WPML_TF_Settings_Read $settings_read, \WPML_TF_TP_Ratings_Synchronize_Factory $ratings_synchronize_factory)
        {
        }
        public function add_hooks()
        {
        }
        public function init_action()
        {
        }
        private function add_synchronize_ratings_event()
        {
        }
        private function remove_synchronize_ratings_event()
        {
        }
        public function synchronize_ratings()
        {
        }
        /** @return WPML_TF_Settings */
        private function get_settings()
        {
        }
    }
    /**
     * Class WPML_TF_TP_Ratings_Synchronize
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_TP_Ratings_Synchronize
    {
        const MAX_RATINGS_TO_SYNCHRONIZE = 5;
        const PENDING_SYNC_RATING_IDS_OPTION = 'wpml_tf_pending_sync_rating_ids';
        const MAX_ATTEMPTS_TO_SYNC = 3;
        /** @var WPML_TF_Data_Object_Storage $feedback_storage */
        private $feedback_storage;
        /** @var WPML_TP_API_TF_Ratings $tp_ratings */
        private $tp_ratings;
        /** @var array $pending_ids */
        private $pending_ids;
        /**
         * WPML_TF_TP_Ratings_Synchronize constructor.
         *
         * @param WPML_TF_Data_Object_Storage $feedback_storage
         * @param WPML_TP_API_TF_Ratings      $tp_ratings
         */
        public function __construct(\WPML_TF_Data_Object_Storage $feedback_storage, \WPML_TP_API_TF_Ratings $tp_ratings)
        {
        }
        /** @param bool $clear_all_pending_ratings */
        public function run($clear_all_pending_ratings = \false)
        {
        }
        private function set_tp_rating_id(\WPML_TF_Feedback $feedback, $tp_rating_id)
        {
        }
        private function handle_pending_rating_sync(\WPML_TF_Feedback $feedback)
        {
        }
        /**
         * @param int $id
         *
         * @return bool
         */
        private function exceeds_max_attempts($id)
        {
        }
        /** @param int $id */
        private function increment_attempts($id)
        {
        }
    }
    class WPML_TM_Post_Edit_TM_Editor_Mode
    {
        const POST_META_KEY_USE_NATIVE = '_wpml_post_translation_editor_native';
        const TM_KEY_FOR_POST_TYPE_USE_NATIVE = 'post_translation_editor_native_for_post_type';
        const TM_KEY_GLOBAL_USE_NATIVE = 'post_translation_editor_native';
        /**
         * Check post meta first
         * Then check setting for post type
         * Then finally check global setting
         *
         * @param SitePress $sitepress
         * @param $post
         *
         * @return bool
         */
        public static function is_using_tm_editor(\SitePress $sitepress, $post_id)
        {
        }
        /**
         * @param SitePress $sitepress
         * @param int       $post_id
         *
         * @return int
         */
        private static function get_source_id(\SitePress $sitepress, $post_id)
        {
        }
        /**
         * @param SitePress $sitepress
         *
         * @return array
         */
        private static function init_settings(\SitePress $sitepress)
        {
        }
        /**
         * @param null|string $post_type
         */
        public static function delete_all_posts_option($post_type = \null)
        {
        }
    }
    class WPML_TM_Post_Edit_TM_Editor_Select_Factory implements \IWPML_Backend_Action_Loader, \IWPML_AJAX_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_TM_Post_Edit_TM_Editor_Select implements \IWPML_Action
    {
        const SCRIPT_HANDLE = 'wpml-post-edit-tm-mode';
        const NONCE_ACTION = 'wpml-tm-editor-mode';
        /** @var SitePress $sitepress */
        private $sitepress;
        public function __construct(\SitePress $sitepress)
        {
        }
        public function add_hooks()
        {
        }
        public function enqueue_scripts()
        {
        }
        public function add_ui(\WP_Post $post)
        {
        }
        private function prevent_displaying_ui_twice()
        {
        }
        private function add_checkbox(\WP_Post $post)
        {
        }
        private function add_dialog(\WP_Post $post)
        {
        }
        public function save_mode()
        {
        }
    }
    class WPML_TM_Translation_Batch_Factory
    {
        /** @var  WPML_Translation_Basket $basket */
        private $basket;
        /**
         * @param WPML_Translation_Basket $basket
         */
        public function __construct(\WPML_Translation_Basket $basket)
        {
        }
        /**
         * @param array $batch_data
         *
         * @return WPML_TM_Translation_Batch
         */
        public function create(array $batch_data)
        {
        }
        private function get_elements(array $batch_data, array $translators_target_languages)
        {
        }
        /**
         * The expected format is "2017-09-28"
         *
         * @param string $date
         *
         * @return bool
         */
        private function validate_deadline($date)
        {
        }
    }
    class WPML_TM_Translation_Batch_Element
    {
        /** @var int */
        private $element_id;
        /** @var string */
        private $element_type;
        /** @var string */
        private $source_lang;
        /** @var array */
        private $target_langs;
        /** @var $media_to_translations */
        private $media_to_translations;
        /**
         * @param int    $element_id
         * @param string $element_type
         * @param string $source_lang
         * @param array  $target_languages
         * @param array  $media_to_translations
         */
        public function __construct($element_id, $element_type, $source_lang, array $target_languages, array $media_to_translations = array())
        {
        }
        /**
         * @return int
         */
        public function get_element_id()
        {
        }
        /**
         * @return string
         */
        public function get_element_type()
        {
        }
        /**
         * @return string
         */
        public function get_source_lang()
        {
        }
        /**
         * @return string[]
         */
        public function get_target_langs()
        {
        }
        /**
         * @return mixed
         */
        public function get_media_to_translations()
        {
        }
    }
    class WPML_TM_Translation_Batch
    {
        /** @var WPML_TM_Translation_Batch_Element[] */
        private $elements;
        /** @var string */
        private $basket_name;
        /** @var array */
        private $translators;
        /** @var DateTime */
        private $deadline;
        /**
         * @param WPML_TM_Translation_Batch_Element[] $elements
         * @param string                              $basket_name
         * @param array                               $translators
         * @param DateTime                            $deadline
         */
        public function __construct(array $elements, $basket_name, array $translators, \DateTime $deadline = \null)
        {
        }
        /**
         * @return WPML_TM_Translation_Batch_Element[]
         */
        public function get_elements()
        {
        }
        public function add_element(\WPML_TM_Translation_Batch_Element $element)
        {
        }
        /**
         * @param string $type
         *
         * @return WPML_TM_Translation_Batch_Element[]
         */
        public function get_elements_by_type($type)
        {
        }
        /**
         * @return string
         */
        public function get_basket_name()
        {
        }
        /**
         * @return array
         */
        public function get_translators()
        {
        }
        public function get_translator($lang)
        {
        }
        /**
         * @return DateTime
         */
        public function get_deadline()
        {
        }
        /**
         * @return array
         */
        public function get_target_languages()
        {
        }
        /**
         * @return array
         */
        public function get_remote_target_languages()
        {
        }
        private function is_remote_target_language($lang)
        {
        }
        /**
         * @return array
         */
        public function get_batch_options()
        {
        }
    }
    class WPML_TM_Job_Element_Entity
    {
        /** @var int */
        private $id;
        /** @var int */
        private $content_id;
        /** @var int */
        private $timestamp;
        /** @var string */
        private $type;
        /** @var string */
        private $format;
        /** @var bool */
        private $translatable;
        /** @var string */
        private $data;
        /** @var string */
        private $data_translated;
        /** @var bool */
        private $finished;
        /**
         * @param int    $id
         * @param int    $content_id
         * @param int    $timestamp
         * @param string $type
         * @param string $format
         * @param bool   $is_translatable
         * @param string $data
         * @param string $data_translated
         * @param bool   $finished
         */
        public function __construct($id, $content_id, $timestamp, $type, $format, $is_translatable, $data, $data_translated, $finished)
        {
        }
        /**
         * @return int
         */
        public function get_id()
        {
        }
        /**
         * @return int
         */
        public function get_content_id()
        {
        }
        /**
         * @return int
         */
        public function get_timestamp()
        {
        }
        /**
         * @return string
         */
        public function get_type()
        {
        }
        /**
         * @return string
         */
        public function get_format()
        {
        }
        /**
         * @return bool
         */
        public function is_translatable()
        {
        }
        /**
         * @return string
         */
        public function get_data()
        {
        }
        /**
         * @return string
         */
        public function get_data_translated()
        {
        }
        /**
         * @return bool
         */
        public function is_finished()
        {
        }
    }
    class WPML_TM_Jobs_Batch
    {
        /** @var int */
        private $id;
        /** @var string */
        private $name;
        /** @var int|null */
        private $tp_id;
        /**
         * @param int      $id
         * @param string   $name
         * @param int|null $tp_id
         */
        public function __construct($id, $name, $tp_id = \null)
        {
        }
        /**
         * @return int
         */
        public function get_id()
        {
        }
        /**
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * @return int|null
         */
        public function get_tp_id()
        {
        }
    }
    class WPML_TM_Job_Elements_Repository
    {
        /** @var wpdb */
        private $wpdb;
        /**
         * @param wpdb $wpdb
         */
        public function __construct(\wpdb $wpdb)
        {
        }
        /**
         * @param WPML_TM_Post_Job_Entity $job
         *
         * @return WPML_TM_Job_Element_Entity[]
         */
        public function get_job_elements(\WPML_TM_Post_Job_Entity $job)
        {
        }
        /**
         * @param stdClass $raw_data
         *
         * @return WPML_TM_Job_Element_Entity
         */
        private function build_element_entity(\stdClass $raw_data)
        {
        }
    }
}
namespace WPML\TM\Jobs\Utils {
    class ElementLink
    {
        /** @var WPML_TM_Post_Link_Factory $postLinkFactory */
        private $postLinkFactory;
        /** @var WPML_Post_Translation $postTranslation */
        private $postTranslation;
        public function __construct(\WPML_TM_Post_Link_Factory $postLinkFactory, \WPML_Post_Translation $postTranslation)
        {
        }
        /**
         * @param stdClass $job
         *
         * @return string
         */
        public function getOriginal(\stdClass $job)
        {
        }
        /**
         * @param stdClass $job
         *
         * @return string
         */
        public function getTranslation(\stdClass $job)
        {
        }
        /**
         * @param stdClass    $job
         * @param string      $viewText
         * @param string|null $elementId
         *
         * @return mixed|string|void
         */
        private function get(\stdClass $job, $viewText, $elementId = null)
        {
        }
        /**
         * @param string $elementTypePrefix
         *
         * @return bool
         */
        private function isExternalType($elementTypePrefix)
        {
        }
    }
    class ElementLinkFactory
    {
        public static function create()
        {
        }
    }
}
namespace {
    class WPML_TM_Job_Entity
    {
        const POST_TYPE = 'post';
        const STRING_TYPE = 'string';
        const STRING_BATCH = 'st-batch_strings';
        const PACKAGE_TYPE = 'package';
        /** @var int */
        private $id;
        /** @var string */
        private $type;
        /** @var int */
        private $tp_id;
        /** @var WPML_TM_Jobs_Batch */
        private $batch;
        /** @var int */
        private $status;
        /** @var int */
        private $original_element_id;
        /** @var string */
        private $source_language;
        /** @var string */
        private $target_language;
        /** @var string */
        private $translation_service;
        /** @var DateTime */
        private $sent_date;
        /** @var DateTime|null */
        private $deadline;
        /** @var int */
        private $translator_id;
        /** @var int */
        private $revision;
        /** @var WPML_TM_Job_TS_Status */
        private $ts_status;
        /** @var bool */
        private $needs_update;
        /** @var bool  */
        private $has_completed_translation = \false;
        /** @var string */
        private $title;
        /**
         * @param int                $id
         * @param string             $type
         * @param int                $tp_id
         * @param WPML_TM_Jobs_Batch $batch
         * @param int                $status
         */
        public function __construct($id, $type, $tp_id, \WPML_TM_Jobs_Batch $batch, $status)
        {
        }
        /**
         * @return int
         */
        public function get_id()
        {
        }
        /**
         * @return string
         */
        public function get_type()
        {
        }
        /**
         * @return int
         */
        public function get_tp_id()
        {
        }
        /**
         * @return WPML_TM_Jobs_Batch
         */
        public function get_batch()
        {
        }
        /**
         * @return int
         */
        public function get_status()
        {
        }
        /**
         * @param int $status
         */
        public function set_status($status)
        {
        }
        /**
         * @return int
         */
        public function get_original_element_id()
        {
        }
        /**
         * @param int $original_element_id
         */
        public function set_original_element_id($original_element_id)
        {
        }
        /**
         * @return string
         */
        public function get_source_language()
        {
        }
        /**
         * @param string $source_language
         */
        public function set_source_language($source_language)
        {
        }
        /**
         * @return string
         */
        public function get_target_language()
        {
        }
        /**
         * @param string $target_language
         */
        public function set_target_language($target_language)
        {
        }
        /**
         * @return string
         */
        public function get_translation_service()
        {
        }
        /**
         * @param string $translation_service
         */
        public function set_translation_service($translation_service)
        {
        }
        /**
         * @return DateTime
         */
        public function get_sent_date()
        {
        }
        /**
         * @param DateTime $sent_date
         */
        public function set_sent_date(\DateTime $sent_date)
        {
        }
        /**
         * @param int $tp_id
         */
        public function set_tp_id($tp_id)
        {
        }
        /**
         * @return DateTime|null
         */
        public function get_deadline()
        {
        }
        /**
         * @param DateTime|null $deadline
         */
        public function set_deadline(\DateTime $deadline = \null)
        {
        }
        /**
         * @return int
         */
        public function get_translator_id()
        {
        }
        /**
         * @param int $translator_id
         *
         * @return self
         */
        public function set_translator_id($translator_id)
        {
        }
        /**
         * @return int
         */
        public function get_revision()
        {
        }
        /**
         * @param int $revision
         */
        public function set_revision($revision)
        {
        }
        /**
         * @return WPML_TM_Job_TS_Status
         */
        public function get_ts_status()
        {
        }
        /**
         * @param WPML_TM_Job_TS_Status|string $ts_status
         */
        public function set_ts_status($ts_status)
        {
        }
        /**
         * @param WPML_TM_Job_Entity $job
         *
         * @return bool
         */
        public function is_equal(\WPML_TM_Job_Entity $job)
        {
        }
        /**
         * @return bool
         */
        public function does_need_update()
        {
        }
        /**
         * @param bool $needs_update
         */
        public function set_needs_update($needs_update)
        {
        }
        /**
         * @return bool
         */
        public function has_completed_translation()
        {
        }
        /**
         * @param bool $has_completed_translation
         */
        public function set_has_completed_translation($has_completed_translation)
        {
        }
        /**
         * @return string
         */
        public function get_title()
        {
        }
        /**
         * @param  string  $title
         */
        public function set_title($title)
        {
        }
        /**
         * @param string $type
         *
         * @return bool
         */
        public static function is_type_valid($type)
        {
        }
    }
    class WPML_TM_Post_Job_Entity extends \WPML_TM_Job_Entity
    {
        /** @var WPML_TM_Job_Element_Entity[]|callable */
        private $elements;
        /** @var int */
        private $translate_job_id;
        /** @var string */
        private $editor;
        /** @var int */
        private $editor_job_id;
        /** @var null|DateTime */
        private $completed_date;
        public function __construct($id, $type, $tp_id, $batch, $status, $elements)
        {
        }
        /**
         * @return WPML_TM_Job_Element_Entity[]
         */
        public function get_elements()
        {
        }
        /**
         * @return int
         */
        public function get_translate_job_id()
        {
        }
        /**
         * @param int $translate_job_id
         */
        public function set_translate_job_id($translate_job_id)
        {
        }
        /**
         * @return string
         */
        public function get_editor()
        {
        }
        /**
         * @param string $editor
         */
        public function set_editor($editor)
        {
        }
        /**
         * @return int
         */
        public function get_editor_job_id()
        {
        }
        /**
         * @param int $editor_job_id
         */
        public function set_editor_job_id($editor_job_id)
        {
        }
        /**
         * @return bool
         */
        public function is_ate_job()
        {
        }
        /**
         * @return DateTime|null
         */
        public function get_completed_date()
        {
        }
        /**
         * @param DateTime|null $completed_date
         */
        public function set_completed_date(\DateTime $completed_date = \null)
        {
        }
    }
    class WPML_TM_Jobs_Collection implements \IteratorAggregate, \Countable
    {
        /** @var WPML_TM_Job_Entity[] */
        private $jobs = array();
        public function __construct(array $jobs)
        {
        }
        /**
         * @param WPML_TM_Job_Entity $job
         */
        private function add(\WPML_TM_Job_Entity $job)
        {
        }
        /**
         * @param int $tp_id
         *
         * @return null|WPML_TM_Job_Entity
         */
        public function get_by_tp_id($tp_id)
        {
        }
        /**
         * @param callable $callback
         *
         * @return WPML_TM_Jobs_Collection
         */
        public function filter($callback)
        {
        }
        /**
         * @param array|int $status
         * @param bool      $exclude
         *
         * @return WPML_TM_Jobs_Collection
         */
        public function filter_by_status($status, $exclude = \false)
        {
        }
        /**
         * @param callable $callback
         * @param bool     $return_job_collection
         *
         * @return array|WPML_TM_Jobs_Collection
         */
        public function map($callback, $return_job_collection = \false)
        {
        }
        public function map_to_property($property)
        {
        }
        /**
         * @param $jobs
         *
         * @return WPML_TM_Jobs_Collection
         */
        public function append($jobs)
        {
        }
        /**
         * @return ArrayIterator
         */
        public function getIterator()
        {
        }
        public function toArray()
        {
        }
        public function count()
        {
        }
    }
    class WPML_TM_Jobs_Needs_Update_Param
    {
        const INCLUDE_NEEDS_UPDATE = 'include';
        const EXCLUDE_NEEDS_UPDATE = 'exclude';
        /** @var string */
        private $value;
        /**
         * @param string $value
         */
        public function __construct($value)
        {
        }
        /**
         * @return bool
         */
        public function is_needs_update_excluded()
        {
        }
        /**
         * @return bool
         */
        public function is_needs_update_included()
        {
        }
        /**
         * @param string $value
         *
         * @return bool
         */
        public static function is_valid($value)
        {
        }
    }
    class WPML_TM_Jobs_Repository
    {
        /** @var wpdb */
        private $wpdb;
        /** @var Query */
        private $query_builder;
        /** @var WPML_TM_Job_Elements_Repository */
        private $elements_repository;
        /**
         * @param wpdb                            $wpdb
         * @param Query              $query_builder
         * @param WPML_TM_Job_Elements_Repository $elements_repository
         */
        public function __construct(\wpdb $wpdb, \WPML\TM\Jobs\Query\Query $query_builder, \WPML_TM_Job_Elements_Repository $elements_repository)
        {
        }
        /**
         * @param WPML_TM_Jobs_Search_Params $params
         *
         * @return WPML_TM_Jobs_Collection
         */
        public function get(\WPML_TM_Jobs_Search_Params $params)
        {
        }
        /**
         * @param WPML_TM_Jobs_Search_Params $params
         *
         * @return int
         */
        public function get_count(\WPML_TM_Jobs_Search_Params $params)
        {
        }
        /**
         * @param int    $local_job_id
         * @param string $job_type
         *
         * @throws InvalidArgumentException
         * @return WPML_TM_Job_Entity|false
         */
        public function get_job($local_job_id, $job_type)
        {
        }
        /**
         * @param stdClass $raw_data
         *
         * @return WPML_TM_Job_Entity
         */
        private function build_job_entity(\stdClass $raw_data)
        {
        }
        /**
         * @param stdClass $raw_data
         *
         * @return DateTime|null
         */
        private function get_deadline(\stdClass $raw_data)
        {
        }
    }
    class WPML_TM_Jobs_Sorting_Param
    {
        /** @var string */
        private $column;
        /** @var string */
        private $direction;
        /**
         * @param string $column
         * @param string $direction
         */
        public function __construct($column, $direction = 'asc')
        {
        }
        /**
         * @return string
         */
        public function get_column()
        {
        }
        /**
         * @return string
         */
        public function get_direction()
        {
        }
    }
}
namespace WPML\TM\Jobs\Query {
    class LimitQueryHelper
    {
        /**
         * @param WPML_TM_Jobs_Search_Params $params
         *
         * @return string
         */
        public function get_limit(\WPML_TM_Jobs_Search_Params $params)
        {
        }
    }
    interface Query
    {
        /**
         * @param WPML_TM_Jobs_Search_Params $params
         *
         * @return string
         */
        public function get_data_query(\WPML_TM_Jobs_Search_Params $params);
        /**
         * @param WPML_TM_Jobs_Search_Params $params
         *
         * @return int
         */
        public function get_count_query(\WPML_TM_Jobs_Search_Params $params);
    }
    abstract class AbstractQuery implements \WPML\TM\Jobs\Query\Query
    {
        /** @var wpdb */
        protected $wpdb;
        /** @var QueryBuilder */
        protected $query_builder;
        /** @var string */
        protected $title_column = 'posts.post_title';
        /** @var string */
        protected $batch_name_column = 'batches.batch_name';
        /**
         * @param wpdb                       $wpdb
         * @param QueryBuilder $query_builder
         */
        public function __construct(\wpdb $wpdb, \WPML\TM\Jobs\Query\QueryBuilder $query_builder)
        {
        }
        public function get_data_query(\WPML_TM_Jobs_Search_Params $params)
        {
        }
        public function get_count_query(\WPML_TM_Jobs_Search_Params $params)
        {
        }
        /**
         * @param WPML_TM_Jobs_Search_Params $params
         * @param array                      $columns
         *
         * @return string
         */
        protected function build_query(\WPML_TM_Jobs_Search_Params $params, array $columns)
        {
        }
        /**
         * @param WPML_TM_Jobs_Search_Params $params
         *
         * @return bool
         */
        protected function check_job_type(\WPML_TM_Jobs_Search_Params $params)
        {
        }
        /**
         * @return string
         */
        protected abstract function get_type();
        protected function define_joins(\WPML\TM\Jobs\Query\QueryBuilder $query_builder)
        {
        }
        protected abstract function add_resource_join(\WPML\TM\Jobs\Query\QueryBuilder $query_builder);
        protected function define_filters(\WPML\TM\Jobs\Query\QueryBuilder $query_builder, \WPML_TM_Jobs_Search_Params $params)
        {
        }
        private function set_status_filter(\WPML\TM\Jobs\Query\QueryBuilder $query_builder, \WPML_TM_Jobs_Search_Params $params)
        {
        }
        private function set_scope_filter(\WPML\TM\Jobs\Query\QueryBuilder $query_builder, \WPML_TM_Jobs_Search_Params $params)
        {
        }
    }
    class StringsBatchQuery extends \WPML\TM\Jobs\Query\AbstractQuery
    {
        /** @var string */
        protected $title_column = 'translation_batches.batch_name';
        protected function add_resource_join(\WPML\TM\Jobs\Query\QueryBuilder $query_builder)
        {
        }
        protected function get_type()
        {
        }
    }
    class OrderQueryHelper
    {
        public function get_order(\WPML_TM_Jobs_Search_Params $params)
        {
        }
        /**
         * @param WPML_TM_Jobs_Search_Params $params
         *
         * @return array
         */
        private function map_sort_parameters(\WPML_TM_Jobs_Search_Params $params)
        {
        }
    }
    class PostQuery extends \WPML\TM\Jobs\Query\AbstractQuery
    {
        /**
         * @param  QueryBuilder  $query_builder
         */
        protected function add_resource_join(\WPML\TM\Jobs\Query\QueryBuilder $query_builder)
        {
        }
        protected function get_type()
        {
        }
    }
    class PackageQuery extends \WPML\TM\Jobs\Query\PostQuery
    {
        /** @var string */
        protected $title_column = 'string_packages.title';
        protected function add_resource_join(\WPML\TM\Jobs\Query\QueryBuilder $query_builder)
        {
        }
        protected function get_type()
        {
        }
    }
    class StringQuery implements \WPML\TM\Jobs\Query\Query
    {
        /**
         * WP database instance
         *
         * @var wpdb
         */
        protected $wpdb;
        /**
         * Query builder instance
         *
         * @var QueryBuilder
         */
        protected $query_builder;
        /** @var string */
        protected $batch_name_column = 'batches.batch_name';
        /**
         * @param wpdb                       $wpdb          WP database instance.
         * @param QueryBuilder $query_builder Query builder instance.
         */
        public function __construct(\wpdb $wpdb, \WPML\TM\Jobs\Query\QueryBuilder $query_builder)
        {
        }
        /**
         * Get data query
         *
         * @param WPML_TM_Jobs_Search_Params $params Job search params.
         *
         * @return string
         */
        public function get_data_query(\WPML_TM_Jobs_Search_Params $params)
        {
        }
        /**
         * Get count query
         *
         * @param WPML_TM_Jobs_Search_Params $params Job search params.
         *
         * @return int|string
         */
        public function get_count_query(\WPML_TM_Jobs_Search_Params $params)
        {
        }
        /**
         * Build query
         *
         * @param WPML_TM_Jobs_Search_Params $params  Job search params.
         * @param array                      $columns Database columns.
         *
         * @return string
         */
        private function build_query(\WPML_TM_Jobs_Search_Params $params, array $columns)
        {
        }
        /**
         * Check job type.
         *
         * @param WPML_TM_Jobs_Search_Params $params Job search params.
         *
         * @return bool
         */
        protected function check_job_type(\WPML_TM_Jobs_Search_Params $params)
        {
        }
        /**
         * Define joins
         *
         * @param QueryBuilder $query_builder Query builder instance.
         */
        private function define_joins(\WPML\TM\Jobs\Query\QueryBuilder $query_builder)
        {
        }
        /**
         * Define filters
         *
         * @param QueryBuilder $query_builder Query builder instance.
         * @param WPML_TM_Jobs_Search_Params $params Job search params.
         */
        private function define_filters(\WPML\TM\Jobs\Query\QueryBuilder $query_builder, \WPML_TM_Jobs_Search_Params $params)
        {
        }
        private function set_scope_filter(\WPML\TM\Jobs\Query\QueryBuilder $query_builder, \WPML_TM_Jobs_Search_Params $params)
        {
        }
    }
    class CompositeQuery implements \WPML\TM\Jobs\Query\Query
    {
        const METHOD_UNION = 'union';
        const METHOD_COUNT = 'count';
        /**
         * Job queries
         *
         * @var Query[]
         */
        private $queries;
        /**
         * Limit query helper
         *
         * @var LimitQueryHelper
         */
        private $limit_query_helper;
        /**
         * Order query helper
         *
         * @var OrderQueryHelper
         */
        private $order_query_helper;
        /**
         * @param Query[]  $queries      Job queries.
         * @param LimitQueryHelper $limit_helper Limit helper.
         * @param OrderQueryHelper $order_helper Order helper.
         *
         * @throws InvalidArgumentException In case of error.
         */
        public function __construct(array $queries, \WPML\TM\Jobs\Query\LimitQueryHelper $limit_helper, \WPML\TM\Jobs\Query\OrderQueryHelper $order_helper)
        {
        }
        /**
         * Get data query
         *
         * @param WPML_TM_Jobs_Search_Params $params Job search params.
         *
         * @throws InvalidArgumentException In case of error.
         * @return string
         */
        public function get_data_query(\WPML_TM_Jobs_Search_Params $params)
        {
        }
        /**
         * Get count query
         *
         * @param WPML_TM_Jobs_Search_Params $params Job search params.
         *
         * @return int|string
         */
        public function get_count_query(\WPML_TM_Jobs_Search_Params $params)
        {
        }
        /**
         * Get SQL request string
         *
         * @param WPML_TM_Jobs_Search_Params $params Job search params.
         * @param string                     $method Query method.
         *
         * @throws InvalidArgumentException In case of error.
         * @throws RuntimeException In case of error.
         * @return string
         */
        private function get_sql(\WPML_TM_Jobs_Search_Params $params, $method)
        {
        }
        /**
         * Get union
         *
         * @param array $parts Query parts.
         *
         * @return string
         */
        private function get_union(array $parts)
        {
        }
        /**
         * Get count
         *
         * @param array $parts Query parts.
         *
         * @return string
         */
        private function get_count(array $parts)
        {
        }
        /**
         * Is query valid
         *
         * @param mixed $query SQL query.
         *
         * @return bool
         */
        private function is_query_valid($query)
        {
        }
    }
    class QueryBuilder
    {
        /** @var wpdb */
        private $wpdb;
        /** @var LimitQueryHelper */
        protected $limit_helper;
        /** @var OrderQueryHelper */
        protected $order_helper;
        /** @var array */
        private $columns = array();
        /** @var string */
        private $from;
        /** @var array */
        private $joins = array();
        /** @var array */
        private $where = array();
        /** @var string */
        private $order;
        /** @var string */
        private $limit;
        /**
         * @param LimitQueryHelper $limit_helper
         * @param OrderQueryHelper $order_helper
         */
        public function __construct(\WPML\TM\Jobs\Query\LimitQueryHelper $limit_helper, \WPML\TM\Jobs\Query\OrderQueryHelper $order_helper)
        {
        }
        /**
         * @param array $columns
         *
         * @return self
         */
        public function set_columns(array $columns)
        {
        }
        /**
         * @param $column
         *
         * @return self
         */
        public function add_column($column)
        {
        }
        /**
         * @param string $from
         *
         * @return self
         */
        public function set_from($from)
        {
        }
        /**
         * @param $join
         *
         * @return self
         */
        public function add_join($join)
        {
        }
        /**
         * @param                            $column
         * @param WPML_TM_Jobs_Search_Params $params
         *
         * @return self
         */
        public function set_status_filter($column, \WPML_TM_Jobs_Search_Params $params)
        {
        }
        /**
         * @param string     $column
         * @param array|null $values
         *
         * @return $this
         */
        public function set_multi_value_text_filter($column, $values)
        {
        }
        /**
         * @param                            $column
         * @param WPML_TM_Jobs_Search_Params $params
         *
         * @return $this
         */
        public function set_source_language($column, \WPML_TM_Jobs_Search_Params $params)
        {
        }
        /**
         * @param                            $column
         * @param WPML_TM_Jobs_Search_Params $params
         *
         * @return $this
         */
        public function set_target_language($column, \WPML_TM_Jobs_Search_Params $params)
        {
        }
        public function set_translated_by_filter($local_translator_column, $translation_service_column, \WPML_TM_Jobs_Search_Params $params)
        {
        }
        /**
         * @param string $column
         * @param int|int[]    $value
         *
         * @return $this
         */
        public function set_numeric_value_filter($column, $value)
        {
        }
        /**
         * @param                            $column
         * @param WPML_TM_Jobs_Search_Params $params
         *
         * @return $this
         */
        public function set_tp_id_filter($column, \WPML_TM_Jobs_Search_Params $params)
        {
        }
        /**
         * @param string                  $column
         * @param WPML_TM_Jobs_Date_Range $date_range
         *
         * @return self
         */
        public function set_date_range($column, \WPML_TM_Jobs_Date_Range $date_range)
        {
        }
        /**
         * @param string $where
         *
         * @return self
         */
        public function add_AND_where_condition($where)
        {
        }
        /**
         * @param WPML_TM_Jobs_Search_Params $params
         *
         * @return self
         */
        public function set_order(\WPML_TM_Jobs_Search_Params $params)
        {
        }
        /**
         * @param WPML_TM_Jobs_Search_Params $params
         *
         * @return self
         */
        public function set_limit(\WPML_TM_Jobs_Search_Params $params)
        {
        }
        public function build()
        {
        }
    }
}
namespace {
    class WPML_TM_Jobs_Search_Params
    {
        const SCOPE_REMOTE = 'remote';
        const SCOPE_LOCAL = 'local';
        const SCOPE_ALL = 'all';
        const SCOPE_ATE = 'ate';
        private static $scopes = array(self::SCOPE_LOCAL, self::SCOPE_REMOTE, self::SCOPE_ALL, self::SCOPE_ATE);
        /** @var array */
        private $status = array();
        /** @var WPML_TM_Jobs_Needs_Update_Param|null */
        private $needs_update;
        /** @var string */
        private $scope = self::SCOPE_ALL;
        /** @var array */
        private $job_types = array();
        /** @var int[] */
        private $local_job_ids;
        /** @var int */
        private $limit;
        /** @var int */
        private $offset;
        /** @var string[] */
        private $title;
        /** @var string[] */
        private $batch_name;
        /** @var string */
        private $source_language;
        /** @var string[] */
        private $target_language;
        /** @var array */
        private $tp_id = '';
        /** @var WPML_TM_Jobs_Sorting_Param[] */
        private $sorting = array();
        /** @var int */
        private $translated_by;
        /** @var WPML_TM_Jobs_Date_Range */
        private $deadline;
        /** @var WPML_TM_Jobs_Date_Range */
        private $sent;
        /** @var WPML_TM_Jobs_Date_Range */
        private $completed_date;
        /** @var int */
        private $original_element_id;
        public function __construct(array $params = array())
        {
        }
        /**
         * @return array
         */
        public function get_status()
        {
        }
        /**
         * @param array $status
         *
         * @return self
         */
        public function set_status(array $status)
        {
        }
        /**
         * @return string
         */
        public function get_scope()
        {
        }
        /**
         * @return array
         */
        public function get_tp_id()
        {
        }
        /**
         * @param string $scope
         *
         * @retun self
         */
        public function set_scope($scope)
        {
        }
        /**
         * @return array
         */
        public function get_job_types()
        {
        }
        /**
         * @param int|array $tp_id
         *
         * @return $this
         */
        public function set_tp_id($tp_id)
        {
        }
        /**
         * @param string|array $job_types
         *
         * @return self
         */
        public function set_job_types($job_types)
        {
        }
        /**
         * @return int|null
         */
        public function get_first_local_job_id()
        {
        }
        /**
         * @return int[]
         */
        public function get_local_job_ids()
        {
        }
        /**
         * @param int $local_job_id
         *
         * @return self
         */
        public function set_local_job_id($local_job_id)
        {
        }
        /**
         * @param int[] $local_job_ids
         *
         * @return self
         */
        public function set_local_job_ids(array $local_job_ids)
        {
        }
        /**
         * @return int
         */
        public function get_limit()
        {
        }
        /**
         * @param int $limit
         *
         * @return self
         */
        public function set_limit($limit)
        {
        }
        /**
         * @return int
         */
        public function get_offset()
        {
        }
        /**
         * @param int $offset
         *
         * @return self
         */
        public function set_offset($offset)
        {
        }
        /**
         * @return string[]
         */
        public function get_title()
        {
        }
        /**
         * @param array|string $title
         *
         * @return self
         */
        public function set_title($title)
        {
        }
        /**
         * @return string[]
         */
        public function get_batch_name()
        {
        }
        /**
         * @param string[] $batch_name
         */
        public function set_batch_name($batch_name)
        {
        }
        /**
         * @return string
         */
        public function get_source_language()
        {
        }
        /**
         * @param string $source_language
         *
         * @return self
         */
        public function set_source_language($source_language)
        {
        }
        /**
         * @return string[]
         */
        public function get_target_language()
        {
        }
        /**
         * @param array|string $target_language
         *
         * @return self
         */
        public function set_target_language($target_language)
        {
        }
        /**
         * @return WPML_TM_Jobs_Sorting_Param[]
         */
        public function get_sorting()
        {
        }
        /**
         * @param WPML_TM_Jobs_Sorting_Param[] $sorting
         *
         * @return self
         */
        public function set_sorting(array $sorting)
        {
        }
        /**
         * @return int
         */
        public function get_translated_by()
        {
        }
        /**
         * @param int|null $translated_by
         *
         * @return self
         */
        public function set_translated_by($translated_by)
        {
        }
        /**
         * @return WPML_TM_Jobs_Date_Range
         */
        public function get_deadline()
        {
        }
        /**
         * @param WPML_TM_Jobs_Date_Range $deadline
         *
         * @return self
         */
        public function set_deadline(\WPML_TM_Jobs_Date_Range $deadline)
        {
        }
        /**
         * @return WPML_TM_Jobs_Date_Range
         */
        public function get_sent()
        {
        }
        /**
         * @return WPML_TM_Jobs_Date_Range
         */
        public function get_completed_date()
        {
        }
        /**
         * @return int
         */
        public function get_original_element_id()
        {
        }
        /**
         * @param WPML_TM_Jobs_Date_Range $sent
         *
         * @return self
         */
        public function set_sent(\WPML_TM_Jobs_Date_Range $sent)
        {
        }
        /**
         * @param WPML_TM_Jobs_Date_Range $completed_date
         *
         * @return self
         */
        public function set_completed_date(\WPML_TM_Jobs_Date_Range $completed_date)
        {
        }
        /**
         * @param int $original_element_id
         *
         * @return $this
         */
        public function set_original_element_id($original_element_id)
        {
        }
        /**
         * @return WPML_TM_Jobs_Needs_Update_Param|null
         */
        public function get_needs_update()
        {
        }
        /**
         * @param WPML_TM_Jobs_Needs_Update_Param|null $needs_update
         *
         * @return $this
         */
        public function set_needs_update(\WPML_TM_Jobs_Needs_Update_Param $needs_update = \null)
        {
        }
        /**
         * @param mixed $value
         *
         * @return bool
         */
        public static function is_valid_scope($value)
        {
        }
    }
    class WPML_TM_Jobs_Date_Range
    {
        /** @var DateTime|null */
        private $begin;
        /** @var DateTime|null */
        private $end;
        /**
         * Specify how we should treat date values which are NULL
         *
         * @var bool
         */
        private $include_null_date;
        /**
         * @param DateTime|null $begin
         * @param DateTime|null $end
         * @param bool          $include_null_date
         */
        public function __construct(\DateTime $begin = \null, \DateTime $end = \null, $include_null_date = \false)
        {
        }
        /**
         * @return DateTime|null
         */
        public function get_begin()
        {
        }
        /**
         * @return DateTime|null
         */
        public function get_end()
        {
        }
        /**
         * @return bool
         */
        public function is_include_null_date()
        {
        }
    }
    class WPML_TM_Job_TS_Status
    {
        /** @var string */
        private $status;
        /** @var array */
        private $links = array();
        /**
         * WPML_TM_Job_TS_Status constructor.
         *
         * @param string $status
         * @param array  $links
         */
        public function __construct($status, $links)
        {
        }
        /**
         * @return string
         */
        public function get_status()
        {
        }
        /**
         * @return array
         */
        public function get_links()
        {
        }
        public function __toString()
        {
        }
    }
    class WPML_Translation_Proxy_API
    {
        public function get_current_service_name()
        {
        }
        public function has_preferred_translation_service()
        {
        }
    }
    /**
     * Class WPML_Translation_Management
     */
    class WPML_Translation_Management
    {
        const PAGE_SLUG_MANAGEMENT = '/menu/main.php';
        const PAGE_SLUG_SETTINGS = '/menu/settings';
        const PAGE_SLUG_QUEUE = '/menu/translations-queue.php';
        var $load_priority = 200;
        /** @var  SitePress $sitepress */
        protected $sitepress;
        /** @var  WPML_TM_Loader $tm_loader */
        private $tm_loader;
        /** @var  TranslationManagement $tm_instance */
        private $tm_instance;
        /** @var  WPML_Translations_Queue $tm_queue */
        private $tm_queue;
        /** @var WPML_TM_Menus_Management $wpml_tm_menus_management */
        private $wpml_tm_menus_management;
        /** @var WPML_Ajax_Route $ajax_route */
        private $ajax_route;
        /**
         * @var WPML_TP_Translator
         */
        private $wpml_tp_translator;
        /** @var  WPML_UI_Screen_Options_Pagination $dashboard_screen_options */
        private $dashboard_screen_options;
        /**
         * WPML_Translation_Management constructor.
         *
         * @param SitePress $sitepress
         * @param WPML_TM_Loader $tm_loader
         * @param TranslationManagement $tm_instance
         * @param WPML_TP_Translator $wpml_tp_translator
         */
        function __construct($sitepress, $tm_loader, $tm_instance, \WPML_TP_Translator $wpml_tp_translator = \null)
        {
        }
        public function init()
        {
        }
        public function load()
        {
        }
        public function api_hooks()
        {
        }
        /**
         * @return bool `true` if notices were added
         */
        private function notices_added_because_wpml_is_inactive_or_incomplete()
        {
        }
        public function filter_wpml_config_white_list_pages(array $white_list_pages)
        {
        }
        public function maybe_show_wpml_not_installed_warning()
        {
        }
        function trashed_post_actions($post_id)
        {
        }
        function is_jobs_tab()
        {
        }
        function is_translators_tab()
        {
        }
        function is_translation_services_tab()
        {
        }
        function admin_enqueue_scripts()
        {
        }
        function admin_print_styles()
        {
        }
        function translation_service_js_data($data)
        {
        }
        function _no_wpml_warning()
        {
        }
        function _wpml_not_installed_warning()
        {
        }
        function _old_wpml_warning()
        {
        }
        function job_saved_message()
        {
        }
        function job_cancelled_message()
        {
        }
        /**
         * @param string $menu_id
         */
        public function management_menu($menu_id)
        {
        }
        function management_page()
        {
        }
        /**
         * Sets up the menu items for non-admin translators pointing at the TM
         * and ST translators interfaces
         *
         * @param string $menu_id
         */
        public function translators_menu($menu_id)
        {
        }
        /**
         * Renders the TM queue
         *
         * @used-by \WPML_Translation_Management::menu
         */
        function translation_queue_page()
        {
        }
        /**
         * @param string $menu_id
         */
        public function settings_menu($menu_id)
        {
        }
        public function settings_page()
        {
        }
        private function is_the_main_request()
        {
        }
        function dismiss_icl_side_by_site()
        {
        }
        function plugin_action_links($links, $file)
        {
        }
        // Localization
        function plugin_localization()
        {
        }
        function _icl_tm_toggle_promo()
        {
        }
        /**
         * @return array
         */
        public function get_active_services()
        {
        }
        public function automatic_service_selection_action()
        {
        }
        /**
         * Handles the display of notices in the TM translators tab
         */
        public function handle_notices_action()
        {
        }
        public function basket_extra_fields_refresh()
        {
        }
        /**
         * If user display Translation Dashboard or Translators
         *
         * @return boolean
         */
        function automatic_service_selection_pages()
        {
        }
        public function add_com_log_link()
        {
        }
        public function service_activation_incomplete()
        {
        }
        /**
         * If a service is active (even if not authenticated) it returns true.
         *
         * @return bool
         */
        public function has_active_service()
        {
        }
        private function service_requires_translators()
        {
        }
        private function service_requires_authentication()
        {
        }
        private function service_has_accepted_translators()
        {
        }
        private function service_authentication_notice()
        {
        }
        private function is_tm_page($tab = \null)
        {
        }
        private function automatic_service_selection()
        {
        }
        /**
         * @param $custom_field_name
         * @param $translation_option
         */
        public function wpml_save_custom_field_translation_option($custom_field_name, $translation_option)
        {
        }
        private function handle_get_requests()
        {
        }
        private function handle_icl_action_reminder_popup()
        {
        }
        private function add_pre_tm_init_admin_hooks()
        {
        }
        /**
         * @param $pagenow
         */
        private function add_translation_in_progress_warning($pagenow)
        {
        }
        /**
         * @param $pagenow
         */
        private function add_post_tm_init_admin_hooks($pagenow)
        {
        }
        /**
         * @param $pagenow
         */
        private function add_non_theme_customizer_hooks($pagenow)
        {
        }
        private function add_custom_xml_config()
        {
        }
        private function add_menu_items()
        {
        }
        private function add_translation_queue_hooks()
        {
        }
        private function add_dashboard_screen_options()
        {
        }
        private function translate_independently()
        {
        }
        /**
         * @param \WPML_WP_API $wpml_wp_api
         */
        private function add_page_builders_hooks(\WPML_WP_API $wpml_wp_api)
        {
        }
        public function should_show_wizard()
        {
        }
    }
    class WPML_TM_Troubleshooting_Clear_TS extends \WPML_TM_AJAX_Factory_Obsolete
    {
        private $script_handle = 'wpml_clear_ts';
        /**
         * WPML_TM_Troubleshooting_Clear_TS constructor.
         *
         * @param WPML_WP_API $wpml_wp_api
         */
        public function __construct(&$wpml_wp_api)
        {
        }
        public function clear_ts_action()
        {
        }
        protected function clear_tp_default_suid()
        {
        }
        public function enqueue_resources($hook_suffix)
        {
        }
        public function register_resources()
        {
        }
        public function load_action()
        {
        }
        private function add_hooks()
        {
        }
        public function render_ui()
        {
        }
    }
    /**
     * Class WPML_TM_Post_Data
     */
    class WPML_TM_Post_Data
    {
        /**
         * @param string $data
         *
         * @return string
         */
        public static function strip_slashes_for_single_quote($data)
        {
        }
    }
    class WPML_TM_Page
    {
        private static function is_tm_page($page = \null)
        {
        }
        public static function is_tm_dashboard()
        {
        }
        public static function is_tm_translators()
        {
        }
        public static function is_settings()
        {
        }
        public static function is_translation_queue()
        {
        }
        public static function is_translation_editor_page()
        {
        }
        public static function is_job_list()
        {
        }
        public static function is_dashboard()
        {
        }
        public static function is_notifications_page()
        {
        }
        public static function get_translators_url($params = array())
        {
        }
    }
    class WPML_TM_Editors
    {
        const ATE = 'ate';
        const WPML = 'wpml';
        const WP = 'wp';
        const NONE = 'none';
    }
}
namespace WPML\TM\Editor {
    class ClassicEditorActions
    {
        public function addHooks()
        {
        }
        public function saveJob()
        {
        }
    }
}
namespace {
    class WPML_TM_Old_Jobs_Editor
    {
        const OPTION_NAME = 'wpml-old-jobs-editor';
        /** @var wpdb */
        private $wpdb;
        /** @var WPML_Translation_Job_Factory */
        private $job_factory;
        public function __construct(\WPML_Translation_Job_Factory $job_factory)
        {
        }
        /**
         * @param int $job_id
         *
         * @return null|string
         */
        public function get($job_id)
        {
        }
        /**
         * @param int $job_id
         *
         * @return bool
         */
        public function shouldStickToWPMLEditor($job_id)
        {
        }
        public function set($job_id, $editor)
        {
        }
        /**
         * @param int $job_id
         *
         * @return null|string
         */
        private function get_current_editor($job_id)
        {
        }
    }
    class WPML_TM_Translator_Note
    {
        const META_FIELD_KEY = '_icl_translator_note';
        public static function get($post_id)
        {
        }
        public static function update($post_id, $note)
        {
        }
    }
    /**
     * Class WPML_TM_Unsent_Jobs_Notice
     *
     * @group unsent-jobs-notification
     */
    class WPML_TM_Unsent_Jobs
    {
        /**
         * @var WPML_TM_Blog_Translators
         */
        private $blog_translators;
        /**
         * @var SitePress
         */
        private $sitepress;
        /**
         * WPML_TM_Unsent_Jobs constructor.
         *
         * @param WPML_TM_Blog_Translators $blog_translators
         * @param SitePress $sitepress
         */
        public function __construct(\WPML_TM_Blog_Translators $blog_translators, \SitePress $sitepress)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param WPML_Translation_Job $job
         * @param null $translator_id
         */
        public function prepare_unsent_job_for_notice(\WPML_Translation_Job $job, $translator_id = \null)
        {
        }
    }
    class WPML_TM_Job_Action_Factory extends \WPML_TM_Job_Factory_User
    {
        /**
         * @param int $job_id
         *
         * @return WPML_TM_Field_Content_Action
         * @throws \InvalidArgumentException
         */
        public function field_contents($job_id)
        {
        }
        public function save_action(array $data)
        {
        }
    }
    /**
     * Class WPML_TM_Field_Type_Encoding
     */
    class WPML_TM_Field_Type_Encoding
    {
        const CUSTOM_FIELD_KEY_SEPARATOR = ':::';
        /**
         * @param string $custom_field_name
         * @param array $attributes
         *
         * @return array
         */
        public static function encode($custom_field_name, $attributes)
        {
        }
        /**
         * @param string $string
         *
         * @return string
         */
        public static function encode_hyphen($string)
        {
        }
        /**
         * Get the custom field name and the attributes from the custom field job.
         *
         * @param string $custom_field_job_type - e.g: field-my_custom_field-0-attribute.
         *
         * @return array An array with field name and attributes
         */
        public static function decode($custom_field_job_type)
        {
        }
        /**
         * @param string $string
         *
         * @return string
         */
        public static function decode_hyphen($string)
        {
        }
    }
}
namespace WPML\TM\Jobs {
    class ExtraFieldDataInEditor implements \IWPML_Backend_Action
    {
        const MAX_ALLOWED_SINGLE_LINE_LENGTH = 50;
        /** @var \WPML_Custom_Field_Editor_Settings */
        private $customFieldEditorSettings;
        public function __construct(\WPML_Custom_Field_Editor_Settings $customFieldEditorSettings)
        {
        }
        public function add_hooks()
        {
        }
        public function appendTitleAndStyle(array $fields, $job, $originalPost)
        {
        }
        private function addTitleAndAdjustStyle($job, $originalPost)
        {
        }
        private function isExternalElement($job)
        {
        }
        private function appendToExternalField($originalPost)
        {
        }
        private function appendToCustomField($field, $job, $originalPost)
        {
        }
        private function appendToTerm($field)
        {
        }
        private function applyStyleFilter($style, $type, $originalPost)
        {
        }
        private function appendToRegularField($field)
        {
        }
        private function getCustomFieldTitle($field)
        {
        }
        private function getCustomFieldStyle($field)
        {
        }
        private function getAdjustedFieldStyle(array $field, $style)
        {
        }
        private function adjustFieldStyleForUnsafeContent()
        {
        }
    }
}
namespace {
    /**
     * Class WPML_TM_Unsent_Jobs_Notifications_Hooks
     */
    class WPML_TM_Unsent_Jobs_Notice_Hooks
    {
        /** @var string */
        protected $dismissed_option_key;
        /**
         * @var WPML_TM_Unsent_Jobs_Notice
         */
        private $wpml_tm_notice_email_notice;
        /**
         * @var WPML_Notices
         */
        private $wpml_admin_notices;
        /**
         * @var WPML_WP_API
         */
        private $wp_api;
        /**
         * WPML_TM_Unsent_Jobs_Notice_Hooks constructor.
         *
         * @param WPML_TM_Unsent_Jobs_Notice $wpml_tm_notice_email_notice
         * @param WPML_WP_API                $wp_api
         * @param string                     $dismissed_option_key
         */
        public function __construct(\WPML_TM_Unsent_Jobs_Notice $wpml_tm_notice_email_notice, \WPML_WP_API $wp_api, $dismissed_option_key)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param array $args
         */
        public function email_for_job($args)
        {
        }
        public function add_notice()
        {
        }
        public function remove_notice()
        {
        }
        /**
         * @return string
         */
        private function get_dismissed_option_key()
        {
        }
    }
    /**
     * Class WPML_TM_Unsent_Jobs_Notice
     */
    class WPML_TM_Unsent_Jobs_Notice
    {
        const OPT_JOBS_NOT_NOTIFIED = '_wpml_jobs_not_notified';
        const NOTICE_ID = 'job-not-notified';
        const NOTICE_GROUP_ID = 'tm-jobs-notification';
        /**
         * @var string
         */
        private $body;
        /**
         * @var WPML_WP_API
         */
        private $wp_api;
        /**
         * @var WPML_TM_Unsent_Jobs_Notice_Template
         */
        private $notice_template;
        /**
         * WPML_TM_Unsent_Jobs_Notice constructor.
         *
         * @param WPML_WP_API $wp_api
         * @param WPML_TM_Unsent_Jobs_Notice_Template|null $notice_template
         */
        public function __construct(\WPML_WP_API $wp_api, \WPML_TM_Unsent_Jobs_Notice_Template $notice_template = \null)
        {
        }
        private function prepare_notice_body()
        {
        }
        /**
         * @return null|WPML_TM_Unsent_Jobs_Notice_Template
         */
        private function get_notice_template()
        {
        }
        /**
         * @param WPML_Notices $wpml_admin_notices
         */
        public function add_notice(\WPML_Notices $wpml_admin_notices, $dismissed_option_key)
        {
        }
        private function remove_notice_from_dismissed_list($notice_group_id, $dismissed_option_key)
        {
        }
        /**
         * @param WPML_Notice $notice
         */
        private function add_actions(\WPML_Notice $notice)
        {
        }
        /**
         * @param array $args
         */
        public function add_job($args)
        {
        }
        /**
         * @param array $args
         */
        public function remove_job($args)
        {
        }
        /**
         * @param array $jobs
         */
        private function update_jobs_option($jobs)
        {
        }
        /**
         * @return array
         */
        private function get_jobs()
        {
        }
    }
    /**
     * Class WPML_TM_Unsent_Jobs_Notice_Template
     */
    class WPML_TM_Unsent_Jobs_Notice_Template
    {
        const TEMPLATE_FILE = 'jobs-not-notified.twig';
        /**
         * @var WPML_Twig_Template
         */
        private $template_service;
        /**
         * WPML_TM_Unsent_Jobs_Notice_Template constructor.
         *
         * @param IWPML_Template_Service $template_service
         */
        public function __construct(\IWPML_Template_Service $template_service)
        {
        }
        /**
         * @param array $jobs
         *
         * @return string
         */
        public function get_notice_body($jobs)
        {
        }
        /**
         * @param array $jobs
         *
         * @return array
         */
        private function get_notice_model($jobs)
        {
        }
        /**
         * @param array $jobs
         *
         * @return array
         */
        private function get_formatted_jobs($jobs)
        {
        }
    }
}
namespace WPML\TM\Jobs {
    /**
     * Class FieldId
     * @package WPML\TM\Jobs
     * @method static callable|int get_term_id( ...$field ) - Curried :: string → int
     * @method static callable|int is_a_term( ...$field ) - Curried :: string → bool
     * @method static callable|int is_a_term_description( ...$field ) - Curried :: string → bool
     * @method static callable|int is_a_term_meta( ...$field ) - Curried :: string → bool
     * @method static callable|int is_a_custom_field( ...$field ) - Curried :: string → bool
     * @method static callable|string forTerm( ...$termId ) - Curried :: int → string
     * @method static callable|string forTermDescription( ...$termId ) - Curried :: int → string
     * @method static callable|string forTermMeta( ...$termId, $key ) - Curried :: int → string → string
     * @method static callable|string getTermMetaKey( ...$field ) - Curried :: string → string
     */
    class FieldId
    {
        use \WPML\Collect\Support\Traits\Macroable;
        const TERM_PREFIX = 't_';
        const TERM_DESCRIPTION_PREFIX = 'tdesc_';
        const TERM_META_FIELD_PREFIX = 'tfield-';
        const CUSTOM_FIELD_PREFIX = 'field-';
        public static function init()
        {
        }
    }
    class ExtraFieldDataInEditorFactory implements \IWPML_Backend_Action_Loader
    {
        /**
         * @return ExtraFieldDataInEditor
         */
        public function create()
        {
        }
    }
}
namespace {
    class WPML_Translation_Job_Helper
    {
        public function encode_field_data($data)
        {
        }
        public function decode_field_data($data, $format)
        {
        }
        protected function get_tm_setting($indexes)
        {
        }
        /**
         * @return TranslationManagement
         */
        public static function get_core_translation_management()
        {
        }
    }
    /**
     * Class WPML_Element_Translation_Package
     *
     * @package wpml-core
     */
    class WPML_Element_Translation_Package extends \WPML_Translation_Job_Helper
    {
        /** @var WPML_WP_API $wp_api */
        private $wp_api;
        /**
         * The constructor.
         *
         * @param WPML_WP_API $wp_api An instance of the WP API.
         */
        public function __construct(\WPML_WP_API $wp_api = \null)
        {
        }
        /**
         * Create translation package
         *
         * @param object|int $post
         *
         * @return array
         */
        public function create_translation_package($post)
        {
        }
        private function buildEntries($contents, $entries, $parentKey = '')
        {
        }
        /**
         * @param array $translation_package
         * @param int   $job_id
         * @param array $prev_translation
         */
        public function save_package_to_job(array $translation_package, $job_id, $prev_translation)
        {
        }
        /**
         * @param array $job_translate
         *
         * @return mixed|void
         */
        private function filter_non_translatable_fields($job_translate)
        {
        }
        /**
         * @param object $job
         * @param int    $post_id
         * @param array  $fields
         */
        public function save_job_custom_fields($job, $post_id, $fields)
        {
        }
        /**
         * Remove the field from the start of the string.
         *
         * @param string $field_name The field to remove.
         * @param string $field_id_string The full field identifier.
         * @return string
         */
        private function remove_field_name_from_start($field_name, $field_id_string)
        {
        }
        /**
         * Inserts an element into an array, nested by keys.
         * Input ['a', 'b'] for the keys, an empty array for $array and $x for the value would lead to
         * [ 'a' => ['b' => $x ] ] being returned.
         *
         * @param array $keys indexes ordered from highest to lowest level.
         * @param array $array array into which the value is to be inserted.
         * @param mixed $value to be inserted.
         *
         * @return array
         */
        private function insert_under_keys($keys, $array, $value)
        {
        }
        /**
         * @param array $fields_in_job
         * @param int   $post_id
         * @param int   $original_post_id
         */
        private function save_custom_field_values($fields_in_job, $post_id, $original_post_id)
        {
        }
        /**
         * The core function `add_post_meta` always performs
         * a `stripslashes_deep` on the value. We need to escape
         * once more before to call the function.
         *
         * @param string $value
         * @param string $encoding
         *
         * @return string
         */
        private function prevent_strip_slash_on_json($value, $encoding)
        {
        }
        /**
         * @param array  $package
         * @param object $post
         * @param array  $fields_to_translate
         * @param array  $fields_encoding
         *
         * @return array
         */
        private function add_custom_field_contents($package, $post, $fields_to_translate, $fields_encoding)
        {
        }
        /**
         * For array valued custom fields cf is given in the form field-{$field_name}-join('-', $indicies)
         *
         * @param array                 $package
         * @param string                $key
         * @param array                 $custom_field_index
         * @param array|stdClass|string $custom_field_val
         * @param string                $encoding
         *
         * @return array
         */
        private function add_single_field_content($package, $key, $custom_field_index, $custom_field_val, $encoding)
        {
        }
        /**
         * Ensure that any numerics are preserved in the given value. eg any string like '10'
         * will be converted to an integer if the corresponding original value was an integer.
         *
         * @param mixed      $value
         * @param string     $name
         * @param string|int $original_post_id
         * @param bool       $single
         *
         * @return mixed
         */
        public static function preserve_numerics($value, $name, $original_post_id, $single)
        {
        }
        /**
         * Ensure that any numerics are preserved in the given value. eg any string like '10'
         * will be converted to an integer if the corresponding original value was an integer.
         *
         * @param mixed $original
         * @param mixed $value
         *
         * @return mixed
         */
        private static function preserve_numerics_recursive($original, $value)
        {
        }
        private function get_taxonomy_fields($post)
        {
        }
        public static function getTermMetaKeysToTranslate()
        {
        }
    }
    class WPML_TM_Job_Layout
    {
        private $layout = array();
        private $custom_fields = array();
        private $grouped_custom_fields = array();
        private $terms = array();
        private $wp_api;
        public $wpdb;
        public function __construct(\wpdb $wpdb, \WPML_WP_API $wp_api)
        {
        }
        public function get_wpdb()
        {
        }
        public function run(array $fields, $tm_instance = \null)
        {
        }
        private function order_main_fields()
        {
        }
        private function extract_custom_fields($tm_instance)
        {
        }
        private function get_group_custom_field_belongs_to($field, $tm_instance)
        {
        }
        private function extract_terms()
        {
        }
        private function append_grouped_custom_fields()
        {
        }
        private function append_custom_fields()
        {
        }
        private function append_terms()
        {
        }
    }
    class WPML_TM_Field_Content_Action extends \WPML_TM_Job_Factory_User
    {
        /** @var  int $job_id */
        protected $job_id;
        /**
         * WPML_TM_Field_Content_Action constructor.
         *
         * @param WPML_Translation_Job_Factory $job_factory
         * @param int                          $job_id
         *
         * @throws \InvalidArgumentException
         */
        public function __construct($job_factory, $job_id)
        {
        }
        /**
         * Returns an array containing job fields
         *
         * @return array
         * @throws \RuntimeException
         */
        public function run()
        {
        }
        /**
         * Extracts the to be retrieved content from given job elements
         *
         * @param stdClass $job
         *
         * @return array
         */
        private function content_from_elements($job)
        {
        }
        private function find_previous_version_element($element, $previous_version_elements, $index)
        {
        }
        private function has_diff($element, $previous_element)
        {
        }
        private function get_diff($element, $previous_element)
        {
        }
        /**
         * @param string $content base64-encoded translation job field content
         *
         * @return string base64-decoded field content, with linebreaks turned into
         * paragraph html tags
         */
        private function sanitize_field_content($content)
        {
        }
        private function is_html($string)
        {
        }
    }
}
namespace WPML\TM {
    /**
     * @method static callable getCountryByIp( ...$httpPost, ...$ip ) - Curried :: callable->string->array|null
     */
    class Geolocalization
    {
        use \WPML\Collect\Support\Traits\Macroable;
        public static function init()
        {
        }
    }
}
namespace {
    class WPML_TM_Parent_Filter_Ajax implements \IWPML_Action
    {
        /** @var SitePress $sitepress */
        private $sitepress;
        /** @var array $wp_post_types */
        private $wp_post_types;
        public function __construct(\SitePress $sitepress, array $wp_post_types)
        {
        }
        public function add_hooks()
        {
        }
        public function get_parents_dropdown()
        {
        }
    }
    class WPML_TM_Parent_Filter_Ajax_Factory implements \IWPML_AJAX_Action_Loader
    {
        public function create()
        {
        }
    }
    /**
     * Class to create and manage a Zip file.
     *
     * Initially inspired by CreateZipFile by Rochak Chauhan  www.rochakchauhan.com (http://www.phpclasses.org/browse/package/2322.html)
     * and
     * http://www.pkware.com/documents/casestudies/APPNOTE.TXT Zip file specification.
     *
     * License: GNU LGPL 2.1.
     *
     * @author A. Grandt <php@grandt.com>
     * @copyright 2009-2014 A. Grandt
     * @license GNU LGPL 2.1
     * @link http://www.phpclasses.org/package/6110
     * @link https://github.com/Grandt/PHPZip
     * @version 1.62
     */
    class wpml_zip
    {
        const VERSION = 1.62;
        const ZIP_LOCAL_FILE_HEADER = "PK\3\4";
        // Local file header signature
        const ZIP_CENTRAL_FILE_HEADER = "PK\1\2";
        // Central file header signature
        const ZIP_END_OF_CENTRAL_DIRECTORY = "PK\5\6\0\0\0\0";
        //end of Central directory record
        const EXT_FILE_ATTR_DIR = 010173200020;
        // Permission 755 drwxr-xr-x = (((S_IFDIR | 0755) << 16) | S_DOS_D);
        const EXT_FILE_ATTR_FILE = 020151000040;
        // Permission 644 -rw-r--r-- = (((S_IFREG | 0644) << 16) | S_DOS_A);
        const ATTR_VERSION_TO_EXTRACT = "\24\0";
        // Version needed to extract
        const ATTR_MADE_BY_VERSION = "\36\3";
        // Made By Version
        // UID 1000, GID 0
        const EXTRA_FIELD_NEW_UNIX_GUID = "ux\v\0\1\4�\3\0\0\4\0\0\0\0";
        // Unix file types
        const S_IFIFO = 010000;
        // named pipe (fifo)
        const S_IFCHR = 020000;
        // character special
        const S_IFDIR = 040000;
        // directory
        const S_IFBLK = 060000;
        // block special
        const S_IFREG = 0100000;
        // regular
        const S_IFLNK = 0120000;
        // symbolic link
        const S_IFSOCK = 0140000;
        // socket
        // setuid/setgid/sticky bits, the same as for chmod:
        const S_ISUID = 04000;
        // set user id on execution
        const S_ISGID = 02000;
        // set group id on execution
        const S_ISTXT = 01000;
        // sticky bit
        // And of course, the other 12 bits are for the permissions, the same as for chmod:
        // When addding these up, you can also just write the permissions as a simgle octal number
        // ie. 0755. The leading 0 specifies octal notation.
        const S_IRWXU = 0700;
        // RWX mask for owner
        const S_IRUSR = 0400;
        // R for owner
        const S_IWUSR = 0200;
        // W for owner
        const S_IXUSR = 0100;
        // X for owner
        const S_IRWXG = 070;
        // RWX mask for group
        const S_IRGRP = 040;
        // R for group
        const S_IWGRP = 020;
        // W for group
        const S_IXGRP = 010;
        // X for group
        const S_IRWXO = 07;
        // RWX mask for other
        const S_IROTH = 04;
        // R for other
        const S_IWOTH = 02;
        // W for other
        const S_IXOTH = 01;
        // X for other
        const S_ISVTX = 01000;
        // save swapped text even after use
        // Filetype, sticky and permissions are added up, and shifted 16 bits left BEFORE adding the DOS flags.
        // DOS file type flags, we really only use the S_DOS_D flag.
        const S_DOS_A = 040;
        // DOS flag for Archive
        const S_DOS_D = 020;
        // DOS flag for Directory
        const S_DOS_V = 010;
        // DOS flag for Volume
        const S_DOS_S = 04;
        // DOS flag for System
        const S_DOS_H = 02;
        // DOS flag for Hidden
        const S_DOS_R = 01;
        // DOS flag for Read Only
        private $zipMemoryThreshold = 1048576;
        // Autocreate tempfile if the zip data exceeds 1048576 bytes (1 MB)
        private $zipData = \NULL;
        private $zipFile = \NULL;
        private $zipComment = \NULL;
        private $cdRec = array();
        // central directory
        private $offset = 0;
        private $isFinalized = \FALSE;
        private $addExtraField = \TRUE;
        private $streamChunkSize = 65536;
        private $streamFilePath = \NULL;
        private $streamTimestamp = \NULL;
        private $streamFileComment = \NULL;
        private $streamFile = \NULL;
        private $streamData = \NULL;
        private $streamFileLength = 0;
        private $streamExtFileAttr = \null;
        /**
         * A custom temporary folder, or a callable that returns a custom temporary file.
         * @var string|callable
         */
        public static $temp = \null;
        /**
         * Constructor.
         *
         * @param boolean $useZipFile Write temp zip data to tempFile? Default FALSE
         */
        function __construct($useZipFile = \FALSE)
        {
        }
        function __destruct()
        {
        }
        /**
         * Set Zip archive comment.
         *
         * @param string $newComment New comment. NULL to clear.
         * @return bool $success
         */
        public function setComment($newComment = \NULL)
        {
        }
        /**
         * Set zip file to write zip data to.
         * This will cause all present and future data written to this class to be written to this file.
         * This can be used at any time, even after the Zip Archive have been finalized. Any previous file will be closed.
         * Warning: If the given file already exists, it will be overwritten.
         *
         * @param string $fileName
         * @return bool $success
         */
        public function setZipFile($fileName)
        {
        }
        /**
         * Add an empty directory entry to the zip archive.
         * Basically this is only used if an empty directory is added.
         *
         * @param string $directoryPath Directory Path and name to be added to the archive.
         * @param int    $timestamp     (Optional) Timestamp for the added directory, if omitted or set to 0, the current time will be used.
         * @param string $fileComment   (Optional) Comment to be added to the archive for this directory. To use fileComment, timestamp must be given.
         * @param int    $extFileAttr   (Optional) The external file reference, use generateExtAttr to generate this.
         * @return bool $success
         */
        public function addDirectory($directoryPath, $timestamp = 0, $fileComment = \NULL, $extFileAttr = self::EXT_FILE_ATTR_DIR)
        {
        }
        /**
         * Add a file to the archive at the specified location and file name.
         *
         * @param string $data        File data.
         * @param string $filePath    Filepath and name to be used in the archive.
         * @param int    $timestamp   (Optional) Timestamp for the added file, if omitted or set to 0, the current time will be used.
         * @param string $fileComment (Optional) Comment to be added to the archive for this file. To use fileComment, timestamp must be given.
         * @param bool   $compress    (Optional) Compress file, if set to FALSE the file will only be stored. Default TRUE.
         * @param int    $extFileAttr (Optional) The external file reference, use generateExtAttr to generate this.
         * @return bool $success
         */
        public function addFile($data, $filePath, $timestamp = 0, $fileComment = \NULL, $compress = \TRUE, $extFileAttr = self::EXT_FILE_ATTR_FILE)
        {
        }
        /**
         * Add a file to the archive at the specified location and file name.
         *
         * @param string $dataFile    File name/path.
         * @param string $filePath    Filepath and name to be used in the archive.
         * @param int    $timestamp   (Optional) Timestamp for the added file, if omitted or set to 0, the current time will be used.
         * @param string $fileComment (Optional) Comment to be added to the archive for this file. To use fileComment, timestamp must be given.
         * @param int    $extFileAttr (Optional) The external file reference, use generateExtAttr to generate this.
         * @return bool $success
         */
        public function addLargeFile($dataFile, $filePath, $timestamp = 0, $fileComment = \NULL, $extFileAttr = self::EXT_FILE_ATTR_FILE)
        {
        }
        /**
         * Create a stream to be used for large entries.
         *
         * @param string $filePath    Filepath and name to be used in the archive.
         * @param int    $timestamp   (Optional) Timestamp for the added file, if omitted or set to 0, the current time will be used.
         * @param string $fileComment (Optional) Comment to be added to the archive for this file. To use fileComment, timestamp must be given.
         * @param int    $extFileAttr (Optional) The external file reference, use generateExtAttr to generate this.
         * @throws Exception Throws an exception in case of errors
         * @return bool $success
         */
        public function openStream($filePath, $timestamp = 0, $fileComment = \null, $extFileAttr = self::EXT_FILE_ATTR_FILE)
        {
        }
        /**
         * Add data to the open stream.
         *
         * @param string $data
         * @throws Exception Throws an exception in case of errors
         * @return mixed length in bytes added or FALSE if the archive is finalized or there are no open stream.
         */
        public function addStreamData($data)
        {
        }
        /**
         * Close the current stream.
         *
         * @return bool $success
         */
        public function closeStream()
        {
        }
        private function processFile($dataFile, $filePath, $timestamp = 0, $fileComment = \null, $extFileAttr = self::EXT_FILE_ATTR_FILE)
        {
        }
        /**
         * Close the archive.
         * A closed archive can no longer have new files added to it.
         *
         * @return bool $success
         */
        public function finalize()
        {
        }
        /**
         * Get the zip file contents
         * If the zip haven't been finalized yet, this will cause it to become finalized
         *
         * @return zip data
         */
        public function getZipData()
        {
        }
        /**
         * Send the archive as a zip download
         *
         * @param String $fileName The name of the Zip archive, in ISO-8859-1 (or ASCII) encoding, ie. "archive.zip". Optional, defaults to NULL, which means that no ISO-8859-1 encoded file name will be specified.
         * @param String $contentType Content mime type. Optional, defaults to "application/zip".
         * @param String $utf8FileName The name of the Zip archive, in UTF-8 encoding. Optional, defaults to NULL, which means that no UTF-8 encoded file name will be specified.
         * @param bool $inline Use Content-Disposition with "inline" instead of "attached". Optional, defaults to FALSE.
         * @throws Exception Throws an exception in case of errors
         * @return bool Always returns true (for backward compatibility).
         */
        function sendZip($fileName = \null, $contentType = "application/zip", $utf8FileName = \null, $inline = \false)
        {
        }
        /**
         * Return the current size of the archive
         *
         * @return $size Size of the archive
         */
        public function getArchiveSize()
        {
        }
        /**
         * Calculate the 2 byte dostime used in the zip entries.
         *
         * @param int $timestamp
         * @return 2-byte encoded DOS Date
         */
        private function getDosTime($timestamp = 0)
        {
        }
        /**
         * Build the Zip file structures
         *
         * @param string $filePath
         * @param string $fileComment
         * @param string $gpFlags
         * @param string $gzType
         * @param int    $timestamp
         * @param string $fileCRC32
         * @param int    $gzLength
         * @param int    $dataLength
         * @param int    $extFileAttr Use self::EXT_FILE_ATTR_FILE for files, self::EXT_FILE_ATTR_DIR for Directories.
         */
        private function buildZipEntry($filePath, $fileComment, $gpFlags, $gzType, $timestamp, $fileCRC32, $gzLength, $dataLength, $extFileAttr)
        {
        }
        private function zipwrite($data)
        {
        }
        private function zipflush()
        {
        }
        /**
         * Returns the path to a temporary file.
         * @return string
         */
        private static function getTemporaryFile()
        {
        }
    }
    class WPML_TM_Element_Translations extends \WPML_TM_Record_User
    {
        /** @var  int[] $trid_cache */
        private $trid_cache;
        /** @var  int[] $job_id_cache */
        private $job_id_cache;
        /** @var  int[] $job_id_cache */
        private $translation_status_cache;
        /** @var  bool[] $update_status_cache */
        private $update_status_cache;
        /** @var  string[] $element_type_prefix_cache */
        private $element_type_prefix_cache = array();
        public function init_hooks()
        {
        }
        public function reload()
        {
        }
        public function is_update_needed($trid, $language_code)
        {
        }
        /**
         * @param int    $trid
         * @param string $language_code
         *
         * @return string
         */
        public function get_element_type_prefix($trid, $language_code)
        {
        }
        public function get_translation_status_filter($empty, $args)
        {
        }
        /**
         * @param int    $trid
         * @param string $language_code
         *
         * @return int
         */
        public function get_translation_status($trid, $language_code)
        {
        }
        public function init_job_id($trid, $target_lang_code)
        {
        }
        /**
         * @param object[]   $jobs
         * @param string     $lang
         * @param     string $trid
         *
         * @return false|object
         */
        private function cache_job_in_lang($jobs, $lang, $trid)
        {
        }
        private function fallback_type_prefix($trid)
        {
        }
        /**
         * @param int    $trid
         * @param string $language_code
         * @param int    $job_id
         * @param int    $status
         * @param bool   $needs_update
         * @param string $element_type_prefix
         */
        private function cache_job($trid, $language_code, $job_id, $status, $needs_update, $element_type_prefix)
        {
        }
        private function maybe_init_trid_cache($trid)
        {
        }
    }
    /**
     * Class WPML_Pro_Translation
     */
    class WPML_Pro_Translation extends \WPML_TM_Job_Factory_User
    {
        public $errors = array();
        /** @var TranslationManagement $tmg */
        private $tmg;
        /** @var  WPML_TM_CMS_ID $cms_id_helper */
        private $cms_id_helper;
        /** @var WPML_TM_Xliff_Reader_Factory $xliff_reader_factory */
        private $xliff_reader_factory;
        private $sitepress;
        private $update_pm;
        /**
         * WPML_Pro_Translation constructor.
         *
         * @param WPML_Translation_Job_Factory $job_factory
         */
        function __construct(&$job_factory)
        {
        }
        /**
         * @return WPML_TM_CMS_ID
         */
        public function &get_cms_id_helper()
        {
        }
        /**
         * @param string $call
         * @param array  $data
         */
        function ajax_calls($call, $data)
        {
        }
        public function get_current_project()
        {
        }
        /**
         * @param WP_Post|WPML_Package $post
         * @param array                $target_languages
         * @param int                  $translator_id
         * @param int                  $job_id
         *
         * @return bool|int
         */
        function send_post($post, $target_languages, $translator_id, $job_id)
        {
        }
        function server_languages_map($language_name, $server2plugin = \false)
        {
        }
        /**
         * @param $methods
         *
         * @return array
         */
        public function custom_xmlrpc_methods($methods)
        {
        }
        /**
         * @param array $args
         *
         * @return int|IXR_Error
         */
        public function xmlrpc_updated_job_status($args)
        {
        }
        /**
         * @return bool
         */
        private function authenticate_request($tp_id, $cms_id, $status, $signature)
        {
        }
        /**
         * @return WPML_WP_API
         */
        function get_wpml_wp_api()
        {
        }
        /**
         *
         * Cancel translation for given cms_id
         *
         * @param $rid
         * @param $cms_id
         *
         * @return bool
         */
        function cancel_translation($rid, $cms_id)
        {
        }
        /**
         *
         * Downloads translation from TP and updates its document
         *
         * @param $translation_proxy_job_id
         * @param $cms_id
         *
         * @return bool|string
         *
         */
        function download_and_process_translation($translation_proxy_job_id, $cms_id)
        {
        }
        /**
         * @param int $translation_id
         * @param int $translation_proxy_job_id
         *
         * @return bool
         */
        function add_translated_document($translation_id, $translation_proxy_job_id)
        {
        }
        private static function content_get_link_paths($body)
        {
        }
        public function fix_links_to_translated_content($element_id, $target_lang_code, $element_type = 'post')
        {
        }
        function translation_error_handler($error_number, $error_string, $error_file, $error_line)
        {
        }
        private static function should_links_be_converted_back_to_sticky($element_type)
        {
        }
        function post_submitbox_start()
        {
        }
        public function gutenberg_minor_edit()
        {
        }
        private function get_show_minor_edit_style()
        {
        }
        private function process_translated_string($translation_proxy_job_id, $language)
        {
        }
        private function add_error($project_error)
        {
        }
        /**
         * @param $project TranslationProxy_Project
         */
        function enqueue_project_errors($project)
        {
        }
        /**
         * @param TranslationManagement $iclTranslationManagement
         */
        private function maybe_init_translation_management($iclTranslationManagement)
        {
        }
    }
    class TranslationProxy_Service
    {
        public $id;
        public $name;
        public $description;
        public $default_service;
        public $has_translator_selection = \true;
        //Todo: read this from service properties
        public $delivery_method;
        public $project_details_url;
        public $custom_text_url;
        public $has_language_pairs;
        public $languages_map;
        public $url;
        public $logo_url;
        public $create_project_url;
        public $add_language_pair_url;
        public $new_job_url;
        public $custom_fields;
        public $custom_fields_data;
        public $select_translator_iframe_url;
        public $translator_contact_iframe_url;
        public $quote_iframe_url;
        public $batch_name_max_length;
        public static function is_authenticated($service)
        {
        }
        public static function list_services()
        {
        }
        public static function get_service($service_id)
        {
        }
        public static function get_service_by_suid($suid)
        {
        }
        public static function languages_map($service)
        {
        }
        public static function get_language($service, $language)
        {
        }
        /**
         * Returns a WPML readable string that allows to tell translation service and translator id
         * (typically used for translators dropdowns)
         *
         * @param int|bool $translation_service_id
         * @param int|bool $translator_id
         *
         * @return string
         */
        public static function get_wpml_translator_id($translation_service_id = \false, $translator_id = \false)
        {
        }
        /**
         * @param string $translator_id
         *
         * @return array Returns a two elements array, respectively containing translation_service and translator_id
         */
        public static function get_translator_data_from_wpml($translator_id)
        {
        }
    }
    /**
     * @package    wpml-core
     * @subpackage wpml-core
     */
    class TranslationProxy_Api
    {
        const API_VERSION = 1.1;
        public static function proxy_request($path, $params = array(), $method = 'GET', $multi_part = \false, $has_return_value = \true)
        {
        }
        public static function proxy_download($path, $params)
        {
        }
        public static function service_request($url, $params = array(), $method = 'GET', $has_return_value = \true, $json_response = \false, $has_api_response = \false)
        {
        }
        public static function add_parameters_to_url($url, $params)
        {
        }
    }
    class TranslationProxy
    {
        private static $tp_client;
        /**
         * @param bool $reload
         *
         * @return WPML_TP_Service[]
         */
        public static function services($reload = \true)
        {
        }
        public static function get_tp_default_suid()
        {
        }
        public static function has_preferred_translation_service()
        {
        }
        public static function clear_preferred_translation_service()
        {
        }
        /**
         * @param int $service_id
         *
         * @return stdClass
         */
        public static function get_service($service_id)
        {
        }
        /**
         * @param int $service_id
         *
         * @return TranslationProxy_Project|WP_Error
         * @throws \WPMLTranslationProxyApiException
         * @throws \InvalidArgumentException
         */
        public static function select_service($service_id, $credentials = \null)
        {
        }
        public static function deselect_active_service()
        {
        }
        /**
         * @param      $service
         * @param bool $custom_fields_data
         *
         * @return mixed
         * @throws \WPMLTranslationProxyApiException
         */
        public static function build_and_store_active_translation_service($service, $custom_fields_data = \false)
        {
        }
        /**
         * @return bool|TranslationProxy_Project
         */
        public static function get_current_project()
        {
        }
        public static function get_current_service_info(array $info = array())
        {
        }
        public static function get_service_promo()
        {
        }
        public static function get_service_dashboard_info()
        {
        }
        public static function get_service_translators_info()
        {
        }
        /**
         * @param string   $location
         * @param string   $locale
         * @param callable $popup_link_callback
         * @param int      $max_count
         * @param bool     $paragraph
         *
         * @return string
         */
        public static function get_custom_html($location, $locale, $popup_link_callback, $max_count = 1000, $paragraph = \true)
        {
        }
        public static function get_current_service_name()
        {
        }
        public static function get_current_service_id()
        {
        }
        public static function get_current_service_batch_name_max_length()
        {
        }
        /**
         * @param bool|TranslationProxy_Service|WP_Error $service
         *
         * @return bool
         * @throws \InvalidArgumentException
         * @throws \WPMLTranslationProxyApiException
         */
        public static function service_requires_authentication($service = \false)
        {
        }
        /**
         * Return true if $service has been successfully authenticated
         * Services that do not require authentication are by default authenticated
         *
         * @param bool|WP_Error|TranslationProxy_Service $service
         *
         * @return bool
         * @throws \InvalidArgumentException
         */
        public static function is_service_authenticated($service = \false)
        {
        }
        /**
         * @return bool|TranslationProxy_Service|WP_Error
         */
        public static function get_current_service()
        {
        }
        /**
         *
         * @return bool
         * @throws \InvalidArgumentException
         */
        public static function is_current_service_active_and_authenticated()
        {
        }
        /**
         * @return mixed
         */
        public static function get_translation_projects()
        {
        }
        public static function get_service_name($service_id = \false)
        {
        }
        public static function has_custom_fields($service_id = \false)
        {
        }
        /**
         * @param int|bool $service_id If not given, will use the current service ID (if any)
         * @param bool $force_reload Force reload custom fields from Translation Service
         *
         * @throws WPMLTranslationProxyApiException
         * @throws InvalidArgumentException
         * @return array|mixed|null|string
         */
        public static function get_custom_fields($service_id = \false, $force_reload = \false)
        {
        }
        /**
         * @return array
         */
        public static function get_extra_fields_local()
        {
        }
        /**
         * @param $extra_fields
         */
        public static function save_extra_fields($extra_fields)
        {
        }
        public static function maybe_convert_extra_fields($extra_fields)
        {
        }
        public static function get_custom_fields_data()
        {
        }
        /**
         * @return bool true if the current translation service allows selection of specific translators
         * @throws \InvalidArgumentException
         */
        public static function translator_selection_available()
        {
        }
        private static function sanitize_custom_text($text)
        {
        }
        private static function languages_map($service)
        {
        }
        private static function get_preferred_translation_service()
        {
        }
        private static function get_preferred_translation_service_from_installer()
        {
        }
        public static function get_tp_client()
        {
        }
    }
    class TranslationProxy_Translator
    {
        /**
         * Get information about translators from current project. Works only for ICL as a Translation Service
         *
         * @param bool $force
         *
         * @return array|bool
         */
        public static function get_icl_translator_status($force = \false)
        {
        }
        private static function get_popup_link($matches)
        {
        }
        /**
         *
         * Get information about language pairs (including translators). Works only for ICL as a Translation Service
         *
         * @return array
         */
        public static function get_language_pairs()
        {
        }
        /**
         * Sends request to ICL to get website details (including language pairs)
         *
         * @param TranslationProxy_Project $project
         * @param bool                     $force
         *
         * @return array
         */
        private static function get_website_details($project, $force = \false)
        {
        }
        /**
         * @param $translator_id
         *
         * @return string|false
         */
        public static function get_translator_name($translator_id)
        {
        }
        /**
         * Synchronizes language pairs with ICL
         *
         * @global object $sitepress
         *
         * @param $project
         * @param $language_pairs
         *
         */
        public static function update_language_pairs($project, $language_pairs)
        {
        }
        public static function flush_website_details_cache()
        {
        }
        public static function flush_website_details_cache_action()
        {
        }
    }
    /**
     * Class WPML_Translation_Proxy_Basket_Networking
     */
    class WPML_Translation_Proxy_Basket_Networking
    {
        /** @var  WPML_Translation_Basket $basket */
        private $basket;
        /** @var  TranslationManagement $tm_instance */
        private $tm_instance;
        /**
         * @param WPML_Translation_Basket $basket
         * @param TranslationManagement   $tm_instance
         */
        function __construct($basket, &$tm_instance)
        {
        }
        /**
         * @param WPML_TM_Translation_Batch  $batch
         *
         * @uses \WPML_Translation_Basket::get_basket Gets the array representation of the translation basket
         * @uses \WPML_Translation_Proxy_Basket_Networking::generate_batch generates the batch in case no chunk was given for the commit from the basket
         * @uses \WPML_Translation_Proxy_Basket_Networking::get_batch_name
         * @uses \WPML_Translation_Proxy_Basket_Networking::send_all_jobs
         * @uses \WPML_Translation_Proxy_Basket_Networking::rollback_basket_commit rolls back the whole commit action in case of an error.
         *
         * @return array
         */
        function commit_basket_chunk(\WPML_TM_Translation_Batch $batch)
        {
        }
        /**
         * Cancels all remote jobs in the requested batch.
         *
         * @param string $posted_basket_name basket name in the currently handled request
         *
         * @uses \WPML_Translation_Batch::cancel_all_jobs
         */
        function rollback_basket_commit($posted_basket_name)
        {
        }
        /**
         * Checks if an array of translators has any remote translators in it.
         *
         * @param array $translators
         *
         * @return bool
         */
        function contains_remote_translators(array $translators)
        {
        }
        /**
         * Sends all jobs from basket in batch mode to translation proxy
         *
         * @param WPML_TM_Translation_Batch  $batch
         * @param array  $translators
         * @param array  $batch_options
         *
         * @return bool false in case of errors (read from TranslationManagement::get_messages('error') to get errors details)
         */
        private function send_all_jobs(\WPML_TM_Translation_Batch $batch)
        {
        }
        /**
         * Generates the batch array for posts in the basket.
         *
         * @param array $basket
         *
         * @return array
         */
        private function generate_batch(array $basket)
        {
        }
        /**
         * Returns the name of the batch that contains the given post_id.
         *
         * @param int $post_id
         *
         * @return null|string
         */
        private function get_batch_name($post_id)
        {
        }
    }
    /**
     * Class TranslationProxy_Project
     */
    class TranslationProxy_Project
    {
        public $id;
        /**
         * @var string
         *
         * `access_key` used when sending **any request** to TP
         */
        public $access_key;
        /**
         * @var int
         *
         * `ts_id` (aka `website_id`) is used **exclusively** when sending request directly to ICL
         */
        public $ts_id;
        /**
         * @var string
         *
         * `ts_access_key` is used **exclusively** when sending request directly to ICL
         */
        public $ts_access_key;
        /**
         * @var object
         */
        public $service;
        /** @var WPML_TP_Client $tp_client */
        public $tp_client;
        public $errors = array();
        /**
         * @param TranslationProxy_Service $service
         * @param string                   $delivery
         * @param WPML_TP_Client           $tp_client
         */
        public function __construct($service, $delivery = 'xmlrpc', \WPML_TP_Client $tp_client)
        {
        }
        /**
         * @return TranslationProxy_Service
         */
        public function service()
        {
        }
        /**
         * Returns the index by which a translation service can be found in the array returned by
         * \TranslationProxy::get_translation_projects
         *
         * @param $service object
         *
         * @return bool|string
         */
        public static function generate_service_index($service)
        {
        }
        /**
         * Convert WPML language code to service language
         *
         * @param $language string
         *
         * @return bool|string
         */
        private function service_language($language)
        {
        }
        /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         * Get information about the project (Translation Service)
         * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        public function custom_text($location, $locale = "en")
        {
        }
        function current_service_name()
        {
        }
        function current_service()
        {
        }
        /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         * IFrames to display project info (Translation Service)
         * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        public function select_translator_iframe_url($source_language, $target_language)
        {
        }
        public function translator_contact_iframe_url($translator_id)
        {
        }
        private function _create_iframe_url($url, $params)
        {
        }
        /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         * Jobs handling (Translation Proxy)
         * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        /**
         * @throws WPML_TP_Batch_Exception
         *
         * @param bool $source_language
         * @param bool $target_languages
         *
         * @internal param bool $name
         * @return false|WPML_TP_Batch
         */
        function get_batch_job($source_language = \false, $target_languages = \false)
        {
        }
        /**
         * @throws WPML_TP_Batch_Exception
         *
         * @return false|int
         */
        function get_batch_job_id()
        {
        }
        /**
         * @throws WPML_TP_Batch_Exception
         *
         * @param bool $source_language
         * @param      $target_languages
         *
         * @internal param bool $name
         * @return false|WPML_TP_Batch
         */
        public function create_batch_job($source_language, $target_languages)
        {
        }
        /**
         *
         * Add Files Batch Job
         *
         * @throws WPML_TP_Batch_Exception
         *
         * @param string $file
         * @param string $title
         * @param string $cms_id
         * @param string $url
         * @param string $source_language
         * @param string $target_language
         * @param int    $word_count
         * @param int    $translator_id
         * @param string $note
         *
         * @return bool
         */
        public function send_to_translation_batch_mode($file, $title, $cms_id, $url, $source_language, $target_language, $word_count, $translator_id = 0, $note = '', $uuid = \null)
        {
        }
        /**
         * @param bool|int $tp_batch_id
         *
         * @link http://git.icanlocalize.com/onthego/translation_proxy/wikis/commit_batch_job
         *
         * @return array|bool|mixed|null|stdClass|string
         */
        function commit_batch_job($tp_batch_id = \false)
        {
        }
        /**
         *
         * @return object[]
         */
        public function jobs()
        {
        }
        /**
         * @return object[]
         */
        public function finished_jobs()
        {
        }
        public function set_delivery_method($method)
        {
        }
        public function fetch_translation($job_id)
        {
        }
        public function update_job($job_id, $url = \null, $state = 'delivered')
        {
        }
        /**
         * @param string $state
         *
         * @return mixed
         */
        private function get_jobs($state = 'any')
        {
        }
    }
    /**
     * Class TranslationProxy_Batch
     * @method static callable|int getBatchId( ...$name ) :: string → int
     */
    class TranslationProxy_Batch
    {
        use \WPML\Collect\Support\Traits\Macroable;
        public static function update_translation_batch($batch_name = \false, $tp_id = \false)
        {
        }
        /**
         * returns the name of a generic batch
         * name is built based on the current's date
         *
         * @return string
         */
        public static function get_generic_batch_name()
        {
        }
        /**
         * returns the id of a generic batch
         *
         * @return int
         */
        private static function create_generic_batch()
        {
        }
        public static function maybe_assign_generic_batch($data)
        {
        }
        /**
         * @param $batch_name
         * @param $tp_id
         *
         * @return mixed
         */
        private static function createBatchRecord($batch_name, $tp_id)
        {
        }
    }
    /**
     * @method static int get_batch_id_from_name( string $basket_name )
     */
    class WPML_Translation_Basket
    {
        use \WPML\Collect\Support\Traits\Macroable;
        /** @var wpdb $wpdb */
        private $wpdb;
        public function __construct(\wpdb $wpdb)
        {
        }
        /**
         * Returns an array representation of the current translation basket
         *
         * @param bool|false $force if true reloads the baskets contents from the database
         *
         * @return array
         */
        function get_basket($force = \false)
        {
        }
        /**
         * @return bool|TranslationProxy_Project
         */
        public function get_project()
        {
        }
        function get_item_types()
        {
        }
        /**
         * Returns a batch instance by basket- or batch-name
         *
         * @param string $basket_name
         *
         * @return WPML_Translation_Batch
         */
        function get_basket_batch($basket_name)
        {
        }
        /**
         * Sets the remote target languages before committing the basket to a translation service.
         *
         * @param array $remote_languages
         */
        function set_remote_target_languages($remote_languages)
        {
        }
        /**
         * Removes all items from the current translation basket.
         */
        function delete_all_items()
        {
        }
        /**
         * Returns the name of the current translation basket.
         *
         * @return bool|string
         */
        function get_name()
        {
        }
        function set_name($basket_name)
        {
        }
        function set_options(array $batch_options)
        {
        }
        /** @return array */
        function get_options()
        {
        }
        /**
         * @param string $basket_name
         * @param int    $basket_name_max_length
         *
         * @return array
         */
        function check_basket_name($basket_name, $basket_name_max_length)
        {
        }
        /**
         * Returns a unique name derived from an input name for a Translation Proxy Basket
         *
         * @param bool     $name
         * @param bool|int $max_length
         *
         * @return bool|string
         */
        function get_unique_basket_name($name, $max_length)
        {
        }
        /**
         * @return string
         */
        public function get_source_language()
        {
        }
        /**
         * @param int $package_id
         */
        public function remove_package($package_id)
        {
        }
        /**
         * @param int $id
         * @param string $kind
         */
        public function remove_item($id, $kind)
        {
        }
        /**
         * Merge the basket portion with the saved basket
         *
         * @param array $basket_portion
         */
        public function update_basket($basket_portion = array())
        {
        }
        private function sanitize_basket_name($basket_name, $max_length)
        {
        }
        private function shorten_basket_name($name_array, $index, $to_trim)
        {
        }
    }
    class TranslationProxy_Popup
    {
        public static function display()
        {
        }
        public static function get_link($link, $args = array(), $just_url = \false)
        {
        }
    }
    /**
     * TranslationProxy_basket collects all static methods to operate on
     * translations basket (cart)
     */
    class TranslationProxy_Basket
    {
        private static $messages;
        private static $dashboard_select;
        private static $basket;
        //The name of the option stored in wp_options table and that
        //stores all the basket items
        const ICL_TRANSLATION_JOBS_BASKET = 'icl_translation_jobs_basket';
        private static $posts_ids;
        private static $translate_from;
        private static $translation_action;
        public static function add_message($array)
        {
        }
        public static function remove_message($text)
        {
        }
        public static function get_basket($force = \false)
        {
        }
        public static function update_basket($basket_portion = array())
        {
        }
        /**
         * @param array $basket
         */
        private static function update_basket_option($basket)
        {
        }
        private static function merge_baskets($from, $to)
        {
        }
        /**
         * Return number of items in translation basket by key
         *
         * @param string $type
         * @param bool   $skip_cache
         *
         * @return int number of items in translation basket
         */
        public static function get_basket_items_type_count($type, $skip_cache = \false)
        {
        }
        /**
         * Return number of items in translation basket
         *
         * @param bool $skip_cache
         *
         * @return int number of items in translation basket
         */
        public static function get_basket_items_count($skip_cache = \false)
        {
        }
        /**
         * Register notification with number of items in basket and link to basket
         */
        public static function update_basket_notifications()
        {
        }
        private static function is_st_page()
        {
        }
        /**
         * Displays div with number of items in basket and link to basket
         * Removes notification if basket is empty
         */
        public static function display_basket_items_notification()
        {
        }
        public static function is_in_basket($post_id, $source_language, $target_language, $item_type = 'post')
        {
        }
        /**
         * Checks if post with ID $post_id is in the basket for any language
         *
         * @param int    $post_id
         * @param string $element_type
         * @param array  $check_in_languages
         * @param bool   $original_language_code
         *
         * @return bool
         */
        public static function anywhere_in_basket($post_id, $element_type = 'post', $check_in_languages = array(), $original_language_code = \false)
        {
        }
        public static function is_string_in_basket_anywhere($string_id)
        {
        }
        public static function has_any_string()
        {
        }
        public static function has_any_item_type($item_type)
        {
        }
        /**** adding items to basket ****/
        /**
         * Serves Translation Dashboard form submission and adds posts to basket
         *
         * @param array $data data submitted from form
         *
         * @return boolean
         */
        public static function add_posts_to_basket($data)
        {
        }
        /**
         * Serves WPML > String translation form submission and adds strings to basket
         *
         * @param array $string_ids identifiers of strings
         * @param       $source_language
         * @param array $target_languages selected target languages
         * @return bool
         * @todo: [WPML 3.3] move to ST and handle with hooks
         */
        public static function add_strings_to_basket($string_ids, $source_language, $target_languages)
        {
        }
        /**
         * Serves deletion of items from basket, triggered from WPML TM > Translation
         * Jobs
         *
         * @param array $items Array of items ids, in two separate parts: ['post']
         *                     and ['string']
         */
        public static function delete_items_from_basket($items)
        {
        }
        /**
         * Removes one item from basket
         *
         * @param int    $id            Item ID
         * @param string $type          Item type (strings | posts | ...)
         * @param bool   $update_option do update_option('icl_translation_jobs_cart' ?
         */
        public static function delete_item_from_basket($id, $type = 'post', $update_option = \true)
        {
        }
        //TODO: [WPML 3.3] implement this in the troubleshooting page
        public static function delete_all_items_from_basket()
        {
        }
        /**
         * @param WPML_TP_Batch|null $batch
         */
        public static function set_batch_data($batch)
        {
        }
        /**
         * @return false|null|WPML_TP_Batch
         */
        public static function get_batch_data()
        {
        }
        public static function set_basket_name($basket_name)
        {
        }
        public static function get_basket_name()
        {
        }
        public static function set_options(array $options)
        {
        }
        /** @return array */
        public static function get_options()
        {
        }
        public static function get_basket_extra_fields()
        {
        }
        private static function array_replace_recursive($array, $array1)
        {
        }
        private static function recurse($array, $array1)
        {
        }
        public static function get_basket_items_types()
        {
        }
        /**
         * @param $post_id
         *
         * @return mixed|null|void|WP_Post
         */
        private static function get_post($post_id)
        {
        }
        /**
         * @param array $selected_elements
         *
         * @param bool|string $type
         * @return array[]|int[]
         */
        public static function get_elements_ids($selected_elements, $type = \false)
        {
        }
        public static function get_source_language()
        {
        }
        private static function sync_target_languages()
        {
        }
        /**
         * @return bool|array
         */
        public static function get_target_languages()
        {
        }
        /**
         * Sets target languages for remote service
         *
         * @param $remote_target_languages
         */
        public static function set_remote_target_languages($remote_target_languages)
        {
        }
        /**
         * Get target languages for remote service
         *
         * @return array | false
         */
        public static function get_remote_target_languages()
        {
        }
        /**
         * @return array
         */
        public static function get_basket_notification_positions()
        {
        }
        public static function get_basket_extra_fields_section()
        {
        }
        public static function get_basket_extra_fields_inputs(array $extra_fields = array(), $force_refresh = \false)
        {
        }
        public static function get_basket_extra_fields_array($force_refresh = \false)
        {
        }
        public static function extra_fields_build_inputs(array $extra_fields)
        {
        }
        /**
         * @param $data
         *
         * @return bool
         */
        private static function validate_data($data)
        {
        }
    }
    class WPML_TM_Post_Actions extends \WPML_Translation_Job_Helper
    {
        /** @var  WPML_TM_Action_Helper $action_helper */
        private $action_helper;
        /** @var  WPML_TM_Blog_Translators $blog_translators */
        private $blog_translators;
        /** @var  WPML_TM_Records $tm_records */
        private $tm_records;
        /**
         * WPML_TM_Post_Actions constructor.
         *
         * @param WPML_TM_Action_Helper    $helper
         * @param WPML_TM_Blog_Translators $blog_translators
         * @param WPML_TM_Records          $tm_records
         */
        public function __construct(&$helper, &$blog_translators, &$tm_records)
        {
        }
        public function save_post_actions($post_id, $post, $force_set_status = \false)
        {
        }
        /**
         * Adds the given language pair to the user.
         *
         * @param int    $user_id
         * @param string $target_lang
         * @param string $source_lang
         *
         * @used-by \WPML_TM_Post_Actions::save_post_actions to add language pairs to admin users automatically when saving
         *                                                   a translation in a given language pair.
         */
        private function maybe_add_as_translator($user_id, $target_lang, $source_lang)
        {
        }
        private function get_save_post_lang($lang, $post_id)
        {
        }
        private function maybe_retrive_trid_again($trid, $post)
        {
        }
        /**
         * @param int $post_id
         */
        public function save_translation_priority($post_id)
        {
        }
        /**
         * @param int $element_id
         *
         * @return WP_Term|null
         */
        private function get_term_obj($element_id)
        {
        }
    }
    class WPML_TM_Action_Helper
    {
        public function get_tm_instance()
        {
        }
        public function create_translation_package($post)
        {
        }
        public function add_translation_job($rid, $translator_id, $translation_package, $batch_options = array())
        {
        }
        /**
         * calculate post md5
         *
         * @param object|int $post
         *
         * @return string
         * @todo full support for custom posts and custom taxonomies
         */
        public function post_md5($post)
        {
        }
        private function get_post_terms($post, $taxonomy, $sort = \false)
        {
        }
        private function get_post_taxonomies($post)
        {
        }
        private function get_post_custom_fields($post)
        {
        }
        private function get_update_translation_action($translation_package)
        {
        }
    }
    class WPML_TM_Blog_Translators
    {
        /** @var WPML_TM_Records $tm_records */
        private $tm_records;
        /**
         * @var SitePress;
         */
        private $sitepress;
        /** @var WPML_Translator_Records $translator_records */
        private $translator_records;
        /** @var  WPML_Cache_Factory */
        private $cache_factory;
        /**
         * @param SitePress $sitepress
         * @param WPML_TM_Records $tm_records
         * @param WPML_Translator_Records $translator_records
         * @param WPML_Cache_Factory $cache_factory
         */
        public function __construct(\SitePress $sitepress, \WPML_TM_Records $tm_records, \WPML_Translator_Records $translator_records, \WPML_Cache_Factory $cache_factory)
        {
        }
        /**
         * It returns true if the site has translators.
         *
         * @return bool
         */
        public function has_translators()
        {
        }
        /**
         * @param array $args
         *
         * @return array
         */
        function get_blog_translators($args = array())
        {
        }
        /**
         * @param int $translator_id
         * @param string $from
         * @param string $to
         *
         * @return bool
         */
        private function translator_has_language_pair($translator_id, $from, $to)
        {
        }
        /**
         * @return array
         */
        public function get_raw_blog_translators()
        {
        }
        /**
         * @param int   $user_id
         * @param array $args
         *
         * @return bool
         */
        function is_translator($user_id, $args = array())
        {
        }
        /**
         * @param int $user_id
         *
         * @return array
         */
        public function get_language_pairs($user_id)
        {
        }
    }
    class WPML_Translation_Batch_Factory
    {
        /**
         * @param int $id
         *
         * @return WPML_Translation_Batch
         */
        public function create($id)
        {
        }
    }
    class WPML_Translation_Jobs_Collection extends \WPML_Abstract_Job_Collection
    {
        /** @var WPML_Translation_Batch[] $translation_batches */
        private $translation_batches = array();
        private $count = 0;
        private $first_count;
        private $last_count;
        private $before_count = 0;
        private $after_count = 0;
        /** @var array $filter */
        private $filter;
        /** @var string $jobs_union_table_sql */
        private $jobs_union_table_sql;
        /**
         * @param wpdb  $wpdb
         * @param array $icl_translation_filter
         */
        public function __construct(&$wpdb, $icl_translation_filter)
        {
        }
        /**
         * @param int $page
         * @param int $per_page
         *
         * @return array
         */
        public function get_paginated_batches($page, $per_page)
        {
        }
        /**
         * Returns the number of jobs that meet the filter \WPML_Translation_Jobs_Collection::$filter in the database
         *
         * @return int
         */
        public function get_count()
        {
        }
        /**
         * @param WPML_Translation_Job $job
         */
        public function add_job($job)
        {
        }
        private function load_translation_jobs($page, $per_page)
        {
        }
        /**
         * @param array $args
         * @param array $pagination_args
         *
         * @return array
         */
        private function get_jobs_table(array $args = array(), array $pagination_args = array('page' => 1, 'per_page' => 10))
        {
        }
        /**
         * @param int $found_rows
         *
         * @return array
         */
        private function get_default_batch_counts($found_rows)
        {
        }
        private function get_jobs_in_db(array $args = array(), array $pagination_args = \null)
        {
        }
        public function get_jobs(array $args = array())
        {
        }
        /**
         * @param array $data
         * @param int   $count
         * @param array $pagination_args
         *
         * @return array
         */
        private function calculate_batch_counts($data, $count, $pagination_args)
        {
        }
        private function get_jobs_union_table_sql($where_jobs, $args)
        {
        }
    }
    class WPML_Translation_Batch extends \WPML_Abstract_Job_Collection
    {
        private $name = \false;
        private $id = \false;
        private $url = \false;
        /** @var WPML_Translation_Job[] $job_objects  */
        private $job_objects = array();
        /**
         * @param wpdb $wpdb
         * @param int  $batch_id
         */
        public function __construct(&$wpdb, $batch_id = 0)
        {
        }
        public function reload()
        {
        }
        public function get_batch_url()
        {
        }
        public function get_batch_meta_array()
        {
        }
        /**
         * Cancels all translation jobs in this batch
         */
        public function cancel_all_jobs()
        {
        }
        //todo: [WPML 3.2.1] This method and other similar methods can likely be removed
        public function get_last_update()
        {
        }
        /**
         * @param WPML_Translation_Job $job
         */
        public function add_job($job)
        {
        }
        public function get_jobs_as_array()
        {
        }
        public function get_item_count()
        {
        }
        public function get_id()
        {
        }
        public function get_batch_name()
        {
        }
        public function get_batch_tp_id()
        {
        }
        public function get_status_array()
        {
        }
        private function retrieve_generic_batch_id()
        {
        }
        private function generate_generic_batch_name()
        {
        }
        private function belongs_to_active_ts()
        {
        }
        private function ts_supports_notifications()
        {
        }
        public function clear_batch_data()
        {
        }
    }
    abstract class WPML_Translation_Job extends \WPML_Translation_Job_Helper
    {
        protected $basic_data;
        protected $element_id = -1;
        protected $status = -1;
        protected $job_id;
        protected $batch_id;
        /** @var  WPML_TM_Blog_Translators $blog_translators */
        protected $blog_translators;
        /**
         * @param  int                      $job_id
         * @param int|null                 $batch_id
         * @param WPML_TM_Blog_Translators $blog_translators
         */
        function __construct($job_id, $batch_id = \null, &$blog_translators = \null)
        {
        }
        public abstract function cancel();
        public abstract function get_original_element_id();
        public abstract function to_array();
        /**
         * @return string
         */
        abstract function get_title();
        public function get_status()
        {
        }
        public function get_status_value()
        {
        }
        public function get_id()
        {
        }
        public function get_resultant_element_id($force = \false)
        {
        }
        /**
         * Checks whether the input user is allowed to edit this job
         *
         * @param WP_User $user
         *
         * @return bool
         */
        public function user_can_translate($user)
        {
        }
        /**
         * @param WP_User $user
         * @param int     $translator_id
         *
         * @return bool
         */
        private function is_current_user_allowed_to_translate(\WP_User $user, $translator_id)
        {
        }
        public function get_batch_id()
        {
        }
        /**
         * @param bool|false $as_name if true will return the language's display name if applicable
         *
         * @return bool|string
         */
        public function get_language_code($as_name = \false)
        {
        }
        /**
         * @param bool|false $as_name if true will return the language's display name if applicable
         *
         * @return bool|string
         */
        function get_source_language_code($as_name = \false)
        {
        }
        /**
         * @return string|false
         */
        public function get_translator_name()
        {
        }
        /**
         * Returns the id of the assigned translator or 0 if no translator is assigned to the job
         *
         * @return int
         */
        public function get_translator_id()
        {
        }
        public function get_basic_data()
        {
        }
        /**
         * @param  int    $translator_id
         * @param string $service
         *
         * @return bool true on success false on failure
         */
        public function assign_to($translator_id, $service = 'local')
        {
        }
        /**
         * Returns either the translation service id for the job or 'local' for local jobs
         *
         * @return int|string
         */
        public function get_translation_service()
        {
        }
        protected abstract function save_updated_assignment();
        protected abstract function load_resultant_element_id();
        protected abstract function load_status();
        protected abstract function load_job_data($id);
        abstract function get_type();
        protected function basic_data_to_array($job_data)
        {
        }
        protected function maybe_load_basic_data()
        {
        }
        private function get_inactive_translation_service($translation_service_id)
        {
        }
        protected function get_translator_html($job)
        {
        }
        /**
         * Retrieves the batch ID associated to the job ID
         */
        protected abstract function load_batch_id();
        /**
         * @return string
         */
        protected function generate_lang_text()
        {
        }
        /**
         * @param string $code
         *
         * @return string
         */
        private function lang_code_to_name($code)
        {
        }
        /**
         * @param string $name
         *
         * @return mixed
         */
        protected function get_basic_data_property($name)
        {
        }
    }
    abstract class WPML_Element_Translation_Job extends \WPML_Translation_Job
    {
        protected $original_del_text;
        /** @var  WPML_Translation_Job_Factory $job_factory */
        protected $job_factory;
        private $original_doc_id = \false;
        private $translation_id = \false;
        /**
         * @param int                               $job_id
         * @param null|int                          $batch_id
         * @param null|TranslationManagement        $tm_instance
         * @param null|WPML_Translation_Job_Factory $job_factory
         */
        function __construct($job_id, $batch_id = \null, &$tm_instance = \null, &$job_factory = \null)
        {
        }
        function get_type()
        {
        }
        function to_array()
        {
        }
        function to_xliff_file()
        {
        }
        function get_original_element_id()
        {
        }
        function get_translation_id()
        {
        }
        /**
         * Saves the job data in this object to the database (e.g. to a post)
         *
         * @param bool $complete whether or not to set the status
         *                       of the target element to complete
         */
        public function save_to_element($complete = \false)
        {
        }
        /**
         * @return int
         */
        function estimate_word_count()
        {
        }
        function get_original_fields()
        {
        }
        public function cancel()
        {
        }
        /**
         * @param TranslationProxy_Project $project
         * @param int                      $translator_id
         * @param WPML_TM_CMS_ID           $cms_id_helper
         * @param TranslationManagement    $tm_instance
         * @param null|string              $note
         *
         * @return array
         */
        function send_to_tp($project, $translator_id, &$cms_id_helper, &$tm_instance, $note = \null)
        {
        }
        /**
         * @param bool|false $original
         *
         * @return string
         */
        abstract function get_url($original = \false);
        /**
         * @return WP_Post|WPML_Package|mixed
         */
        abstract function get_original_document();
        protected function load_status()
        {
        }
        /**
         * @param int $job_id
         *
         * @return bool|stdClass|WPML_Element_Translation_Job
         */
        protected function load_job_data($job_id)
        {
        }
        protected function save_updated_assignment()
        {
        }
        /**
         * Retrieves the batch ID for job elements using the
         * `icl_translation_status` and `icl_translate_job` tables
         */
        protected function load_batch_id()
        {
        }
        private function get_iclt_field($field_name, $translation)
        {
        }
        /**
         * If the job does not have deadline date,
         * we consider that the job was completed on time.
         *
         * @return bool
         */
        public function is_completed_on_time()
        {
        }
        /**
         * @return false|int Negative integer if the job was completed before the deadline, or positive either.
         *                   False is the job has no deadline date
         */
        public function get_number_of_days_overdue()
        {
        }
        /** @return string|null */
        public function get_deadline_date()
        {
        }
        /** @return string|null */
        public function get_completed_date()
        {
        }
        /** @return string|null */
        public function get_manager_id()
        {
        }
        /** @return string|null */
        protected function get_title_from_db()
        {
        }
        /** @return string|null */
        protected function get_uuid()
        {
        }
    }
    class WPML_Post_Translation_Job extends \WPML_Element_Translation_Job
    {
        function get_original_document()
        {
        }
        /**
         * @param bool|false $original
         *
         * @return string
         */
        public function get_url($original = \false)
        {
        }
        /**
         * It checks that the post type is translatable.
         *
         * @return bool
         */
        function is_translatable_post_type()
        {
        }
        function update_fields_from_post()
        {
        }
        function save_terms_to_post()
        {
        }
        function load_terms_from_post_into_job($delete = \null)
        {
        }
        /**
         * @return string
         */
        public function get_title()
        {
        }
        /**
         * @return string
         */
        public function get_type_title()
        {
        }
        /**
         * @return string
         */
        public function get_post_type()
        {
        }
        protected function load_resultant_element_id()
        {
        }
        protected function get_terms_in_job_rows()
        {
        }
        /**
         * Retrieves an array of all terms associated with a post. This array is indexed by indexes of the for {t_}{term_taxonomy_id}.
         *
         * @return array
         */
        protected function get_term_field_array_for_post()
        {
        }
        protected function set_translated_term_values($delete)
        {
        }
        private function getTermMeta($term_taxonomy_id)
        {
        }
        private function getTermDescription($term_taxonomy_id)
        {
        }
    }
    class WPML_External_Translation_Job extends \WPML_Element_Translation_Job
    {
        function get_original_document()
        {
        }
        /**
         * @param bool|false $original
         *
         * @return string
         */
        public function get_url($original = \false)
        {
        }
        /**
         * @return string
         */
        public function get_title()
        {
        }
        /**
         * @return string
         */
        public function get_type_title()
        {
        }
        protected function load_resultant_element_id()
        {
        }
        private function title_from_job_fields()
        {
        }
    }
    class WPML_String_Translation_Job extends \WPML_Translation_Job
    {
        protected function load_job_data($string_translation_id)
        {
        }
        public function get_title()
        {
        }
        /**
         * @return string
         */
        public function get_id()
        {
        }
        public function get_type()
        {
        }
        public function get_original_element_id()
        {
        }
        public function cancel()
        {
        }
        protected function load_status()
        {
        }
        public function to_array()
        {
        }
        protected function load_resultant_element_id()
        {
        }
        protected function save_updated_assignment()
        {
        }
        /**
         * Retrieves the batch ID for a string job
         */
        protected function load_batch_id()
        {
        }
    }
    class WPML_Translation_Job_Helper_With_API extends \WPML_Translation_Job_Helper
    {
        /** @var  WPML_Element_Translation_Package $package_helper */
        protected $package_helper;
        function __construct()
        {
        }
        protected function get_translation_job($job_id, $include_non_translatable_elements = \false, $revisions = 0)
        {
        }
        protected function get_lang_by_rid($rid)
        {
        }
    }
    class WPML_Save_Translation_Data_Action extends \WPML_Translation_Job_Helper_With_API
    {
        /** @var WPML_TM_Records $tm_records */
        private $tm_records;
        /** @var  array $data */
        private $data;
        private $redirect_target = \false;
        private $translate_link_targets_in_posts;
        private $translate_link_targets_in_strings;
        public function __construct($data, $tm_records)
        {
        }
        function save_translation()
        {
        }
        /**
         * Returns false if after saving the translation no redirection is to happen or the target of the redirection
         * in case saving the data is followed by a redirect.
         *
         * @return false|string
         */
        function get_redirect_target()
        {
        }
        private function save_translation_field($tid, $field)
        {
        }
        private function handle_failed_validation($validation_results, $data_to_validate)
        {
        }
        private function get_validation_results($job, $data_to_validate)
        {
        }
        private function save_terms_for_job($job_id)
        {
        }
        private function add_message($message)
        {
        }
        /**
         * @param string   $element_type_prefix
         * @param object   $job
         * @param callable $decoder
         */
        private static function save_external($element_type_prefix, $job, $decoder)
        {
        }
        /**
         * @param string $element_type_prefix
         * @param object $job
         */
        private static function notify_job_in_progress($element_type_prefix, $job)
        {
        }
    }
    abstract class WPML_TM_Update_Translation_Data_Action extends \WPML_Translation_Job_Helper_With_API
    {
        function get_prev_job_data($rid)
        {
        }
        /**
         * Adds a translation job record in icl_translate_job
         *
         * @param mixed $rid
         * @param mixed $translator_id
         * @param       $translation_package
         * @param array $batch_options
         *
         * @return bool|int
         */
        function add_translation_job($rid, $translator_id, array $translation_package, array $batch_options)
        {
        }
        /**
         * @param int   $prev_id
         * @param array $package
         *
         * @return mixed
         */
        protected abstract function populate_prev_translation($prev_id, array $package);
        /**
         * @param int   $rid
         * @param array $package
         *
         * @return mixed
         */
        protected function get_translated_field_values($rid, array $package)
        {
        }
        protected function fire_notification_actions($job_id, $translation_status, $translator_id)
        {
        }
    }
    class WPML_TM_Update_Post_Translation_Data_Action extends \WPML_TM_Update_Translation_Data_Action
    {
        protected function populate_prev_translation($rid, array $package)
        {
        }
        private function get_previous_element($prev_job, $field_name)
        {
        }
    }
    class WPML_TM_Update_External_Translation_Data_Action extends \WPML_TM_Update_Translation_Data_Action
    {
        protected function populate_prev_translation($rid, array $package)
        {
        }
    }
    abstract class WPML_TM_Menus
    {
        protected $post_types;
        protected $tab_items;
        private $base_target_url;
        protected $current_shown_item;
        /** @var  WPML_UI_Screen_Options_Pagination|null $dashboard_pagination */
        protected $dashboard_pagination;
        function __construct()
        {
        }
        public function display_main(\WPML_UI_Screen_Options_Pagination $dashboard_pagination = \null)
        {
        }
        protected abstract function render_main();
        private function build_tab_item_target_url($target)
        {
        }
        protected abstract function build_tab_items();
        /**
         * @return string
         */
        private function get_current_shown_item()
        {
        }
        private function build_tabs()
        {
        }
        private function build_content()
        {
        }
        protected function render_items()
        {
        }
        public function build_content_dashboard_fetch_translations_box()
        {
        }
        /**
         * Used only by unit tests at the moment
         * @return mixed
         */
        public function get_post_types()
        {
        }
        protected function heading($text)
        {
        }
        private function current_user_can_access($tab_item)
        {
        }
        protected abstract function get_page_slug();
        protected abstract function get_default_tab();
    }
    class WPML_TM_Menus_Settings extends \WPML_TM_Menus
    {
        /** @var WPML_Translate_Link_Targets_UI $translate_link_targets_ui */
        private $translate_link_targets_ui;
        /** @var bool $end_user_feature_enabled */
        private $end_user_feature_enabled;
        private $mcsetup_sections = array();
        public function init()
        {
        }
        private function init_navigation_links()
        {
        }
        protected function render_main()
        {
        }
        protected function build_tab_items()
        {
        }
        private function build_mcs_item()
        {
        }
        private function build_translation_notifications_item()
        {
        }
        public function build_content_mcs()
        {
        }
        private function build_content_mcs_custom_fields()
        {
        }
        public function build_content_translation_notifications()
        {
        }
        protected function get_page_slug()
        {
        }
        protected function get_default_tab()
        {
        }
        private function render_mcsetup_navigation_links()
        {
        }
        private function get_navigation_link($anchor)
        {
        }
        /** @return bool */
        private function should_show_mcsetup_section($anchor)
        {
        }
        /** @return WPML_Translate_Link_Targets_UI */
        private function get_translate_link_targets_ui()
        {
        }
    }
    class WPML_TM_Menus_Management extends \WPML_TM_Menus
    {
        const SKIP_TM_WIZARD_META_KEY = 'wpml_skip_tm_wizard';
        /** @var IWPML_Template_Service $template_service */
        private $template_service;
        /** @var WPML_Translation_Manager_Records $manager_records */
        private $manager_records;
        /** @var WPML_Translator_Records $translator_records */
        private $translator_records;
        private $active_languages;
        private $translatable_types;
        private $current_language;
        private $filter_post_status;
        private $filter_translation_type;
        private $post_statuses;
        private $selected_languages;
        private $source_language;
        /** @var \WPML_TM_Translation_Priorities */
        private $translation_priorities;
        private $dashboard_title_sort_link;
        private $dashboard_date_sort_link;
        private $documents;
        private $selected_posts = array();
        private $translation_filter;
        private $found_documents;
        /**
         * @var \Mockery\MockInterface
         */
        private $admin_sections;
        public function __construct(\IWPML_Template_Service $template_service, \WPML_Translation_Manager_Records $manager_records, \WPML_Translator_Records $translator_records)
        {
        }
        protected function render_main()
        {
        }
        /**
         * It builds all the sections.
         */
        protected function build_tab_items()
        {
        }
        /**
         * It reorders all items based on their `order` key as well as the order (index) they were added.
         */
        private function reorder_items()
        {
        }
        public function should_show_wizard()
        {
        }
        private function is_wizard_running()
        {
        }
        private function is_any_translation_service_active()
        {
        }
        private function build_dashboard_item()
        {
        }
        public function build_content_dashboard()
        {
        }
        /**
         * Used only by unit tests at the moment
         */
        private function build_dashboard_data()
        {
        }
        private function build_dashboard_filter_arguments()
        {
        }
        private function build_dashboard_documents()
        {
        }
        /**
         * @return bool
         */
        private function there_are_hidden_posts()
        {
        }
        private function display_hidden_posts_message()
        {
        }
        private function build_content_dashboard_remote_translations_controls()
        {
        }
        private function build_content_dashboard_results()
        {
        }
        private function build_content_dashboard_documents()
        {
        }
        private function get_translate_tooltip_attributes()
        {
        }
        private function get_translate_tooltip_text()
        {
        }
        private function build_content_dashboard_documents_options()
        {
        }
        private function build_content_dashboard_documents_head_footer_cells()
        {
        }
        private function build_content_dashboard_documents_body()
        {
        }
        /**
         * @return bool
         */
        private function current_user_can_manage_translations()
        {
        }
        private function build_content_dashboard_documents_sorting_link($url, $label, $filter_argument)
        {
        }
        private function build_basket_item()
        {
        }
        /**
         * @param int $basket_items_count
         *
         * @return string
         */
        private function build_basket_item_caption($basket_items_count = 0)
        {
        }
        public function build_content_basket()
        {
        }
        private function build_translation_options()
        {
        }
        public function get_translators_dropdown($lang_code)
        {
        }
        private function build_translation_jobs_item()
        {
        }
        public function build_content_translation_jobs()
        {
        }
        private function build_tp_com_log_item()
        {
        }
        public function build_tp_com_log()
        {
        }
        public function get_dashboard_documents()
        {
        }
        public function build_content_dashboard_filter()
        {
        }
        private function build_external_types()
        {
        }
        /**
         * @param array $post_types
         *
         * @since 2.6.0
         *
         * @return array
         */
        public function exclude_attachments($post_types)
        {
        }
        protected function get_page_slug()
        {
        }
        protected function get_default_tab()
        {
        }
        /**
         * @return bool|\TranslationProxy_Service|\WP_Error
         */
        private function is_translation_service_enabled()
        {
        }
        /**
         * @return string
         */
        private function get_translation_roles_link($text)
        {
        }
        /**
         * @return string
         */
        private function get_translation_services_link($text)
        {
        }
        private function get_tm_menu_link($section, $text)
        {
        }
    }
    class WPML_Dashboard_Ajax
    {
        /** @var WPML_Super_Globals_Validation $super_globals*/
        private $super_globals;
        public function __construct(\WPML_Super_Globals_Validation $super_globals)
        {
        }
        public function init_ajax_actions()
        {
        }
        public function enqueue_js()
        {
        }
        private function get_wpml_tm_script_js_strings()
        {
        }
        public function wpml_duplicate_dashboard()
        {
        }
        public function wpml_need_sync_message()
        {
        }
    }
    /**
     * Class WPML_TM_Dashboard
     */
    class WPML_TM_Dashboard
    {
        /**
         * @var array
         */
        private $translatable_post_types = \null;
        /**
         * @var wpdb
         */
        private $wpdb;
        /**
         * @var SitePress
         */
        private $sitepress;
        /**
         * @var int
         */
        private $found_documents = 0;
        /**
         * WPML_TM_Dashboard constructor.
         *
         * @param wpdb $wpdb
         * @param SitePress $sitepress
         */
        public function __construct(\wpdb $wpdb, \SitePress $sitepress)
        {
        }
        /**
         * @param array $args
         *
         * @return array
         */
        public function get_documents($args = array())
        {
        }
        /**
         * @param $args
         *
         * @return array
         */
        private function remove_empty_arguments($args)
        {
        }
        /**
         * Add list of translatable post types to dashboard.
         *
         * @param array $results
         * @param array $args
         *
         * @return array
         */
        private function add_translatable_posts($results, $args)
        {
        }
        /**
         * Add additional where conditions to support the following query arguments:
         *  - post_title_like         - Allow query posts with SQL LIKE in post title.
         *  - post_language_to        - Allow query posts with language they are translated to.
         *  - post_translation_status - Allow to query posts by their translation status.
         * @param string $where
         * @param object $wp_query
         *
         * @return string
         */
        public function add_dashboard_filter_conditions($where, $wp_query)
        {
        }
        /**
         * Add string packages to translation dashboard.
         * @param array $results
         * @param array $args
         *
         * @return array
         */
        private function add_string_packages($results, $args)
        {
        }
        /**
         * Create additional where clause for querying string packages based on filters.
         * @param array $args
         *
         * @return string
         */
        private function create_string_packages_where($args)
        {
        }
        /**
         * @param  integer  $translation_status
         * @param  string  $language
         *
         * @return string
         */
        private function build_translation_status_where($translation_status, $language = \null)
        {
        }
        private function only_language_condition($language)
        {
        }
        private function explicit_status_condition($status, $language = \null)
        {
        }
        private function needs_update_condition($language = \null)
        {
        }
        private function not_translated_or_needs_update_condition($language = \null)
        {
        }
        private function language_where($language)
        {
        }
        /**
         * @param array $args
         * @param string $post_type
         *
         * @return bool
         */
        private function is_cpt_type($args = array(), $post_type = '')
        {
        }
        /**
         * @return array
         */
        private function get_translatable_post_types()
        {
        }
    }
}
namespace WPML\TM\Templates\Notices {
    class AteLocked
    {
        public function renderUser($model)
        {
        }
        public function renderAdmin($model)
        {
        }
    }
}
namespace {
    function deprecated_icl_data_from_pro_translation($translation)
    {
    }
    function wpml_tm_save_job_fields_from_post($job_id)
    {
    }
    /**
     * @param array $data
     * @param bool  $redirect_after_saving
     *
     * @return bool
     */
    function wpml_tm_save_data(array $data, $redirect_after_saving = \true)
    {
    }
    function wpml_tm_add_translation_job($rid, $translator_id, $translation_package, $batch_options)
    {
    }
    /**
     * @param int $job_id
     */
    function wpml_set_job_translated_term_values($job_id)
    {
    }
    function wpml_tm_assign_translation_job($job_id, $translator_id, $service = 'local', $type)
    {
    }
    /**
     * Potentially handles the request to add strings to the translation basket,
     * triggered by String Translation.
     */
    function wpml_tm_add_strings_to_basket()
    {
    }
    /**
     * @param mixed $default
     * @param int   $rid
     *
     * @return mixed
     */
    function wpml_filter_rid_to_untranslated_job_id($default, $rid)
    {
    }
    /**
     * @param int|object $element
     *
     * @return string
     */
    function wpml_tm_element_md5($element)
    {
    }
    /**
     * Filters the possible target languages for creating a new post translation
     * on the post edit screen.
     *
     * @param string[] $allowed_langs
     * @param int      $element_id
     * @param string   $element_type_prefix
     *
     * @return string[]
     */
    function wpml_tm_filter_post_target_langs($allowed_langs, $element_id, $element_type_prefix)
    {
    }
    /**
     * @return WPML_TM_Element_Translations
     */
    function wpml_tm_load_element_translations()
    {
    }
    function wpml_tm_load_status_display_filter()
    {
    }
    /**
     * @return \WPML_TM_Page_Builders_Hooks
     */
    function wpml_tm_page_builders_hooks()
    {
    }
    /**
     * @return \WPML_TM_Custom_XML_Factory
     */
    function wpml_tm_custom_xml_factory()
    {
    }
    /**
     * @return \WPML_TM_Custom_XML_UI_Hooks
     */
    function wpml_tm_custom_xml_ui_hooks()
    {
    }
    /**
     * @return \WPML_Translations_Queue_Factory
     */
    function wpml_tm_translation_queue_factory()
    {
    }
    /**
     * @return \WPML_UI_Screen_Options_Factory
     */
    function wpml_ui_screen_options_factory()
    {
    }
    /**
     * @return \WPML_TM_Loader
     */
    function wpml_tm_loader()
    {
    }
    /**
     * @return \WPML_TP_Translator
     */
    function wpml_tm_translator()
    {
    }
    /**
     * It returns a single instance of \WPML_Translation_Management.
     *
     * @return \WPML_Translation_Management
     */
    function wpml_translation_management()
    {
    }
    /**
     * @return \WPML_Translation_Basket
     */
    function wpml_translation_basket()
    {
    }
    /**
     * @return \WPML_TM_Translate_Independently
     */
    function wpml_tm_translate_independently()
    {
    }
    /**
     * @return WPML_Translation_Proxy_Basket_Networking
     */
    function wpml_tm_load_basket_networking()
    {
    }
    /**
     * @return WPML_Translation_Proxy_Networking
     */
    function wpml_tm_load_tp_networking()
    {
    }
    /**
     * @return WPML_TM_Blog_Translators
     */
    function wpml_tm_load_blog_translators()
    {
    }
    /**
     * @return WPML_TM_Translators_Dropdown
     */
    function wpml_tm_get_translators_dropdown()
    {
    }
    /**
     * @return WPML_TM_Mail_Notification
     */
    function wpml_tm_init_mail_notifications()
    {
    }
    /**
     * It returns a single instance of the class.
     *
     * @return WPML_Dashboard_Ajax
     */
    function wpml_tm_load_tm_dashboard_ajax()
    {
    }
    function wpml_tm_load_and_intialize_dashboard_ajax()
    {
    }
    /**
     * It returns a single instance of the class.
     *
     * @return WPML_Translation_Job_Factory
     */
    function wpml_tm_load_job_factory()
    {
    }
    /**
     * It returns a single instance of the class.
     *
     * @return WPML_TM_XLIFF_Factory
     */
    function wpml_tm_xliff_factory()
    {
    }
    /**
     * It returns a single instance of the class.
     *
     * @return WPML_TM_XLIFF_Shortcodes
     */
    function wpml_tm_xliff_shortcodes()
    {
    }
    /**
     * It returns an instance of the class.
     *
     * @return \WPML_TM_Old_Jobs_Editor
     */
    function wpml_tm_load_old_jobs_editor()
    {
    }
    function tm_after_load()
    {
    }
    /**
     * It returns an instance of the class.
     *
     * @return WPML_TM_Records
     */
    function wpml_tm_get_records()
    {
    }
    /**
     * It returns an instance of the class.
     *
     * @return WPML_TM_Xliff_Frontend
     */
    function setup_xliff_frontend()
    {
    }
    /**
     * It returns an instance of the class.
     *
     * @param int $job_id The ID of the job.
     * @param int $rid
     *
     * @return WPML_TM_ATE_Models_Job_Create
     */
    function wpml_tm_create_ATE_job_creation_model($job_id, $rid)
    {
    }
    /**
     * It returns a single instance of the class.
     *
     * @param int $job_id The ID of the job.
     *
     * @return string
     */
    function wpml_tm_get_job_xliff($job_id)
    {
    }
    /**
     * It returns a single instance of the class.
     *
     * @return \WPML_Rest
     */
    function wpml_tm_get_wpml_rest()
    {
    }
    /**
     * It returns a single instance of the class.
     *
     * @return \WPML_TP_API_Client
     */
    function wpml_tm_get_tp_api_client()
    {
    }
    /**
     * It returns a single instance of the class.
     *
     * @return \WPML_TP_Project
     */
    function wpml_tm_get_tp_project()
    {
    }
    /**
     * It returns a single instance of the class.
     *
     * @return \WPML_TP_Jobs_API
     */
    function wpml_tm_get_tp_jobs_api()
    {
    }
    /**
     * It returns a single instance of the class.
     *
     * @return \WPML_TP_Project_API
     */
    function wpml_tm_get_tp_project_api()
    {
    }
    /**
     * It returns a single instance of the class.
     *
     * @return \WPML_TP_XLIFF_API
     */
    function wpml_tm_get_tp_xliff_api()
    {
    }
    /**
     * It returns a single instance of the class.
     *
     * @return \WPML_TM_Jobs_Repository
     */
    function wpml_tm_get_jobs_repository()
    {
    }
    /**
     * It returns an instance of the class.
     *
     * @return WPML_TM_ATE_Job_Repository
     */
    function wpml_tm_get_ate_jobs_repository()
    {
    }
    /**
     * @return \WPML\TM\ATE\JobRecords
     */
    function wpml_tm_get_ate_job_records()
    {
    }
    /**
     * It returns a single instance of the class.
     *
     * @return \WPML_TP_Sync_Jobs
     */
    function wpml_tm_get_tp_sync_jobs()
    {
    }
    /**
     * It returns a single instance of the class.
     *
     * @return \WPML_TP_Translations_Repository
     */
    function wpml_tm_get_tp_translations_repository()
    {
    }
    /**
     * It returns a single instance of the class.
     *
     * @return \WPML_WP_User_Query_Factory
     */
    function wpml_tm_get_wp_user_query_factory()
    {
    }
    /**
     * It returns a single instance of the class.
     *
     * @return \WPML_WP_User_Factory
     */
    function wpml_tm_get_wp_user_factory()
    {
    }
    /**
     * It returns a single instance of the class.
     *
     * @return \WPML_TM_Email_Twig_Template_Factory
     */
    function wpml_tm_get_email_twig_template_factory()
    {
    }
    /**
     * It returns a single instance of the class.
     *
     * @return \WPML_TM_AMS_ATE_Factories
     */
    function wpml_tm_ams_ate_factories()
    {
    }
    /**
     * @return string
     * @throws \Auryn\InjectionException
     */
    function wpml_tm_get_ams_ate_console_url()
    {
    }
    function wpml_tm_ate_ams_log(\WPML\TM\ATE\Log\Entry $entry)
    {
    }
    /**
     * @param  string  $original
     * @param  string  $translation
     * @param  bool  $finished_state
     *
     * @return WPML_TM_Translated_Field
     */
    function wpml_tm_create_translated_field($original, $translation, $finished_state)
    {
    }
    /**
     * @param int      $post_id
     * @param \WP_Post $post
     * @param bool     $force_set_status
     */
    function wpml_tm_save_post($post_id, $post, $force_set_status = \false)
    {
    }
    function translation_service_details($service, $show_project = \false)
    {
    }
    /**
     * Registers scripts so that they can be reused throughout WPML plugins
     */
    function wpml_tm_register_js_scripts()
    {
    }
}