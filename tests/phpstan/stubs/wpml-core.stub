<?php

namespace {
    class AbsoluteLinks
    {
        /** @var array */
        public $custom_post_query_vars = [];
        /** @var array */
        public $taxonomies_query_vars = [];
        /** @var array */
        private $active_languages;
        public function __construct()
        {
        }
        public function init_query_vars()
        {
        }
        public function _process_generic_text($source_text, &$alp_broken_links)
        {
        }
        private function get_home_url_with_no_lang_directory()
        {
        }
        private function does_lang_exist($lang)
        {
        }
        public function _get_ids_and_post_types($name)
        {
        }
        private function initialize_rewrite($current_language, $default_language, $sitepress)
        {
        }
        public function all_rewrite_rules($rewrite)
        {
        }
        private function get_regex_replacement($def_url, $type, $type_id, $lang_negotiation, $lang, $dir_path, $home_url, $url_parts, $req_uri_params, $anchor_output)
        {
        }
        /**
         * Split parent/child term slug and get only the last part.
         *
         * @see https://onthegosystems.myjetbrains.com/youtrack/issue/wpmlcore-7036
         *
         * If $typeId is a child term of some taxonomy, then it comes here as `parent/child'
         * in next stages WordPress will use it in url like `?category=parent/child` and will try to resolve
         * what category has slug `parent/child'. WordPress must actually try to find just `child` so the code
         * below gets only last part of slash containing $typeId
         *
         * @param string $typeId Type slug.
         *
         * @return string
         */
        private function maybeStripParentTerm($typeId)
        {
        }
        private function get_regex_replacement_offline($def_url, $offsite_url, $lang_negotiation, $lang, $dir_path, $home_url, $anchor_output)
        {
        }
        /**
         * @param string $url
         *
         * @return string
         */
        private static function escapePlusSign($url)
        {
        }
        private function extract_lang_from_path($sitepress_settings, $default_language, $dir_path)
        {
        }
        public function process_string($st_id)
        {
        }
        public function process_post($post_id)
        {
        }
        public function convert_text($text)
        {
        }
        public function convert_url($url, $lang = \null)
        {
        }
        public function is_home($url)
        {
        }
        /**
         * Check if the link is the pagination inside the post.
         *
         * @param string $url
         * @param string $post_name
         *
         * @return bool
         */
        private function is_pagination_in_post($url, $post_name)
        {
        }
    }
}
namespace WPML\AbsoluteLinks {
    class BlockProtector
    {
        private $protectedBlocks = [];
        public function protect($text)
        {
        }
        public function unProtect($text)
        {
        }
    }
}
namespace {
    /**
     * Class WPML_WPDB_User
     *
     * Superclass for all WPML classes using the @global wpdb $wpdb
     *
     * @since 3.2.3
     */
    abstract class WPML_WPDB_User
    {
        /** @var WPDB $wpdb */
        public $wpdb;
        /**
         * @param WPDB $wpdb
         */
        public function __construct(&$wpdb)
        {
        }
        public function get_wpdb()
        {
        }
    }
    /**
     * WPML_Element_Translation Class
     *
     * @package wpml-core
     * @abstract
     */
    abstract class WPML_Element_Translation extends \WPML_WPDB_User
    {
        /** @var array[] $element_data */
        protected $element_data = [];
        /** @var array[] $translations */
        protected $translations = [];
        /** @var array[] $trid_groups */
        protected $trid_groups = [];
        /** @var array[] $trid_groups */
        protected $translation_ids_element = [];
        /** @var int $type_prefix_length */
        private $type_prefix_length;
        /**
         * @param wpdb $wpdb
         */
        public function __construct(&$wpdb)
        {
        }
        protected abstract function get_element_join();
        protected abstract function get_type_prefix();
        /**
         * Clears the cached translations.
         */
        public function reload()
        {
        }
        public function get_element_trid($element_id)
        {
        }
        /**
         * @param int        $element_id
         * @param string     $lang
         * @param bool|false $original_fallback if true will return input $element_id if no translation is found
         *
         * @return null|int
         */
        public function element_id_in($element_id, $lang, $original_fallback = \false)
        {
        }
        /**
         * @param int  $element_id
         * @param bool $root if true gets the root element of the trid which itself
         * has no original. Otherwise returns the direct original of the given
         * element_id.
         *
         * @return int|null null if the element has no original
         */
        public function get_original_element($element_id, $root = \false)
        {
        }
        public function get_element_id($lang, $trid)
        {
        }
        /**
         * @param int $element_id
         *
         * @return null|string
         */
        public function get_element_lang_code($element_id)
        {
        }
        /**
         * @param int $element_id
         * @param string $output
         *
         * @return array|null|stdClass
         */
        public function get_element_language_details($element_id, $output = \OBJECT)
        {
        }
        public function get_source_lang_code($element_id)
        {
        }
        public function get_type($element_id)
        {
        }
        public function get_source_lang_from_translation_id($translation_id)
        {
        }
        public function get_translation_id($element_id)
        {
        }
        public function get_translations_ids()
        {
        }
        public function get_element_translations($element_id, $trid = \false, $actual_translations_only = \false)
        {
        }
        public function get_element_from_translation_id($translation_id)
        {
        }
        public function get_trid_from_translation_id($translation_id)
        {
        }
        public function get_trids()
        {
        }
        public function prefetch_ids($element_ids)
        {
        }
        /**
         * @param string $trid_snippet
         *
         * @return string
         */
        private function build_sql($trid_snippet)
        {
        }
        private function maybe_populate_cache($element_id, $trid = \false)
        {
        }
        private function group_and_populate_cache($elements)
        {
        }
        private function populate_cache($elements)
        {
        }
        private function filter_for_actual_trans($element_id)
        {
        }
        /**
         * @param int $post_id
         *
         * @return bool
         */
        public function is_a_duplicate($post_id)
        {
        }
    }
    /**
     * Class WPML_Post_Translation
     *
     * @package    wpml-core
     * @subpackage post-translation
     */
    abstract class WPML_Post_Translation extends \WPML_Element_Translation
    {
        protected $settings;
        protected $post_translation_sync;
        public static $defer_term_counting = \false;
        /**
         * @var WPML_Debug_BackTrace
         */
        private $debug_backtrace;
        /**
         * @param array $settings
         * @param wpdb  $wpdb
         */
        public function __construct(&$settings, &$wpdb)
        {
        }
        protected function is_setup_complete()
        {
        }
        public function init()
        {
        }
        public function get_original_post_status($trid, $source_lang_code = \null)
        {
        }
        public function get_original_post_ID($trid, $source_lang_code = \null)
        {
        }
        public function get_original_menu_order($trid, $source_lang_code = \null)
        {
        }
        public function get_original_comment_status($trid, $source_lang_code = \null)
        {
        }
        public function get_original_ping_status($trid, $source_lang_code = \null)
        {
        }
        public function get_original_post_format($trid, $source_lang_code = \null)
        {
        }
        /**
         * @param int     $pidd
         * @param WP_Post $post
         *
         * @return void
         */
        public abstract function save_post_actions($pidd, $post);
        /** @param int $post_id */
        public function attachment_actions($post_id)
        {
        }
        public function shutdown_action()
        {
        }
        public function trash_translation($trans_id)
        {
        }
        public function untrash_translation($trans_id)
        {
        }
        function untrashed_post_actions($post_id)
        {
        }
        public function delete_post_translation_entry($post_id)
        {
        }
        public function trashed_post_actions($post_id)
        {
        }
        /**
         * This function holds all actions to be run after deleting a post.
         * 1. Delete the posts entry in icl_translations.
         * 2. Set one of the posts translations or delete all translations of the post, depending on sitepress settings.
         *
         * @param Integer $post_id
         * @param bool $keep_db_entries Sets whether icl_translations entries are to be deleted or kept, when hooking this to
         * post trashing we want them to be kept.
         */
        public function delete_post_actions($post_id, $keep_db_entries = \false)
        {
        }
        /**
         * @param int    $post_id
         * @param string $post_status
         *
         * @return null|int
         */
        abstract function get_save_post_trid($post_id, $post_status);
        /**
         * @param integer $post_id
         * @param SitePress $sitepress
         * @return bool|mixed|null|string|void
         */
        public function get_save_post_lang($post_id, $sitepress)
        {
        }
        /**
         * @param int    $trid
         * @param string $language_code
         * @param string $default_language
         *
         * @return string|null
         */
        protected abstract function get_save_post_source_lang($trid, $language_code, $default_language);
        /**
         * Sets a posts language details, invalidates caches relating to the post and triggers
         * synchronisation actions across translations of the just saved post.
         *
         * @param int     $trid
         * @param array   $post_vars
         * @param string  $language_code
         * @param string  $source_language
         *
         * @used-by \WPML_Post_Translation::save_post_actions as final step of the WPML Core save_post actions
         */
        protected function after_save_post($trid, $post_vars, $language_code, $source_language)
        {
        }
        /**
         * Create new instance of WPML_WP_Cache for each group and flush cache for group.
         * @param array $groups
         */
        private function flush_object_cache_for_groups($groups = array())
        {
        }
        private function get_original_post_attr($trid, $attribute, $source_lang_code)
        {
        }
        public function has_save_post_action($post)
        {
        }
        /**
         * @param int $post_id
         *
         * @return bool
         */
        protected function is_editing_different_post($post_id)
        {
        }
        protected function get_element_join()
        {
        }
        protected function get_type_prefix()
        {
        }
        public function is_translated_type($post_type)
        {
        }
        /**
         * @param WP_Post $post
         *
         * @return string[] all language codes the post can be translated into
         */
        public function get_allowed_target_langs($post)
        {
        }
        /**
         * Before setting the language of the post to be saved, check if a translation in this language already exists
         * This check is necessary, so that synchronization actions like thrashing or un-trashing of posts, do not lead to
         * database corruption, due to erroneously changing a posts language into a state,
         * where it collides with an existing translation. While the UI prevents this sort of action for the most part,
         * this is not necessarily the case for other plugins like TM.
         * The logic here first of all checks if an existing translation id is present in the desired language_code.
         * If so but this translation is actually not the currently to be saved post,
         * then this post will be saved to its current language. If the translation already exists,
         * the existing translation id will be used. In all other cases a new entry in icl_translations will be created.
         *
         * @param Integer $trid
         * @param String  $post_type
         * @param String  $language_code
         * @param Integer $post_id
         * @param String  $source_language
         */
        private function maybe_set_elid($trid, $post_type, $language_code, $post_id, $source_language)
        {
        }
        /**
         * @return WPML_Post_Synchronization
         */
        private function get_sync_helper()
        {
        }
        /**
         * @return WPML_Debug_BackTrace
         */
        private function get_debug_backtrace()
        {
        }
        public function set_debug_backtrace(\WPML_Debug_BackTrace $debug_backtrace)
        {
        }
        /**
         * @return bool
         */
        protected function is_inner_post_insertion()
        {
        }
        /**
         * @param WP_Post $post
         *
         * @return array
         */
        protected function get_post_vars($post)
        {
        }
        /**
         * @param bool $defer
         */
        protected function defer_term_counting()
        {
        }
        /**
         * @return self|WPML_Frontend_Post_Actions|WPML_Admin_Post_Actions
         */
        public static function getGlobalInstance()
        {
        }
    }
    /**
     * Class WPML_Admin_Post_Actions
     *
     * @package    wpml-core
     * @subpackage post-translation
     */
    class WPML_Admin_Post_Actions extends \WPML_Post_Translation
    {
        const DUPLICATE_MEDIA_META_KEY = '_wpml_media_duplicate';
        const DUPLICATE_FEATURED_META_KEY = '_wpml_media_featured';
        const DUPLICATE_MEDIA_GLOBAL_KEY = 'duplicate_media';
        const DUPLICATE_FEATURED_GLOBAL_KEY = 'duplicate_media';
        private $http_referer;
        public function init()
        {
        }
        /**
         * @param int    $post_id
         * @param string $post_status
         *
         * @return null|int
         */
        function get_save_post_trid($post_id, $post_status)
        {
        }
        /**
         * @param int     $post_id
         * @param WP_Post $post
         */
        public function save_post_actions($post_id, $post)
        {
        }
        /**
         * @param int         $post_id
         * @param string|null $source_language
         */
        private function save_media_options($post_id, $source_language)
        {
        }
        private function has_post_media_options_metabox()
        {
        }
        /**
         * @param int         $post_id
         * @param string|null $source_language
         */
        private function sync_media_options_with_original_or_global_settings($post_id, $source_language)
        {
        }
        private function has_invalid_language_details_on_heartbeat()
        {
        }
        /**
         * @param integer   $post_id
         * @param SitePress $sitepress
         *
         * @return null|string
         */
        public function get_save_post_lang($post_id, $sitepress)
        {
        }
        /**
         * @param array $post_vars
         * @return bool
         */
        private function is_inline_action($post_vars)
        {
        }
        /**
         * @param int    $trid
         * @param string $language_code
         * @param string $default_language
         *
         * @return null|string
         */
        protected function get_save_post_source_lang($trid, $language_code, $default_language)
        {
        }
        /**
         * Gets the source_language $_GET parameter from the HTTP_REFERER
         *
         * @return string|bool
         */
        private function get_source_language_from_referer()
        {
        }
        public function get_trid_from_referer()
        {
        }
        protected function get_http_referer()
        {
        }
    }
    class WPML_Frontend_Post_Actions extends \WPML_Post_Translation
    {
        /**
         * @param int    $post_id
         * @param string $post_status
         *
         * @return null|int
         */
        function get_save_post_trid($post_id, $post_status)
        {
        }
        /**
         * @param int     $pidd
         * @param WP_Post $post
         *
         * @return void
         */
        public function save_post_actions($pidd, $post)
        {
        }
        protected function get_save_post_source_lang($trid, $language_code, $default_language)
        {
        }
    }
    /**
     * Class WPML_WordPress_Actions
     * @package    wpml-core
     * @subpackage post-translation
     */
    class WPML_WordPress_Actions
    {
        /**
         * @param int $post_id
         *
         * @return bool
         */
        public static function is_bulk_trash($post_id)
        {
        }
        /**
         * @param int $post_id
         *
         * @return bool
         */
        public static function is_bulk_untrash($post_id)
        {
        }
        public static function is_heartbeat()
        {
        }
        protected static function is_trash_action()
        {
        }
        protected static function is_untrash_action()
        {
        }
        /**
         * @param string $action
         *
         * @return bool
         */
        protected static function is_action($action, $type = 'get')
        {
        }
        /**
         * @param int $post_id
         * @param bool $check_ids
         *
         * @return bool
         */
        protected static function post_id_in_bulk($post_id, $check_ids = \false)
        {
        }
    }
    /**
     * Class WPML_Create_Post_Helper
     *
     * @since 3.2
     */
    class WPML_Create_Post_Helper
    {
        /** @var SitePress $sitepress */
        private $sitepress;
        public function __construct(\SitePress $sitepress)
        {
        }
        /**
         * @param array       $postarr will be escaped inside the method
         * @param string|null $lang
         * @param bool        $wp_error
         *
         * @return int|WP_Error
         */
        public function insert_post(array $postarr, $lang = \null, $wp_error = \false)
        {
        }
        public function allow_empty_post()
        {
        }
        /**
         * We need to make sure that tag IDs are not casted into strings.
         * This is a side effect of https://core.trac.wordpress.org/ticket/45121
         * (wp_update_post() can modify post tag) for which we have
         * a temporary fix in `\WPML_Page_Builders_Media_Shortcodes_Update::translate`.
         *
         * @param array $postarr
         *
         * @return array
         */
        private function slash_and_preserve_tag_ids(array $postarr)
        {
        }
    }
    abstract class WPML_Hierarchy_Sync extends \WPML_WPDB_User
    {
        const CACHE_GROUP = __CLASS__;
        protected $original_elements_table_alias = 'org';
        protected $translated_elements_table_alias = 'tra';
        protected $original_elements_language_table_alias = 'iclo';
        protected $translated_elements_language_table_alias = 'iclt';
        protected $correct_parent_table_alias = 'corr';
        protected $correct_parent_language_table_alias = 'iclc';
        protected $original_parent_table_alias = 'parents';
        protected $original_parent_language_table_alias = 'parent_lang';
        protected $element_id_column;
        protected $parent_element_id_column;
        protected $parent_id_column;
        protected $element_type_column;
        protected $element_type_prefix;
        protected $elements_table;
        protected $lang_info_table;
        /**
         * @param wpdb $wpdb
         */
        public function __construct(&$wpdb)
        {
        }
        public function clean_cache()
        {
        }
        public function get_unsynced_elements($element_types, $ref_lang_code = \false)
        {
        }
        /**
         * @param string|array $element_types
         * @param bool         $ref_lang_code
         */
        public function sync_element_hierarchy($element_types, $ref_lang_code = \false)
        {
        }
        /**
         * @param string $element_type
         *
         * @return mixed
         */
        public abstract function is_hierarchical($element_type);
        private final function update_hierarchy_for_element($row)
        {
        }
        private function validate_parent_synchronization($row)
        {
        }
        private final function get_source_element_join()
        {
        }
        private final function get_translated_element_join()
        {
        }
        private final function get_source_element_table()
        {
        }
        private function get_join_translation_language_data($ref_language_code)
        {
        }
        private function get_select_statement()
        {
        }
        private final function get_original_parent_join()
        {
        }
        private final function get_original_parent_language_join()
        {
        }
        private final function get_correct_parent_language_join()
        {
        }
        private final function get_correct_parent_element_join()
        {
        }
        private final function get_where_statement($element_types, $ref_lang_code)
        {
        }
    }
    class WPML_Post_Hierarchy_Sync extends \WPML_Hierarchy_Sync
    {
        protected $element_id_column = 'ID';
        protected $parent_element_id_column = 'ID';
        protected $parent_id_column = 'post_parent';
        protected $element_type_column = 'post_type';
        protected $element_type_prefix = 'post_';
        /**
         * @param wpdb $wpdb
         */
        public function __construct(&$wpdb)
        {
        }
        /**
         * @param string $element_type
         *
         * @return bool
         */
        public function is_hierarchical($element_type)
        {
        }
    }
    class WPML_Root_Page_Actions
    {
        /** @var array $sp_settings */
        private $sp_settings;
        public function __construct(&$sitepress_settings)
        {
        }
        public function delete_root_page_lang()
        {
        }
        /**
         * Checks if a given $url points at the root page
         *
         * @param string $url
         *
         * @return bool
         *
         * @uses \WPML_Root_Page::is_root_page
         */
        public function is_url_root_page($url)
        {
        }
        /**
         * If a page is used as the root page, returns the id of that page, otherwise false.
         *
         * @return bool|false|int
         */
        public function get_root_page_id()
        {
        }
        function wpml_home_url_init()
        {
        }
        function wpml_home_url_exclude_root_page_from_menus($args)
        {
        }
        /**
         * Filters out all page menu items that point to the root page.
         *
         * @param object[] $items
         *
         * @return array
         *
         * @hook wp_get_nav_menu_items
         */
        function exclude_root_page_menu_item($items)
        {
        }
        function wpml_home_url_exclude_root_page($excludes)
        {
        }
        function wpml_home_url_exclude_root_page2($args)
        {
        }
        function wpml_home_url_get_pages($pages)
        {
        }
        function wpml_home_url_language_box_setup()
        {
        }
        function wpml_home_url_language_box($post)
        {
        }
        function wpml_home_url_save_post_actions($pidd, $post)
        {
        }
        function wpml_home_url_setup_root_page()
        {
        }
        /**
         * @param WP_Query $q
         *
         * @return mixed
         */
        function wpml_home_url_parse_query($q)
        {
        }
        private function set_page_query_parameters($q, $page_id)
        {
        }
    }
    class WPML_Comment_Duplication
    {
        public function move_to_original($duplicate_of, $post_duplicates, $comment)
        {
        }
        public function get_correct_parent($comment, $dup_id)
        {
        }
        public function insert_duplicated_comment($comment, $dup_id, $original_cid)
        {
        }
        private function duplicate_exists($dup_id, $original_cid)
        {
        }
    }
    /**
     * Class WPML_WPDB_And_SP_User
     */
    abstract class WPML_WPDB_And_SP_User extends \WPML_WPDB_User
    {
        /** @var SitePress $sitepress */
        protected $sitepress;
        /**
         * @param wpdb      $wpdb
         * @param SitePress $sitepress
         */
        public function __construct(&$wpdb, &$sitepress)
        {
        }
    }
    /**
     * Class WPML_Post_Duplication
     *
     * @package    wpml-core
     * @subpackage post-translation
     */
    class WPML_Post_Duplication extends \WPML_WPDB_And_SP_User
    {
        function get_duplicates($master_post_id)
        {
        }
        function make_duplicate($master_post_id, $lang)
        {
        }
        /**
         * @param int $element_id
         *
         * @return null|string
         */
        private function is_external($element_id)
        {
        }
        private function run_wpml_actions($master_post, $trid, $lang, $id, $post_array)
        {
        }
        private function sync_page_template($master_post_id, $duplicate_post_id)
        {
        }
        private function duplicate_comments($master_post_id, $translated_id)
        {
        }
        /**
         * @param array  $post_array
         * @param string $lang
         *
         * @return int|WP_Error
         */
        private function save_duplicate(array $post_array, $lang)
        {
        }
        private function duplicate_fix_children($master_post_id, $lang)
        {
        }
        private function duplicate_taxonomies($master_post_id, $lang)
        {
        }
        private function sync_duplicate_password($master_post_id, $duplicate_post_id)
        {
        }
        private function duplicate_custom_fields($master_post_id, $lang)
        {
        }
        /**
         * @param $lang
         * @param $master_post
         *
         * @return mixed|void
         */
        private function duplicate_post_content($lang, $master_post)
        {
        }
        /**
         * @param $lang
         * @param $master_post
         *
         * @return mixed|void
         */
        private function duplicate_post_title($lang, $master_post)
        {
        }
        /**
         * @param string $lang
         * @param WP_Post $master_post
         *
         * @return mixed|void
         */
        private function duplicate_post_excerpt($lang, $master_post)
        {
        }
    }
    /**
     * Class WPML_SP_User
     *
     * Superclass for all WPML classes using the @global SitePress $sitepress directly
     *
     * @since 3.2.3
     */
    abstract class WPML_SP_User
    {
        /** @var  SitePress $sitepress */
        protected $sitepress;
        /**
         * @param SitePress $sitepress
         */
        public function __construct(&$sitepress)
        {
        }
    }
    abstract class WPML_SP_And_PT_User extends \WPML_SP_User
    {
        /** @var  WPML_Post_Translation $post_translation */
        protected $post_translation;
        /**
         * @param WPML_Post_Translation $post_translation
         * @param SitePress             $sitepress
         */
        public function __construct(&$post_translation, &$sitepress)
        {
        }
    }
    /**
     * Class WPML_Post_Synchronization
     *
     * @package    wpml-core
     * @subpackage post-translation
     */
    class WPML_Post_Synchronization extends \WPML_SP_And_PT_User
    {
        /** @var bool[] */
        private $sync_parent_cpt = array();
        /** @var $sync_parent bool */
        private $sync_parent;
        /** @var $sync_delete bool */
        private $sync_delete;
        /** @var $sync_ping_status bool */
        private $sync_ping_status;
        /** @var $sync_post_date bool */
        private $sync_post_date;
        /** @var $sync_post_format bool */
        private $sync_post_format;
        /** @var $sync_comment_status bool */
        private $sync_comment_status;
        /** @var $sync_page_template bool */
        private $sync_page_template;
        /** @var bool $sync_menu_order */
        private $sync_menu_order;
        /** @var $sync_password bool */
        private $sync_password;
        /** @var $sync_private_flag bool */
        private $sync_private_flag;
        /** @var bool $is_deleting_all_translations */
        private $is_deleting_all_translations = \false;
        /** @var array $deleted_post_types */
        private $deleted_post_types = array();
        /**
         * @var int
         */
        private $sync_document_status;
        /**
         * @param array                 $settings
         * @param WPML_Post_Translation $post_translations
         * @param SitePress             $sitepress
         */
        public function __construct(&$settings, &$post_translations, &$sitepress)
        {
        }
        private function must_sync_parents($post_type)
        {
        }
        /**
         * Fixes parents of translations for hierarchical post types
         *
         * User changed parent for a post in $post_type and we are setting proper parent for $translation_id in
         * $language_code_translated language
         *
         * @param string $post_type - post_type that should have the translated parents fixed
         */
        private function maybe_fix_translated_parent($post_type)
        {
        }
        public function sync_with_duplicates($post_id)
        {
        }
        /**
         * @param int  $post_id
         * @param bool $keep_db_entries
         */
        public function delete_post_actions($post_id, $keep_db_entries = \false)
        {
        }
        /**
         * @param int $post_id
         * @param int $trid
         *
         * @return array
         */
        private function get_translations_without_source($post_id, $trid)
        {
        }
        private function is_bulk_delete()
        {
        }
        /** @param string $post_type */
        private function reset_cache($post_type)
        {
        }
        /** @param string $post_type */
        private function defer_delete_actions($post_type)
        {
        }
        public function shutdown_action()
        {
        }
        /**
         * @param array $translated_ids
         * @param bool  $keep_db_entries
         */
        private function delete_translations(array $translated_ids, $keep_db_entries)
        {
        }
        /** @param string $post_type */
        private function run_final_actions_for_delete_post($post_type)
        {
        }
        private function is_bulk_prevented($post_id)
        {
        }
        function untrashed_post_actions($post_id)
        {
        }
        public function sync_with_translations($post_id, $post_vars = \false)
        {
        }
        /**
         * The function `get_post_status` does not return the raw status for attachments.
         * As we are running direct DB updates here, we need the actual DB value.
         *
         * @param $post_id
         *
         * @return string|false
         */
        private function get_post_status($post_id)
        {
        }
        private function sync_custom_fields($original_id, $post_id)
        {
        }
        private function set_new_original($trid, $removed_lang_code)
        {
        }
    }
    /**
     * Class WPML_Slug_Resolution
     *
     * @package    wpml-core
     * @subpackage post-translation
     */
    abstract class WPML_Slug_Resolution extends \WPML_WPDB_And_SP_User
    {
        const WPML_BACKUP_KEY = '_wpml_backup';
        /**
         * Returns all active language codes ordered by the language order, but having the current language
         * at the beginning.
         *
         * @return string[]
         *
         * @uses \SitePress::get_setting to get the languages order from the sitepress settings
         */
        protected function get_ordered_langs()
        {
        }
        /**
         * @param string   $key
         * @param WP_Query $wp_query
         */
        protected function set_query_var_to_restore($key, \WP_Query $wp_query)
        {
        }
        /**
         * @param WP_Post[] $posts
         * @param WP_Query  $wp_query
         *
         * @return mixed
         */
        public function restore_query_vars($posts, $wp_query)
        {
        }
    }
    /**
     * Class WPML_Name_Query_Filter
     *
     * @package    wpml-core
     * @subpackage post-translation
     *
     * @since      3.2.3
     */
    abstract class WPML_Name_Query_Filter extends \WPML_Slug_Resolution
    {
        /** @var string $post_type */
        protected $post_type;
        /** @var string[] $indexes */
        protected $indexes = array('name');
        /** @var string $id_index */
        protected $id_index = 'p';
        /** @var string[] $active_languages */
        protected $active_languages = array();
        /** @var string $al_regexp */
        protected $al_regexp;
        /** @var  WPML_Post_Translation $post_translation */
        protected $post_translation;
        protected $is_translated;
        /**
         * @param string                $post_type
         * @param SitePress             $sitepress
         * @param WPML_Post_Translation $post_translations
         * @param wpdb                  $wpdb
         */
        public function __construct($post_type, &$sitepress, &$post_translations, &$wpdb)
        {
        }
        /**
         * Looks through the "name" and "pagename" query vars in a given query and identifies the correct page_id
         * corresponding to either of these two and then adjusts the query page_id to point at this correct page_id.
         *
         * @param WP_Query $page_query
         *
         * @return array
         *                  - WP_Query that uses the id index stored in \WPML_Name_Query_Filter::$id_index
         *                  instead of "name" or "pagename" in case a match was found, otherwise
         *                  returns the input query unaltered.
         *                  - int|false the page ID
         */
        public function filter_page_name(\WP_Query $page_query)
        {
        }
        protected abstract function select_best_match($pages_with_name);
        /**
         * @param WP_Query $page_query
         * @param int      $pid
         * @param string   $index
         *
         * @return WP_Query
         */
        protected function maybe_adjust_query_by_pid($page_query, $pid, $index)
        {
        }
        /**
         * Called when the post id is being adjusted. Can be overridden.
         *
         * @param WP_Query $page_query
         *
         * @return WP_Query
         */
        protected function adjusting_id($page_query)
        {
        }
        /**
         * Returns a SQL snippet for joining the posts table with icl translations filtered for the post_type
         * of this class.
         *
         * @return string
         */
        protected abstract function get_from_join_snippet();
        /**
         * Generates a regular expression matcher for matching language slugs in a URI
         *
         * @param string[] $active_language_codes
         *
         * @return string
         */
        private function generate_al_regexp($active_language_codes)
        {
        }
        /**
         * @param WP_Query $page_query
         * @param string   $index
         *
         * @return array
         */
        private function query_needs_adjustment(\WP_Query $page_query, $index)
        {
        }
        /**
         * @param string $page_name_for_query
         *
         * @return bool
         */
        private function page_name_has_parent($page_name_for_query)
        {
        }
        /**
         * @param WP_Query $page_query
         *
         * @return int|string
         */
        private function get_post_parent_query_var(\WP_Query $page_query)
        {
        }
        /**
         * @param string     $page_name_for_query
         * @param string|int $post_parent
         *
         * @return array
         */
        private function get_single_slug_adjusted_IDs($page_name_for_query, $post_parent)
        {
        }
        /**
         * @param string     $page_name_for_query
         * @param string|int $post_parent
         *
         * @return array
         */
        private function get_single_slug_adjusted_IDs_from_DB($page_name_for_query, $post_parent)
        {
        }
        /**
         * @param string[] $slugs slugs that were queried for
         *
         * @return int[] page_ids ordered by their likelihood of correctly matching the query target,
         *               derived from checking all slugs against the sits pages slugs as well as their parent slugs.
         *               Elements at the beginning of the array are more correct than later elements, but the results
         *               are not yet filtered for the correct language.
         *
         * @used-by \WPML_Page_Name_Query_Filter::filter_page_name to find the correct page_id corresponding to a set of slugs,
         *                                                         by filtering the results of this function by language of the
         *                                                         returned page_ids.
         *
         */
        private function get_multiple_slug_adjusted_IDs($slugs)
        {
        }
        private function get_where_snippet()
        {
        }
    }
    /**
     * Class WPML_Name_Query_Filter_Untranslated
     *
     * @package    wpml-core
     * @subpackage post-translation
     *
     * @since      3.2.3
     */
    class WPML_Name_Query_Filter_Untranslated extends \WPML_Name_Query_Filter
    {
        protected function select_best_match($pages_with_name)
        {
        }
        /**
         * Returns a SQL snippet for joining the posts table with icl translations filtered for the post_type
         * of this class.
         *
         * @return string
         */
        protected function get_from_join_snippet()
        {
        }
    }
    /**
     * Class WPML_Name_Query_Filter_Translated
     *
     * @package    wpml-core
     * @subpackage post-translation
     *
     * @since      3.2.3
     */
    class WPML_Name_Query_Filter_Translated extends \WPML_Name_Query_Filter
    {
        private $pages_to_langs = array();
        /**
         * @param array $pages_with_name
         *
         * @return int|null|string
         */
        protected function select_best_match($pages_with_name)
        {
        }
        /**
         * @param array $matching_ids
         *
         * @return int|null
         */
        private function get_matching_page_in_requested_lang(array $matching_ids)
        {
        }
        /**
         * @return int|null
         */
        private function get_matching_page_displayed_as_translated()
        {
        }
        /**
         * Note: `$this->active_languages` is already ordered in `get_ordered_langs`
         *
         * @param array $related_page_ids
         *
         * @return int|null
         */
        private function get_the_best_related_page_to_redirect(array $related_page_ids)
        {
        }
        /**
         * Returns a SQL snippet for joining the posts table with icl translations filtered for the post_type
         * of this class.
         *
         * @return string
         */
        protected function get_from_join_snippet()
        {
        }
    }
    /**
     * Class WPML_Page_Name_Query_Filter
     *
     * @package    wpml-core
     * @subpackage post-translation
     *
     * @since      3.2
     */
    class WPML_Page_Name_Query_Filter extends \WPML_Name_Query_Filter_Translated
    {
        protected $id_index = 'page_id';
        /**
         * @param SitePress             $sitepress
         * @param WPML_Post_Translation $post_translations
         * @param wpdb                  $wpdb
         */
        public function __construct(&$sitepress, &$post_translations, &$wpdb)
        {
        }
        /**
         * @param WP_Query $page_query
         * @param int      $pid
         * @param string   $index
         *
         * @return WP_Query
         */
        protected function maybe_adjust_query_by_pid($page_query, $pid, $index)
        {
        }
        /**
         * Called when the post id is being adjusted. Can be overridden.
         *
         * @param WP_Query $page_query
         *
         * @return WP_Query
         */
        protected function adjusting_id($page_query)
        {
        }
    }
    class WPML_Installation extends \WPML_WPDB_And_SP_User
    {
        const WPML_START_VERSION_KEY = 'wpml_start_version';
        public static function getStartVersion()
        {
        }
        function go_to_setup1()
        {
        }
        /**
         * Sets the locale in the icl_locale_map if it has not yet been set
         *
         * @param $initial_language_code
         */
        private function maybe_set_locale($initial_language_code)
        {
        }
        public function finish_step2($active_languages)
        {
        }
        public function set_active_languages($arr)
        {
        }
        private function sanitize_language_input($lang_codes)
        {
        }
        public function finish_installation()
        {
        }
        public function store_site_key($site_key = \false)
        {
        }
        public function finish_step3()
        {
        }
        private function maybe_move_setup($step)
        {
        }
        private function updated_active_languages()
        {
        }
        public function finish_step1($initial_language_code)
        {
        }
        /**
         * @param string $initial_language_code
         *
         * @return string
         */
        private function get_admin_language($initial_language_code)
        {
        }
        private function set_initial_default_category($initial_lang)
        {
        }
        private function rename_default_category_of_initial_language($initial_lang, $category_id)
        {
        }
        /**
         * @param string $display_language
         * @param bool $active_only
         *
         * @param bool $major_first
         *
         * @return array
         */
        public function refresh_active_lang_cache($display_language, $active_only = \false, $major_first = \false, $order_by = 'english_name')
        {
        }
        private function update_languages_order()
        {
        }
        private function prepopulate_translations($lang)
        {
        }
        public function update_active_language($lang)
        {
        }
        function reset_language_data()
        {
        }
    }
    class WPML_Media_Duplication_Setup
    {
        const MEDIA_SETTINGS_OPTION_KEY = '_wpml_media';
        public static function initialize_settings()
        {
        }
    }
    class WPML_Settings_Helper
    {
        const KEY_CPT_UNLOCK_OPTION = 'custom_posts_unlocked_option';
        const KEY_TAXONOMY_UNLOCK_OPTION = 'taxonomies_unlocked_option';
        /** @var SitePress */
        protected $sitepress;
        /** @var WPML_Post_Translation */
        protected $post_translation;
        /**
         * @var WPML_Settings_Filters
         */
        private $filters;
        /**
         * @param WPML_Post_Translation $post_translation
         * @param SitePress             $sitepress
         */
        public function __construct(\WPML_Post_Translation $post_translation, \SitePress $sitepress)
        {
        }
        /**
         * @return WPML_Settings_Filters
         */
        private function get_filters()
        {
        }
        function set_post_type_translatable($post_type)
        {
        }
        function set_post_type_display_as_translated($post_type)
        {
        }
        function set_post_type_not_translatable($post_type)
        {
        }
        private function set_post_type_translate_mode($post_type, $mode)
        {
        }
        function set_taxonomy_translatable($taxonomy)
        {
        }
        function set_taxonomy_display_as_translated($taxonomy)
        {
        }
        function set_taxonomy_translatable_mode($taxonomy, $mode)
        {
        }
        function set_taxonomy_not_translatable($taxonomy)
        {
        }
        function set_post_type_translation_unlocked_option($post_type, $unlocked = \true)
        {
        }
        function set_taxonomy_translation_unlocked_option($taxonomy, $unlocked = \true)
        {
        }
        /**
         * @deprecated use the action `wpml_activate_slug_translation` instead
         *             or `WPML_ST_Post_Slug_Translation_Settings` instead (on ST side)
         *
         * @param string $post_type
         */
        function activate_slug_translation($post_type)
        {
        }
        /**
         * @deprecated use `WPML_ST_Post_Slug_Translation_Settings` instead (on ST side)
         *
         * @param string $post_type
         */
        function deactivate_slug_translation($post_type)
        {
        }
        /**
         * @param array[] $taxs_obj_type
         *
         * @see \WPML_Config::maybe_add_filter
         *
         * @return array
         */
        function _override_get_translatable_taxonomies($taxs_obj_type)
        {
        }
        /**
         * @param array[] $types
         *
         * @see \WPML_Config::maybe_add_filter
         *
         * @return array
         */
        function _override_get_translatable_documents($types)
        {
        }
        /**
         * Updates the custom post type translation settings with new settings.
         *
         * @param array $new_options
         *
         * @uses \SitePress::get_setting
         * @uses \SitePress::save_settings
         *
         * @return array new custom post type settings after the update
         */
        function update_cpt_sync_settings(array $new_options)
        {
        }
        /**
         * Updates the taxonomy type translation settings with new settings.
         *
         * @param array $new_options
         *
         * @uses \SitePress::get_setting
         * @uses \SitePress::save_settings
         *
         * @return array new taxonomy type settings after the update
         */
        function update_taxonomy_sync_settings(array $new_options)
        {
        }
        /**
         * Updates the custom post type unlocked settings with new settings.
         *
         * @param array $unlock_options
         *
         * @uses \SitePress::get_setting
         * @uses \SitePress::save_settings
         *
         * @return array new custom post type unlocked settings after the update
         */
        function update_cpt_unlocked_settings(array $unlock_options)
        {
        }
        /**
         * Updates the taxonomy type unlocked settings with new settings.
         *
         * @param array $unlock_options
         *
         * @uses \SitePress::get_setting
         * @uses \SitePress::save_settings
         *
         * @return array new taxonomy type unlocked settings after the update
         */
        function update_taxonomy_unlocked_settings(array $unlock_options)
        {
        }
        /**
         * @param array  $unlock_options
         * @param string $setting_key
         *
         * @return array
         */
        private function update_unlocked_settings(array $unlock_options, $setting_key)
        {
        }
        /**
         * @param string $config_type
         */
        function maybe_add_filter($config_type)
        {
        }
        private function clear_ls_languages_cache()
        {
        }
    }
    class SitePress_Setup
    {
        static function setup_complete()
        {
        }
        static function languages_complete()
        {
        }
        private static function active_languages_complete()
        {
        }
        /**
         * @return array
         */
        private static function get_languages_codes()
        {
        }
        /**
         * @return array
         */
        private static function get_languages_names()
        {
        }
        private static function get_languages_names_count()
        {
        }
        static function get_charset_collate()
        {
        }
        private static function create_languages()
        {
        }
        static function languages_table_is_complete()
        {
        }
        /**
         * @param string $language_name
         *
         * @return string
         */
        protected static function fix_language_name($language_name)
        {
        }
        private static function get_language_translations()
        {
        }
        static function fill_languages()
        {
        }
        private static function create_languages_translations()
        {
        }
        static function fill_languages_translations()
        {
        }
        private static function create_table($name, $table_sql)
        {
        }
        private static function create_flags()
        {
        }
        public static function fill_flags()
        {
        }
        public static function insert_default_category($lang_code)
        {
        }
    }
    /**
     * Class WPML_Term_Hierarchy_Duplication
     *
     * @package    wpml-core
     * @subpackage taxonomy-term-translation
     *
     */
    class WPML_Term_Hierarchy_Duplication extends \WPML_WPDB_And_SP_User
    {
        public function duplicates_require_sync($post_ids, $duplicates_only = \true)
        {
        }
        private function get_need_sync_new_dupl($duplicated_ids, $taxonomies)
        {
        }
        private function get_need_sync_all_terms($translated_taxonomies, $post_ids)
        {
        }
        private function get_new_terms_just_duplicated($duplicate_ids, $taxonomies)
        {
        }
    }
    class WPML_Term_Translation_Utils extends \WPML_SP_User
    {
        /**
         * Duplicates all terms, that exist in the given target language,
         * from the original post to the translation in that language.
         *
         * @param int $original_post_id
         * @param string $lang
         */
        function sync_terms($original_post_id, $lang)
        {
        }
        /**
         * Duplicates all terms on the original post to its translation in the given target language.
         * Missing terms are created with the same name as their originals.
         *
         * @param int $original_post_id
         * @param string $lang
         */
        function duplicate_terms($original_post_id, $lang)
        {
        }
        /**
         * @param int $original_post_id
         * @param string $lang
         * @param bool $duplicate sets whether missing terms should be created by duplicating the original term
         */
        private function synchronize_terms($original_post_id, $lang, $duplicate)
        {
        }
        /**
         * @param object[] $terms
         * @param string $lang
         * @param string $taxonomy
         * @param bool $duplicate sets whether missing terms should be created by duplicating the original term
         *
         * @return array
         */
        private function get_translated_term_ids($terms, $lang, $taxonomy, $duplicate)
        {
        }
    }
    /**
     * Class WPML_Update_Term_Action
     *
     * This class holds the functionality for creating or editing a taxonomy term.
     *
     * @package    wpml-core
     * @subpackage taxonomy-term-translation
     */
    class WPML_Update_Term_Action extends \WPML_WPDB_And_SP_User
    {
        /**
         * TRUE if this object represents valid data for the update or creation of a term, false otherwise.
         * @var bool
         */
        private $is_valid = \true;
        /**
         * TRUE if this object represents term update action, false if it represents a term creation action.
         * @var bool
         */
        private $is_update;
        /**
         * Argument array containing arguments in a format that can and is used as input to \wp_update_term or
         * \wp_insert_term
         * @var array
         */
        private $wp_new_term_args = array();
        /**
         * The taxonomy in which this action takes place.
         * @var string
         */
        private $taxonomy;
        /**
         * Trid value in the icl_translations table to which this action is to be written.
         * @var int
         */
        private $trid;
        /**
         * Language of the term that is to result from this action.
         * @var string
         */
        private $lang_code;
        /**
         * Source language of the term that is to result from this action.
         * @var string|null
         */
        private $source_lang_code = \null;
        /**
         * Array holding translations of the term created by this object prior to it's creation.
         * @var array
         */
        private $existing_translations = array();
        /**
         * The term id of the term to be updated or resulting from this action.
         * @var int
         */
        private $term_id;
        /**
         * This only gets set for update actions. In this case the new slug has to be compared with the old slug,
         * to decide whether any slug name sanitation has to happen.
         * @var string
         */
        private $old_slug;
        /**
         * @param wpdb      $wpdb
         * @param SitePress $sitepress
         * @param array     $args
         */
        public function __construct(&$wpdb, &$sitepress, $args)
        {
        }
        /**
         * Writes the term update or creation action saved in this object to the database.
         * @return array|false
         * Returns either an array containing the term_id and term_taxonomy_id of the term resulting from this database
         * write or false on error.
         */
        public function execute()
        {
        }
        /**
         * This action is to be hooked to the WP create_term and edit_term hooks.
         * It sets the correct language information after a term is saved.
         *
         * @param int|string $term_id
         * @param int|string $term_taxonomy_id
         * @param string     $taxonomy
         */
        public function add_term_language_action($term_id, $term_taxonomy_id, $taxonomy)
        {
        }
        /**
         * Sets the language variables for this object.
         * @param bool|int    $trid
         * @param bool|int    $original_tax_id
         * @param string      $lang_code
         * @param bool|string $source_language
         * @return bool True if the given language parameters allowed for determining valid language information, false
         *              otherwise.
         */
        private function set_language_information($trid, $original_tax_id, $lang_code, $source_language)
        {
        }
        /**
         * Sets the action type of this object.
         * In case of this action being an update the is_update flag is set true.
         * Also the term_id of the existing term is saved in $this->term_id.
         */
        private function set_action_type()
        {
        }
    }
    /**
     * WPML_Term_Filters class file.
     *
     * @package    WPML\Core
     * @subpackage taxonomy-term-translation
     */
    /**
     * Class WPML_Term_Filters
     */
    class WPML_Term_Filters extends \WPML_WPDB_And_SP_User
    {
        /**
         * Init class.
         */
        public function init()
        {
        }
        /**
         * @param string       $taxonomy        Taxonomy slug.
         * @param array|string $object_type     Object type or array of object types.
         * @param array        $taxonomy_object Array of taxonomy registration arguments.
         */
        public function registered_taxonomy($taxonomy, $object_type, $taxonomy_object)
        {
        }
        /**
         * @param string $taxonomy Taxonomy slug.
         */
        private function add_hooks_to_translated_taxonomy($taxonomy)
        {
        }
        public function update_tax_children_option($taxonomy_input = \false)
        {
        }
        public function pre_option_tax_children()
        {
        }
        /**
         * @param string $taxonomy
         * @param string $lang_code
         *
         * @return array
         */
        public function get_tax_hier_array($taxonomy, $lang_code)
        {
        }
    }
    /**
     * @since      3.1.8
     *
     * Class WPML_Terms_Translations
     *
     * This class holds some basic functionality for translating taxonomy terms.
     *
     * @package    wpml-core
     * @subpackage taxonomy-term-translation
     */
    class WPML_Terms_Translations
    {
        /**
         * @deprecated since Version 3.1.8.3
         * @param object[]|string[] $terms
         * @param   string[]|string $taxonomies This is only used by the WP core AJAX call that fetches the preview
         *                                      auto-complete for flat taxonomy term adding
         *
         * @return mixed
         */
        public static function get_terms_filter($terms, $taxonomies)
        {
        }
        /**
         * @param $slug
         * @param $taxonomy
         * @param $lang
         * Creates a unique slug for a given term, using a scheme
         * encoding the language code in the slug.
         *
         * @return string
         */
        public static function term_unique_slug($slug, $taxonomy, $lang)
        {
        }
        /**
         * @param      $slug
         * @param bool $taxonomy
         * If $taxonomy is given, then slug existence is checked only for the specific taxonomy.
         *
         * @return bool
         */
        private static function term_slug_exists($slug, $taxonomy = \false)
        {
        }
        /**
         * This function provides an action hook only used by WCML.
         * It will be removed in the future and should not be implemented in new spots.
         * @deprecated deprecated since version 3.1.8.3
         *
         * @param $taxonomy        string The identifier of the taxonomy the translation was just saved to.
         * @param $translated_term array The associative array holding term taxonomy id and term id,
         *                         as returned by wp_insert_term or wp_update_term.
         */
        public static function icl_save_term_translation_action($taxonomy, $translated_term)
        {
        }
        /**
         * Prints a hidden div, containing the list of allowed terms for a post type in each language.
         * This is used to only display the correct categories and tags in the quick-edit fields of the post table.
         *
         * @param $column_name
         * @param $post_type
         */
        public static function quick_edit_terms_removal($column_name, $post_type)
        {
        }
        /**
         * Creates a new term from an argument array.
         * @param array $args
         * @return array|bool
         * Returns either an array containing the term_id and term_taxonomy_id of the term resulting from this database
         * write or false on error.
         */
        public static function create_new_term($args)
        {
        }
        /**
         * @param $args
         * Creates an automatic translation of a term, the name of which is set as "original" . @ "lang_code" and the slug of which is set as "original_slug" . - . "lang_code".
         *
         * @return array|bool
         */
        public function create_automatic_translation($args)
        {
        }
        /**
         * @param      $taxonomy
         *
         * Sets all taxonomy terms to the correct language on each post, having at least one term from the taxonomy.
         */
        public static function sync_taxonomy_terms_language($taxonomy)
        {
        }
        /**
         * @param      $post_id
         *
         * Sets all taxonomy terms ot the correct language for a given post.
         */
        public static function sync_post_terms_language($post_id)
        {
        }
        /**
         * @param             $post_id
         * @param             $taxonomy
         * Synchronizes a posts taxonomy term's languages with the posts language for all translations of the post.
         *
         */
        public static function sync_post_and_taxonomy_terms_language($post_id, $taxonomy)
        {
        }
        /**
         * @param int    $post_id    Object ID.
         * @param array  $terms      An array of object terms.
         * @param array  $tt_ids     An array of term taxonomy IDs.
         * @param string $taxonomy   Taxonomy slug.
         * @param bool   $append     Whether to append new terms to the old terms.
         * @param array  $old_tt_ids Old array of term taxonomy IDs.
         */
        public static function set_object_terms_action($post_id, $terms, $tt_ids, $taxonomy, $append, $old_tt_ids)
        {
        }
        /**
         * @param int $post_id Object ID.
         * @param array $tt_ids An array of term taxonomy IDs.
         * @param string $taxonomy Taxonomy slug.
         * @param array $old_tt_ids Old array of term taxonomy IDs.
         */
        private static function set_tags_in_proper_language($post_id, $tt_ids, $taxonomy, $old_tt_ids)
        {
        }
        /**
         * @param int    $post_id
         * @param string $taxonomy
         * @param array  $changed_ttids
         * @param bool   $bulk
         * Running this function will remove certain issues arising out of bulk adding of terms to posts of various languages.
         * This case can result in situations in which the WP Core functionality adds a term to a post, before the language assignment
         * operations of WPML are triggered. This leads to states in which terms can be assigned to a post even though their language
         * differs from that of the post.
         * This function behaves between hierarchical and flat taxonomies. Hierarchical terms from the wrong taxonomy are simply removed
         * from the post. Flat terms are added with the same name but in the correct language.
         * For flat terms this implies either the use of the existing term or the creation of a new one.
         * This function uses wpdb queries instead of the WordPress API, it is therefore save to be run out of
         * any language setting.
         */
        public static function quick_edited_post_terms($post_id, $taxonomy, $changed_ttids = array(), $bulk = \false)
        {
        }
        /**
         * Returns an array of all terms, that have a language suffix on them.
         * This is used by troubleshooting functionality.
         *
         * @return array
         */
        public static function get_all_terms_with_language_suffix()
        {
        }
    }
    class WPML_Term_Hierarchy_Sync extends \WPML_Hierarchy_Sync
    {
        protected $element_id_column = 'term_taxonomy_id';
        protected $parent_id_column = 'parent';
        protected $parent_element_id_column = 'term_id';
        protected $element_type_column = 'taxonomy';
        protected $element_type_prefix = 'tax_';
        /**
         * @param wpdb $wpdb
         */
        public function __construct(&$wpdb)
        {
        }
        public function is_need_sync($taxonomy, $ref_lang = \false)
        {
        }
        public function sync_element_hierarchy($element_types, $ref_lang = \false)
        {
        }
        /**
         * @param string $element_type
         *
         * @return bool
         */
        public function is_hierarchical($element_type)
        {
        }
    }
    /**
     * @since      3.2
     *
     * Class WPML_Term_Translation
     *
     * Provides APIs for translating taxonomy terms
     *
     * @package    wpml-core
     * @subpackage taxonomy-term-translation
     */
    class WPML_Term_Translation extends \WPML_Element_Translation
    {
        /** @var array|null */
        protected $ttids;
        /** @var array|null */
        protected $term_ids;
        public function reload()
        {
        }
        /**
         * @param int $term_id
         *
         * @return null|string
         */
        public function lang_code_by_termid($term_id)
        {
        }
        /**
         * Converts term_id into term_taxonomy_id
         *
         * @param int $term_id
         *
         * @return int
         */
        public function adjust_ttid_for_term_id($term_id)
        {
        }
        /**
         * Converts term_taxonomy_id into term_id
         *
         * @param int $ttid term_taxonomy_id
         *
         * @return int
         */
        public function adjust_term_id_for_ttid($ttid)
        {
        }
        /**
         * @param int        $term_id
         * @param string     $lang_code
         * @param bool|false $original_fallback if true will return the the input term_id in case no translation is found
         *
         * @return null|int
         */
        public function term_id_in($term_id, $lang_code, $original_fallback = \false)
        {
        }
        /**
         * Returns the trid for a given term_id and taxonomy or null on failure
         *
         * @param int    $term_id  term_id of a term
         * @param string $taxonomy taxonomy of the term
         *
         * @return null|int
         */
        public function trid_from_tax_and_id($term_id, $taxonomy)
        {
        }
        /**
         * Returns all post types to which a taxonomy is linked.
         *
         * @param $taxonomy string
         *
         * @return array
         *
         * @since 3.2.3
         */
        public function get_taxonomy_post_types($taxonomy)
        {
        }
        protected function get_element_join()
        {
        }
        protected function get_type_prefix()
        {
        }
        private function maybe_warm_term_id_cache()
        {
        }
        /**
         * @param $term
         * @param string $slug
         * @param $taxonomy
         * @param $lang_code
         *
         * @return string
         */
        public function generate_unique_term_slug($term, $slug = '', $taxonomy, $lang_code)
        {
        }
        /**
         * @return self
         */
        public static function getGlobalInstance()
        {
        }
    }
    /**
     * Class WPML_WPDB_And_SP_User
     */
    abstract class WPML_Full_PT_API extends \WPML_WPDB_And_SP_User
    {
        /** @var  WPML_Post_Translation $post_translations */
        protected $post_translations;
        /**
         * @param wpdb                  $wpdb
         * @param SitePress             $sitepress
         * @param WPML_Post_Translation $post_translations
         */
        public function __construct(&$wpdb, &$sitepress, &$post_translations)
        {
        }
    }
    class WPML_Full_Translation_API extends \WPML_Full_PT_API
    {
        /** @var  WPML_Term_Translation $term_translations */
        protected $term_translations;
        /**
         * @param SitePress               $sitepress
         * @param wpdb                    $wpdb
         * @param WPML_Post_Translation   $post_translations
         * @param WPML_Term_Translation $term_translations
         */
        function __construct(&$sitepress, &$wpdb, &$post_translations, &$term_translations)
        {
        }
    }
    /**
     * Class WPML_Nav_Menu_Actions
     *
     * @package    wpml-core
     * @subpackage taxonomy-term-translation
     */
    class WPML_Nav_Menu_Actions extends \WPML_Full_Translation_API
    {
        /**
         * @param SitePress             $sitepress
         * @param wpdb                  $wpdb
         * @param WPML_Post_Translation $post_translations
         * @param WPML_Term_Translation $term_translations
         */
        public function __construct(&$sitepress, &$wpdb, &$post_translations, &$term_translations)
        {
        }
        public function wp_delete_nav_menu($id)
        {
        }
        function wp_update_nav_menu($menu_id, $menu_data = \null)
        {
        }
        function wp_update_nav_menu_item($menu_id, $menu_item_db_id, $args)
        {
        }
        public function wp_delete_nav_menu_item($menu_item_id)
        {
        }
        public function pre_update_theme_mods_theme($val)
        {
        }
        public function theme_mod_nav_menu_locations($theme_locations)
        {
        }
        private function get_save_lang($menu_id)
        {
        }
        /**
         * @return bool|int|mixed|null|string
         */
        private function get_trid_from_post_data()
        {
        }
    }
    class WPML_Frontend_Tax_Filters
    {
        public function __construct()
        {
        }
        /**
         * Adjust template (taxonomy-)$taxonomy-$term.php for translated term slugs and IDs
         *
         * @since 3.1
         *
         * @param string $template
         *
         * @return string The template filename if found.
         */
        function slug_template($template)
        {
        }
        private function get_template_prefix($taxonomy)
        {
        }
        private function add_term_templates($term, $current_language, $templates)
        {
        }
        private function add_original_term_templates($term, $default_language, $current_language, $templates)
        {
        }
        private function get_queried_tax_term()
        {
        }
    }
    /**
     * WPML Sunrise Script - START
     * @author OnTheGoSystems
     * @version 3.7.0
     *
     * Place this script in the wp-content folder and add "define('SUNRISE', 'on');" in wp-config.php
     * in order to enable using different domains for different languages in multisite mode
     *
     * Experimental feature
     */
    /**
     * Class WPML_Sunrise_Lang_In_Domains
     * @author OnTheGoSystems
     */
    class WPML_Sunrise_Lang_In_Domains
    {
        /** @var  wpdb $wpdb */
        private $wpdb;
        /** @var  string $table_prefix */
        private $table_prefix;
        /** @var  string $current_blog */
        private $current_blog;
        /** @var  bool $no_recursion */
        private $no_recursion;
        /**
         * Method init
         */
        public function init()
        {
        }
        /**
         * @param string $q
         *
         * @return string
         */
        public function query_filter($q)
        {
        }
        /**
         * method set_private_properties
         */
        private function set_private_properties()
        {
        }
        /**
         * @param string $query
         *
         * @return array
         */
        private function extract_variables_from_query($query, $field)
        {
        }
        /**
         * @param string $q
         *
         * @return bool
         */
        private function query_has_no_result($q)
        {
        }
        /**
         * @param string $q
         * @param array  $domains
         *
         * @return string
         */
        private function transpose_query_if_one_domain_is_matching($q, $domains)
        {
        }
        /**
         * @param array $domains
         * @param array $wpml_settings
         * @param       $blog_id
         *
         * @return mixed
         */
        private function get_blog_id_from_domain(array $domains, array $wpml_settings, $blog_id)
        {
        }
    }
    class WPML_Translator
    {
        var $ID;
        var $display_name;
        var $user_login;
        var $language_pairs;
        /** @noinspection PhpInconsistentReturnPointsInspection
         * @param string $property
         *
         * @return
         */
        public function __get($property)
        {
        }
        public function __set($property, $value)
        {
        }
    }
    /**
     * Class TranslationManagement
     *
     * Use `wpml_load_core_tm` to get an instance
     *
     * @package wpml-core
     */
    class TranslationManagement
    {
        const INIT_PRIORITY = 1500;
        const DUPLICATE_ELEMENT_ACTION = 2;
        const TRANSLATE_ELEMENT_ACTION = 1;
        /**
         * @var WPML_Translator
         */
        private $selected_translator;
        /**
         * @var WPML_Translator
         */
        private $current_translator;
        private $messages = array();
        public $settings;
        public $admin_texts_to_translate = array();
        private $comment_duplicator;
        /** @var WPML_Custom_Field_Setting_Factory $settings_factory */
        private $settings_factory;
        /** @var  WPML_Cache_Factory */
        private $cache_factory;
        /**
         * Keep list of message ID suffixes.
         *
         * @access private
         */
        private $message_ids = array('add_translator', 'edit_translator', 'remove_translator', 'save_notification_settings', 'cancel_jobs');
        /**
         * @var \WPML_Translation_Management_Filters_And_Actions
         */
        private $filters_and_actions;
        function __construct()
        {
        }
        public function wpml_loaded_action()
        {
        }
        public function load_settings_if_required()
        {
        }
        /**
         * @param array $args      {
         *
         * @type string $section
         * @type string $key
         * @type mixed  $value     (when used as translation action: 0: do not translate, 1: copy, 2: translate)
         * @type bool   $read_only Options. Default to true.
         * }
         */
        public function wpml_config_action($args)
        {
        }
        /**
         * @return WPML_Custom_Field_Setting_Factory
         */
        public function settings_factory()
        {
        }
        /**
         * @param WP_User         $current_user
         * @param WPML_Translator $current_translator
         *
         * @return WPML_Translator
         */
        private function init_translator_language_pairs(\WP_User $current_user, \WPML_Translator $current_translator)
        {
        }
        /**
         * @param $code
         *
         * @return bool
         */
        private function is_valid_language_code_format($code)
        {
        }
        /**
         * @param array $language_pairs
         *
         * @return array
         */
        private function sanitize_language_pairs($language_pairs)
        {
        }
        /**
         * @param array $args @see \TranslationManagement::wpml_config_action
         */
        private function update_section_translation_setting($args)
        {
        }
        public function init()
        {
        }
        public function get_settings()
        {
        }
        public function wpml_add_duplicate_check_actions()
        {
        }
        public function wp_loaded()
        {
        }
        public function admin_enqueue_scripts($hook)
        {
        }
        public static function get_batch_name($batch_id)
        {
        }
        public static function get_batch_url($batch_id)
        {
        }
        public static function get_batch_last_update($batch_id)
        {
        }
        public static function get_batch_tp_id($batch_id)
        {
        }
        public static function get_batch_data($batch_id)
        {
        }
        function save_settings()
        {
        }
        /**
         * @return string[]
         */
        public function initial_custom_field_translate_states()
        {
        }
        /**
         * @return string[]
         */
        public function initial_term_custom_field_translate_states()
        {
        }
        function process_request($data)
        {
        }
        /**
         * @param string $name
         * @param string $value
         * @param int    $expiration
         */
        private function set_cookie($name, $value, $expiration)
        {
        }
        /**
         * @param $name
         *
         * @return array
         */
        private function get_cookie($name)
        {
        }
        function ajax_calls($call, $data)
        {
        }
        /**
         * @param $element_type_full
         *
         * @return mixed
         */
        public function get_element_prefix($element_type_full)
        {
        }
        /**
         * @param int $job_id
         *
         * @return mixed
         */
        public function get_element_type_prefix_from_job_id($job_id)
        {
        }
        /**
         * @param $job
         *
         * @return mixed
         */
        public function get_element_type_prefix_from_job($job)
        {
        }
        /**
         * Display admin notices.
         */
        public function show_messages()
        {
        }
        /* TRANSLATORS */
        /**
         * @deprecated use `WPML_TM_Blog_Translators::get_blog_translators` instead
         *
         * @return bool
         */
        public function has_translators()
        {
        }
        /**
         * @deprecated use `WPML_TM_Blog_Translators::get_blog_translators` instead
         *
         * @param array $args
         *
         * @return array
         */
        public static function get_blog_translators($args = array())
        {
        }
        /**
         * @return WPML_Translator
         */
        function get_selected_translator()
        {
        }
        /**
         * @return WPML_Translator
         */
        function get_current_translator()
        {
        }
        public static function get_translator_edit_url($translator_id)
        {
        }
        /* HOOKS */
        function make_duplicates($data)
        {
        }
        function make_duplicate($master_post_id, $lang)
        {
        }
        function make_duplicates_all($master_post_id)
        {
        }
        function reset_duplicate_flag($post_id)
        {
        }
        function set_duplicate($master_post_id, $post_lang)
        {
        }
        function duplication_delete_comment($comment_id)
        {
        }
        function duplication_edit_comment($comment_id)
        {
        }
        function duplication_status_comment($comment_id, $comment_status)
        {
        }
        function duplication_insert_comment($comment_id)
        {
        }
        private function get_comment_duplicator()
        {
        }
        /**
         * @param int $post_id Post ID.
         */
        public function delete_post_actions($post_id)
        {
        }
        /* TRANSLATIONS */
        /**
         * calculate post md5
         *
         * @param object|int $post
         *
         * @return string
         */
        function post_md5($post)
        {
        }
        function get_element_translation($element_id, $language, $element_type = 'post_post')
        {
        }
        function get_element_translations($element_id, $element_type = 'post_post', $service = \false)
        {
        }
        /**
         * returns icon class according to status code
         *
         * @param int $status
         * @param int $needs_update
         *
         * @return string
         */
        public function status2icon_class($status, $needs_update = 0)
        {
        }
        public static function status2text($status)
        {
        }
        public function decode_field_data($data, $format)
        {
        }
        /**
         * create translation package
         *
         * @param object|int $post
         *
         * @return array|false
         */
        function create_translation_package($post)
        {
        }
        function messages_by_type($type)
        {
        }
        public function add_basket_message($type, $message, $id = \null)
        {
        }
        function add_message($message)
        {
        }
        /**
         * add/update icl_translation_status record
         *
         * @param array $data
         * @param int   $rid
         *
         * @return array
         */
        function update_translation_status($data, $rid = \null)
        {
        }
        /**
         * @param int $translation_id
         *
         * @return int
         */
        private function get_rid_from_translation_id($translation_id)
        {
        }
        /* TRANSLATION JOBS */
        /**
         * @param \WPML_TM_Translation_Batch $batch
         * @param string                     $type
         *
         * @return array
         */
        function send_jobs($batch, $type = 'post')
        {
        }
        private function revert_job_when_tp_job_could_not_be_created($job_ids, $rid, $translator_id, $backup_translation_status)
        {
        }
        /**
         * @param stdClass|null        $current_translation_status
         * @param WP_Post|WPML_Package $post
         *
         * @return string
         */
        private function get_uuid($current_translation_status, $post)
        {
        }
        private function get_translation_status_data($translation_id)
        {
        }
        /**
         * @param string $translation_id
         * @param string $status
         */
        private function cancel_previous_job_if_still_waiting($translation_id, $status)
        {
        }
        private function cancel_previous_job_if_in_progress($translation_id)
        {
        }
        /**
         * Adds a translation job record in icl_translate_job
         *
         * @param mixed $rid
         * @param mixed $translator_id
         * @param       $translation_package
         * @param array $batch_options
         *
         * @return bool|int
         */
        function add_translation_job($rid, $translator_id, $translation_package, $batch_options = array())
        {
        }
        function get_translation_jobs($args = array())
        {
        }
        function get_translation_job_types($args = array())
        {
        }
        /**
         * Clean orphan jobs in posts
         *
         * @param array $posts
         */
        function cleanup_translation_jobs_cart_posts($posts)
        {
        }
        /**
         * Incorporates posts in cart data with post title, post date, post notes,
         * post type, post status
         *
         * @param array $posts
         *
         * @return boolean | array
         */
        function get_translation_jobs_basket_posts($posts)
        {
        }
        /**
         * Incorporates strings in cart data
         *
         * @param array       $strings
         * @param bool|string $source_language
         *
         * @return boolean | array
         */
        function get_translation_jobs_basket_strings($strings, $source_language = \false)
        {
        }
        function get_translation_job($job_id, $include_non_translatable_elements = \false, $auto_assign = \false, $revisions = 0)
        {
        }
        function get_translation_job_id_filter($empty, $args)
        {
        }
        /**
         * @param int $trid
         *
         * @return array
         */
        private function get_translation_job_info($trid)
        {
        }
        /**
         * @param int    $trid
         * @param string $language_code
         *
         * @return int|null
         */
        public function get_translation_job_id($trid, $language_code)
        {
        }
        /**
         * @param int    $trid
         * @param string $language_code
         *
         * @return string|null
         */
        public function get_translation_job_editor($trid, $language_code)
        {
        }
        function save_translation($data)
        {
        }
        /**
         * Saves the contents a job's post to the job itself
         *
         * @param int $job_id
         *
         * @hook wpml_save_job_fields_from_post
         * @deprecated since WPML 3.2.3 use the action hook wpml_save_job_fields_from_post
         *
         */
        function save_job_fields_from_post($job_id)
        {
        }
        function mark_job_done($job_id)
        {
        }
        function resign_translator($job_id)
        {
        }
        function remove_translation_job($job_id, $new_translation_status = \ICL_TM_WAITING_FOR_TRANSLATOR, $new_translator_id = 0)
        {
        }
        function abort_translation()
        {
        }
        // $translation_id - int or array
        function cancel_translation_request($translation_id, $remove_translation_record = \true)
        {
        }
        function render_option_writes($name, $value, $key = '')
        {
        }
        /**
         * @param array $info
         *
         * @deprecated @since 3.2 Use TranslationProxy::get_current_service_info instead
         * @return array
         */
        public static function current_service_info($info = array())
        {
        }
        // set slug according to user preference
        static function set_page_url($post_id)
        {
        }
        /**
         * @deprecated since 4.2.8 Use directly `wpml_get_create_post_helper()` instead.
         *
         * @param $postarr
         * @param $lang
         *
         * @return int|WP_Error
         */
        public function icl_insert_post($postarr, $lang)
        {
        }
        /**
         * Add missing language to posts
         *
         * @param array $post_types
         */
        private function add_missing_language_to_posts($post_types)
        {
        }
        /**
         * Add missing language to a given post
         *
         * @param WP_Post $post
         */
        private function add_missing_language_to_post($post)
        {
        }
        /**
         * Add missing language to taxonomies
         *
         * @param array $post_types
         */
        private function add_missing_language_to_taxonomies($post_types)
        {
        }
        /**
         * Add missing language to a given taxonomy
         *
         * @param OBJECT $taxonomy
         */
        private function add_missing_language_to_taxonomy($taxonomy)
        {
        }
        /**
         * Add missing language information to entities that don't have this
         * information configured.
         */
        public function add_missing_language_information()
        {
        }
        public static function include_underscore_templates($name)
        {
        }
        public static function get_job_status_string($status_id, $needs_update = \false)
        {
        }
        function display_basket_notification($position)
        {
        }
        public function get_element_type($trid)
        {
        }
        /**
         * @param $type
         *
         * @return bool
         */
        public function is_external_type($type)
        {
        }
        /**
         * @param int    $post_id
         * @param string $element_type_prefix
         *
         * @return mixed|null|void|WP_Post
         */
        public function get_post($post_id, $element_type_prefix)
        {
        }
        private function init_comments_synchronization()
        {
        }
        private function init_default_settings()
        {
        }
        public function init_current_translator()
        {
        }
        public function get_translation_setting_name($section)
        {
        }
        public function get_custom_translation_setting_name($section)
        {
        }
        public function get_custom_readonly_translation_setting_name($section)
        {
        }
        public function get_readonly_translation_setting_name($section)
        {
        }
        private function get_sanitized_translation_setting_section($section)
        {
        }
        private function assign_translation_job($job_id, $translator_id, $service = 'local', $type = 'post')
        {
        }
        /**
         * @param string $table
         *
         * @return string[]
         */
        private function initial_translation_states($table)
        {
        }
        /**
         * Save notification settings.
         *
         * @param array $data  Request data
         */
        public function icl_tm_save_notification_settings($data)
        {
        }
        /**
         * Cancel translation jobs.
         *
         * @param array $data  Request data
         */
        public function icl_tm_cancel_jobs($data)
        {
        }
        /** @return int */
        public function get_init_priority()
        {
        }
        /**
         * @param array $translation_status_data
         *
         * @return mixed
         */
        private function get_translation_prev_state(array $translation_status_data)
        {
        }
        private function is_unlocked_type($type, $unlocked_options)
        {
        }
    }
    /**
     * Class WPML_Slug_Filter
     *
     * @package    wpml-core
     * @subpackage url-handling
     *
     */
    class WPML_Slug_Filter extends \WPML_Full_PT_API
    {
        /**
         * @param wpdb                  $wpdb
         * @param SitePress             $sitepress
         * @param WPML_Post_Translation $post_translations
         */
        public function __construct(&$wpdb, &$sitepress, &$post_translations)
        {
        }
        /**
         * @param String $slug
         * @param String $taxonomy
         * Filters slug input, so to ensure uniqueness of term slugs.
         *
         * @return String Either the original slug or a new slug that has been generated from the original one in order to
         *                ensure slug uniqueness.
         */
        public function pre_term_slug_filter($slug, $taxonomy)
        {
        }
        private function lang_term_slug_save($taxonomy)
        {
        }
        function wp_unique_post_slug($slug_suggested, $post_id, $post_status, $post_type, $post_parent, $slug)
        {
        }
        private function post_slug_exists($post_id, $post_language, $slug, $post_type, $parent = \false)
        {
        }
        private function find_unique_slug_post($post_id, $post_type, $post_language, $post_parent, $slug)
        {
        }
    }
    class WPML_Lang_URL_Validator
    {
        /** @var  SitePress $sitepress */
        private $sitepress;
        /** @var WP_Http $http_client */
        private $http_client;
        /** @var WPML_URL_Converter $wpml_url_converter */
        private $url_converter;
        /** @var array|WP_Error $response */
        private $response;
        /** @var  string $validation_url */
        private $posted_url;
        /**
         * @param  WP_Http            $client
         * @param  WPML_URL_Converter $wpml_url_converter
         * @param  string             $posted_url
         * @param  SitePress          $sitepress
         */
        public function __construct($client, $wpml_url_converter, $posted_url, $sitepress)
        {
        }
        public function get_validation_url($sample_lang_code)
        {
        }
        public function validate_langs_in_dirs($sample_lang)
        {
        }
        public function print_error_response()
        {
        }
        public function print_explanation($sample_lang_code, $root = \false)
        {
        }
        private function do_request($validation_url)
        {
        }
        private function get_sample_url($sample_lang_code)
        {
        }
    }
    class WPML_Color_Picker
    {
        private $color_selector_item;
        public function __construct($color_selector_item)
        {
        }
        public function admin_print_scripts()
        {
        }
        public function current_language_color_selector_control()
        {
        }
        public function get_current_language_color_selector_control()
        {
        }
    }
    /**
     * Class WPML_Languages
     *
     * @package wpml-core
     */
    class WPML_Languages extends \WPML_SP_And_PT_User
    {
        /** @var  WPML_Term_Translation $term_translation */
        private $term_translation;
        /** @var WPML_Query_Utils $query_utils */
        private $query_utils;
        /**
         * @param WPML_Term_Translation $term_translation
         * @param SitePress             $sitepress
         * @param WPML_Post_Translation $post_translation
         */
        public function __construct(&$term_translation, &$sitepress, &$post_translation)
        {
        }
        /**
         * @param WP_Query $wp_query
         * @param WP_Query $_wp_query_back
         * @param WP_Query $saved_query
         *
         * @return array
         */
        public function get_ls_translations($wp_query, $_wp_query_back, $saved_query)
        {
        }
        /**
         * @param array  $lang
         * @param array  $translations
         * @param bool   $icl_lso_link_empty
         * @param bool   $skip_lang
         * @param string $link_empty_to
         * @param WPML_LS_Display_As_Translated_Link $display_as_translated_ls_link
         *
         * @return array
         */
        public function add_tax_url_to_ls_lang($lang, $translations, $icl_lso_link_empty, $skip_lang, $link_empty_to, \WPML_LS_Display_As_Translated_Link $display_as_translated_ls_link)
        {
        }
        /**
         * @param array          $lang
         * @param object|WP_User $author_data
         * @param bool           $icl_lso_link_empty
         * @param bool           $skip_lang
         * @param bool           $link_empty_to
         *
         * @return array
         */
        public function add_author_url_to_ls_lang($lang, $fallback_lang, $author_data, $icl_lso_link_empty, $skip_lang, $link_empty_to)
        {
        }
        /**
         * @param array    $lang
         * @param string   $fallback_lang
         * @param WP_Query $current_query
         * @param bool     $icl_lso_link_empty
         * @param bool     $skip_lang
         * @param string   $link_empty_to
         *
         * @return array
         */
        public function add_date_or_cpt_url_to_ls_lang($lang, $fallback_lang, $current_query, $icl_lso_link_empty, $skip_lang, $link_empty_to)
        {
        }
        public function get_ls_language($lang_code, $current_language, $language_array = \false)
        {
        }
        public function sort_ls_languages($w_active_languages, $template_args)
        {
        }
        /**
         * @param array $lang
         * @param array $args with keys below
         * - `skip_lang`        bool|int
         * - `link_empty`       bool|int
         * - `link_empty_to`    string a URL possibly with a {%lang} placeholder (e.g. http://example.tld/{%lang}/notify-no-translation/)
         * - `override_missing` bool if true language will always be shown ( Example: untranslated CPT archives)
         *
         * @return array
         */
        private function maybe_mark_lang_missing($lang, $args)
        {
        }
        /**
         * @param WP_Query $query
         *
         * @return array()
         */
        private function extract_date_data_from_query($query)
        {
        }
        /**
         * @param WP_Query $wp_query
         *
         * @return array()
         */
        private function extract_tax_archive_data($wp_query)
        {
        }
        /**
         * @param $taxonomy
         * @param $term_id
         *
         * @return array
         */
        private function get_post_format_translations($taxonomy, $term_id)
        {
        }
        private function sort_by_id($array_a, $array_b)
        {
        }
        private function sort_by_name($array_a, $array_b)
        {
        }
    }
    // phpcs:disable PHPCompatibility.Constants.NewConstants.openssl_raw_dataFound -- This and the following exceptions are made as function and version checks are also made
    // phpcs:disable PHPCompatibility.Constants.RemovedConstants.mcrypt_mode_ecbDeprecatedRemoved
    // phpcs:disable PHPCompatibility.Constants.RemovedConstants.mcrypt_randDeprecatedRemoved
    // phpcs:disable PHPCompatibility.Constants.RemovedConstants.mcrypt_rijndael_256DeprecatedRemoved
    // phpcs:disable PHPCompatibility.Extensions.RemovedExtensions.mcryptDeprecatedRemoved
    // phpcs:disable PHPCompatibility.FunctionUse.NewFunctionParameters.openssl_decrypt_ivFound
    // phpcs:disable PHPCompatibility.FunctionUse.NewFunctionParameters.openssl_encrypt_ivFound
    // phpcs:disable PHPCompatibility.FunctionUse.RemovedFunctions.mcrypt_create_ivDeprecatedRemoved
    // phpcs:disable PHPCompatibility.FunctionUse.RemovedFunctions.mcrypt_decryptDeprecatedRemoved
    // phpcs:disable PHPCompatibility.FunctionUse.RemovedFunctions.mcrypt_encryptDeprecatedRemoved
    // phpcs:disable PHPCompatibility.FunctionUse.RemovedFunctions.mcrypt_get_iv_sizeDeprecatedRemoved
    class WPML_Data_Encryptor
    {
        const SALT_CHARS = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-_ []{}<>~`+=,.;:/?|';
        const SALT_LENGTH = 64;
        /**
         * @var string $method
         */
        private $method;
        /**
         * @var string $key
         */
        private $key;
        /**
         * @var string $iv
         */
        private $iv;
        /**
         * @var string
         */
        private $library = \false;
        /**
         * WPML_Data_Encryptor constructor.
         *
         * @param string $key_salt
         * @param string $method
         *
         */
        public function __construct($key_salt = '', $method = 'AES-256-CTR')
        {
        }
        /**
         * @param string $data
         *
         * @return string
         */
        public function encrypt($data)
        {
        }
        /**
         * @param string $encrypted_data
         *
         * @return string
         */
        public function decrypt($encrypted_data)
        {
        }
        /**
         * @param string $library
         */
        public function set_crypt_library($library)
        {
        }
        /**
         * @return string
         */
        public function get_crypt_library()
        {
        }
        /**
         * @return string
         */
        private function get_key_salt()
        {
        }
        /**
         * @return string
         */
        private function generate_salt_key()
        {
        }
    }
    abstract class WPML_Menu_Sync_Functionality extends \WPML_Full_Translation_API
    {
        const STRING_CONTEXT_SUFFIX = ' menu';
        const STRING_NAME_LABEL_PREFIX = 'Menu Item Label ';
        const STRING_NAME_URL_PREFIX = 'Menu Item URL ';
        private $menu_items_cache;
        /**
         * @param SitePress               $sitepress
         * @param wpdb                    $wpdb
         * @param WPML_Post_Translation   $post_translations
         * @param WPML_Terms_Translations $term_translations
         */
        function __construct(&$sitepress, &$wpdb, &$post_translations, &$term_translations)
        {
        }
        function get_menu_items($menu_id, $translations = \true)
        {
        }
        function sync_menu_translations($menu_trans_data, $menus)
        {
        }
        /**
         * @param $item
         * @param $menu_id
         *
         * @return array
         */
        function get_menu_item_translations($item, $menu_id)
        {
        }
        /**
         * Synchronises a page menu item's translations' trids according to the trids of the pages they link to.
         *
         * @param object $menu_item
         *
         * @return int number of affected menu item translations
         */
        function sync_page_menu_item_trids($menu_item)
        {
        }
        /**
         * @param  int $menu_id
         * @param bool $include_original
         *
         * @return bool|array
         */
        function get_menu_translations($menu_id, $include_original = \false)
        {
        }
        protected function get_menu_name($menu_id)
        {
        }
        /**
         * @param $menu_id
         * @param $language_code
         *
         * @return bool
         */
        protected function get_translated_menu($menu_id, $language_code = \false)
        {
        }
        /**
         * We need to register the string first in the default language
         * to avoid it being "auto-registered" in English
         *
         * @param string  $menu_name
         * @param WP_Post|stdClass $item
         * @param string  $lang
         * @param bool    $has_label_translation
         * @param bool    $has_url_translation
         *
         * @return array
         */
        protected function icl_t_menu_item($menu_name, $item, $lang, &$has_label_translation, &$has_url_translation)
        {
        }
        /**
         * @param object $item
         * @param string $lang_code
         *
         * @return int
         */
        private function is_parent_not_translated($item, $lang_code)
        {
        }
        private function get_page_orphan_sql($existing_languages, $menu_item_id)
        {
        }
        private function maybe_reload_post_item($translated_object_id, $item_translations, $item, $lang_code)
        {
        }
        private function get_menu_item_depth($item_id)
        {
        }
        private function st_actions($lang_code, $menu_id, $item, $translated_object_id, $translated_object_title, $translated_object_url, &$icl_st_label_exists, &$icl_st_url_exists)
        {
        }
        /**
         * @param $item_translations
         * @param $menu_id
         */
        private function fix_assignment_to_menu($item_translations, $menu_id)
        {
        }
        /**
         * Removes potentially mis-assigned menu items from their menu, whose language differs from that of their
         * associated menu.
         */
        private function fix_language_conflicts()
        {
        }
    }
    class WPML_Nav_Menu
    {
        private $current_menu;
        private $current_lang;
        /** @var  WPML_Term_Translation $term_translations */
        protected $term_translations;
        /** @var  WPML_Post_Translation $post_translations */
        protected $post_translations;
        /** @var SitePress $sitepress */
        protected $sitepress;
        /** @var WPDB $wpdb */
        public $wpdb;
        /** @var  WPML_Nav_Menu_Actions $nav_menu_actions */
        public $nav_menu_actions;
        function __construct(\SitePress $sitepress, \WPDB $wpdb, \WPML_Post_Translation $post_translations, \WPML_Term_Translation $term_translations)
        {
        }
        public function init_hooks()
        {
        }
        /**
         * @return bool
         */
        private function must_filter_menus()
        {
        }
        function init()
        {
        }
        function sync_menus_via_ajax()
        {
        }
        public function get_links_for_menu_strings_translation_ajax()
        {
        }
        /**
         * @param string $menu_id
         */
        function admin_menu_setup($menu_id)
        {
        }
        /**
         *
         * Associates menus without language information with default language
         *
         */
        private function _set_menus_language()
        {
        }
        function ajax($data)
        {
        }
        function _get_menu_language($menu_id)
        {
        }
        /**
         *
         * Gets first menu in a specific language
         * used to override nav_menu_recently_edited when a different language is selected
         *
         * @param string $lang
         * @return int
         */
        function _get_first_menu($lang)
        {
        }
        function get_current_menu()
        {
        }
        /**
         * @param bool|int $menu_id
         *
         * @return array
         */
        function _load_menu($menu_id = \false)
        {
        }
        private function get_action_icon($css_class, $label)
        {
        }
        function nav_menu_language_controls()
        {
        }
        function get_menus_without_translation($lang, $trid = 0)
        {
        }
        private function render_translation_of($lang, $trid = \false)
        {
        }
        private function render_button_language_switcher_settings()
        {
        }
        function get_menus_by_language()
        {
        }
        function languages_menu($echo = \true)
        {
        }
        function get_terms_filter($terms, $taxonomies, $args)
        {
        }
        /**
         * Filter posts by language.
         *
         * @param \WP_Query $q
         *
         * @return \WP_Query
         */
        public function parse_query($q)
        {
        }
        /**
         * @param mixed $val
         *
         * @return mixed
         */
        function option_nav_menu_options($val)
        {
        }
        /**
         * @return bool
         */
        private function is_duplication_mode()
        {
        }
        function wp_nav_menu_args_filter($args)
        {
        }
        function wp_nav_menu_items_filter($items)
        {
        }
        function _set_custom_status_in_theme_location_switcher()
        {
        }
        // on the nav menus when selecting pages using the pagination filter pages > 2 by language
        function _enable_sitepress_query_filters($args)
        {
        }
        function wp_get_nav_menus_filter($menus)
        {
        }
        private function setup_menu_item()
        {
        }
        private function setup_menu_synchronization()
        {
        }
        private function unfilter_non_default_language_menus($menus)
        {
        }
        private function adjust_current_language_if_required()
        {
        }
    }
    class ICLMenusSync extends \WPML_Menu_Sync_Functionality
    {
        public $menus;
        public $is_preview = \false;
        public $sync_data = \false;
        public $string_translation_links = array();
        public $operations = array();
        /** @var  WPML_Menu_Item_Sync $menu_item_sync */
        private $menu_item_sync;
        /**
         * @param SitePress             $sitepress
         * @param wpdb                  $wpdb
         * @param WPML_Post_Translation $post_translations
         * @param WPML_Term_Translation $term_translations
         */
        function __construct(&$sitepress, &$wpdb, &$post_translations, &$term_translations)
        {
        }
        function init_hooks()
        {
        }
        function init($previous_menu = \false)
        {
        }
        function get_menu_names()
        {
        }
        function get_menus_tree()
        {
        }
        private function get_menu_options($menu_id)
        {
        }
        public function add_ghost_entries()
        {
        }
        public function set_new_menu_order()
        {
        }
        function do_sync(array $data)
        {
        }
        function render_items_tree_default($menu_id, $parent = 0, $depth = 0)
        {
        }
        private function render_option_update($active_language_codes, $default_language, $menu_id, &$need_sync)
        {
        }
        private function render_deleted_items($deleted_items, &$need_sync, $depth, $menu_id)
        {
        }
        private function index_changed($index, $item_id, $item_translation, $menu_id, $lang_code, $change = \true)
        {
        }
        function _item_has_children($menu_id, $item_id)
        {
        }
        function get_item_depth($menu_id, $item_id)
        {
        }
        function admin_notices()
        {
        }
        public function display_menu_links_to_string_translation()
        {
        }
        public function get_links_for_menu_strings_translation()
        {
        }
    }
    class WPML_Menu_Item_Sync extends \WPML_Menu_Sync_Functionality
    {
        /** @var array $labels_to_add */
        private $labels_to_add = array();
        /** @var array $urls_to_add */
        private $urls_to_add = array();
        /**
         * @return int the number of removed broken page items
         */
        function cleanup_broken_page_items()
        {
        }
        function sync_deleted_menus($deleted_data)
        {
        }
        function sync_menu_options($options_data)
        {
        }
        public function sync_menu_order(array $menus)
        {
        }
        function sync_added_items(array $added_data, array $menus)
        {
        }
        function sync_moved_items(array $moved_data, array $menus)
        {
        }
        /**
         * @param int $item_id
         * @param int $menu_id
         */
        private function assign_orphan_item_to_menu($item_id, $menu_id)
        {
        }
        function sync_caption($label_change_data)
        {
        }
        function sync_urls($url_change_data)
        {
        }
        function sync_missing_captions($label_missing)
        {
        }
        function sync_urls_to_add($url_missing_data)
        {
        }
        private function fix_hierarchy_added_items($added_data)
        {
        }
        private function fix_hierarchy_moved_items($moved_data)
        {
        }
        private function fix_hierarchy_for_item($item_id, $language)
        {
        }
        private function get_or_set_trid($item_id, $language_code)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    interface IWPML_Action_Loader_Factory
    {
        /**
         * @return IWPML_Action|IWPML_Action[]|callable|null
         */
        public function create();
    }
    /**
     * @author OnTheGo Systems
     */
    interface IWPML_Frontend_Action_Loader extends \IWPML_Action_Loader_Factory
    {
    }
    /**
     * @author OnTheGo Systems
     */
    interface IWPML_Backend_Action_Loader extends \IWPML_Action_Loader_Factory
    {
    }
    /**
     * Class WPML_Compatibility_Factory
     */
    class WPML_Compatibility_Factory implements \IWPML_Frontend_Action_Loader, \IWPML_Backend_Action_Loader
    {
        /**
         * Create array of compatibility objects.
         *
         * @return array
         */
        public function create()
        {
        }
    }
    /**
     * Class WPML_Compatibility_2017
     *
     * # Compatbility class for 2017 theme
     *
     * ## Why is this needed?
     *
     * When configuring 2017 to use a static page, you can define sections in these pages.
     * Each section is another page and the value is stored with the ID of that page.
     * In order to display the sections in the current language, WPML needs to know the IDs of the translated pages.
     *
     * ## How this works?
     *
     * WPML tries to retrieve the number of Frontpage panels and, for each of them, will add a filter to translate the ID with the one in the current language, if any.
     *
     * This class is loaded and instantiated by `plugins-integration.php` only if the `twentyseventeen_panel_count` function exists and the `twentyseventeen_translate_panel_id` does not.
     */
    class WPML_Compatibility_2017
    {
        function init_hooks()
        {
        }
        function get_translated_panel_id($id)
        {
        }
    }
    class WPML_Compatibility_Tiny_Compress_Images
    {
        /** @var \WPML_Translation_Element_Factory */
        private $element_factory;
        /**
         * WPML_Compatibility_Tiny_Compress_Images constructor.
         *
         * @param \WPML_Translation_Element_Factory $element_factory
         */
        function __construct(\WPML_Translation_Element_Factory $element_factory)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param int    $post_id
         * @param string $meta_key
         * @param mixed  $meta_value
         */
        public function updated_tiny_postmeta_action($post_id, $meta_key, $meta_value)
        {
        }
        private function source_and_translation_matches($source_attachment_file, $translated_attachment_id)
        {
        }
    }
    class WPML_Compatibility_Tiny_Compress_Images_Factory implements \IWPML_Backend_Action_Loader
    {
        /**
         * @return \WPML_Compatibility_Tiny_Compress_Images
         */
        public function create()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    interface IWPML_Action
    {
        public function add_hooks();
    }
    /**
     * @author OnTheGo Systems
     */
    interface IWPML_Frontend_Action extends \IWPML_Action
    {
    }
    /**
     * @author OnTheGo Systems
     */
    interface IWPML_Backend_Action extends \IWPML_Action
    {
    }
}
namespace WPML\Compatibility\WPBakery {
    class Styles implements \IWPML_Frontend_Action, \IWPML_Backend_Action
    {
        const META_CUSTOM_CSS = '_wpb_shortcodes_custom_css';
        /** @var WPML_PB_Last_Translation_Edit_Mode $lastEditMode */
        private $lastEditMode;
        /** @var WPML_Custom_Field_Setting_Factory $metaSettingFactory */
        private $metaSettingFactory;
        public function __construct(\WPML_PB_Last_Translation_Edit_Mode $lastEditMode, \WPML_Custom_Field_Setting_Factory $metaSettingFactory)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param int $postId
         */
        public function copyCssFromOriginal($postId)
        {
        }
        /**
         * As a general rule, we will copy the CSS meta field only once, so
         * it will work fine and independently if the translation is done
         * with the native WP editor. Otherwise, we will programmatically
         * copy the CSS meta to the translation.
         *
         * This adjustment code is required since we are changing the original
         * setting from "copy" to "copy_once" (it will also be updated on the
         * remote config file).
         */
        public function adjustMetaSetting()
        {
        }
    }
}
namespace {
    class WPML_Compatibility_Plugin_Visual_Composer_Grid_Hooks implements \IWPML_Action
    {
        /** @var IWPML_Current_Language $current_language */
        private $current_language;
        /** @var WPML_Translation_Element_Factory $element_factory */
        private $element_factory;
        public function __construct(\IWPML_Current_Language $current_language, \WPML_Translation_Element_Factory $element_factory)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param string|array $string
         * @param string       $encoding
         * @param string       $encoded_string
         *
         * @return string|array
         */
        function vc_grid_link_decode($string, $encoding, $encoded_string)
        {
        }
        /**
         * @param string $content
         *
         * @return string
         */
        public function vc_shortcode_content_filter($content)
        {
        }
        /**
         * @param array $matches
         *
         * @return string
         */
        private function replace_grid_id(array $matches)
        {
        }
    }
    /**
     * Class WPML_Compatibility_Plugin_Visual_Composer
     *
     * @author OnTheGoSystems
     */
    class WPML_Compatibility_Plugin_Visual_Composer
    {
        /** @var WPML_Debug_BackTrace $debug_backtrace */
        private $debug_backtrace;
        /** @var array $filters_to_restore */
        private $filters_to_restore = array();
        /**
         * WPML_Compatibility_Plugin_Visual_Composer constructor.
         *
         * @param WPML_Debug_BackTrace $debug_backtrace
         */
        public function __construct(\WPML_Debug_BackTrace $debug_backtrace)
        {
        }
        public function add_hooks()
        {
        }
        private function prevent_registering_widget_strings_twice()
        {
        }
        /**
         * @param string $text
         *
         * @return string
         */
        public function suspend_vc_widget_translation($text)
        {
        }
        /**
         * @param string $text
         *
         * @return mixed
         */
        public function restore_widget_translation($text)
        {
        }
        function vc_safe_encode($string, $encoding)
        {
        }
        function vc_safe_decode($string, $encoding, $encoded_string)
        {
        }
    }
    class WPML_Compatibility_Gutenberg implements \IWPML_Action
    {
        /**
         * We need to load the filter after `wpml_before_init` where ST loads the blocking filter
         * and before `plugins_loaded` (priority 10) where Gutenberg loads the text domain.
         */
        const PRIORITY_ON_PLUGINS_LOADED = 5;
        /** @var WPML_PHP_Functions $php_functions */
        private $php_functions;
        public function __construct(\WPML_PHP_Functions $php_functions = \null)
        {
        }
        public function add_hooks()
        {
        }
        public function load_textdomain_filter()
        {
        }
        /**
         * @param bool   $override
         * @param string $domain
         *
         * @return bool
         */
        public function unblock_gutenberg_domain($override, $domain)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    interface IWPML_DIC_Action extends \IWPML_Action
    {
    }
}
namespace WPML\Compatibility {
    abstract class BaseDynamicContent implements \IWPML_DIC_Action, \IWPML_Backend_Action
    {
        /** @var SitePress */
        private $sitepress;
        /**
         * @param SitePress $sitepress
         */
        public function __construct(\SitePress $sitepress)
        {
        }
        /**
         * Add filters and actions.
         */
        public function add_hooks()
        {
        }
        /**
         * Sets dynamic content to be translatable.
         *
         * @param string $string   The decoded string so far.
         * @param string $encoding The encoding used.
         *
         * @return string|array
         */
        public abstract function decode_dynamic_content($string, $encoding);
        /**
         * Rebuilds dynamic content with translated strings.
         *
         * @param string|array $string   The field array or string.
         * @param string       $encoding The encoding used.
         *
         * @return string
         */
        public abstract function encode_dynamic_content($string, $encoding);
        /**
         * Check if a certain field contains dynamic content.
         *
         * @param string $string The string to check.
         *
         * @return bool
         */
        protected abstract function is_dynamic_content($string);
        /**
         * Decode a dynamic-content field.
         *
         * @param string $string The string to decode.
         *
         * @return array
         */
        protected abstract function decode_field($string);
        /**
         * Encode a dynamic-content field.
         *
         * @param array $field The field to encode.
         *
         * @return string
         */
        protected abstract function encode_field($field);
    }
}
namespace {
    class WPML_Compatibility_Plugin_Fusion_Hooks_Factory implements \IWPML_Frontend_Action_Loader, \IWPML_Backend_Action_Loader
    {
        public function create()
        {
        }
        /**
         * Get list of active languages.
         *
         * @return array
         */
        private function get_filtered_active_languages()
        {
        }
    }
}
namespace WPML\Compatibility\FusionBuilder {
    class DynamicContent extends \WPML\Compatibility\BaseDynamicContent
    {
        /** @var array */
        protected $positions = ['before', 'after', 'fallback'];
        /**
         * Sets $positions dynamic content to be translatable.
         *
         * @param string $string   The decoded string so far.
         * @param string $encoding The encoding used.
         *
         * @return string|array
         */
        public function decode_dynamic_content($string, $encoding)
        {
        }
        /**
         * Rebuilds dynamic content with translated strings.
         *
         * @param string|array $string   The field array or string.
         * @param string       $encoding The encoding used.
         *
         * @return string
         */
        public function encode_dynamic_content($string, $encoding)
        {
        }
        /**
         * Check if a certain field contains dynamic content.
         *
         * @param string $string The string to check.
         *
         * @return bool
         */
        protected function is_dynamic_content($string)
        {
        }
        /**
         * Decode a dynamic-content field.
         *
         * @param string $string The string to decode.
         *
         * @return array
         */
        protected function decode_field($string)
        {
        }
        /**
         * Encode a dynamic-content field.
         *
         * @param array $field The field to encode.
         *
         * @return string
         */
        protected function encode_field($field)
        {
        }
    }
    abstract class BaseHooks
    {
        const HANDLE = 'wpml-compatibility-fusion';
        const SCRIPT_SRC = ICL_PLUGIN_URL . '/dist/js/compatibility/fusion_builder/app.js';
        const STYLE_SRC = ICL_PLUGIN_URL . '/res/css/compatibility/fusion_builder.css';
        const OBJECT_NAME = 'WPML_COMPATIBILITY_FUSION';
        protected function enqueue_style()
        {
        }
        protected function enqueue_script()
        {
        }
        protected function localize_script($data)
        {
        }
    }
}
namespace WPML\Compatibility\FusionBuilder\Frontend {
    class Hooks extends \WPML\Compatibility\FusionBuilder\BaseHooks implements \IWPML_Frontend_Action, \IWPML_DIC_Action
    {
        /** @var \SitePress */
        private $sitepress;
        /** @var \WPML_Translation_Element_Factory */
        private $elementFactory;
        public function __construct(\SitePress $sitepress, \WPML_Translation_Element_Factory $elementFactory)
        {
        }
        public function add_hooks()
        {
        }
        public function frontendScripts()
        {
        }
        private function isFusionBuilderRequest()
        {
        }
    }
}
namespace {
    class WPML_Compatibility_Plugin_Fusion_Global_Element_Hooks extends \WPML\Compatibility\FusionBuilder\BaseHooks implements \IWPML_Action
    {
        const BEFORE_ADD_GLOBAL_ELEMENTS_PRIORITY = 5;
        const GLOBAL_SHORTCODE_START = '[fusion_global id="';
        const ACTION = 'wpml_compatibility_fusion_get_template_translation_icons';
        const LAYOUTS_SCREEN_ID = 'avada_page_avada-layouts';
        const LAYOUTS_SCREEN_ID_BEFORE_V7 = 'fusion-builder_page_fusion-layouts';
        const SECTIONS_SCREEN_ID = 'avada-layout-sections';
        const SECTIONS_SCREEN_ID_BEFORE_V7 = 'fusion-builder_page_fusion-layout-sections';
        /** @var IWPML_Current_Language */
        private $current_language;
        /** @var WPML_Translation_Element_Factory */
        private $element_factory;
        /** @var WPML_Custom_Columns */
        private $custom_columns;
        /** @var WPML_Post_Status_Display */
        private $postStatusDisplay;
        /** @var array */
        private $activeLanguages;
        public function __construct(\IWPML_Current_Language $current_language, \WPML_Translation_Element_Factory $element_factory, \WPML_Custom_Columns $custom_columns, array $activeLanguages, \WPML_Post_Status_Display $postStatusDisplay)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param bool $render
         *
         * @return bool
         */
        public function wpml_ls_exclude_in_menu_filter($render)
        {
        }
        public function translate_global_element_ids($content)
        {
        }
        private function replace_global_id(array $matches)
        {
        }
        /**
         * Filter overrides.
         *
         * @param WP_Post|stdClass|false $override  The override.
         *
         * @return WP_Post|stdClass|false
         */
        public function fusion_get_override_filter($override)
        {
        }
        /**
         * @param array $columns
         *
         * @return array
         */
        public function add_language_column_header($columns)
        {
        }
        public function enqueue_scripts()
        {
        }
        /**
         * @param string     $column_name
         * @param array|null $item
         */
        public function add_language_column_content($column_name, $item = \null)
        {
        }
        public function get_template_translation_icons()
        {
        }
        /**
         * @param string $screenId
         *
         * @return bool
         */
        private static function isLayoutsScreen($screenId)
        {
        }
        /**
         * @param string $screenId
         *
         * @return bool
         */
        private static function isSectionsScreen($screenId)
        {
        }
    }
    /**
     * Class WPML_Compatibility_Jetpack
     */
    class WPML_Compatibility_Jetpack implements \IWPML_Action
    {
        /**
         * Add hooks.
         */
        public function add_hooks()
        {
        }
        /**
         * Filter to prevent duplicate post from being publicized.
         *
         * @param bool $should_publicize Should publicize post.
         * @param WP_Post $post Post.
         *
         * @return bool
         */
        public function publicize_should_publicize_published_post_filter($should_publicize, $post)
        {
        }
        /**
         * Check if post is a duplicate being created at the moment.
         * We cannot use standard method to determine duplicate as post meta '_icl_lang_duplicate_of' is not set yet.
         *
         * @param $post
         *
         * @return bool
         */
        private function is_post_duplicated($post)
        {
        }
    }
}
namespace WPML\Compatibility\Divi {
    class DiviOptionsEncoding implements \IWPML_Backend_Action, \IWPML_Frontend_Action
    {
        const CHARS_ENCODED = ['%22', '%91', '%93'];
        const CHARS_DECODED = ['"', '[', ']'];
        const DELIMITER = '_';
        public function add_hooks()
        {
        }
        public function decode_divi_options($string, $encoding)
        {
        }
        public function encode_divi_options($string, $encoding)
        {
        }
    }
}
namespace {
    class WPML_Compatibility_Divi implements \IWPML_DIC_Action, \IWPML_Backend_Action, \IWPML_Frontend_Action
    {
        const REGEX_REMOVE_OPENING_PARAGRAPH = '/(<p>[\\n\\r]*)([\\n\\r]{1}\\[\\/et_)/m';
        const REGEX_REMOVE_CLOSING_PARAGRAPH = '/(\\[et_.*\\][\\n\\r]{1})([\\n\\r]*<\\/p>)/m';
        /** @var SitePress */
        private $sitepress;
        /**
         * @param SitePress $sitepress
         */
        public function __construct(\SitePress $sitepress)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @return bool
         */
        private function is_standard_editor_used()
        {
        }
        public function display_warning_notice()
        {
        }
        /**
         * These actions require the custom widget area to be initialized.
         *
         * @param array $actions
         * @return array
         */
        public function load_builder_for_ajax_actions($actions)
        {
        }
        public function load_resources_if_they_are_required()
        {
        }
        private static function get_translation_dashboard_page()
        {
        }
        private static function get_translation_editor_page()
        {
        }
        private static function get_duplication_action_page()
        {
        }
        private static function get_sl_page()
        {
        }
        private static function is_tm_active()
        {
        }
        private static function is_sl_active()
        {
        }
        private function register_layouts()
        {
        }
        /**
         * The global layout is not properly extracted from the page
         * because it adds <p> tags either not opened or not closed.
         *
         * See the global content below as an example:
         *
         * [et_pb_section prev_background_color="#000000" next_background_color="#000000"][et_pb_text]
         *
         * </p>
         * <p>Global text 1 EN5</p>
         * <p>
         *
         * [/et_pb_text][/et_pb_section]
         *
         * We also need to remove `prev_background` and `next_background` attributes which are added from the page.
         *
         * @param string $content
         * @param int    $post_id
         */
        public function cleanup_global_layout_content($content, $post_id)
        {
        }
        public function should_handle_shortcode_content($handle_content, $shortcode)
        {
        }
        /**
         * Check if a global module has excluded any translatable text that we need to handle
         *
         * @param array $shortcode
         * {
         *      @type string $tag.
         *      @type string $content.
         *      @type string $attributes.
         * }
         * @return bool
         */
        private function is_excluded_from_sync($shortcode)
        {
        }
        /**
         * Get a list of translatable attributes for a shortcode tag.
         * This includes the inner content and any attributes found in XML configuration.
         *
         * @param string $tag The shortcode tag.
         * @return array
         */
        private function get_translatable_shortcode_attributes($tag)
        {
        }
        /**
         * Remove the `_et_pb_old_content` meta field from translation jobs, except for products.
         *
         * @param array  $fields  Array of fields to translate.
         * @param object $post_id The ID of the post being translated.
         *
         * @return array
         */
        public function remove_old_content_from_translation($fields, $post_id)
        {
        }
        /**
         * Remove the `_et_pb_old_content` meta field from words count, except for products.
         *
         * @param array  $fields_to_count Array of custom fields to count.
         * @param object $post_id         The ID of the post for which we are counting the words.
         *
         * @return array
         */
        public function remove_old_content_from_words_count($fields_to_count, $post_id)
        {
        }
    }
}
namespace WPML\Compatibility\Divi {
    class DynamicContent extends \WPML\Compatibility\BaseDynamicContent
    {
        const ENCODED_CONTENT_START = '@ET-DC@';
        const ENCODED_CONTENT_END = '@';
        /** @var array */
        protected $positions = ['before', 'after'];
        /**
         * Sets $positions dynamic content to be translatable.
         *
         * @param string $string   The decoded string so far.
         * @param string $encoding The encoding used.
         *
         * @return string|array
         */
        public function decode_dynamic_content($string, $encoding)
        {
        }
        /**
         * Rebuilds dynamic content with translated strings.
         *
         * @param string|array $string   The field array or string.
         * @param string       $encoding The encoding used.
         *
         * @return string
         */
        public function encode_dynamic_content($string, $encoding)
        {
        }
        /**
         * Decode a dynamic-content field.
         *
         * @param string $string The string to decode.
         *
         * @return bool
         */
        protected function is_dynamic_content($string)
        {
        }
        /**
         * Decode a dynamic-content field.
         *
         * @param string $string The string to decode.
         *
         * @return array
         */
        protected function decode_field($string)
        {
        }
        /**
         * Encode a dynamic-content field.
         *
         * @param array $field The field to encode.
         *
         * @return string
         */
        protected function encode_field($field)
        {
        }
    }
}
namespace {
    /**
     * @author OnTheGo Systems
     */
    interface IWPML_AJAX_Action extends \IWPML_Action
    {
    }
}
namespace WPML\Compatibility\Divi {
    class Builder implements \IWPML_Frontend_Action, \IWPML_Backend_Action, \IWPML_AJAX_Action
    {
        public function add_hooks()
        {
        }
        public function switch_to_user_language($locale)
        {
        }
    }
    class Search implements \IWPML_Frontend_Action
    {
        public function add_hooks()
        {
        }
        public function add_language_form_field()
        {
        }
    }
}
namespace {
    /**
     * @author OnTheGo Systems
     */
    interface IWPML_Deferred_Action_Loader extends \IWPML_Action_Loader_Factory
    {
        /**
         * @return string
         */
        public function get_load_action();
    }
}
namespace WPML\Compatibility\Divi {
    class ThemeBuilderFactory implements \IWPML_Deferred_Action_Loader, \IWPML_Backend_Action_Loader, \IWPML_Frontend_Action_Loader
    {
        public function get_load_action()
        {
        }
        public function create()
        {
        }
    }
}
namespace {
    /**
     * @author OnTheGo Systems
     */
    class WPML_Notice
    {
        private $display_callbacks = array();
        private $id;
        private $text;
        private $collapsed_text;
        private $group = 'default';
        private $restricted_to_user_ids = array();
        private $actions = array();
        /**
         * @see \WPML_Notice::set_css_class_types
         * @var array
         */
        private $css_class_types = array();
        private $css_classes = array();
        private $dismissible = \false;
        private $exclude_from_pages = array();
        private $hideable = \false;
        private $collapsable = \false;
        private $restrict_to_pages = array();
        private $restrict_to_page_prefixes = array();
        private $restrict_to_screen_ids = array();
        private $hide_if_notice_exists = \null;
        private $dismissible_for_different_text = \true;
        private $default_group_name = 'default';
        private $capabilities = array();
        private $dismiss_reset = \false;
        /*
         * @var bool
         * @since 4.1.0
         */
        private $flash = \false;
        /**
         * @var string
         */
        private $nonce_action;
        /** @var bool */
        private $text_only = \false;
        /**
         * WPML_Admin_Notification constructor.
         *
         * @param int|string $id
         * @param string     $text
         * @param string     $group
         */
        public function __construct($id, $text, $group = 'default')
        {
        }
        public function add_action(\WPML_Notice_Action $action)
        {
        }
        public function add_exclude_from_page($page)
        {
        }
        public function add_restrict_to_page($page)
        {
        }
        /** @param int $user_id */
        public function add_user_restriction($user_id)
        {
        }
        /** @param int $user_id */
        public function remove_user_restriction($user_id)
        {
        }
        /** @return array */
        public function get_restricted_user_ids()
        {
        }
        /** @return bool */
        public function is_user_restricted()
        {
        }
        /** @return bool */
        public function is_for_current_user()
        {
        }
        /**
         * @return bool
         */
        public function is_user_cap_allowed()
        {
        }
        public function can_be_dismissed()
        {
        }
        public function can_be_dismissed_for_different_text()
        {
        }
        public function can_be_hidden()
        {
        }
        /**
         * @return bool
         */
        public function can_be_collapsed()
        {
        }
        /**
         * As the notice is supposed to be serialized and stored into the DB,
         * the callback should be only a function or a static method.
         *
         * Before to use a callback, please check the existing options with:
         * - add_exclude_from_page
         * - add_restrict_to_page
         * - add_user_restriction
         * - add_capability_check
         *
         * @param callable $callback
         */
        public function add_display_callback($callback)
        {
        }
        public function add_capability_check(array $cap)
        {
        }
        public function get_display_callbacks()
        {
        }
        public function get_actions()
        {
        }
        public function get_css_classes()
        {
        }
        /**
         * @param string|array $css_classes
         */
        public function set_css_classes($css_classes)
        {
        }
        public function get_exclude_from_pages()
        {
        }
        /**
         * @return string
         */
        public function get_group()
        {
        }
        /**
         * @return int|string
         */
        public function get_id()
        {
        }
        public function set_restrict_to_page_prefixes(array $page_prefixes)
        {
        }
        /**
         * @return array
         */
        public function get_restrict_to_page_prefixes()
        {
        }
        public function get_restrict_to_pages()
        {
        }
        public function set_restrict_to_screen_ids(array $screens)
        {
        }
        /**
         * @return array
         */
        public function get_restrict_to_screen_ids()
        {
        }
        public function get_nonce_action()
        {
        }
        /**
         * @return string
         */
        public function get_text()
        {
        }
        public function get_css_class_types()
        {
        }
        /**
         * @return string
         */
        public function get_collapsed_text()
        {
        }
        /**
         * Use this to set the look of the notice.
         * WordPress recognize these values:
         * - notice-error
         * - notice-warning
         * - notice-success
         * - notice-info
         * You can use the above values with or without the "notice-" prefix:
         * the prefix will be added automatically in the HTML, if missing.
         * @see https://codex.wordpress.org/Plugin_API/Action_Reference/admin_notices for more details
         *
         * @param string|array $types Accepts either a space separated values string, or an array of values.
         */
        public function set_css_class_types($types)
        {
        }
        /**
         * @param bool $dismissible
         */
        public function set_dismissible($dismissible)
        {
        }
        public function set_exclude_from_pages(array $pages)
        {
        }
        public function set_hide_if_notice_exists($notice_id, $notice_group = \null)
        {
        }
        public function get_hide_if_notice_exists()
        {
        }
        /**
         * @param bool $hideable
         */
        public function set_hideable($hideable)
        {
        }
        /**
         * @param bool $collapsable
         */
        public function set_collapsable($collapsable)
        {
        }
        /**
         * @param string $action
         */
        public function set_nonce_action($action)
        {
        }
        /**
         * @param string $collapsed_text
         */
        public function set_collapsed_text($collapsed_text)
        {
        }
        public function set_restrict_to_pages(array $pages)
        {
        }
        public function reset_dismiss()
        {
        }
        public function must_reset_dismiss()
        {
        }
        public function is_different(\WPML_Notice $other_notice)
        {
        }
        /**
         * @param bool $flash
         * @since 4.1.0
         */
        public function set_flash($flash = \true)
        {
        }
        /**
         * @return bool
         * @since 4.1.0
         */
        public function is_flash()
        {
        }
        /**
         * @return bool
         */
        public function should_be_text_only()
        {
        }
        /**
         * @param bool $text_only
         */
        public function set_text_only($text_only)
        {
        }
    }
    class WPML_Compatibility_Divi_Notice extends \WPML_Notice
    {
        const ID = 'wpml-compatibility-divi-editor-warning';
        const GROUP = 'wpml-compatibility-divi';
        public function __construct()
        {
        }
        /**
         * @return string
         */
        private function get_message()
        {
        }
    }
}
namespace WPML\Compatibility\Divi {
    class ThemeBuilder implements \IWPML_Action
    {
        /** @var SitePress */
        private $sitepress;
        /**
         * @param SitePress $sitepress
         */
        public function __construct(\SitePress $sitepress)
        {
        }
        /**
         * Add filters and actions.
         */
        public function add_hooks()
        {
        }
        /**
         * Gets all post types that are layouts.
         */
        private static function get_types()
        {
        }
        /**
         * Access the global post types array to tweak the settings for layouts
         */
        public function make_layouts_editable()
        {
        }
        /**
         * Translate theme builder layout ids in the frontend.
         *
         * @param string $value   The layout id.
         * @param int    $post_id The post it belongs to.
         * @param string $key     The meta key we are handling.
         * @param bool   $single  Fetch a single row or an array.
         * @return string
         */
        public function translate_layout_ids($value, $post_id, $key, $single)
        {
        }
        /**
         * Remove the 'View' link because you can't view layouts alone.
         *
         * @param string $link   The complete link.
         * @param string $text   The text to link.
         * @param object $job    The corresponding translation job.
         * @param string $prefix The prefix of the element type.
         * @param string $type   The element type.
         *
         * @return string
         */
        public function document_view_layout_link($link, $text, $job, $prefix, $type)
        {
        }
        /**
         * Check if a certain Type is a theme builder layout.
         *
         * @param string $type The type to check.
         *
         * @return bool
         */
        private function is_theme_layout($type)
        {
        }
    }
    class TinyMCE implements \IWPML_Backend_Action
    {
        public function add_hooks()
        {
        }
        /**
         * @param array $config
         *
         * @return array
         */
        public function filterEditorAutoTags($config)
        {
        }
    }
}
namespace {
    /**
     * Class WPML_Compatibility_Theme_Enfold
     */
    class WPML_Compatibility_Theme_Enfold
    {
        /** @var TranslationManagement */
        private $translation_management;
        /**
         * @param TranslationManagement $translation_management
         */
        public function __construct(\TranslationManagement $translation_management)
        {
        }
        public function init_hooks()
        {
        }
        /**
         * Enfold's page builder is keeping the content in the custom field "_aviaLayoutBuilderCleanData" (maybe to prevent the content
         * from being altered by another plugin). The standard post content will be displayed only if the field
         * "_aviaLayoutBuilder_active" or "_avia_builder_shortcode_tree" does not exist.
         *
         * "_aviaLayoutBuilder_active" and "_avia_builder_shortcode_tree" fields should be set to "copy" in wpml-config.xml.
         *
         * @param int     $post_id
         * @param WP_Post $post
         */
        public function wp_insert_post_action($post_id, $post)
        {
        }
        /**
         * @param string $content
         * @param int $post_id
         *
         * @return string
         */
        public function get_content_from_custom_field($content, $post_id)
        {
        }
        /**
         * @param int $master_post_id
         * @param string $lang
         * @param array $post_array
         * @param int $id
         */
        function sync_duplicate($master_post_id, $lang, $post_array, $id)
        {
        }
        /**
         * @param int $post_id
         *
         * @return bool
         */
        private function is_active($post_id)
        {
        }
        /**
         * @return bool
         */
        private function is_using_standard_wp_editor()
        {
        }
        /**
         * Enfold/Avia replaces "'" with "’" in enfold/onfig-templatebuilder/avia-template-builder/assets/js/avia-builder.js:1312
         * We just follow the same replacement pattern for string translations
         *
         * @param null|string $translation
         * @param bool        $is_attribute
         *
         * @return null|string
         */
        public function replace_single_quotes($translation, $is_attribute)
        {
        }
    }
    /**
     * @deprecated version 4.3.0   use 'wp-seo-multilingual` plugin instead.
     */
    class WPML_Compatibility_Wordpress_Seo_Categories_Old implements \IWPML_Action
    {
        public function add_hooks()
        {
        }
        public function append_categories_hook($rules)
        {
        }
        public function turn_off_get_terms_filter($rules)
        {
        }
        public function append_categories_translations($categories, $taxonomy)
        {
        }
        /**
         * @param array $terms
         *
         * @return bool
         */
        private function is_array_of_wp_term(array $terms)
        {
        }
        /**
         * @param $term_id
         *
         * @return false|WP_Term
         */
        protected function map_to_term($term_id)
        {
        }
    }
    /**
     * Class WPML_Google_Sitemap_Generator
     *
     * # Compatibility class for Google XML Sitemaps (https://wordpress.org/plugins/google-sitemap-generator/)
     *
     * ## Why is this needed?
     *
     * Google XML Sitemaps displays all the translations together. When we use a different domain per language we want to have separate sitemaps for each domain.
     *
     * ## How does this work?
     *
     * WPML fetches a list of post ids in other languages to pass them to the database query via 'sm_b_exclude' option.
     *
     * This class is loaded and instantiated by `plugins-integration.php` only if the `GoogleSitemapGeneratorLoader` class exists.
     */
    class WPML_Google_Sitemap_Generator
    {
        private $wpdb;
        private $sitepress;
        /**
         * @param wpdb $wpdb
         */
        public function __construct(\wpdb $wpdb, \SitePress $sitepress)
        {
        }
        public function init_hooks()
        {
        }
        /**
         * Add hooks for the different types of permalinks.
         */
        public function init_permalink_hooks()
        {
        }
        /**
         * Filter sitemap urls to apply the correct URL format.
         *
         * @param string      $permalink The URL to filter.
         * @param WP_Post|int $post_id   The post id it belongs to.
         *
         * @return string
         */
        public function permalink_filter($permalink, $post)
        {
        }
        /**
         * @return bool
         */
        private function is_per_domain()
        {
        }
        /**
         * @param array $value
         *
         * @return array
         */
        public function exclude_other_languages($value)
        {
        }
    }
    class WPML_Compatibility_Disqus_Factory implements \IWPML_Frontend_Action_Loader
    {
        /**
         * @return WPML_Compatibility_Disqus
         */
        public function create()
        {
        }
    }
    class WPML_Compatibility_Disqus implements \IWPML_Action
    {
        const LANGUAGE_NOT_SUPPORTED = '';
        /** @var SitePress */
        private $sitepress;
        /**
         * @param SitePress $sitepress
         */
        public function __construct(\SitePress $sitepress)
        {
        }
        public function add_hooks()
        {
        }
        public function set_language()
        {
        }
        /**
         * @return string
         */
        private function get_current_lang()
        {
        }
        /**
         * @return array
         */
        private function get_lang_map()
        {
        }
    }
    class SitePress_EditLanguages
    {
        const ACCEPTED_MIME_TYPES = ['gif' => 'image/gif', 'jpg|jpeg|jpe' => 'image/jpg', 'png' => 'image/png', 'svg' => 'image/svg+xml'];
        public $active_languages;
        public $upload_dir;
        public $is_writable = \false;
        public $required_fields = ['code' => '', 'english_name' => '', 'translations' => 'array', 'flag' => '', 'default_locale' => '', 'tag' => ''];
        private $mode = 'edit';
        private $validation_action = \null;
        public $validation_failed = \false;
        private $built_in_languages = [];
        private $error = '';
        private $message = '';
        private $max_file_size;
        private $max_locale_length = 35;
        /**
         * @var WPML_Flags
         */
        private $wpml_flags;
        /**
         * @var array
         */
        private $wpml_flag_files;
        /** @var bool $update_language_packs_if_needed */
        private $update_language_packs_if_needed;
        /**
         * @param WPML_Flags $wpml_flags
         * @param bool       $update_language_packs_if_needed
         */
        public function __construct(\WPML_Flags $wpml_flags, $update_language_packs_if_needed = \true)
        {
        }
        function render()
        {
        }
        function edit_table()
        {
        }
        private function prepare_new_lang_data($new_lang)
        {
        }
        private function table_row($lang, $echo = \true, $add = \false)
        {
        }
        function get_active_languages()
        {
        }
        function insert_main_table($code, $english_name, $default_locale, $major = 0, $active = 0, $encode_url = 0, $tag = '')
        {
        }
        function update_main_table($id, $code, $default_locale, $encode_url, $tag)
        {
        }
        function insert_translation($name, $language_code, $display_language_code)
        {
        }
        function update_translation($name, $language_code, $display_language_code)
        {
        }
        function insert_flag($lang_code, $flag, $from_template)
        {
        }
        function update_flag($lang_code, $flag, $from_template)
        {
        }
        function update()
        {
        }
        /**
         * @param array $data
         * @param int   $id
         *
         * @return int
         */
        private function handle_flag_post_data(array &$data, $id)
        {
        }
        /**
         * @param array $data
         * @param       $id
         *
         * @return bool
         */
        private function is_flag_uploading_process(array &$data, $id)
        {
        }
        function insert_one($data)
        {
        }
        function validate_one($id, $data)
        {
        }
        /**
         * Checks that language code is valid.
         *
         * @param string $language_code Unvalidated language code from input.
         *
         * @return bool
         */
        private function is_language_code_valid($language_code)
        {
        }
        /**
         * @return bool
         */
        private function is_delete_language_action()
        {
        }
        /**
         * @return bool
         */
        private function must_display_new_language_translation_column()
        {
        }
        /**
         * @return bool
         */
        private function is_new_data_and_invalid()
        {
        }
        /**
         * @return bool
         */
        private function is_new_data_and_valid()
        {
        }
        /**
         * @return bool
         */
        private function is_edit_mode()
        {
        }
        private function set_validation_failed($id)
        {
        }
        function delete_language($lang_id)
        {
        }
        function sanitize($data)
        {
        }
        function check_extension($file)
        {
        }
        function get_errors()
        {
        }
        function set_errors($str = \false)
        {
        }
        function get_messages()
        {
        }
        function set_messages($str = \false)
        {
        }
        function upload_flag($id)
        {
        }
        function migrate()
        {
        }
        /**
         * @param $sitepress
         */
        private function update_language_packs(\SitePress $sitepress)
        {
        }
        /**
         * @param $id
         *
         * @return string
         */
        private function get_add_language_from_post_data($id)
        {
        }
        /**
         * @param $lang
         * @param $translation
         *
         * @return string
         */
        private function get_translations_data($lang, $translation)
        {
        }
    }
    class WPML_Post_Status_Display_Factory
    {
        /** @var SitePress $sitepress */
        private $sitepress;
        public function __construct(\SitePress $sitepress = \null)
        {
        }
        public function create()
        {
        }
    }
    class WPML_Translation_Selector extends \WPML_SP_User
    {
        private $default_language_code;
        private $source_language_code;
        private $element_id;
        public function __construct(&$sitepress, $default_language, $source_language, $element_id)
        {
        }
        function add_translation_of_selector_to_page($trid, $current_language, $selected_language, $untranslated_ids)
        {
        }
        private function get_name_by_ttid($ttid)
        {
        }
        /**
         * @param int $trid
         * @return null|object
         */
        private function get_original_name_by_trid($trid)
        {
        }
    }
    abstract class WPML_Language_Filter_Bar extends \WPML_WPDB_And_SP_User
    {
        protected $active_languages;
        protected $current_language;
        protected function init()
        {
        }
        protected function lang_span($lang_code, $count)
        {
        }
        protected function strong_lang_span_cover($lang_code, $count)
        {
        }
        private function sanitize_get_input($index, $parent_array)
        {
        }
        protected function sanitize_request()
        {
        }
        protected abstract function get_count_data($element_type);
        protected function extra_conditions_snippet()
        {
        }
        protected function get_counts($element_type)
        {
        }
        private function generate_counts_array(array $data)
        {
        }
    }
    class WPML_Post_Language_Filter extends \WPML_Language_Filter_Bar
    {
        private $post_status;
        private $post_type;
        protected function sanitize_request()
        {
        }
        public function register_scripts()
        {
        }
        public function post_language_filter()
        {
        }
        protected function extra_conditions_snippet()
        {
        }
        protected function get_count_data($type)
        {
        }
        private function language_links($type)
        {
        }
    }
    class WPML_Meta_Boxes_Post_Edit_Ajax implements \IWPML_Action
    {
        const ACTION_GET_META_BOXES = 'wpml_get_meta_boxes_html';
        const ACTION_GET_ADMIN_LS = 'wpml_get_admin_ls_links';
        const ACTION_DUPLICATE = 'make_duplicates';
        private $meta_boxes_post_edit_html;
        private $translation_management;
        private $admin_language_switcher;
        public function __construct(\WPML_Meta_Boxes_Post_Edit_HTML $meta_boxes_post_edit_html, \TranslationManagement $iclTranslationManagement, \WPML_Admin_Language_Switcher $admin_language_switcher)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param string $hook
         */
        public function enqueue_scripts($hook)
        {
        }
        public function render_meta_boxes_html()
        {
        }
        public function get_admin_ls_links()
        {
        }
        /**
         * @param bool $is_edit_page
         *
         * @return bool
         */
        public function force_post_edit_when_refreshing_meta_boxes($is_edit_page)
        {
        }
        public function duplicate_post()
        {
        }
        /**
         * @param string $action
         * @return bool
         */
        private function is_valid_request($action)
        {
        }
    }
    /**
     * Class WPML_Meta_Boxes_Post_Edit_HTML
     */
    class WPML_Meta_Boxes_Post_Edit_HTML
    {
        const FLAG_HAS_MEDIA_OPTIONS = 'wpml_has_media_options';
        const TAXONOMIES_PRIORITY = 'translation_priority';
        const WRAPPER_ID = 'icl_div';
        /** @var SitePress $sitepress */
        private $sitepress;
        /** @var WPML_Post_Translation $post_translation */
        private $post_translation;
        private $translation_of_options;
        /** @var  array $allowed_languages */
        private $allowed_languages;
        /** @var  bool $can_translate_post */
        private $can_translate_post;
        /** @var  bool $is_original */
        private $is_original;
        /** @var  WP_Post $post */
        private $post;
        /** @var  string $post_type_label */
        private $post_type_label;
        /** @var  string $selected_language */
        private $selected_language;
        /** @var  string $source_language */
        private $source_language;
        /** @var  array $translations */
        private $translations;
        /** @var  int $trid */
        private $trid;
        /**
         * @param SitePress             $sitepress
         * @param WPML_Post_Translation $post_translation
         */
        function __construct(\SitePress $sitepress, \WPML_Post_Translation $post_translation)
        {
        }
        /**
         * @param null|WP_Post $post
         */
        public function render_languages($post = \null)
        {
        }
        private function post_edit_languages_duplicate_of()
        {
        }
        private function post_edit_languages_dropdown()
        {
        }
        private function translation_priority()
        {
        }
        /**
         * @param int $element_id
         *
         * @return WP_Term|null
         */
        private function get_term_obj($element_id)
        {
        }
        private function connect_translations()
        {
        }
        private function translation_of()
        {
        }
        private function minor_edit()
        {
        }
        private function languages_actions()
        {
        }
        private function is_a_translation()
        {
        }
        private function has_translations()
        {
        }
        private function render_translation_of_options()
        {
        }
        /**
         * @return bool
         */
        private function can_translate()
        {
        }
        private function count_untranslated_posts()
        {
        }
        private function languages_table($status_display)
        {
        }
        /**
         * @param WPML_Post_Status_Display $status_display
         */
        private function translation_summary($status_display)
        {
        }
        private function init_translation_of_options()
        {
        }
        /**
         * @param string                   $lang
         * @param WPML_Post_Status_Display $status_display
         */
        private function translate_option($lang, $status_display)
        {
        }
        private function handle_as_original()
        {
        }
        private function add_translation_of_option($value, $label, $selected)
        {
        }
        private function fix_source_language()
        {
        }
        /**
         * @return bool
         */
        private function is_edit_action()
        {
        }
        /**
         * Helper function to tell if $lang_code should be marked as selected in post language chooser
         *
         * @param string     $lang_code         2 letters language code
         * @param string     $selected_language 2 letters language code
         *
         * @return boolean
         */
        private function is_selected_lang($lang_code, $selected_language)
        {
        }
        /**
         * Renders the "Copy From" and "Overwrite With" buttons on the post edit screen.
         *
         * @param WP_Post $post
         *
         * @hook icl_post_languages_options_after
         */
        private function copy_from_original($post)
        {
        }
        private function media_options($post)
        {
        }
        /**
         * Renders the button for copying the original posts content to the currently edited post on the post edit screen.
         *
         * @param string  $source_lang
         * @param string  $source_lang_name
         * @param WP_Post $post
         * @param int     $trid
         */
        private function display_copy_from_button($source_lang, $source_lang_name, $post, $trid)
        {
        }
        /**
         * Renders the "Overwrite" button on the post edit screen that allows setting the post as a duplicate of its
         * original.
         *
         * @param WP_Post $post
         * @param string  $source_lang_name
         * @param int     $original_post_id
         * @param string  $post_lang
         */
        private function display_set_as_dupl_btn($post, $source_lang_name, $original_post_id, $post_lang)
        {
        }
        private function get_untranslated_posts()
        {
        }
        /**
         * Wrapper for \WPML_Post_Translation::get_element_translations that retrieves all translations of the currently
         * edited post.
         *
         * @uses \WPML_Post_Translation::get_element_translations
         *
         * @return int[]
         */
        private function get_translations()
        {
        }
        /**
         * @return int|false
         */
        private function get_trid()
        {
        }
        /**
         * Returns the post title for a given post or a placeholder if no title exists
         *
         * @param int $source_element_id
         *
         * @return string
         */
        private function get_element_title($source_element_id)
        {
        }
        private function init_post_data()
        {
        }
        /**
         * Returns the id of the master post in case the currently edited post is a duplicate.
         *
         * @return int|bool|false
         */
        private function is_a_duplicate()
        {
        }
        private function set_post(&$post)
        {
        }
        /**
         * Returns the languages for which a post is missing translations and can be translated to
         *
         * @param WP_Post $post
         *
         * @return string[] language codes
         */
        private function get_allowed_target_langs($post)
        {
        }
        private function init_trid_and_selected_language()
        {
        }
        private function init_source_element_data()
        {
        }
        /**
         * @return bool|int|mixed|void
         */
        private function get_selected_priority()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    interface IWPML_AJAX_Action_Loader extends \IWPML_Action_Loader_Factory
    {
    }
    class WPML_Meta_Boxes_Post_Edit_Ajax_Factory implements \IWPML_Backend_Action_Loader, \IWPML_AJAX_Action_Loader
    {
        /**
         * @return WPML_Meta_Boxes_Post_Edit_Ajax
         */
        public function create()
        {
        }
    }
    class WPML_Sync_Custom_Field_Note extends \WPML_SP_User
    {
        /**
         * Prints and admins notice if custom fields where copied to a new post.
         *
         * @param string $source_lang
         * @param int[]  $translations
         */
        public function print_sync_copy_custom_field_note($source_lang, $translations)
        {
        }
        /**
         * @param string $source_lang
         * @param array  $translations
         *
         * @return array
         */
        private function get_copied_custom_fields($source_lang, $translations)
        {
        }
    }
    class WPML_Taxonomy_Translation_Sync_Display
    {
        public function __construct()
        {
        }
        private function get_req_data()
        {
        }
        public function ajax_sync_preview()
        {
        }
        public function ajax_sync_save()
        {
        }
    }
    class WPML_Term_Language_Filter extends \WPML_Language_Filter_Bar
    {
        function terms_language_filter($echo = \true)
        {
        }
        private function lang_element($languages, $code, $taxonomy, $post_type)
        {
        }
        protected function get_count_data($taxonomy)
        {
        }
    }
    class WPML_Taxonomy_Translation_Table_Display
    {
        private static function get_strings_translation_array()
        {
        }
        public static function enqueue_taxonomy_table_resources($sitepress)
        {
        }
        public static function wpml_get_table_taxonomies(\SitePress $sitepress)
        {
        }
        public static function wpml_get_terms_and_labels_for_taxonomy_table()
        {
        }
        private static function render_tax_language_selector($labels, $taxonomy)
        {
        }
    }
    class WPML_Taxonomy_Element_Language_Dropdown
    {
        function add_language_selector_to_page($active_languages, $selected_language, $translations, $element_id, $type)
        {
        }
        private function filter_allowed_languages($active_languages, $selected_language)
        {
        }
        private function add_options($active_languages, $selected_language)
        {
        }
    }
    class WPML_Tax_Menu_Loader
    {
        /** @var SitePress $sitepress */
        private $sitepress;
        /** @var WPDB $wpdb */
        public $wpdb;
        /** @var string $taxonomy */
        private $taxonomy;
        /**
         * @param wpdb      $wpdb
         * @param SitePress $sitepress
         * @param string    $taxonomy
         */
        public function __construct($wpdb, $sitepress, $taxonomy)
        {
        }
        public function get_wpdb()
        {
        }
        public function init()
        {
        }
        /**
         * Filters the display of the categories list in order to prevent the default category from being delete-able.
         * This is done by printing a hidden div containing a JSON encoded array with all category id's, the checkboxes of which are to be removed.
         */
        public function category_display_action()
        {
        }
        public function js_scripts_tags()
        {
        }
        function wp_dropdown_cats_select_parent($html, $args)
        {
        }
        /**
         * @param Object $term
         */
        public function wpml_edit_term_form($term)
        {
        }
        function _tax_adding()
        {
        }
        /**
         * If user perform bulk taxonomy deletion when displaying non-default
         * language taxonomies, after deletion should stay with same language
         *
         * @param string $location Url where browser will redirect.
         * @return string Url where browser will redirect.
         */
        public function preserve_lang_param($location)
        {
        }
    }
    class WPML_Menu_Sync_Display
    {
        private $menu_id;
        /** @var ICLMenusSync $icl_ms*/
        private $icl_ms;
        private $labels;
        public function __construct($menu_id, $icl_ms)
        {
        }
        private function print_label_missing_text($icl_menus_sync, $menu_id)
        {
        }
        public function print_sync_field($index)
        {
        }
        private function get_action_label($index, $item_name, $item_id)
        {
        }
        private function get_additional_data($index, $name)
        {
        }
        private function get_item_name($index, $name)
        {
        }
        private function hierarchical_prefix($index, $item_id)
        {
        }
    }
    class WPML_Troubleshooting_Terms_Menu
    {
        /**
         * Displays the admin notice informing about terms in the old format, using the language suffix.
         * The notice is displayed until it is either dismissed or the update button is pressed.
         */
        public static function display_terms_with_suffix_admin_notice()
        {
        }
        /**
         * Returns the HTML for the display of all terms with a language suffix in the troubleshooting menu.
         * @return string
         */
        public static function display_terms_with_suffix()
        {
        }
        /**
         * @param string $term_name
         * Strips a term off all language suffixes in the form @<lang_code> on it.
         *
         * @return string
         */
        public static function strip_language_suffix($term_name)
        {
        }
        /**
         * Ajax handler for the troubleshoot page. Updates the term name on those terms given via the Ajax action.
         */
        public static function wpml_update_term_names_troubleshoot()
        {
        }
    }
    class WPML_Post_Status_Display
    {
        const ICON_TRANSLATION_EDIT = 'otgs-ico-edit';
        const ICON_TRANSLATION_NEEDS_UPDATE = 'otgs-ico-refresh';
        const ICON_TRANSLATION_ADD = 'otgs-ico-add';
        const ICON_TRANSLATION_ADD_DISABLED = 'otgs-ico-add-disabled';
        const ICON_TRANSLATION_EDIT_DISABLED = 'otgs-ico-edit-disabled';
        const ICON_TRANSLATION_IN_PROGRESS = 'otgs-ico-in-progress';
        private $active_langs;
        public function __construct($active_languages)
        {
        }
        /**
         * Returns the html of a status icon.
         *
         * @param string $link Link the status icon is to point to.
         * @param string $text Hover text for the status icon.
         * @param string $img Name of the icon image file to be used.
         * @param string $css_class
         *
         * @return string
         */
        private function render_status_icon($link, $text, $css_class)
        {
        }
        private function get_action_icon($css_class, $label)
        {
        }
        /**
         * This function takes a post ID and a language as input.
         * It will always return the status icon,
         * of the version of the input post ID in the language given as the second parameter.
         *
         * @param int    $post_id  original post ID
         * @param string $lang     language of the translation
         *
         * @return string
         */
        public function get_status_html($post_id, $lang)
        {
        }
        /**
         * @param string $css_class
         * @param int    $post_id
         * @param string $lang
         * @param int    $trid
         *
         * @return string
         */
        private function map_old_icon_filter_to_css_class($css_class, $post_id, $lang, $trid)
        {
        }
        public function get_status_data($post_id, $lang)
        {
        }
        /**
         * @param      $post_id  int
         * @param bool $update   true if the translation in questions is in need of an update,
         *                       false otherwise.
         *
         * @return array
         */
        private function generate_edit_allowed_data($post_id, $update = \false)
        {
        }
        /**
         * Generates the data for displaying a link element pointing towards a translation, that the current user can
         * create.
         *
         * @param int    $trid
         * @param int    $original_id
         * @param string $lang_code
         * @param string $source_language
         *
         * @return array
         */
        private function generate_add_data($trid, $lang_code, $source_language, $original_id)
        {
        }
    }
    class WPML_Admin_Language_Switcher
    {
        private $flag_kses_tags = array('img' => array('src' => array(), 'class' => array(), 'height' => array(), 'width' => array()), 'i' => array('class' => array()));
        private $current_language;
        function render()
        {
        }
        public function get_languages_links()
        {
        }
        private function render_admin_bar_menu($languages_links, $current_language)
        {
        }
    }
    class WPMLCpi
    {
        // supported plugins
        static $wpml_cpi_plugins = array('wp-super-cache/wp-cache.php' => 'WP_CPI_WP_Super_Cache');
        private $plugin_cp_class;
        // plugin compatibility package class name
        private $settings;
        function __construct()
        {
        }
        function init()
        {
        }
        private function get_raw_post_data()
        {
        }
        function validate_settings()
        {
        }
        function save_settings()
        {
        }
        function ajx_calls($call, $data)
        {
        }
        function menu()
        {
        }
        function icl_save_settings_cb($settings)
        {
        }
        function call_cache_clear($do_clear = \false)
        {
        }
    }
    /**
     * WPML_BBPress_Filters class file.
     *
     * @package WPML\Core
     */
    /**
     * Class WPML_BBPress_Filters
     */
    class WPML_BBPress_Filters
    {
        /**
         * WPML_BBPress_API instance.
         *
         * @var WPML_BBPress_API
         */
        private $wpml_bbpress_api;
        /**
         * WPML_BBPress_Filters constructor.
         *
         * @param WPML_BBPress_API $wpml_bbpress_api WPML_BBPress_API instance.
         */
        public function __construct($wpml_bbpress_api)
        {
        }
        /**
         * Destruct instance.
         */
        public function __destruct()
        {
        }
        /**
         * Add hooks.
         */
        public function add_hooks()
        {
        }
        /**
         * Remove hooks.
         */
        public function remove_hooks()
        {
        }
        /**
         * Author link filter.
         *
         * @param string $link            Author link.
         * @param int    $author_id       Author id.
         * @param string $author_nicename Author nicename.
         *
         * @return mixed
         */
        public function author_link_filter($link, $author_id, $author_nicename)
        {
        }
    }
    class WPML_BBPress_API
    {
        public function bbp_get_user_profile_url($user_id = 0, $user_nicename = '')
        {
        }
    }
    /**
     * WP SEO by Yoast sitemap filter class
     *
     * @version 1.0.2
     * @deprecated version 4.3.0   use 'wp-seo-multilingual` plugin instead.
     */
    class WPML_WPSEO_XML_Sitemaps_Filter_Old
    {
        /** @var  SitePress $sitepress */
        protected $sitepress;
        /**
         * WPML_URL_Converter object.
         *
         * @var WPML_URL_Converter
         */
        private $wpml_url_converter;
        /**
         * @var WPML_Debug_BackTrace
         */
        private $back_trace;
        const FILTER_PREFIX = 'wpseo_sitemap_';
        const FILTER_SUFFIX = '_content';
        /**
         * WPSEO_XML_Sitemaps_Filter constructor.
         *
         * @param SitePress            $sitepress
         * @param stdClass             $wpml_url_converter
         * @param WPML_Debug_BackTrace $back_trace
         */
        public function __construct($sitepress, $wpml_url_converter, \WPML_Debug_BackTrace $back_trace = \null)
        {
        }
        /**
         * Initialize hooks.
         */
        public function init_hooks()
        {
        }
        /**
         * Delay these hooks until after 'init' so that custom post types are available.
         */
        public function init_hooks_when_custom_post_types_are_available()
        {
        }
        /**
         * Add home page urls for languages to sitemap.
         * Do this only if configuration language per domain option is not used.
         */
        public function add_languages_to_sitemap()
        {
        }
        /**
         * Update home_url for language per-domain configuration to return correct URL in sitemap.
         *
         * @param string $home_url
         * @param string $url
         * @param string $path
         * @param string $orig_scheme
         *
         * @return bool|mixed|string
         */
        public function get_home_url_filter($home_url, $url, $path, $orig_scheme)
        {
        }
        /**
         * Adds sitemap links in other languages.
         * Only if we have a different domain per language.
         */
        public function list_domains()
        {
        }
        /**
         * @return bool
         */
        public function is_per_domain()
        {
        }
        /**
         * @return bool
         */
        private function is_per_directory()
        {
        }
        /**
         * Disables caching of sitemaps in transients.
         *
         * @return bool
         */
        public function transient_cache_filter()
        {
        }
        /**
         * Removes auto-adjust-ids while building the sitemap.
         * This allows Yoast to load terms in all languages.
         *
         * @param string $type
         * @return string
         */
        public function wpseo_build_sitemap_post_type_filter($type)
        {
        }
        /**
         * Exclude posts under hidden language.
         *
         * @param  string   $url  Post URL.
         * @param  stdClass $post Object with some post information.
         *
         * @return string
         */
        public function exclude_hidden_language_posts($url, $post)
        {
        }
        /**
         * Convert URL to sitemap entry format.
         *
         * @param string $url URl to prepare for sitemap.
         *
         * @return string
         */
        public function sitemap_url_filter($url)
        {
        }
        /**
         * @param array $excluded_post_ids
         *
         * @return array
         */
        public function exclude_translations_of_static_pages($excluded_post_ids)
        {
        }
        /**
         * @param string $home_url
         * @param string $original_url
         *
         * @return string
         */
        public function maybe_return_original_url_in_get_home_url_filter($home_url, $original_url)
        {
        }
        /**
         * @return WPML_Debug_BackTrace
         */
        private function get_back_trace()
        {
        }
        /**
         * Figure out which sitemap we are working with by looking at the current filter.
         */
        private function get_sitemap_type()
        {
        }
        /**
         * @param string $lang_code
         *
         * @return bool|mixed|string
         */
        private function get_translated_home_url($lang_code)
        {
        }
        /**
         * @param string $lang_code
         *
         * @return false|string
         */
        private function get_translated_page_for_posts($lang_code)
        {
        }
    }
    /**
     * Class WPML_WPSEO_Filters_Old
     *
     * Compatibility class for WordPress SEO plugin
     *
     * @deprecated  version 4.3.0   use 'wp-seo-multilingual` plugin instead.
     */
    class WPML_WPSEO_Filters_Old
    {
        /** @var WPML_Canonicals $canonicals */
        private $canonicals;
        /** @var array */
        private $user_meta_fields = array('wpseo_title', 'wpseo_metadesc');
        /**
         * WPML_WPSEO_Filters_Old constructor.
         *
         * @param WPML_Canonicals $canonicals
         */
        public function __construct(\WPML_Canonicals $canonicals)
        {
        }
        public function init_hooks()
        {
        }
        /**
         * @param array $fields
         *
         * @return array
         */
        public function translatable_user_meta_fields_filter($fields)
        {
        }
        /**
         * @return array
         */
        public function get_user_meta_fields()
        {
        }
        /**
         * @link https://onthegosystems.myjetbrains.com/youtrack/issue/wpmlcore-2701
         */
        public function before_make_duplicate_action()
        {
        }
        /**
         * @link https://onthegosystems.myjetbrains.com/youtrack/issue/wpmlcore-3694
         *
         * @param string|bool $url
         *
         * @return string
         */
        public function canonical_filter($url)
        {
        }
        /**
         * Filter canonical url. If Yoast canonical is set, returns false, otherwise returns $should_translate.
         * False is the signal that Yoast canonical exists and we have to stop further processing of url.
         *
         * @link https://onthegosystems.myjetbrains.com/youtrack/issue/wpmlcore-5707
         *
         * @param bool              $should_translate Should translate flag.
         * @param WPML_Post_Element $post_element Post Element.
         *
         * @return bool
         */
        public function must_translate_canonical_url_filter($should_translate, $post_element)
        {
        }
        /**
         * Prev/next page general link filter.
         *
         * @param string $link Link to a prev/next page in archive.
         *
         * @return string
         */
        public function rel_link_filter($link)
        {
        }
    }
    /**
     * @deprecated version 4.3.0   use 'wp-seo-multilingual` plugin instead.
     */
    class WPML_WPSEO_Redirection_Old
    {
        const OPTION = 'wpseo-premium-redirects-base';
        /**
         * @return bool
         */
        function is_redirection()
        {
        }
        /**
         * @return mixed
         */
        private function get_all_redirections()
        {
        }
    }
    /**
     * @deprecated version 4.3.0   use 'wp-seo-multilingual` plugin instead.
     */
    class WPML_WPSEO_Metabox_Hooks_Old
    {
        /** @var WPML_Debug_BackTrace */
        private $backtrace;
        /** @var WPML_URL_Converter */
        private $url_converter;
        /** @var string */
        private $pagenow;
        /**
         * @param WPML_Debug_BackTrace $backtrace
         * @param WPML_URL_Converter   $url_converter
         * @param string               $pagenow
         */
        public function __construct(\WPML_Debug_BackTrace $backtrace, \WPML_URL_Converter $url_converter, $pagenow)
        {
        }
        /**
         * Initialize hooks.
         */
        public function add_hooks()
        {
        }
        /**
         * This will follow the way WP SEO deals with sample URL in WPSEO_Post_Metabox_Formatter::base_url_for_js
         *
         * @link https://onthegosystems.myjetbrains.com/youtrack/issue/wpmlcore-4690
         *
         * @param array $permalink
         *
         * @return array
         */
        public function force_permalink_structure_to_postname($permalink)
        {
        }
        /**
         * @param string $url
         *
         * @return bool|mixed|string
         */
        public function convert_home_url_in_metabox_formatter($url)
        {
        }
    }
    class WPML_Save_Themes_Plugins_Localization_Options
    {
        /** @var SitePress */
        private $sitepress;
        /**
         * WPML_Save_Themes_Plugins_Localization_Options constructor.
         *
         * @param SitePress $sitepress
         */
        public function __construct(\SitePress $sitepress)
        {
        }
        /** @param array $settings */
        public function save_settings($settings)
        {
        }
        /** @return array */
        private function get_settings()
        {
        }
    }
    class WPML_Theme_Plugin_Localization_UI_Hooks
    {
        /** @var WPML_Theme_Plugin_Localization_UI */
        private $localization_ui;
        /** @var WPML_Theme_Plugin_Localization_Options_UI */
        private $options_ui;
        /**
         * WPML_Theme_Plugin_Localization_UI_Hooks constructor.
         *
         * @param WPML_Theme_Plugin_Localization_UI $localization_ui
         * @param WPML_Theme_Plugin_Localization_Options_UI $options_ui
         */
        public function __construct(\WPML_Theme_Plugin_Localization_UI $localization_ui, \WPML_Theme_Plugin_Localization_Options_UI $options_ui)
        {
        }
        public function add_hooks()
        {
        }
        public function enqueue_styles()
        {
        }
        public function render_options_ui()
        {
        }
    }
    class WPML_Theme_Plugin_Localization_Options_Ajax
    {
        const NONCE_LOCALIZATION_OPTIONS = 'wpml-localization-options-nonce';
        /** @var WPML_Save_Themes_Plugins_Localization_Options */
        private $save_localization_options;
        /**
         * WPML_Themes_Plugins_Localization_Options_Ajax constructor.
         *
         * @param WPML_Save_Themes_Plugins_Localization_Options $save_localization_options
         */
        public function __construct(\WPML_Save_Themes_Plugins_Localization_Options $save_localization_options)
        {
        }
        public function add_hooks()
        {
        }
        public function update_localization_options()
        {
        }
        /** @return bool */
        private function is_valid_request()
        {
        }
    }
    class WPML_Theme_Plugin_Localization_UI
    {
        const TEMPLATE_PATH = '/templates/theme-plugin-localization/';
        /**
         * @return IWPML_Template_Service
         */
        private function get_template_service()
        {
        }
        /**
         * @param IWPML_Theme_Plugin_Localization_UI_Strategy $localization_strategy
         */
        public function render(\IWPML_Theme_Plugin_Localization_UI_Strategy $localization_strategy)
        {
        }
    }
    class WPML_Themes_Plugin_Localization_UI_Hooks_Factory implements \IWPML_Backend_Action_Loader, \IWPML_Deferred_Action_Loader
    {
        /** @return WPML_Theme_Plugin_Localization_UI_Hooks */
        public function create()
        {
        }
        /** @return string */
        public function get_load_action()
        {
        }
    }
    class WPML_Theme_Plugin_Localization_Options_Ajax_Factory implements \IWPML_AJAX_Action_Loader
    {
        public function create()
        {
        }
    }
    interface IWPML_Theme_Plugin_Localization_UI_Strategy
    {
        public function get_model();
        public function get_template();
    }
    class WPML_Theme_Plugin_Localization_Options_UI implements \IWPML_Theme_Plugin_Localization_UI_Strategy
    {
        /** @var SitePress */
        private $sitepress;
        public function __construct(\SitePress $sitepress)
        {
        }
        /** @return array */
        public function get_model()
        {
        }
        /** @return string */
        public function get_template()
        {
        }
    }
    class WPML_TM_User
    {
        /** @var  TranslationManagement $tm_instance */
        protected $tm_instance;
        /**
         * WPML_Custom_Field_Setting_Factory constructor.
         *
         * @param TranslationManagement $tm_instance
         */
        public function __construct(\TranslationManagement $tm_instance)
        {
        }
    }
    class WPML_TM_Settings_Post_Process extends \WPML_TM_User
    {
        /**
         * Saves TM settings to the database in case they have changed after reading a config file.
         */
        public function run()
        {
        }
        private function prev_index($index)
        {
        }
    }
    class WPML_Post_Custom_Field_Setting_Keys
    {
        /**
         * @return string
         */
        public static function get_state_array_setting_index()
        {
        }
        /**
         * @return string
         */
        public static function get_unlocked_setting_index()
        {
        }
        /**
         * @return string
         */
        public static function get_setting_prefix()
        {
        }
        /**
         * @return  string[]
         */
        public static function get_excluded_keys()
        {
        }
    }
    class WPML_Custom_Field_XML_Settings_Import
    {
        /** @var  WPML_Custom_Field_Setting_Factory $setting_factory */
        private $setting_factory;
        /** @var  array $settings_array */
        private $settings_array;
        /**
         * WPML_Custom_Field_XML_Settings_Import constructor.
         *
         * @param WPML_Custom_Field_Setting_Factory $setting_factory
         * @param array                             $settings_array
         */
        public function __construct($setting_factory, $settings_array)
        {
        }
        /**
         * Runs the actual import of the xml
         */
        public function run()
        {
        }
        private function import_action($c, $setting)
        {
        }
        private function import_editor_settings($c, $setting)
        {
        }
        private function import_custom_field_texts()
        {
        }
        private function get_custom_field_texts_keys($data)
        {
        }
    }
    class WPML_Custom_Field_Setting_Factory extends \WPML_TM_User
    {
        public $show_system_fields = \false;
        /**
         * @param  string $meta_key
         *
         * @return WPML_Post_Custom_Field_Setting
         */
        public function post_meta_setting($meta_key)
        {
        }
        /**
         * @param  string $meta_key
         *
         * @return WPML_Term_Custom_Field_Setting
         */
        public function term_meta_setting($meta_key)
        {
        }
        /**
         * Returns all custom field names for which a site has either a setting
         * in the TM settings or that can be found on any post.
         *
         * @return string[]
         */
        public function get_post_meta_keys()
        {
        }
        /**
         * Returns all term custom field names for which a site has either a setting
         * in the TM settings or that can be found on any term.
         *
         * @return string[]
         */
        public function get_term_meta_keys()
        {
        }
        private function filter_custom_field_key($custom_fields_key)
        {
        }
        /**
         * @param array $keys
         *
         * @return array
         */
        public function filter_custom_field_keys($keys)
        {
        }
    }
    class WPML_TM_Settings_Update extends \WPML_SP_User
    {
        private $index_singular;
        private $index_ro;
        private $index_sync;
        private $index_plural;
        private $index_unlocked;
        /** @var  TranslationManagement $tm_instance */
        private $tm_instance;
        /** @var WPML_Settings_Helper $settings_helper */
        private $settings_helper;
        /**
         * @param string                $index_singular
         * @param string                $index_plural
         * @param TranslationManagement $tm_instance
         * @param SitePress             $sitepress
         * @param WPML_Settings_Helper  $settings_helper
         */
        public function __construct($index_singular, $index_plural, &$tm_instance, &$sitepress, &$settings_helper)
        {
        }
        /**
         * @param array $config
         */
        public function update_from_config(array $config)
        {
        }
        private function sync_settings(array $config)
        {
        }
        /**
         * @param int $new_sync 0, 1 or 2
         * @param int $old_sync 0, 1 or 2
         *
         * @return bool
         */
        private function is_making_type_translatable($new_sync, $old_sync)
        {
        }
        private function update_tm_settings(array $config)
        {
        }
        private function is_unlocked_type($type, $unlocked_options)
        {
        }
    }
    class WPML_Element_Sync_Settings_Factory
    {
        const POST = 'post';
        const TAX = 'taxonomy';
        const KEY_POST_SYNC_OPTION = 'custom_posts_sync_option';
        const KEY_TAX_SYNC_OPTION = 'taxonomies_sync_option';
        /**
         * @param string $type
         *
         * @return WPML_Element_Sync_Settings
         * @throws Exception
         */
        public static function create($type)
        {
        }
        public static function createPost()
        {
        }
        public static function createTax()
        {
        }
    }
    class WPML_Custom_Field_Setting_Query
    {
        /** @var wpdb $wpdb */
        private $wpdb;
        /** @var array $excluded_keys */
        private $excluded_keys;
        /** @var string $table */
        private $table;
        /**
         * @param wpdb   $wpdb
         * @param array  $excluded_keys
         * @param string $table
         */
        public function __construct(\wpdb $wpdb, array $excluded_keys, $table)
        {
        }
        /**
         * @param array $args
         *
         * @return array
         */
        public function get(array $args)
        {
        }
        /**
         * @return int
         */
        public function get_total_rows()
        {
        }
        /**
         * @return string
         */
        private function add_AND_excluded_fields_condition()
        {
        }
        /**
         * @param string $search
         *
         * @return string
         */
        private function add_AND_search_condition($search)
        {
        }
        /**
         * @param bool   $hide_system_fields
         *
         * @return string
         */
        private function add_AND_system_fields_condition($hide_system_fields)
        {
        }
        /**
         * @param array $args
         *
         * @return string
         */
        private function get_limit_offset(array $args)
        {
        }
    }
    /**
     * Created by PhpStorm.
     * User: bruce
     * Date: 5/10/17
     * Time: 10:23 PM
     */
    class WPML_Verify_SitePress_Settings
    {
        /** @var WPML_WP_API $wp_api */
        private $wp_api;
        public function __construct(\WPML_WP_API $wp_api)
        {
        }
        /**
         * @param array $settings
         *
         * @return array
         */
        public function verify($settings)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Setup_Compatibility
    {
        protected function get_content()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Settings_Filters
    {
        /**
         * @param array $types
         * @param array $read_only_cpt_settings
         * @param array $cpt_unlocked_options
         *
         * @return array
         * @see \WPML_Config::maybe_add_filter
         *
         */
        function get_translatable_documents(array $types, array $read_only_cpt_settings, array $cpt_unlocked_options)
        {
        }
        /**
         * @param array  $cpt_unlocked_options
         * @param string $cp
         *
         * @return bool
         */
        private function is_cpt_unlocked(array $cpt_unlocked_options, $cp)
        {
        }
    }
    class WPML_Term_Custom_Field_Setting_Keys
    {
        /**
         * @return string
         */
        public static function get_state_array_setting_index()
        {
        }
        /**
         * @return string
         */
        public static function get_unlocked_setting_index()
        {
        }
        /**
         * @return string
         */
        public static function get_setting_prefix()
        {
        }
        /**
         * @return  string[]
         */
        public static function get_excluded_keys()
        {
        }
    }
    abstract class WPML_Custom_Field_Setting extends \WPML_TM_User
    {
        /** @var  string $index */
        private $index;
        /**
         * WPML_Custom_Field_Setting constructor.
         *
         * @param TranslationManagement $tm_instance
         * @param string                $index
         */
        public function __construct(&$tm_instance, $index)
        {
        }
        /**
         * @return bool true if the custom field setting is given by a setting in
         *              a wpml-config.xml
         */
        public function is_read_only()
        {
        }
        /**
         * @return bool
         */
        public function is_unlocked()
        {
        }
        /**
         * @return bool
         */
        public function excluded()
        {
        }
        public function status()
        {
        }
        public function make_read_only()
        {
        }
        public function set_to_copy()
        {
        }
        public function set_to_copy_once()
        {
        }
        public function set_to_translatable()
        {
        }
        public function set_to_nothing()
        {
        }
        public function set_editor_style($style)
        {
        }
        public function get_editor_style()
        {
        }
        public function set_editor_label($label)
        {
        }
        public function get_editor_label()
        {
        }
        public function set_editor_group($group)
        {
        }
        public function get_editor_group()
        {
        }
        public function set_translate_link_target($state, $sub_fields)
        {
        }
        public function is_translate_link_target()
        {
        }
        public function get_translate_link_target_sub_fields()
        {
        }
        public function set_convert_to_sticky($state)
        {
        }
        public function is_convert_to_sticky()
        {
        }
        public function set_encoding($encoding)
        {
        }
        public function get_encoding()
        {
        }
        /**
         * @param array $whitelist
         */
        public function set_attributes_whitelist($whitelist)
        {
        }
        public function get_attributes_whitelist()
        {
        }
        private function set_state($state)
        {
        }
        /**
         * @return string
         */
        private function get_array_setting_index($index)
        {
        }
        /**
         * @return string
         */
        protected abstract function get_state_array_setting_index();
        protected abstract function get_unlocked_setting_index();
        /**
         * @return  string[]
         */
        protected abstract function get_excluded_keys();
        /**
         * @return string
         */
        protected abstract function get_setting_prefix();
    }
    class WPML_Post_Custom_Field_Setting extends \WPML_Custom_Field_Setting
    {
        /**
         * @return string
         */
        protected function get_state_array_setting_index()
        {
        }
        /**
         * @return string
         */
        protected function get_unlocked_setting_index()
        {
        }
        /**
         * @return string
         */
        protected function get_setting_prefix()
        {
        }
        /**
         * @return  string[]
         */
        protected function get_excluded_keys()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Setup_Wizard_Progress
    {
        private $items;
        private $current_step;
        /**
         * WPML_Setup_Wizard_Progress constructor.
         *
         * @param int   $current_step
         * @param array $items
         */
        public function __construct($current_step, array $items)
        {
        }
        public function render()
        {
        }
        private function get_step_classes($step)
        {
        }
    }
    class WPML_Element_Sync_Settings
    {
        /** @var array $settings */
        private $settings;
        public function __construct(array $settings)
        {
        }
        /**
         * @param string $type
         *
         * @return bool
         */
        public function is_sync($type)
        {
        }
    }
    class WPML_Custom_Field_Setting_Query_Factory
    {
        const TYPE_POSTMETA = 'postmeta';
        const TYPE_TERMMETA = 'termmeta';
        public function create($type)
        {
        }
        /**
         * @return array
         */
        private function get_excluded_post_meta_keys()
        {
        }
        /**
         * @return array
         */
        private function get_excluded_term_meta_keys()
        {
        }
        /**
         * @param array  $hardcoded_excluded_keys
         * @param string $settings_prefix
         * @param string $settings_state_index
         * @param string $settings_unlock_index
         *
         * @return array
         */
        private function get_excluded_meta_keys(array $hardcoded_excluded_keys, $settings_prefix, $settings_state_index, $settings_unlock_index)
        {
        }
        /**
         * @param TranslationManagement $tm_settings
         * @param string                $index
         *
         * @return array
         */
        private function get_not_ignore_keys(\TranslationManagement $tm_settings, $index)
        {
        }
    }
    class WPML_Page_Builder_Settings
    {
        const OPTION_KEY = 'wpml_page_builders_options';
        private $settings;
        /** @return bool */
        public function is_raw_html_translatable()
        {
        }
        /** @param bool $is_enabled */
        public function set_raw_html_translatable($is_enabled)
        {
        }
        /**
         * @param string $key
         * @param mixed  $value
         */
        private function set_setting($key, $value)
        {
        }
        /**
         * @param string $key
         * @param mixed $default
         *
         * @return mixed
         */
        private function get_setting($key, $default = \null)
        {
        }
        public function save()
        {
        }
    }
    class WPML_Term_Custom_Field_Setting extends \WPML_Custom_Field_Setting
    {
        /**
         * @return string
         */
        protected function get_state_array_setting_index()
        {
        }
        /**
         * @return string
         */
        protected function get_unlocked_setting_index()
        {
        }
        /**
         * @return string
         */
        protected function get_setting_prefix()
        {
        }
        /**
         * @return  string[]
         */
        protected function get_excluded_keys()
        {
        }
    }
}
namespace WPML\WP {
    class OptionManager implements \IWPML_Backend_Action
    {
        private $group_keys_key = 'WPML_Group_Keys';
        public function add_hooks()
        {
        }
        /**
         * Get a WordPress option that is stored by group.
         *
         * @param string $group
         * @param string $key
         * @param mixed $default
         *
         * @return mixed
         */
        public function get($group, $key, $default = false)
        {
        }
        /**
         * Save a WordPress option that is stored by group
         * The value is then stored by key in the group.
         *
         * eg. set( 'TM-wizard', 'complete', 'true' ) will create or add to the option WPML(TM-wizard)
         * The dat in the option will then be an array of items stored by key.
         *
         * @param string $group
         * @param string $key
         * @param mixed $value
         * @param bool $autoload
         */
        public function set($group, $key, $value, $autoload = true)
        {
        }
        /**
         * @param string $group
         *
         * @return string
         */
        private function get_key($group)
        {
        }
        /**
         * @param $group_key
         */
        private function store_group_key($group_key)
        {
        }
        /**
         * Returns all the options that need to be deleted on WPML reset.
         *
         * @param array $options
         *
         * @return array
         */
        public function reset_options($options)
        {
        }
    }
}
namespace {
    /**
     * Class WPML_Multilingual_Options
     */
    class WPML_Multilingual_Options
    {
        private $array_helper;
        private $registered_options = array();
        private $sitepress;
        private $utils;
        /**
         * WPML_Multilingual_Options constructor.
         *
         * @param SitePress                              $sitepress
         * @param WPML_Multilingual_Options_Array_Helper $array_helper
         * @param WPML_Multilingual_Options_Utils        $utils
         */
        public function __construct(\SitePress $sitepress, \WPML_Multilingual_Options_Array_Helper $array_helper, \WPML_Multilingual_Options_Utils $utils)
        {
        }
        /**
         * @param string $new_code         New WPML default language code
         * @param string $previous_default Previous WPML default language code
         */
        public function default_language_changed_action($new_code, $previous_default)
        {
        }
        /**
         * @param string $option_name
         */
        public function multilingual_options_action($option_name)
        {
        }
        public function init_hooks()
        {
        }
        /**
         * @param mixed  $value
         * @param string $option_name
         *
         * @return mixed
         */
        public function pre_option_filter($value, $option_name)
        {
        }
        /**
         * @param string $option_name
         * @param string $language
         * @param mixed  $value
         *
         * @return bool
         */
        private function update_cache($option_name, $language, $value)
        {
        }
        /**
         * @param $new_value
         * @param $old_value
         * @param $option_name
         *
         * @return array
         */
        public function pre_update_option_filter($new_value, $old_value, $option_name)
        {
        }
        /**
         * @param string $option_name
         * @param string $language
         *
         * @return bool
         */
        private function invalidate_cache($option_name, $language)
        {
        }
        /**
         * @param array $target
         * @param array $source
         *
         * @return array
         */
        private function merge($target, $source)
        {
        }
    }
    /**
     * Class WPML_Multilingual_Options_Array_Helper
     */
    class WPML_Multilingual_Options_Array_Helper
    {
        /**
         * @param array $value1
         * @param array $value2
         *
         * @return array
         */
        public function array_diff_recursive(array $value1, array $value2)
        {
        }
        /**
         * @param array $target
         * @param array $source
         *
         * @return array
         */
        public function recursive_merge(array $target, array $source)
        {
        }
        /**
         * @param array  $haystack
         * @param mixed  $needle
         * @param string $needle_key
         *
         * @return bool
         */
        private function in_array(array $haystack, $needle, $needle_key)
        {
        }
    }
    /**
     * Class WPML_Multilingual_Options_Utils
     */
    class WPML_Multilingual_Options_Utils
    {
        /** @var  wpdb */
        private $wpdb;
        /**
         * WPML_Multilingual_Options_Utils constructor.
         *
         * @param wpdb $wpdb
         */
        public function __construct(\wpdb $wpdb)
        {
        }
        /**
         * @param string $option_name
         * @param mixed  $default
         *
         * @return mixed|null
         */
        public function get_option_without_filtering($option_name, $default = \null)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    abstract class WPML_WP_Option
    {
        public abstract function get_key();
        public abstract function get_default();
        public function get()
        {
        }
        public function set($value, $autoload = \true)
        {
        }
    }
    class WPML_WP_Comments
    {
        const LANG_CODE_FIELD = 'wpml_language_code';
        /**
         * @var SitePress
         */
        private $sitepress;
        /**
         * WPML_WP_Comments constructor.
         *
         * @param SitePress $sitepress
         */
        public function __construct(\SitePress $sitepress)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @return mixed
         */
        public function add_wpml_language_field($comment_field)
        {
        }
    }
}
namespace WPML\SuperGlobals {
    class Server
    {
        public static function getServerName()
        {
        }
    }
}
namespace {
    // adapted from http://wordpress.org/extend/plugins/black-studio-wpml-javascript-redirect/
    // thanks to Blank Studio - http://www.blackstudio.it/
    class WPML_Browser_Redirect
    {
        /**
         * @var SitePress
         */
        private $sitepress;
        public function __construct($sitepress)
        {
        }
        public function init_hooks()
        {
        }
        public function init()
        {
        }
        public function enqueue_scripts()
        {
        }
    }
}
namespace WPML\Upgrade {
    class CommandsStatus
    {
        const OPTION_KEY = 'wpml_update_statuses';
        /**
         * @param string $className
         *
         * @return bool
         */
        public function hasBeenExecuted($className)
        {
        }
        /**
         * @param string $class
         * @param bool   $flag
         */
        public function markAsExecuted($className, $flag = true)
        {
        }
        /**
         * @param string $className
         *
         * @return string
         */
        private function get_command_id($className)
        {
        }
        private function set_update_status($id, $value)
        {
        }
        private function get_update_option_value($id)
        {
        }
    }
}
namespace {
    class WPML_Upgrade
    {
        const SCOPE_ADMIN = 'admin';
        const SCOPE_AJAX = 'ajax';
        const SCOPE_FRONT_END = 'front-end';
        /** @var array */
        private $commands;
        const UPDATE_STATUSES_KEY = 'wpml_update_statuses';
        /** @var SitePress */
        private $sitepress;
        /** @var WPML_Upgrade_Command_Factory */
        private $command_factory;
        /** @var CommandsStatus */
        private $command_status;
        /** @var bool $upgrade_in_progress */
        private $upgrade_in_progress;
        /**
         * WPML_Upgrade constructor.
         *
         * @param array                        $commands
         * @param SitePress                    $sitepress
         * @param WPML_Upgrade_Command_Factory $command_factory
         * @param CommandsStatus               $command_status
         */
        public function __construct(array $commands, \SitePress $sitepress, \WPML_Upgrade_Command_Factory $command_factory, \WPML\Upgrade\CommandsStatus $command_status = \null)
        {
        }
        /**
         * @param array $commands
         */
        public function add_commands(array $commands)
        {
        }
        public function run()
        {
        }
        private function get_commands_by_scope($scope)
        {
        }
        private function get_admin_commands()
        {
        }
        private function get_ajax_commands()
        {
        }
        private function get_front_end_commands()
        {
        }
        private function run_admin()
        {
        }
        private function run_ajax()
        {
        }
        private function run_front_end()
        {
        }
        private function run_commands($commands, $default)
        {
        }
        private function run_command(\WPML_Upgrade_Command_Definition $command_definition, $default)
        {
        }
        /** @noinspection PhpUnusedPrivateMethodInspection
         * @param IWPML_Upgrade_Command $upgrade
         *
         * @return null
         */
        private function maybe_run_admin(\IWPML_Upgrade_Command $upgrade)
        {
        }
        /** @noinspection PhpUnusedPrivateMethodInspection
         * @param IWPML_Upgrade_Command $upgrade
         *
         * @return null
         */
        private function maybe_run_front_end(\IWPML_Upgrade_Command $upgrade)
        {
        }
        /** @noinspection PhpUnusedPrivateMethodInspection
         * @param IWPML_Upgrade_Command $upgrade
         *
         * @return null
         */
        private function maybe_run_ajax(\IWPML_Upgrade_Command $upgrade)
        {
        }
        private function nonce_ok($class)
        {
        }
        /**
         * @param IWPML_Upgrade_Command $class
         */
        public function mark_command_as_executed(\IWPML_Upgrade_Command $class)
        {
        }
        /**
         * @param string $class_name
         *
         * @return string
         */
        private function get_command_id($class_name)
        {
        }
        private function set_upgrade_in_progress()
        {
        }
        private function set_upgrade_completed()
        {
        }
    }
    class WPML_Upgrade_Loader_Factory implements \IWPML_Backend_Action_Loader
    {
        public function create()
        {
        }
    }
    interface IWPML_Upgrade_Command
    {
        public function run_admin();
        public function run_ajax();
        public function run_frontend();
        public function get_results();
    }
    class WPML_Upgrade_Schema
    {
        /** @var wpdb $wpdb */
        private $wpdb;
        public function __construct(\wpdb $wpdb)
        {
        }
        /**
         * @param string $table_name
         *
         * @return bool
         */
        public function does_table_exist($table_name)
        {
        }
        /**
         * @param string $table_name
         * @param string $column_name
         *
         * @return bool
         */
        public function does_column_exist($table_name, $column_name)
        {
        }
        /**
         * @param string $table_name
         * @param string $index_name
         *
         * @return bool
         */
        public function does_index_exist($table_name, $index_name)
        {
        }
        /**
         * @param string $table_name
         * @param string $key_name
         *
         * @return bool
         */
        public function does_key_exist($table_name, $key_name)
        {
        }
        /**
         * @param string $table_name
         * @param string $column_name
         * @param string $attribute_string
         *
         * @return false|int
         */
        public function add_column($table_name, $column_name, $attribute_string)
        {
        }
        /**
         * @param string $table_name
         * @param string $column_name
         * @param string $attribute_string
         *
         * @return false|int
         */
        public function modify_column($table_name, $column_name, $attribute_string)
        {
        }
        /**
         * @param string $table_name
         * @param string $index_name
         * @param string $attribute_string
         *
         * @return false|int
         */
        public function add_index($table_name, $index_name, $attribute_string)
        {
        }
        /**
         * @param string $table_name
         * @param array $key_columns
         *
         * @return false|int
         */
        public function add_primary_key($table_name, $key_columns)
        {
        }
        /**
         * @param string $table_name
         * @param string $index_name
         *
         * @return false|int
         */
        public function drop_index($table_name, $index_name)
        {
        }
        /**
         * @param string $table_name
         * @param string $column_name
         *
         * @return null|string
         */
        public function get_column_collation($table_name, $column_name)
        {
        }
        /**
         * @param string $table_name
         *
         * @return string|null
         */
        public function get_table_collation($table_name)
        {
        }
        /**
         * We try to get the collation from the posts table first.
         *
         * @return string|null
         */
        public function get_default_collate()
        {
        }
        /**
         * @param string $table_name
         *
         * @return string|null
         */
        public function get_table_charset($table_name)
        {
        }
        /**
         * We try to get the charset from the posts table first.
         *
         * @return string|null
         */
        public function get_default_charset()
        {
        }
        /**
         * @return wpdb
         */
        public function get_wpdb()
        {
        }
    }
    abstract class WPML_Upgrade_Run_All implements \IWPML_Upgrade_Command
    {
        /** @var bool $result */
        protected $result = \true;
        protected abstract function run();
        public function run_admin()
        {
        }
        public function run_ajax()
        {
        }
        public function run_frontend()
        {
        }
        /** @return bool */
        public function get_results()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Upgrade_Localization_Files implements \IWPML_Upgrade_Command
    {
        private $download_localization;
        private $results = \null;
        /** @var SitePress */
        private $sitepress;
        /**
         * WPML_Upgrade_Localization_Files constructor.
         *
         * @param array $args
         */
        public function __construct(array $args)
        {
        }
        public function run_admin()
        {
        }
        public function run_ajax()
        {
        }
        public function run_frontend()
        {
        }
        public function get_command_id()
        {
        }
        public function get_results()
        {
        }
    }
    /**
     * Class WPML_Upgrade_Loader
     */
    class WPML_Upgrade_Loader implements \IWPML_Action
    {
        const TRANSIENT_UPGRADE_IN_PROGRESS = 'wpml_core_update_in_progress';
        /**
         * SitePress instance.
         *
         * @var SitePress
         */
        private $sitepress;
        /**
         * Upgrade Schema instance.
         *
         * @var WPML_Upgrade_Schema
         */
        private $upgrade_schema;
        /**
         * Settings Helper instance.
         *
         * @var WPML_Settings_Helper
         */
        private $settings;
        /**
         * Upgrade Command Factory instance.
         *
         * @var WPML_Upgrade_Command_Factory
         */
        private $factory;
        /**
         * Notices instance.
         *
         * @var WPML_Notices
         */
        private $notices;
        /**
         * WPML_Upgrade_Loader constructor.
         *
         * @param SitePress                    $sitepress      SitePress instance.
         * @param WPML_Upgrade_Schema          $upgrade_schema Upgrade schema instance.
         * @param WPML_Settings_Helper         $settings       Settings Helper instance.
         * @param WPML_Notices                 $wpml_notices   Notices instance.
         * @param WPML_Upgrade_Command_Factory $factory        Upgrade Command Factory instance.
         */
        public function __construct(\SitePress $sitepress, \WPML_Upgrade_Schema $upgrade_schema, \WPML_Settings_Helper $settings, \WPML_Notices $wpml_notices, \WPML_Upgrade_Command_Factory $factory)
        {
        }
        /**
         * Add hooks.
         */
        public function add_hooks()
        {
        }
        /**
         * Upgrade WPML plugin.
         */
        public function wpml_upgrade()
        {
        }
    }
    class WPML_Upgrade_Media_Without_Language extends \WPML_Upgrade_Run_All
    {
        /** @var wpdb */
        private $wpdb;
        /** @var string */
        private $default_language;
        public function __construct(array $args)
        {
        }
        /** @return bool */
        protected function run()
        {
        }
    }
    class WPML_Upgrade_Element_Type_Length_And_Collation implements \IWPML_Upgrade_Command
    {
        /** @var bool $result */
        private $result = \true;
        /** @var WPML_Upgrade_Schema */
        private $upgrade_schema;
        public function __construct(array $args)
        {
        }
        /** @return bool */
        private function run()
        {
        }
        private function add_collation_from_post_type($element_type_attr)
        {
        }
        public function run_admin()
        {
        }
        public function run_ajax()
        {
        }
        public function run_frontend()
        {
        }
        /** @return bool */
        public function get_results()
        {
        }
    }
    /**
     * Abstract class to upgrade a table by adding a column to it.
     *
     * @package WPML
     */
    /**
     * Class WPML_Upgrade_Add_Column_To_Table
     */
    abstract class WPML_Upgrade_Add_Column_To_Table implements \IWPML_Upgrade_Command
    {
        /**
         * Get table name.
         *
         * @return string
         */
        protected abstract function get_table();
        /**
         * Get column name.
         *
         * @return string
         */
        protected abstract function get_column();
        /**
         * Get column definition.
         *
         * @return string
         */
        protected abstract function get_column_definition();
        /**
         * Upgrade schema.
         *
         * @var WPML_Upgrade_Schema
         */
        private $upgrade_schema;
        /**
         * WPML_Upgrade_Add_Column_To_Table constructor.
         *
         * @param array $args Arguments.
         */
        public function __construct(array $args)
        {
        }
        /**
         * Run the table upgrade.
         *
         * @return bool
         */
        private function run()
        {
        }
        /**
         * Run in admin.
         *
         * @return bool
         */
        public function run_admin()
        {
        }
        /**
         * Run in ajax.
         *
         * @return bool
         */
        public function run_ajax()
        {
        }
        /**
         * Run in frontend.
         *
         * @return bool
         */
        public function run_frontend()
        {
        }
        /**
         * Get upgrade results.
         *
         * @return bool
         */
        public function get_results()
        {
        }
    }
    /**
     * Upgrade 'icl_translate' table by adding 'field_wrap_tag' column.
     *
     * @package WPML
     */
    /**
     * Class WPML_Upgrade_Add_Wrap_Column_To_Translate
     */
    class WPML_Upgrade_Add_Wrap_Column_To_Translate extends \WPML_Upgrade_Add_Column_To_Table
    {
        /**
         * Get table name.
         *
         * @return string
         */
        protected function get_table()
        {
        }
        /**
         * Get column name.
         *
         * @return string
         */
        protected function get_column()
        {
        }
        /**
         * Get column definition.
         *
         * @return string
         */
        protected function get_column_definition()
        {
        }
    }
    /**
     * Upgrades the former option to the new one.
     */
    class WPML_Upgrade_WPML_Site_ID implements \IWPML_Upgrade_Command
    {
        /**
         * Runs the upgrade process.
         *
         * @return bool
         */
        public function run()
        {
        }
        /**
         * Checks has the old option.
         *
         * @return bool
         */
        protected function old_option_exists()
        {
        }
        /**
         * Runs in admin pages.
         *
         * @return bool
         */
        public function run_admin()
        {
        }
        /**
         * Unused.
         *
         * @return null
         */
        public function run_ajax()
        {
        }
        /**
         * Unused.
         *
         * @return null
         */
        public function run_frontend()
        {
        }
        /**
         * Unused.
         *
         * @return null
         */
        public function get_results()
        {
        }
    }
}
namespace WPML\Upgrade\Commands {
    /**
     * Class Add_Index_To_Table
     */
    abstract class AddIndexToTable extends \WPML_Upgrade_Run_All
    {
        /**
         * Get table name.
         *
         * @return string
         */
        protected abstract function get_table();
        /**
         * Get index name.
         *
         * @return string
         */
        protected abstract function get_index();
        /**
         * Get index definition.
         *
         * @return string
         */
        protected abstract function get_index_definition();
        /**
         * Upgrade schema.
         *
         * @var \WPML_Upgrade_Schema
         */
        private $upgrade_schema;
        /**
         * Add_Index_To_Table constructor.
         *
         * @param array $args
         */
        public function __construct(array $args)
        {
        }
        /**
         * Run the table upgrade.
         *
         * @return bool
         */
        protected function run()
        {
        }
    }
    class AddContextIndexToStrings extends \WPML\Upgrade\Commands\AddIndexToTable
    {
        protected function get_table()
        {
        }
        protected function get_index()
        {
        }
        protected function get_index_definition()
        {
        }
    }
}
namespace {
    /**
     * Upgrade 'icl_strings' table by adding 'wrap' column.
     *
     * @package WPML
     */
    /**
     * Class WPML_Upgrade_Add_Wrap_Column_To_Strings
     */
    class WPML_Upgrade_Add_Wrap_Column_To_Strings extends \WPML_Upgrade_Add_Column_To_Table
    {
        /**
         * Get table name.
         *
         * @return string
         */
        protected function get_table()
        {
        }
        /**
         * Get column name.
         *
         * @return string
         */
        protected function get_column()
        {
        }
        /**
         * Get column definition.
         *
         * @return string
         */
        protected function get_column_definition()
        {
        }
    }
    /**
     * Some sites were not properly upgraded in 4.2.0.
     * In that case the old option was not deleted
     * and new site IDs were wrongly created.
     */
    class WPML_Upgrade_WPML_Site_ID_Remaining implements \IWPML_Upgrade_Command
    {
        /**
         * @var string
         *
         * @see WPML_TM_ATE::SITE_ID_SCOPE
         */
        const SCOPE_ATE = 'ate';
        /**
         * @return bool
         */
        public function run()
        {
        }
        /**
         * @return bool
         */
        protected function old_and_new_options_exist()
        {
        }
        /**
         * @param string $key
         *
         * @return bool
         */
        private function option_exists($key)
        {
        }
        /**
         * Runs in admin pages.
         *
         * @return bool
         */
        public function run_admin()
        {
        }
        /**
         * Unused.
         *
         * @return null
         */
        public function run_ajax()
        {
        }
        /**
         * Unused.
         *
         * @return null
         */
        public function run_frontend()
        {
        }
        /**
         * Unused.
         *
         * @return null
         */
        public function get_results()
        {
        }
    }
}
namespace WPML\Upgrade\Commands {
    abstract class DropIndexFromTable extends \WPML_Upgrade_Run_All
    {
        /**
         * @return string
         */
        protected abstract function get_table();
        /**
         * @return string
         */
        protected abstract function get_index();
        /**
         * @var \WPML_Upgrade_Schema
         */
        private $upgrade_schema;
        /**
         * @param array $args
         */
        public function __construct(array $args)
        {
        }
        /**
         * @return bool
         */
        protected function run()
        {
        }
    }
    class DropCodeLocaleIndexFromLocaleMap extends \WPML\Upgrade\Commands\DropIndexFromTable
    {
        protected function get_table()
        {
        }
        protected function get_index()
        {
        }
    }
}
namespace {
    /**
     * Upgrade 'icl_strings' table by adding 'location' column.
     *
     * @package WPML
     */
    /**
     * Class WPML_Upgrade_Add_Location_Column_To_Strings
     */
    class WPML_Upgrade_Add_Location_Column_To_Strings extends \WPML_Upgrade_Add_Column_To_Table
    {
        /**
         * Get table name.
         *
         * @return string
         */
        protected function get_table()
        {
        }
        /**
         * Get column name.
         *
         * @return string
         */
        protected function get_column()
        {
        }
        /**
         * Get column definition.
         *
         * @return string
         */
        protected function get_column_definition()
        {
        }
    }
}
namespace WPML\Upgrade\Commands {
    abstract class AddPrimaryKeyToTable extends \WPML_Upgrade_Run_All
    {
        /**
         * @return string
         */
        protected abstract function get_table();
        /**
         * @return string
         */
        protected abstract function get_key_name();
        /**
         * @return array
         */
        protected abstract function get_key_columns();
        /**
         * @var \WPML_Upgrade_Schema
         */
        private $upgrade_schema;
        /**
         * @param array $args
         */
        public function __construct(array $args)
        {
        }
        /**
         * @return bool
         */
        protected function run()
        {
        }
    }
    class AddPrimaryKeyToLocaleMap extends \WPML\Upgrade\Commands\AddPrimaryKeyToTable
    {
        protected function get_table()
        {
        }
        protected function get_key_name()
        {
        }
        protected function get_key_columns()
        {
        }
    }
}
namespace {
    class WPML_Upgrade_Fix_Non_Admin_With_Admin_Cap implements \IWPML_Upgrade_Command
    {
        private $results = array();
        /**
         * @return bool|void
         */
        public function run_admin()
        {
        }
        /**
         * @return bool
         */
        public function run_ajax()
        {
        }
        /**
         * @return bool
         */
        public function run_frontend()
        {
        }
        /**
         * @return null
         */
        public function get_results()
        {
        }
    }
}
namespace WPML\Upgrade\Commands {
    class AddStringPackageIdIndexToStrings extends \WPML\Upgrade\Commands\AddIndexToTable
    {
        protected function get_table()
        {
        }
        protected function get_index()
        {
        }
        protected function get_index_definition()
        {
        }
    }
}
namespace {
    class WPML_Upgrade_Admin_Users_Languages
    {
        private $sitepress;
        const ICL_ADMIN_LANGUAGE_MIGRATED_TO_WP_47 = 'icl_admin_language_migrated_to_wp47';
        public function __construct(\SitePress $sitepress)
        {
        }
        public function add_hooks()
        {
        }
        public function run()
        {
        }
    }
    class WPML_Upgrade_Remove_Translation_Services_Transient implements \IWPML_Upgrade_Command
    {
        /**
         * @return bool|void
         */
        public function run_admin()
        {
        }
        /**
         * @return bool
         */
        public function run_ajax()
        {
        }
        /**
         * @return bool
         */
        public function run_frontend()
        {
        }
        /**
         * @return null
         */
        public function get_results()
        {
        }
    }
}
namespace WPML\Upgrade\Command {
    class DisableOptionsAutoloading implements \IWPML_Upgrade_Command
    {
        /** @var bool */
        private $results;
        public function run()
        {
        }
        public function run_admin()
        {
        }
        public function run_ajax()
        {
        }
        public function run_frontend()
        {
        }
        public function get_results()
        {
        }
    }
}
namespace {
    /**
     * Upgrade 'icl_translate_job' table by adding 'editor' column.
     *
     * @package WPML
     */
    /**
     * Class WPML_Upgrade_Add_Editor_Column_To_Icl_Translate_Job
     */
    class WPML_Upgrade_Add_Editor_Column_To_Icl_Translate_Job extends \WPML_Upgrade_Add_Column_To_Table
    {
        /**
         * Get table name.
         *
         * @return string
         */
        protected function get_table()
        {
        }
        /**
         * Get column name.
         *
         * @return string
         */
        protected function get_column()
        {
        }
        /**
         * Get column definition.
         *
         * @return string
         */
        protected function get_column_definition()
        {
        }
    }
    class WPML_Upgrade_Chinese_Flags implements \IWPML_Upgrade_Command
    {
        private $wpdb;
        /**
         * WPML_Upgrade_Chinese_Flags constructor.
         *
         * @param array $args {
         *                    'wpdb' => @type wpdb
         *                    }
         */
        public function __construct(array $args)
        {
        }
        public function run()
        {
        }
        /**
         * @param \stdClass $flag
         *
         * @return bool
         */
        protected function must_update($flag)
        {
        }
        public function run_admin()
        {
        }
        public function run_ajax()
        {
        }
        public function run_frontend()
        {
        }
        public function get_results()
        {
        }
    }
    class WPML_Upgrade_Media_Duplication_In_Core implements \IWPML_Upgrade_Command
    {
        const DUPLICATE_FEATURED_META_KEY = '_wpml_media_featured';
        const FEATURED_AS_TRANSLATED_META_KEY = '_wpml_featured_image_as_translated';
        const TRANSIENT_DEFERRED_UPGRADE_IN_PROGRESS = 'wpml_upgrade_media_duplication_in_progress';
        const MAX_TIME = 10;
        /** @var SitePress */
        private $sitepress;
        /** @var WPML_Upgrade $wpml_upgrade */
        private $wpml_upgrade;
        /** @var wpdb $wpdb */
        private $wpdb;
        /** @var WPML_Notices $notices */
        private $notices;
        /** @var WPML_Media_Attachments_Duplication $media_attachment_duplication */
        private $media_attachment_duplication;
        /** @var array $post_thumbnail_map */
        private $post_thumbnail_map;
        /** @var int $start_time */
        private $start_time;
        public function __construct(array $args)
        {
        }
        /**
         * @return bool
         */
        public function run_admin()
        {
        }
        public function deferred_upgrade_admin()
        {
        }
        /**
         * @return bool
         */
        public function run_ajax()
        {
        }
        public function deferred_upgrade_ajax()
        {
        }
        /**
         * @return bool
         */
        public function run_frontend()
        {
        }
        /**
         * @return array
         */
        public function get_results()
        {
        }
        private function process_upgrade()
        {
        }
        private function get_notice_content()
        {
        }
        /**
         * Some posts could have been created between WPML 4.0.2 and WPML 4.0.4
         * And they would have '_wpml_featured_image_as_translated' but not '_wpml_media_featured'
         */
        private function find_posts_altered_between_402_and_404()
        {
        }
        private function duplicate_missing_featured_image_for_post($post)
        {
        }
        private function has_thumbnail($post_id)
        {
        }
        /**
         * @return array
         */
        private function get_post_thumbnail_map()
        {
        }
        private function duplicate_missing_attachments_for_post($post)
        {
        }
        private function should_duplicate_media()
        {
        }
        public function update_global_settings()
        {
        }
        private function cleanup_display_featured_as_translated_meta()
        {
        }
        private function mark_migration_completed()
        {
        }
        private function get_media_settings()
        {
        }
        private function get_media_attachment_duplication()
        {
        }
        private function acquire_lock()
        {
        }
        private function release_lock()
        {
        }
        private function start_timer()
        {
        }
        private function is_max_time_elapsed()
        {
        }
        private function remove_notice()
        {
        }
        private function create_or_refresh_notice()
        {
        }
        private function has_notice()
        {
        }
    }
    class WPML_Upgrade_Table_Translate_Job_For_3_9_0 implements \IWPML_Upgrade_Command
    {
        /** @var bool $result */
        private $result = \true;
        /** @var WPML_Upgrade_Schema */
        private $upgrade_schema;
        public function __construct(array $args)
        {
        }
        /** @return bool */
        private function run()
        {
        }
        public function run_admin()
        {
        }
        public function run_ajax()
        {
        }
        public function run_frontend()
        {
        }
        /** @return bool */
        public function get_results()
        {
        }
    }
    /**
     * Upgrade 'icl_strings' table by adding 'word_count' column.
     *
     * @package WPML
     */
    /**
     * Class WPML_Upgrade_Add_Word_Count_Column_To_Strings
     */
    class WPML_Upgrade_Add_Word_Count_Column_To_Strings extends \WPML_Upgrade_Add_Column_To_Table
    {
        /**
         * Get table name.
         *
         * @return string
         */
        protected function get_table()
        {
        }
        /**
         * Get column name.
         *
         * @return string
         */
        protected function get_column()
        {
        }
        /**
         * Get column definition.
         *
         * @return string
         */
        protected function get_column_definition()
        {
        }
    }
}
namespace WPML\Upgrade\Commands {
    class AddStatusIndexToStringTranslations extends \WPML\Upgrade\Commands\AddIndexToTable
    {
        protected function get_table()
        {
        }
        protected function get_index()
        {
        }
        protected function get_index_definition()
        {
        }
    }
    class RemoveRestDisabledNotice implements \IWPML_Upgrade_Command
    {
        public function run_admin()
        {
        }
        public function run_ajax()
        {
        }
        public function run_frontend()
        {
        }
        public function get_results()
        {
        }
    }
}
namespace {
    /**
     * Upgrade 'icl_translation_status' table by adding 'uuid' column.
     *
     * @package WPML
     */
    /**
     * Class WPML_Add_UUID_Column_To_Translation_Status
     */
    class WPML_Add_UUID_Column_To_Translation_Status extends \WPML_Upgrade_Add_Column_To_Table
    {
        /**
         * Get table name.
         *
         * @return string
         */
        protected function get_table()
        {
        }
        /**
         * Get column name.
         *
         * @return string
         */
        protected function get_column()
        {
        }
        /**
         * Get column definition.
         *
         * @return string
         */
        protected function get_column_definition()
        {
        }
    }
    class WPML_Upgrade_Display_Mode_For_Posts implements \IWPML_Upgrade_Command
    {
        const DISPLAY_MODE_SETTING = 'show_untranslated_blog_posts';
        /** @var SitePress */
        private $sitepress;
        /** @var WPML_Settings_Helper */
        private $settings;
        /** @var WPML_Notices */
        private $wpml_notices;
        public function __construct(array $args)
        {
        }
        /**
         * @return bool
         */
        public function run_admin()
        {
        }
        public function add_notice()
        {
        }
        /**
         * @return bool
         */
        public function run_ajax()
        {
        }
        /**
         * @return bool
         */
        public function run_frontend()
        {
        }
        /**
         * @return array
         */
        public function get_results()
        {
        }
        private function get_notice_content()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Upgrade_Command_Definition
    {
        private $class_name;
        private $dependencies = array();
        /** @var array Can be 'admin', 'ajax' or 'front-end' */
        private $scopes = array();
        private $method;
        /** @var callable|null */
        private $factory_method;
        /**
         * WPML_Upgrade_Command_Definition constructor.
         *
         * @param string      $class_name A class implementing \IWPML_Upgrade_Command.
         * @param array       $dependencies An array of dependencies passed to the `$class_name`'s constructor.
         * @param array       $scopes An array of scope values. Accepted values are: `\WPML_Upgrade::SCOPE_ADMIN`, `\WPML_Upgrade::SCOPE_AJAX`, and `\WPML_Upgrade::SCOPE_FRONT_END`.
         * @param string|null $method The method to call to run the upgrade (otherwise, it calls the "run" method),
         * @param callable    $factory_method
         */
        public function __construct($class_name, array $dependencies, array $scopes, $method = \null, callable $factory_method = \null)
        {
        }
        /**
         * @return array
         */
        public function get_dependencies()
        {
        }
        /**
         * @return string
         */
        public function get_class_name()
        {
        }
        /**
         * @return string
         */
        public function get_method()
        {
        }
        /**
         * @return array
         */
        public function get_scopes()
        {
        }
        /**
         * @return callable|null
         */
        public function get_factory_method()
        {
        }
        /**
         * @return IWPML_Upgrade_Command
         */
        public function create()
        {
        }
    }
    class WPML_Upgrade_Command_Factory
    {
        /**
         * @param string        $class_name
         * @param array         $dependencies
         * @param array         $scopes
         * @param string|null   $method
         * @param callable|null $factory_method
         *
         * @return WPML_Upgrade_Command_Definition
         */
        public function create_command_definition($class_name, array $dependencies, array $scopes, $method = \null, callable $factory_method = \null)
        {
        }
    }
    class WPML_ICL_Languages extends \WPML_WPDB_User
    {
        private $table = 'icl_languages';
        private $code;
        private $default_locale;
        /**
         * WPML_TM_ICL_Translation_Status constructor.
         *
         * @param wpdb   $wpdb
         * @param string $code
         * @param string $type
         */
        public function __construct(&$wpdb, $code, $type = 'code')
        {
        }
        public function exists()
        {
        }
        public function code()
        {
        }
    }
    class WPML_Initialize_Language_For_Post_Type
    {
        private $wpdb;
        public function __construct(\wpdb $wpdb)
        {
        }
        public function run($post_type, $default_language)
        {
        }
    }
    class WPML_Records extends \WPML_WPDB_User
    {
        public function icl_languages_by_code($lang_code)
        {
        }
        public function icl_languages_by_default_locale($default_locale)
        {
        }
    }
    class WPML_Frontend_Redirection extends \WPML_SP_User
    {
        /** @var Frontend $request_handler */
        private $request_handler;
        /** @var  WPML_Redirection */
        private $redirect_helper;
        /** @var  WPML_Language_Resolution $lang_resolution */
        private $lang_resolution;
        /**
         * WPML_Frontend_Redirection constructor.
         *
         * @param  SitePress  $sitepress
         * @param  Frontend  $request_handler
         * @param  WPML_Redirection  $redir_helper
         * @param  WPML_Language_Resolution  $lang_resolution
         */
        public function __construct(&$sitepress, &$request_handler, &$redir_helper, &$lang_resolution)
        {
        }
        /**
         * Redirects to a URL corrected for the language information in it, in case request URI and $_REQUEST['lang'],
         * requested domain or $_SERVER['REQUEST_URI'] do not match and gives precedence to the explicit language parameter if
         * there.
         *
         * @return string The language code of the currently requested URL in case no redirection was necessary.
         */
        public function maybe_redirect()
        {
        }
    }
    class WPML_REST_Request_Analyze_Factory
    {
        /**
         * @return WPML_REST_Request_Analyze
         */
        public static function create()
        {
        }
    }
    /**
     * Class WPML_URL_Converter_User
     *
     * @since 3.2.3
     */
    abstract class WPML_URL_Converter_User
    {
        /** @var  WPML_URL_Converter */
        protected $url_converter;
        /**
         * @param $url_converter
         */
        public function __construct(&$url_converter)
        {
        }
    }
    abstract class WPML_Redirection extends \WPML_URL_Converter_User
    {
        /** @var  WPML_Request $request_handler */
        protected $request_handler;
        /** @var WPML_Language_Resolution $lang_resolution */
        protected $lang_resolution;
        /**
         * @param WPML_URL_Converter       $url_converter
         * @param WPML_Request             $request_handler
         * @param WPML_Language_Resolution $lang_resolution
         */
        function __construct(&$url_converter, &$request_handler, &$lang_resolution)
        {
        }
        public abstract function get_redirect_target();
        protected function redirect_hidden_home()
        {
        }
    }
    class WPML_Redirect_By_Subdir extends \WPML_Redirection
    {
        /**
         * @return bool|string
         */
        public function get_redirect_target()
        {
        }
    }
    class WPML_Rootpage_Redirect_By_Subdir extends \WPML_Redirect_By_Subdir
    {
        /** @var array $urls */
        private $urls;
        /**
         * @param  array                   $urls
         * @param  WPML_Request            $request_handler
         * @param  WPML_URL_Converter      $url_converter
         * @param WPML_Language_Resolution $lang_resolution
         *
         */
        public function __construct($urls, &$request_handler, &$url_converter, &$lang_resolution)
        {
        }
        public function get_redirect_target()
        {
        }
        private function maybe_setup_rootpage()
        {
        }
    }
    class WPML_Redirect_By_Domain extends \WPML_Redirection
    {
        /** @var array $domains */
        private $domains;
        /** @var WPML_WP_API $wp_api */
        private $wp_api;
        /**
         * @param array                    $domains
         * @param WPML_WP_API              $wp_api
         * @param WPML_URL_Converter       $url_converter
         * @param WPML_Request             $request_handler
         * @param WPML_Language_Resolution $lang_resolution
         */
        public function __construct($domains, &$wp_api, &$request_handler, &$url_converter, &$lang_resolution)
        {
        }
        public function get_redirect_target($language = \false)
        {
        }
    }
    class WPML_Redirect_By_Param extends \WPML_Redirection
    {
        private $post_like_params = array('p' => 1, 'page_id' => 1);
        private $term_like_params = array('cat_ID' => 1, 'cat' => 1, 'tag' => 1);
        /** @var Sitepress */
        private $sitepress;
        /**
         * @param array                    $tax_sync_option
         * @param WPML_URL_Converter       $url_converter
         * @param WPML_Request             $request_handler
         * @param WPML_Language_Resolution $lang_resolution
         * @param Sitepress                $sitepress
         */
        public function __construct($tax_sync_option, &$url_converter, &$request_handler, &$lang_resolution, &$sitepress)
        {
        }
        public function init_hooks()
        {
        }
        /**
         * @return bool|string
         */
        public function get_redirect_target()
        {
        }
        private function find_potential_translation($query_params, $lang_code)
        {
        }
        /**
         * @param string $query_params_string
         * @param string $lang_code
         *
         * @return bool|string
         */
        private function needs_redirect($query_params_string, $lang_code)
        {
        }
        private function get_target_link_querystring()
        {
        }
        /**
         * @param string $query_params_string
         *
         * @return null|string
         */
        private function get_element_language($query_params_string)
        {
        }
        /**
         * @param string $url
         *
         * @return array
         */
        private function get_element_details($url)
        {
        }
        /**
         * @link https://onthegosystems.myjetbrains.com/youtrack/issue/wpmlcore-2822
         */
        public function template_redirect_action()
        {
        }
    }
    abstract class WPML_Request
    {
        /** @var  WPML_URL_Converter */
        protected $url_converter;
        protected $active_languages;
        protected $default_language;
        /** @var CookieLanguage  */
        protected $cookieLanguage;
        /**
         * @param  WPML_URL_Converter  $url_converter
         * @param  array  $active_languages
         * @param  string  $default_language
         * @param  CookieLanguage  $cookieLanguage
         */
        public function __construct(\WPML_URL_Converter $url_converter, $active_languages, $default_language, \WPML\Language\Detection\CookieLanguage $cookieLanguage)
        {
        }
        protected abstract function get_cookie_name();
        /**
         * Determines the language of the current request.
         *
         * @return string|false language code of the current request, determined from the requested url and the user's
         *                      cookie.
         */
        public abstract function get_requested_lang();
        /**
         * Returns the current REQUEST_URI optionally filtered
         *
         * @param null|int $filter filter to apply to the REQUEST_URI, takes the same arguments
         *                         as filter_var for the filter type.
         *
         * @return string
         */
        public function get_request_uri($filter = \null)
        {
        }
        /**
         * @global $wpml_url_converter
         *
         * @return string|false language code that can be determined from the currently requested URI.
         */
        public function get_request_uri_lang()
        {
        }
        /**
         * @return string language code stored in the user's wp-wpml_current_language cookie
         */
        public function get_cookie_lang()
        {
        }
        /**
         * Checks whether hidden languages are to be displayed at the moment.
         * They are displayed in the frontend if the users has the respective option icl_show_hidden_languages set in his
         * user_meta. The are displayed in the backend for all admins with manage_option capabilities.
         *
         * @return bool true if hidden languages are to be shown
         */
        public function show_hidden()
        {
        }
        /**
         * Sets the language code of the current screen in the User's wp-wpml_current_language cookie
         *
         * When user is not logged we must set cookie with JS to avoid issues with cached pages
         *
         * @param string $lang_code
         */
        public function set_language_cookie($lang_code)
        {
        }
    }
    /**
     * @deprecated This class has been replaced by WPML\Language\Detection\Backend and is going to be removed in the next major release.
     * @since 4.4.0
     * @see WPML\Language\Detection\Backend
     *
     * @package    wpml-core
     * @subpackage wpml-requests
     */
    class WPML_Backend_Request extends \WPML_Request
    {
        /** @var Backend */
        private $backend;
        public function __construct($url_converter, $active_languages, $default_language, $cookieLanguage, $wp_api)
        {
        }
        /**
         * @return false|string
         */
        public function get_requested_lang()
        {
        }
        protected function get_cookie_name()
        {
        }
    }
    class WPML_Super_Globals_Validation
    {
        /**
         * @param string $key
         * @param int    $filter
         * @param mixed  $options
         *
         * @return mixed|null
         */
        public function get($key, $filter = \FILTER_SANITIZE_STRING, $options = \null)
        {
        }
        /**
         * @param string $key
         * @param int    $filter
         * @param mixed  $options
         *
         * @return mixed|null
         */
        public function post($key, $filter = \FILTER_SANITIZE_STRING, $options = \null)
        {
        }
        /**
         * @param string $key
         * @param array  $var
         * @param int    $filter
         * @param mixed  $options
         *
         * @return mixed|null
         */
        private function get_value($key, array $var, $filter = \FILTER_SANITIZE_STRING, $options = \null)
        {
        }
    }
    class WPML_REST_Request_Analyze
    {
        /** @var WPML_URL_Converter $url_converter */
        private $url_converter;
        /** @var array $active_language_codes */
        private $active_language_codes;
        /** @var WP_Rewrite $wp_rewrite */
        private $wp_rewrite;
        /** @var array $uri_parts */
        private $uri_parts;
        public function __construct(\WPML_URL_Converter $url_converter, array $active_language_codes, \WP_Rewrite $wp_rewrite)
        {
        }
        /** @return bool */
        public function is_rest_request()
        {
        }
        /** @return bool */
        private function has_valid_language_prefix()
        {
        }
        /**
         * @param int $index
         *
         * @return string
         */
        private function get_uri_part($index = 0)
        {
        }
    }
    class WPML_Language_Domain_Validation
    {
        const VALIDATE_DOMAIN_KEY = '____icl_validate_domain';
        /** @var WPML_WP_API $wp_api */
        private $wp_api;
        /** @var WP_Http $http */
        private $http;
        /** @var  string $url */
        private $url;
        /** @var  string $validation_url */
        private $validation_url;
        /**
         * @param WPML_WP_API $wp_api
         * @param WP_Http     $http
         * @param string      $url
         *
         * @throws \InvalidArgumentException
         */
        public function __construct($wp_api, $http, $url)
        {
        }
        /**
         * @return bool
         */
        public function is_valid()
        {
        }
        /**
         * @return bool
         */
        private function has_scheme_and_host()
        {
        }
        /**
         * @return string
         */
        private function get_validation_url()
        {
        }
        /**
         * @param string $url
         *
         * @return array
         */
        private function get_accepted_responses($url)
        {
        }
        /**
         * @return array|WP_Error
         */
        private function get_validation_response()
        {
        }
        /**
         * @param array|WP_Error $response
         *
         * @return bool
         */
        private function is_valid_response($response)
        {
        }
    }
    /*
     * @deprecated deprecated since version 4.4.0
     * This class has been replaced by WPML\Language\Detection\Frontend and is going to be removed in the next major release.
     *
     *
     * @package    wpml-core
     * @subpackage wpml-requests
     *
     */
    class WPML_Frontend_Request extends \WPML_Request
    {
        /** @var \WPML\Language\Detection\Frontend */
        private $frontend;
        public function __construct($url_converter, $active_languages, $default_language, $cookieLanguage, $wp_api)
        {
        }
        /**
         * @deprecated deprecated since version 4.4.0
         * @return false|string
         */
        public function get_requested_lang()
        {
        }
        protected function get_cookie_name()
        {
        }
    }
    /**
     * Class WPML_Language_Resolution
     *
     * @package    wpml-core
     * @subpackage wpml-requests
     */
    class WPML_Language_Resolution
    {
        private $active_language_codes = array();
        private $current_request_lang = \null;
        private $default_lang = \null;
        /**
         * @var array|null $hidden_lang_codes if set to null,
         * indicates that the cache needs to be reloaded due to changing settings
         * or current user within the request
         */
        private $hidden_lang_codes = \null;
        /**
         * WPML_Language_Resolution constructor.
         *
         * @param string[] $active_language_codes
         * @param string   $default_lang
         */
        public function __construct($active_language_codes, $default_lang)
        {
        }
        public function reload()
        {
        }
        public function current_lang_filter($lang, \WPML_Request $wpml_request_handler)
        {
        }
        public function get_active_language_codes()
        {
        }
        public function is_language_hidden($lang_code)
        {
        }
        public function is_language_active($lang_code, $is_all_active = \false)
        {
        }
        private function maybe_reload()
        {
        }
        /**
         * Returns the language_code of the http referrer's location from which a request originated.
         * Used to correctly determine the language code on ajax link lists for the post edit screen or
         * the flat taxonomy auto-suggest.
         *
         * @return string|null
         */
        public function get_referrer_language_code()
        {
        }
        /**
         *
         * Sets the language of frontend requests to false, if they are not for
         * a hidden or active language code. The handling of permissions in case of
         * hidden languages is done in \SitePress::init.
         *
         * @param string $lang
         *
         * @return string
         */
        private function filter_for_legal_langs($lang)
        {
        }
        /**
         * @return bool
         */
        private function use_cookie_language()
        {
        }
        /**
         * Adjusts the output of the filtering for the current language in case
         * the request is for a preview page.
         *
         * @return null|string
         */
        private function filter_preview_language_code()
        {
        }
    }
    /**
     * Class WPML_Language_Per_Domain_SSO
     */
    class WPML_Language_Per_Domain_SSO
    {
        const SSO_NONCE = 'wpml_sso';
        const TRANSIENT_SSO_STARTED = 'wpml_sso_started';
        const TRANSIENT_DOMAIN = 'wpml_sso_domain_';
        const TRANSIENT_USER = 'wpml_sso_user_';
        const TRANSIENT_SESSION_TOKEN = 'wpml_sso_session_';
        const IFRAME_USER_TOKEN_KEY = 'wpml_sso_token';
        const IFRAME_USER_TOKEN_KEY_FOR_DOMAIN = 'wpml_sso_token_domain';
        const IFRAME_DOMAIN_HASH_KEY = 'wpml_sso_iframe_hash';
        const IFRAME_USER_STATUS_KEY = 'wpml_sso_user_status';
        const SSO_TIMEOUT = \MINUTE_IN_SECONDS;
        /** @var SitePress $sitepress */
        private $sitepress;
        /** @var WPML_PHP_Functions $php_functions */
        private $php_functions;
        /** @var string */
        private $site_url;
        /** @var array */
        private $domains;
        /** @var int $current_user_id */
        private $current_user_id;
        public function __construct(\SitePress $sitepress, \WPML_PHP_Functions $php_functions)
        {
        }
        public function init_hooks()
        {
        }
        public function init_action()
        {
        }
        /**
         * @param string $user_login
         * @param WP_User $user
         */
        public function wp_login_action($user_login, \WP_User $user)
        {
        }
        /**
         * @param string $redirect_to
         * @param string $requested_redirect_to
         * @param WP_User|WP_Error $user
         *
         * @return string
         */
        public function add_redirect_user_token($redirect_to, $requested_redirect_to, $user)
        {
        }
        public function add_iframes_to_footer()
        {
        }
        private function send_headers()
        {
        }
        /** @param int $user_id */
        private function set_current_user_id($user_id = \null)
        {
        }
        private function process_iframe_request()
        {
        }
        /** @return bool */
        private function validate_user_sign_request()
        {
        }
        /** @return int */
        private function get_user_id_from_token()
        {
        }
        /**
         * @param int $user_id
         */
        private function init_sso_transients($user_id)
        {
        }
        /**
         * @param string $domain
         */
        private function finish_sso_for_domain($domain)
        {
        }
        /**
         * @param $domain
         *
         * @return bool
         */
        private function is_sso_started_for_domain($domain)
        {
        }
        /**
         * @return string
         */
        private function get_current_domain()
        {
        }
        /**
         * @return string
         */
        private function get_current_protocol()
        {
        }
        /**
         * @return array
         */
        private function get_domains()
        {
        }
        /**
         * @return bool
         */
        private function is_iframe_request()
        {
        }
        /**
         * @return bool
         */
        private function is_sso_started()
        {
        }
        /**
         * @param int $user_id
         *
         * @return string
         */
        private function create_user_token($user_id)
        {
        }
        /**
         * @param int $user_id
         *
         * @return bool|string
         */
        private function create_user_token_for_domains($user_id)
        {
        }
        /**
         * @param string $session_token
         * @param int $user_id
         */
        private function save_session_token($session_token, $user_id)
        {
        }
        /**
         * @param int $user_id
         *
         * @return string
         */
        private function get_session_token($user_id)
        {
        }
        /**
         * @param string $prefix
         * @param string|null $domain
         * @param string|null $token
         *
         * @return string
         */
        private function create_transient_key($prefix, $domain = \null, $token = \null)
        {
        }
        /**
         * @param string $value
         *
         * @return string
         */
        private function get_hash($value)
        {
        }
    }
}
namespace WPML\BrowserLanguageRedirect {
    class Dialog implements \IWPML_Backend_Action
    {
        const ACCEPTED = 'accepted';
        const USER_META = 'wpml-browser-redirect-dialog';
        const ACCEPT_ACTION = 'accept_wpml_browser_language_redirect_message';
        const NONCE_KEY = 'wpml-browser-language-redirect-message';
        public function add_hooks()
        {
        }
        public function enqueue_res()
        {
        }
        public function print_dialog_container()
        {
        }
        public function accept()
        {
        }
        private function should_print_dialog()
        {
        }
        private function is_accepted()
        {
        }
        private function is_languages_page()
        {
        }
    }
}
namespace {
    class WPML_LS_Inline_Styles
    {
        /* @var WPML_LS_Templates $templates */
        private $templates;
        /* @var WPML_LS_Settings $settings */
        private $settings;
        /* @var WPML_LS_Model_Build $model_build */
        private $model_build;
        /**
         * WPML_Language_Switcher_Render_Assets constructor.
         *
         * @param WPML_LS_Templates   $templates
         * @param WPML_LS_Settings    $settings
         * @param WPML_LS_Model_Build $model_build
         */
        public function __construct($templates, $settings, $model_build)
        {
        }
        public function init_hooks()
        {
        }
        /**
         * @param WPML_LS_Slot $slot
         *
         * @return string
         */
        private function get_slot_color_picker_css($slot)
        {
        }
        /**
         * @param WPML_LS_Slot $slot
         *
         * @return string
         */
        private function get_slot_color_picker_css_for_menus($slot)
        {
        }
        /**
         * @param WPML_LS_Slot $slot
         *
         * @return string
         */
        private function get_slot_color_picker_css_for_widgets_and_statics($slot)
        {
        }
        /**
         * @param array $slots
         *
         * @return string
         */
        public function get_slots_inline_styles($slots)
        {
        }
        /**
         * @return string
         */
        public function get_additional_style()
        {
        }
        public function wp_enqueue_scripts_action()
        {
        }
        private function enqueue_inline_styles()
        {
        }
        /**
         * @param array $active_slots
         *
         * @return bool|mixed|null|string
         */
        private function get_first_valid_style_handler($active_slots)
        {
        }
        public function admin_output()
        {
        }
        /**
         * @param WPML_LS_Slot $slot
         * @param string       $css
         *
         * @return string
         */
        private function get_raw_inline_style_tag($slot, $css)
        {
        }
        /**
         * @param string $css
         *
         * @return string
         */
        private function sanitize_css($css)
        {
        }
    }
    class WPML_LS_Widget extends \WP_Widget
    {
        const SLUG = 'icl_lang_sel_widget';
        const ANCHOR_BASE = '#sidebars/';
        public function __construct()
        {
        }
        public static function register()
        {
        }
        /**
         * @param string $hook
         */
        public function admin_enqueue_scripts_action($hook)
        {
        }
        /**
         * @param array $args
         * @param array $instance
         */
        public function widget($args, $instance)
        {
        }
        /**
         * @param array $instance
         *
         * @return string
         */
        public function form($instance)
        {
        }
        /**
         * @param array $new_instance
         * @param array $old_instance
         *
         * @return array
         */
        public function update($new_instance, $old_instance)
        {
        }
        /**
         * @param WPML_LS_Slot $slot
         *
         * @return string
         */
        public function create_new_instance(\WPML_LS_Slot $slot)
        {
        }
        /**
         * @param WPML_LS_Slot $slot
         * @param int          $widget_id
         */
        public function update_instance(\WPML_LS_Slot $slot, $widget_id = \null)
        {
        }
        /**
         * @param int $widget_id
         */
        public function delete_instance($widget_id = \null)
        {
        }
        /**
         * @param string $widget_id
         *
         * @return int
         */
        public function get_number_from_widget_id($widget_id)
        {
        }
        /**
         * @param WPML_LS_Slot $slot
         *
         * @return array
         */
        private function get_instance_options_from_slot(\WPML_LS_Slot $slot)
        {
        }
        /**
         * @param string $slug
         *
         * @return string
         */
        public function get_settings_page_url($slug)
        {
        }
    }
    class WPML_LS_Settings_Sanitize
    {
        /**
         * @return array
         */
        private function get_global_settings_keys()
        {
        }
        /**
         * @param array $s
         * @return array
         */
        public function sanitize_all_settings($s)
        {
        }
        /**
         * @param array $settings_slice
         * @param array $allowed_keys
         *
         * @return array
         */
        private function sanitize_settings($settings_slice, $allowed_keys)
        {
        }
    }
    class WPML_LS_Model_Build extends \WPML_SP_User
    {
        const LINK_CSS_CLASS = 'wpml-ls-link';
        /* @var WPML_LS_Settings $settings */
        private $settings;
        /* @var WPML_Mobile_Detect $mobile_detect */
        private $mobile_detect;
        /* @var bool $is_touch_screen */
        private $is_touch_screen = \false;
        /* @var string $css_prefix */
        private $css_prefix;
        private $allowed_vars = ['languages' => 'array', 'current_language_code' => 'string', 'css_classes' => 'string', 'css_classes_link' => 'string', 'backward_compatibility' => 'array'];
        private $allowed_language_vars = ['code' => 'string', 'url' => 'string', 'flag_url' => 'string', 'flag_title' => 'string', 'flag_alt' => 'string', 'native_name' => 'string', 'display_name' => 'string', 'is_current' => 'bool', 'css_classes' => 'string', 'db_id' => 'string', 'menu_item_parent' => 'mixed', 'is_parent' => 'bool', 'backward_compatibility' => 'array'];
        /**
         * WPML_Language_Switcher_Render_Model constructor.
         *
         * @param WPML_LS_Settings $settings
         * @param SitePress        $sitepress
         * @param string           $css_prefix
         */
        public function __construct($settings, $sitepress, $css_prefix)
        {
        }
        /**
         * @param WPML_LS_Slot $slot
         * @param array        $template_data
         *
         * @return array
         */
        public function get($slot, $template_data = [])
        {
        }
        /**
         * @param WPML_LS_Slot $slot
         *
         * @return string
         */
        public function get_slot_css_classes($slot)
        {
        }
        /**
         * @param $group
         * @param $slug
         *
         * @return string
         */
        public function get_slot_css_main_class($group, $slug)
        {
        }
        /**
         * @return string
         */
        public function get_css_prefix()
        {
        }
        /**
         * @param WPML_LS_Slot $slot
         * @param array        $template_data
         *
         * @return array
         */
        private function get_language_items($slot, $template_data)
        {
        }
        /**
         * @param array  $languages
         * @param string $order_by
         * @param string $order_way
         *
         * @return array
         */
        private function order_languages($languages, $order_by, $order_way)
        {
        }
        /**
         * @param string $url
         * @param array  $template_data
         *
         * @return string
         */
        private function filter_flag_url($url, $template_data = [])
        {
        }
        /**
         * @param WPML_LS_Slot $slot
         * @param string       $code
         *
         * @return array
         */
        private function get_language_css_classes($slot, $code)
        {
        }
        /**
         * @param array $classes
         *
         * @return array
         */
        private function add_user_agent_touch_device_classes($classes)
        {
        }
        /**
         * @return bool
         */
        private function needs_backward_compatibility()
        {
        }
        /**
         * @param string       $code
         * @param WPML_LS_Slot $slot
         *
         * @return string
         */
        private function get_menu_item_id($code, $slot)
        {
        }
        /**
         * @param array $vars
         * @param array $allowed_vars
         *
         * @return array
         */
        private function sanitize_vars($vars, $allowed_vars)
        {
        }
        /**
         * @param array        $lang
         * @param WPML_LS_Slot $slot
         *
         * @return array
         */
        private function add_backward_compatibility_to_languages($lang, $slot)
        {
        }
        /**
         * @param array        $vars
         * @param WPML_LS_Slot $slot
         *
         * @return mixed
         */
        private function add_backward_compatibility_to_wrapper($vars, $slot)
        {
        }
        /**
         * @param                   $template_slug
         * @param mixed|string|null $type
         *
         * @return bool
         */
        private function is_legacy_template($template_slug, $type = \null)
        {
        }
    }
    class WPML_LS_Render extends \WPML_SP_User
    {
        const THE_CONTENT_FILTER_PRIORITY = 100;
        /* @var WPML_LS_Template $current_template */
        private $current_template;
        /* @var WPML_LS_Templates $templates */
        private $templates;
        /* @var WPML_LS_Settings $settings */
        private $settings;
        /* @var WPML_LS_Model_Build $model_build */
        private $model_build;
        /* @var WPML_LS_Inline_Styles &$inline_styles */
        private $inline_styles;
        /* @var WPML_LS_Assets $assets */
        private $assets;
        /** @var bool */
        private $wpml_ls_exclude_in_menu;
        /**
         * WPML_Language_Switcher_Menu constructor.
         *
         * @param WPML_LS_Templates     $templates
         * @param WPML_LS_Settings      $settings
         * @param WPML_LS_Model_Build   $model_build
         * @param WPML_LS_Inline_Styles $inline_styles
         * @param SitePress                            $sitepress
         */
        public function __construct($templates, $settings, $model_build, $inline_styles, $sitepress)
        {
        }
        public function init_hooks()
        {
        }
        /**
         * @param WPML_LS_slot $slot
         *
         * @return string
         */
        public function render($slot)
        {
        }
        /**
         * @param string       $html
         * @param array        $model
         * @param WPML_LS_slot $slot
         *
         * @return string
         */
        private function filter_html($html, $model, $slot)
        {
        }
        /**
         * @param WPML_LS_slot $slot
         *
         * @return array
         */
        public function get_preview($slot)
        {
        }
        /**
         * @param array   $items
         * @param WP_Term $menu
         *
         * @return array
         */
        public function wp_get_nav_menu_items_filter($items, $menu)
        {
        }
        private function is_for_menu_panel_in_customizer()
        {
        }
        private function should_not_alter_menu()
        {
        }
        /**
         * @param WP_Post[]           $items
         * @param WPML_LS_Menu_Item[] $lang_items
         * @param bool                $is_before
         *
         * @return array
         */
        private function merge_menu_items($items, $lang_items, $is_before)
        {
        }
        /**
         * @param WPML_LS_Slot $slot
         *
         * @return array
         */
        private function get_menu_items($slot)
        {
        }
        /**
         * @link https://onthegosystems.myjetbrains.com/youtrack/issue/wpmlcore-4706#comment=102-231339
         *
         * @param WP_Post|WPML_LS_Menu_Item|object $item
         *
         * @return object $item
         */
        public function maybe_repair_menu_item($item)
        {
        }
        /**
         * @param WPML_LS_Slot $slot
         *
         * @return string
         */
        private function render_menu_preview($slot)
        {
        }
        /**
         * @param WPML_LS_Slot $slot
         *
         * @return bool true if the switcher is to be hidden
         */
        private function is_hidden($slot)
        {
        }
        /**
         * @param string $content
         *
         * @return string
         */
        public function the_content_filter($content)
        {
        }
        /**
         * @param WPML_LS_Slot $slot
         *
         * @return mixed|string|void
         */
        public function post_translations_label($slot)
        {
        }
        public function wp_footer_action()
        {
        }
    }
    abstract class WPML_Templates_Factory
    {
        const NOTICE_GROUP = 'template_factory';
        const OTGS_TWIG_CACHE_DISABLED_KEY = '_otgs_twig_cache_disabled';
        /** @var array */
        protected $custom_filters;
        /** @var array */
        protected $custom_functions;
        /** @var string|array */
        protected $template_paths;
        /** @var string|bool */
        protected $cache_directory;
        protected $template_string;
        /** @var WPML_WP_API $wp_api */
        private $wp_api;
        /** @var Twig_Environment */
        protected $twig;
        /**
         * WPML_Templates_Factory constructor.
         *
         * @param array       $custom_functions
         * @param array       $custom_filters
         * @param WPML_WP_API $wp_api
         */
        public function __construct(array $custom_functions = array(), array $custom_filters = array(), $wp_api = \null)
        {
        }
        protected abstract function init_template_base_dir();
        public function show($template = \null, $model = \null)
        {
        }
        /**
         * @param $template
         * @param $model
         *
         * @return string
         * @throws Twig_Error_Syntax
         * @throws Twig_Error_Runtime
         * @throws Twig_Error_Loader
         */
        public function get_view($template = \null, $model = \null)
        {
        }
        protected function maybe_init_twig()
        {
        }
        public abstract function get_template();
        public abstract function get_model();
        /**
         * @return Twig_Environment
         */
        protected function get_twig()
        {
        }
        /**
         * @param RuntimeException $e
         */
        protected function add_exception_notice(\RuntimeException $e)
        {
        }
        /**
         * @return WPML_WP_API
         */
        protected function get_wp_api()
        {
        }
        protected function disable_twig_cache()
        {
        }
        protected function is_caching_enabled()
        {
        }
        /**
         * @return bool
         */
        protected function is_string_template()
        {
        }
        /**
         * @return Twig_LoaderInterface
         */
        protected function get_twig_loader()
        {
        }
    }
    class WPML_LS_Admin_UI extends \WPML_Templates_Factory
    {
        const NONCE_NAME = 'wpml-language-switcher-admin';
        const MAIN_UI_TEMPLATE = 'layout-main.twig';
        const RESET_UI_TEMPLATE = 'layout-reset.twig';
        const BUTTON_TEMPLATE = 'layout-slot-edit-button.twig';
        const SLOT_SLUG_PLACEHOLDER = '%id%';
        const RESET_NONCE_NAME = 'wpml-language-switcher-reset';
        /* @var WPML_LS_Templates $templates */
        private $templates;
        /* @var WPML_LS_Settings $settings */
        private $settings;
        /* @var WPML_LS_Render $render */
        private $render;
        /* @var WPML_LS_Inline_Styles $inline_styles */
        private $inline_styles;
        /* @var WPML_LS_Assets $assets */
        private $assets;
        /* @var SitePress $sitepress */
        private $sitepress;
        /**
         * WPML_Language_Switcher_Menu constructor.
         *
         * @param WPML_LS_Templates $templates
         * @param WPML_LS_Settings $settings
         * @param WPML_LS_Render $render
         * @param WPML_LS_Inline_Styles $inline_styles
         * @param SitePress $sitepress
         * @param WPML_LS_Assets $assets
         */
        public function __construct($templates, $settings, $render, $inline_styles, $sitepress, $assets = \null)
        {
        }
        public function init_hooks()
        {
        }
        /**
         * @return string
         */
        public static function get_page_hook()
        {
        }
        /**
         * @param string $hook
         */
        public function admin_enqueue_scripts_action($hook)
        {
        }
        public function admin_head_action()
        {
        }
        public function save_settings_action()
        {
        }
        /**
         * @param array $new_settings
         */
        private function maybe_complete_setup_wizard_step($new_settings)
        {
        }
        public function update_preview_action()
        {
        }
        /**
         * @param string $key
         *
         * @return mixed|null|string
         */
        private function parse_request_settings($key)
        {
        }
        /**
         * @return bool
         */
        private function has_valid_nonce()
        {
        }
        /**
         * @param array $items
         *
         * @return array
         */
        public function languages_navigation_items_filter($items)
        {
        }
        public function after_languages_url_format_action()
        {
        }
        /**
         * @param string|bool $theme_wpml_config_file
         */
        public function after_wpml_love_action($theme_wpml_config_file)
        {
        }
        /**
         * @param string     $type 'sidebars', 'menus', 'statics'
         * @param string|int $slug_or_id
         *
         * @return string
         */
        public function get_button_to_edit_slot($type, $slug_or_id)
        {
        }
        protected function init_template_base_dir()
        {
        }
        /**
         * @return string
         */
        public function get_template()
        {
        }
        /**
         * @return array
         */
        private function get_all_previews()
        {
        }
        /**
         * This method is compulsory but should not be used
         * Use "get_main_ui_model" and "get_reset_ui_model" instead
         *
         * @return array
         */
        public function get_model()
        {
        }
        /**
         * @return array
         */
        public function get_main_ui_model()
        {
        }
        /**
         * @return array
         */
        public function get_misc_strings()
        {
        }
        /**
         * @return array
         */
        public function get_tooltip_strings()
        {
        }
        /**
         * @return array
         */
        public function get_options_section_strings()
        {
        }
        /**
         * @return array
         */
        public function get_menus_section_strings()
        {
        }
        /**
         * @return array
         */
        public function get_sidebars_section_strings()
        {
        }
        /**
         * @return array
         */
        public function get_footer_section_strings()
        {
        }
        /**
         * @return array
         */
        public function get_post_translations_strings()
        {
        }
        /**
         * @return array
         */
        public function get_shortcode_actions_strings()
        {
        }
        /**
         * @return array
         */
        public function get_color_picker_strings()
        {
        }
        /**
         * @return array
         */
        public function get_javascript_strings()
        {
        }
        /**
         * @param string|bool $theme_wpml_config_file
         *
         * @return array
         */
        public function get_reset_ui_model($theme_wpml_config_file)
        {
        }
        /**
         * @return array
         */
        private function get_notifications()
        {
        }
    }
    class WPML_Get_LS_Languages_Status
    {
        private static $the_instance;
        private $in_get_ls_languages = \false;
        public function is_getting_ls_languages()
        {
        }
        public function start()
        {
        }
        public function end()
        {
        }
        /**
         * @return WPML_Get_LS_Languages_Status
         */
        public static function get_instance()
        {
        }
        /**
         * @param WPML_Get_LS_Languages_Status $instance
         */
        public static function set_instance($instance)
        {
        }
    }
    class WPML_LS_Settings_Color_Presets
    {
        /**
         * @return array
         */
        public function get_defaults()
        {
        }
    }
    class WPML_LS_Dependencies_Factory
    {
        /* @var SitePress $sitepress */
        private $sitepress;
        /* @var array $parameters */
        private $parameters;
        /* @var WPML_LS_Templates $templates */
        private $templates;
        /* @var WPML_LS_Slot_Factory $slot_factory */
        private $slot_factory;
        /* @var WPML_LS_Settings $settings */
        private $settings;
        /* @var WPML_LS_Model_Build $model_build */
        private $model_build;
        /* @var WPML_LS_Inline_Styles $inline_styles */
        private $inline_styles;
        /* @var WPML_LS_Render $render */
        private $render;
        /* @var WPML_LS_Admin_UI $admin_ui */
        private $admin_ui;
        /** @var WPML_LS_Shortcodes */
        private $shortcodes;
        /** @var  WPML_LS_Actions */
        private $actions;
        /**
         * WPML_LS_Dependencies_Factory constructor.
         *
         * @param SitePress $sitepress
         * @param array $parameters
         */
        public function __construct(\SitePress $sitepress, array $parameters)
        {
        }
        /**
         * @return SitePress
         */
        public function sitepress()
        {
        }
        /**
         * @param string $key
         *
         * @return mixed
         */
        public function parameter($key)
        {
        }
        /**
         * @return WPML_LS_Templates
         */
        public function templates()
        {
        }
        /**
         * @return WPML_LS_Slot_Factory
         */
        public function slot_factory()
        {
        }
        /**
         * @return WPML_LS_Settings
         */
        public function settings()
        {
        }
        /**
         * @return WPML_LS_Model_Build
         */
        public function model_build()
        {
        }
        /**
         * @return WPML_LS_Inline_Styles
         */
        public function inline_styles()
        {
        }
        /**
         * @return WPML_LS_Render
         */
        public function render()
        {
        }
        /**
         * @return WPML_LS_Admin_UI
         */
        public function admin_ui()
        {
        }
        /**
         * @return WPML_LS_Shortcodes
         */
        public function shortcodes()
        {
        }
        /**
         * @return WPML_LS_Shortcodes
         */
        public function actions()
        {
        }
    }
    class WPML_LS_Assets
    {
        /* @var array $enqueued_templates */
        private $enqueued_templates = array();
        /* @var WPML_LS_Templates $templates */
        private $templates;
        /* @var WPML_LS_Settings $settings */
        private $settings;
        /**
         * WPML_Language_Switcher_Render_Assets constructor.
         *
         * @param WPML_LS_Templates $templates
         * @param WPML_LS_Settings $settings
         */
        public function __construct($templates, &$settings)
        {
        }
        public function init_hooks()
        {
        }
        public function wp_enqueue_scripts_action()
        {
        }
        /**
         * @param $slug
         */
        public function maybe_late_enqueue_template($slug)
        {
        }
        /**
         * @param string                          $slug
         * @param WPML_LS_Template $template
         */
        private function enqueue_template_resources($slug, $template)
        {
        }
    }
    /**
     * Class WPML_LS_Public_API
     */
    class WPML_LS_Public_API
    {
        /** @var WPML_LS_Settings $settings */
        private $settings;
        /** @var WPML_LS_Render $render */
        private $render;
        /** @var SitePress $sitepress */
        protected $sitepress;
        /** @var WPML_LS_Slot_Factory */
        private $slot_factory;
        /**
         * WPML_LS_Public_API constructor.
         *
         * @param WPML_LS_Settings $settings
         * @param WPML_LS_Render $render
         * @param SitePress $sitepress
         * @param WPML_LS_Slot_Factory $slot_factory
         */
        public function __construct(\WPML_LS_Settings $settings, \WPML_LS_Render $render, \SitePress $sitepress, \WPML_LS_Slot_Factory $slot_factory = \null)
        {
        }
        /**
         * @param array       $args
         * @param string|null $twig_template
         *
         * @return string
         */
        protected function render($args, $twig_template = \null)
        {
        }
        /**
         * @param array $args
         *
         * @return array
         */
        private function get_default_slot_args($args)
        {
        }
        /**
         * @param array $args
         *
         * @return array
         */
        protected function convert_shortcode_args_aliases($args)
        {
        }
        /**
         * @return array
         */
        public static function get_argument_aliases()
        {
        }
        /**
         * @return WPML_LS_Slot_Factory
         */
        private function get_slot_factory()
        {
        }
    }
    class WPML_LS_Actions extends \WPML_LS_Public_API
    {
        public function init_hooks()
        {
        }
        /**
         * @param array       $args
         * @param string|null $twig_template
         */
        public function callback($args, $twig_template = \null)
        {
        }
        /**
         * @param array $args
         *
         * @return array
         */
        private function parse_legacy_actions($args)
        {
        }
    }
    /**
     * Class WPML_LS_Shortcodes
     */
    class WPML_LS_Shortcodes extends \WPML_LS_Public_API
    {
        public function init_hooks()
        {
        }
        /**
         * @param array|string $args
         * @param string|null  $content
         * @param string       $tag
         *
         * @return string
         */
        public function callback($args, $content = \null, $tag = '')
        {
        }
        /**
         * @param array  $args
         * @param string $tag
         *
         * @return mixed
         */
        private function parse_legacy_shortcodes($args, $tag)
        {
        }
    }
    class WPML_LS_Menu_Item
    {
        /**
         * @see wp_setup_nav_menu_item() to decorate the object
         */
        public $ID;
        // The term_id if the menu item represents a taxonomy term.
        public $attr_title;
        // The title attribute of the link element for this menu item.
        public $classes = array();
        // The array of class attribute values for the link element of this menu item.
        public $db_id;
        // The DB ID of this item as a nav_menu_item object, if it exists (0 if it doesn't exist).
        public $description;
        // The description of this menu item.
        public $menu_item_parent;
        // The DB ID of the nav_menu_item that is this item's menu parent, if any. 0 otherwise.
        public $object = 'wpml_ls_menu_item';
        // The type of object originally represented, such as "category," "post", or "attachment."
        public $object_id;
        // The DB ID of the original object this menu item represents, e.g. ID for posts and term_id for categories.
        public $post_parent;
        // The DB ID of the original object's parent object, if any (0 otherwise).
        public $post_title;
        // A "no title" label if menu item represents a post that lacks a title.
        public $target;
        // The target attribute of the link element for this menu item.
        public $title;
        // The title of this menu item.
        public $type = 'wpml_ls_menu_item';
        // The family of objects originally represented, such as "post_type" or "taxonomy."
        public $type_label;
        // The singular label used to describe this type of menu item.
        public $url;
        // The URL to which this menu item points.
        public $xfn;
        // The XFN relationship expressed in the link of this menu item.
        public $_invalid = \false;
        // Whether the menu item represents an object that no longer exists.
        public $menu_order;
        public $post_type = 'nav_menu_item';
        // * Extra property => see [wpmlcore-3855]
        /**
         * WPML_LS_Menu_Item constructor.
         * @param array  $language
         * @param string $item_content
         */
        public function __construct($language, $item_content)
        {
        }
        /**
         * @param array  $lang
         * @param string $item_content
         */
        private function decorate_object($lang, $item_content)
        {
        }
        /**
         * @param string $property
         *
         * @return mixed
         */
        public function __get($property)
        {
        }
    }
    class WPML_LS_Templates
    {
        const CONFIG_FILE = 'config.json';
        const OPTION_NAME = 'wpml_language_switcher_template_objects';
        /** @var  @var string $uploads_path */
        private $uploads_path;
        /**
         * @var WPML_File
         */
        private $wpml_file;
        /* @var array $templates Collection of WPML_LS_Template */
        private $templates = \false;
        /* @var string $ds */
        private $ds = \DIRECTORY_SEPARATOR;
        public function __construct(\WPML_File $wpml_file = \null)
        {
        }
        public function init_hooks()
        {
        }
        /**
         * @return array
         */
        public function after_setup_theme_action()
        {
        }
        public function activated_plugin_action()
        {
        }
        /**
         * @param null|array $in_array
         *
         * @return array
         */
        public function get_templates($in_array = \null)
        {
        }
        /**
         * @param string $template_slug
         *
         * @return WPML_LS_Template
         */
        public function get_template($template_slug)
        {
        }
        public function get_all_templates_data()
        {
        }
        /**
         * @return array
         */
        private function init_available_templates()
        {
        }
        /**
         * @param array $dirs_to_scan
         *
         * @return array
         */
        private function scan_template_paths($dirs_to_scan)
        {
        }
        /**
         * @param string $template_path
         *
         * @return array
         */
        private function parse_template_config($template_path)
        {
        }
        /**
         * @param string $ext
         * @param string $template_path
         * @param array $config
         *
         * @return array|null
         */
        private function get_files($ext, $template_path, $config)
        {
        }
        /**
         * @param mixed|string|null $name
         * @param string $path
         *
         * @return string
         */
        private function get_unique_name($name, $path)
        {
        }
        /**
         * @param string $path
         *
         * @return bool
         */
        private function is_core_template($path)
        {
        }
        private function get_templates_from_transient()
        {
        }
        /**
         * @param WPML_LS_Template[] $templates
         *
         * @return bool
         */
        private function are_template_paths_valid($templates)
        {
        }
        /**
         * @return null|string
         */
        private function get_uploads_path()
        {
        }
    }
    class WPML_LS_Template extends \WPML_Templates_Factory
    {
        const FILENAME = 'template.twig';
        /* @var array $template */
        private $template;
        /* @var array $model */
        private $model;
        /* @var string $prefix */
        private $prefix = 'wpml-ls-';
        /**
         * WPML_Language_Switcher_Menu constructor.
         *
         * @param array $template_data
         * @param array $template_model
         */
        public function __construct($template_data, $template_model = array())
        {
        }
        /**
         * Make sure some elements are of array type
         *
         * @param array $template_data
         *
         * @return array
         */
        private function format_data($template_data)
        {
        }
        /**
         * @param array $model
         */
        public function set_model($model)
        {
        }
        /**
         * @return string
         */
        public function get_html()
        {
        }
        /**
         * @param bool $with_version
         *
         * @return array
         */
        public function get_styles($with_version = \false)
        {
        }
        /**
         * @return bool
         */
        public function has_styles()
        {
        }
        /**
         * @param bool $with_version
         *
         * @return array
         */
        public function get_scripts($with_version = \false)
        {
        }
        /**
         * @param string $url
         *
         * @return string
         */
        private function add_resource_version($url)
        {
        }
        /**
         * @param int $index
         *
         * @return string
         */
        public function get_resource_handler($index)
        {
        }
        /**
         * @return mixed|string|bool
         */
        public function get_inline_style_handler()
        {
        }
        /**
         * @return string
         */
        public function get_version()
        {
        }
        protected function init_template_base_dir()
        {
        }
        /**
         * @return string Template filename
         */
        public function get_template()
        {
        }
        /**
         * @return array
         */
        public function get_model()
        {
        }
        /**
         * @return array
         */
        public function get_template_data()
        {
        }
        /**
         * return bool
         */
        public function is_core()
        {
        }
        /**
         * @return array
         */
        public function supported_slot_types()
        {
        }
        /**
         * @return array
         */
        public function force_settings()
        {
        }
        public function is_path_valid()
        {
        }
        /**
         * @param string $template_string
         */
        public function set_template_string($template_string)
        {
        }
    }
    class WPML_LS_Settings
    {
        const SETTINGS_SLUG = 'wpml_language_switcher';
        /** @var  SitePress $sitepress */
        protected $sitepress;
        /* @var array $settings */
        private $settings;
        /* @var WPML_LS_Templates $templates */
        private $templates;
        /* @var WPML_LS_Slot_Factory $slot_factory */
        private $slot_factory;
        /* @var WPML_LS_Migration $migration */
        private $migration;
        /* @var WPML_LS_Settings_Sanitize $sanitizer */
        private $sanitizer;
        /* @var WPML_LS_Settings_Strings $strings */
        private $strings;
        /* @var WPML_LS_Settings_Color_Presets $color_presets */
        private $color_presets;
        /**
         * WPML_LS_Settings constructor.
         *
         * @param WPML_LS_Templates $templates
         * @param SitePress                        $sitepress
         * @param WPML_LS_Slot_Factory             $slot_factory
         * @param WPML_LS_Migration                $migration
         */
        public function __construct($templates, $sitepress, $slot_factory, $migration = \null)
        {
        }
        public function init_hooks()
        {
        }
        /**
         * @param array $ls_config
         */
        public function reset_ls_settings_action(array $ls_config)
        {
        }
        /**
         * @return string|void
         */
        public function get_restore_redirect_url()
        {
        }
        /**
         * @param array $arr
         *
         * @return array
         */
        public function read_config_settings_recursive($arr)
        {
        }
        /**
         * @return string
         */
        public function get_settings_base_slug()
        {
        }
        /**
         * @return array
         */
        public function get_settings()
        {
        }
        /**
         * @return array
         */
        public function get_settings_model()
        {
        }
        /**
         * @return array
         */
        private function get_default_settings()
        {
        }
        /**
         * @return array
         */
        private function get_shared_settings_keys()
        {
        }
        private function init_shared_settings()
        {
        }
        /**
         * @param $new_settings
         */
        private function persist_shared_settings($new_settings)
        {
        }
        private function maybe_init_settings()
        {
        }
        private function handle_corrupted_settings()
        {
        }
        /**
         * @param array $corrupted_settings
         */
        private function add_corrupted_settings_notice($corrupted_settings)
        {
        }
        /**
         * @return array
         */
        public function get_registered_sidebars()
        {
        }
        /**
         * @return array
         */
        public function get_available_menus()
        {
        }
        /**
         * @param $new_settings
         */
        private function persist_settings($new_settings)
        {
        }
        /**
         * @param string $slot_group
         * @param string $slot_slug
         *
         * @return WPML_LS_Slot
         */
        public function get_slot($slot_group, $slot_slug)
        {
        }
        /**
         * @param int $term_id
         *
         * @return WPML_LS_Slot
         */
        public function get_menu_settings_from_id($term_id)
        {
        }
        /**
         * @return array
         */
        public function get_active_slots()
        {
        }
        /**
         * @return array
         */
        public function get_active_templates()
        {
        }
        /**
         * @param string $key
         *
         * @return mixed string|array|null
         */
        public function get_setting($key)
        {
        }
        /**
         * @param array $new_settings
         */
        public function save_settings($new_settings)
        {
        }
        /**
         * @param array $settings
         *
         * @return array
         */
        public function convert_slot_settings_to_objects(array $settings)
        {
        }
        /**
         * @param $sidebar_slots
         */
        private function synchronize_widget_instances($sidebar_slots)
        {
        }
        /** @return array */
        private function get_refreshed_sidebars_widgets()
        {
        }
        /**
         * @param array $old_sidebars
         * @param array $sidebars
         */
        public function update_option_sidebars_widgets_action($old_sidebars, $sidebars)
        {
        }
        /**
         * @param string $sidebar_slug
         * @param array $widgets
         */
        private function synchronize_sidebar_settings($sidebar_slug, $widgets)
        {
        }
        /**
         * @param array      $instance
         * @param array      $new_instance
         * @param array|null $old_instance
         * @param WP_Widget  $widget
         *
         * @return array
         */
        public function widget_update_callback_filter(array $instance, array $new_instance, $old_instance, \WP_Widget $widget)
        {
        }
        /**
         * @param array $widget_instance
         *
         * @return WPML_LS_Slot
         */
        private function get_slot_from_widget_instance($widget_instance)
        {
        }
        /**
         * Find in which sidebar a language switcher instance is set
         *
         * @param string $widget_to_find
         *
         * @return bool|string
         */
        private function find_parent_sidebar($widget_to_find)
        {
        }
        /**
         * Find the first language switcher in an array of widgets
         *
         * @param array $widgets
         *
         * @return string
         */
        private function find_first_ls_widget($widgets)
        {
        }
        /**
         * @return array
         */
        public function get_ordered_languages()
        {
        }
        /**
         * @return array
         */
        public function get_default_color_schemes()
        {
        }
        /**
         * @param mixed|null|string $slug
         *
         * @return mixed|array|string
         */
        public function get_core_templates($slug = \null)
        {
        }
        /**
         * @param string|null $template_slug
         *
         * @return bool
         */
        public function can_load_styles($template_slug = \null)
        {
        }
        /**
         * @param string|null $template_slug
         *
         * @return bool
         */
        public function can_load_script($template_slug = \null)
        {
        }
        /**
         * @return WPML_LS_Migration
         */
        private function migration()
        {
        }
    }
    class WPML_LS_Migration
    {
        const ICL_OPTIONS_SLUG = 'icl_sitepress_settings';
        /* @var WPML_LS_Settings $settings */
        private $settings;
        /* @var SitePress $sitepress */
        private $sitepress;
        /* @var WPML_LS_Slot_Factory $slot_factory */
        private $slot_factory;
        /* @var array $old_settings */
        private $old_settings;
        /**
         * WPML_LS_Migration constructor.
         *
         * @param WPML_LS_Settings $settings
         * @param SitePress                       $sitepress
         * @param WPML_LS_Slot_Factory            $slot_factory
         */
        public function __construct($settings, $sitepress, $slot_factory)
        {
        }
        /**
         * @param array $old_settings
         *
         * @return mixed
         */
        public function get_converted_settings($old_settings)
        {
        }
        /**
         * @return array
         */
        private function get_converted_global_settings()
        {
        }
        /**
         * @return array
         */
        private function get_converted_menus_settings()
        {
        }
        /**
         * @return array
         */
        private function get_converted_sidebars_settings()
        {
        }
        /**
         * @return array
         */
        private function get_converted_footer_settings()
        {
        }
        /**
         * @return array
         */
        private function get_converted_post_translations_settings()
        {
        }
        /**
         * @return array
         */
        private function get_converted_shortcode_actions_settings()
        {
        }
        /**
         * @param string $context
         *
         * @return array
         */
        private function get_color_picker_settings_for($context)
        {
        }
        /**
         * @param string $key
         *
         * @return mixed|string|int|null
         */
        private function get_old_setting($key)
        {
        }
        /**
         * @param string $slot_type
         *
         * @return mixed
         */
        private function get_template_for($slot_type)
        {
        }
        /**
         * @return bool
         */
        private function has_old_keys()
        {
        }
        /**
         * @since 3.7.0 Convert menu LS handled now by ID instead of slugs previously
         *
         * @param array $settings
         *
         * @return array
         */
        public function convert_menu_ids($settings)
        {
        }
    }
    /**
     * Created by PhpStorm.
     * User: bruce
     * Date: 17/10/17
     * Time: 5:18 PM
     */
    class WPML_LS_Languages_Cache
    {
        private $cache_key;
        private $cache;
        public function __construct($template_args, $current_language, $default_language, $wp_query)
        {
        }
        public function get()
        {
        }
        public function set($ls_languages)
        {
        }
    }
    class WPML_LS_Settings_Strings
    {
        private $strings_meta = array('availability_text' => array('domain' => 'WPML', 'name' => 'Text for alternative languages for posts'), 'widget_title' => array('domain' => 'Widgets', 'name' => 'widget title'));
        /* @var WPML_LS_Slot_Factory $slot_factory */
        private $slot_factory;
        public function __construct($slot_factory)
        {
        }
        /**
         * @param array $new_settings
         * @param array $old_settings
         */
        public function register_all($new_settings, $old_settings)
        {
        }
        /**
         * @param array $settings
         *
         * @return array
         */
        public function translate_all($settings)
        {
        }
        /**
         * @param WPML_LS_Slot $slot
         * @param WPML_LS_Slot $old_slot
         */
        private function register_slot_strings(\WPML_LS_Slot $slot, \WPML_LS_Slot $old_slot)
        {
        }
        /**
         * @param WPML_LS_Slot $slot
         *
         * @return WPML_LS_Slot
         */
        private function translate_slot_strings($slot)
        {
        }
        /**
         * @param string $key
         * @param string $string_value
         *
         * @return string
         */
        private function get_string_name($key, $string_value)
        {
        }
    }
}
namespace WPML\LanguageSwitcher\AjaxNavigation {
    class Hooks implements \IWPML_Frontend_Action, \IWPML_DIC_Action
    {
        public function add_hooks()
        {
        }
        public function enqueueScripts()
        {
        }
        /**
         * @return bool
         */
        private function isEnabled()
        {
        }
    }
}
namespace {
    /**
     * Class WPML_Language_Switcher
     *
     * Main class
     */
    class WPML_Language_Switcher extends \WPML_SP_User
    {
        /* @var array $dependencies */
        private $dependencies;
        /**
         * WPML_Language_Switcher constructor.
         *
         * @param Sitepress $sitepress
         * @param WPML_LS_Dependencies_Factory $dependencies
         */
        public function __construct(\SitePress $sitepress, \WPML_LS_Dependencies_Factory $dependencies = \null)
        {
        }
        public function init_hooks()
        {
        }
        public function init_admin_hooks()
        {
        }
        /**
         * @param string $group
         * @param string $slot
         *
         * @return WPML_LS_Slot
         */
        public function get_slot($group, $slot)
        {
        }
        /**
         * @param WPML_LS_Slot $slot
         *
         * @return string
         */
        public function render($slot)
        {
        }
        /**
         * @param string     $type 'sidebars', 'menus', 'statics'
         * @param string|int $slug_or_id
         *
         * @return string
         */
        public function get_button_to_edit_slot($type, $slug_or_id)
        {
        }
        /**
         * @return array
         */
        public static function parameters()
        {
        }
    }
    /**
     * Class WPML_LS_Slot
     */
    class WPML_LS_Slot
    {
        /* @var array $properties */
        private $properties = array();
        /* @var array $protected_properties */
        private $protected_properties = array('slot_group', 'slot_slug');
        /**
         * WPML_Language_Switcher_Slot constructor.
         *
         * @param array $args
         */
        public function __construct(array $args = array())
        {
        }
        /**
         * @param string $property
         *
         * @return mixed
         */
        public function get($property)
        {
        }
        /**
         * @param string $property
         * @param mixed  $value
         */
        public function set($property, $value)
        {
        }
        /**
         * @return mixed|string|null
         */
        public function group()
        {
        }
        /**
         * @return mixed|string|null
         */
        public function slug()
        {
        }
        /**
         * @return bool
         */
        public function is_menu()
        {
        }
        /**
         * @return bool
         */
        public function is_sidebar()
        {
        }
        /**
         * @return bool
         */
        public function is_footer()
        {
        }
        /**
         * @return bool
         */
        public function is_post_translations()
        {
        }
        /**
         * @return bool
         */
        public function is_shortcode_actions()
        {
        }
        /**
         * @return bool
         */
        public function is_enabled()
        {
        }
        /**
         * @return mixed
         */
        public function template()
        {
        }
        /**
         * @return mixed
         */
        public function template_string()
        {
        }
        /**
         * @param array $args
         */
        private function set_properties(array $args)
        {
        }
        /**
         * @return array
         */
        protected function get_allowed_properties()
        {
        }
        /**
         * @param mixed $value
         * @param array $meta_data
         *
         * @return mixed
         */
        private function sanitize($value, array $meta_data)
        {
        }
        /**
         * The use of a plain object does not work in Twig
         * e.g: slot_settings[ option.name ~ "_normal" ] (see in panel-colors.twig)
         *
         * @return array
         */
        public function get_model()
        {
        }
        /**
         * @param string $slug
         *
         * @return string|null
         */
        protected function get_core_template($slug)
        {
        }
    }
    class WPML_LS_Footer_Slot extends \WPML_LS_Slot
    {
        /**
         * @return array
         */
        protected function get_allowed_properties()
        {
        }
    }
    class WPML_LS_Shortcode_Actions_Slot extends \WPML_LS_Slot
    {
        /**
         * @return array
         */
        protected function get_allowed_properties()
        {
        }
        public function is_enabled()
        {
        }
    }
    class WPML_LS_Sidebar_Slot extends \WPML_LS_Slot
    {
        /**
         * @return bool
         */
        public function is_enabled()
        {
        }
        /**
         * @return array
         */
        protected function get_allowed_properties()
        {
        }
    }
    class WPML_LS_Post_Translations_Slot extends \WPML_LS_Slot
    {
        /**
         * @return array
         */
        protected function get_allowed_properties()
        {
        }
    }
    class WPML_LS_Menu_Slot extends \WPML_LS_Slot
    {
        /**
         * @return bool
         */
        public function is_enabled()
        {
        }
        /**
         * @return array
         */
        protected function get_allowed_properties()
        {
        }
    }
    class WPML_LS_Slot_Factory
    {
        /**
         * @param array|WPML_LS_Slot $args
         *
         * @return WPML_LS_Slot
         */
        public function get_slot($args)
        {
        }
        /**
         * @param string $slot_group
         *
         * @return array
         */
        public function get_default_slot_arguments($slot_group)
        {
        }
        /**
         * @param string $slot_group
         *
         * @return WPML_LS_Slot
         */
        public function get_default_slot($slot_group)
        {
        }
        /**
         * @param string $slug
         *
         * @return string|null
         */
        public function get_core_templates($slug)
        {
        }
    }
    /**
     * Created by PhpStorm.
     * User: bruce
     * Date: 17/10/17
     * Time: 10:56 PM
     */
    class WPML_LS_Display_As_Translated_Link
    {
        /** @var SitePress $sitepress */
        private $sitepress;
        /** @var IWPML_URL_Converter_Strategy $url_converter */
        private $url_converter;
        /** @var WP_Query $wp_query */
        private $wp_query;
        /** @var WPML_Translation_Element_Factory $element_factory */
        private $element_factory;
        /** @var string $default_language */
        private $default_language;
        /** @var string $processed_language */
        private $processed_language;
        public function __construct(\SitePress $sitepress, \IWPML_URL_Converter_Strategy $url_converter, \WP_Query $wp_query, \WPML_Translation_Element_Factory $element_factory)
        {
        }
        public function get_url($translations, $lang)
        {
        }
        private function get_post_url($translations, $lang, $queried_object)
        {
        }
        private function get_term_url($translations, $lang, $queried_object)
        {
        }
        /**
         * The permalink needs to be adjusted when the URL structure contains the category tag (%category%).
         *
         * @param WP_Term $cat
         *
         * @return WP_Term
         */
        public function adjust_category_in_post_permalink($cat)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    abstract class WPML_Privacy_Content implements \IWPML_Action
    {
        public function add_hooks()
        {
        }
        public function privacy_policy()
        {
        }
        /**
         * @return string
         */
        protected abstract function get_plugin_name();
        /**
         * @return string|array a single or an array of strings (plain text or HTML). Array items will be wrapped by a paragraph tag.
         */
        protected abstract function get_privacy_policy();
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Core_Privacy_Content extends \WPML_Privacy_Content
    {
        /**
         * @return string
         */
        protected function get_plugin_name()
        {
        }
        /**
         * @return string|array
         */
        protected function get_privacy_policy()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Privacy_Content_Factory implements \IWPML_Backend_Action_Loader
    {
        /**
         * @return IWPML_Action
         */
        public function create()
        {
        }
    }
    class WPML_Debug_Information
    {
        /** @var WPDB $wpdb */
        public $wpdb;
        /** @var SitePress $sitepress */
        protected $sitepress;
        /**
         * @param wpdb      $wpdb
         * @param SitePress $sitepress
         */
        public function __construct($wpdb, $sitepress)
        {
        }
        public function run()
        {
        }
        function get_core_info()
        {
        }
        function get_plugins_info()
        {
        }
        function get_theme_info()
        {
        }
        function do_json_encode($data)
        {
        }
    }
    class WPML_Table_Collate_Fix implements \IWPML_AJAX_Action, \IWPML_Backend_Action, \IWPML_DIC_Action
    {
        const AJAX_ACTION = 'fix_tables_collation';
        /**
         * @var wpdb
         */
        private $wpdb;
        /** @var WPML_Upgrade_Schema $schema */
        private $schema;
        public function __construct(\wpdb $wpdb, \WPML_Upgrade_Schema $schema)
        {
        }
        public function add_hooks()
        {
        }
        public function fix_collate_ajax()
        {
        }
        public function render_troubleshooting_button()
        {
        }
        public function enqueue_scripts($hook)
        {
        }
        public function fix_collate()
        {
        }
        /**
         * @return array
         */
        private function get_all_wpml_tables()
        {
        }
    }
    /**
     * Class WPML_Troubleshoot_Action
     * @author onTheGoSystems
     */
    class WPML_Troubleshoot_Action
    {
        const SYNC_POSTS_TAXONOMIES_SLUG = 'synchronize_posts_taxonomies';
        /**
         * @return bool
         */
        public function is_valid_request()
        {
        }
    }
}
namespace WPML\Troubleshooting {
    class AssignTranslationStatusToDuplicates
    {
        public static function run()
        {
        }
        /**
         * @return array
         */
        private static function get_duplicates()
        {
        }
    }
}
namespace {
    class WPML_Fix_Type_Assignments extends \WPML_WPDB_And_SP_User
    {
        /**
         * WPML_Fix_Type_Assignments constructor.
         *
         * @param SitePress $sitepress
         */
        public function __construct($sitepress)
        {
        }
        /**
         * Runs various database repair and cleanup actions on icl_translations.
         *
         * @return int Number of rows in icl_translations that were fixed
         */
        public function run()
        {
        }
        /**
         * Deletes rows from icl_translations that are duplicated in terms of their
         * element id and within their meta type ( post,taxonomy,package ...),
         * with the duplicate actually being of the correct type.
         *
         * @return int number of rows fixed
         */
        private function fix_broken_duplicate_rows()
        {
        }
        /**
         * Fixes all taxonomy term rows in icl_translations, which have a corrupted
         * element_type set, different from the one actually set in the term_taxonomy
         * table.
         *
         * @return int number of rows fixed
         */
        private function fix_broken_taxonomy_assignments()
        {
        }
        /**
         * Fixes all post rows in icl_translations, which have a corrupted
         * element_type set, different from the one actually set in the wp_posts
         * table.
         *
         * @return int number of rows fixed
         */
        private function fix_broken_post_assignments()
        {
        }
        /**
         * Fixes all instances of a different element_type having been set for
         * an original element and it's translation, by setting the original's type
         * on the corrupted translation rows.
         *
         * @return int number of rows fixed
         */
        private function fix_broken_type_assignments()
        {
        }
        /**
         * Fixes all rows that have an empty string instead of NULL or a source language
         * equal to its actual language set by setting the source language to NULL.
         *
         * @return int number of rows fixed
         */
        private function fix_wrong_source_language()
        {
        }
        /**
         * Fixes instances of the source element of a trid being missing, by assigning
         * the oldest element ( determined by the lowest element_id ) as the original
         * element in a trid.
         *
         * @return int number of rows fixed
         */
        private function fix_missing_original()
        {
        }
    }
    /**
     * Class WPML_Troubleshoot_Sync_Posts_Taxonomies
     */
    class WPML_Troubleshoot_Sync_Posts_Taxonomies
    {
        const BATCH_SIZE = 5;
        /** @var SitePress $sitepress */
        private $sitepress;
        /** @var WPML_Term_Translation_Utils $term_translation_utils */
        private $term_translation_utils;
        public function __construct(\SitePress $sitePress, \WPML_Term_Translation_Utils $term_translation_utils)
        {
        }
        public function run()
        {
        }
        /**
         * @param string $type
         * @param int    $batch_number
         *
         * @return array
         */
        private function get_posts_batch($type, $batch_number)
        {
        }
        /**
         * @param array $posts
         */
        private function synchronize_batch($posts)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Custom_Fields_Post_Meta_Info_Factory implements \IWPML_AJAX_Action_Loader, \IWPML_Backend_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_Translate_Link_Targets_In_Custom_Fields_Hooks
    {
        /**
         * WPML_Translate_Link_Targets_In_Custom_Fields_Hook constructor.
         *
         * @param WPML_Translate_Link_Targets_In_Custom_Fields $translate_links
         * @param WPML_WP_API $wp_api
         */
        public function __construct($translate_links, &$wp_api)
        {
        }
    }
    class WPML_Translate_Link_Targets
    {
        /* @var AbsoluteLinks $absolute_links */
        private $absolute_links;
        /* @var WPML_Absolute_To_Permalinks $permalinks_converter */
        private $permalinks_converter;
        /**
         * WPML_Translate_Link_Targets constructor.
         *
         * @param AbsoluteLinks $absolute_links
         * @param WPML_Absolute_To_Permalinks $permalinks_converter
         */
        public function __construct(\AbsoluteLinks $absolute_links, \WPML_Absolute_To_Permalinks $permalinks_converter)
        {
        }
        /**
         * convert_text
         *
         * @param string $text
         *
         * @return string
         */
        public function convert_text($text)
        {
        }
        public function is_internal_url($url)
        {
        }
        /**
         * @param string $url
         *
         * @return string
         */
        public function convert_url($url)
        {
        }
    }
    class WPML_Translate_Link_Targets_In_Custom_Fields extends \WPML_Translate_Link_Targets
    {
        /* @var TranslationManagement $tm_instance */
        private $tm_instance;
        /* @var WPML_WP_API $wp_api */
        private $wp_api;
        /* @var array $meta_keys */
        private $meta_keys;
        /**
         * WPML_Translate_Link_Targets_In_Custom_Fields constructor.
         *
         * @param TranslationManagement $tm_instance
         * @param WPML_WP_API $wp_api
         * @param AbsoluteLinks $absolute_links
         * @param WPML_Absolute_To_Permalinks $permalinks_converter
         */
        public function __construct(&$tm_instance, &$wp_api, $absolute_links, $permalinks_converter)
        {
        }
        public function has_meta_keys()
        {
        }
        /**
         * maybe_translate_link_targets
         *
         * @param string|array $metadata - Always null for post metadata.
         * @param int $object_id - Post ID for post metadata
         * @param string $meta_key - metadata key.
         * @param bool $single - Indicates if processing only a single $metadata value or array of values.
         * @return Original or Modified $metadata.
         */
        public function maybe_translate_link_targets($metadata, $object_id, $meta_key, $single)
        {
        }
        private function convert_sub_fields($sub_fields, $metadata)
        {
        }
    }
    class WPML_Sync_Custom_Fields
    {
        /** @var WPML_Translation_Element_Factory $element_factory */
        private $element_factory;
        /** @var array $fields_to_sync */
        private $fields_to_sync;
        /**
         * WPML_Sync_Custom_Fields constructor.
         *
         * @param WPML_Translation_Element_Factory $element_factory
         * @param array                            $fields_to_sync
         */
        public function __construct(\WPML_Translation_Element_Factory $element_factory, array $fields_to_sync)
        {
        }
        /**
         * @param int    $post_id_from
         * @param string $meta_key
         */
        public function sync_to_translations($post_id_from, $meta_key)
        {
        }
        /**
         * @param int $post_id_from
         */
        public function sync_all_custom_fields($post_id_from)
        {
        }
        /**
         * @param int    $post_id_from
         * @param int    $post_id_to
         * @param string $meta_key
         */
        public function sync_custom_field($post_id_from, $post_id_to, $meta_key)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Custom_Fields_Post_Meta_Info implements \IWPML_Action
    {
        const RESOURCES_HANDLE = 'wpml-cf-info';
        const AJAX_ACTION = 'wpml-cf-info-get';
        private $translatable_element_factory;
        /**
         * WPML_Custom_Fields_Post_Meta_Info constructor.
         *
         * @param WPML_Translation_Element_Factory $translatable_element_factory
         */
        public function __construct(\WPML_Translation_Element_Factory $translatable_element_factory)
        {
        }
        public function add_hooks()
        {
        }
        public function get_info_ajax()
        {
        }
        public function get_info_filter($ignore, $post_id, $meta_key)
        {
        }
        private function get_info($post_id, $meta_key)
        {
        }
    }
    class WPML_Copy_Once_Custom_Field_Factory implements \IWPML_Backend_Action_Loader, \IWPML_Frontend_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_Copy_Once_Custom_Field implements \IWPML_Action
    {
        /** @var SitePress $sitepress */
        private $sitepress;
        /** @var WPML_Post_Translation $wpml_post_translation */
        private $wpml_post_translation;
        /**
         * WPML_Copy_Once_Custom_Field constructor.
         *
         * @param SitePress             $sitepress
         * @param WPML_Post_Translation $wpml_post_translation
         */
        public function __construct(\SitePress $sitepress, \WPML_Post_Translation $wpml_post_translation)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param int $post_id
         */
        public function copy($post_id)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_XMLRPC extends \WPML_SP_User
    {
        private $xmlrpc_call_methods_for_save_post;
        /**
         * WPML_XMLRPC constructor.
         *
         * @param SitePress        $sitepress
         */
        public function __construct(\SitePress $sitepress)
        {
        }
        public function init_hooks()
        {
        }
        function get_languages($args)
        {
        }
        public function get_post_trid($args)
        {
        }
        /**
         * @param int   $post_ID
         * @param array $args
         *
         * @throws \UnexpectedValueException
         * @throws \InvalidArgumentException
         */
        public function meta_weblog_xmlrpc_post_update_action($post_ID, $args)
        {
        }
        public function save_post_action($pidd, $post)
        {
        }
        /**
         * @param int      $post_ID
         * @param string   $post_type
         * @param string   $post_language_code
         * @param int|bool $trid
         *
         * @throws \InvalidArgumentException
         * @throws \UnexpectedValueException
         */
        private function set_post_language($post_ID, $post_type, $post_language_code, $trid = \false)
        {
        }
        public function xmlrpc_call($action)
        {
        }
        public function xmlrpc_methods($methods)
        {
        }
    }
    class WPML_Remove_Pages_Not_In_Current_Language extends \WPML_WPDB_And_SP_User
    {
        private $posts_from_ids = array();
        private $posts_in_other_languages = array();
        /**
         * @param array $arr Array of posts to filter
         * @param array $get_page_arguments Arguments passed to the `get_pages` function
         *
         * @return array
         */
        function filter_pages($arr, $get_page_arguments)
        {
        }
        /**
         * @param $post_type
         * @param $current_language
         *
         * @return array
         */
        private function get_posts_in_other_languages($post_type, $current_language)
        {
        }
        /**
         * @param $get_page_arguments
         * @param $new_arr
         *
         * @return false|string
         */
        private function find_post_type($get_page_arguments, $new_arr)
        {
        }
        /**
         * @param $cache_key
         *
         * @return bool
         */
        private function is_cached($cache_key)
        {
        }
    }
    /**
     * Class WPML_TM_Post_Edit_Custom_Field_Settings_Menu
     */
    class WPML_TM_Post_Edit_Custom_Field_Settings_Menu
    {
        /** @var  WPML_Custom_Field_Setting_Factory $setting_factory */
        private $setting_factory;
        /** @var WP_Post $post */
        private $post;
        private $rendered = \false;
        /**
         * WPML_TM_Post_Edit_Custom_Field_Settings_Menu constructor.
         *
         * @param WPML_Custom_Field_Setting_Factory $settings_factory
         * @param WP_Post                           $post
         */
        public function __construct(&$settings_factory, $post)
        {
        }
        /**
         * @return string
         */
        public function render()
        {
        }
        /**
         * @return bool true if there were actual custom fields to display options for
         */
        public function is_rendered()
        {
        }
    }
    class WPML_Custom_Types_Translation_UI
    {
        /** @var array */
        private $translation_option_class_names;
        /** @var WPML_Translation_Modes $translation_modes */
        private $translation_modes;
        /** @var WPML_UI_Unlock_Button $unlock_button_ui */
        private $unlock_button_ui;
        public function __construct(\WPML_Translation_Modes $translation_modes, \WPML_UI_Unlock_Button $unlock_button_ui)
        {
        }
        public function render_custom_types_header_ui($type_label)
        {
        }
        public function render_row($content_label, $name, $content_slug, $disabled, $current_translation_mode, $unlocked)
        {
        }
        /**
         * @param bool $unlocked
         * @param bool $disabled
         * @param int $mode
         * @param string $content_slug
         *
         * @return array
         */
        public static function get_disabled_state_for_mode($unlocked, $disabled, $mode, $content_slug)
        {
        }
    }
    class WPML_Taxonomy_Translation_Screen_Data extends \WPML_WPDB_And_SP_User
    {
        const WPML_TAXONOMY_TRANSLATION_MAX_TERMS_RESULTS_SET = 1000;
        /** @var  string $taxonomy */
        private $taxonomy;
        /**
         * WPML_Taxonomy_Translation_Screen_Data constructor.
         *
         * @param SitePress $sitepress
         * @param string    $taxonomy
         */
        public function __construct(&$sitepress, $taxonomy)
        {
        }
        /**
         * The returned array from this function is indexed as follows.
         * It holds an array of all terms to be displayed under [terms]
         * and the count of all terms matching the filter under [count].
         *
         * The array under [terms] itself is index as such:
         * [trid][lang]
         *
         * It holds in itself the terms objects of the to be displayed terms.
         * These are ordered by their names alphabetically.
         * Also their objects are amended by the index $term->translation_of holding the term_taxonomy_id of their original element
         * and their level under $term->level in case of hierarchical terms.
         *
         * Also the index [trid][source_lang] holds the source language of the term group.
         *
         * @return array
         */
        public function terms()
        {
        }
        /**
         * @param $terms array
         *               Turn a numerical array of terms objects into an associative once,
         *               holding the same terms, but indexed by their term_id.
         *
         * @return array
         */
        private function index_terms_array($terms)
        {
        }
        /**
         * @param $trid_group array
         * @param $terms      array
         *                    Transforms the term arrays generated by the Translation Tree class and turns them into
         *                    standard WordPress terms objects.
         *
         * @return mixed
         */
        private function set_language_information($trid_group, $terms)
        {
        }
        /**
         * Orders a list of terms alphabetically and hierarchy-wise
         *
         * @param $terms    array
         *
         * @return array
         */
        private function order_terms_list($terms)
        {
        }
        /**
         * @param $selects array
         *                 Generates a list of to be selected variables in an sql query.
         *
         * @return string
         */
        private function build_select_vars($selects)
        {
        }
        /**
         * @param $selects array
         *                 Returns an array of alias statements to be used in SQL queries with joins.
         *
         * @return array
         */
        private function alias_statements($selects)
        {
        }
        private function build_where_clause($selects)
        {
        }
        /**
         * @param string $from
         * @param array $selects
         * @param int $limit
         *
         * @return string
         */
        private function build_from_clause($from, $selects, $limit)
        {
        }
        /**
         * @param array $all_terms
         *
         * @return array
         */
        private function add_metadata($all_terms)
        {
        }
    }
    /**
     * Class WPML_Custom_Columns
     */
    class WPML_Custom_Columns implements \IWPML_Action
    {
        const COLUMN_KEY = 'icl_translations';
        const CUSTOM_COLUMNS_PRIORITY = 1010;
        /**
         * @param SitePress $sitepress
         */
        private $sitepress;
        /**
         * @var WPML_Post_Status_Display
         */
        public $post_status_display;
        public function __construct(\SitePress $sitepress)
        {
        }
        /**
         * @param array $columns
         *
         * @return array
         */
        public function add_posts_management_column($columns)
        {
        }
        public function get_flags_column()
        {
        }
        /**
         * Add posts management column.
         *
         * @param string   $column_name
         * @param int|null $post_id
         */
        public function add_content_for_posts_management_column($column_name, $post_id = \null)
        {
        }
        /**
         * Check translation management column screen option.
         *
         * @param string $post_type Current post type.
         *
         * @return bool
         */
        public function show_management_column_content($post_type)
        {
        }
        /**
         * Get list of active languages.
         *
         * @return array
         */
        private function get_filtered_active_languages()
        {
        }
        public function add_hooks()
        {
        }
        /**
         * Add custom columns hooks.
         */
        public function add_custom_columns_hooks()
        {
        }
        /**
         * Check if we need to add custom columns on page.
         *
         * @return bool
         */
        private function has_custom_columns()
        {
        }
    }
    /**
     * Class WPML_Translation_Tree
     *
     * @package    wpml-core
     * @subpackage taxonomy-term-translation
     */
    class WPML_Translation_Tree extends \WPML_SP_User
    {
        private $taxonomy;
        private $tree = array();
        private $trid_levels;
        private $language_order;
        private $term_ids;
        /**
         * @param SitePress $sitepress
         * @param string    $element_type
         * @param object[]  $terms
         */
        public function __construct(&$sitepress, $element_type, $terms)
        {
        }
        /**
         * Returns all terms in the translation tree, ordered by hierarchy and as well as alphabetically within a level and/or parent term relationship.
         *
         * @return array
         */
        public function get_alphabetically_ordered_list()
        {
        }
        /**
         * @param array $terms
         *
         * Generates a tree representation of an array of terms objects
         *
         * @return array|bool
         */
        private function get_tree_from_terms_array($terms)
        {
        }
        /**
         * Groups an array of terms objects by their trid and language_code
         *
         * @param array $terms
         *
         * @return array
         */
        private function generate_trid_groups($terms)
        {
        }
        /**
         * @param string $name
         *
         * @return string
         */
        private function get_unique_term_name($name)
        {
        }
        /**
         * @param            array $trids
         * @param array|bool|false $root_trid_group
         * @param int              $level current depth in the tree
         *                                Recursively turns an array of unordered trid objects into a tree.
         *
         * @return array|bool
         */
        private function parse_tree($trids, $root_trid_group, $level)
        {
        }
        /**
         * @param array|bool $parent
         * @param array      $children
         *                   Checks if one trid is the root of another. This is the case if at least one parent child
         *                   relationship between both trids exists.
         *
         * @return bool
         */
        private function is_root($children, $parent)
        {
        }
        private function sort_trids_alphabetically($trid_groups)
        {
        }
        /**
         * @param array $trid_group
         * @param array $existing_list
         *
         * Reads in a trid array and appends it and its children to the input array.
         * This is done in the order parent->alphabetically ordered children -> ( alphabetically ordered children's children) ...
         *
         * @return array
         */
        private function get_children_recursively($trid_group, $existing_list = array())
        {
        }
        /**
         * Adds the hierarchical depth as a variable to all terms.
         * 0 means, that the term has no parent.
         *
         * @param array $tridgroup
         *
         * @return array
         */
        private function add_level_information_to_terms($tridgroup)
        {
        }
        /**
         * Counts the number of terms per language and returns an array of language codes,
         * that is ordered by the number of terms in every language.
         *
         * @param array $terms
         *
         * @return array
         */
        private function get_language_order($terms)
        {
        }
    }
    class WPML_Support_Page
    {
        /**
         * @var \WPML_WP_API
         */
        private $wpml_wp_api;
        /**
         * WPML_Support_Page constructor.
         *
         * @param WPML_WP_API $wpml_wp_api
         */
        public function __construct(&$wpml_wp_api)
        {
        }
        public function display_compatibility_issues()
        {
        }
        /**
         * @return string
         */
        private function get_message()
        {
        }
        private function init_hooks()
        {
        }
        /**
         * @return string
         */
        private function missing_extension_message()
        {
        }
        /**
         * @return string
         */
        private function missing_extension_message_for_php7()
        {
        }
        /**
         * @return string
         */
        private function contact_the_admin()
        {
        }
        /**
         * @param $message
         */
        private function render_message($message)
        {
        }
    }
    class WPML_Admin_Scripts_Setup extends \WPML_Full_Translation_API
    {
        const PRIORITY_ENQUEUE_SCRIPTS = 10;
        /** @var string $page */
        private $page;
        /**
         * @param wpdb                    $wpdb
         * @param SitePress               $sitepress
         * @param WPML_Post_Translation   $post_translation
         * @param WPML_Terms_Translations $term_translation
         * @param string                  $page
         */
        public function __construct(&$wpdb, &$sitepress, &$post_translation, &$term_translation, $page)
        {
        }
        public function add_admin_hooks()
        {
        }
        public function register_styles()
        {
        }
        private function print_js_globals()
        {
        }
        public function wpml_js_scripts_setup()
        {
        }
        /**
         * Prints JavaScript to display correct links on the posts by status break down and also fixes links
         * to category and tag pages
         *
         * @param string $current_language
         */
        private function correct_status_links_js($current_language)
        {
        }
        /**
         * Prints the JavaScript for synchronizing page order or page template on the post edit screen.
         *
         * @param int    $trid
         * @param string $source_lang
         */
        private function print_mo_sync_js($trid, $source_lang)
        {
        }
        /**
         * Prints the JavaScript for synchronizing ping and comment status for a post translation on the post edit screen.
         *
         * @param int    $trid
         * @param string $source_lang
         */
        private function print_ping_and_comment_sync_js($trid, $source_lang)
        {
        }
        /**
         * Prints the JavaScript for disabling editing the post_date on the post edit screen,
         * when the synchronize post_date for translations setting is activated.
         */
        private function print_sync_date_js()
        {
        }
        private function print_tax_sync_js()
        {
        }
        private function get_current_req_post_id()
        {
        }
        private function print_reading_options_js()
        {
        }
        function wpml_css_setup()
        {
        }
        private function verify_home_and_blog_pages_translations()
        {
        }
        /**
         * @param int    $original_page_id
         * @param string $label
         * @param string $additional_css
         *
         * @return string
         */
        private function missing_page_warning($original_page_id, $label, $additional_css = '')
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Custom_Columns_Factory implements \IWPML_Backend_Action_Loader, \IWPML_AJAX_Action_Loader
    {
        private $hooks;
        /**
         * @return WPML_Custom_Columns
         */
        public function create()
        {
        }
    }
    /**
     * Class WPML_Setup_Step_One_Menu
     */
    class WPML_Setup_Step_One_Menu extends \WPML_SP_User
    {
        /**
         * @return string
         */
        public function render()
        {
        }
        /**
         * @param string $def_lang
         *
         * @return string
         */
        private function get_user_lang($def_lang)
        {
        }
        /**
         * @return string
         */
        private function default_lang_preset()
        {
        }
        /**
         * @return string
         */
        private function def_lang_from_fallback()
        {
        }
        /**
         * @param string $locale
         *
         * @return false|string
         */
        private function locale_to_lang_code($locale)
        {
        }
    }
    /**
     * class WPML_Taxonomy_Translation
     *
     * Used by WCML so be careful about modifications to the contructor
     *
     */
    class WPML_Taxonomy_Translation
    {
        private $ui = \null;
        /**
         * WPML_Taxonomy_Translation constructor.
         *
         * @param string $taxonomy if given renders a specific taxonomy,
         *                         otherwise renders a placeholder
         * @param bool[] $args array with possible indices:
         *                     'taxonomy_selector' => bool .. whether or not to show the taxonomy selector
         * @param WPML_UI_Screen_Options_Factory $screen_options_factory
         */
        public function __construct($taxonomy = '', $args = array(), $screen_options_factory = \null)
        {
        }
        /**
         * Echos the HTML that serves as an entry point for the taxonomy translation
         * screen and enqueues necessary js.
         */
        public function render()
        {
        }
    }
    /**
     * Class WPML_Twig_Template_Loader
     */
    class WPML_Twig_Template_Loader
    {
        /**
         * @var array
         */
        private $paths;
        /**
         * WPML_Twig_Template_Loader constructor.
         *
         * @param array $paths
         */
        public function __construct(array $paths)
        {
        }
        /**
         * @return WPML_Twig_Template
         */
        public function get_template()
        {
        }
    }
    class WPML_Inactive_Content_Render extends \WPML_Twig_Template_Loader
    {
        const TEMPLATE = 'inactive-content.twig';
        /** @var WPML_Inactive_Content $inactive_content */
        private $inactive_content;
        public function __construct(\WPML_Inactive_Content $inactive_content, array $paths)
        {
        }
        public function render()
        {
        }
    }
    class WPML_Post_Edit_Screen
    {
        /** @var SitePress $sitepress */
        private $sitepress;
        /**
         * @param SitePress $sitepress
         */
        public function __construct(\SitePress $sitepress)
        {
        }
        /**
         * Enqueues scripts and styles for the post edit screen.
         */
        function scripts_setup()
        {
        }
        /**
         * Filters the preview links on the post edit screen so that they always point to the currently used language
         * domain. This ensures that the user can actually see the preview, as he might not have the login cookie set for
         * the actual language domain of the post.
         *
         * @param string $link
         *
         * @return mixed
         */
        public function preview_post_link_filter($link)
        {
        }
        /**
         * @param array $permalink Array containing the sample permalink with placeholder for the post name, and the post name.
         *
         * @return array
         */
        public function get_sample_permalink_filter(array $permalink)
        {
        }
    }
    /**
     * Class WPML_Lang_Domains_Box
     *
     * Displays the table holding the language domains on languages.php
     */
    class WPML_Lang_Domains_Box extends \WPML_SP_User
    {
        public function render()
        {
        }
        private function render_suggested_url($home, $lang)
        {
        }
    }
    /**
     * Class WPML_User_Options_Menu
     * Renders the WPML UI elements on the WordPress user profile edit screen
     */
    class WPML_User_Options_Menu
    {
        /** @var WP_User $this ->current_user */
        private $current_user;
        private $sitepress;
        /**
         * @var string
         */
        private $user_language;
        /**
         * @var string
         */
        private $user_admin_def_lang;
        /**
         * @var mixed[]
         */
        private $lang_details;
        /**
         * @var string
         */
        private $admin_default_language;
        /**
         * @var string
         */
        private $admin_language;
        /**
         * @var mixed[]
         */
        private $all_languages;
        /**
         * WPML_User_Options_Menu constructor.
         *
         * @param SitePress $sitepress
         * @param WP_User   $current_user
         */
        public function __construct(\SitePress $sitepress, \WP_User $current_user)
        {
        }
        /**
         * @return string the html for the user profile edit screen element WPML
         * adds to it
         */
        public function render()
        {
        }
        /**
         * @param $use_admin_language_for_edit
         */
        private function get_hidden_languages_options($use_admin_language_for_edit)
        {
        }
    }
    /**
     * Class WPML_Taxonomy_Translation_UI
     */
    class WPML_Taxonomy_Translation_UI
    {
        private $sitepress;
        private $taxonomy;
        private $tax_selector;
        private $screen_options;
        /**
         * WPML_Taxonomy_Translation constructor.
         *
         * @param SitePress $sitepress
         * @param string $taxonomy if given renders a specific taxonomy,
         *                         otherwise renders a placeholder
         * @param bool[] $args array with possible indices:
         *                     'taxonomy_selector' => bool .. whether or not to show the taxonomy selector
         * @param WPML_UI_Screen_Options_Factory $screen_options_factory
         */
        public function __construct(\SitePress $sitepress, $taxonomy = '', array $args = array(), \WPML_UI_Screen_Options_Factory $screen_options_factory = \null)
        {
        }
        /**
         * Echos the HTML that serves as an entry point for the taxonomy translation
         * screen and enqueues necessary js.
         */
        public function render()
        {
        }
        /**
         * @return int
         */
        private function get_items_per_page()
        {
        }
        /**
         * @return string
         */
        private function get_help_text()
        {
        }
    }
    class WPML_Plugins_Check
    {
        /**
         * @param string $bundle_json
         * @param string $tm_version
         * @param string $st_version
         * @param string $wcml_version
         */
        public static function disable_outdated($bundle_json, $tm_version, $st_version, $wcml_version)
        {
        }
    }
}
namespace WPML {
    class Plugins
    {
        public static function loadCoreFirst()
        {
        }
    }
}
namespace {
    /**
     * @package    wpml-core
     * @subpackage wpml-user-language
     */
    class WPML_User_Language_Switcher_Resources
    {
        private $nonce_name = 'wpml_user_language_switcher';
        public function __construct()
        {
        }
        public function enqueue_scripts($data)
        {
        }
    }
    /**
     * @package wpml-core
     * @subpackage wpml-user-language
     */
    class WPML_Users_Languages
    {
        /**
         * @var WPML_Language_Code
         */
        private $WPML_Language_Code;
        /**
         * @var WPML_WP_API
         */
        private $WPML_WP_API;
        /**
         * @param WPML_Language_Code $WPML_Language_Code
         * @param WPML_WP_API        $WPML_WP_API
         */
        public function __construct(&$WPML_Language_Code, &$WPML_WP_API)
        {
        }
        public function register_hooks()
        {
        }
        public function wpml_user_language_filter($language, $email)
        {
        }
        private function wpml_user_language($language, $email)
        {
        }
        private function get_recipient_language($email)
        {
        }
        private function get_language_from_globals()
        {
        }
        private function get_language_from_tables($email)
        {
        }
        private function get_language_from_fallbacks()
        {
        }
    }
    /**
     * @package    wpml-core
     * @subpackage wpml-user-language
     */
    class WPML_User_Language_Switcher_UI
    {
        /**
         * @var \WPML_User_Language_Switcher
         */
        private $user_language_switcher;
        /**
         * @var \WPML_User_Language_Switcher_Resources
         */
        private $resources;
        /**
         * WPML_User_Language_Switcher_UI constructor.
         *
         * @param WPML_User_Language_Switcher           $WPML_User_Language_Switcher
         * @param WPML_User_Language_Switcher_Resources $WPML_User_Language_Switcher_Resources
         */
        public function __construct($WPML_User_Language_Switcher, $WPML_User_Language_Switcher_Resources)
        {
        }
        /**
         * @param $args
         * @param $model
         *
         * @return string
         * @throws \WPML\Core\Twig\Error\LoaderError
         * @throws \WPML\Core\Twig\Error\RuntimeError
         * @throws \WPML\Core\Twig\Error\SyntaxError
         */
        public function language_switcher($args, $model)
        {
        }
        /**
         * @param array $model
         *
         * @return string
         * @throws \WPML\Core\Twig\Error\LoaderError
         * @throws \WPML\Core\Twig\Error\RuntimeError
         * @throws \WPML\Core\Twig\Error\SyntaxError
         */
        protected function get_view($model)
        {
        }
    }
    /**
     * @package wpml-core
     * @subpackage wpml-user-language
     */
    class WPML_User_Language
    {
        /** @var  SitePress $sitepress */
        protected $sitepress;
        private $language_changes_history = array();
        private $admin_language_changes_history = array();
        private $language_switched = \false;
        private $wp_locale_fixup = array('el' => 'el');
        /**
         * @var \wpdb|null
         */
        private $wpdb;
        /**
         * WPML_User_Language constructor.
         *
         * @param SitePress $sitepress
         * @param wpdb|null $wpdb
         */
        public function __construct(\SitePress $sitepress, \wpdb $wpdb = \null)
        {
        }
        public function register_hooks()
        {
        }
        /**
         * @param array $wp_languages
         *
         * @return array
         */
        public function intersect_wpml_wp_languages($wp_languages)
        {
        }
        /**
         * @param string $email
         */
        public function switch_language_for_email_action($email)
        {
        }
        /**
         * @param string $email
         */
        private function switch_language_for_email($email)
        {
        }
        public function restore_language_from_email_action()
        {
        }
        private function wpml_restore_language_from_email()
        {
        }
        /**
         * @param int $user_id
         */
        public function sync_admin_user_language_action($user_id)
        {
        }
        public function sync_default_admin_user_languages()
        {
        }
        /**
         * @param int $user_id
         */
        private function sync_admin_user_language($user_id)
        {
        }
        /**
         * @param string $wp_locale
         *
         * @return null|string
         */
        private function select_language_code_from_locale($wp_locale)
        {
        }
        private function user_needs_sync_admin_lang()
        {
        }
        private function set_language_cookie($user_language)
        {
        }
        /**
         * @param int $user_id
         *
         * @return mixed
         */
        private function user_admin_language_for_edit($user_id)
        {
        }
        /**
         * @param string $lang
         */
        public function update_user_lang_on_cookie_update($lang)
        {
        }
        private function is_editing_current_profile()
        {
        }
        private function is_editing_other_profile()
        {
        }
        private function get_wp_locale($lang_details)
        {
        }
        public function update_user_lang_on_site_setup()
        {
        }
    }
    /**
     * @package    wpml-core
     * @subpackage wpml-user-language
     */
    class WPML_Language_Code extends \WPML_SP_User
    {
        private $WPML_WP_API;
        function __construct(&$sitepress)
        {
        }
        function sanitize($code)
        {
        }
        function get_from_user_meta($email)
        {
        }
    }
    /**
     * @package    wpml-core
     * @subpackage wpml-user-language
     */
    class WPML_User_Language_Switcher
    {
        /**
         * @var WPML_Language_Code
         */
        private $WPML_Language_Code;
        /**
         * WPML_User_Language_Switcher constructor.
         *
         * @param WPML_Language_Code
         */
        public function __construct(&$WPML_Language_Code)
        {
        }
        private function to_be_selected($email)
        {
        }
        public function save_language_user_meta($email, $language)
        {
        }
        public function sanitize($language)
        {
        }
        public function get_model($email)
        {
        }
    }
    class WPML_User_Admin_Language
    {
        const CACHE_GROUP = 'get_user_admin_language';
        /** @var SitePress */
        private $sitepress;
        public function __construct(\SitePress $sitepress)
        {
        }
        /**
         * @param int|string $user_id
         * @param bool       $reload
         *
         * @return bool|mixed|null|string
         */
        public function get($user_id, $reload = \false)
        {
        }
        /**
         * @param $user_id
         *
         * @return null|false|string
         */
        private function get_from_user_settings($user_id)
        {
        }
        /**
         * @return string
         */
        private function get_from_global_settings()
        {
        }
    }
    /**
     * @package    wpml-core
     * @subpackage wpml-user-language
     */
    class WPML_User_Language_Switcher_Hooks
    {
        private $nonce_name = 'wpml_user_language_switcher';
        /**
         * @var WPML_User_Language_Switcher_UI
         */
        private $user_language_switcher_ui;
        /**
         * @var WPML_User_Language_Switcher
         */
        private $user_language_switcher;
        /**
         * @var WPML_User_Language_Switcher
         * @var WPML_User_Language_Switcher_UI
         */
        public function __construct(&$WPML_User_Language_Switcher, &$WPML_User_Language_Switcher_UI)
        {
        }
        public function language_switcher_action($args)
        {
        }
        public function language_switcher_form_ajax_callback()
        {
        }
        public function language_switcher_form_ajax()
        {
        }
        private function is_valid_data($nonce, $email)
        {
        }
    }
    /**
     * @package wpml-core
     * @subpackage wpml-user-language
     */
    class WPML_Users_Languages_Dependencies
    {
        public $WPML_User_Language_Switcher_Hooks;
        private $WPML_User_Language_Switcher_Resources;
        private $WPML_User_Language_Switcher_UI;
        public $WPML_Users_Languages;
        public $WPML_User_Language;
        private $WPML_User_Language_Switcher;
        private $WPML_Language_Code;
        private $WPML_WP_API;
        private $WPML_Upgrade_Admin_Users_Languages;
        function __construct(&$sitepress)
        {
        }
    }
    abstract class WPML_Wizard extends \WPML_Twig_Template_Loader
    {
        const TEMPLATE_PATH = '/templates/wizard';
        const NONCE = 'wpml_wizard_fetch_content';
        /** @var array $model */
        private $model = array();
        public function __construct()
        {
        }
        protected abstract function initialize_steps();
        protected abstract function enqueue_scripts();
        public function render()
        {
        }
        /**
         * @param string $slug
         * @param string $title
         */
        protected function add_step($slug, $title)
        {
        }
        /**
         * @param string $current_step_slug
         */
        protected function set_current_step($current_step_slug)
        {
        }
        protected function initialize_strings()
        {
        }
        private function set_nonce()
        {
        }
        private function enqueue_main_script()
        {
        }
    }
    /**
    * Class WPML_AJAX_Base_Factory
    *
    * @author OnTheGoSystems
    */
    abstract class WPML_AJAX_Base_Factory implements \IWPML_AJAX_Action_Loader, \IWPML_Deferred_Action_Loader
    {
        /** @var  WPML_AJAX_Action_Validation $ajax_action_check */
        private $ajax_action_validation;
        /**
         * This loader must be deferred at least to 'plugins_loaded' to make sure
         * all the WP functions needed to validate the request are already loaded
         *
         * @return string
         */
        public function get_load_action()
        {
        }
        public function is_valid_action($ajax_action)
        {
        }
        /**
         * @param WPML_AJAX_Action_Validation $ajax_action_validation
         */
        public function set_ajax_action_validation(\WPML_AJAX_Action_Validation $ajax_action_validation)
        {
        }
    }
    class WPML_Wizard_Fetch_Content_Factory extends \WPML_AJAX_Base_Factory
    {
        public function create()
        {
        }
    }
    class WPML_Wizard_Fetch_Content_Action implements \IWPML_Action
    {
        const AJAX_ACTION = 'wpml_wizard_fetch_content';
        public function add_hooks()
        {
        }
        public function fetch_content()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_ICL_Client
    {
        private $error;
        /** @var WP_HTTP $http */
        private $http;
        /** @var  WPML_WP_API $wp_api */
        private $wp_api;
        private $method = 'GET';
        private $post_data;
        /**
         * WPML_ICL_Client constructor.
         *
         * @param WP_HTTP $http
         * @param WPML_WP_API
         */
        public function __construct($http, $wp_api)
        {
        }
        function request($request_url)
        {
        }
        public function get_error()
        {
        }
        /**
         * @return array
         */
        private function get_debug_data()
        {
        }
        /**
         * @param $request_url
         *
         * @return mixed|string
         */
        private function get_adjusted_request_url($request_url)
        {
        }
        private function adjust_post_data()
        {
        }
        /**
         * @param $method
         */
        public function set_method($method)
        {
        }
        public function set_post_data($post_data)
        {
        }
    }
    class WPML_MO_File_Search
    {
        /**
         * @var SitePress
         */
        private $sitepress;
        /**
         * @var array
         */
        private $settings;
        /**
         * @var WP_Filesystem_Direct
         */
        private $filesystem;
        /**
         * @var array
         */
        private $locales;
        /**
         * @param SitePress $sitepress
         */
        public function __construct(\SitePress $sitepress, \WP_Filesystem_Direct $filesystem = \null)
        {
        }
        /**
         * @param array $active_languages
         *
         * @return bool
         */
        public function has_mo_file_for_any_language($active_languages)
        {
        }
        public function reload_theme_dirs()
        {
        }
        /**
         * @param string $lang_code
         *
         * @return bool
         */
        public function can_find_mo_file($lang_code)
        {
        }
        /**
         * @return string
         */
        protected function get_template_path()
        {
        }
        /**
         * @return array
         */
        public function find_theme_mo_dirs()
        {
        }
        /**
         * @param string $folder
         * @param int $rec
         *
         * @return bool
         */
        public function determine_mo_folder($folder, $rec = 0)
        {
        }
        /**
         * @return array
         */
        public function get_dir_names()
        {
        }
        /**
         * @param array $dirs
         */
        public function save_mo_dirs($dirs)
        {
        }
    }
    class WPML_Active_Plugin_Provider
    {
        /**
         * @return array
         */
        public function get_active_plugins()
        {
        }
        /**
         * @return array
         */
        public function get_active_plugin_names()
        {
        }
    }
}
namespace WPML\Language\Detection {
    class CookieLanguage
    {
        /** @var \WPML_Cookie */
        private $cookie;
        /** @var string */
        private $defaultLanguage;
        /**
         * @param  \WPML_Cookie  $cookie
         * @param  string  $defaultLanguage
         */
        public function __construct(\WPML_Cookie $cookie, $defaultLanguage)
        {
        }
        /**
         * @param bool $isBackend
         *
         * @return string
         */
        public function getAjaxCookieName($isBackend)
        {
        }
        public function getBackendCookieName()
        {
        }
        public function getFrontendCookieName()
        {
        }
        public function get($cookieName)
        {
        }
        public function set($cookieName, $lang_code)
        {
        }
        /**
         * @return bool|string
         */
        public function get_cookie_domain()
        {
        }
        /**
         * Returns SERVER_NAME, or HTTP_HOST if the first is not available
         *
         * @return string
         */
        private static function get_server_host_name()
        {
        }
        private static function get_port()
        {
        }
    }
    class Ajax extends \WPML_Request
    {
        public function get_requested_lang()
        {
        }
        protected function get_cookie_name()
        {
        }
        /**
         * @return bool
         */
        private function is_admin_action_from_referer()
        {
        }
    }
    /**
     * Class WPML_Backend_Request
     *
     * @package    wpml-core
     * @subpackage wpml-requests
     */
    class Backend extends \WPML_Request
    {
        /**
         * Determines the requested language in the WP Admin backend from URI, $_POST, $_GET and cookies.
         *
         * @return string The requested language code.
         */
        public function get_requested_lang()
        {
        }
        private function getForPage()
        {
        }
        protected function get_cookie_name()
        {
        }
        private function getFromParam($path, $allowAllValue)
        {
        }
        private function getPostElementLanguage()
        {
        }
        private function is_string_translation_or_translation_queue_page($system)
        {
        }
    }
    class Rest extends \WPML_Request
    {
        /** @var Backend */
        private $backend;
        public function __construct($url_converter, $active_languages, $default_language, $cookieLanguage, $backend)
        {
        }
        protected function get_cookie_name()
        {
        }
        public function get_requested_lang()
        {
        }
        /**
         * It tries to detect language in FRONTEND manner.
         *
         * We ignore a default language due to fallback mechanism in WPML_URL_Converter_Subdir_Strategy which never returns
         * NULL when `use_directory_for_default_lang` option is enabled.
         *
         * @return string|null
         */
        private function getFrontendLanguage()
        {
        }
    }
    /**
     * @package    wpml-core
     * @subpackage wpml-requests
     */
    class Frontend extends \WPML_Request
    {
        /** @var \WPML_WP_API */
        private $wp_api;
        public function __construct(\WPML_URL_Converter $url_converter, $active_languages, $default_language, \WPML\Language\Detection\CookieLanguage $cookieLanguage, \WPML_WP_API $wp_api)
        {
        }
        public function get_requested_lang()
        {
        }
        /**
         * @return string
         */
        private function get_comment_language()
        {
        }
        protected function get_cookie_name()
        {
        }
    }
}
namespace {
    class WPML_Config_Update_Integrator
    {
        /** @var WPML_Config_Update_Log */
        private $log;
        /** @var WPML_Config_Update */
        private $worker;
        /**
         * @param WPML_Log                $log
         * @param WPML_Config_Update|null $worker
         */
        public function __construct(\WPML_Log $log, \WPML_Config_Update $worker = \null)
        {
        }
        /**
         * @return WPML_Config_Update
         */
        public function get_worker()
        {
        }
        /**
         * @param WPML_Config_Update $worker
         */
        public function set_worker(\WPML_Config_Update $worker)
        {
        }
        public function add_hooks()
        {
        }
        public function handle_requests()
        {
        }
        public function update_event()
        {
        }
        public function upgrader_process_complete_event()
        {
        }
        public function update_event_ajax()
        {
        }
        public function update_event_cron()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Integrations_Requirements
    {
        const NOTICE_GROUP = 'requirements';
        const CORE_REQ_NOTICE_ID = 'core-requirements';
        const MISSING_REQ_NOTICE_ID = 'missing-requirements';
        const EDITOR_NOTICE_ID = 'enable-translation-editor';
        const DOCUMENTATION_LINK = 'https://wpml.org/documentation/plugins-compatibility/page-builders/';
        const DOCUMENTATION_LINK_BLOCK_EDITOR = 'https://wpml.org/?page_id=2909360&utm_source=wpmlplugin&utm_campaign=gutenberg&utm_medium=translation-editor&utm_term=translating-content-created-using-gutenberg-editor';
        private $core_issues = array();
        private $issues = array();
        private $tm_settings;
        private $should_create_editor_notice = \false;
        private $integrations;
        private $requirements_scripts;
        /** @var SitePress $sitepress */
        private $sitepress;
        /** @var  WPML_Third_Party_Dependencies $third_party_dependencies */
        private $third_party_dependencies;
        /** @var  WPML_Requirements_Notification $requirements_notification */
        private $requirements_notification;
        /**
         * WPML_Integrations_Requirements constructor.
         *
         * @param SitePress                      $sitepress
         * @param WPML_Third_Party_Dependencies  $third_party_dependencies
         * @param WPML_Requirements_Notification $requirements_notification
         * @param array                          $integrations
         */
        public function __construct(\SitePress $sitepress, \WPML_Third_Party_Dependencies $third_party_dependencies = \null, \WPML_Requirements_Notification $requirements_notification = \null, $integrations = \null)
        {
        }
        public function init_hooks()
        {
        }
        public function init()
        {
        }
        private function update_notices()
        {
        }
        private function update_issues()
        {
        }
        private function update_should_create_editor_notice()
        {
        }
        public function set_translation_editor_callback()
        {
        }
        private function is_valid_request()
        {
        }
        private function get_integrations()
        {
        }
        /**
         * @param $notice_type
         *
         * @return array
         */
        private function get_integrations_names($notice_type)
        {
        }
        /**
         * @return WPML_Requirements_Notification
         */
        private function get_notice_model()
        {
        }
        /**
         * @param WPML_Notice $notice
         */
        private function add_actions_to_notice(\WPML_Notice $notice)
        {
        }
        private function add_actions_to_core_notice(\WPML_Notice $notice)
        {
        }
        /**
         * @param string $type
         *
         * @return bool
         */
        private function has_issues($type)
        {
        }
        /**
         * @param WPML_Notice $notice
         * @param WPML_WP_API $wp_api
         */
        private function add_callbacks(\WPML_Notice $notice, \WPML_WP_API $wp_api)
        {
        }
        /**
         * @param WPML_Requirements_Notification $notice_model
         * @param WPML_Notices $wpml_admin_notices
         * @param WPML_WP_API $wp_api
         */
        private function add_core_requirements_notice(\WPML_Requirements_Notification $notice_model, \WPML_Notices $wpml_admin_notices, \WPML_WP_API $wp_api)
        {
        }
        /**
         * @param WPML_Requirements_Notification $notice_model
         * @param WPML_Notices $wpml_admin_notices
         * @param WPML_WP_API $wp_api
         */
        private function add_requirements_notice(\WPML_Requirements_Notification $notice_model, \WPML_Notices $wpml_admin_notices, \WPML_WP_API $wp_api)
        {
        }
        /**
         * @param WPML_Requirements_Notification $notice_model
         * @param WPML_Notices $wpml_admin_notices
         * @param WPML_WP_API $wp_api
         */
        private function add_tm_editor_notice(\WPML_Requirements_Notification $notice_model, \WPML_Notices $wpml_admin_notices, \WPML_WP_API $wp_api)
        {
        }
        /**
         * @return WPML_Integrations_Requirements_Scripts
         */
        private function get_requirements_scripts()
        {
        }
        /**
         * @return WPML_Third_Party_Dependencies
         */
        private function get_third_party_dependencies()
        {
        }
    }
    /**
     * WPML_Whip_Requirements class file.
     *
     * @package wpml-core
     */
    /**
     * Class WPML_Whip_Requirements
     */
    class WPML_Whip_Requirements
    {
        /**
         * Add hooks.
         */
        public function add_hooks()
        {
        }
        /**
         * Get host name for message about PHP.
         *
         * @return string
         */
        public function whip_name_of_host()
        {
        }
        /**
         * Get WPML message about PHP.
         *
         * @return string
         */
        public function whip_message_from_host_about_php()
        {
        }
        /**
         * Load Whip.
         */
        public function load_whip()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Requirements
    {
        private $active_plugins = array();
        private $disabled_plugins = array();
        private $missing_requirements = array();
        private $plugins = array('wpml-media-translation' => array('version' => '2.1.24', 'name' => 'WPML Media Translation'), 'wpml-string-translation' => array('version' => '2.5.2', 'name' => 'WPML String Translation'), 'wpml-translation-management' => array('version' => '2.2.7', 'name' => 'WPML Translation Management'), 'woocommerce-multilingual' => array('version' => '4.7.0', 'name' => 'WooCommerce Multilingual', 'url' => 'https://wpml.org/download/woocommerce-multilingual/'), 'gravityforms-multilingual' => array('name' => 'GravityForms Multilingual', 'url' => 'https://wpml.org/download/gravityforms-multilingual/'), 'buddypress-multilingual' => array('name' => 'BuddyPress Multilingual', 'url' => 'https://wpml.org/download/buddypress-multilingual/'), 'wp-seo-multilingual' => array('name' => 'Yoast SEO Multilingual', 'url' => 'https://wpml.org/download/yoast-seo-multilingual/'));
        private $modules = array(\WPML_Integrations::SCOPE_WP_CORE => array('url' => 'https://wpml.org/?page_id=2909360&utm_source=wpmlplugin&utm_campaign=gutenberg&utm_medium=translation-editor&utm_term=translating-content-created-using-gutenberg-editor', 'requirements_class' => 'WPML_Integration_Requirements_Block_Editor'), 'page-builders' => array('url' => 'https://wpml.org/?page_id=1129854', 'requirements' => array('wpml-string-translation', 'wpml-translation-management')), 'gravityforms' => array('url' => '#', 'requirements' => array('gravityforms-multilingual', 'wpml-string-translation', 'wpml-translation-management')), 'buddypress' => array('url' => '#', 'requirements' => array('buddypress-multilingual')), 'bb-plugin' => array('url' => '#', 'requirements' => array('wpml-string-translation')), 'elementor-plugin' => array('url' => '#', 'requirements' => array('wpml-string-translation')), 'wordpress-seo' => array('url' => '#', 'requirements' => array('wp-seo-multilingual')));
        /**
         * WPML_Requirements constructor.
         */
        public function __construct()
        {
        }
        public function is_plugin_active($plugin_slug)
        {
        }
        /**
         * @param array $plugin_data
         *
         * @return string|null
         */
        public function get_plugin_slug(array $plugin_data)
        {
        }
        /**
         * @return array
         */
        public function get_missing_requirements()
        {
        }
        /**
         * @param string $type
         * @param string $slug
         *
         * @return array
         */
        public function get_requirements($type, $slug)
        {
        }
        /**
         * @param string $slug
         *
         * @return array
         */
        function get_plugin_data($slug)
        {
        }
        /**
         * @param string $type
         * @param string $slug
         *
         * @return array
         */
        private function get_missing_plugins_for_type($type, $slug)
        {
        }
        /**
         * @return array
         */
        private function get_components()
        {
        }
        /**
         * @param string $type
         * @param string $slug
         *
         * @return array
         */
        private function get_components_by_type($type, $slug)
        {
        }
        /**
         * @param string $type
         * @param string $slug
         *
         * @return array
         */
        private function get_components_requirements_by_type($type, $slug)
        {
        }
    }
    class WPML_Integrations_Requirements_Scripts
    {
        public function add_translation_editor_notice_hook()
        {
        }
        public function enqueue_translation_editor_notice_script()
        {
        }
        public function add_plugins_activation_hook()
        {
        }
        public function enqueue_plugin_activation_script()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Requirements_Notification
    {
        /**
         * @var \IWPML_Template_Service
         */
        private $template_service;
        /**
         * WPML_Requirements_Notification constructor.
         *
         * @param IWPML_Template_Service $template_service
         */
        public function __construct(\IWPML_Template_Service $template_service)
        {
        }
        public function get_core_message($issues)
        {
        }
        public function get_message($issues, $limit = 0)
        {
        }
        private function get_shared_message($strings, $issues, $limit = 0)
        {
        }
        public function get_settings($integrations)
        {
        }
        /**
         * @param array $issues
         *
         * @return string
         */
        private function get_product_names($issues)
        {
        }
        /**
         * @param $items
         *
         * @return string
         */
        private function build_items_in_sentence($items)
        {
        }
    }
    /**
     * Created by PhpStorm.
     * User: bruce
     * Date: 28/08/17
     * Time: 11:54 AM
     */
    class WPML_TM_Editor_Notice extends \WPML_Notice
    {
        public function is_different(\WPML_Notice $other_notice)
        {
        }
        private function strip_nonce_field($text)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Integrations
    {
        const SCOPE_WP_CORE = 'wp-core';
        private $components = array(self::SCOPE_WP_CORE => array('block-editor' => array('name' => 'WordPress Block Editor', 'function' => 'parse_blocks', 'notices-display' => array())), 'page-builders' => array('js_composer' => array('name' => 'Visual Composer', 'constant' => 'WPB_VC_VERSION', 'notices-display' => array('wpml-translation-editor')), 'divi' => array('name' => 'Divi', 'constant' => 'ET_BUILDER_DIR', 'notices-display' => array('wpml-translation-editor')), 'layouts' => array('name' => 'Toolset Layouts', 'constant' => 'WPDDL_VERSION', 'notices-display' => array('wpml-translation-editor')), 'x-theme' => array('name' => 'X Theme', 'constant' => 'X_VERSION', 'notices-display' => array('wpml-translation-editor')), 'enfold' => array('name' => 'Enfold', 'constant' => 'AVIA_FW', 'notices-display' => array('wpml-translation-editor')), 'avada' => array('name' => 'Avada', 'function' => 'Avada', 'notices-display' => array('wpml-translation-editor')), 'oxygen' => array('name' => 'Oxygen', 'constant' => 'CT_VERSION', 'notices-display' => array('wpml-translation-editor'))), 'integrations' => array('bb-plugin' => array('name' => 'Beaver Builder Plugin', 'class' => 'FLBuilderLoader', 'notices-display' => array('wpml-translation-editor')), 'elementor-plugin' => array('name' => 'Elementor', 'class' => '\\Elementor\\Plugin', 'notices-display' => array('wpml-translation-editor'))));
        private $items = array();
        private $wpml_wp_api;
        /**
         * WPML_Integrations constructor.
         *
         * @param WPML_WP_API $wpml_wp_api
         */
        function __construct(\WPML_WP_API $wpml_wp_api)
        {
        }
        private function fetch_items()
        {
        }
        public function get_results()
        {
        }
        /**
         * @param array $data
         *
         * @return bool
         */
        private function component_has_constant(array $data)
        {
        }
        /**
         * @param array $data
         *
         * @return bool
         */
        private function component_has_function(array $data)
        {
        }
        /**
         * @param array $data
         *
         * @return bool
         */
        private function component_has_class(array $data)
        {
        }
        /**
         * @param array $data
         *
         * @return mixed
         */
        private function get_component_name(array $data)
        {
        }
        /**
         * @return array
         */
        private function get_components()
        {
        }
    }
}
namespace WPML\Requirements {
    class WordPress
    {
        public static function checkMinimumRequiredVersion()
        {
        }
        public static function displayMissingVersionRequirementNotice()
        {
        }
    }
}
namespace {
    /**
     * @author OnTheGo Systems
     */
    class WPML_Third_Party_Dependencies
    {
        private $integrations;
        private $requirements;
        /**
         * WPML_Third_Party_Dependencies constructor.
         *
         * @param WPML_Integrations $integrations
         * @param WPML_Requirements $requirements
         */
        public function __construct(\WPML_Integrations $integrations, \WPML_Requirements $requirements)
        {
        }
        public function get_issues($scope = \null)
        {
        }
        private function get_components($scope)
        {
        }
        private function get_issue($component_data, $slug)
        {
        }
    }
    interface IWPML_Integration_Requirements_Module
    {
        public function get_requirements();
    }
    class WPML_Integration_Requirements_Block_Editor implements \IWPML_Integration_Requirements_Module
    {
        /** @var WPML_Requirements $requirements */
        private $requirements;
        public function __construct(\WPML_Requirements $requirements)
        {
        }
        public function get_requirements()
        {
        }
    }
    class WPML_WP_Options_General_Hooks implements \IWPML_Action
    {
        public function add_hooks()
        {
        }
        public function admin_enqueue_scripts($hook)
        {
        }
    }
    /**
     * Class WPML_Current_Screen_Loader_Factory
     *
     * @author OnTheGoSystems
     */
    abstract class WPML_Current_Screen_Loader_Factory implements \IWPML_Backend_Action_Loader, \IWPML_Deferred_Action_Loader
    {
        /** @return string */
        public function get_load_action()
        {
        }
        /** @return string */
        protected abstract function get_screen_regex();
        /** @return null|IWPML_Action */
        protected abstract function create_hooks();
        /** @return null|IWPML_Action */
        public function create()
        {
        }
        /** return bool */
        private function is_on_matching_screen()
        {
        }
    }
    class WPML_WP_Options_General_Hooks_Factory extends \WPML_Current_Screen_Loader_Factory
    {
        protected function get_screen_regex()
        {
        }
        protected function create_hooks()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Notice_Action
    {
        private $dismiss;
        private $display_as_button;
        private $hide;
        private $text;
        private $url;
        private $group_to_dismiss;
        private $js_callback;
        private $dismiss_different_text;
        private $link_target;
        /**
         * WPML_Admin_Notice_Action constructor.
         *
         * @param string      $text
         * @param string      $url
         * @param bool        $dismiss
         * @param bool        $hide
         * @param bool|string $display_as_button
         * @param bool        $dismiss_different_text
         */
        public function __construct($text, $url = '#', $dismiss = \false, $hide = \false, $display_as_button = \false, $dismiss_different_text = \true)
        {
        }
        public function get_text()
        {
        }
        public function get_url()
        {
        }
        public function can_dismiss()
        {
        }
        public function can_dismiss_different_text()
        {
        }
        public function can_hide()
        {
        }
        public function must_display_as_button()
        {
        }
        public function set_group_to_dismiss($group_name)
        {
        }
        public function get_group_to_dismiss()
        {
        }
        public function set_js_callback($js_callback)
        {
        }
        public function get_js_callback()
        {
        }
        /**
         * @return mixed
         */
        public function get_link_target()
        {
        }
        /**
         * @param mixed $link_target
         */
        public function set_link_target($link_target)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Notices
    {
        const NOTICES_OPTION_KEY = 'wpml_notices';
        const DISMISSED_OPTION_KEY = '_wpml_dismissed_notices';
        const USER_DISMISSED_KEY = '_wpml_user_dismissed_notices';
        const NONCE_NAME = 'wpml-notices';
        const DEFAULT_GROUP = 'default';
        private $notice_render;
        /**
         * @var array
         */
        private $notices;
        private $notices_to_remove = array();
        private $dismissed;
        private $user_dismissed;
        private $original_notices_md5;
        /**
         * WPML_Notices constructor.
         *
         * @param WPML_Notice_Render     $notice_render
         */
        public function __construct(\WPML_Notice_Render $notice_render)
        {
        }
        /**
         * @return int
         */
        public function count()
        {
        }
        /**
         * @return array
         */
        public function get_all_notices()
        {
        }
        /**
         * @return array
         */
        private function get_all_dismissed()
        {
        }
        private function init_all_user_dismissed()
        {
        }
        /**
         * @param string $id
         * @param string $group
         *
         * @return null|WPML_Notice
         */
        public function get_notice($id, $group = 'default')
        {
        }
        /**
         * @param string $id
         * @param string $text
         * @param string $group
         *
         * @return WPML_Notice
         */
        public function create_notice($id, $text, $group = 'default')
        {
        }
        public function add_notice(\WPML_Notice $notice, $force_update = \false)
        {
        }
        /**
         * @param string $id
         * @param string $text
         * @param string $group
         *
         * @return WPML_Notice
         */
        public function get_new_notice($id, $text, $group = 'default')
        {
        }
        /**
         * @param string $text
         * @param string $url
         * @param bool   $dismiss
         * @param bool   $hide
         * @param bool   $display_as_button
         *
         * @return WPML_Notice_Action
         */
        public function get_new_notice_action($text, $url = '#', $dismiss = \false, $hide = \false, $display_as_button = \false)
        {
        }
        /**
         * @param WPML_Notice $notice
         *
         * @return bool
         */
        private function notice_exists(\WPML_Notice $notice)
        {
        }
        private function get_notices_for_group($group)
        {
        }
        private function save_notices()
        {
        }
        public function save_to_option()
        {
        }
        private function save_dismissed()
        {
        }
        public function remove_notices()
        {
        }
        public function admin_enqueue_scripts()
        {
        }
        private function must_display_notices()
        {
        }
        private function must_hide_if_notice_exists(\WPML_Notice $notice)
        {
        }
        public function admin_notices()
        {
        }
        public function wp_ajax_hide_notice()
        {
        }
        public function wp_ajax_dismiss_notice()
        {
        }
        /**
         * @param string $notice_id
         * @param        null !string $notice_group
         *
         * @return bool
         */
        private function dismiss_notice_by_id($notice_id, $notice_group = \null)
        {
        }
        public function wp_ajax_dismiss_group()
        {
        }
        /**
         * @param null !string $notice_group
         *
         * @return bool
         */
        private function dismiss_notice_group($notice_group)
        {
        }
        /**
         * @return array
         */
        private function parse_group_and_id()
        {
        }
        /**
         * @return false|int
         */
        private function has_valid_nonce()
        {
        }
        private function group_and_id_exist($group, $id)
        {
        }
        /**
         * @param string     $notice_group
         * @param string|int $notice_id
         */
        public function remove_notice($notice_group, $notice_id)
        {
        }
        /**
         * @param string $notice_group
         */
        public function remove_notice_group($notice_group)
        {
        }
        /**
         * @param WPML_Notice $notice
         * @param bool        $persist
         */
        public function dismiss_notice(\WPML_Notice $notice, $persist = \true)
        {
        }
        /**
         * @param WPML_Notice $notice
         * @param bool        $persist
         */
        public function undismiss_notice(\WPML_Notice $notice, $persist = \true)
        {
        }
        /**
         * @param WPML_Notice $notice
         *
         * @return bool
         */
        public function is_notice_dismissed(\WPML_Notice $notice)
        {
        }
        public function init_hooks()
        {
        }
        private function filter_invalid_notices($notices)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Notice_Render
    {
        private $dismiss_html_added;
        private $hide_html_added;
        private $collapse_html_added;
        public function render(\WPML_Notice $notice)
        {
        }
        /**
         * @param WPML_Notice $notice
         *
         * @return string
         */
        public function get_html(\WPML_Notice $notice)
        {
        }
        /**
         * @param WPML_Notice $notice
         *
         * @return string
         */
        private function add_nonce($notice)
        {
        }
        public function must_display_notice(\WPML_Notice $notice)
        {
        }
        /**
         * @param WPML_Notice $notice
         *
         * @return string
         */
        private function get_actions_html(\WPML_Notice $notice)
        {
        }
        private function sanitize_and_format_text($text)
        {
        }
        /**
         * @param null|string $localized_text
         *
         * @return string
         */
        private function get_hide_html($localized_text = \null)
        {
        }
        /**
         * @param null|string $localized_text
         *
         * @return string
         */
        private function get_dismiss_html($localized_text = \null)
        {
        }
        /**
         * @param string|null $localized_text
         *
         * @return string
         */
        private function get_collapse_html($localized_text = \null)
        {
        }
        /**
         * @param WPML_Notice $notice
         * @param string|null $localized_text
         *
         * @return string
         */
        private function get_collapsed_html(\WPML_Notice $notice, $localized_text = \null)
        {
        }
        /**
         * @param WPML_Notice_Action $action
         *
         * @return string
         */
        private function get_action_html($action)
        {
        }
        /**
         * @param WPML_Notice_Action $action
         *
         * @return string
         */
        private function get_action_anchor(\WPML_Notice_Action $action)
        {
        }
        /**
         * @return string
         */
        private function get_data_nonce_attribute()
        {
        }
        /**
         * @param WPML_Notice $notice
         *
         * @return bool
         */
        private function is_current_screen_allowed(\WPML_Notice $notice)
        {
        }
        /**
         * @param WPML_Notice $notice
         * @param string      $current_page
         *
         * @return bool
         */
        private function is_current_page_prefix_allowed(\WPML_Notice $notice, $current_page)
        {
        }
        /**
         * @param WPML_Notice $notice
         *
         * @return bool
         */
        private function is_current_page_allowed(\WPML_Notice $notice)
        {
        }
        /**
         * @param WPML_Notice $notice
         *
         * @return bool
         */
        private function is_allowed_by_callback(\WPML_Notice $notice)
        {
        }
    }
}
namespace WPML\Notices {
    class DismissNotices implements \IWPML_Backend_Action
    {
        const OPTION = 'wpml_dismiss_notice';
        const CSS_CLASS = 'wpml_dismiss_notice';
        public function add_hooks()
        {
        }
        public function toggleDismiss()
        {
        }
        /**
         * @param $id
         *
         * @return bool
         */
        public function isDismissed($id)
        {
        }
        /**
         * @param int $id
         *
         * @return string
         */
        public function renderCheckbox($id)
        {
        }
    }
}
namespace {
    class WPML_Notice_Show_On_Dashboard_And_WPML_Pages
    {
        public static function is_on_page()
        {
        }
    }
    /**
     * Created by PhpStorm.
     * User: andreasciamanna
     * Date: 22/05/2018
     * Time: 08:44
     */
    class WPML_Current_Screen
    {
        private $translatable_types = array();
        private $allowed_screen_ids_for_edit_posts_list = array();
        private $allowed_screen_ids_for_edit_post = array();
        public function is_edit_posts_list()
        {
        }
        public function is_edit_post()
        {
        }
        private function get_translatable_types()
        {
        }
        private function get_allowed_screen_ids_for_edit_posts_list()
        {
        }
        private function get_allowed_screen_ids_for_edit_post()
        {
        }
        public function get_posts()
        {
        }
        private function get_post()
        {
        }
        public function get_post_type()
        {
        }
        public function id_ends_with($suffix)
        {
        }
        /**
         * @return WP_Screen|null
         */
        private function get()
        {
        }
        private function has_posts()
        {
        }
        private function has_post()
        {
        }
    }
    class WPML_Language
    {
        /** @var SitePress $sitepress */
        private $sitepress;
        /** @var string $code */
        private $code;
        private $lang_details;
        public function __construct(\SitePress $sitepress, $code)
        {
        }
        public function is_valid()
        {
        }
        public function get_code()
        {
        }
        public function get_display_name()
        {
        }
        public function get_flag_url()
        {
        }
    }
    class WPML_Language_Records
    {
        private $wpdb;
        private $languages;
        /** @var null|array $locale_lang_map */
        private $locale_lang_map;
        public function __construct(\wpdb $wpdb)
        {
        }
        public function is_valid($code)
        {
        }
        private function load()
        {
        }
        /**
         * @param $lang_code
         *
         * @return string|null
         */
        public function get_locale($lang_code)
        {
        }
        /**
         * @param string $locale
         *
         * @return string|null
         */
        public function get_language_code($locale)
        {
        }
        private function init_locale_lang_map()
        {
        }
        /**
         * @return array
         */
        public function get_locale_lang_map()
        {
        }
        private function get_table()
        {
        }
    }
    interface IWPML_Current_Language
    {
        public function get_current_language();
        public function get_default_language();
        public function get_admin_language();
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Languages_AJAX
    {
        private $sitepress;
        private $default_language;
        /**
         * WPML_Languages_AJAX constructor.
         *
         * @param SitePress $sitepress
         */
        public function __construct(\SitePress $sitepress)
        {
        }
        public function ajax_hooks()
        {
        }
        private function validate_ajax_action()
        {
        }
        public function set_active_languages_action()
        {
        }
        public function set_default_language_action()
        {
        }
    }
    class WPML_Language_Collection
    {
        /** @var SitePress $sitepress */
        private $sitepress;
        /** @var array $languages */
        private $languages = array();
        /**
         * WPML_Language_Collection constructor.
         *
         * @param SitePress $sitepress
         * @param array $initial_languages Array of language codes
         */
        public function __construct(\SitePress $sitepress, $initial_languages = array())
        {
        }
        public function add($code)
        {
        }
        public function get($code)
        {
        }
        public function get_codes()
        {
        }
    }
    class WPML_Slash_Management
    {
        public function match_trailing_slash_to_reference($url, $reference_url)
        {
        }
        /**
         * @param string $url
         *
         * @return bool
         */
        private function has_lang_param($url)
        {
        }
        /**
         * @param string $url
         * @param string $method Deprecated.
         *
         * @return mixed|string
         */
        public function maybe_user_trailingslashit($url, $method = '')
        {
        }
        /**
         * Follows the logic of WordPress core user_trailingslashit().
         * Can be called on plugins_loaded event, when $wp_rewrite is not set yet.
         *
         * @param $path
         *
         * @return string
         */
        private function user_trailingslashit($path)
        {
        }
        /**
         * @param array $url_parts
         *
         * @return bool
         */
        private function is_root_url_without_trailingslash_and_without_query_args(array $url_parts)
        {
        }
        /**
         * @param array $url_parts
         *
         * @return bool
         */
        private function is_root_url_with_trailingslash(array $url_parts)
        {
        }
        /**
         * @see Test_WPML_Lang_Domains_Converter::check_domains_and_subdir
         *
         * @param array $url_parts
         *
         * @return array
         */
        public function parse_missing_host_from_path(array $url_parts)
        {
        }
        /**
         * @param string $path
         *
         * @return bool
         */
        private function is_file_path($path)
        {
        }
    }
    class WPML_Cache_Factory
    {
        /** @var array */
        private $valid_caches = ['TranslationManagement::get_translation_job_id' => ['clear_actions' => ['wpml_tm_save_post', 'wpml_cache_clear']], 'WPML_Element_Type_Translation::get_language_for_element' => ['clear_actions' => ['wpml_translation_update']], 'WPML_Post_Status::needs_update' => ['clear_actions' => ['wpml_translation_status_update']]];
        public function __construct()
        {
        }
        /**
         * @param string $cache_name
         *
         * @return WPML_WP_Cache
         * @throws InvalidArgumentException Exception.
         */
        public function get($cache_name)
        {
        }
        /**
         * @param string $cache_name
         * @param array  $clear_actions
         */
        public function define($cache_name, array $clear_actions)
        {
        }
        private function init_clear_actions($cache_name, array $clear_actions)
        {
        }
    }
    class WPML_Encoding_Validation
    {
        const MIN_CHAR_SIZE = 20;
        /**
         * @param $string
         *
         * @return int
         */
        public function is_base64($string)
        {
        }
    }
    class WPML_WP_Post
    {
        /** @var WPDB $wpdb */
        public $wpdb;
        /** @var int */
        private $post_id;
        /**
         * @param WPDB $wpdb
         * @param int $post_id
         */
        public function __construct(\WPDB $wpdb, $post_id)
        {
        }
        /**
         * @param array $post_data_array
         * @param bool  $direct_db_update
         */
        public function update(array $post_data_array, $direct_db_update = \false)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Queried_Object_Factory
    {
        public function create()
        {
        }
        private function get_sitepress()
        {
        }
    }
    class WPML_Deactivate_Old_Media
    {
        private $php_functions;
        public function __construct(\WPML_PHP_Functions $php_functions)
        {
        }
        public function add_hooks()
        {
        }
        public function deactivate_media()
        {
        }
    }
    class WPML_WP_Cache_Factory
    {
        public function create_cache_group($group)
        {
        }
        public function create_cache_item($group, $key)
        {
        }
    }
    class WPML_Global_AJAX extends \WPML_SP_User
    {
        /**
         * WPML_Global_AJAX constructor.
         *
         * @param SitePress $sitepress
         */
        public function __construct(&$sitepress)
        {
        }
        public function save_language_negotiation_type_action()
        {
        }
        /**
         * @param string $url
         * @param array $errors
         *
         * @return bool
         */
        private function validateRootPageUrl($url, array &$errors)
        {
        }
        function is_external($url)
        {
        }
        /**
         * @param $site_host
         *
         * @return string
         */
        function remove_www_prefix($site_host)
        {
        }
    }
    class WPML_Admin_URL
    {
        public static function multilingual_setup($section = \null)
        {
        }
    }
    /**
     * Class WPML_Admin_Pagination
     *
     * @author OnTheGoSystems
     */
    class WPML_Admin_Pagination
    {
        /** @var int $items_per_page */
        private $items_per_page;
        /** @var  int $total_items */
        private $total_items;
        /** @var  int $current_page */
        private $current_page;
        /** @var  string $current_url */
        private $current_url;
        /** @var string  */
        private $page_param_name = 'paged';
        /**
         * @param string $page_param_name
         */
        public function set_page_param_name($page_param_name)
        {
        }
        /**
         * @return string
         */
        public function get_page_param_name()
        {
        }
        /**
         * @param int $items_per_page
         */
        public function set_items_per_page($items_per_page)
        {
        }
        /**
         * @return int
         */
        public function get_items_per_page()
        {
        }
        /**
         * @param int $total_items
         */
        public function set_total_items($total_items)
        {
        }
        /**
         * @return int
         */
        public function get_total_items()
        {
        }
        /**
         * @return int
         */
        public function get_total_pages()
        {
        }
        /**
         * @param int $page
         */
        public function set_current_page($page)
        {
        }
        /**
         * @return int
         */
        public function get_current_page()
        {
        }
        /**
         * @return null|string
         */
        public function get_first_page_url()
        {
        }
        /**
         * @return null|string
         */
        public function get_previous_page_url()
        {
        }
        /**
         * @return null|string
         */
        public function get_next_page_url()
        {
        }
        /**
         * @return null|string
         */
        public function get_last_page_url()
        {
        }
        /**
         * @return string
         */
        private function get_current_url()
        {
        }
    }
    class WPML_Admin_Table_Sort
    {
        /** @var  string $primary_column */
        private $primary_column;
        /** @var  string $url_args */
        private $url_args;
        /** @var  string $current_url */
        private $current_url;
        /** @var string  */
        private $orderby_param;
        /** @var string  */
        private $order_param;
        /**
         * @param string $orderby_param
         * @param string $order_param
         */
        public function __construct($orderby_param = 'orderby', $order_param = 'order')
        {
        }
        /**
         * @param string $primary_column
         */
        public function set_primary_column($primary_column)
        {
        }
        /**
         * @param string $column
         *
         * @return string
         */
        public function get_column_url($column)
        {
        }
        /**
         * @param string $column
         *
         * @return string
         */
        public function get_column_classes($column)
        {
        }
        /**
         * @param string $column
         *
         * @return bool
         */
        private function is_primary($column)
        {
        }
        /**
         * @return string|null
         */
        private function get_current_orderby()
        {
        }
        /**
         * @return string|null
         */
        private function get_current_order()
        {
        }
        /**
         * @return array
         */
        public function get_current_sorters()
        {
        }
        /**
         * @return array
         */
        private function get_url_args()
        {
        }
        /**
         * @return string
         */
        private function get_current_url()
        {
        }
    }
    class WPML_Admin_Pagination_Render
    {
        const TEMPLATE = 'pagination.twig';
        /**
         * @var IWPML_Template_Service
         */
        private $template;
        /**
         * @var WPML_Admin_Pagination
         */
        private $pagination;
        public function __construct(\IWPML_Template_Service $template, \WPML_Admin_Pagination $pagination)
        {
        }
        public function get_model()
        {
        }
        public static function get_strings($totalItems)
        {
        }
        /**
         * @param array $items
         *
         * @return array
         */
        public function paginate($items)
        {
        }
    }
    class WPML_Admin_Pagination_Factory
    {
        /**
         * @var int
         */
        private $items_per_page;
        public function __construct($items_per_page)
        {
        }
        /**
         * @return WPML_Admin_Pagination_Render
         */
        public function create($total_items, $page_param_name = 'paged')
        {
        }
    }
}
namespace WPML\Utilities {
    interface ILock
    {
        public function create($release_timeout = null);
        public function release();
    }
    class NullLock implements \WPML\Utilities\ILock
    {
        public function create($release_timeout = null)
        {
        }
        public function release()
        {
        }
    }
    class Lock implements \WPML\Utilities\ILock
    {
        /** @var \wpdb  */
        private $wpdb;
        /** @var string  */
        protected $name;
        /**
         * Lock constructor.
         *
         * @param \wpdb $wpdb
         * @param string $name
         */
        public function __construct(\wpdb $wpdb, $name)
        {
        }
        /**
         * Creates a lock using WordPress options ( Based on WP class WP_Upgrader ).
         *
         * @param int    $release_timeout Optional. The duration in seconds to respect an existing lock.
         *                                Default: 1 hour.
         * @return bool False if a lock couldn't be created or if the lock is still valid. True otherwise.
         */
        public function create($release_timeout = null)
        {
        }
        /**
         * Releases an upgrader lock.
         *
         * @return bool True if the lock was successfully released. False on failure.
         */
        public function release()
        {
        }
    }
    class KeyedLock extends \WPML\Utilities\Lock
    {
        /** @var string $keyName */
        private $keyName;
        /**
         * Lock constructor.
         *
         * @param \wpdb $wpdb
         * @param string $name
         */
        public function __construct(\wpdb $wpdb, $name)
        {
        }
        /**
         * @param string $key
         * @param int $release_timeout
         *
         * @return string|false The key or false if could not acquire the lock
         */
        public function create($key = null, $release_timeout = null)
        {
        }
        public function release()
        {
        }
        private function extendTimeout()
        {
        }
    }
}
namespace {
    class WPML_WP_Query_API
    {
        private $wp_query;
        public function __construct(&$wp_query)
        {
        }
        public function get_first_post_type()
        {
        }
    }
    class WPML_Languages_Notices
    {
        const NOTICE_ID_MISSING_MENU_ITEMS = 'wpml-missing-menu-items';
        const NOTICE_GROUP = 'wpml-core';
        const NOTICE_ID_MISSING_DOWNLOADED_LANGUAGES = 'wpml-missing-downloaded-languages';
        /** @var WPML_Notices */
        private $admin_notices;
        private $translations = array();
        /**
         * WPML_Languages_Notices constructor.
         *
         * @param WPML_Notices $admin_notices
         */
        public function __construct(\WPML_Notices $admin_notices)
        {
        }
        function maybe_create_notice_missing_menu_items($languages_count)
        {
        }
        public function missing_languages($not_found_languages)
        {
        }
        public function is_not_languages_edit_page()
        {
        }
        private function get_suggestions(array $language)
        {
        }
        /**
         * @param string $language_attribute
         * @param array  $language
         * @param array  $translation
         *
         * @return string|null
         */
        private function find_matching_attribute($language_attribute, array $language, array $translation)
        {
        }
        /**
         * @param array $language
         * @param array $translation
         *
         * @return null|string
         */
        private function get_matching_language(array $language, array $translation)
        {
        }
    }
    class WPML_WP_User_Factory
    {
        public function create($user_id)
        {
        }
        public function create_by_email($user_email)
        {
        }
        public function create_current()
        {
        }
    }
    class WPML_User extends \WP_User
    {
        /**
         * @see \get_user_meta
         *
         * @param string $key
         * @param bool $single
         *
         * @return mixed
         */
        public function get_meta($key = '', $single = \false)
        {
        }
        /**
         * @see \update_meta
         *
         * @param string $key
         * @param mixed $value
         * @param mixed $prev_value
         */
        public function update_meta($key, $value, $prev_value = '')
        {
        }
        /**
         * @see \get_user_option
         *
         * @param string $option
         * @return mixed
         */
        public function get_option($option)
        {
        }
        /**
         * @see \update_user_option
         *
         * @param string $option_name
         * @param mixed  $new_value
         * @param bool   $global
         * @return int|bool
         */
        function update_option($option_name, $new_value, $global = \false)
        {
        }
    }
    class WPML_WP_User_Query_Factory
    {
        public function create($args)
        {
        }
    }
    class WPML_Deactivate_Old_Media_Factory implements \IWPML_Backend_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_WP_Taxonomy_Query
    {
        private $taxonomies_query_vars;
        public function __construct($wp_api)
        {
        }
        public function get_query_vars()
        {
        }
        public function find($taxonomy)
        {
        }
    }
    class WPML_WP_Cache
    {
        /** @var string Key name under which array of all group keys is stored */
        const KEYS = 'WPML_WP_Cache__group_keys';
        /** @var string Group name */
        private $group;
        /**
         * WPML_WP_Cache constructor.
         *
         * @param string $group Optional. Where the cache contents are grouped. Default empty.
         */
        public function __construct($group = '')
        {
        }
        /**
         * Retrieves the cache contents from the cache by key and group.
         *
         * @param int|string $key    The key under which the cache contents are stored.
         * @param bool       $found  Optional. Whether the key was found in the cache (passed by reference).
         *                           Disambiguates a return of false, a storable value. Default null.
         *
         * @return bool|mixed False on failure to retrieve contents or the cache
         *                    contents on success
         */
        public function get($key, &$found = \null)
        {
        }
        /**
         * Saves the data to the cache.
         *
         * @param int|string $key    The cache key to use for retrieval later.
         * @param mixed      $data   The contents to store in the cache.
         * @param int        $expire Optional. When to expire the cache contents, in seconds.
         *                           Default 0 (no expiration).
         *
         * @return bool False on failure, true on success
         */
        public function set($key, $data, $expire = 0)
        {
        }
        /**
         * Removes the cache contents matching key and group.
         */
        public function flush_group_cache()
        {
        }
        public function execute_and_cache($key, $callback)
        {
        }
        /**
         * @param string $key
         *
         * @return array {
         *    @type mixed   $result @see Return value of \wp_cache_get.
         *    @type bool    $found @see `$found` argument of \wp_cache_get.
         * }
         */
        public function get_with_found($key)
        {
        }
        /**
         * Get stored group keys.
         *
         * @return array
         */
        private function get_keys()
        {
        }
    }
    class WPML_Inactive_Content
    {
        /** @var wpdb $wpdb */
        private $wpdb;
        /** @var string $current_language */
        private $current_language;
        /** @var array $content_types */
        private $content_types;
        /** @var array $inactive */
        private $inactive;
        public function __construct(\wpdb $wpdb, $current_language)
        {
        }
        /** @return bool */
        public function has_entries()
        {
        }
        /** @return array */
        public function get_content_types()
        {
        }
        /** @return array */
        public function get_languages()
        {
        }
        /** @return array */
        public function get_language_counts_rows()
        {
        }
        /** @return array */
        public function get_total_counts()
        {
        }
        /**
         * @param string $lang
         * @param string $type
         * @param string $slug
         *
         * @return int
         */
        private function count($lang, $type, $slug)
        {
        }
        /** @return array */
        private function get_inactive()
        {
        }
        /**
         * @param stdClass $r
         *
         * @return bool
         */
        private function is_only_default_category($r)
        {
        }
        /**
         * @param string $type
         * @param string $slug
         *
         * @return null|string
         */
        private function get_label($type, $slug)
        {
        }
    }
}
namespace WPML\Utils {
    /**
     * Class DebugBackTrace
     *
     * @package WPML\Utils
     */
    class DebugBackTrace
    {
        /** @var array */
        private $debug_backtrace = [];
        /** @var int */
        private $limit;
        /** @var bool */
        private $provide_object;
        /** @var bool */
        private $ignore_args;
        /** @var string */
        private $debug_backtrace_function;
        /**
         * DebugBackTrace constructor.
         *
         * @param int  $limit
         * @param bool $provide_object
         * @param bool $ignore_args
         * @param null $debug_backtrace_function
         */
        public function __construct($limit = 0, $provide_object = false, $ignore_args = true, $debug_backtrace_function = null)
        {
        }
        /**
         * @param array $functions
         * @param bool  $refresh
         *
         * @return bool
         */
        public function are_functions_in_call_stack(array $functions, $refresh = true)
        {
        }
        /**
         * @param string $function_name
         * @param bool   $refresh
         *
         * @return bool
         */
        public function is_function_in_call_stack($function_name, $refresh = true)
        {
        }
        /**
         * @param string $function_name
         * @param bool   $refresh
         *
         * @return int
         */
        public function count_function_in_call_stack($function_name, $refresh = true)
        {
        }
        /**
         * @param string $class_name
         * @param string $function_name
         * @param bool   $refresh
         *
         * @return bool
         */
        public function is_class_function_in_call_stack($class_name, $function_name, $refresh = true)
        {
        }
        /**
         * @return array
         */
        public function get_backtrace()
        {
        }
        private function remove_frames_for_this_class()
        {
        }
        public function remove_last_frame()
        {
        }
    }
}
namespace {
    class WPML_WP_Cache_Item
    {
        /** @var string $key */
        private $key;
        /** @var WPML_WP_Cache $cache */
        private $cache;
        /**
         * WPML_WP_Cache_Item constructor.
         *
         * @param WPML_WP_Cache $cache
         * @param string|array $key
         */
        public function __construct(\WPML_WP_Cache $cache, $key)
        {
        }
        /**
         * @return bool
         */
        public function exists()
        {
        }
        /**
         * @return mixed
         */
        public function get()
        {
        }
        /**
         * @param mixed $value
         */
        public function set($value)
        {
        }
    }
    class WPML_Temporary_Switch_Language extends \WPML_SP_User
    {
        private $old_lang = \false;
        /**
         * @param SitePress $sitepress
         * @param string $target_lang
         */
        public function __construct(&$sitepress, $target_lang)
        {
        }
        public function __destruct()
        {
        }
        public function restore_lang()
        {
        }
    }
    class WPML_Locale
    {
        /**
         * @var wpdb
         */
        private $wpdb;
        /**
         * @var SitePress
         */
        private $sitepress;
        /**
         * @var  string $locale
         */
        private $locale;
        private $locale_cache;
        /** @var Collection $all_locales */
        private $all_locales;
        /**
         * WPML_Locale constructor.
         *
         * @param wpdb $wpdb
         * @param SitePress $sitepress
         * @param string $locale
         */
        public function __construct(\wpdb &$wpdb, \SitePress &$sitepress, &$locale)
        {
        }
        public function init()
        {
        }
        /**
         * @see \Test_Admin_Settings::test_locale
         * @fixme
         * Due to the way these tests work (global state issues) I had to create this method
         * to ensure we have full coverage of the code.
         * This method shouldn't be used anywhere else and should be removed once tests are migrated
         * to the new tests framework.
         */
        public function reset_cached_data()
        {
        }
        /**
         * Hooked to 'sanitize_title' in case the user is using a language that has either German or Danish locale, to
         * ensure that WP Core sanitization functions handle special chars accordingly.
         *
         * @param string $title
         * @param string $raw_title
         *
         * @return string
         */
        public function filter_sanitize_title($title, $raw_title)
        {
        }
        /**
         * @return bool|mixed
         */
        public function locale()
        {
        }
        /**
         * @param string $code
         *
         * @return false|string
         */
        public function get_locale($code)
        {
        }
        /**
         * @return Collection
         */
        public function get_all_locales()
        {
        }
        public function switch_locale($lang_code = \false)
        {
        }
        public function get_locale_file_names()
        {
        }
        private function language_needs_title_sanitization()
        {
        }
        function _language_attributes($latr)
        {
        }
        /**
         * @return WPML_Locale
         */
        public static function get_instance_from_sitepress()
        {
        }
    }
    class WPML_UUID
    {
        /**
         * @param string $object_id
         * @param string $object_type
         * @param int    $timestamp
         *
         * @return string
         */
        public function get($object_id, $object_type, $timestamp = \null)
        {
        }
        /**
         * RFC 4122 compliant UUIDs.
         *
         * The RFC 4122 specification defines a Uniform Resource Name namespace for
         * UUIDs (Universally Unique Identifier), also known as GUIDs (Globally
         * Unique Identifier).  A UUID is 128 bits long, and requires no central
         * registration process.
         *
         * @package UUID
         * @license https://www.gnu.org/licenses/gpl-2.0.txt GPLv2
         * @author bjornjohansen
         * @see https://bjornjohansen.no/uuid-as-wordpress-guid
         *
         * RFC 4122 compliant UUID version 5.
         *
         * @param  string $name    The name to generate the UUID from.
         * @param  string $ns_uuid Namespace UUID. Default is for the NS when name string is a URL.
         *
         * @return string          The UUID string.
         */
        public function get_uuid_v5($name, $ns_uuid = '6ba7b811-9dad-11d1-80b4-00c04fd430c8')
        {
        }
    }
    class WPML_Encoding
    {
        /**
         * @param string $string The string to decode.
         * @param string $encodings A comma separated list of encodings in the order that the data was encoded
         *
         * @return mixed
         */
        public static function decode($string, $encodings)
        {
        }
        /**
         * @param mixed  $data The data to encode.
         * @param string $encodings A comma separated list of encodings in the order that the data was encoded
         *
         * @return string
         */
        public static function encode($data, $encodings)
        {
        }
    }
    /**
     * Class WPML_Queried_Object
     *
     * @author OnTheGoSystems
     */
    class WPML_Queried_Object
    {
        /** @var SitePress $sitepress */
        private $sitepress;
        /** @var  null|object */
        private $queried_object;
        /** @var stdClass $queried_object_details */
        private $queried_object_details;
        /**
         * WPML_TF_Queried_Object constructor.
         *
         * @param SitePress $sitepress
         */
        public function __construct(\SitePress $sitepress)
        {
        }
        public function has_object()
        {
        }
        /**
         * @return null|string
         */
        public function get_source_language_code()
        {
        }
        /**
         * @return string
         */
        public function get_language_code()
        {
        }
        /**
         * @param string $key
         *
         * @return null|mixed
         */
        private function get_queried_object_detail($key)
        {
        }
        /**
         * @return bool
         */
        public function is_post()
        {
        }
        /**
         * @return null|int
         */
        public function get_id()
        {
        }
        /**
         * @return null|string
         */
        public function get_element_type()
        {
        }
        /**
         * @return null|string
         */
        public function get_source_url()
        {
        }
        public function get_post_type()
        {
        }
        public function get_taxonomy()
        {
        }
        public function get_post_type_name()
        {
        }
        public function is_instance_of_post()
        {
        }
        public function is_instance_of_taxonomy()
        {
        }
        public function is_instance_of_post_type()
        {
        }
    }
    /**
     * Class WPML_Transient
     *
     * Due to some conflicts between cached environments (e.g. using W3TC) and the normal
     * WP Transients API, we've added this class which should behaves almost like the normal
     * transients API. Except for the fact that it is stored as normal options, so WP won't
     * recognize/treat it as a transient.
     */
    class WPML_Transient
    {
        const WPML_TRANSIENT_PREFIX = '_wpml_transient_';
        /**
         * @param string $name
         * @param string $value
         * @param string $expiration
         */
        public function set($name, $value, $expiration = '')
        {
        }
        /**
         * @param string $name
         *
         * @return string
         */
        public function get($name)
        {
        }
        /**
         * @param string $name
         */
        public function delete($name)
        {
        }
    }
    class WPML_String_Functions
    {
        public static function is_css_color($string)
        {
        }
        public static function is_css_length($string)
        {
        }
        public static function is_numeric($string)
        {
        }
        public static function is_not_translatable($string)
        {
        }
    }
    class WPML_Temporary_Switch_Admin_Language extends \WPML_SP_User
    {
        private $old_lang = \false;
        /**
         * @param SitePress $sitepress
         * @param string $target_lang
         */
        public function __construct(&$sitepress, $target_lang)
        {
        }
        public function __destruct()
        {
        }
        public function restore_lang()
        {
        }
    }
    class WPML_Flags_Factory
    {
        /** @var  wpdb */
        private $wpdb;
        /**
         * @param wpdb $wpdb
         */
        public function __construct(\wpdb $wpdb)
        {
        }
        /**
         * @return WPML_Flags
         */
        public function create()
        {
        }
    }
    class WPML_Ajax
    {
        /**
         * @return bool
         */
        public static function is_frontend_ajax_request()
        {
        }
        /**
         * @param string $url
         *
         * @return bool
         */
        public static function is_admin_ajax_request_called_from_frontend($url)
        {
        }
    }
    /**
     * Class WPML_Non_Persistent_Cache
     *
     * Implements non-persistent cache based on an array. Suitable to cache objects during single page load.
     */
    class WPML_Non_Persistent_Cache
    {
        /**
         * @var array Cached objects.
         */
        private static $cache = array();
        /**
         * Retrieves the data contents from the cache, if it exists.
         *
         * @param string $key   Cache key.
         * @param string $group Cache group.
         * @param bool   $found Whether the key was found in the cache (passed by reference).
         *                      Disambiguates a return of false, a storable value.
         *
         * @return mixed|bool
         */
        public static function get($key, $group = 'default', &$found = \null)
        {
        }
        /**
         * Sets the data contents into the cache.
         *
         * @param string $key   Cache key.
         * @param mixed  $data  Data to store in cache.
         * @param string $group Cache group.
         *
         * @return bool
         */
        public static function set($key, $data, $group = 'default')
        {
        }
        /**
         * Executes callback function and caches its result.
         *
         * @param string   $key      Cache key.
         * @param callable $callback Callback function.
         * @param string   $group    Cache group.
         *
         * @return bool
         */
        public static function execute_and_cache($key, $callback, $group = 'default')
        {
        }
        /**
         * Flush cache.
         *
         * @return bool
         */
        public static function flush()
        {
        }
        /**
         * Flush cache group.
         *
         * @param array|string $groups Cache group name.
         *
         * @return bool
         */
        public static function flush_group($groups = 'default')
        {
        }
    }
    class WPML_Simple_Language_Selector extends \WPML_SP_User
    {
        function __construct(&$sitepress)
        {
        }
        function render($options = array())
        {
        }
        public static function enqueue_scripts()
        {
        }
    }
    /**
     * Class WPML_Debug_BackTrace
     *
     * @deprecated 4.2.8
     */
    class WPML_Debug_BackTrace extends \WPML\Utils\DebugBackTrace
    {
        /**
         * @param string $php_version Deprecated.
         * @param int    $limit
         * @param bool   $provide_object
         * @param bool   $ignore_args
         * @param string $debug_backtrace_function
         */
        public function __construct($php_version = \null, $limit = 0, $provide_object = \false, $ignore_args = \true, $debug_backtrace_function = \null)
        {
        }
    }
    /**
     * Class WPML_Flags
     *
     * @package wpml-core
     */
    class WPML_Flags
    {
        /** @var icl_cache  */
        private $cache;
        /** @var WPDB $wpdb */
        private $wpdb;
        /** @var WP_Filesystem_Direct */
        private $filesystem;
        /**
         * @param WPDB $wpdb
         * @param icl_cache $cache
         * @param WP_Filesystem_Direct $filesystem
         */
        public function __construct($wpdb, \icl_cache $cache, \WP_Filesystem_Direct $filesystem)
        {
        }
        /**
         * @param $lang_code
         *
         * @return bool|object
         */
        public function get_flag($lang_code)
        {
        }
        public function get_flag_url($lang_code)
        {
        }
        public function clear()
        {
        }
        /**
         * @param array $allowed_file_types
         *
         * @return string[]
         */
        public function get_wpml_flags($allowed_file_types = \null)
        {
        }
        /**
         * @return string
         */
        public final function get_wpml_flags_directory()
        {
        }
        /**
         * @return string
         */
        public final function get_wpml_flags_url()
        {
        }
        /**
         * @param array $allowed_file_types
         * @param array $files
         *
         * @return array
         */
        private function filter_flag_files($allowed_file_types, $files)
        {
        }
        /**
         * @param $base_url
         * @param $path
         *
         * @return string
         */
        private function append_path_to_url($base_url, $path)
        {
        }
    }
}
namespace WPML\Utils {
    class Pager
    {
        /** @var string */
        protected $optionName;
        /** @var int */
        protected $pageSize;
        /**
         * @param string $optionName
         * @param int    $pageSize
         */
        public function __construct($optionName, $pageSize = 10)
        {
        }
        /**
         * @param Collection $collection
         * @param callable   $callback
         * @param int        $timeout
         *
         * @return int
         */
        public function iterate(\WPML\Collect\Support\Collection $collection, callable $callback, $timeout = PHP_INT_MAX)
        {
        }
        private function getItemsToProcess(\WPML\Collect\Support\Collection $collection, $processedItems)
        {
        }
        /**
         * @param Collection $collection
         *
         * @return int
         */
        public function getPagesCount(\WPML\Collect\Support\Collection $collection)
        {
        }
        /**
         * @param \WPML\Collect\Support\Collection $collection
         *
         * @return int
         */
        protected function getRemainingPages(\WPML\Collect\Support\Collection $collection, $processedItems)
        {
        }
        /**
         * @return int
         */
        public function getProcessedCount()
        {
        }
    }
}
namespace {
    class WPML_Display_As_Translated_Message_For_New_Post implements \IWPML_Action
    {
        /** @var SitePress $sitepress */
        private $sitepress;
        /** @var WPML_Notices $notices */
        private $notices;
        public function __construct(\SitePress $sitepress, \WPML_Notices $notices)
        {
        }
        public function add_hooks()
        {
        }
        public function init()
        {
        }
        public function get_notice_content()
        {
        }
        private function is_display_as_translated_mode()
        {
        }
        private function current_language_is_not_default_language()
        {
        }
        private function get_post_type()
        {
        }
    }
    class WPML_Display_As_Translated_Snippet_Filters implements \IWPML_Action
    {
        public function add_hooks()
        {
        }
        public function filter_post_types($should_use_snippet, array $post_type)
        {
        }
        private function is_admin_media_list_page()
        {
        }
        private function is_media_ajax_query(array $post_type)
        {
        }
    }
    class WPML_Display_As_Translated_Default_Lang_Messages_Factory extends \WPML_Current_Screen_Loader_Factory
    {
        /**
         * @return WPML_Display_As_Translated_Default_Lang_Messages
         */
        public function create_hooks()
        {
        }
        /** @return string */
        public function get_screen_regex()
        {
        }
    }
    class WPML_Display_As_Translated_Default_Lang_Messages
    {
        const PREVIOUS_LANG_KEY = 'wpml-previous-default-language';
        /**
         * @var SitePress
         */
        private $sitepress;
        /**
         * @var WPML_Display_As_Translated_Default_Lang_Messages_View
         */
        private $view;
        public function __construct(\SitePress $sitepress, \WPML_Display_As_Translated_Default_Lang_Messages_View $view)
        {
        }
        public function add_hooks()
        {
        }
        public function enqueue_scripts()
        {
        }
        /**
         * @param string $prev_lang
         */
        public function save_previous_lang($prev_lang)
        {
        }
        public function display_messages()
        {
        }
        /**
         * @return bool
         */
        private function should_display_message()
        {
        }
    }
    class WPML_Cache_Terms_Per_Lang implements \IWPML_Action
    {
        const CACHE_GROUP = 'WPML_Cache_Terms_Per_Lang';
        /** @var SitePress $sitepress */
        private $sitepress;
        /**
         * WPML_Cache_Terms_Per_Lang constructor.
         *
         * @param SitePress $sitepress
         */
        public function __construct(\SitePress $sitepress)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param array  $terms
         * @param int    $post_id
         * @param string $taxonomy
         *
         * @return array|bool
         */
        public function terms_per_lang($terms, $post_id, $taxonomy)
        {
        }
        /**
         * @param array  $all_terms
         * @param string $taxonomy
         *
         * @return WPML\Collect\Support\Collection
         */
        private function get_terms_by_tax($all_terms, $taxonomy)
        {
        }
        /**
         * @param array $object_ids An array of object IDs.
         */
        public function clear_cache($object_ids)
        {
        }
    }
    class WPML_Display_As_Translated_Snippet_Filters_Factory implements \IWPML_Frontend_Action_Loader, \IWPML_Backend_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_Display_As_Translated_Message_For_New_Post_Factory implements \IWPML_Backend_Action_Loader
    {
        public function create()
        {
        }
    }
    /**
     * Created by PhpStorm.
     * User: bruce
     * Date: 28/10/17
     * Time: 5:07 PM
     */
    class WPML_Fix_Links_In_Display_As_Translated_Content implements \IWPML_Action, \IWPML_Frontend_Action, \IWPML_DIC_Action
    {
        /** @var SitePress $sitepress */
        private $sitepress;
        /** @var WPML_Translate_Link_Targets $translate_link_targets */
        private $translate_link_targets;
        public function __construct(\SitePress $sitepress, \WPML_Translate_Link_Targets $translate_link_targets)
        {
        }
        public function add_hooks()
        {
        }
        public function fix_fallback_links($content)
        {
        }
        private function is_display_as_translated_content_type()
        {
        }
        private function encode_language_switcher_links($content)
        {
        }
        private function decode_language_switcher_links($content, $encoded_ls_links)
        {
        }
    }
    class WPML_Display_As_Translated_Default_Lang_Messages_View
    {
        const TEMPLATE = 'default-language-change.twig';
        /**
         * @var WPML_Twig_Template
         */
        private $template_service;
        public function __construct(\WPML_Twig_Template $template_service)
        {
        }
        /**
         * @param string $prev_default_lang
         * @param string $default_lang
         */
        public function display($prev_default_lang, $default_lang)
        {
        }
        /**
         * @param string $prev_default_lang
         * @param string $default_lang
         *
         * @return array
         */
        private function get_model($prev_default_lang, $default_lang)
        {
        }
    }
    class WPML_Cache_Terms_Per_Lang_Factory implements \IWPML_Backend_Action_Loader, \IWPML_Frontend_Action_Loader
    {
        public function create()
        {
        }
    }
}
namespace WPML\Container {
    class Config
    {
        public static function getSharedInstances()
        {
        }
        public static function getSharedClasses()
        {
        }
        public static function getAliases()
        {
        }
        public static function getDelegated()
        {
        }
    }
    class Container
    {
        /** @var Container $instance */
        private static $instance = null;
        /** @var AurynInjector|null  */
        private $injector = null;
        private function __construct()
        {
        }
        /**
         * @return Container
         */
        public static function get_instance()
        {
        }
        /**
         * class names or instances that should be shared.
         * Shared means that only one instance is ever created when calling the make function.
         *
         * @param array $names_or_instances
         */
        public static function share(array $names_or_instances)
        {
        }
        /**
         * This allows to define aliases classes to be used in place of type hints.
         * e.g. [
         *          // generic => specific
         *          'wpdb' => 'QM_DB',
         *      ]
         *
         * @param array $aliases
         */
        public static function alias(array $aliases)
        {
        }
        /**
         * This allows to delegate the object instantiation to a factory.
         * It can be any kind of callable (class or function).
         *
         * @param array $delegated [ $class_name => $instantiator ]
         */
        public static function delegate(array $delegated)
        {
        }
        /**
         * Make returns a new instance otherwise returns a shared instance if the
         * class_name or an instance is set as shared using the share function
         *
         * @param string $class_name
         * @param array $args
         *
         * @return mixed
         * @throws \Auryn\InjectionException
         */
        public static function make($class_name, array $args = array())
        {
        }
    }
}
namespace {
    /**
     * @author OnTheGo Systems
     */
    interface WPML_Log
    {
        public function insert($timestamp, array $entry);
        public function get($page_size = 0, $page = 0);
        public function save(array $data);
        public function clear();
        public function is_empty();
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Support_Info_UI
    {
        /** @var WPML_Support_Info */
        private $support_info;
        /** @var IWPML_Template_Service */
        private $template_service;
        function __construct(\WPML_Support_Info $support_info, \IWPML_Template_Service $template_service)
        {
        }
        /**
         * @return string
         */
        public function show()
        {
        }
        /** @return array */
        private function get_model()
        {
        }
        /**
         * @param array $blocks
         * @param       $type
         */
        private function set_has_messages(array &$blocks, $type)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Support_Info_UI_Factory
    {
        function create()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Support_Info
    {
        /** @var wpdb */
        private $wpdb;
        /**
         * @param wpdb $wpdb
         */
        public function __construct(\wpdb $wpdb)
        {
        }
        public function is_suhosin_active()
        {
        }
        public function eval_disabled_by_suhosin()
        {
        }
        public function get_max_execution_time()
        {
        }
        public function get_max_input_vars()
        {
        }
        public function get_php_memory_limit()
        {
        }
        public function get_memory_usage()
        {
        }
        public function get_php_version()
        {
        }
        public function get_wp_memory_limit()
        {
        }
        public function get_wp_max_memory_limit()
        {
        }
        public function get_wp_multisite()
        {
        }
        public function get_wp_version()
        {
        }
        public function is_memory_less_than($reference, $memory)
        {
        }
        public function is_version_less_than($reference, $version)
        {
        }
        public function is_utf8mb4_charset_supported()
        {
        }
        private function return_bytes($val)
        {
        }
        private function format_size_units($bytes)
        {
        }
    }
    class WPML_Set_Language extends \WPML_Full_Translation_API
    {
        /**
         * @param int           $el_id the element's ID (for terms we use the `term_taxonomy_id`)
         * @param string        $el_type
         * @param int|bool|null $trid Trid the element is to be assigned to. Input that is == false will cause the term to
         *                            be assigned a new trid and potential translation relations to/from it to disappear.
         * @param string        $language_code
         * @param null|string   $src_language_code
         * @param bool          $check_duplicates
         *
         * @return bool|int|null|string
         */
        public function set($el_id, $el_type = 'post_post', $trid, $language_code, $src_language_code = \null, $check_duplicates = \true)
        {
        }
        /**
         * Returns the translation id belonging to a specific trid, language_code combination
         *
         * @param int    $trid
         * @param string $lang
         *
         * @return null|int
         */
        private function trid_lang_trans_id($trid, $lang)
        {
        }
        /**
         * Changes the source_language_code of an element
         *
         * @param int    $trid
         * @param int    $el_id
         * @param string $el_type
         * @param string $language_code
         * @param string $src_language_code
         */
        private function change_translation_of($trid, $el_id, $el_type, $language_code, $src_language_code)
        {
        }
        /**
         * @param string $el_type
         * @param int    $el_id
         */
        private function delete_existing_row($el_type, $el_id)
        {
        }
        /**
         * Inserts a new row into icl_translations
         *
         * @param int    $el_id
         * @param int    $trid
         * @param string $el_type
         * @param string $language_code
         * @param string $src_language_code
         *
         * @return int Translation ID of the new row
         */
        private function insert_new_row($el_id, $trid, $el_type, $language_code, $src_language_code)
        {
        }
        /**
         * Checks if a row exists for a concrete id, type and trid combination
         * in icl_translations.
         *
         * @param int    $el_id
         * @param string $el_type
         * @param int    $trid
         *
         * @return null|int
         */
        private function is_language_change($el_id, $el_type, $trid)
        {
        }
        /**
         * Checks if a given trid, language_code combination contains a placeholder with NULL element_id
         * and if so returns the translation id of this row.
         *
         * @param int    $trid
         * @param string $language_code
         *
         * @return null|string translation id
         */
        private function is_placeholder_update($trid, $language_code)
        {
        }
        /**
         * Checks if a row in icl_translations exists for a concrete element type and id combination
         *
         * @param int    $el_id
         * @param string $el_type
         *
         * @return null|int
         */
        private function existing_element($el_id, $el_type)
        {
        }
        /**
         * Checks if a trid contains an existing translation other than a specific element id and deletes that row if it
         * exists.
         *
         * @param int    $trid
         * @param string $language_code
         * @param int    $correct_element_id
         */
        private function maybe_delete_orphan($trid, $language_code, $correct_element_id)
        {
        }
        /**
         * Checks if a duplicate element_id already exists with a different than the input type.
         * This only applies to posts and taxonomy terms.
         *
         * @param string $el_type
         * @param int    $el_id
         *
         * @return null|string null if no duplicate icl translations entry is found
         * having a different than the input element type, the element type if a
         * duplicate row is found.
         */
        private function check_duplicate($el_type, $el_id)
        {
        }
        private function duplicate_from_db($el_id, $el_type, $_type)
        {
        }
        private function clear_cache()
        {
        }
    }
    /**
     * WPML_File class file.
     *
     * @package wpml-core
     */
    /**
     * Class WPML_File
     */
    class WPML_File
    {
        /**
         * WPML WP API instance.
         *
         * @var WPML_WP_API $wp_api
         */
        private $wp_api;
        /**
         * WP_Filesystem_Direct instance.
         *
         * @var WP_Filesystem_Direct
         */
        private $filesystem;
        /**
         * WPML_File constructor.
         *
         * @param WPML_WP_API|null          $wp_api     WPML WP API instance.
         * @param WP_Filesystem_Direct|null $filesystem WP_Filesystem_Direct instance.
         */
        public function __construct(\WPML_WP_API $wp_api = \null, \WP_Filesystem_Direct $filesystem = \null)
        {
        }
        /**
         * Fix directory separator if backslash is used.
         *
         * @param string $path Path to fix.
         *
         * @return string
         */
        public function fix_dir_separator($path)
        {
        }
        /**
         * Get uri from file path.
         *
         * @param string $path File path.
         *
         * @return string
         */
        public function get_uri_from_path($path)
        {
        }
        /**
         * Get path relative to ABSPATH.
         *
         * @param string $path File path.
         *
         * @return string
         */
        public function get_relative_path($path)
        {
        }
        /**
         * Get full file path.
         *
         * @param string $path File path.
         *
         * @return string
         */
        public function get_full_path($path)
        {
        }
        /**
         * Check if file exists.
         *
         * @param string $path File path.
         *
         * @return bool
         */
        public function file_exists($path)
        {
        }
        /**
         * Get file modification time.
         *
         * @param string $path File path.
         *
         * @return int
         */
        public function get_file_modified_timestamp($path)
        {
        }
    }
    interface IWPML_Taxonomy_State
    {
        public function is_translated_taxonomy($tax);
        public function is_display_as_translated_taxonomy($tax);
        public function get_display_as_translated_taxonomies();
        public function get_translatable_taxonomies($include_not_synced = \false, $deprecated = 'post');
    }
    /**
     * @deprecated since WPML 4.2.8
     *
     * Some constants are used in other projects, but it should be removed soon.
     */
    class WPML_Theme_Localization_Type
    {
        const USE_ST = 1;
        const USE_MO_FILES = 2;
        const USE_ST_AND_NO_MO_FILES = 3;
    }
    /**
     * Class WPML_Adjacent_Links_Hooks_Factory
     *
     * @author OnTheGoSystems
     */
    class WPML_Adjacent_Links_Hooks_Factory implements \IWPML_Frontend_Action_Loader, \IWPML_Backend_Action_Loader, \IWPML_AJAX_Action_Loader
    {
        /** @return WPML_Adjacent_Links_Hooks */
        public function create()
        {
        }
    }
    /**
     * Class WPML_Adjacent_Links_Hooks
     *
     * @author OnTheGoSystems
     */
    class WPML_Adjacent_Links_Hooks implements \IWPML_Action
    {
        /** @var SitePress $sitepress */
        private $sitepress;
        /** @var wpdb $wpdb */
        private $wpdb;
        /** @var WPML_Language_Where_Clause $language_where_clause */
        private $language_where_clause;
        /**
         * WPML_Adjacent_Links_Hooks constructor.
         *
         * @param SitePress $sitepress
         * @param wpdb $wpdb
         * @param WPML_Language_Where_Clause $language_where_clause
         */
        public function __construct(\SitePress $sitepress, \wpdb $wpdb, \WPML_Language_Where_Clause $language_where_clause)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param string $join_clause
         *
         * @return string
         */
        function get_adjacent_post_join($join_clause)
        {
        }
        /**
         * @param string $where_clause
         *
         * @return string
         */
        function get_adjacent_post_where($where_clause)
        {
        }
        /** @return string */
        private function get_current_post_type()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    interface IWPML_REST_Action_Loader extends \IWPML_Action_Loader_Factory
    {
    }
}
namespace WPML\Action {
    /**
     * Class Type
     * @package WPML\Action
     *
     * Determines the type of action that a class implements. Can be
     * one or more of:
     * backend, frontend, ajax, rest, cli or dic
     *
     * dic means that the class can be loaded via Dependency Injection Container
     */
    class Type
    {
        private $backend_actions = ['IWPML_Backend_Action_Loader', 'IWPML_Backend_Action'];
        private $frontend_actions = ['IWPML_Frontend_Action_Loader', 'IWPML_Frontend_Action'];
        private $ajax_actions = ['IWPML_AJAX_Action_Loader', 'IWPML_AJAX_Action'];
        private $rest_actions = ['IWPML_REST_Action_Loader', 'IWPML_REST_Action'];
        private $cli_actions = ['IWPML_CLI_Action_Loader', 'IWPML_CLI_Action'];
        private $dic_actions = ['IWPML_DIC_Action'];
        /** @var array */
        private $implementations;
        /**
         * Info constructor.
         *
         * @param string $class_name The class name of the action or action loader
         */
        public function __construct($class_name)
        {
        }
        /**
         * @param $type The type of action 'backend', 'frontend', 'ajax', 'rest', 'cli' or 'dic'
         *
         * @return bool
         */
        public function is($type)
        {
        }
        /**
         * @param array $interfaces
         *
         * @return bool
         */
        private function has_implementation($interfaces)
        {
        }
    }
}
namespace {
    /**
     * @author OnTheGo Systems
     */
    interface IWPML_CLI_Action extends \IWPML_Action
    {
    }
    /**
     * WPML_Action_Filter_Loader class file
     *
     * @package WPML\Core
     */
    /**
     * Class WPML_Action_Filter_Loader
     */
    class WPML_Action_Filter_Loader
    {
        /**
         * Deferred actions
         *
         * @var  array $defered_actions
         */
        private $defered_actions = array();
        /**
         * Ajax action validation
         *
         * @var  WPML_AJAX_Action_Validation $ajax_action_validation
         */
        private $ajax_action_validation;
        /**
         * Load action filter
         *
         * @param string[] $loaders Action loaders.
         */
        public function load($loaders)
        {
        }
        /**
         * Load factory
         *
         * @param string $loader Action loader.
         */
        private function load_factory_or_action($loader, $use_dic)
        {
        }
        /**
         * @param IWPML_Action_Loader_Factory $factory
         */
        private function load_factory(\IWPML_Action_Loader_Factory $factory)
        {
        }
        /**
         * Add deferred action
         *
         * @param IWPML_Deferred_Action_Loader $factory Action factory.
         */
        private function add_deferred_action(\IWPML_Deferred_Action_Loader $factory)
        {
        }
        /**
         * Deferred action loader
         */
        public function deferred_loader()
        {
        }
        /**
         * Get ajax action validation
         *
         * @return WPML_AJAX_Action_Validation
         */
        private function get_ajax_action_validation()
        {
        }
        /**
         * Run factory
         *
         * @param IWPML_Action_Loader_Factory $factory Action loader factory.
         */
        private function run_factory(\IWPML_Action_Loader_Factory $factory)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    interface IWPML_REST_Action extends \IWPML_Action
    {
    }
    /**
     * IWPML_CLI_Action_Loader interface
     *
     * @package WPML\Core
     */
    /**
     * Interface IWPML_CLI_Action_Loader
     *
     * @author OnTheGo Systems
     */
    interface IWPML_CLI_Action_Loader extends \IWPML_Action_Loader_Factory
    {
    }
    /**
     * Class WPML_AJAX_Action_Validation
     *
     * @author OnTheGoSystems
     */
    class WPML_AJAX_Action_Validation
    {
        /**
         * @param string $action_name
         *
         * @return bool
         */
        public function is_valid($action_name)
        {
        }
    }
    /**
     * Class WPML_Canonicals_Hooks
     */
    class WPML_Canonicals_Hooks
    {
        /** @var SitePress $sitepress */
        private $sitepress;
        /** @var  WPML_URL_Converter $url_converter */
        private $url_converter;
        /** @var callable $is_current_request_root_callback */
        private $is_current_request_root_callback;
        /**
         * WPML_Canonicals_Hooks constructor.
         *
         * @param SitePress          $sitepress
         * @param WPML_URL_Converter $url_converter
         * @param callable           $is_current_request_root_callback
         */
        public function __construct(\SitePress $sitepress, \WPML_URL_Converter $url_converter, $is_current_request_root_callback)
        {
        }
        public function add_hooks()
        {
        }
        public function redirect_pages_from_root_to_default_lang_dir()
        {
        }
        /**
         * @param string $redirect
         *
         * @return bool|string
         */
        public function maybe_fix_nginx_redirection_callback($redirect)
        {
        }
        /**
         * @param string $redirect_url
         *
         * @return string|false
         */
        public function prevent_redirection_with_translated_paged_content($redirect_url)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Canonicals
    {
        const CANONICAL_FOR_DUPLICATED_POST = 'duplicate';
        const CANONICAL_FOR_NON_TRANSLATABLE_POST = 'non-translatable';
        /** @var SitePress */
        private $sitepress;
        /** @var WPML_Translations */
        private $wpml_translations;
        /** @var WPML_Translation_Element_Factory  */
        private $translation_element_factory;
        /**
         * WPML_Canonicals constructor.
         *
         * @param SitePress $sitepress
         * @param WPML_Translation_Element_Factory $translation_element_factory
         * @param WPML_Translations $wpml_translations
         */
        public function __construct(\SitePress $sitepress, \WPML_Translation_Element_Factory $translation_element_factory, \WPML_Translations $wpml_translations = \null)
        {
        }
        /**
         * @param int $post_id
         *
         * @return bool|string
         * @throws \InvalidArgumentException
         */
        private function must_filter_permalink($post_id)
        {
        }
        /**
         * @param string $link
         * @param int    $post_id
         *
         * @return null|string
         * @throws \InvalidArgumentException
         */
        public function permalink_filter($link, $post_id)
        {
        }
        /**
         * @param string  $canonical_url
         * @param WP_Post $post
         *
         * @return string|bool
         */
        public function get_canonical_url($canonical_url, $post, $request_language)
        {
        }
        /**
         * @param $url
         *
         * @return string
         */
        public function get_general_canonical_url($url)
        {
        }
        private function has_wp_get_canonical_url()
        {
        }
        /**
         * @return bool
         */
        private function is_permalink_filter_from_rel_canonical()
        {
        }
        /**
         * @param string $link
         *
         * @return bool|string
         */
        private function get_url_in_default_language_if_rel_canonical($link)
        {
        }
        /**
         * @param WPML_Post_Element $post_element
         *
         * @return false|string
         */
        private function get_canonical_of_duplicate($post_element)
        {
        }
        /**
         * @return bool
         */
        private function must_handle_a_canonical_url()
        {
        }
        private function init_wpml_translations()
        {
        }
    }
    class WPML_REST_Posts_Hooks implements \IWPML_Action
    {
        /** @var SitePress $sitepress */
        private $sitepress;
        /** @var WPML_Term_Translation $term_translations */
        private $term_translations;
        public function __construct(\SitePress $sitepress, \WPML_Term_Translation $term_translations)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param WP_REST_Response $response The response object.
         * @param WP_Post          $post     Post object.
         *
         * @return WP_REST_Response
         */
        public function prepare_post($response, $post)
        {
        }
        /**
         * @param WP_REST_Response $response The response object.
         * @param WP_Post          $post     Post object.
         *
         * @return WP_REST_Response
         */
        private function preset_terms_in_new_translation($response, $post)
        {
        }
        /**
         * @param array    $terms
         * @param stdClass $tax
         * @param array    $translatable_taxs
         * @param string   $current_lang
         *
         * @return array
         */
        private function get_translated_term_ids(array $terms, $tax, array $translatable_taxs, $current_lang)
        {
        }
        /**
         * @param WP_REST_Response $response The response object.
         * @param WP_Post          $post     Post object.
         *
         * @return WP_REST_Response
         */
        private function adjust_sample_links($response, $post)
        {
        }
        /**
         * @param WP_HTTP_Response|WP_Error $response Result to send to the client. Usually a WP_REST_Response or WP_Error.
         * @param array                     $handler  Route handler used for the request.
         * @param WP_REST_Request           $request  Request used to generate the response.
         *
         * @return WP_HTTP_Response|WP_Error
         */
        public function reload_wpml_post_translation($response, array $handler, \WP_REST_Request $request)
        {
        }
        private function is_saving_reusable_block(\WP_REST_Request $request)
        {
        }
    }
    class WPML_REST_Posts_Hooks_Factory implements \IWPML_Deferred_Action_Loader, \IWPML_Backend_Action_Loader, \IWPML_REST_Action_Loader
    {
        public function get_load_action()
        {
        }
        public function create()
        {
        }
    }
    /**
     * Class WPML_Block_Editor_Helper
     */
    class WPML_Block_Editor_Helper
    {
        /**
         * Check if Block Editor is active.
         * Must only be used after plugins_loaded action is fired.
         *
         * @return bool
         */
        public static function is_active()
        {
        }
        /**
         * Check if it is admin page to edit any type of post with Block Editor.
         * Must be used not earlier than plugins_loaded action fired.
         *
         * @return bool
         */
        public static function is_edit_post()
        {
        }
        /**
         * Check if Classic Editor plugin is active.
         *
         * @return bool
         */
        public static function is_classic_editor_plugin_active()
        {
        }
        public static function is_block_editor($current_screen)
        {
        }
    }
    class WPML_Admin_Resources_Hooks
    {
        public function add_hooks()
        {
        }
        public function register_resources()
        {
        }
    }
    class WPML_Admin_Resources_Hooks_Factory implements \IWPML_Backend_Action_Loader
    {
        /** @return WPML_Admin_Resources_Hooks */
        public function create()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_API_Hook_Translation_Element implements \IWPML_Action
    {
        private $flags_factory;
        private $sitepress;
        private $translation_element_factory;
        /**
         * WPML_API_Hook_Post constructor.
         *
         * @param SitePress                        $sitepress
         * @param WPML_Translation_Element_Factory $translation_element_factory
         * @param WPML_Flags_Factory               $flags_factory
         */
        public function __construct(\SitePress $sitepress, \WPML_Translation_Element_Factory $translation_element_factory, \WPML_Flags_Factory $flags_factory)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param string $default
         * @param int    $element_id
         * @param string $element_type any of `WPML_Translation_Element_Factory::ELEMENT_TYPE_POST`, `WPML_Translation_Element_Factory::ELEMENT_TYPE_TERM`, `WPML_Translation_Element_Factory::ELEMENT_TYPE_MENU`
         *
         * @return string
         */
        public function get_post_language_flag_url($default, $element_id, $element_type = \WPML_Translation_Element_Factory::ELEMENT_TYPE_POST)
        {
        }
    }
    /**
     * Class WPML_API_Hook_Links
     *
     * This class provides various links by hooks
     */
    class WPML_API_Hook_Links implements \IWPML_Action
    {
        const POST_TRANSLATION_SETTINGS_PRIORITY = 10;
        const LINK_TO_TRANSLATION_PRIORITY = 9;
        /** @var WPML_Post_Status_Display_Factory */
        private $post_status_display_factory;
        public function __construct(\WPML_Post_Status_Display_Factory $post_status_display_factory)
        {
        }
        public function add_hooks()
        {
        }
        public function get_post_translation_settings_link($link)
        {
        }
        public function get_link_to_edit_translation($link, $post_id, $lang)
        {
        }
    }
    class WPML_API_Hook_Sync_Custom_Fields implements \IWPML_Action
    {
        /** @var WPML_Sync_Custom_Fields $sync_custom_fields */
        private $sync_custom_fields;
        public function __construct(\WPML_Sync_Custom_Fields $sync_custom_fields)
        {
        }
        public function add_hooks()
        {
        }
        public function sync_custom_field($post_id, $custom_field_name)
        {
        }
        public function sync_all_custom_fields($post_id)
        {
        }
    }
    class WPML_API_Hook_Permalink implements \IWPML_Action
    {
        /** @var WPML_URL_Converter $url_converter */
        private $url_converter;
        /** @var IWPML_Resolve_Object_Url $absolute_resolver */
        private $absolute_resolver;
        public function __construct(\WPML_URL_Converter $url_converter, \IWPML_Resolve_Object_Url $absolute_resolver)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param string      $url
         * @param null|string $lang
         * @param bool        $absolute_url If `true`, WPML will try to resolve the object behind the URL
         *                                  and try to find the matching translation's URL.
         *                                  WARNING: This is a heavy process which could lead to performance hit.
         *
         * @return string
         */
        public function wpml_permalink_filter($url, $lang = \null, $absolute_url = \false)
        {
        }
    }
    class WPML_API_Hooks_Factory implements \IWPML_Backend_Action_Loader, \IWPML_Frontend_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_API_Hook_Translation_Mode implements \IWPML_Action
    {
        const OPTION_KEY = 'custom_posts_sync_option';
        /** Allowed modes */
        const DO_NOT_TRANSLATE = 'do_not_translate';
        const TRANSLATE = 'translate';
        const DISPLAY_AS_TRANSLATED = 'display_as_translated';
        /** @var WPML_Settings_Helper $settings */
        private $settings;
        public function __construct(\WPML_Settings_Helper $settings)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param string $post_type
         * @param string $translation_mode any of
         *                                 `WPML_API_Hook_Translation_Mode::DO_NOT_TRANSLATE`,
         *                                 `WPML_API_Hook_Translation_Mode::TRANSLATE`,
         *                                 `WPML_API_Hook_Translation_Mode::DISPLAY_AS_TRANSLATED`
         */
        public function set_mode_for_post_type($post_type, $translation_mode)
        {
        }
    }
    /**
     * Class WPML_API_Hook_Copy_Post_To_Language
     */
    class WPML_API_Hook_Copy_Post_To_Language implements \IWPML_Action
    {
        /** @var WPML_Post_Duplication $post_duplication */
        private $post_duplication;
        public function __construct(\WPML_Post_Duplication $post_duplication)
        {
        }
        public function add_hooks()
        {
        }
        public function copy_post_to_language($post_id, $target_language, $mark_as_duplicate)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Rest
    {
        private $http;
        /**
         * WPML_Rest constructor.
         *
         * @param WP_Http $http
         */
        public function __construct(\WP_Http $http)
        {
        }
        public function is_available()
        {
        }
        public function is_rest_request()
        {
        }
        public function has_registered_routes()
        {
        }
        public function has_discovered_routes()
        {
        }
        private function get_discovered_routes()
        {
        }
        public function get_discovery_url()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     *
     * The following method can be used as REST arguments sanitation callback
     */
    class WPML_REST_Arguments_Sanitation
    {
        /**
         * @param $value
         *
         * @return bool
         */
        static function boolean($value)
        {
        }
        /**
         * @param $value
         *
         * @return bool
         */
        static function integer($value)
        {
        }
        /**
         * @param $value
         *
         * @return bool
         */
        static function float($value)
        {
        }
        /**
         * @param $value
         *
         * @return bool
         */
        static function string($value)
        {
        }
        /**
         * @param $value
         *
         * @return bool
         */
        static function url($value)
        {
        }
        /**
         * @param $value
         *
         * @return bool
         */
        static function email($value)
        {
        }
        /**
         * @param $value
         *
         * @return array
         */
        static function array_of_integers($value)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    abstract class WPML_REST_Base
    {
        const CAPABILITY_EXTERNAL = 'external';
        const REST_NAMESPACE = 'wpml/v1';
        /**
         * @var null
         */
        protected $namespace;
        /**
         * WPML_REST_Base constructor.
         *
         * @param null $namespace Defaults to `\WPML_REST_Base::REST_NAMESPACE`
         */
        public function __construct($namespace = \null)
        {
        }
        abstract function add_hooks();
        public function validate_permission(\WP_REST_Request $request)
        {
        }
        abstract function get_allowed_capabilities(\WP_REST_Request $request);
        /**
         * @param string $route
         * @param array  $args
         */
        protected function register_route($route, array $args)
        {
        }
        /**
         * @param array $args
         *
         * @return array
         */
        private function ensure_permission(array $args)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     *
     * The following method can be used as REST arguments validation callback
     */
    class WPML_REST_Arguments_Validation
    {
        /**
         * @param $value
         *
         * @return bool
         */
        static function boolean($value)
        {
        }
        /**
         * @param $value
         *
         * @return bool
         */
        static function integer($value)
        {
        }
        /**
         * @param $value
         *
         * @return bool
         */
        static function float($value)
        {
        }
        /**
         * @param $value
         *
         * @return bool
         */
        static function url($value)
        {
        }
        /**
         * @param $value
         *
         * @return bool
         */
        static function email($value)
        {
        }
        /**
         * @param $value
         *
         * @return bool
         */
        static function is_array($value)
        {
        }
        static function date($value)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_REST_Extend_Args implements \IWPML_Action
    {
        const REST_LANGUAGE_ARGUMENT = 'wpml_language';
        /** @var \SitePress $sitepress */
        private $sitepress;
        /** @var string $current_language_backup */
        private $current_language_backup;
        public function __construct(\SitePress $sitepress)
        {
        }
        function add_hooks()
        {
        }
        /**
         * Adds the `wpml_language` argument (optional) to all REST calls with arguments.
         *
         * @param array $endpoints
         *
         * @return array
         */
        public function rest_endpoints(array $endpoints)
        {
        }
        /**
         * If `wpml_language` is provided, backups the current language, then switch to the provided one.
         *
         * @param \WP_REST_Response|array|mixed $response
         * @param \WP_REST_Server|array|mixed   $rest_server
         * @param \WP_REST_Request              $request
         *
         * @return mixed
         */
        public function rest_request_before_callbacks($response, $rest_server, $request)
        {
        }
        /**
         * Restore the backup language, if set.
         *
         * @param \WP_REST_Response|array|mixed $response
         *
         * @return mixed
         */
        public function rest_request_after_callbacks($response)
        {
        }
        /**
         * @return array
         */
        private function get_active_language_codes()
        {
        }
    }
}
namespace WPML\Rest {
    interface ITarget
    {
        function get_routes();
        function get_allowed_capabilities(\WP_REST_Request $request);
        function get_namespace();
    }
    abstract class Base implements \WPML\Rest\ITarget, \IWPML_Action
    {
        /** @var Adaptor */
        private $adaptor;
        public function __construct(\WPML\Rest\Adaptor $adaptor)
        {
        }
        /**
         * @return string
         */
        public abstract function get_namespace();
        public function add_hooks()
        {
        }
        /**
         * @return array
         */
        public static function getStringType()
        {
        }
        /**
         * @return array
         */
        public static function getIntType()
        {
        }
    }
}
namespace {
    /**
     * @author OnTheGo Systems
     */
    abstract class WPML_REST_Factory_Loader implements \IWPML_REST_Action_Loader, \IWPML_Deferred_Action_Loader
    {
        const REST_API_INIT_ACTION = 'rest_api_init';
        /**
         * @return string
         */
        public function get_load_action()
        {
        }
    }
}
namespace WPML\Rest {
    class Adaptor extends \WPML_REST_Base
    {
        /** @var ITarget $target */
        private $target;
        public function set_target(\WPML\Rest\ITarget $target)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param WP_REST_Request $request
         *
         * @return array
         */
        public function get_allowed_capabilities(\WP_REST_Request $request)
        {
        }
    }
}
namespace {
    /**
     * @author OnTheGo Systems
     */
    class WPML_REST_Extend_Args_Factory implements \IWPML_REST_Action_Loader
    {
        /**
         * @return IWPML_Action|IWPML_Action[]|null
         */
        public function create()
        {
        }
    }
    /**
     * Fetch the wpml config files for known plugins and themes
     *
     * @package wpml-core
     */
    class WPML_Config_Update
    {
        /** @var bool */
        private $has_errors;
        private $log;
        /** @var  SitePress $sitepress */
        protected $sitepress;
        /**
         * @var WP_Http $http
         */
        private $http;
        /**
         * @var WPML_Active_Plugin_Provider
         */
        private $active_plugin_provider;
        /**
         * WPML_Config_Update constructor.
         *
         * @param SitePress     $sitepress
         * @param WP_Http       $http
         * @param WPML_Log|null $log
         */
        public function __construct($sitepress, $http, \WPML_Log $log = \null)
        {
        }
        /**
         * @param WPML_Active_Plugin_Provider $active_plugin_provider
         */
        public function set_active_plugin_provider(\WPML_Active_Plugin_Provider $active_plugin_provider)
        {
        }
        /**
         * @return WPML_Active_Plugin_Provider
         */
        public function get_active_plugin_provider()
        {
        }
        public function run()
        {
        }
        private function is_valid_wpml_config_files_arr($wpml_config_files_arr)
        {
        }
        /**
         * @param array|WP_Error $response
         *
         * @return bool
         */
        private function is_a_valid_remote_response($response)
        {
        }
        private function is_http_error($response)
        {
        }
        /**
         * @param string|array|WP_Error $response
         * @param string                $request_type
         * @param null                  $component
         * @param array|stdClass|null   $extra_data
         */
        private function log_response($response, $request_type = 'unknown', $component = \null, $extra_data = \null)
        {
        }
        private function is_config_update_disabled()
        {
        }
    }
    class WPML_Post_Edit_Terms_Hooks implements \IWPML_Action
    {
        const AFTER_POST_DATA_SANITIZED_ACTION = 'init';
        /** @var IWPML_Current_Language $language */
        private $language;
        /** @var wpdb $wpdb */
        private $wpdb;
        public function __construct(\IWPML_Current_Language $current_language, \wpdb $wpdb)
        {
        }
        public function add_hooks()
        {
        }
        public function set_tags_input_with_ids()
        {
        }
        /**
         * @return array
         */
        public function get_tags_from_tax_input()
        {
        }
    }
    class WPML_Post_Edit_Terms_Hooks_Factory implements \IWPML_Backend_Action_Loader
    {
        public function create()
        {
        }
        private function is_saving_post_data_with_terms()
        {
        }
    }
    class WPML_Post_Status extends \WPML_WPDB_User
    {
        private $needs_update = array();
        private $status = array();
        private $preload_done = \false;
        private $wp_api;
        public function __construct(&$wpdb, $wp_api)
        {
        }
        public function needs_update($post_id)
        {
        }
        private function maybe_preload()
        {
        }
        public function reload()
        {
        }
        public function set_update_status($post_id, $update)
        {
        }
        /**
         * @param int $post_id
         * @param int $status
         *
         * @return bool
         */
        public function set_status($post_id, $status)
        {
        }
        public function get_status($post_id, $trid = \false, $lang_code = \false)
        {
        }
        public function is_duplicate($post_id)
        {
        }
    }
    class WPML_Pre_Option_Page extends \WPML_WPDB_And_SP_User
    {
        const CACHE_GROUP = 'wpml_pre_option_page';
        private $switched;
        private $lang;
        public function __construct(&$wpdb, &$sitepress, $switched, $lang)
        {
        }
        public function get($type, $from_language = \null)
        {
        }
        public static function clear_cache()
        {
        }
        function fix_trashed_front_or_posts_page_settings($post_id)
        {
        }
    }
}
namespace WPML\PostTranslation\SpecialPage {
    class Hooks implements \IWPML_Backend_Action
    {
        public function add_hooks()
        {
        }
        public function deleteCacheOnSettingPage(\WP_Screen $currentScreen)
        {
        }
    }
}
namespace {
    /**
     * @author OnTheGo Systems
     */
    interface IWPML_Template_Service
    {
        public function show($model, $template);
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Twig_Template implements \IWPML_Template_Service
    {
        private $twig;
        /**
         * WPML_Twig_Template constructor.
         *
         * @param Twig_Environment $twig
         */
        public function __construct(\WPML\Core\Twig_Environment $twig)
        {
        }
        public function show($model, $template)
        {
        }
    }
    /**
     * Interface WPML_Settings_Interface
     *
     * @author OnTheGoSystems
     */
    interface IWPML_TF_Settings
    {
        /**
         * @return array of name/value pairs
         *
         * Each property should have its own setter "set_{$property_name}"
         */
        public function get_properties();
    }
    /**
     * Class WPML_TF_Settings
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Settings implements \IWPML_TF_Settings
    {
        const BUTTON_MODE_DISABLED = 'disabled';
        const BUTTON_MODE_LEFT = 'left';
        const BUTTON_MODE_RIGHT = 'right';
        const BUTTON_MODE_CUSTOM = 'custom';
        const ICON_STYLE_LEGACY = 'translation';
        const ICON_STYLE_STAR = 'star';
        const ICON_STYLE_THUMBSUP = 'thumbsup';
        const ICON_STYLE_BULLHORN = 'bullhorn';
        const ICON_STYLE_COMMENT = 'comment';
        const ICON_STYLE_QUOTE = 'quote';
        const DISPLAY_ALWAYS = 'always';
        const DISPLAY_CUSTOM = 'custom';
        const EXPIRATION_ON_PUBLISH_OR_UPDATE = 'publish_or_update';
        const EXPIRATION_ON_PUBLISH_ONLY = 'publish_only';
        const EXPIRATION_ON_UPDATE_ONLY = 'update_only';
        const DELAY_DAY = 1;
        const DELAY_WEEK = 7;
        const DELAY_MONTH = 30;
        /** @var bool $enabled */
        private $enabled = \false;
        /** @var string $button_mode */
        private $button_mode = self::BUTTON_MODE_LEFT;
        /** @var string $icon_style */
        private $icon_style = self::ICON_STYLE_LEGACY;
        /** @var null|array $languages_to */
        private $languages_to = \null;
        /** @var string $display_mode */
        private $display_mode = self::DISPLAY_CUSTOM;
        /** @var string $expiration_mode */
        private $expiration_mode = self::EXPIRATION_ON_PUBLISH_OR_UPDATE;
        /** @var int $expiration_delay_quantity */
        private $expiration_delay_quantity = 1;
        /** @var int $expiration_delay_unit */
        private $expiration_delay_unit = self::DELAY_MONTH;
        /**
         * @param bool $enabled
         */
        public function set_enabled($enabled)
        {
        }
        /**
         * @return bool
         */
        public function is_enabled()
        {
        }
        /**
         * @param string $button_mode
         */
        public function set_button_mode($button_mode)
        {
        }
        /**
         * @return string
         */
        public function get_button_mode()
        {
        }
        /** @param string $style */
        public function set_icon_style($style)
        {
        }
        /** @return string */
        public function get_icon_style()
        {
        }
        /**
         * @param array $languages_to
         */
        public function set_languages_to(array $languages_to)
        {
        }
        /**
         * @return null|array
         */
        public function get_languages_to()
        {
        }
        /**
         * @param string $display_mode
         */
        public function set_display_mode($display_mode)
        {
        }
        /**
         * @return string
         */
        public function get_display_mode()
        {
        }
        /**
         * @param string $expiration_mode
         */
        public function set_expiration_mode($expiration_mode)
        {
        }
        /**
         * @return string
         */
        public function get_expiration_mode()
        {
        }
        /**
         * @param int $expiration_delay_quantity
         */
        public function set_expiration_delay_quantity($expiration_delay_quantity)
        {
        }
        /**
         * @return int
         */
        public function get_expiration_delay_quantity()
        {
        }
        /**
         * @param int $expiration_delay_unit
         */
        public function set_expiration_delay_unit($expiration_delay_unit)
        {
        }
        /**
         * @return int
         */
        public function get_expiration_delay_unit()
        {
        }
        /**
         * @return int delay in days before expiration
         */
        public function get_expiration_delay_in_days()
        {
        }
        /**
         * @return array
         */
        public function get_properties()
        {
        }
    }
    /**
     * Class WPML_TF_Settings_Handler
     *
     * @author OnTheGoSystems
     */
    abstract class WPML_TF_Settings_Handler
    {
        /**
         * @param string $class_name
         *
         * @return string
         */
        protected function get_option_name($class_name)
        {
        }
    }
    /**
     * Class WPML_TF_Settings_Write
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Settings_Write extends \WPML_TF_Settings_Handler
    {
        /**
         * @param IWPML_TF_Settings $settings
         *
         * @return bool
         */
        public function save(\IWPML_TF_Settings $settings)
        {
        }
    }
    /**
     * Class WPML_TF_Settings_Read
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Settings_Read extends \WPML_TF_Settings_Handler
    {
        /**
         * @param string $settings_class
         *
         * @return IWPML_TF_Settings
         *
         * @throws InvalidArgumentException
         */
        public function get($settings_class)
        {
        }
        /**
         * @param IWPML_TF_Settings $settings
         * @param array             $settings_properties
         *
         * @throws BadMethodCallException
         */
        private function set_properties(\IWPML_TF_Settings $settings, array $settings_properties)
        {
        }
    }
    /**
     * Class WPML_TF_Backend_Bulk_Actions
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Backend_Bulk_Actions
    {
        /** @var  WPML_TF_Data_Object_Storage $feedback_storage */
        private $feedback_storage;
        /** @var WPML_WP_API $wp_api */
        private $wp_api;
        /** @var  WPML_TF_Backend_Notices $backend_notices */
        private $backend_notices;
        /**
         * WPML_TF_Feedback_List_Bulk_Action_Hooks constructor.
         *
         * @param WPML_TF_Data_Object_Storage $feedback_storage
         * @param WPML_WP_API                 $wp_api
         * @param WPML_TF_Backend_Notices     $backend_notices
         */
        public function __construct(\WPML_TF_Data_Object_Storage $feedback_storage, \WPML_WP_API $wp_api, \WPML_TF_Backend_Notices $backend_notices)
        {
        }
        /**
         * Method bulk_action_callback
         */
        public function process()
        {
        }
        private function change_status(array $feedback_ids, $new_status)
        {
        }
        private function delete(array $feedback_ids, $force_delete = \false)
        {
        }
        private function untrash(array $feedback_ids)
        {
        }
        /**
         * @return bool
         */
        private function is_valid_request()
        {
        }
        private function is_valid_action($action)
        {
        }
        /**
         * Redirect after processing the bulk action
         */
        private function redirect()
        {
        }
    }
    /**
     * Class WPML_TF_Module
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Module
    {
        /** @var WPML_Action_Filter_Loader $action_filter_loader */
        private $action_filter_loader;
        /** @var WPML_TF_Settings $settings */
        private $settings;
        /**
         * WPML_TF_Module constructor.
         *
         * @param WPML_Action_Filter_Loader $action_filter_loader
         * @param IWPML_TF_Settings         $settings
         */
        public function __construct(\WPML_Action_Filter_Loader $action_filter_loader, \IWPML_TF_Settings $settings)
        {
        }
        public function run()
        {
        }
        /**
         * @return array
         */
        private function get_actions_to_load_always()
        {
        }
        /**
         * @return array
         */
        private function get_actions_to_load_when_module_enabled()
        {
        }
    }
    /**
     * Class WPML_TF_Feedback_Page_Filter
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Feedback_Page_Filter
    {
        /** @var  SitePress $sitepress */
        private $sitepress;
        /** @var WPML_TF_Feedback_Query $feedback_query */
        private $feedback_query;
        /** @var  array $statuses */
        private $statuses = array();
        /** @var  array $languages */
        private $languages = array();
        /** @var  array $url_args */
        private $url_args;
        /** @var  string $current_url */
        private $current_url;
        /**
         * WPML_TF_Feedback_Page_Filter constructor.
         *
         * @param SitePress              $sitepress
         * @param WPML_TF_Feedback_Query $feedback_query
         */
        public function __construct(\SitePress $sitepress, \WPML_TF_Feedback_Query $feedback_query)
        {
        }
        /**
         * @return array
         */
        public static function get_filter_keys()
        {
        }
        /**
         * Will not create filters inside the trash
         * And will not include the "trash" status in the status row
         */
        public function populate_counters_and_labels()
        {
        }
        /**
         * @return array
         */
        public function get_all_and_trash_data()
        {
        }
        /**
         * @return array
         */
        public function get_statuses_data()
        {
        }
        /**
         * @return array
         */
        public function get_languages_data()
        {
        }
        /**
         * @param string $filter_name
         * @param string $filter_value
         *
         * @return string
         */
        private function get_filter_url($filter_name, $filter_value)
        {
        }
        /**
         * @param string $filter_key
         * @param string $filter_value
         *
         * @return bool
         */
        private function is_current_filter($filter_key, $filter_value = \null)
        {
        }
        /**
         * @return array
         */
        public function get_current_filters()
        {
        }
        /**
         * @return array
         */
        private function get_url_args()
        {
        }
        /**
         * @return string
         */
        private function get_current_url()
        {
        }
        /**
         * @return string
         */
        private function get_reset_filters_url()
        {
        }
    }
    /**
     * Class WPML_TF_Document_Information
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Document_Information
    {
        /** @var  SitePress $sitepress */
        protected $sitepress;
        /** @var  int $id */
        protected $id;
        /** @var  string $type */
        protected $type;
        /** @var  stdClass $language_details */
        protected $language_details;
        /** @var null|int|stdClass */
        private $translation_job;
        /**
         * WPML_TF_Document_Information constructor.
         *
         * @param SitePress             $sitepress
         */
        public function __construct(\SitePress $sitepress)
        {
        }
        /**
         * @param int    $id
         * @param string $type
         */
        public function init($id, $type)
        {
        }
        /**
         * @return string|null
         */
        public function get_source_language()
        {
        }
        /**
         * @return string
         */
        public function get_language()
        {
        }
        /**
         * @return null|int
         */
        public function get_job_id()
        {
        }
        /**
         * @return null|int
         */
        protected function get_trid()
        {
        }
        /**
         * @param int $job_id
         *
         * @return bool
         */
        public function is_local_translation($job_id)
        {
        }
        /**
         * @param int $job_id
         *
         * @return int|stdClass
         */
        protected function get_translation_job($job_id)
        {
        }
    }
    /**
     * Class WPML_TF_Backend_Document_Information
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Backend_Document_Information extends \WPML_TF_Document_Information
    {
        /** @var WPML_TP_Client_Factory|null $tp_client_factory */
        private $tp_client_factory;
        /** @var WPML_TP_Client|null $tp_client */
        private $tp_client;
        /**
         * WPML_TF_Backend_Document_Information constructor.
         *
         * @param SitePress              $sitepress
         * @param WPML_TP_Client_Factory $tp_client_factory
         */
        public function __construct(\SitePress $sitepress, \WPML_TP_Client_Factory $tp_client_factory = \null)
        {
        }
        /**
         * @return false|null|string
         */
        public function get_url()
        {
        }
        /**
         * @return null|string
         */
        public function get_title()
        {
        }
        /**
         * @return bool
         */
        private function is_post_document()
        {
        }
        /**
         * @param string $language_code
         *
         * @return string
         */
        public function get_flag_url($language_code)
        {
        }
        /**
         * @return string
         */
        public function get_edit_url()
        {
        }
        private function load_link_to_translation_tm_filters()
        {
        }
        /**
         * @return null|int
         */
        public function get_source_id()
        {
        }
        /**
         * @return null|string
         */
        public function get_source_url()
        {
        }
        /**
         * @return null|string
         */
        public function get_source_title()
        {
        }
        /**
         * @return array|bool|mixed
         */
        private function get_translations()
        {
        }
        /**
         * @param int $job_id
         *
         * @return string
         */
        public function get_translator_name($job_id)
        {
        }
        /**
         * @param string $from
         * @param string $to
         *
         * @return array
         */
        public function get_available_translators($from, $to)
        {
        }
        /**
         * @param int $post_id
         *
         * @return null|string
         */
        private function get_post_title($post_id)
        {
        }
        /** @return null|WPML_TP_Client */
        private function get_tp_client()
        {
        }
    }
    /**
     * Class WPML_TF_Translation_Service
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Translation_Service
    {
        /** @var WPML_TP_Client_Factory $tp_client_factory */
        private $tp_client_factory;
        /**
         * WPML_TF_Translation_Service constructor.
         *
         * @param WPML_TP_Client_Factory $tp_client_factory
         */
        public function __construct(\WPML_TP_Client_Factory $tp_client_factory = \null)
        {
        }
        /** @return bool */
        public function allows_translation_feedback()
        {
        }
    }
    /**
     * Class WPML_TF_Frontend_Display_Requirements
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Frontend_Display_Requirements
    {
        /** @var WPML_Queried_Object $queried_object */
        private $queried_object;
        /** @var WPML_TF_Settings $settings */
        private $settings;
        /**
         * WPML_TF_Frontend_Display_Requirements constructor.
         *
         * @param WPML_Queried_Object $queried_object
         * @param WPML_TF_Settings    $settings
         */
        public function __construct(\WPML_Queried_Object $queried_object, \WPML_TF_Settings $settings)
        {
        }
        /**
         * @return bool
         */
        public function verify()
        {
        }
        /**
         * @return bool
         */
        private function is_enabled_on_frontend()
        {
        }
        /**
         * @return bool
         */
        private function is_translation()
        {
        }
        /**
         * @return bool
         */
        private function is_allowed_language()
        {
        }
        /**
         * @return bool
         */
        private function is_not_expired()
        {
        }
    }
    /**
     * Class WPML_TF_Rating_Average
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Post_Rating_Metrics
    {
        const QUANTITY_KEY = 'wpml_tf_post_rating_quantity';
        const AVERAGE_KEY = 'wpml_tf_post_rating_average';
        /** @var wpdb $wpdb */
        private $wpdb;
        public function __construct(\wpdb $wpdb)
        {
        }
        /**
         * @param int $post_id
         *
         * @return string
         */
        public function get_display($post_id)
        {
        }
        /** @param int $post_id */
        public function refresh($post_id)
        {
        }
    }
    /**
     * Class WPML_TF_AJAX_Exception
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_AJAX_Exception extends \Exception
    {
    }
    /**
     * Class WPML_TF_Feedback_Update_Exception
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Feedback_Update_Exception extends \Exception
    {
    }
    /**
     * Class WPML_TF_Promote_Notices
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Promote_Notices
    {
        const NOTICE_GROUP = 'wpml-tf-promote';
        const NOTICE_NEW_SITE = 'notice-new-site';
        const DOC_URL = 'https://wpml.org/documentation/getting-started-guide/getting-visitor-feedback-about-your-sites-translations/';
        /** @var SitePress $sitepress */
        private $sitepress;
        public function __construct(\SitePress $sitepress)
        {
        }
        /**
         * @param int $user_id
         */
        public function show_notice_for_new_site($user_id)
        {
        }
        public function remove()
        {
        }
    }
    /**
     * Class WPML_TF_Backend_Notices
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Backend_Notices
    {
        const GROUP = 'wpml_tf_backend_notices';
        const BULK_UPDATED = 'bulk_updated';
        /** @var  WPML_Notices $admin_notices */
        private $admin_notices;
        /**
         * @param array $updated_feedback_ids
         * @parem string
         */
        public function add_bulk_updated_notice(array $updated_feedback_ids, $action)
        {
        }
        /**
         * Add action to remove updated notice after display
         */
        public function remove_bulk_updated_notice_after_display()
        {
        }
        /**
         * Remove bulk_updated notice
         */
        public function remove_bulk_updated_notice()
        {
        }
        /**
         * @return WPML_Notices
         */
        private function get_admin_notices()
        {
        }
    }
    /**
     * Class WPML_TF_Frontend_Styles
     * @author OnTheGoSystems
     */
    class WPML_TF_Frontend_Styles
    {
        const HANDLE = 'wpml-tf-frontend';
        /**
         * method enqueue
         */
        public function enqueue()
        {
        }
    }
    /**
     * Class WPML_TF_Backend_Options_Styles
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Backend_Options_Styles
    {
        const HANDLE = 'wpml-tf-backend-options';
        /**
         * method enqueue
         */
        public function enqueue()
        {
        }
    }
    /**
     * Class WPML_TF_Backend_Styles
     * @author OnTheGoSystems
     */
    class WPML_TF_Backend_Styles
    {
        const HANDLE = 'wpml-tf-backend';
        /**
         * method enqueue
         */
        public function enqueue()
        {
        }
    }
    /**
     * Class WPML_TF_Backend_Post_List_Hooks
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Backend_Post_List_Hooks implements \IWPML_Action
    {
        const RATING_COLUMN_ID = 'translation_rating';
        /** @var WPML_TF_Post_Rating_Metrics $post_rating_metrics*/
        private $post_rating_metrics;
        /** @var WPML_TF_Document_Information $document_information */
        private $document_information;
        /** @var WPML_TF_Backend_Styles $styles */
        private $styles;
        public function __construct(\WPML_TF_Post_Rating_Metrics $post_rating_metrics, \WPML_TF_Document_Information $document_information, \WPML_TF_Backend_Styles $styles)
        {
        }
        /** @return array */
        private function get_post_types()
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param array $columns
         *
         * @return array
         */
        public function add_rating_column_header(array $columns)
        {
        }
        /**
         * @param string $column_name
         * @param int    $post_id
         */
        public function add_rating_column_content($column_name, $post_id)
        {
        }
        /**
         * @param array $columns
         *
         * @return array
         */
        public function add_rating_sortable_column(array $columns)
        {
        }
        public function order_posts_by_rating(\WP_Query $query)
        {
        }
        public function admin_enqueue_scripts_action()
        {
        }
    }
    /**
     * Class WPML_TF_Backend_Hooks
     * @author OnTheGoSystems
     */
    class WPML_TF_Backend_Hooks implements \IWPML_Action
    {
        const PAGE_HOOK = 'wpml-translation-feedback-list';
        /** @var WPML_TF_Backend_Bulk_Actions_Factory  */
        private $bulk_actions_factory;
        /** @var WPML_TF_Backend_Feedback_List_View_Factory feedback_list_view_factory */
        private $feedback_list_view_factory;
        /** @var  WPML_TF_Backend_Styles $backend_styles */
        private $backend_styles;
        /** @var WPML_TF_Backend_Scripts */
        private $backend_scripts;
        /** @var wpdb $wpdb */
        private $wpdb;
        /**
         * WPML_TF_Backend_Hooks constructor.
         *
         * @param WPML_TF_Backend_Bulk_Actions_Factory       $bulk_actions_factory
         * @param WPML_TF_Backend_Feedback_List_View_Factory $feedback_list_view_factory
         * @param WPML_TF_Backend_Styles                     $backend_styles
         * @param WPML_TF_Backend_Scripts                    $backend_scripts
         * @param wpdb                                       $wpdb
         */
        public function __construct(\WPML_TF_Backend_Bulk_Actions_Factory $bulk_actions_factory, \WPML_TF_Backend_Feedback_List_View_Factory $feedback_list_view_factory, \WPML_TF_Backend_Styles $backend_styles, \WPML_TF_Backend_Scripts $backend_scripts, \wpdb $wpdb)
        {
        }
        /**
         * method add_hooks
         */
        public function add_hooks()
        {
        }
        /**
         * Define translation feedback list menu and callback
         *
         * @param string $menu_id
         */
        public function add_translation_feedback_list_menu($menu_id)
        {
        }
        /**
         * Callback to display the feedback list page
         */
        public function translation_feedback_list_display()
        {
        }
        /**
         * @param string $hook
         */
        public function admin_enqueue_scripts_action($hook)
        {
        }
        public function bulk_actions_callback($current_screen)
        {
        }
        /**
         * @param string $hook
         *
         * @return bool
         */
        private function is_page_hook($hook)
        {
        }
        /**
         * @param string   $where
         * @param WP_Query $query
         *
         * @return string
         */
        public function maybe_exclude_rating_only_status($where, $query)
        {
        }
    }
    /**
     * Class WPML_TF_Frontend_Hooks
     * @author OnTheGoSystems
     */
    class WPML_TF_Frontend_Hooks implements \IWPML_Action
    {
        /** @var WPML_TF_Frontend_Feedback_View $feedback_view */
        private $feedback_view;
        /** @var WPML_TF_Frontend_Scripts $scripts */
        private $scripts;
        /** @var WPML_TF_Frontend_Styles $styles */
        private $styles;
        /**
         * WPML_TF_Frontend_Hooks constructor.
         *
         * @param WPML_TF_Frontend_Feedback_View $feedback_view
         * @param WPML_TF_Frontend_Scripts       $scripts
         * @param WPML_TF_Frontend_Styles        $styles
         */
        public function __construct(\WPML_TF_Frontend_Feedback_View $feedback_view, \WPML_TF_Frontend_Scripts $scripts, \WPML_TF_Frontend_Styles $styles)
        {
        }
        /**
         * method init
         */
        public function add_hooks()
        {
        }
        /**
         * method enqueue_scripts_action
         */
        public function enqueue_scripts_action()
        {
        }
        /**
         * method render_feedback_form
         */
        public function render_feedback_form()
        {
        }
        /** @param string|array $args */
        public function render_custom_form_open_link($args)
        {
        }
    }
    /**
     * Class WPML_TF_Common_Hooks
     * @author OnTheGoSystems
     */
    class WPML_TF_Common_Hooks implements \IWPML_Action
    {
        /** @var WPML_TF_Data_Object_Storage $feedback_storage */
        private $feedback_storage;
        public function __construct(\WPML_TF_Data_Object_Storage $feedback_storage)
        {
        }
        /**
         * method init
         */
        public function add_hooks()
        {
        }
        /**
         * method init_action
         */
        public function init_action()
        {
        }
        /** @param $post_id int */
        public function cleanup_post_feedback_data($post_id)
        {
        }
    }
    /**
     * Class WPML_TF_Backend_Options_Hooks
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Backend_Options_Hooks implements \IWPML_Action
    {
        const WPML_LOVE_ID = '#lang-sec-10';
        /** @var  WPML_TF_Backend_Options_View $options_view */
        private $options_view;
        /** @var WPML_TF_Backend_Options_Scripts $scripts */
        private $scripts;
        /** @var WPML_TF_Backend_Options_Styles $styles */
        private $styles;
        /** @var WPML_TF_Translation_Service $translation_service */
        private $translation_service;
        /**
         * WPML_TF_Backend_Options_Hooks constructor.
         *
         * @param WPML_TF_Backend_Options_View     $options_view
         * @param WPML_TF_Backend_Options_Scripts  $scripts
         * @param WPML_TF_Backend_Options_Styles   $styles
         * @param WPML_TF_Translation_Service $translation_service
         */
        public function __construct(\WPML_TF_Backend_Options_View $options_view, \WPML_TF_Backend_Options_Scripts $scripts, \WPML_TF_Backend_Options_Styles $styles, \WPML_TF_Translation_Service $translation_service)
        {
        }
        /**
         * Method add_hooks
         */
        public function add_hooks()
        {
        }
        /**
         * Method to render the options UI
         */
        public function display_options_ui()
        {
        }
        /**
         * @param array $items
         *
         * @return mixed
         */
        public function insert_navigation_item($items)
        {
        }
        public function enqueue_scripts_action()
        {
        }
    }
    /**
     * Class WPML_TF_Backend_Promote_Hooks
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Backend_Promote_Hooks implements \IWPML_Action
    {
        /** @var WPML_TF_Promote_Notices $promote_notices */
        private $promote_notices;
        /** @var WPML_TF_Translation_Service $translation_service */
        private $translation_service;
        /** @var bool $is_setup_complete */
        private $is_setup_complete;
        /**
         * WPML_TF_Backend_Promote_Hooks constructor.
         *
         * @param WPML_TF_Promote_Notices          $promote_notices
         * @param bool                             $is_setup_complete
         * @param WPML_TF_Translation_Service $translation_service
         */
        public function __construct(\WPML_TF_Promote_Notices $promote_notices, $is_setup_complete, \WPML_TF_Translation_Service $translation_service)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param int      $new_post_id
         * @param array    $fields
         * @param stdClass $job
         */
        public function add_notice_for_manager_on_job_completed($new_post_id, $fields, $job)
        {
        }
    }
    /**
     * Class WPML_TF_Backend_AJAX_Feedback_Edit_Hooks
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Backend_AJAX_Feedback_Edit_Hooks implements \IWPML_Action
    {
        /** @var WPML_TF_Feedback_Edit $feedback_edit */
        private $feedback_edit;
        /** @var WPML_TF_Backend_Feedback_Row_View $row_view */
        private $row_view;
        /** @var array $post_data */
        private $post_data;
        /**
         * WPML_TF_Backend_AJAX_Feedback_Edit_Hooks constructor.
         *
         * @param WPML_TF_Feedback_Edit             $feedback_edit
         * @param WPML_TF_Backend_Feedback_Row_View $row_view
         * @param array                             $post_data
         */
        public function __construct(\WPML_TF_Feedback_Edit $feedback_edit, \WPML_TF_Backend_Feedback_Row_View $row_view, array $post_data)
        {
        }
        public function add_hooks()
        {
        }
        public function edit_feedback_callback()
        {
        }
        /**
         * @param $key
         *
         * @throws WPML_TF_AJAX_Exception
         */
        private function check_post_data_key($key)
        {
        }
    }
    /**
     * Class WPML_TF_Backend_Options_AJAX_Hooks
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Backend_Options_AJAX_Hooks implements \IWPML_Action
    {
        /** @var WPML_TF_Settings $settings */
        private $settings;
        /** @var WPML_TF_Settings_Write $settings_write */
        private $settings_write;
        /** @var WPML_TF_Promote_Notices $promote_notices */
        private $promote_notices;
        /** @var array $post_data */
        private $post_data;
        /**
         * WPML_TF_Frontend_AJAX_Hooks constructor.
         *
         * @param WPML_TF_Settings        $settings
         * @param WPML_TF_Settings_Write  $settings_write
         * @param WPML_TF_Promote_Notices $promote_notices
         * @param array                   $post_data
         */
        public function __construct(\WPML_TF_Settings $settings, \WPML_TF_Settings_Write $settings_write, \WPML_TF_Promote_Notices $promote_notices, array $post_data)
        {
        }
        public function add_hooks()
        {
        }
        public function save_settings_callback()
        {
        }
    }
    /**
     * Class WPML_TF_Frontend_AJAX_Hooks
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Frontend_AJAX_Hooks implements \IWPML_Action
    {
        /** @var WPML_TF_Data_Object_Storage $feedback_storage */
        private $feedback_storage;
        /** @var WPML_TF_Document_Information $document_information */
        private $document_information;
        /** @var WPML_TF_Post_Rating_Metrics $post_rating_metrics */
        private $post_rating_metrics;
        /** @var WPML_TP_Client_Factory $tp_client_factory */
        private $tp_client_factory;
        /** @var WPML_TP_Client $tp_client */
        private $tp_client;
        private $post_data;
        /**
         * WPML_TF_Frontend_AJAX_Hooks constructor.
         *
         * @param WPML_TF_Data_Object_Storage  $feedback_storage
         * @param WPML_TF_Document_Information $document_information
         * @param WPML_TF_Post_Rating_Metrics  $post_rating_metrics
         * @param WPML_TP_Client_Factory|null  $tp_client_factory
         * @param mixed[]|null                 $post_data
         */
        public function __construct(\WPML_TF_Data_Object_Storage $feedback_storage, \WPML_TF_Document_Information $document_information, \WPML_TF_Post_Rating_Metrics $post_rating_metrics, \WPML_TP_Client_Factory $tp_client_factory = \null, array $post_data = \null)
        {
        }
        /**
         * method init
         */
        public function add_hooks()
        {
        }
        /**
         * Method callback
         */
        public function save_feedback_callback()
        {
        }
        /**
         * @param int $feedback_id
         *
         * @return WPML_TF_Feedback|null|false
         */
        private function update_feedback($feedback_id)
        {
        }
        /**
         * @return WPML_TF_Feedback
         */
        private function create_feedback()
        {
        }
        /** @return string */
        private function get_filtered_status()
        {
        }
        /** @return null|WPML_TP_Client */
        private function get_tp_client()
        {
        }
    }
    /**
     * Class WPML_TF_Backend_Bulk_Actions_Factory
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Backend_Bulk_Actions_Factory
    {
        /**
         * @return WPML_TF_Backend_Bulk_Actions
         */
        public function create()
        {
        }
    }
    /**
     * Class WPML_TF_Backend_Feedback_List_View_Factory
     * @author OnTheGoSystems
     */
    class WPML_TF_Backend_Feedback_List_View_Factory
    {
        public function create()
        {
        }
    }
    /**
     * Class WPML_TF_Frontend_AJAX_Hooks_Factory
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Frontend_AJAX_Hooks_Factory extends \WPML_AJAX_Base_Factory
    {
        const AJAX_ACTION = 'wpml-tf-frontend-feedback';
        /**
         * @return IWPML_Action|null
         */
        public function create()
        {
        }
    }
    /**
     * Class WPML_TF_Common_Hooks_Factory
     * @author OnTheGoSystems
     */
    class WPML_TF_Common_Hooks_Factory implements \IWPML_Backend_Action_Loader, \IWPML_Frontend_Action_Loader
    {
        /**
         * @return WPML_TF_Common_Hooks
         */
        public function create()
        {
        }
    }
    /**
     * Class WPML_TF_Backend_Options_AJAX_Hooks_Factory
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Backend_Options_AJAX_Hooks_Factory extends \WPML_AJAX_Base_Factory implements \IWPML_Backend_Action_Loader
    {
        const AJAX_ACTION = 'wpml-tf-backend-options';
        /**
         * @return IWPML_Action|null
         */
        public function create()
        {
        }
    }
    /**
     * Class WPML_TF_Backend_Post_List_Hooks_Factory
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Backend_Post_List_Hooks_Factory extends \WPML_Current_Screen_Loader_Factory
    {
        /** @return string */
        protected function get_screen_regex()
        {
        }
        /** @return WPML_TF_Backend_Post_List_Hooks */
        protected function create_hooks()
        {
        }
    }
    /**
     * Class WPML_TF_Backend_Hooks_Factory
     * @author OnTheGoSystems
     */
    class WPML_TF_Backend_Hooks_Factory implements \IWPML_Backend_Action_Loader
    {
        /**
         * @return WPML_TF_Backend_Hooks
         */
        public function create()
        {
        }
    }
    /**
     * Class WPML_TF_Frontend_Hooks_Factory
     * @author OnTheGoSystems
     */
    class WPML_TF_Frontend_Hooks_Factory implements \IWPML_Frontend_Action_Loader, \IWPML_Deferred_Action_Loader
    {
        /** @var  WPML_Queried_Object $queried_object */
        private $queried_object;
        /** @var WPML_TF_Frontend_Display_Requirements $display_requirements */
        private $display_requirements;
        /**
         * WPML_TF_Frontend_Hooks_Factory constructor.
         *
         * @param WPML_Queried_Object                   $queried_object
         * @param WPML_TF_Frontend_Display_Requirements $display_requirements
         */
        public function __construct(\WPML_Queried_Object $queried_object = \null, \WPML_TF_Frontend_Display_Requirements $display_requirements = \null)
        {
        }
        /**
         * The frontend hooks must be loaded when the request has been parsed (in "wp")
         * to avoid unnecessary instantiation if the current page is not a translation
         *
         * @return string
         */
        public function get_load_action()
        {
        }
        /**
         * @return null|WPML_TF_Frontend_Hooks
         */
        public function create()
        {
        }
        /**
         * @return WPML_Queried_Object
         */
        private function get_queried_object()
        {
        }
        /**
         * @return WPML_TF_Frontend_Display_Requirements
         */
        private function get_display_requirements()
        {
        }
    }
    /**
     * Class WPML_TF_Backend_Promote_Hooks_Factory
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Backend_Promote_Hooks_Factory implements \IWPML_Backend_Action_Loader, \IWPML_Deferred_Action_Loader
    {
        /** @return string */
        public function get_load_action()
        {
        }
        public function create()
        {
        }
    }
    /**
     * Class WPML_TF_Backend_AJAX_Feedback_Edit_Hooks_Factory
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Backend_AJAX_Feedback_Edit_Hooks_Factory extends \WPML_AJAX_Base_Factory implements \IWPML_Backend_Action_Loader
    {
        const AJAX_ACTION = 'wpml-tf-backend-feedback-edit';
        public function create()
        {
        }
    }
    /**
     * Class WPML_TF_Backend_Options_Hooks_Factory
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Backend_Options_Hooks_Factory extends \WPML_Current_Screen_Loader_Factory
    {
        /** @return string */
        protected function get_screen_regex()
        {
        }
        /** @return null|WPML_TF_Backend_Options_Hooks */
        protected function create_hooks()
        {
        }
    }
    /**
     * Class WPML_TF_Frontend_Scripts
     * @author OnTheGoSystems
     */
    class WPML_TF_Frontend_Scripts
    {
        const HANDLE = 'wpml-tf-frontend';
        /**
         * method enqueue
         */
        public function enqueue()
        {
        }
    }
    /**
     * Class WPML_TF_Backend_Options_Scripts
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Backend_Options_Scripts
    {
        const HANDLE = 'wpml-tf-backend-options';
        /**
         * method enqueue
         */
        public function enqueue()
        {
        }
    }
    /**
     * Class WPML_TF_Backend_Scripts
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Backend_Scripts
    {
        const HANDLE = 'wpml-tf-backend';
        /**
         * method enqueue
         */
        public function enqueue()
        {
        }
    }
    /**
     * Class WPML_TF_Collection
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Collection implements \Iterator, \Countable
    {
        /** @var  IWPML_TF_Data_Object[] */
        protected $collection = array();
        /**
         * @param IWPML_TF_Data_Object $data_object
         */
        public function add(\IWPML_TF_Data_Object $data_object)
        {
        }
        /**
         * @return array
         */
        public function get_ids()
        {
        }
        /**
         * @param $id
         *
         * @return IWPML_TF_Data_Object|null
         */
        public function get($id)
        {
        }
        /**
         * @return int
         */
        public function count()
        {
        }
        public function rewind()
        {
        }
        /**
         * @return mixed
         */
        public function current()
        {
        }
        /**
         * @return mixed
         */
        public function key()
        {
        }
        public function next()
        {
        }
        /**
         * @return bool
         */
        public function valid()
        {
        }
    }
    /**
     * Interface IWPML_TF_Collection_Filter
     *
     * @author OnTheGoSystems
     */
    interface IWPML_TF_Collection_Filter
    {
        /**
         * @return array
         */
        public function get_posts_args();
        /**
         * @return WPML_TF_Collection
         */
        public function get_new_collection();
    }
    /**
     * Interface IWPML_TF_Data_Object
     *
     * @author OnTheGoSystems
     */
    interface IWPML_TF_Data_Object
    {
        /**
         * @return int
         */
        public function get_id();
    }
    /**
     * Class WPML_TF_Feedback_Edit
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Feedback_Edit
    {
        /** @var WPML_TF_Feedback_Query */
        private $feedback_query;
        /** @var WPML_TF_Data_Object_Storage $feedback_storage */
        private $feedback_storage;
        /** @var WPML_TF_Data_Object_Storage $message_storage */
        private $message_storage;
        /** @var null|WPML_TP_Client_Factory $tp_client_factory */
        private $tp_client_factory;
        /** @var null|WPML_TP_Client $tp_client */
        private $tp_client;
        /**
         * WPML_TF_Feedback_Edit constructor.
         *
         * @param \WPML_TF_Feedback_Query      $feedback_query
         * @param \WPML_TF_Data_Object_Storage $feedback_storage
         * @param \WPML_TF_Data_Object_Storage $message_storage
         * @param \WPML_TP_Client_Factory|null $tp_client_factory
         */
        public function __construct(\WPML_TF_Feedback_Query $feedback_query, \WPML_TF_Data_Object_Storage $feedback_storage, \WPML_TF_Data_Object_Storage $message_storage, \WPML_TP_Client_Factory $tp_client_factory = \null)
        {
        }
        /**
         * @param int   $feedback_id
         * @param array $args
         *
         * @return null|WPML_TF_Feedback
         * @throws \WPML_TF_Feedback_Update_Exception
         */
        public function update($feedback_id, array $args)
        {
        }
        /**
         * @param WPML_TF_Feedback $feedback
         * @param array            $args
         */
        private function update_feedback_content(\WPML_TF_Feedback $feedback, array $args)
        {
        }
        /**
         * @param WPML_TF_Feedback $feedback
         * @param array            $args
         */
        private function add_message_to_feedback(\WPML_TF_Feedback $feedback, array $args)
        {
        }
        /**
         * @param WPML_TF_Feedback $feedback
         * @param array            $args
         */
        private function assign_feedback_to_reviewer(\WPML_TF_Feedback $feedback, array $args)
        {
        }
        /**
         * @param WPML_TF_Feedback $feedback
         * @param array            $args
         *
         * @throws \WPML_TF_Feedback_Update_Exception
         */
        private function update_feedback_status(\WPML_TF_Feedback $feedback, array $args)
        {
        }
        /**
         * @param int $feedback_id
         *
         * @return bool
         */
        public function delete($feedback_id)
        {
        }
        /** @return bool */
        private function is_admin_user()
        {
        }
        /** @return array */
        private function get_feedback_statuses()
        {
        }
        /**
         * @param WPML_TF_Feedback $feedback
         *
         * @throws WPML_TF_Feedback_Update_Exception
         */
        private function send_feedback_to_tp(\WPML_TF_Feedback $feedback)
        {
        }
        /**
         * @param WPML_TF_Feedback $feedback
         *
         * @throws WPML_TF_Feedback_Update_Exception
         */
        private function update_feedback_status_from_tp(\WPML_TF_Feedback $feedback)
        {
        }
        /**
         * @param string $endpoint
         *
         * @return string
         * @throws \WPML_TF_Feedback_Update_Exception
         */
        private function get_communication_error_message($endpoint)
        {
        }
        /**
         * @return null|WPML_TP_Client
         *
         * @throws WPML_TF_Feedback_Update_Exception
         */
        private function get_tp_client()
        {
        }
    }
    /**
     * Class WPML_TF_Message_Collection
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Message_Collection extends \WPML_TF_Collection
    {
    }
    /**
     * Class WPML_TF_Message_Collection_Filter
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Message_Collection_Filter implements \IWPML_TF_Collection_Filter
    {
        /** @var  int $feedback_id */
        private $feedback_id;
        /** @var  array|null */
        private $feedback_ids;
        /**
         * WPML_TF_Feedback_Collection_Filter constructor.
         *
         * @param array $args
         */
        public function __construct(array $args = array())
        {
        }
        /**
         * @return int|null
         */
        private function get_feedback_id()
        {
        }
        /**
         * @return array|null
         */
        private function get_feedback_ids()
        {
        }
        /**
         * @return array
         */
        public function get_posts_args()
        {
        }
        /**
         * @return WPML_TF_Message_Collection
         */
        public function get_new_collection()
        {
        }
    }
    /**
     * Class WPML_TF_Message
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Message implements \IWPML_TF_Data_Object
    {
        /** @var int $id */
        private $id;
        /** @var  int $feedback_id */
        private $feedback_id;
        /** @var  string $date_created */
        private $date_created;
        /** @var  string $content */
        private $content;
        /** @var  string $author_id */
        private $author_id;
        /**
         * WPML_Translation_Feedback constructor.
         *
         * @param array $data
         */
        public function __construct($data = array())
        {
        }
        /**
         * @return int|mixed|null
         */
        public function get_id()
        {
        }
        /**
         * @return int|null
         */
        public function get_feedback_id()
        {
        }
        /**
         * @return mixed|null|string
         */
        public function get_date_created()
        {
        }
        /**
         * @return mixed|null|string
         */
        public function get_content()
        {
        }
        /**
         * @return int|null
         */
        public function get_author_id()
        {
        }
        /** @return string */
        public function get_author_display_label()
        {
        }
        /** @return bool */
        public function author_is_current_user()
        {
        }
    }
    /**
     * Class WPML_TF_Data_Object_Post_Convert
     *
     * @author OnTheGoSystems
     */
    abstract class WPML_TF_Data_Object_Post_Convert
    {
        /**
         * @return array
         */
        public abstract function get_post_fields();
        /**
         * @return array
         */
        public abstract function get_meta_fields();
        /**
         * @param IWPML_TF_Data_Object $data_object
         *
         * @return array
         */
        public abstract function to_post_data(\IWPML_TF_Data_Object $data_object);
        /**
         * @param array
         *
         * @return object
         */
        public abstract function to_object(array $post_data);
        /**
         * @param array $post_data
         *
         * @return array
         */
        protected function build_object_data_for_constructor(array $post_data)
        {
        }
    }
    /**
     * Class WPML_TF_Message_Post_Convert
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Message_Post_Convert extends \WPML_TF_Data_Object_Post_Convert
    {
        const POST_TYPE = 'wpml_tf_message';
        /**
         * @return array
         */
        public function get_post_fields()
        {
        }
        /**
         * @return array
         */
        public function get_meta_fields()
        {
        }
        /**
         * @param IWPML_TF_Data_Object $message
         *
         * @return array
         * @throws Exception
         */
        public function to_post_data(\IWPML_TF_Data_Object $message)
        {
        }
        /**
         * @param array $post_data
         *
         * @return WPML_TF_Message
         */
        public function to_object(array $post_data)
        {
        }
    }
    /**
     * Class WPML_TF_Feedback_Collection
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Feedback_Collection extends \WPML_TF_Collection
    {
        private $order;
        private $filter_value;
        /**
         * @param int $offset
         * @param int $length
         */
        public function reduce_collection($offset, $length)
        {
        }
        /**
         * @param string $property
         * @param string $order
         */
        public function sort_collection($property, $order)
        {
        }
        /**
         * @param WPML_TF_Feedback $a
         * @param WPML_TF_Feedback $b
         *
         * @return mixed
         */
        private function compare_by_pending(\WPML_TF_Feedback $a, \WPML_TF_Feedback $b)
        {
        }
        /**
         * @param WPML_TF_Feedback $a
         * @param WPML_TF_Feedback $b
         *
         * @return mixed
         */
        private function compare_by_feedback(\WPML_TF_Feedback $a, \WPML_TF_Feedback $b)
        {
        }
        /**
         * @param WPML_TF_Feedback $a
         * @param WPML_TF_Feedback $b
         *
         * @return mixed
         */
        private function compare_by_rating(\WPML_TF_Feedback $a, \WPML_TF_Feedback $b)
        {
        }
        /**
         * @param WPML_TF_Feedback $a
         * @param WPML_TF_Feedback $b
         *
         * @return mixed
         */
        private function compare_by_status(\WPML_TF_Feedback $a, \WPML_TF_Feedback $b)
        {
        }
        /**
         * @param WPML_TF_Feedback $a
         * @param WPML_TF_Feedback $b
         *
         * @return mixed
         */
        private function compare_by_document_title(\WPML_TF_Feedback $a, \WPML_TF_Feedback $b)
        {
        }
        /**
         * @param WPML_TF_Feedback $a
         * @param WPML_TF_Feedback $b
         *
         * @return mixed
         */
        private function compare_by_date(\WPML_TF_Feedback $a, \WPML_TF_Feedback $b)
        {
        }
        /**
         * @param WPML_TF_Feedback $a
         * @param WPML_TF_Feedback $b
         *
         * @return int
         */
        private function compare_by_id(\WPML_TF_Feedback $a, \WPML_TF_Feedback $b)
        {
        }
        /**
         * @param WPML_TF_Message_Collection $message_collection
         */
        public function link_messages_to_feedback(\WPML_TF_Message_Collection $message_collection)
        {
        }
        /**
         * @param string $property
         * @param string $value
         */
        public function filter_by($property, $value)
        {
        }
        /**
         * @param WPML_TF_Feedback $feedback
         *
         * @return bool
         */
        private function filter_by_status(\WPML_TF_Feedback $feedback)
        {
        }
        /**
         * @param WPML_TF_Feedback $feedback
         *
         * @return bool
         */
        private function filter_by_language(\WPML_TF_Feedback $feedback)
        {
        }
        /**
         * @param WPML_TF_Feedback $feedback
         *
         * @return bool
         */
        private function filter_by_post_id(\WPML_TF_Feedback $feedback)
        {
        }
        public function remove_trashed()
        {
        }
    }
    /**
     * Class WPML_TF_Feedback_Factory
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Feedback_Factory
    {
        /**
         * @param array $feedback_data
         *
         * @return WPML_TF_Feedback
         */
        public function create(array $feedback_data)
        {
        }
    }
    /**
     * Class WPML_TF_Feedback_Status
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Feedback_Status
    {
        /** @var string $status */
        private $status = 'pending';
        /**
         * WPML_TF_Feedback_Status constructor.
         *
         * @param string $status
         */
        public function __construct($status = \null)
        {
        }
        /** @param string $status*/
        public function set_value($status)
        {
        }
        /** @return string */
        public function get_value()
        {
        }
        /** @return null|string */
        public function get_display_text()
        {
        }
        /** @return bool */
        private function is_admin_user()
        {
        }
        /**
         * This is used by the blue button on the feedback list
         *
         * @return array|null
         */
        public function get_next_status()
        {
        }
        /** @return bool */
        public function is_pending()
        {
        }
    }
    /**
     * Class WPML_TF_Feedback
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Feedback implements \IWPML_TF_Data_Object
    {
        /** @var int */
        private $id;
        /** @var  string */
        private $date_created;
        /** @var WPML_TF_Feedback_Status */
        private $status;
        /** @var  int */
        private $rating;
        /** @var  string */
        private $content;
        /** @var  int */
        private $document_id;
        /** @var  string */
        private $document_type;
        /** @var  string */
        private $language_from;
        /** @var  string */
        private $language_to;
        /** @var  int|null */
        private $job_id;
        /** @var WPML_TF_Feedback_Reviewer */
        private $reviewer;
        /** @var WPML_TF_Collection $messages */
        private $messages;
        /** @var WPML_TF_Backend_Document_Information $document_information */
        private $document_information;
        /** @var WPML_TF_TP_Responses $tp_rating_responses */
        private $tp_responses;
        /**
         * WPML_Translation_Feedback constructor.
         *
         * @param array                                $data
         * @param WPML_TF_Backend_Document_Information $document_information
         */
        public function __construct($data = array(), \WPML_TF_Backend_Document_Information $document_information = \null)
        {
        }
        /**
         * @return int|mixed|null
         */
        public function get_id()
        {
        }
        /**
         * @return mixed|null|string
         */
        public function get_date_created()
        {
        }
        /**
         * @return string
         */
        public function get_status()
        {
        }
        /**
         * @param string $status
         */
        public function set_status($status)
        {
        }
        /**
         * @return int
         */
        public function get_rating()
        {
        }
        /**
         * @param int $rating
         */
        public function set_rating($rating)
        {
        }
        /**
         * @return mixed|null|string
         */
        public function get_content()
        {
        }
        /**
         * @param string $content
         */
        public function set_content($content)
        {
        }
        /**
         * @return int|null
         */
        public function get_document_id()
        {
        }
        /**
         * @return null|string
         */
        public function get_document_type()
        {
        }
        /**
         * @return null|string
         */
        public function get_language_from()
        {
        }
        /**
         * @return null|string
         */
        public function get_language_to()
        {
        }
        /**
         * @return int|null
         */
        public function get_job_id()
        {
        }
        /**
         * @return WPML_TF_Feedback_Reviewer
         */
        public function get_reviewer()
        {
        }
        /**
         * @param int $reviewer_id
         */
        public function set_reviewer($reviewer_id)
        {
        }
        /**
         * @return WPML_TF_Collection
         */
        public function get_messages()
        {
        }
        /**
         * @param WPML_TF_Message $message
         */
        public function add_message(\WPML_TF_Message $message)
        {
        }
        /** @param WPML_TF_TP_Responses $tp_responses */
        public function set_tp_responses(\WPML_TF_TP_Responses $tp_responses)
        {
        }
        /** @return WPML_TF_TP_Responses */
        public function get_tp_responses()
        {
        }
        /**
         * @return string|null
         */
        public function get_text_status()
        {
        }
        /** @return array */
        public function get_next_status()
        {
        }
        /** @return bool */
        public function is_pending()
        {
        }
        /**
         * @return string
         */
        public function get_document_flag_url()
        {
        }
        /**
         * @return string
         */
        public function get_source_document_flag_url()
        {
        }
        /**
         * @return bool
         */
        public function is_local_translation()
        {
        }
        /**
         * @return string
         */
        public function get_translator_name()
        {
        }
        /**
         * @return array
         */
        public function get_available_translators()
        {
        }
        /**
         * @param WPML_TF_Backend_Document_Information $document_information
         */
        public function set_document_information(\WPML_TF_Backend_Document_Information $document_information)
        {
        }
        /** @return WPML_TF_Backend_Document_Information */
        public function get_document_information()
        {
        }
    }
    /**
     * Class WPML_TF_TP_Responses
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_TP_Responses
    {
        const FEEDBACK_FORWARD_MANUAL = 'manual';
        const FEEDBACK_FORWARD_EMAIL = 'email';
        const FEEDBACK_FORWARD_API = 'api';
        const FEEDBACK_TP_URL_ENDPOINT = '/feedbacks/{feedback_id}/external';
        /**
         * @var string|int $tp_rating_id
         *
         * - empty string for rating never sent (or problems occurred during TP transmission)
         * - 0 for local jobs (which does not need to be sent)
         * - positive integer for ratings already sent
         *
         * This will allow to have a shorter DB query to select feedback to be sent
         */
        private $rating_id = '';
        /** @var null|int $feedback_id */
        private $feedback_id;
        /** @var null|string $feedback_forward_method */
        private $feedback_forward_method;
        public function __construct(array $args = array())
        {
        }
        /** @param string|int $rating_id */
        public function set_rating_id($rating_id)
        {
        }
        /** @return string|int */
        public function get_rating_id()
        {
        }
        /** @param int $feedback_id */
        public function set_feedback_id($feedback_id)
        {
        }
        /** @return null|int */
        public function get_feedback_id()
        {
        }
        /** @param string $method */
        public function set_feedback_forward_method($method)
        {
        }
        /** @return null|string */
        public function get_feedback_forward_method()
        {
        }
        /** @return bool */
        public function is_manual_feedback()
        {
        }
        /** @return bool */
        public function is_email_feedback()
        {
        }
        /** @return bool */
        public function is_api_feedback()
        {
        }
        /** @return null|string */
        public function get_feedback_tp_url()
        {
        }
        /** @return array */
        public function get_strings()
        {
        }
    }
    /**
     * Class WPML_TF_Feedback_Post_Convert
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Feedback_Post_Convert extends \WPML_TF_Data_Object_Post_Convert
    {
        const POST_TYPE = 'wpml_tf_feedback';
        /**
         * @return array
         */
        public function get_post_fields()
        {
        }
        /**
         * @return array
         */
        public function get_meta_fields()
        {
        }
        /**
         * @param IWPML_TF_Data_Object $feedback
         *
         * @return array
         * @throws Exception
         */
        public function to_post_data(\IWPML_TF_Data_Object $feedback)
        {
        }
        /**
         * @param array $post_data
         *
         * @return WPML_TF_Feedback
         */
        public function to_object(array $post_data)
        {
        }
    }
    /**
     * Class WPML_TF_Feedback_Collection_Filter
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Feedback_Collection_Filter implements \IWPML_TF_Collection_Filter
    {
        /** @var bool $exclude_rating_only */
        private $exclude_rating_only;
        /** @var array $language_pairs */
        private $language_pairs;
        /** @var int $pending_tp_ratings */
        private $pending_tp_ratings;
        /** @var int tp_feedback_id */
        private $tp_feedback_id;
        /** @var int $post_id */
        private $post_id;
        /** @var int $reviewer_id */
        private $reviewer_id;
        /**
         * WPML_TF_Feedback_Collection_Filter constructor.
         *
         * @param array $args
         */
        public function __construct(array $args)
        {
        }
        /** @return null|bool */
        private function get_exclude_rating_only()
        {
        }
        /** @return null|array */
        private function get_language_pairs()
        {
        }
        /** @return null|int */
        private function get_pending_tp_ratings()
        {
        }
        /** @return null|int */
        private function get_tp_feedback_id()
        {
        }
        /** @return null|int */
        private function get_reviewer_id()
        {
        }
        /** @return null|int */
        private function get_post_id()
        {
        }
        /** @return array */
        public function get_posts_args()
        {
        }
        /** @return WPML_TF_Feedback_Collection */
        public function get_new_collection()
        {
        }
    }
    /**
     * @author OnTheGoSystems
     */
    class WPML_TF_Feedback_Reviewer
    {
        /** @var int $id WP_User ID */
        private $id;
        /**
         * WPML_TF_Feedback_Reviewer constructor.
         *
         * @param int $id
         */
        public function __construct($id)
        {
        }
        /**
         * @return int|null
         */
        public function get_id()
        {
        }
        /**
         * @return string
         */
        public function get_reviewer_display_name()
        {
        }
    }
    class WPML_TF_Collection_Filter_Factory
    {
        /**
         * @param       $type
         * @param array $args
         *
         * @return null|IWPML_TF_Collection_Filter
         */
        public function create($type, array $args = array())
        {
        }
    }
    /**
     * Class WPML_TF_Data_Object_Storage
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Data_Object_Storage
    {
        const META_PREFIX = 'wpml_tf_';
        /** @var WPML_TF_Data_Object_Post_Convert  */
        private $post_convert;
        /**
         * WPML_TF_Data_Object_Storage constructor.
         *
         * @param WPML_TF_Data_Object_Post_Convert $post_convert
         */
        public function __construct(\WPML_TF_Data_Object_Post_Convert $post_convert)
        {
        }
        /**
         * @param int $id
         *
         * @return IWPML_TF_Data_Object|null
         */
        public function get($id)
        {
        }
        /**
         * @param IWPML_TF_Data_Object $data_object
         *
         * @return int|WP_Error
         */
        public function persist(\IWPML_TF_Data_Object $data_object)
        {
        }
        /**
         * @param int  $id
         * @param bool $force_delete
         */
        public function delete($id, $force_delete = \false)
        {
        }
        /** @param int $id */
        public function untrash($id)
        {
        }
        /**
         * @param IWPML_TF_Collection_Filter $collection_filter
         *
         * @return WPML_TF_Collection
         */
        public function get_collection(\IWPML_TF_Collection_Filter $collection_filter)
        {
        }
        /**
         * For more than 2 meta queries with "OR" relation, the standard WP query has a very bad performance.
         * It's much more efficient to make one query for each meta query.
         *
         * @param array $posts_args
         *
         * @return array
         */
        private function get_posts_from_split_queries(array $posts_args)
        {
        }
    }
    /**
     * Class WPML_TF_Feedback_Query
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Feedback_Query
    {
        /** @var WPML_TF_Data_Object_Storage $feedback_storage */
        private $feedback_storage;
        /** @var WPML_TF_Data_Object_Storage $message_storage */
        private $message_storage;
        /** @var WPML_TF_Collection_Filter_Factory $collection_filter_factory */
        private $collection_filter_factory;
        /** @var  WPML_TF_Feedback_Collection $unfiltered_feedback_collection */
        private $unfiltered_feedback_collection;
        /** @var int $unfiltered_items_count */
        private $unfiltered_items_count;
        /** @var int $trashed_items_count */
        private $trashed_items_count;
        /** @var int $total_items_count */
        private $total_items_count;
        /** @var $filtered_items_count int */
        private $filtered_items_count;
        /** @var bool $is_in_trash */
        private $is_in_trash = \false;
        /**
         * WPML_TF_Feedback_Collection_Factory constructor.
         *
         * @param WPML_TF_Data_Object_Storage         $feedback_storage
         * @param WPML_TF_Data_Object_Storage         $message_storage
         * @param WPML_TF_Collection_Filter_Factory   $collection_filter_factory
         */
        public function __construct(\WPML_TF_Data_Object_Storage $feedback_storage, \WPML_TF_Data_Object_Storage $message_storage, \WPML_TF_Collection_Filter_Factory $collection_filter_factory)
        {
        }
        /**
         * @return WPML_TF_Feedback_Collection
         */
        public function get_unfiltered_collection()
        {
        }
        /**
         * @param array $args
         *
         * @return WPML_TF_Feedback_Collection
         */
        public function get(array $args)
        {
        }
        /**
         * @param WPML_TF_Feedback_Collection $feedback_collection
         * @param array                       $args
         *
         * @return WPML_TF_Feedback_Collection
         */
        public function trash_filter_collection(\WPML_TF_Feedback_Collection $feedback_collection, array $args)
        {
        }
        /**
         * @param WPML_TF_Feedback_Collection $feedback_collection
         * @param array                       $args
         *
         * @return WPML_TF_Feedback_Collection
         */
        private function filter_collection(\WPML_TF_Feedback_Collection $feedback_collection, array $args)
        {
        }
        /**
         * @param WPML_TF_Feedback_Collection $feedback_collection
         * @param array                       $args
         *
         * @return WPML_TF_Feedback_Collection
         */
        private function sort_collection(\WPML_TF_Feedback_Collection $feedback_collection, array $args)
        {
        }
        /**
         * @param WPML_TF_Feedback_Collection $feedback_collection
         * @param array                       $args
         *
         * @return WPML_TF_Feedback_Collection
         */
        private function apply_pagination(\WPML_TF_Feedback_Collection $feedback_collection, array $args)
        {
        }
        /**
         * @return int
         */
        public function get_total_items_count()
        {
        }
        /** @return int */
        public function get_total_trashed_items_count()
        {
        }
        /** @return int */
        public function get_filtered_items_count()
        {
        }
        /** @return bool */
        public function is_in_trash()
        {
        }
        /**
         * @param int  $feedback_id
         * @param bool $with_messages
         *
         * @return null|WPML_TF_Feedback
         */
        public function get_one($feedback_id, $with_messages = \true)
        {
        }
    }
    /**
     * Class WPML_TF_Backend_Options_View
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Backend_Options_View
    {
        const TEMPLATE_FOLDER = '/templates/translation-feedback/backend/';
        const TEMPLATE = 'options-ui.twig';
        const MAX_EXPIRATION_QUANTITY = 10;
        /** @var  IWPML_Template_Service $template_service */
        private $template_service;
        /** @var WPML_TF_Settings $settings */
        private $settings;
        /** @var SitePress $sitepress */
        private $sitepress;
        /**
         * WPML_TF_Frontend_Hooks constructor.
         *
         * @param IWPML_Template_Service $template_service
         * @param WPML_TF_Settings       $settings
         * @param SitePress              $sitepress
         */
        public function __construct(\IWPML_Template_Service $template_service, \WPML_TF_Settings $settings, \SitePress $sitepress)
        {
        }
        /**
         * @return string
         */
        public function render()
        {
        }
        /**
         * @return array
         */
        public static function get_strings()
        {
        }
        /**
         * @return array
         */
        private function get_module_toggle()
        {
        }
        /**
         * @return array
         */
        private function get_button_modes()
        {
        }
        private function get_icon_styles()
        {
        }
        /**
         * @return array
         */
        private function get_languages_to()
        {
        }
        /**
         * @return array
         */
        private function get_display_modes()
        {
        }
        /**
         * @return array
         */
        private function get_expiration_modes()
        {
        }
        /**
         * @return array
         */
        private function get_expiration_quantities()
        {
        }
        /**
         * @return array
         */
        private function get_expiration_units()
        {
        }
    }
    /**
     * Class WPML_TF_Frontend_Feedback_View
     * @author OnTheGoSystems
     */
    class WPML_TF_Frontend_Feedback_View
    {
        const TEMPLATE_FOLDER = '/templates/translation-feedback/frontend/';
        const FORM_TEMPLATE = 'feedback-form.twig';
        const OPEN_TEMPLATE = 'feedback-open-button.twig';
        const CUSTOM_OPEN_LINK_TEMPLATE = 'feedback-custom-open-link.twig';
        const JS_OPEN_NODE_CLASS = 'js-wpml-tf-feedback-icon';
        /** @var  IWPML_Template_Service $template_service */
        private $template_service;
        /** @var SitePress $sitepress */
        private $sitepress;
        /** @var WPML_Queried_Object $queried_object */
        private $queried_object;
        /** @var WPML_TF_Settings $settings */
        private $settings;
        /**
         * WPML_TF_Frontend_Hooks constructor.
         *
         * @param IWPML_Template_Service $template_service
         * @param SitePress              $sitepress
         * @param WPML_Queried_Object    $queried_object
         * @param WPML_TF_Settings       $settings
         */
        public function __construct(\IWPML_Template_Service $template_service, \SitePress $sitepress, \WPML_Queried_Object $queried_object, \WPML_TF_Settings $settings)
        {
        }
        /**
         * @return string
         */
        public function render_form()
        {
        }
        /**
         * @return string
         */
        public function render_open_button()
        {
        }
        /** @return string */
        private function get_wrapper_css_classes()
        {
        }
        /** @return string */
        private function get_icon_css_class()
        {
        }
        /**
         * @param string|array $args
         *
         * @return string
         */
        public function render_custom_open_link($args)
        {
        }
        /** @return array */
        public static function get_default_arguments_for_open_link()
        {
        }
        /** @return array */
        public static function get_icon_css_classes()
        {
        }
    }
    /**
     * Class WPML_TF_Backend_Feedback_Row_View
     */
    class WPML_TF_Backend_Feedback_Row_View
    {
        const TEMPLATE_FOLDER = '/templates/translation-feedback/backend/';
        const SUMMARY_TEMPLATE = 'feedback-list-page-table-row.twig';
        const DETAILS_TEMPLATE = 'feedback-list-page-table-row-details.twig';
        /** @var IWPML_Template_Service $template_service */
        private $template_service;
        /**
         * WPML_TF_Backend_Feedback_Row_View constructor.
         *
         * @param IWPML_Template_Service $template_service
         */
        public function __construct(\IWPML_Template_Service $template_service)
        {
        }
        /** @param WPML_TF_Feedback $feedback */
        public function render_summary_row(\WPML_TF_Feedback $feedback)
        {
        }
        /** @param WPML_TF_Feedback $feedback */
        public function render_details_row(\WPML_TF_Feedback $feedback)
        {
        }
        /** @return array */
        public static function get_columns_strings()
        {
        }
        /** @return array */
        public static function get_summary_strings()
        {
        }
        /** @return array */
        public static function get_details_strings()
        {
        }
    }
    /**
     * Class WPML_TF_Backend_Feedback_List_View
     * @author OnTheGoSystems
     */
    class WPML_TF_Backend_Feedback_List_View
    {
        const TEMPLATE_FOLDER = '/templates/translation-feedback/backend/';
        const TEMPLATE_NAME = 'feedback-list-page.twig';
        const ITEMS_PER_PAGE = 20;
        /** @var IWPML_Template_Service $template_service */
        private $template_service;
        /** @var WPML_TF_Feedback_Query $feedback_query */
        private $feedback_query;
        /** @var WPML_Admin_Pagination $pagination */
        private $pagination;
        /** @var WPML_Admin_Table_Sort $table_sort */
        private $table_sort;
        /** @var WPML_TF_Feedback_Page_Filter $page_filter */
        private $page_filter;
        /**
         * WPML_TF_Backend_Feedback_List_View constructor.
         *
         * @param IWPML_Template_Service $template_service
         * @param WPML_TF_Feedback_Query $feedback_query
         * @param WPML_Admin_Pagination  $pagination
         * @param WPML_Admin_Table_Sort  $table_sort
         * @param WPML_TF_Feedback_Page_Filter $page_filter
         */
        public function __construct(\IWPML_Template_Service $template_service, \WPML_TF_Feedback_Query $feedback_query, \WPML_Admin_Pagination $pagination, \WPML_Admin_Table_Sort $table_sort, \WPML_TF_Feedback_Page_Filter $page_filter)
        {
        }
        /** @return string */
        public function render_page()
        {
        }
        /** @return array */
        private function parse_request_args()
        {
        }
        /** @return array */
        private function get_strings()
        {
        }
        /** @return array */
        private function get_columns()
        {
        }
        /**
         * @param array $args
         *
         * @return array
         */
        private function get_pagination(array $args)
        {
        }
        /** @return array */
        private function get_page_filters()
        {
        }
        /** @return array */
        private function get_current_query()
        {
        }
    }
    /**
     * Class WPML_Frontend_Cookie_Setting_Ajax
     */
    class WPML_Cookie_Setting_Ajax
    {
        const NONCE_COOKIE_SETTING = 'wpml-frontend-cookie-setting-nonce';
        const AJAX_RESPONSE_ID = 'icl_ajx_response_cookie';
        const ACTION = 'wpml_update_cookie_setting';
        /**
         * @var WPML_Cookie_Setting
         */
        private $wpml_frontend_cookie_setting;
        /**
         * WPML_Frontend_Cookie_Setting_Ajax constructor.
         *
         * @param WPML_Cookie_Setting $wpml_frontend_cookie_setting
         */
        public function __construct(\WPML_Cookie_Setting $wpml_frontend_cookie_setting)
        {
        }
        public function add_hooks()
        {
        }
        public function update_cookie_setting()
        {
        }
        /**
         * @return bool
         */
        private function is_valid_request()
        {
        }
    }
    class WPML_Cookie
    {
        /**
         * @param string $name
         * @param string $value
         * @param        $expires
         * @param string $path
         * @param        $domain
         */
        public function set_cookie($name, $value, $expires, $path, $domain)
        {
        }
        /**
         * @param string $name
         *
         * @return string
         */
        public function get_cookie($name)
        {
        }
        /**
         * simple wrapper for \headers_sent
         *
         * @return bool
         */
        public function headers_sent()
        {
        }
        /**
         * @param $name
         */
        private function handle_cache_plugins($name)
        {
        }
        private function is_secure_connection()
        {
        }
    }
    /**
     * Class WPML_Cookie_Scripts
     */
    class WPML_Cookie_Scripts
    {
        /**
         * @var string
         */
        private $language_cookie_name;
        /**
         * @var string
         */
        private $current_language;
        /**
         * WPML_Cookie_Scripts constructor.
         *
         * @param string $language_cookie_name
         * @param string $current_language
         */
        public function __construct($language_cookie_name, $current_language)
        {
        }
        public function add_hooks()
        {
        }
        public function enqueue_scripts()
        {
        }
    }
    /**
     * Class WPML_Frontend_Cookie_Setting
     */
    class WPML_Cookie_Setting
    {
        const COOKIE_SETTING_FIELD = 'store_frontend_cookie';
        /**
         * @var SitePress
         */
        private $sitepress;
        /**
         * WPML_Frontend_Cookie_Setting constructor.
         *
         * @param SitePress $sitepress
         */
        public function __construct(\SitePress $sitepress)
        {
        }
        /**
         * @return bool|mixed
         */
        public function get_setting()
        {
        }
        /**
         * @param $value
         */
        public function set_setting($value)
        {
        }
    }
    /**
     * Class WPML_Cookie_Admin_UI
     */
    class WPML_Cookie_Admin_UI
    {
        const BOX_TEMPLATE = 'admin-cookie-box.twig';
        const BUTTON_ID = 'js-wpml-store-frontend-cookie';
        /**
         * @var WPML_Twig_Template
         */
        private $template_service;
        /**
         * @var WPML_Cookie_Setting
         */
        private $cookie_setting;
        /**
         * WPML_Cookie_Admin_UI constructor.
         *
         * @param WPML_Twig_Template $template_service
         * @param WPML_Cookie_Setting $cookie_setting
         */
        public function __construct(\WPML_Twig_Template $template_service, \WPML_Cookie_Setting $cookie_setting)
        {
        }
        public function add_hooks()
        {
        }
        public function render_cookie_box()
        {
        }
        /**
         * @return array
         */
        private function get_model()
        {
        }
    }
    /**
     * Class WPML_Cookie_Admin_Scripts
     */
    class WPML_Cookie_Admin_Scripts
    {
        public function enqueue()
        {
        }
        public function enqueue_scripts()
        {
        }
    }
    class WPML_Post_Types extends \WPML_SP_User
    {
        public function get_translatable()
        {
        }
        public function get_readonly()
        {
        }
        public function get_translatable_and_readonly()
        {
        }
    }
    /**
     * Created by PhpStorm.
     * User: bruce
     * Date: 4/10/17
     * Time: 10:15 AM
     */
    class WPML_Translation_Modes
    {
        public function is_translatable_mode($mode)
        {
        }
        public function get_options_for_post_type($post_type_label)
        {
        }
        public function get_options()
        {
        }
    }
    class WPML_Config
    {
        static $wpml_config_files = array();
        static $active_plugins = array();
        static function load_config()
        {
        }
        static function load_config_run()
        {
        }
        static function get_custom_fields_translation_settings($translation_actions = array(0))
        {
        }
        static function parse_wpml_config_post_process($config)
        {
        }
        static function load_config_post_process()
        {
        }
        static function load_config_pre_process()
        {
        }
        static function load_plugins_wpml_config()
        {
        }
        static function check_on_config_file($name)
        {
        }
        static function load_theme_wpml_config()
        {
        }
        static function get_theme_wpml_config_file()
        {
        }
        static function parse_wpml_config_files()
        {
        }
        /**
         * @param array     $config_files
         *
         * @param bool|null $updated
         *
         * @return array
         */
        private static function append_custom_xml_config($config_files, &$updated = \null)
        {
        }
        /**
         * @param      $validate
         * @param      $transform
         *
         * @return mixed
         */
        private static function get_custom_xml_config($validate, $transform)
        {
        }
        /**
         * @param $all_configs
         * @param $config
         *
         * @return mixed
         */
        private static function merge_with($all_configs, $config)
        {
        }
        /**
         * @param $config
         */
        protected static function parse_custom_fields($config)
        {
        }
        private static function parse_config_index($config_all, $wpml_config, $index_sing, $index_plur)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Config_Update_Log implements \WPML_Log
    {
        const OPTION_NAME = 'wpml-xml-config-update-log';
        public function get($page_size = 0, $page = 0)
        {
        }
        /**
         * @param string|int|float $timestamp
         * @param array            $entry
         */
        public function insert($timestamp, array $entry)
        {
        }
        public function clear()
        {
        }
        public function save(array $data)
        {
        }
        public function is_empty()
        {
        }
        /**
         * @param array $data
         * @param int   $page_size
         * @param int   $page
         *
         * @return array
         */
        protected function paginate(array $data, $page_size, $page)
        {
        }
        /**
         * @return string
         */
        public function get_log_url()
        {
        }
        /** @return string */
        public static function get_support_page_log_section()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    interface WPML_XML_Config_Read
    {
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_XML_Config_Read_File implements \WPML_XML_Config_Read
    {
        private $file_full_path;
        private $transform;
        private $validate;
        function __construct($file_full_path, \WPML_XML_Config_Validate $validate, \WPML_XML_Transform $transform)
        {
        }
        function get()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_XML_Config_Read_Option implements \WPML_XML_Config_Read
    {
        private $option;
        private $transform;
        private $validate;
        function __construct(\WPML_WP_Option $option, \WPML_XML_Config_Validate $validate, \WPML_XML_Transform $transform)
        {
        }
        function get()
        {
        }
    }
    class WPML_Config_Built_With_Page_Builders extends \WPML_WP_Option implements \IWPML_Action, \IWPML_Backend_Action_Loader, \IWPML_AJAX_Action_Loader
    {
        const CONFIG_KEY = 'built-with-page-builder';
        public function create()
        {
        }
        public function get_key()
        {
        }
        public function get_default()
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param array $config_data
         *
         * @return array
         */
        public function wpml_config_filter($config_data)
        {
        }
    }
    /**
     * Created by PhpStorm.
     * User: bruce
     * Date: 24/10/17
     * Time: 11:02 AM
     */
    class WPML_Config_Display_As_Translated
    {
        /**
         * @link https://onthegosystems.myjetbrains.com/youtrack/issue/wpmlcore-4859
         * @link https://onthegosystems.myjetbrains.com/youtrack/issue/wpmlcore-4941
         *
         * @param array $config
         *
         * @return array
         */
        public static function merge_to_translate_mode($config)
        {
        }
        private static function merge_to_translate_mode_for_key($config, $key_plural, $key_singular)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_XML_Config_Validate
    {
        private $errors = array();
        private $path_to_xsd;
        function __construct($path_to_xsd = \null)
        {
        }
        public function get_errors()
        {
        }
        /**
         * @param string $file_full_path
         *
         * @return bool
         */
        function from_file($file_full_path)
        {
        }
        /**
         * @param string $xml
         *
         * @return bool
         */
        function from_string($xml)
        {
        }
        /**
         * @param string $content The string representation of the XML file
         *
         * @return DOMDocument
         */
        private function get_xml($content)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_XML_Config_Log_Notice
    {
        const NOTICE_ERROR_GROUP = 'wpml-config-update';
        const NOTICE_ERROR_ID = 'wpml-config-update-error';
        /** @var WPML_Config_Update_Log */
        private $log;
        public function __construct(\WPML_Log $log)
        {
        }
        public function add_hooks()
        {
        }
        public function refresh_notices()
        {
        }
        /**
         * @return bool
         */
        private function is_admin_user_action()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_XML_Config_Log_UI
    {
        /** @var IWPML_Template_Service */
        private $template_service;
        /**
         * @var \WPML_Config_Update_Log
         */
        private $log;
        function __construct(\WPML_Config_Update_Log $log, \IWPML_Template_Service $template_service)
        {
        }
        /**
         * @return string
         */
        public function show()
        {
        }
        /** @return array */
        private function get_model()
        {
        }
        private function getDateTimeFromMicroseconds($time)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_XML_Config_Log_Factory
    {
        private $log;
        function create_log()
        {
        }
        function create_ui()
        {
        }
        function create_notice()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Custom_XML extends \WPML_WP_Option
    {
        public function get_key()
        {
        }
        public function get_default()
        {
        }
    }
    class WPML_Config_Shortcode_List extends \WPML_WP_Option implements \IWPML_Action, \IWPML_Backend_Action_Loader, \IWPML_AJAX_Action_Loader
    {
        public function create()
        {
        }
        public function get_key()
        {
        }
        public function get_default()
        {
        }
        public function add_hooks()
        {
        }
        public function wpml_config_filter($config_data)
        {
        }
        public function filter_shortcode_list($shortcodes)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    interface WPML_XML_Transform
    {
        public function get($source, $get_attributes = \true);
    }
    class WPML_XML2Array implements \WPML_XML_Transform
    {
        private $contents;
        private $get_attributes;
        public function get($contents, $get_attributes = \true)
        {
        }
        /**
         * @param       $value
         * @param array $attributes
         *
         * @return array
         */
        private function get_item($value, array $attributes)
        {
        }
    }
    /**
     * Class for handling a unique ID of the site.
     *
     * @author OnTheGo Systems
     */
    class WPML_Site_ID
    {
        /**
         * The name prefix of the option where the ID is stored.
         */
        const SITE_ID_KEY = 'WPML_SITE_ID';
        /**
         * The default scope.
         */
        const SITE_SCOPES_GLOBAL = 'global';
        /**
         * Memory cache of the IDs.
         *
         * @var array
         */
        private $site_ids = array();
        /**
         * Read and, if needed, generate the site ID based on the scope.
         *
         * @param string $scope      Defaults to "global".
         *                           Use a different value when the ID is used for specific scopes.
         *
         * @param bool   $create_new Forces the creation of a new ID.
         *
         * @return string|null The generated/stored ID or null if it wasn't possible to generate/store the value.
         */
        public function get_site_id($scope = self::SITE_SCOPES_GLOBAL, $create_new = \false)
        {
        }
        /**
         * Geenrates the ID.
         *
         * @param string $scope The scope of the ID.
         *
         * @return bool
         */
        private function generate_site_id($scope)
        {
        }
        /**
         * Read the value from cache, if present, or from the DB.
         *
         * @param string $scope The scope of the ID.
         *
         * @return string
         */
        private function read_value($scope)
        {
        }
        /**
         * Writes the value in DB and cache.
         *
         * @param string $value The value to write.
         * @param string $scope The scope of the ID.
         *
         * @return bool
         */
        private function write_value($value, $scope)
        {
        }
        /**
         * Gets the options key name based on the scope.
         *
         * @param string $scope The scope of the ID.
         *
         * @return string
         */
        private function get_option_key($scope)
        {
        }
        /**
         * Gets the value from the memory cache.
         *
         * @param string $scope The scope of the ID.
         *
         * @return mixed|null
         */
        private function get_from_cache($scope)
        {
        }
    }
    interface IWPML_WP_Element_Type
    {
        /**
         * @param string $element_name
         *
         * @return mixed
         */
        public function get_wp_element_type_object($element_name);
    }
    /**
     * Created by PhpStorm.
     * User: bruce
     * Date: 30/10/17
     * Time: 9:09 PM
     */
    class WPML_WP_Taxonomy implements \IWPML_WP_Element_Type
    {
        public static function get_linked_post_types($taxonomy)
        {
        }
        /**
         * @param string $taxonomy
         *
         * @return false|WP_Taxonomy
         */
        public function get_wp_element_type_object($taxonomy)
        {
        }
    }
    /**
     * Wrapper class for basic PHP functions
     */
    class WPML_PHP_Functions
    {
        /**
         * Wrapper around PHP constant defined
         *
         * @param string $constant_name
         *
         * @return bool
         */
        public function defined($constant_name)
        {
        }
        /**
         * Wrapper around PHP constant lookup
         *
         * @param string $constant_name
         *
         * @return string|int
         */
        public function constant($constant_name)
        {
        }
        /**
         * @param string $function_name The function name, as a string.
         *
         * @return bool true if <i>function_name</i> exists and is a function, false otherwise.
         * This function will return false for constructs, such as <b>include_once</b> and <b>echo</b>.
         * @return bool
         */
        public function function_exists($function_name)
        {
        }
        /**
         * @param string $class_name The class name. The name is matched in a case-insensitive manner.
         * @param bool   $autoload   [optional] Whether or not to call &link.autoload; by default.
         *
         * @return bool true if <i>class_name</i> is a defined class, false otherwise.
         * @return bool
         */
        public function class_exists($class_name, $autoload = \true)
        {
        }
        /**
         * @param string $name The extension name
         *
         * @return bool true if the extension identified by <i>name</i> is loaded, false otherwise.
         */
        public function extension_loaded($name)
        {
        }
        /**
         * @param $string
         *
         * @return string
         */
        public function mb_strtolower($string)
        {
        }
        /**
         * Wrapper for \phpversion()
         *
         * * @param string $extension (optional)
         *
         * @return string
         */
        public function phpversion($extension = \null)
        {
        }
        /**
         * Compares two "PHP-standardized" version number strings
         * @see \WPML_WP_API::version_compare
         *
         * @param string $version1
         * @param string $version2
         * @param null   $operator
         *
         * @return mixed
         */
        public function version_compare($version1, $version2, $operator = \null)
        {
        }
        /**
         * @param array $array
         * @param int   $sort_flags
         *
         * @return array
         */
        public function array_unique($array, $sort_flags = \SORT_REGULAR)
        {
        }
        /**
         * @param string $message
         * @param int    $message_type
         * @param string $destination
         * @param string $extra_headers
         *
         * @return bool
         */
        public function error_log($message, $message_type = \null, $destination = \null, $extra_headers = \null)
        {
        }
        public function exit_php()
        {
        }
    }
    class WPML_WP_API extends \WPML_PHP_Functions
    {
        /**
         * @param string $file
         * @param string $filename
         *
         * @return false | string
         */
        public function get_file_mime_type($file, $filename)
        {
        }
        /**
         * Wrapper for \get_option
         *
         * @param string     $option
         * @param bool|false $default
         *
         * @return mixed|void
         */
        public function get_option($option, $default = \false)
        {
        }
        public function is_url($value)
        {
        }
        public function get_transient($transient)
        {
        }
        public function set_transient($transient, $value, $expiration = 0)
        {
        }
        /**
         * @param string      $option
         * @param mixed       $value
         * @param string|bool $autoload
         *
         * @return bool False if value was not updated and true if value was updated.
         */
        public function update_option($option, $value, $autoload = \null)
        {
        }
        /**
         * @param string|int|WP_Post $ID Optional. Post ID or post object. Default empty.
         *
         * @return false|string
         */
        public function get_post_status($ID = '')
        {
        }
        /**
         * Wrapper for \get_term_link
         *
         * @param  object|int|string $term
         * @param string             $taxonomy
         *
         * @return string|WP_Error
         */
        public function get_term_link($term, $taxonomy = '')
        {
        }
        /**
         *  Wrapper for \get_term_by
         *
         * @param string     $field
         * @param string|int $value
         * @param string     $taxonomy
         * @param string     $output
         * @param string     $filter
         *
         * @return bool|WP_Term
         */
        public function get_term_by($field, $value, $taxonomy = '', $output = \OBJECT, $filter = 'raw')
        {
        }
        /**
         * Wrapper for \add_submenu_page
         *
         * @param              $parent_slug
         * @param              $page_title
         * @param              $menu_title
         * @param              $capability
         * @param              $menu_slug
         * @param array|string $function
         *
         * @return false|string
         */
        public function add_submenu_page($parent_slug, $page_title, $menu_title, $capability, $menu_slug, $function = '')
        {
        }
        /**
         * @param              $page_title
         * @param              $menu_title
         * @param              $capability
         * @param              $menu_slug
         * @param array|string $function
         * @param string       $icon_url
         * @param null         $position
         *
         * @return string
         */
        public function add_menu_page($page_title, $menu_title, $capability, $menu_slug, $function = '', $icon_url = '', $position = \null)
        {
        }
        /**
         * Wrapper for \get_post_type_archive_link
         *
         * @param string $post_type
         *
         * @return string
         */
        public function get_post_type_archive_link($post_type)
        {
        }
        /**
         * Wrapper for \get_edit_post_link
         *
         * @param int    $id
         * @param string $context
         *
         * @return null|string|void
         */
        public function get_edit_post_link($id = 0, $context = 'display')
        {
        }
        /**
         * Wrapper for get_the_title
         *
         * @param int|WP_Post $post
         *
         * @return string
         */
        public function get_the_title($post)
        {
        }
        /**
         * Wrapper for \get_day_link
         *
         * @param int $year
         * @param int $month
         * @param int $day
         *
         * @return string
         */
        public function get_day_link($year, $month, $day)
        {
        }
        /**
         * Wrapper for \get_month_link
         *
         * @param int $year
         * @param int $month
         *
         * @return string
         */
        public function get_month_link($year, $month)
        {
        }
        /**
         * Wrapper for \get_year_link
         *
         * @param int $year
         *
         * @return string
         */
        public function get_year_link($year)
        {
        }
        /**
         * Wrapper for \get_author_posts_url
         *
         * @param int    $author_id
         * @param string $author_nicename
         *
         * @return string
         */
        public function get_author_posts_url($author_id, $author_nicename = '')
        {
        }
        /**
         * Wrapper for \current_user_can
         *
         * @param string $capability
         *
         * @return bool
         */
        public function current_user_can($capability)
        {
        }
        /**
         * @param int    $user_id
         * @param string $key
         * @param bool   $single
         *
         * @return mixed
         */
        public function get_user_meta($user_id, $key = '', $single = \false)
        {
        }
        /**
         * Wrapper for \get_post_type
         *
         * @param null|int|WP_Post $post
         *
         * @return false|string
         */
        public function get_post_type($post = \null)
        {
        }
        public function is_archive()
        {
        }
        public function is_front_page()
        {
        }
        public function is_home()
        {
        }
        /**
         * @param int|string|array $page Optional. Page ID, title, slug, or array of such. Default empty.
         *
         * @return bool
         */
        public function is_page($page = '')
        {
        }
        public function is_paged()
        {
        }
        /**
         * @param string $post
         *
         * @return int|string|array $post Optional. Post ID, title, slug, or array of such. Default empty.
         */
        public function is_single($post = '')
        {
        }
        /**
         * @param string|array $post_types
         *
         * @return bool
         */
        public function is_singular($post_types = '')
        {
        }
        /**
         * @param int|WP_User $user
         * @param string      $capability
         *
         * @return bool
         */
        public function user_can($user, $capability)
        {
        }
        /**
         * Wrapper for add_filter
         */
        public function add_filter($tag, $function_to_add, $priority = 10, $accepted_args = 1)
        {
        }
        /**
         * Wrapper for remove_filter
         */
        public function remove_filter($tag, $function_to_remove, $priority = 10)
        {
        }
        /**
         * Wrapper for current_filter
         */
        public function current_filter()
        {
        }
        public function get_tm_url($tab = \null, $hash = \null)
        {
        }
        /**
         * Wrapper for \is_admin()
         *
         * @return bool
         */
        public function is_admin()
        {
        }
        public function is_jobs_tab()
        {
        }
        /**
         * @param string|null $tab
         * @param string|null $page_type
         *
         * @return bool
         */
        public function is_tm_page($tab = \null, $page_type = 'management')
        {
        }
        public function is_translation_queue_page()
        {
        }
        public function is_string_translation_page()
        {
        }
        public function is_support_page()
        {
        }
        public function is_troubleshooting_page()
        {
        }
        public function is_core_page($page = '')
        {
        }
        public function is_back_end()
        {
        }
        public function is_front_end()
        {
        }
        public function is_ajax()
        {
        }
        public function is_cron_job()
        {
        }
        public function is_heartbeat()
        {
        }
        public function is_post_edit_page()
        {
        }
        public function is_new_post_page()
        {
        }
        public function is_term_edit_page()
        {
        }
        public function is_customize_page()
        {
        }
        public function is_comments_post_page()
        {
        }
        public function is_plugins_page()
        {
        }
        public function is_themes_page()
        {
        }
        /**
         * Wrapper for \is_feed that returns false if called before the loop
         *
         * @param string $feeds
         *
         * @return bool
         */
        public function is_feed($feeds = '')
        {
        }
        /**
         * Wrapper for \wp_update_term_count
         *
         * @param  int[]     $terms given by their term_taxonomy_ids
         * @param  string    $taxonomy
         * @param bool|false $do_deferred
         *
         * @return bool
         */
        public function wp_update_term_count($terms, $taxonomy, $do_deferred = \false)
        {
        }
        /**
         * Wrapper for \get_taxonomy
         *
         * @param string $taxonomy
         *
         * @return bool|object
         */
        public function get_taxonomy($taxonomy)
        {
        }
        /**
         * Wrapper for \wp_set_object_terms
         *
         * @param int              $object_id The object to relate to.
         * @param array|int|string $terms A single term slug, single term id, or array of either term slugs or ids.
         *                                    Will replace all existing related terms in this taxonomy.
         * @param string           $taxonomy The context in which to relate the term to the object.
         * @param bool             $append Optional. If false will delete difference of terms. Default false.
         *
         * @return array|WP_Error Affected Term IDs.
         */
        public function wp_set_object_terms($object_id, $terms, $taxonomy, $append = \false)
        {
        }
        /**
         * Wrapper for \get_post_types
         *
         * @param array  $args
         * @param string $output
         * @param string $operator
         *
         * @return array
         */
        public function get_post_types($args = array(), $output = 'names', $operator = 'and')
        {
        }
        public function wp_send_json($response)
        {
        }
        public function wp_send_json_success($data = \null)
        {
        }
        public function wp_send_json_error($data = \null)
        {
        }
        /**
         * Wrapper for \get_current_user_id
         * @return int
         */
        public function get_current_user_id()
        {
        }
        /**
         * Wrapper for \get_post
         *
         * @param null|int|WP_Post $post
         * @param string           $output
         * @param string           $filter
         *
         * @return array|null|WP_Post
         */
        public function get_post($post = \null, $output = \OBJECT, $filter = 'raw')
        {
        }
        /**
         * Wrapper for \get_post_meta
         *
         * @param int    $post_id Post ID.
         * @param string $key Optional. The meta key to retrieve. By default, returns
         *                        data for all keys. Default empty.
         * @param bool   $single Optional. Whether to return a single value. Default false.
         *
         * @return mixed Will be an array if $single is false. Will be value of meta data
         *               field if $single is true.
         */
        public function get_post_meta($post_id, $key = '', $single = \false)
        {
        }
        /**
         * Wrapper for \update_post_meta
         *
         * @param int    $post_id Post ID.
         * @param string $key
         * @param mixed  $value
         * @param mixed  $prev_value
         *
         * @return int|bool
         */
        public function update_post_meta($post_id, $key, $value, $prev_value = '')
        {
        }
        /**
         * Wrapper for add_post_meta
         *
         * @param int    $post_id    Post ID.
         * @param string $meta_key   Metadata name.
         * @param mixed  $meta_value Metadata value. Must be serializable if non-scalar.
         * @param bool   $unique     Optional. Whether the same key should not be added.
         *                           Default false.
         * @return int|false Meta ID on success, false on failure.
         */
        public function add_post_meta($post_id, $meta_key, $meta_value, $unique = \false)
        {
        }
        /**
         * Wrapper for delete_post_meta
         *
         * @param int    $post_id    Post ID.
         * @param string $meta_key   Metadata name.
         * @param mixed  $meta_value Optional. Metadata value. Must be serializable if
         *                           non-scalar. Default empty.
         * @return bool True on success, false on failure.
         */
        public function delete_post_meta($post_id, $meta_key, $meta_value = '')
        {
        }
        /**
         * Wrapper for \get_term_meta
         *
         * @param int    $term_id
         * @param string $key
         * @param bool   $single
         *
         * @return mixed
         */
        public function get_term_meta($term_id, $key = '', $single = \false)
        {
        }
        /**
         * Wrapper for \get_permalink
         *
         * @param int        $id
         * @param bool|false $leavename
         *
         * @return bool|string
         */
        public function get_permalink($id = 0, $leavename = \false)
        {
        }
        /**
         * Wrapper for \wp_mail
         *
         * @param string       $to
         * @param string       $subject
         * @param string       $message
         * @param string|array $headers
         * @param array|array  $attachments
         *
         * @return bool
         */
        public function wp_mail($to, $subject, $message, $headers = '', $attachments = array())
        {
        }
        /**
         * Wrapper for \get_post_custom
         *
         * @param int $post_id
         *
         * @return array
         */
        public function get_post_custom($post_id = 0)
        {
        }
        public function is_dashboard_tab()
        {
        }
        public function wp_safe_redirect($redir_target, $status = 302)
        {
        }
        /**
         * Wrapper for \load_textdomain
         *
         * @param string $domain
         * @param string $mofile
         *
         * @return bool
         */
        public function load_textdomain($domain, $mofile)
        {
        }
        /**
         * Wrapper for \get_home_url
         *
         * @param null|int    $blog_id
         * @param string      $path
         * @param null|string $scheme
         *
         * @return string
         */
        public function get_home_url($blog_id = \null, $path = '', $scheme = \null)
        {
        }
        /**
         * Wrapper for \get_site_url
         *
         * @param null|int    $blog_id
         * @param string      $path
         * @param null|string $scheme
         *
         * @return string
         */
        public function get_site_url($blog_id = \null, $path = '', $scheme = \null)
        {
        }
        /**
         * Wrapper for \is_multisite
         *
         * @return bool
         */
        public function is_multisite()
        {
        }
        /**
         * Wrapper for \is_main_site
         *
         * @param null|int $site_id
         *
         * @return bool
         */
        public function is_main_site($site_id = \null)
        {
        }
        /**
         * Wrapper for \ms_is_switched
         *
         * @return bool
         */
        public function ms_is_switched()
        {
        }
        /**
         * Wrapper for \get_current_blog_id
         *
         * @return int
         */
        public function get_current_blog_id()
        {
        }
        /**
         * Wrapper for wp_get_post_terms
         *
         * @param int $post_id
         * @param string $taxonomy
         * @param array $args
         *
         * @return array|WP_Error
         */
        public function wp_get_post_terms($post_id = 0, $taxonomy = 'post_tag', $args = array())
        {
        }
        /**
         * Wrapper for get_taxonomies
         *
         * @param array  $args
         * @param string $output
         * @param string $operator
         *
         * @return array
         */
        public function get_taxonomies($args = array(), $output = 'names', $operator = 'and')
        {
        }
        /**
         * Wrapper for \wp_get_theme
         *
         * @param string $stylesheet
         * @param string $theme_root
         *
         * @return WP_Theme
         */
        public function wp_get_theme($stylesheet = \null, $theme_root = \null)
        {
        }
        /**
         * Wrapper for \wp_get_theme->get('Name')
         *
         * @return string
         */
        public function get_theme_name()
        {
        }
        /**
         * Wrapper for \wp_get_theme->parent_theme
         *
         * @return string
         */
        public function get_theme_parent_name()
        {
        }
        /**
         * Wrapper for \wp_get_theme->get('URI')
         *
         * @return string
         */
        public function get_theme_URI()
        {
        }
        /**
         * Wrapper for \wp_get_theme->get('Author')
         *
         * @return string
         */
        public function get_theme_author()
        {
        }
        /**
         * Wrapper for \wp_get_theme->get('AuthorURI')
         *
         * @return string
         */
        public function get_theme_authorURI()
        {
        }
        /**
         * Wrapper for \wp_get_theme->get('Template')
         *
         * @return string
         */
        public function get_theme_template()
        {
        }
        /**
         * Wrapper for \wp_get_theme->get('Version')
         *
         * @return string
         */
        public function get_theme_version()
        {
        }
        /**
         * Wrapper for \wp_get_theme->get('TextDomain')
         *
         * @return string
         */
        public function get_theme_textdomain()
        {
        }
        /**
         * Wrapper for \wp_get_theme->get('DomainPath')
         *
         * @return string
         */
        public function get_theme_domainpath()
        {
        }
        /**
         * Wrapper for \get_plugins()
         *
         * @return array
         */
        public function get_plugins()
        {
        }
        /**
         * Wrapper for \get_post_custom_keys
         *
         * @param int $post_id
         *
         * @return array|void
         */
        public function get_post_custom_keys($post_id)
        {
        }
        /**
         * Wrapper for \get_bloginfo
         *
         * @param string $show (optional)
         * @param string $filter (optional)
         *
         * @return string
         */
        public function get_bloginfo($show = '', $filter = 'raw')
        {
        }
        /**
         * Compare version in their "naked" form
         * @see \WPML_WP_API::get_naked_version
         * @see \WPML_WP_API::version_compare
         * @see \version_compare
         *
         * @param string $version1
         * @param string $version2
         * @param null   $operator
         *
         * @return mixed
         */
        public function version_compare_naked($version1, $version2, $operator = \null)
        {
        }
        /**
         * Returns only the first 3 numeric elements of a version (assuming to use MAJOR.MINOR.PATCH
         *
         * @param string $version
         *
         * @return string
         */
        public function get_naked_version($version)
        {
        }
        public function has_filter($tag, $function_to_check = \false)
        {
        }
        public function add_action($tag, $function_to_add, $priority = 10, $accepted_args = 1)
        {
        }
        public function get_current_screen()
        {
        }
        /**
         * Wrapper for \get_query_var
         *
         * @param string $var
         * @param mixed  $default
         *
         * @return mixed
         */
        public function get_query_var($var, $default = '')
        {
        }
        /**
         * Wrapper for \get_queried_object
         */
        public function get_queried_object()
        {
        }
        public function get_raw_post_data()
        {
        }
        public function wp_verify_nonce($nonce, $action = -1)
        {
        }
        /**
         * @param string $action
         *
         * @return int The number of times action hook $tag is fired.
         */
        public function did_action($action)
        {
        }
        /**
         * @return string
         */
        public function current_action()
        {
        }
        public function get_wp_post_types_global()
        {
        }
        /**
         * @return wp_xmlrpc_server
         */
        public function get_wp_xmlrpc_server()
        {
        }
        /**
         * Wrapper for $wp_taxonomies global variable
         *
         */
        public function get_wp_taxonomies()
        {
        }
        /**
         * Wrapper for get_category_link function
         *
         * @param int $category_id
         *
         * @return string
         */
        public function get_category_link($category_id)
        {
        }
        /**
         * Wrapper for is_wp_error function
         *
         * @param mixed $thing
         *
         * @return bool
         */
        public function is_wp_error($thing)
        {
        }
        /**
         * @param int  $limit
         * @param bool $provide_object
         * @param bool $ignore_args
         *
         * @return array
         */
        public function get_backtrace($limit = 0, $provide_object = \false, $ignore_args = \true)
        {
        }
        /**
         * @return WP_Filesystem_Direct
         */
        public function get_wp_filesystem_direct()
        {
        }
        /**
         * @return WPML_Notices
         */
        public function get_admin_notices()
        {
        }
        /**
         * @param Twig_LoaderInterface $loader
         * @param array                $environment_args
         *
         * @return Twig_Environment
         */
        public function get_twig_environment($loader, $environment_args)
        {
        }
        /**
         * @param array $template_paths
         *
         * @return Twig_Loader_Filesystem
         */
        public function get_twig_loader_filesystem($template_paths)
        {
        }
        /**
         * @return Twig_Loader_String
         */
        public function get_twig_loader_string()
        {
        }
        public function is_a_REST_request()
        {
        }
    }
    class WPML_WP_Roles
    {
        const ROLES_ADMINISTRATOR = 'administrator';
        const ROLES_EDITOR = 'editor';
        const ROLES_CONTRIBUTOR = 'contributor';
        const ROLES_SUBSCRIBER = 'subscriber';
        const EDITOR_LEVEL = 'level_7';
        const CONTRIBUTOR_LEVEL = 'level_1';
        const SUBSCRIBER_LEVEL = 'level_0';
        /**
         * Returns an array of roles which meet the capability level set in \WPML_WP_Roles::EDITOR_LEVEL.
         *
         * @return array
         */
        public static function get_editor_roles()
        {
        }
        /**
         * Returns an array of roles which meet the capability level set in \WPML_WP_Roles::CONTRIBUTOR_LEVEL.
         *
         * @return array
         */
        public static function get_contributor_roles()
        {
        }
        /**
         * Returns an array of roles wich meet the capability level set in \WPML_WP_Roles::SUBSCRIBER_LEVEL.
         *
         * @return array
         */
        public static function get_subscriber_roles()
        {
        }
        /**
         * @return array
         */
        public static function get_roles_up_to_user_level(\WP_User $user)
        {
        }
        /**
         * @param  WP_User  $user
         *
         * @return int
         */
        public static function get_user_max_level(\WP_User $user)
        {
        }
        public static function get_highest_level(array $capabilities)
        {
        }
        /**
         * It returns a filtered array of roles.
         *
         * @param  string  $level  The capability level that the role must meet.
         * @param  null|string  $default  The role ID to use as a default.
         *
         * @return array
         */
        private static function get_roles_for_level($level, $default = \null)
        {
        }
        private static function get_roles_with_max_level($level, $default = \null)
        {
        }
        private static function create_build_role_entity($level, $default = \null)
        {
        }
        private static function create_is_default($level, $default = \null)
        {
        }
    }
    class WPML_WP_Post_Type implements \IWPML_WP_Element_Type
    {
        /**
         * @param string $post_type
         *
         * @return null|WP_Post_Type
         */
        public function get_wp_element_type_object($post_type)
        {
        }
    }
    class WPML_Cache_Directory
    {
        const DIR_PERMISSIONS = 0775;
        const MAIN_DIRECTORY_NAME = 'wpml';
        const NOTICE_GROUP = 'wpml-cache-directory';
        const NOTICE_INVALID_CACHE = 'invalid-cache';
        private $cache_disabled = \false;
        /**
         * @var WPML_WP_API
         */
        private $wp_api;
        /**
         * @var WP_Filesystem_Direct
         */
        private $filesystem;
        /**
         * WPML_Cache_Directory constructor.
         *
         * @param WPML_WP_API $wp_api
         */
        public function __construct(\WPML_WP_API $wp_api)
        {
        }
        /**
         * @return string
         */
        private function get_main_directory_path()
        {
        }
        /**
         * The function `wp_mkdir_p` will create directories recursively
         *
         * @param string $absolute_path
         *
         * @return string|bool absolute path or false if we can't have a writable and readable directory
         */
        private function maybe_create_directory($absolute_path)
        {
        }
        /**
         * @param string $relative_path
         *
         * @return string|bool absolute path or false if we can't have a writable and readable directory
         */
        public function get($relative_path = '')
        {
        }
        /**
         * @param string $relative_path
         */
        public function remove($relative_path = '')
        {
        }
    }
    class WPML_Installer_Domain_URL
    {
        private $site_url_in_default_lang;
        public function __construct($site_url_in_default_lang)
        {
        }
        public function add_hooks()
        {
        }
        public function get_site_url_in_default_lang()
        {
        }
    }
    class WPML_Installer_Gateway
    {
        private static $the_instance;
        private function __construct()
        {
        }
        private function __clone()
        {
        }
        public static function get_instance()
        {
        }
        public static function set_instance($instance)
        {
        }
        public function class_exists()
        {
        }
        public function get_site_key($repository_id = 'wpml')
        {
        }
        public function get_ts_client_id($repository_id = 'wpml')
        {
        }
        public function get_registering_user_id($repository_id = 'wpml')
        {
        }
    }
    class WPML_Installer_Domain_URL_Factory implements \IWPML_Backend_Action_Loader, \IWPML_AJAX_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_SEO_HeadLangs
    {
        private $sitepress;
        /**
         * @var WPML_Queried_Object_Factory
         */
        private $queried_object_factory;
        /**
         * WPML_SEO_HeadLangs constructor.
         *
         * @param SitePress                   $sitepress
         * @param WPML_Queried_Object_Factory $queried_object_factory
         */
        public function __construct(\SitePress $sitepress, \WPML_Queried_Object_Factory $queried_object_factory)
        {
        }
        private function get_seo_settings()
        {
        }
        public function init_hooks()
        {
        }
        function head_langs()
        {
        }
        function render_menu()
        {
        }
        private function must_render($languages)
        {
        }
        /**
         * @return bool
         */
        private function is_home_front_or_archive_page()
        {
        }
        /**
         * @param array $lang
         *
         * @return string
         */
        private function get_hreflang_code($lang)
        {
        }
        private function is_valid_hreflang_code($code)
        {
        }
    }
    class WPML_Translation_Management_Filters_And_Actions
    {
        /**
         * @var  SitePress $sitepress
         */
        private $sitepress;
        /**
         * @var \AbsoluteLinks
         */
        private $absolute_links;
        /**
         * @var \WPML_Absolute_To_Permalinks
         */
        private $permalinks_converter;
        /**
         * @var \WPML_Translate_Link_Targets_In_Custom_Fields
         */
        private $translate_links_in_custom_fields;
        /**
         * @var \WPML_Translate_Link_Targets_In_Custom_Fields_Hooks
         */
        private $translate_links_in_custom_fields_hooks;
        /**
         * @var \WPML_Translate_Link_Targets
         */
        private $translate_link_target;
        /**
         * @var \WPML_Translate_Link_Targets_Hooks
         */
        private $translate_link_target_hooks;
        /**
         * @param TranslationManagement tm_instance
         * @param \SitePress $sitepress
         */
        public function __construct($tm_instance, $sitepress)
        {
        }
        private function add_filters_for_translating_link_targets(&$tm_instance)
        {
        }
    }
    class WPML_Translate_Link_Targets_Hooks
    {
        /**
         * WPML_Translate_Link_Targets_Hooks constructor.
         *
         * @param WPML_Translate_Link_Targets $translate_link_targets
         * @param WPML_WP_API $wp_api
         */
        public function __construct($translate_link_targets, $wp_api)
        {
        }
    }
    /**
     * Class WPML_Attachments_Urls_With_Identical_Slugs
     *
     * @link https://onthegosystems.myjetbrains.com/youtrack/issue/wpmlcore-4700
     */
    class WPML_Attachments_Urls_With_Identical_Slugs implements \IWPML_Action
    {
        public function add_hooks()
        {
        }
        /**
         * Translate the attachment id in the $wp_query during parse_query
         *
         * @param WP_Query $wp_query
         *
         * @return WP_Query
         */
        public function translate_attachment_id($wp_query)
        {
        }
    }
    /**
     * Created by PhpStorm.
     * User: bruce
     * Date: 26/10/17
     * Time: 5:22 PM
     */
    class WPML_Archives_Query implements \IWPML_Action
    {
        /** @var wpdb $wpdb */
        private $wpdb;
        /** @var WPML_Language_Where_Clause $language_where_clause */
        private $language_where_clause;
        /** @var string $post_type */
        private $post_type = 'post';
        public function __construct(\wpdb $wpdb, \WPML_Language_Where_Clause $language_where_clause)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param string $join
         * @param array $args
         *
         * @return string
         */
        public function get_archives_join($join, $args)
        {
        }
        /**
         * @param string $where_clause
         *
         * @return string
         */
        public function get_archives_where($where_clause)
        {
        }
    }
    abstract class WPML_Display_As_Translated_Query
    {
        /** @var wpdb $wpdb */
        protected $wpdb;
        /** @var string $icl_translation_table_alias */
        protected $icl_translation_table_alias;
        /**
         * WPML_Display_As_Translated_Query constructor.
         *
         * @param wpdb $wpdb
         */
        public function __construct(\wpdb $wpdb, $icl_translation_table_alias = 'wpml_translations')
        {
        }
        /**
         * @param string $current_language
         * @param string $fallback_language
         * @param array $content_types
         * @param bool $skip_content_type_check Ignore $content_types if true.
         *
         * @return string
         */
        public function get_language_snippet($current_language, $fallback_language, $content_types, $skip_content_type_check = \false)
        {
        }
        /**
         * @param string $language
         *
         * @return string
         */
        private function get_query_for_no_translation($language)
        {
        }
        /**
         * @param array $content_types
         *
         * @return string
         */
        protected abstract function get_content_types_query($content_types);
        /**
         * @param string $language
         *
         * @return string
         */
        protected abstract function get_query_for_translation_not_published($language);
    }
    class WPML_Display_As_Translated_Posts_Query extends \WPML_Display_As_Translated_Query
    {
        /** @var string $post_table */
        private $post_table;
        /**
         * WPML_Display_As_Translated_Posts_Query constructor.
         *
         * @param wpdb $wpdb
         * @param string $post_table_alias
         */
        public function __construct(\wpdb $wpdb, $post_table_alias = \null)
        {
        }
        /**
         * @param array $post_types
         *
         * @return string
         */
        protected function get_content_types_query($post_types)
        {
        }
        /**
         * @param string $language
         *
         * @return string
         */
        protected function get_query_for_translation_not_published($language)
        {
        }
    }
    class WPML_Display_As_Translated_Attachments_Query
    {
        private $sitepress;
        private $post_translation;
        public function __construct(\SitePress $sitepress, \WPML_Post_Translation $post_translation)
        {
        }
        public function add_hooks()
        {
        }
        public function adjust_post_parent($q)
        {
        }
    }
    /**
     * Class WPML_Query_Filter
     *
     * @package    wpml-core
     * @subpackage post-translation
     */
    class WPML_Query_Filter extends \WPML_Full_Translation_API
    {
        /** @var  WPML_Name_Query_Filter[] $page_name_filter */
        private $name_filter = array();
        /**
         * @param string $post_type
         *
         * @return WPML_Name_Query_Filter
         */
        public function get_page_name_filter($post_type = 'page')
        {
        }
        /**
         * @return WPML_404_Guess
         */
        public function get_404_util()
        {
        }
        /**
         * @param string $join
         * @param string $post_type
         *
         * @return string
         */
        public function filter_single_type_join($join, $post_type)
        {
        }
        /**
         * Filters comment queries so that only comments in the current language are displayed for translated post types
         *
         * @param string[] $clauses
         * @param WP_Comment_Query $obj
         *
         * @return string[]
         */
        public function comments_clauses_filter($clauses, $obj)
        {
        }
        /**
         * @param string $join
         * @param WP_Query $query
         *
         * @return string
         */
        public function posts_join_filter($join, $query)
        {
        }
        /**
         * @param string $where
         * @param string | String[] $post_type
         *
         * @return string
         */
        public function filter_single_type_where($where, $post_type)
        {
        }
        /**
         * @param string $where
         * @param WP_Query $query
         *
         * @return string
         */
        public function posts_where_filter($where, $query)
        {
        }
        /**
         * @param bool|false        $not
         * @param bool|false|string $posts_alias
         *
         * @return string
         */
        public function in_translated_types_snippet($not = \false, $posts_alias = \false)
        {
        }
        /**
         * @param bool|true $left if true the query will be filtered by a left join, allowing untranslated post types in it
         *                        simultaneous with translated ones
         *
         * @return string
         */
        private function any_post_type_join($left = \true)
        {
        }
        private function has_translated_type($core_types)
        {
        }
        /**
         * @param WP_Query $query
         * @param String   $pagenow
         *
         * @return bool
         */
        private function is_join_filter_active($query, $pagenow)
        {
        }
        /**
         * Checks whether the currently queried for object is the root page.
         *
         * @param WP_Query $query
         *
         * @return bool
         */
        private function is_queried_object_root($query)
        {
        }
        /**
         * @param String $query_type
         *
         * @return array|bool|string
         */
        private function determine_post_type($query_type)
        {
        }
        /**
         * @param WP_Query $query
         * @return String[]
         */
        private function tax_post_types_from_query($query)
        {
        }
        private function tax_types_join($join, $tax_post_types)
        {
        }
        /**
         * @param WP_Query $query
         *
         * @return String[]
         */
        private function get_tax_query_posttype($query)
        {
        }
        /**
         * @param string|string[] $post_types
         *
         * @return bool true if non of the input post types are translatable
         */
        private function posttypes_not_translated($post_types)
        {
        }
        private function all_langs_where()
        {
        }
        private function specific_lang_where($current_language, $fallback_language)
        {
        }
        private function display_as_translated_snippet($current_language, $fallback_language)
        {
        }
        /**
         * @param WP_Query $query
         *
         * @return bool
         */
        private function where_filter_active($query)
        {
        }
        private function is_media_and_cant_be_translated($post_type)
        {
        }
        /**
         * Checks if the comment query applies to posts that are of a translated type.
         *
         * @param WP_Comment_Query $comment_query
         * @return bool
         */
        private function is_comment_query_filtered($comment_query)
        {
        }
        /**
         * Adds a join with the posts table to the query only if necessary because the comment query is not filtered
         * by post variables
         *
         * @param WP_Comment_Query $comment_query
         * @return string
         */
        private function get_comment_query_join($comment_query)
        {
        }
        /**
         * @param $requested_id
         *
         * @return bool|mixed|null|string
         */
        private function get_current_language($requested_id)
        {
        }
    }
    /**
     * Created by PhpStorm.
     * User: bruce
     * Date: 27/10/17
     * Time: 4:28 PM
     */
    class WPML_Language_Where_Clause
    {
        /** @var SitePress $sitepress */
        private $sitepress;
        /** @var wpdb $wpdb */
        private $wpdb;
        /** @var WPML_Display_As_Translated_Posts_Query $display_as_translated_query */
        private $display_as_translated_query;
        public function __construct(\SitePress $sitepress, \wpdb $wpdb, \WPML_Display_As_Translated_Posts_Query $display_as_translated_query)
        {
        }
        public function get($post_type)
        {
        }
    }
    /**
     * Class WPML_Query_Utils
     *
     * @package wpml-core
     */
    class WPML_Query_Utils
    {
        /** @var wpdb $wpdb */
        private $wpdb;
        /** @var WPML_WP_API */
        private $wp_api;
        /** @var array $display_as_translated_post_types */
        private $display_as_translated_post_types;
        /**
         * WPML_Query_Utils constructor.
         *
         * @param wpdb $wpdb
         * @param WPML_WP_API $wp_api
         * @param array $display_as_translated_post_types
         */
        public function __construct(\wpdb $wpdb, \WPML_WP_API $wp_api, $display_as_translated_post_types)
        {
        }
        /**
         * Returns the number of posts for a given post_type, author and language combination that is published.
         *
         * @param array|string $post_type
         * @param WP_User      $author_data
         * @param string       $lang language code to check
         * @param string       $fallback_lang
         *
         * @return bool
         *
         * @used-by \WPML_Languages::add_author_url_to_ls_lang to determine what languages to show in the Language Switcher
         */
        public function author_query_has_posts($post_type, $author_data, $lang, $fallback_lang)
        {
        }
        /**
         * Returns the number of posts for a given post_type, date and language combination that is published.
         *
         * @param string       $lang language code to check
         * @param string       $fallback_lang
         * @param null|int     $year
         * @param null|int     $month
         * @param null|int     $day
         * @param string|array $post_type
         *
         * @return bool
         *
         * @used-by \WPML_Languages::add_date_or_cpt_url_to_ls_lang to determine what languages to show in the Language Switcher
         */
        public function archive_query_has_posts($lang, $fallback_lang, $year = \null, $month = \null, $day = \null, $post_type = 'post')
        {
        }
        private function get_language_snippet($lang, $fallback_lang, $post_type)
        {
        }
    }
    class WPML_Display_As_Translated_Attachments_Query_Factory implements \IWPML_Frontend_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_Display_As_Translated_Taxonomy_Query extends \WPML_Display_As_Translated_Query
    {
        /** @var string $term_taxonomy_table */
        private $term_taxonomy_table;
        /**
         * WPML_Display_As_Translated_Posts_Query constructor.
         *
         * @param wpdb $wpdb
         * @param string $term_taxonomy_table_alias
         */
        public function __construct(\wpdb $wpdb, $term_taxonomy_table_alias = \null)
        {
        }
        /**
         * If "display as translated" mode is enabled, we check whether a category has some assigned posts or
         * its equivalent in the default language.
         *
         * @param array $clauses
         * @param string $default_lang
         *
         * @return array
         */
        public function update_count($clauses, $default_lang)
        {
        }
        private function update_count_in_fields($fields, $default_lang)
        {
        }
        private function update_count_in_where($where, $default_lang)
        {
        }
        /**
         * @param array $content_types
         *
         * @return string
         */
        protected function get_content_types_query($taxonomies)
        {
        }
        /**
         * @param string $language
         *
         * @return string
         */
        protected function get_query_for_translation_not_published($language)
        {
        }
    }
    /**
     * Class WPML_Term_Clauses
     */
    class WPML_Term_Clauses
    {
        /** @var SitePress $sitepress */
        private $sitepress;
        /** @var wpdb $wpdb */
        private $wpdb;
        /** @var WPML_Display_As_Translated_Taxonomy_Query $display_as_translated_query */
        private $display_as_translated_query;
        /** @var WPML_Debug_BackTrace $debug_backtrace */
        private $debug_backtrace;
        /** @var array  */
        private $cache = \null;
        /**
         * WPML_Term_Clauses constructor.
         *
         * @param SitePress                                 $sitepress
         * @param wpdb                                      $wpdb
         * @param WPML_Display_As_Translated_Taxonomy_Query $display_as_translated_query
         * @param WPML_Debug_BackTrace                      $debug_backtrace
         */
        public function __construct(\SitePress $sitepress, \wpdb $wpdb, \WPML_Display_As_Translated_Taxonomy_Query $display_as_translated_query, \WPML_Debug_BackTrace $debug_backtrace)
        {
        }
        /**
         * @param array $clauses
         * @param array $taxonomies
         * @param array $args
         *
         * @return array
         */
        public function filter($clauses, $taxonomies, $args)
        {
        }
        /**
         * @return string|void
         */
        private function get_where_lang()
        {
        }
        /**
         * @param array $clauses
         *
         * @return array
         */
        private function maybe_apply_count_adjustment($clauses)
        {
        }
        /**
         * @param string $current_language
         * @param string $fallback_language
         *
         * @return string
         */
        private function get_display_as_translated_snippet($current_language, $fallback_language)
        {
        }
        /**
         * @return bool
         */
        private function should_apply_display_as_translated_adjustments()
        {
        }
        /**
         * @return array
         */
        private function get_display_as_translated_taxonomies()
        {
        }
    }
    class WPML_Display_As_Translated_Tax_Query_Factory implements \IWPML_Frontend_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_Get_Page_By_Path
    {
        /** @link https://onthegosystems.myjetbrains.com/youtrack/issue/wpmlcore-4918 */
        const BEFORE_REMOVE_PLACEHOLDER_ESCAPE_PRIORITY = -1;
        /** @var wpdb $wpdb */
        private $wpdb;
        /** @var SitePress $sitepress */
        private $sitepress;
        /** @var WPML_Debug_BackTrace $debug_backtrace */
        private $debug_backtrace;
        /** @var string $language */
        private $language;
        /** @var string $post_type */
        private $post_type;
        public function __construct(\wpdb $wpdb, \SitePress $sitepress, \WPML_Debug_BackTrace $debug_backtrace)
        {
        }
        public function get($page_name, $lang, $output = \OBJECT, $post_type = 'page')
        {
        }
        public function get_page_by_path_filter($query)
        {
        }
        /**
         * @param string $page_name
         * @param string $post_type
         *
         * @see get_page_by_path where the cache key is built
         */
        private function clear_cache($page_name, $post_type)
        {
        }
    }
    class WPML_Display_As_Translated_Tax_Query implements \IWPML_Action
    {
        // Regex to find the term query.
        // eg. term_taxonomy_id IN (8)
        // We then add the fallback term to the query
        // eg. term_taxonomy_id IN (8,9)
        const TERM_REGEX = '/term_taxonomy_id\\s+(IN|in)\\s*\\(([^\\)]+)\\)/';
        /** @var SitePress $sitepress */
        private $sitepress;
        /** @var WPML_Term_Translation $term_translation */
        private $term_translation;
        public function __construct(\SitePress $sitepress, \WPML_Term_Translation $term_translation)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param string $where
         * @param WP_Query $q
         *
         * @return string
         */
        public function posts_where_filter($where, \WP_Query $q)
        {
        }
        /**
         * @return bool
         */
        private function is_not_the_default_language()
        {
        }
        /**
         * @param WP_Query $q
         *
         * @return bool
         */
        private function is_taxonomy_archive(\WP_Query $q)
        {
        }
        /**
         * @param WP_Query $q
         *
         * @return array
         */
        private function get_linked_post_types(\WP_Query $q)
        {
        }
        /**
         * @param array $post_types
         *
         * @return bool
         */
        private function is_display_as_translated_mode($post_types)
        {
        }
        /**
         * @param string $where
         *
         * @return array
         */
        private function find_terms($where)
        {
        }
        /**
         * @param array $terms
         *
         * @return array
         */
        private function get_fallback_terms($terms)
        {
        }
        /**
         * @param string   $where
         * @param array    $fallback_terms
         * @param WP_Query $q
         *
         * @return string
         */
        private function add_fallback_terms_to_where_clause($where, $fallback_terms, \WP_Query $q)
        {
        }
        /**
         * @param string   $terms_string
         * @param array    $fallback_terms
         * @param WP_Query $q
         *
         * @return string
         */
        private function add_fallback_terms($terms_string, $fallback_terms, \WP_Query $q)
        {
        }
        private function include_term_children(\WP_Query $q)
        {
        }
    }
    /**
     * Class WPML_Query_Parser
     *
     * @since 3.2.3
     */
    class WPML_Query_Parser
    {
        /** @var  WPML_Post_Translation $post_translations */
        protected $post_translations;
        /** @var  WPML_Term_Translation $post_translations */
        protected $term_translations;
        /** @var SitePress $sitepress */
        protected $sitepress;
        /** @var WPDB $wpdb */
        public $wpdb;
        /** @var WPML_Query_Filter $query_filter */
        private $query_filter;
        /**
         * @param SitePress         $sitepress
         * @param WPML_Query_Filter $query_filter
         */
        public function __construct($sitepress, $query_filter)
        {
        }
        /**
         * @param WP_Query $q
         * @param string $lang
         *
         * @return WP_Query
         */
        private function adjust_default_taxonomies_query_vars($q, $lang)
        {
        }
        /**
         * @param WP_Query $q
         * @param string   $key
         * @param string   $type
         *
         * @return array
         */
        private function parse_scalar_values_in_query_vars($q, $key, $type)
        {
        }
        /**
         * @param array  $values
         * @param string $type
         * @param string $taxonomy
         * @param string $lang
         *
         * @return array
         */
        private function translate_term_values($values, $type, $taxonomy, $lang)
        {
        }
        /**
         * @param string $slug
         * @param string $taxonomy
         * @param string $lang
         *
         * @return null|string
         */
        private function translate_term_slug($slug, $taxonomy, $lang)
        {
        }
        /**
         * @param WP_Query $q
         * @param string   $key
         * @param array    $translated_values
         * @param string   $glue
         *
         * @return WP_Query
         */
        private function replace_query_vars_value($q, $key, $translated_values, $glue)
        {
        }
        /**
         * @param WP_Query $q
         *
         * @return WP_Query
         */
        private function adjust_taxonomy_query($q)
        {
        }
        /**
         * Recursive method to allow conversion of nested conditions
         *
         * @param array $conditions
         *
         * @return array
         */
        private function adjust_tax_query_conditions($conditions)
        {
        }
        /**
         * @param WP_Query $q
         * @param string $current_lang
         *
         * @return mixed
         */
        private function maybe_redirect_to_translated_taxonomy($q, $current_lang)
        {
        }
        private function get_query_taxonomy_term_slugs(\WP_Query $q)
        {
        }
        /**
         * @param WP_Query $q
         *
         * @return WP_Query
         */
        function parse_query($q)
        {
        }
        /**
         * Adjust the parent post in the query in case we're dealing with a translated
         * post type.
         *
         * @param WP_Query        $q
         * @param string|string[] $post_type
         * @param string          $current_language
         *
         * @return WP_Query  mixed
         */
        private function maybe_adjust_parent($q, $post_type, $current_language)
        {
        }
        /**
         * Tries to transform certain queries from "by name" querying to "by ID" to overcome WordPress Core functionality
         * for resolving names not being filtered by language
         *
         * @param WP_Query $q
         *
         * @return WP_Query
         */
        private function maybe_adjust_name_var($q)
        {
        }
        private function adjust_query_ids($q, $index)
        {
        }
        private function adjust_q_var_pids($q, $post_types, $index)
        {
        }
        /**
         * @param int $post_id
         * @param WP_Query $q
         *
         * @return false|string redirect target url if redirect is needed, false otherwise
         */
        private function is_redirected($post_id, $q)
        {
        }
        private function is_permalink_part_of_request($permalink, $request_uri)
        {
        }
        private function get_translated_post($element_id, $current_language)
        {
        }
    }
    /**
     * Class WPML_Attachments_Urls_With_Identical_Slugs_Factory
     *
     * @link https://onthegosystems.myjetbrains.com/youtrack/issue/wpmlcore-4700
     */
    class WPML_Attachments_Urls_With_Identical_Slugs_Factory implements \IWPML_Frontend_Action_Loader, \IWPML_Deferred_Action_Loader
    {
        public function get_load_action()
        {
        }
        public function create()
        {
        }
    }
    /**
     * Class WPML_404_Guess
     *
     * @package    wpml-core
     * @subpackage post-translation
     *
     * @since      3.2.3
     */
    class WPML_404_Guess extends \WPML_Slug_Resolution
    {
        /** @var  WPML_Query_Filter $query_filter */
        private $query_filter;
        /**
         * @param wpdb              $wpdb
         * @param SitePress         $sitepress
         * @param WPML_Query_Filter $query_filter
         */
        public function __construct(&$wpdb, &$sitepress, &$query_filter)
        {
        }
        /**
         * Attempts to guess the correct URL based on query vars
         *
         * @since 3.2.3
         *
         * @param string   $name
         * @param WP_Query $query
         *
         * @return array containing most likely name, type and whether or not a match was found
         */
        public function guess_cpt_by_name($name, $query)
        {
        }
        /**
         * Query the database to find the post type
         *
         * @param string $name
         * @param string $type
         * @param array $types
         * @param string $date_snippet
         *
         * @return array
         */
        private function find_post_type($name, $type, $types, $date_snippet)
        {
        }
        /**
         * Retrieves year, month and day parameters from the query if they are set and builds the appropriate sql
         * snippet to filter for them.
         *
         * @param WP_Query $query
         *
         * @return string
         */
        private function by_date_snippet($query)
        {
        }
        /**
         * @param bool $has_date
         *
         * @return string
         */
        private function order_by_language_snippet($has_date)
        {
        }
        /**
         *
         * @return string
         */
        private function order_by_post_type_snippet()
        {
        }
    }
    /**
     * Class WPML_Term_Adjust_Id
     */
    class WPML_Term_Adjust_Id
    {
        /** @var WPML_Debug_BackTrace */
        private $debug_backtrace;
        /** @var WPML_Term_Translation */
        private $term_translation;
        /** @var WPML_Post_Translation */
        private $post_translation;
        /** @var SitePress */
        private $sitepress;
        /**
         * WPML_Term_Adjust_Id constructor.
         *
         * @param WPML_Debug_BackTrace  $debug_backtrace
         * @param WPML_Term_Translation $term_translation
         * @param WPML_Post_Translation $post_translation
         * @param SitePress             $sitepress
         */
        public function __construct(\WPML_Debug_BackTrace $debug_backtrace, \WPML_Term_Translation $term_translation, \WPML_Post_Translation $post_translation, \SitePress $sitepress)
        {
        }
        /**
         * @param WP_Term $term
         * @param boolean $adjust_id_url_filter_off
         *
         * @return WP_Term
         */
        public function filter(\WP_Term $term, $adjust_id_url_filter_off)
        {
        }
        /**
         * @return bool
         */
        private function is_ajax_add_term_translation()
        {
        }
    }
    class WPML_Term_Query_Filter
    {
        /** @var WPML_Term_Translation $term_translation */
        private $term_translation;
        /** @var WPML_Debug_BackTrace $debug_backtrace */
        private $debug_backtrace;
        /** @var wpdb $wpdb */
        private $wpdb;
        /** @var IWPML_Taxonomy_State $taxonomy_state */
        private $taxonomy_state;
        /** @var string $current_language */
        private $current_language;
        /** @var string $default_language */
        private $default_language;
        /** @var bool $lock */
        private $lock;
        /**
         * WPML_Term_query_Filter constructor.
         *
         * @param WPML_Term_Translation $term_translation
         * @param WPML_Debug_BackTrace  $debug_backtrace
         * @param wpdb                  $wpdb
         * @param IWPML_Taxonomy_State  $taxonomy_state
         */
        public function __construct(\WPML_Term_Translation $term_translation, \WPML_Debug_BackTrace $debug_backtrace, \wpdb $wpdb, \IWPML_Taxonomy_State $taxonomy_state)
        {
        }
        /** @param string $current_language */
        /** @param string $default_language */
        public function set_lang($current_language, $default_language)
        {
        }
        /**
         * @param array $args
         * @param array $taxonomies
         *
         * @return array
         */
        public function get_terms_args_filter($args, $taxonomies)
        {
        }
        /**
         * @param string|array $terms_ids
         * @param bool         $orderByTermId
         *
         * @return array
         */
        private function adjust_taxonomies_terms_ids($terms_ids, $orderByTermId)
        {
        }
        /**
         * @param array $args
         * @param array $taxonomies
         *
         * @return array
         */
        private function adjust_taxonomies_terms_slugs($args, array $taxonomies)
        {
        }
        /**
         * @param array $ids
         * @param bool  $orderByTermId
         *
         * @return stdClass[]
         */
        private function get_terms($ids, $orderByTermId)
        {
        }
        /**
         * @param string $slug
         * @param array  $taxonomies
         *
         * @return null|WP_Term
         */
        private function guess_term($slug, array $taxonomies)
        {
        }
        /**
         * @param string|array $source
         *
         * @return array
         */
        private function explode_and_trim($source)
        {
        }
    }
    /**
     * Created by PhpStorm.
     * User: bruce
     * Date: 26/10/17
     * Time: 5:36 PM
     */
    class WPML_Archives_Query_Factory implements \IWPML_Frontend_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_DB_Chunk
    {
        /**
         * @var wpdb
         */
        private $wpdb;
        /**
         * @var int
         */
        private $chunk_size;
        /**
         * @param wpdb $wpdb
         * @param int $chunk_size
         */
        public function __construct(\wpdb $wpdb, $chunk_size = 1000)
        {
        }
        /**
         * @param string $query
         * @param array $args
         * @param int $elements_num
         *
         * @return array
         *
         * @throws \InvalidArgumentException
         */
        public function retrieve($query, $args, $elements_num)
        {
        }
        /**
         * @param string $query
         */
        private function validate_query($query)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Main_Admin_Menu
    {
        const MENU_ORDER_LANGUAGES = 100;
        const MENU_ORDER_THEMES_AND_PLUGINS_LOCALIZATION = 200;
        const MENU_ORDER_TAXONOMY_TRANSLATION = 900;
        const MENU_ORDER_SETTINGS = 9900;
        const MENU_ORDER_MAX = 10000;
        /** @var string */
        private $languages_menu_slug;
        /**
         * @var WPML_Admin_Menu_Root
         */
        private $root;
        /**
         * @var SitePress
         */
        private $sitepress;
        /**
         * WPML_Menu_Main constructor.
         *
         * @param SitePress $sitepress
         *
         * @throws \InvalidArgumentException
         */
        public function __construct(\SitePress $sitepress)
        {
        }
        /**
         * @throws \InvalidArgumentException
         */
        public function configure()
        {
        }
        /**
         * @throws \InvalidArgumentException
         */
        private function languages()
        {
        }
        /**
         * @return bool
         */
        private function is_wpml_setup_completed()
        {
        }
        /**
         * @throws \InvalidArgumentException
         */
        private function themes_and_plugins_localization()
        {
        }
        /**
         * @return bool
         */
        private function is_tm_active()
        {
        }
        /**
         * @throws \InvalidArgumentException
         */
        private function translation_options()
        {
        }
        /**
         * @throws \InvalidArgumentException
         */
        private function taxonomy_translation()
        {
        }
        /**
         * @throws \InvalidArgumentException
         */
        private function support()
        {
        }
        /**
         * @param $parent
         *
         * @throws \InvalidArgumentException
         */
        private function troubleshooting_menu($parent)
        {
        }
        /**
         * @param $parent
         *
         * @throws \InvalidArgumentException
         */
        private function debug_information_menu($parent)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Admin_Menu_Item
    {
        private $capability;
        private $function;
        private $menu_slug;
        private $menu_title;
        private $order;
        private $page_title;
        private $parent_slug;
        /**
         * WPML_Menu_Item constructor.
         *
         * @param array $args
         *
         * @throws \InvalidArgumentException
         */
        public function __construct(array $args = \null)
        {
        }
        /**
         * Required by `usort` to remove duplicates, as casts array elements to string
         * @return string
         */
        public function __toString()
        {
        }
        public function build($root_slug)
        {
        }
        /**
         * @return mixed
         */
        public function get_parent_slug()
        {
        }
        /**
         * @param mixed $parent_slug
         */
        public function set_parent_slug($parent_slug)
        {
        }
        /**
         * @return mixed
         */
        public function get_page_title()
        {
        }
        /**
         * @param mixed $page_title
         */
        public function set_page_title($page_title)
        {
        }
        /**
         * @return mixed
         */
        public function get_menu_title()
        {
        }
        /**
         * @param mixed $menu_title
         */
        public function set_menu_title($menu_title)
        {
        }
        /**
         * @return mixed
         */
        public function get_capability()
        {
        }
        /**
         * @param mixed $capability
         */
        public function set_capability($capability)
        {
        }
        /**
         * @return mixed
         */
        public function get_menu_slug()
        {
        }
        /**
         * @param mixed $menu_slug
         */
        public function set_menu_slug($menu_slug)
        {
        }
        /**
         * @return mixed
         */
        public function get_function()
        {
        }
        /**
         * @param mixed $function
         */
        public function set_function($function)
        {
        }
        /**
         * @return mixed
         */
        public function get_order()
        {
        }
        /**
         * @param mixed $order
         */
        public function set_order($order)
        {
        }
        /**
         * @return string
         */
        private function serialize()
        {
        }
    }
    class WPML_Admin_Menu_Root
    {
        private $capability;
        private $function;
        private $icon_url;
        private $items = array();
        private $menu_id;
        private $menu_title;
        private $page_title;
        private $position;
        /**
         * WPML_Menu_Root constructor.
         *
         * @param array|null $args
         *
         * @throws \InvalidArgumentException
         */
        public function __construct(array $args = \null)
        {
        }
        public function build()
        {
        }
        private function adjust_items()
        {
        }
        /**
         * @return string
         */
        public function get_menu_slug()
        {
        }
        /**
         * @return string
         */
        public function get_page_title()
        {
        }
        /**
         * @param string $page_title
         */
        public function set_page_title($page_title)
        {
        }
        /**
         * @return string
         */
        public function get_menu_id()
        {
        }
        /**
         * @return string
         */
        public function get_menu_title()
        {
        }
        /**
         * @param string $menu_title
         */
        public function set_menu_title($menu_title)
        {
        }
        /**
         * @return string
         */
        public function get_capability()
        {
        }
        /**
         * @param string $capability
         */
        public function set_capability($capability)
        {
        }
        /**
         * @return null|callable
         */
        public function get_function()
        {
        }
        /**
         * @param null|callable $function
         */
        public function set_function($function)
        {
        }
        /**
         * @return string
         */
        public function get_icon_url()
        {
        }
        /**
         * @param string $icon_url
         */
        public function set_icon_url($icon_url)
        {
        }
        /**
         * @return array
         */
        public function get_items()
        {
        }
        /**
         * @return int
         */
        public function get_position()
        {
        }
        /**
         * @param int $position
         */
        public function set_position($position)
        {
        }
        public function init_hooks()
        {
        }
        /**
         * @param WPML_Admin_Menu_Item $item
         *
         * @return WPML_Admin_Menu_Item
         */
        public function menu_order_fixer(\WPML_Admin_Menu_Item $item)
        {
        }
        /**
         * @param WPML_Admin_Menu_Item $a
         * @param WPML_Admin_Menu_Item $b
         *
         * @return int
         */
        public function menu_order_sorter(\WPML_Admin_Menu_Item $a, \WPML_Admin_Menu_Item $b)
        {
        }
        /**
         * @param WPML_Admin_Menu_Item|array $item
         *
         * @throws \InvalidArgumentException
         */
        public function register_menu_item($item)
        {
        }
        public function add_item(\WPML_Admin_Menu_Item $item)
        {
        }
    }
    class WPML_Twig_WP_Plugin_Extension extends \WPML\Core\Twig_Extension
    {
        /**
         * Returns the name of the extension.
         * @return string The extension name
         */
        public function getName()
        {
        }
        public function getFilters()
        {
        }
        public function wp_do_action_filter($tag)
        {
        }
    }
    /**
     * Use this class as parent class for translatable elements in WPML,
     * to have a common approach for retrieving and setting translation information.
     * @author OnTheGo Systems
     */
    abstract class WPML_Translation_Element extends \WPML_SP_User
    {
        /** @var int */
        protected $id;
        /** @var stdClass */
        private $languages_details;
        /** @var array */
        private $element_translations;
        /** @var WPML_WP_Cache */
        protected $wpml_cache;
        /**
         * WPML_Translation_Element constructor.
         *
         * @param int           $id
         * @param SitePress     $sitepress
         * @param WPML_WP_Cache $wpml_cache
         */
        public function __construct($id, \SitePress $sitepress, \WPML_WP_Cache $wpml_cache = \null)
        {
        }
        public function get_id()
        {
        }
        public function get_source_language_code()
        {
        }
        /**
         * @return stdClass
         * @throws \UnexpectedValueException
         */
        protected function get_language_details()
        {
        }
        abstract function get_element_id();
        abstract function get_wpml_element_type();
        /**
         * @return array
         */
        private function get_element_translations()
        {
        }
        /**
         * @param string $language_code
         *
         * @return WPML_Translation_Element|null
         * @throws \InvalidArgumentException
         */
        public function get_translation($language_code)
        {
        }
        /**
         * @return WPML_Translation_Element[]
         */
        public function get_translations()
        {
        }
        /**
         * @return WPML_Translation_Element[]
         */
        public function maybe_init_translations()
        {
        }
        public function get_trid()
        {
        }
        /**
         * @return string|WP_Error
         */
        function get_wp_element_type()
        {
        }
        /**
         * @return mixed|WP_Error
         */
        abstract function get_wp_object();
        /**
         * @param mixed $element
         *
         * @return string
         */
        abstract function get_type($element = \null);
        /**
         * @param null|stdClass $element_data null, or a standard object containing at least the `translation_id`, `language_code`, `element_id`, `source_language_code`, `element_type`, and `original` properties.
         *
         * @return WPML_Translation_Element
         */
        abstract function get_new_instance($element_data);
        /**
         * @return null|WPML_Translation_Element
         */
        public function get_source_element()
        {
        }
        public function get_language_code()
        {
        }
        protected function init_language_details()
        {
        }
        public function flush_cache()
        {
        }
        /** @return bool */
        public function is_in_default_language()
        {
        }
        abstract function is_translatable();
        abstract function is_display_as_translated();
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Term_Element extends \WPML_Translation_Element
    {
        /** @var string Taxonomy name */
        protected $taxonomy;
        /**
         * WPML_Term_Element constructor.
         *
         * @param int           $id term_id of Term Element.
         * @param SitePress     $sitepress
         * @param string        $taxonomy
         * @param WPML_WP_Cache $wpml_cache
         */
        public function __construct($id, \SitePress $sitepress, $taxonomy = '', \WPML_WP_Cache $wpml_cache = \null)
        {
        }
        /**
         * @return array|null|WP_Error|WP_Term
         */
        public function get_wp_object()
        {
        }
        /**
         * @param WP_Term $term
         *
         * @return string
         */
        public function get_type($term = \null)
        {
        }
        public function get_wpml_element_type()
        {
        }
        public function get_element_id()
        {
        }
        /**
         * @param null|stdClass $element_data null, or a standard object containing at least the `translation_id`, `language_code`, `element_id`, `source_language_code`, `element_type`, and `original` properties.
         *
         * @return WPML_Term_Element
         * @throws \InvalidArgumentException Exception.
         */
        public function get_new_instance($element_data)
        {
        }
        public function is_translatable()
        {
        }
        public function is_display_as_translated()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Menu_Element extends \WPML_Term_Element
    {
        /**
         * WPML_Menu_Element constructor.
         *
         * @param int           $id
         * @param SitePress     $sitepress
         * @param WPML_WP_Cache $wpml_cache
         */
        public function __construct($id, \SitePress $sitepress, \WPML_WP_Cache $wpml_cache = \null)
        {
        }
        /**
         * @param stdClass $element_data standard object containing at least the `term_id` property.
         *
         * @return WPML_Menu_Element
         * @throws \InvalidArgumentException Exception.
         */
        public function get_new_instance($element_data)
        {
        }
    }
    /** NOTE:
     *  Use the $wpml_post_translations or $wpml_term_translations globals for posts and taxonomy
     *  They are more efficient
     */
    class WPML_Element_Type_Translation
    {
        /** @var WPDB $wpdb */
        private $wpdb;
        /** @var  WPML_Cache_Factory $cache_factory */
        private $cache_factory;
        /** @var  string $element_type */
        private $element_type;
        public function __construct(\WPDB $wpdb, \WPML_Cache_Factory $cache_factory, $element_type)
        {
        }
        function get_element_lang_code($element_id)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    interface WPML_Duplicable_Element
    {
    }
    class WPML_Translation_Element_Factory
    {
        const ELEMENT_TYPE_POST = 'Post';
        const ELEMENT_TYPE_TERM = 'Term';
        const ELEMENT_TYPE_MENU = 'Menu';
        /** @var SitePress */
        private $sitepress;
        /** @var WPML_WP_Cache */
        private $wpml_cache;
        /**
         * @param SitePress     $sitepress
         * @param WPML_WP_Cache $wpml_cache
         */
        public function __construct(\SitePress $sitepress, \WPML_WP_Cache $wpml_cache = \null)
        {
        }
        /**
         * @param int    $id
         * @param string $type any of `WPML_Translation_Element_Factory::ELEMENT_TYPE_POST`, `WPML_Translation_Element_Factory::ELEMENT_TYPE_TERM`, `WPML_Translation_Element_Factory::ELEMENT_TYPE_MENU`.
         *
         * @return WPML_Translation_Element
         * @throws InvalidArgumentException InvalidArgumentException.
         */
        public function create($id, $type)
        {
        }
        public function create_post($id)
        {
        }
        public function create_term($id)
        {
        }
        public function create_menu($id)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Post_Element extends \WPML_Translation_Element implements \WPML_Duplicable_Element
    {
        /**
         * @return WP_Post
         */
        function get_wp_object()
        {
        }
        /**
         * @param WP_Post $post
         *
         * @return string
         */
        function get_type($post = \null)
        {
        }
        public function get_wpml_element_type()
        {
        }
        function get_element_id()
        {
        }
        /**
         * @param null|stdClass $element_data null, or a standard object containing at least the `translation_id`, `language_code`, `element_id`, `source_language_code`, `element_type`, and `original` properties.
         *
         * @return WPML_Post_Element
         * @throws \InvalidArgumentException
         */
        function get_new_instance($element_data)
        {
        }
        function is_translatable()
        {
        }
        function is_display_as_translated()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Translations extends \WPML_SP_User
    {
        /** @var bool */
        public $skip_empty = \false;
        /** @var bool */
        public $all_statuses = \false;
        /** @var bool */
        public $skip_cache = \false;
        /** @var bool */
        public $skip_recursions = \false;
        private $duplicated_by = array();
        private $mark_as_duplicate_meta_key = '_icl_lang_duplicate_of';
        private $wpml_cache;
        /**
         * WPML_Translations constructor.
         *
         * @param SitePress     $sitepress
         * @param WPML_WP_Cache $wpml_cache
         */
        public function __construct(\SitePress $sitepress, \WPML_WP_Cache $wpml_cache = \null)
        {
        }
        /**
         * @param $trid
         * @param $wpml_element_type
         *
         * @return array|bool|false|mixed
         */
        public function get_translations($trid, $wpml_element_type)
        {
        }
        public function link_elements(\WPML_Translation_Element $source_translation_element, \WPML_Translation_Element $target_translation_element, $target_language = \null)
        {
        }
        public function set_source_element(\WPML_Translation_Element $element, \WPML_Translation_Element $source_element)
        {
        }
        private function elements_type_matches($element1, $element2)
        {
        }
        /**
         * @param WPML_Translation_Element $element
         * @param string                   $language_code
         */
        public function set_language_code(\WPML_Translation_Element $element, $language_code)
        {
        }
        /**
         * @param WPML_Translation_Element $element
         * @param int                      $trid
         *
         * @throws \UnexpectedValueException
         */
        public function set_trid(\WPML_Translation_Element $element, $trid)
        {
        }
        /**
         * @param WPML_Duplicable_Element|WPML_Translation_Element $duplicate
         * @param WPML_Duplicable_Element|WPML_Translation_Element $original
         *
         * @throws \UnexpectedValueException
         */
        public function make_duplicate_of(\WPML_Duplicable_Element $duplicate, \WPML_Duplicable_Element $original)
        {
        }
        /**
         * @param WPML_Duplicable_Element|WPML_Translation_Element $element
         *
         * @return WPML_Post_Element
         * @throws \InvalidArgumentException
         */
        public function is_a_duplicate_of(\WPML_Duplicable_Element $element)
        {
        }
        /**
         * @param WPML_Duplicable_Element|WPML_Translation_Element $element
         *
         * @return array
         * @throws \UnexpectedValueException
         * @throws \InvalidArgumentException
         */
        public function is_duplicated_by(\WPML_Duplicable_Element $element)
        {
        }
        /**
         * @param WPML_Translation_Element $element
         * @param string                   $argument_name
         *
         * @throws \UnexpectedValueException
         */
        private function validate_duplicable_element(\WPML_Translation_Element $element, $argument_name = 'element')
        {
        }
        /**
         * @param WPML_Translation_Element $element
         */
        private function init_cache_for_element(\WPML_Translation_Element $element)
        {
        }
        /**
         * @param $element_type
         * @param $sql_parts
         *
         * @return mixed
         */
        private function get_sql_parts_for_post($element_type, $sql_parts)
        {
        }
        /**
         * @return string
         */
        private function get_public_statuses()
        {
        }
        /**
         * @param $sql_parts
         *
         * @return mixed
         */
        private function get_sql_parts_for_taxonomy($sql_parts)
        {
        }
        /**
         * @param stdClass $translation
         *
         * @return bool
         */
        private function must_ignore_translation(\stdClass $translation)
        {
        }
        /**
         * @param stdClass $translation
         *
         * @return bool
         */
        private function must_ignore_translation_for_taxonomy(\stdClass $translation)
        {
        }
        /**
         * @param string $wpml_element_type
         *
         * @return int
         */
        private function wpml_element_type_is_taxonomy($wpml_element_type)
        {
        }
        /**
         * @param string $wpml_element_type
         *
         * @return bool
         */
        private function wpml_element_type_is_post($wpml_element_type)
        {
        }
    }
}
namespace WPML\UrlHandling {
    class WPLoginUrlConverterFactory implements \IWPML_Frontend_Action_Loader, \IWPML_Backend_Action_Loader
    {
        /**
         * @return WPLoginUrlConverter|null
         */
        public function create()
        {
        }
    }
}
namespace {
    class WPML_Endpoints_Support
    {
        const REGISTERED_ENDPOINTS_OPTION_KEY = 'wpml_registered_endpoints';
        const STRING_CONTEXT = 'WP Endpoints';
        /**
         * @var WPML_Post_Translation
         */
        private $post_translations;
        /**
         * @var string
         */
        private $current_language;
        /**
         * @var string
         */
        private $default_language;
        /**
         * @var bool
         */
        private $needs_page_reload;
        public function __construct(\WPML_Post_Translation $post_translations, $current_language, $default_language)
        {
        }
        public function add_hooks()
        {
        }
        public function add_endpoints_translations()
        {
        }
        /**
         * @param WP_Rewrite $wp_rewrite
         */
        public function register_rewrite_rules_strings(&$wp_rewrite)
        {
        }
        /**
         * @param WP_Rewrite $wp_rewrite
         */
        public function remove_endpoints_translations_from_rules(&$wp_rewrite)
        {
        }
        public function reload_page_after_rules_save($option)
        {
        }
        /**
         * @param string $key
         * @param string $endpoint
         * @param null|string $language
         * @param bool $register_endpoint_string
         *
         * @return string
         */
        public function get_endpoint_translation($key, $endpoint, $language = \null, $register_endpoint_string = \true)
        {
        }
        /**
         * @param string $key
         * @param string $endpoint
         */
        public function register_endpoint_string($key, $endpoint)
        {
        }
        /**
         * @param array $value
         *
         * @return array
         */
        public function translate_endpoints_in_rewrite_rules($value)
        {
        }
        /**
         * @param string $p
         * @param int $pid
         *
         * @return string
         */
        public function endpoint_permalink_filter($link, $pid)
        {
        }
        /**
         * @param string $endpoint
         * @param string $value
         * @param string $permalink
         * @param bool|string $page_lang
         *
         * @return string
         */
        public function get_endpoint_url($endpoint, $value = '', $permalink = '', $page_lang = \false)
        {
        }
        /**
         * @param string $url
         * @param array $data
         *
         * @return string
         */
        public function add_endpoint_to_current_ls_language_url($url, $data)
        {
        }
        /**
         * @return array
         */
        public function get_registered_endpoints()
        {
        }
        /**
         * @param string $language
         *
         * @return array
         */
        public function get_current_endpoint($language)
        {
        }
        /**
         * @param WP_Rewrite $wp_rewrite
         *
         * @return \WPML\Collect\Support\Collection
         */
        private function get_translated_endpoints($wp_rewrite)
        {
        }
    }
    class WPML_Include_Url extends \WPML_WPDB_User
    {
        private $unfiltered_home_url;
        private $requested_host;
        public function __construct(&$wpdb, $requested_host)
        {
        }
        public function filter_include_url($result)
        {
        }
        public function wpml_password_form_filter($form)
        {
        }
        /**
         * Returns the value of the unfiltered home option directly from the wp_options table.
         *
         * @return string
         */
        public function get_unfiltered_home()
        {
        }
    }
    class WPML_Lang_Domain_Filters
    {
        private $wpml_url_converter;
        private $wpml_wp_api;
        private $debug_backtrace;
        private $domains = array();
        /**
         * WPML_Lang_Domain_Filters constructor.
         *
         * @param $wpml_url_converter
         * @param $wpml_wp_api
         */
        public function __construct(\WPML_URL_Converter $wpml_url_converter, \WPML_WP_API $wpml_wp_api, \WPML_Debug_BackTrace $debug_backtrace)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param string $url
         *
         * @return string
         */
        public function convert_url($url)
        {
        }
        /**
         * @param array $upload_dir
         *
         * @return array
         */
        public function upload_dir_filter_callback($upload_dir)
        {
        }
        /**
         * @param string $url
         *
         * @return string
         */
        public function siteurl_callback($url)
        {
        }
        /**
         * @return string
         */
        private function get_host_from_HTTP_HOST()
        {
        }
        /**
         * @param string $host
         *
         * @return bool
         */
        private function is_host_valid($host)
        {
        }
        /**
         * @return array
         */
        private function get_domains()
        {
        }
        /**
         * @param string $url
         * @param string $path
         *
         * @return string
         */
        public function admin_url_filter($url, $path)
        {
        }
        /**
         * Convert logout url only for front-end.
         *
         * @param $logout_url
         *
         * @return string
         */
        public function convert_logout_url($logout_url)
        {
        }
    }
    class WPML_Tax_Permalink_Filters implements \IWPML_Action
    {
        /** @var WPML_Translation_Element_Factory */
        private $term_element_factory;
        /** @var WPML_URL_Converter */
        private $url_converter;
        /** @var WPML_WP_Cache_Factory $cache_factory */
        private $cache_factory;
        /** @var WPML_Get_LS_Languages_Status  */
        private $ls_languages_status;
        public function __construct(\WPML_URL_Converter $url_converter, \WPML_WP_Cache_Factory $cache_factory, \WPML_Translation_Element_Factory $term_element_factory, \WPML_Get_LS_Languages_Status $ls_language_status)
        {
        }
        public function add_hooks()
        {
        }
        public function cached_filter_tax_permalink($permalink, $tag, $taxonomy)
        {
        }
        /**
         * Filters the permalink pointing at a taxonomy archive to correctly reflect the language of its underlying term
         *
         * @param string $permalink url pointing at a term's archive
         * @param int $tag_id
         *
         * @return string
         */
        private function filter_tax_permalink($permalink, $tag_id)
        {
        }
        private function is_display_as_translated_and_in_default_lang(\WPML_Translation_Element $element)
        {
        }
        private function is_link_for_language_switcher()
        {
        }
    }
    class WPML_Tax_Permalink_Filters_Factory implements \IWPML_Frontend_Action_Loader, \IWPML_Backend_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_Lang_Parameter_Filters
    {
        public function add_hooks()
        {
        }
        public function request_filter($request)
        {
        }
        /**
         * Filters the pagination links on taxonomy archives to properly have the language parameter after the URI.
         *
         * @param string $url
         *
         * @return string
         */
        public function paginated_url_filter($url)
        {
        }
        /**
         * Filters the pagination links on paginated posts and pages, acting on the links html
         * output containing the anchor tag the link is a property of.
         *
         * @param string $link_html
         *
         * @return string
         *
         * @hook wp_link_pages_link
         */
        public function paginated_link_filter($link_html)
        {
        }
    }
    class WPML_URL_Converter_CPT
    {
        /**
         * @var WPML_Slash_Management
         */
        private $slash_helper;
        /**
         * @param WPML_Slash_Management $slash_helper
         */
        public function __construct(\WPML_Slash_Management $slash_helper = \null)
        {
        }
        /**
         * Adjusts the CPT archive slug for possible slug translations from ST.
         *
         * @param string $link
         * @param string $post_type
         * @param null|string $language_code
         *
         * @return string
         */
        public function adjust_cpt_slug_in_url($link, $post_type, $language_code = \null)
        {
        }
    }
    class WPML_URL_Converter
    {
        /**
         * @var IWPML_URL_Converter_Strategy
         */
        private $strategy;
        protected $default_language;
        protected $active_languages;
        /**
         * @var WPML_URL_Converter_Url_Helper
         */
        protected $home_url_helper;
        /**
         * @var WPML_URL_Converter_Lang_Param_Helper
         */
        protected $lang_param;
        /**
         * @var WPML_Slash_Management
         */
        protected $slash_helper;
        /**
         * @var WPML_Resolve_Object_Url_Helper
         */
        protected $object_url_helper;
        /**
         * @param IWPML_URL_Converter_Strategy $strategy
         * @param WPML_Resolve_Object_Url_Helper $object_url_helper
         * @param $default_language
         * @param $active_languages
         */
        public function __construct(\IWPML_URL_Converter_Strategy $strategy, \WPML_Resolve_Object_Url_Helper $object_url_helper, $default_language, $active_languages)
        {
        }
        public function get_strategy()
        {
        }
        /**
         * @param WPML_URL_Converter_Url_Helper $url_helper
         */
        public function set_url_helper(\WPML_URL_Converter_Url_Helper $url_helper)
        {
        }
        /**
         * @return WPML_URL_Converter_Url_Helper
         */
        public function get_url_helper()
        {
        }
        public function get_abs_home()
        {
        }
        /**
         * @param WPML_URL_Converter_Lang_Param_Helper $lang_param_helper
         */
        public function set_lang_param_helper(\WPML_URL_Converter_Lang_Param_Helper $lang_param_helper)
        {
        }
        /**
         * @param WPML_Slash_Management $slash_helper
         */
        public function set_slash_helper(\WPML_Slash_Management $slash_helper)
        {
        }
        public function get_default_site_url()
        {
        }
        /**
         * Scope of this function:
         * 1. Convert the home URL in the specified language depending on language negotiation:
         *    1. Add a language directory
         *    2. Change the domain
         *    3. Add a language parameter
         * 2. If the requested URL is equal to the current URL, the URI will be adapted
         * with potential slug translations for:
         *    - single post slugs
         *    - taxonomy term slug
         *
         * WARNING: The URI slugs won't be translated for arbitrary URL (not the current one)
         *
         * @param $url
         * @param bool $lang_code
         *
         * @return bool|mixed|string
         */
        public function convert_url($url, $lang_code = \false)
        {
        }
        /**
         * Takes a URL and returns the language of the document it points at
         *
         * @param string $url
         * @return string
         */
        public function get_language_from_url($url)
        {
        }
        /**
         * @param string $url
         * @param string $language
         *
         * @return string
         */
        public function get_home_url_relative($url, $language)
        {
        }
        /**
         * @param SitePress $sitepress
         *
         * @return WPLoginUrlConverter|null
         */
        public function get_wp_login_url_converter($sitepress)
        {
        }
        /**
         * @param string $url
         *
         * @return bool
         */
        private function can_resolve_object_url($url)
        {
        }
        /** @return WPML_URL_Converter */
        public static function getGlobalInstance()
        {
        }
    }
    class WPML_URL_Cached_Converter extends \WPML_URL_Converter
    {
        /** @var  string[] $cache */
        private $cache;
        /**
         * @param string      $url
         * @param string|bool $lang_code
         *
         * @return string
         */
        public function convert_url($url, $lang_code = \false)
        {
        }
        /**
         * @param string $url
         *
         * @return string
         */
        public function get_language_from_url($url)
        {
        }
    }
    class WPML_URL_Converter_Factory
    {
        /**
         * @var array
         */
        private $settings;
        /**
         * @var string
         */
        private $default_lang_code;
        /**
         * @var array
         */
        private $active_language_codes;
        /**
         * @var WPML_Resolve_Object_Url_Helper_Factory
         */
        private $object_url_helper_factory;
        const SUBDIR = 1;
        const DOMAIN = 2;
        /**
         * @param array $settings
         * @param string $default_lang_code
         * @param array $active_language_codes
         */
        public function __construct($settings, $default_lang_code, $active_language_codes)
        {
        }
        /**
         * @return WPML_Resolve_Object_Url_Helper_Factory
         */
        public function get_object_url_helper_factory()
        {
        }
        /**
         * @param WPML_Resolve_Object_Url_Helper_Factory $factory
         */
        public function set_object_url_helper_factory(\WPML_Resolve_Object_Url_Helper_Factory $factory)
        {
        }
        /**
         * @param int $url_type
         *
         * @return WPML_URL_Converter
         */
        public function create($url_type)
        {
        }
        /**
         * @return WPML_URL_Cached_Converter
         */
        private function create_subdir_converter()
        {
        }
        /**
         * @return WPML_URL_Cached_Converter
         */
        private function create_domain_converter()
        {
        }
        /**
         * @return WPML_URL_Cached_Converter
         */
        private function create_parameter_converter()
        {
        }
    }
    class WPML_Rewrite_Rules_Filter
    {
        /**
         * @var array
         */
        private $active_languages;
        /**
         * @var WPML_URL_Filters
         */
        private $wpml_url_filters;
        /**
         * @param array $active_languages
         * @param WPML_URL_Filters $wpml_url_filters
         */
        public function __construct($active_languages, $wpml_url_filters = \null)
        {
        }
        /**
         * @param string $htaccess_string Content of the .htaccess file
         *
         * @return string .htaccess file contents with adjusted RewriteBase
         */
        public function rid_of_language_param($htaccess_string)
        {
        }
        /**
         * Check if it is permalink page in admin.
         *
         * @return bool
         */
        private function is_permalink_page()
        {
        }
        /**
         * Check if it is WooCommerce shop page in admin.
         *
         * @return bool
         */
        private function is_shop_page()
        {
        }
        /**
         * Check if it as a certain screen on admin page.
         *
         * @param string $screen_id
         *
         * @return bool
         */
        private function is_admin_screen($screen_id)
        {
        }
    }
    class WPML_URL_Converter_Url_Helper
    {
        /**
         * @var wpdb
         */
        private $wpdb;
        /**
         * @var WPML_Include_Url
         */
        private $wpml_include_url_filter;
        /**
         * @var string
         */
        private $absolute_home;
        /**
         *
         * @param wpdb $wpdb
         * @param WPML_Include_Url $wpml_include_url_filter
         */
        public function __construct(\wpdb $wpdb = \null, \WPML_Include_Url $wpml_include_url_filter = \null)
        {
        }
        /**
         * Returns the unfiltered home_url by directly retrieving it from wp_options.
         *
         * @return string
         */
        public function get_abs_home()
        {
        }
        /**
         * Checks if a $url points to a WP Admin screen.
         *
         * @param string $url
         * @return bool True if the input $url points to an admin screen.
         */
        public function is_url_admin($url)
        {
        }
        /**
         * Returns the unfiltered home option from the database.
         *
         * @uses \WPML_Include_Url::get_unfiltered_home in case the $wpml_include_url_filter global is loaded
         *
         * @return string
         */
        public function get_unfiltered_home_option()
        {
        }
    }
    class WPML_URL_Converter_Lang_Param_Helper
    {
        /**
         * @var array
         */
        private static $cache = array();
        /**
         * @var array
         */
        private $active_languages;
        /**
         * @param array $active_languages
         */
        public function __construct(array $active_languages)
        {
        }
        /**
         *
         * @param string $url
         * @param bool   $only_admin If set to true only language parameters on Admin Screen URLs will be recognized. The
         *                           function will return null for non-Admin Screens.
         *
         * @return null|string Language code
         */
        public function lang_by_param($url, $only_admin = \true)
        {
        }
        /**
         * @param string $url
         * @param bool $only_admin
         *
         * @return string|null
         */
        private function extract_lang_param_from_url($url, $only_admin)
        {
        }
        /**
         * @param bool $only_admin
         * @param array $url_query_parts
         *
         * @return bool
         */
        private function has_query_part($only_admin, $url_query_parts)
        {
        }
        /**
         * @param bool $only_admin
         * @param array $vars
         *
         * @return bool
         */
        private function can_retrieve_lang_from_query($only_admin, $vars)
        {
        }
    }
    interface IWPML_URL_Converter_Strategy
    {
        public function convert_url_string($source_url, $lang);
        public function convert_admin_url_string($source_url, $lang);
        public function validate_language($language, $url);
        public function get_lang_from_url_string($url);
        public function get_home_url_relative($url, $lang);
        public function fix_trailingslashit($source_url);
        public function skip_convert_url_string($url, $lang_code);
        public function use_wp_login_url_converter();
    }
    abstract class WPML_URL_Converter_Abstract_Strategy implements \IWPML_URL_Converter_Strategy
    {
        protected $absolute_home;
        protected $default_language;
        protected $active_languages;
        protected $cache;
        /**
         * @var WPML_URL_Converter_Url_Helper
         */
        protected $url_helper;
        /**
         * @var WPML_URL_Converter_Lang_Param_Helper
         */
        protected $lang_param;
        /**
         * @var WPML_Slash_Management
         */
        protected $slash_helper;
        /**
         * @var WP_Rewrite
         */
        protected $wp_rewrite;
        /**
         * @param $default_language
         * @param $active_languages
         * @param WP_Rewrite $wp_rewrite
         */
        public function __construct($default_language, $active_languages, $wp_rewrite = \null)
        {
        }
        public function validate_language($language, $url)
        {
        }
        /**
         * @param WPML_URL_Converter_Url_Helper $url_helper
         */
        public function set_url_helper(\WPML_URL_Converter_Url_Helper $url_helper)
        {
        }
        /**
         * @return WPML_URL_Converter_Url_Helper
         */
        public function get_url_helper()
        {
        }
        /**
         * @param WPML_URL_Converter_Lang_Param_Helper $lang_param
         */
        public function set_lang_param(\WPML_URL_Converter_Lang_Param_Helper $lang_param)
        {
        }
        /**
         * @param WPML_Slash_Management $slash_helper
         */
        public function set_slash_helper(\WPML_Slash_Management $slash_helper)
        {
        }
        private function get_default_language()
        {
        }
        public function fix_trailingslashit($source_url)
        {
        }
        public function skip_convert_url_string($source_url, $lang_code)
        {
        }
        public function use_wp_login_url_converter()
        {
        }
    }
    class WPML_URL_Converter_Parameter_Strategy extends \WPML_URL_Converter_Abstract_Strategy
    {
        public function get_lang_from_url_string($url)
        {
        }
        public function convert_url_string($source_url, $lang_code)
        {
        }
        public function convert_admin_url_string($source_url, $lang)
        {
        }
        /**
         * @param array $url_parts
         *
         * @return array
         */
        private function get_query_args(array $url_parts)
        {
        }
        /**
         * @param string $url
         * @param string $language
         *
         * @return string
         */
        public function get_home_url_relative($url, $language)
        {
        }
        /**
         * @param string $source_url
         *
         * @return string
         */
        public function fix_trailingslashit($source_url)
        {
        }
        public function use_wp_login_url_converter()
        {
        }
    }
    class WPML_URL_Converter_Subdir_Strategy extends \WPML_URL_Converter_Abstract_Strategy
    {
        /** @var bool */
        private $use_directory_for_default_lang;
        /** @var array copy of $sitepress->get_settings( 'urls' ) */
        private $urls_settings;
        /** @var string|bool */
        private $root_url;
        /** @var array map of wpml codes to custom codes*/
        private $language_codes_map;
        private $language_codes_reverse_map;
        /** @var bool */
        private $is_rest_request;
        /**
         * @param bool   $use_directory_for_default_lang
         * @param string $default_language
         * @param array  $active_languages
         * @param array  $urls_settings
         */
        public function __construct($use_directory_for_default_lang, $default_language, $active_languages, $urls_settings)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param string $url
         *
         * @return string
         */
        public function convertRestUrl($url)
        {
        }
        public function get_lang_from_url_string($url)
        {
        }
        public function validate_language($language, $url)
        {
        }
        public function convert_url_string($source_url, $code)
        {
        }
        public function convert_admin_url_string($source_url, $lang)
        {
        }
        /**
         * @param string $url
         * @param string $language
         *
         * @return string
         */
        public function get_home_url_relative($url, $language)
        {
        }
        public function use_wp_login_url_converter()
        {
        }
        /**
         * Will return true if root URL or child of root URL
         *
         * @param string $url
         *
         * @return bool
         */
        private function is_root_url($url)
        {
        }
        /**
         * @return string|bool
         */
        private function get_root_url()
        {
        }
        /**
         * @param string $source_url
         *
         * @return string
         */
        private function filter_source_url($source_url)
        {
        }
        /**
         * @param $url
         *
         * @return string
         */
        private function get_url_path($url)
        {
        }
        /**
         * @param string $url_path
         *
         * @return string
         */
        private function extract_lang_from_url_path($url_path)
        {
        }
        /**
         * @param string      $language_code
         * @param null|string $value_if_default_language
         *
         * @return string|null
         */
        private function get_language_of_current_dir($language_code, $value_if_default_language = \null)
        {
        }
    }
    class WPML_URL_Converter_Domain_Strategy extends \WPML_URL_Converter_Abstract_Strategy
    {
        /** @var string[] $domains */
        private $domains = array();
        /**
         * @param array       $domains
         * @param string      $default_language
         * @param array       $active_languages
         */
        public function __construct($domains, $default_language, $active_languages)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * Filter REST url to avoid CORS error in Gutenberg.
         * https://onthegosystems.myjetbrains.com/youtrack/issue/wpmlcore-7022
         *
         * @param string $url     REST URL.
         * @param string $path    REST route.
         * @param int    $blog_id Blog ID.
         * @param string $scheme  Sanitization scheme.
         *
         * @return mixed|void
         */
        public function convertRestUrlToCurrentDomain($url, $path, $blog_id, $scheme)
        {
        }
        public function get_lang_from_url_string($url)
        {
        }
        public function convert_url_string($source_url, $lang)
        {
        }
        public function convert_admin_url_string($source_url, $lang)
        {
        }
        private function convert_url($source_url, $lang)
        {
        }
        /**
         * @param string $base_url
         *
         * @return array
         */
        private function parse_domain_and_subdir($base_url)
        {
        }
        /**
         * @param string $url
         * @param string $language
         *
         * @return string
         */
        public function get_home_url_relative($url, $language)
        {
        }
        /**
         * @param string $url
         *
         * @return array|string
         */
        private function strip_protocol($url)
        {
        }
    }
    class WPML_Score_Hierarchy
    {
        private $data = array();
        private $slugs = array();
        /**
         * WPML_Score_Hierarchy constructor.
         *
         * @param object[] $data_set
         * @param string[] $slugs
         */
        public function __construct($data_set, $slugs)
        {
        }
        /**
         * Array of best matched post_ids. Better matches have a lower index!
         *
         * @return int[]
         */
        public function get_possible_ids_ordered()
        {
        }
        /**
         * Get page object by its id.
         *
         * @param int $id
         *
         * @return false|object
         */
        private function get_page_by_id($id)
        {
        }
        /**
         * @param string[] $parent_slugs
         * @param object[] $pages_with_name
         * @param object   $page
         *
         * @return int
         */
        private function calculate_score($parent_slugs, $pages_with_name, $page)
        {
        }
        /**
         * @param stdClass $page
         *
         * @return bool
         */
        private function is_exactly_matching_all_slugs_in_order($page)
        {
        }
        /**
         * @param stdClass $current_page
         *
         * @return array
         */
        private function get_slugs_for_page($current_page)
        {
        }
    }
    class WPML_Language_Domains
    {
        private $domains;
        public function __construct(\SitePress $sitepress, \WPML_URL_Converter_Url_Helper $converter_url_helper)
        {
        }
        public function get($lang)
        {
        }
    }
    class WPML_Home_Url_Filter_Context
    {
        const REST_REQUEST = 'rest-request';
        const REWRITE_RULES = 'rewrite-rules';
        const PAGINATION = 'pagination';
        /**
         * @var int
         */
        private $language_negotiation_type;
        /**
         * @var string
         */
        private $orig_scheme;
        /**
         * @var WPML_Debug_BackTrace
         */
        private $debug_backtrace;
        public function __construct($language_negotiation_type, $orig_scheme, \WPML_Debug_BackTrace $debug_backtrace)
        {
        }
        /**
         * @return bool
         */
        public function should_not_filter()
        {
        }
        /**
         * @return bool
         */
        private function is_rest_request()
        {
        }
        /**
         * @return bool
         */
        private function rewriting_rules()
        {
        }
        /**
         * @return bool
         */
        private function pagination_link()
        {
        }
    }
    /**
     * Class WPML_URL_Filters
     */
    class WPML_URL_Filters
    {
        /** @var SitePress */
        private $sitepress;
        /** @var  WPML_Post_Translation $post_translation */
        private $post_translation;
        /** @var WPML_Canonicals */
        private $canonicals;
        /** @var WPML_URL_Converter $url_converter */
        private $url_converter;
        /** @var WPML_Debug_BackTrace */
        private $debug_backtrace;
        /**
         * WPML_URL_Filters constructor.
         *
         * @param $post_translation
         * @param $url_converter
         * @param WPML_Canonicals $canonicals
         * @param $sitepress
         * @param WPML_Debug_BackTrace $debug_backtrace
         */
        public function __construct(&$post_translation, &$url_converter, \WPML_Canonicals $canonicals, &$sitepress, \WPML_Debug_BackTrace $debug_backtrace)
        {
        }
        private function add_hooks()
        {
        }
        public function add_global_hooks()
        {
        }
        public function remove_global_hooks()
        {
        }
        /**
         * @param int $post_id
         * @param string $url
         *
         * @return int
         *
         * @hook oembed_request_post_id
         */
        public function embedded_front_page_id_filter($post_id, $url)
        {
        }
        /**
         * @param string $embedded_url
         *
         * @return string
         */
        public function fix_post_embedded_url($embedded_url)
        {
        }
        /**
         * Filters the link to a post's edit screen by appending the language query argument
         *
         * @param string $link
         * @param int    $id
         * @param string $context
         *
         * @return string
         *
         * @hook get_edit_post_link
         */
        public function get_edit_post_link($link, $id, $context = 'display')
        {
        }
        /**
         * Permalink filter that is used when the site uses a root page
         *
         * @param string      $link
         * @param int|WP_Post $pid
         *
         * @return string
         */
        public function permalink_filter_root($link, $pid)
        {
        }
        /**
         * @param $link
         * @param $pid
         *
         * @return string|WPML_Notice|WPML_Notice_Render
         */
        public function page_link_filter_root($link, $pid)
        {
        }
        /**
         * Filters links to the root page, so that they are displayed properly in the front-end.
         *
         * @param $url
         *
         * @return string
         */
        public function filter_root_permalink($url)
        {
        }
        /**
         * @param string      $link
         * @param int|WP_Post $post
         *
         * @return string
         */
        public function permalink_filter($link, $post)
        {
        }
        /**
         * @param string      $link
         * @param int|WP_Post $post
         *
         * @return $string
         */
        public function page_link_filter($link, $post)
        {
        }
        private function has_wp_get_canonical_url()
        {
        }
        /**
         * @param string|bool $canonical_url
         * @param WP_Post     $post
         *
         * @return mixed
         * @throws \InvalidArgumentException
         */
        public function get_canonical_url_filter($canonical_url, $post)
        {
        }
        /**
         * @param string $url
         * @param string $path
         * @param string $orig_scheme
         * @param int $blog_id
         *
         * @return string
         */
        public function home_url_filter($url, $path, $orig_scheme, $blog_id)
        {
        }
        public function frontend_uses_root()
        {
        }
        /**
         * Finds the correct language a post belongs to by handling the special case of the post edit screen.
         *
         * @param int $post_id
         *
         * @return bool|mixed|null|String
         */
        private function get_permalink_filter_lang($post_id)
        {
        }
        private function unset_page_query_vars($query)
        {
        }
        private function get_language_from_url($return_default_language_if_missing = \false)
        {
        }
        /**
         * @param string            $link
         * @param int               $post
         * @param WPML_Post_Element $post_element
         *
         * @return bool|false|mixed|string
         */
        public function get_translated_permalink($link, $post, $post_element)
        {
        }
        /**
         * @param $link
         * @param $post
         * @param $post_element
         *
         * @return bool|mixed|string
         */
        public function get_translated_page_link($link, $post, $post_element)
        {
        }
        public function get_request_language()
        {
        }
        private function should_use_permalink_of_post_translation(\WPML_Post_Element $post_element)
        {
        }
        private function is_display_as_translated_mode(\WPML_Post_Element $post_element)
        {
        }
        private function get_translated_post_id_for_current_language(\WPML_Post_Element $post_element)
        {
        }
        /**
         * @param string $url
         *
         * @return bool
         */
        private function is_front_page($url)
        {
        }
    }
    class WPML_Absolute_Links_Blacklist
    {
        private $blacklist_requests;
        public function __construct($blacklist_requests)
        {
        }
        public function is_blacklisted($request)
        {
        }
        private function is_blacklisted_with_regex($request)
        {
        }
        private function is_regex($blacklist_request)
        {
        }
    }
}
namespace WPML\UrlHandling {
    class WPLoginUrlConverter implements \IWPML_Action
    {
        const PRIORITY_AFTER_URL_FILTERS = 100;
        const SETTINGS_KEY = 'wpml_login_page_translation';
        private $rewrite_rule_not_found;
        /** @var \WPML_URL_Converter $url_converter */
        private $url_converter;
        /** @var \SitePress $sitepress */
        private $sitepress;
        /**
         * @param \WPML_URL_Converter $url_converter
         * @param \SitePress $sitepress
         */
        public function __construct($sitepress, $url_converter)
        {
        }
        public function add_hooks()
        {
        }
        public function add_signup_language_field()
        {
        }
        public function redirect_to_login_url_with_lang()
        {
        }
        public function generate_rewrite_rules()
        {
        }
        public function filter_redirect_with_lang($redirect_to)
        {
        }
        public function wpml_login_page_language_from_url($language, $url)
        {
        }
        public function site_url($url, $path, $scheme)
        {
        }
        public function convert_url($url)
        {
        }
        public function on_request($query_vars)
        {
        }
        private function should_convert_url_for_multisite($url)
        {
        }
        private function is_wp_login_url($url)
        {
        }
        private function is_wp_login_action()
        {
        }
        private function get_language_param_for_convert_url()
        {
        }
        private function is_subdomain_multisite()
        {
        }
        private function remove_language_directory_from_url($url)
        {
        }
    }
}
namespace {
    class WPML_WP_In_Subdir_URL_Filters_Factory implements \IWPML_Frontend_Action_Loader, \IWPML_Backend_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_Absolute_To_Permalinks
    {
        private $taxonomies_query;
        private $lang;
        /** @var SitePress $sitepress */
        private $sitepress;
        public function __construct(\SitePress $sitepress)
        {
        }
        public function convert_text($text)
        {
        }
        function show_permalinks_cb($matches)
        {
        }
        private function get_found_parts($matches)
        {
        }
        private function get_url($parts)
        {
        }
        private function get_fragment($url, $parts)
        {
        }
        private function remove_query_in_wrong_lang($fragment)
        {
        }
        private function check_for_duplicate_lang_query($fragment, $url)
        {
        }
    }
    class WPML_Root_Page
    {
        public static function init()
        {
        }
        /**
         * Checks if the value in $_SERVER['REQUEST_URI] points towards the root page.
         * Therefore this can be used to check if the current request points towards the root page.
         * @return bool
         */
        public static function is_current_request_root()
        {
        }
        /**
         * @param $requested_url string
         *                       Checks if a requested url points towards the root page.
         *
         * @return bool
         */
        public static function is_root_page($requested_url)
        {
        }
        public static function uses_html_root()
        {
        }
        /**
         * Returns the id of the root page or false if it isn't set.
         * @return bool|int
         */
        public static function get_root_id()
        {
        }
        /**
         * Returns the slug of the root page or false if non exists.
         * @return bool|string
         */
        private static function get_root_slug()
        {
        }
        /**
         * @param $requested_url string
         *                       Takes a request_url in the format of $_SERVER['REQUEST_URI']
         *                       and returns an associative array containing its slugs ans query string.
         *
         * @return array
         */
        private static function get_slugs_and_get_query($requested_url)
        {
        }
        /**
         * @param $path string
         *              Turns a query string into an array of its slugs.
         *              The array is filtered so to not contain empty values and
         *              consecutively and numerically indexed starting at 0.
         *
         * @return array
         */
        private static function get_slugs_array($path)
        {
        }
        /**
         * @param $slugs array
         *               Checks if a given set of slugs points towards the root page or not.
         *               The result of this can always be overridden by GET parameters and is not a certain
         *               check as to being on the root page or not.
         *
         * @return bool
         */
        private static function slugs_point_to_root($slugs)
        {
        }
        /**
         * @param $query_string
         * Turns a given query string into an associative array of its parameters.
         *
         * @return array
         */
        private static function get_query_array_from_string($query_string)
        {
        }
        /**
         * @param $query_string string
         *                      Checks if the WP_Query functionality can decisively recognize if a querystring points
         *                      towards an archive.
         *
         * @return bool
         */
        private static function query_points_to_archive($query_string)
        {
        }
        /**
         * @param $query_string string
         *                      Checks if a given query string decisively points towards or away from the root page.
         *
         * @return int
         */
        private static function get_query_target_from_query_string($query_string)
        {
        }
        /**
         * @param $query_params array
         *                      Checks if a set of query parameters decisively points towards or away from the root page.
         *
         * @return int
         */
        private static function get_query_target_from_params_array($query_params)
        {
        }
        /**
         * @param $post false|WP_Post
         *              Filters the postID used by the preview for the case of the root page preview.
         *
         * @return null|WP_Post
         */
        public static function front_page_id_filter($post)
        {
        }
        /**
         * Filters the template that is used for the root page
         *
         * @param $template
         *
         * @return string
         */
        public static function wpml_home_url_template_include($template)
        {
        }
        /**
         * @return string
         */
        public static function get_root_page_template()
        {
        }
    }
    class WPML_Allowed_Redirect_Hosts extends \WPML_SP_User
    {
        public function __construct(&$sitepress)
        {
        }
        public function get_hosts($hosts)
        {
        }
    }
    class WPML_URL_HTTP_Referer
    {
        private $rest;
        public function __construct(\WPML_Rest $rest)
        {
        }
        /**
         * @param string $backup_url
         *
         * @return string
         */
        public function get_url($backup_url)
        {
        }
        /**
         * @return bool|int
         */
        public function get_trid()
        {
        }
        /**
         * We need this in order to detect the language when adding
         * translation from inside of a Gutenberg page while
         * they don't provide a JS API which allows us to do it
         *
         * @link https://github.com/WordPress/gutenberg/issues/5958
         * @link https://onthegosystems.myjetbrains.com/youtrack/issue/wpmlcore-5265
         *
         * @return bool
         */
        public function is_rest_request_called_from_post_edit_page()
        {
        }
        public static function is_post_edit_page()
        {
        }
    }
    class WPML_WP_In_Subdir_URL_Filters implements \IWPML_Action
    {
        /** @var WPML_Debug_BackTrace $backtrace */
        private $backtrace;
        /** @var SitePress $sitepress */
        private $sitepress;
        /** @var WPML_URL_Converter $url_converter */
        private $url_converter;
        /** @var string $uri_without_subdir */
        private $uri_without_subdir;
        /**
         * @param WPML_Debug_BackTrace $backtrace
         * @param SitePress            $sitepress
         * @param WPML_URL_Converter   $url_converter
         * @param string               $uri_without_subdir
         */
        public function __construct(\WPML_Debug_BackTrace $backtrace, \SitePress $sitepress, \WPML_URL_Converter $url_converter, $uri_without_subdir)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * This filter is only applied in `WP::parse_request` in order to get
         * the proper URI cleanup base in `$home_path_regex`
         *
         * @param string $home_url
         *
         * @return string
         */
        public function home_url_filter_on_parse_request($home_url)
        {
        }
        /**
         * @return bool
         */
        private function request_uri_begins_with_lang()
        {
        }
    }
    class WPML_Endpoints_Support_Factory implements \IWPML_Frontend_Action_Loader, \IWPML_Backend_Action_Loader, \IWPML_Deferred_Action_Loader
    {
        public function get_load_action()
        {
        }
        /**
         * @return WPML_Endpoints_Support
         */
        public function create()
        {
        }
        /**
         * @return bool
         */
        private function are_st_functions_loaded()
        {
        }
    }
    class WPML_Absolute_Url_Persisted_Filters_Factory implements \IWPML_Backend_Action_Loader, \IWPML_AJAX_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_Absolute_Url_Persisted_Filters implements \IWPML_Action
    {
        /** @var WPML_Absolute_Url_Persisted $url_persisted */
        private $url_persisted;
        public function __construct(\WPML_Absolute_Url_Persisted $url_persisted)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param mixed $data
         *
         * @return array
         */
        public function reset($data = \null)
        {
        }
    }
    interface IWPML_Resolve_Object_Url
    {
        /**
         * @param string $url
         * @param string $lang
         *
         * @return string|false Will return the resolved URL or `false` if it could not be resolved.
         */
        public function resolve_object_url($url, $lang);
    }
    class WPML_Resolve_Object_Url_Helper implements \IWPML_Resolve_Object_Url
    {
        const CACHE_GROUP = 'resolve_object_url';
        /**
         * @var bool
         */
        protected $lock = \false;
        /**
         * @var SitePress
         */
        private $sitepress;
        /**
         * @var WP_Query
         */
        private $wp_query;
        /**
         * @var WPML_Term_Translation
         */
        private $wpml_term_translations;
        /**
         * @var WPML_Post_Translation
         */
        private $wpml_post_translations;
        /**
         * @param SitePress $sitepress
         * @param WP_Query $wp_query
         * @param WPML_Term_Translation $wpml_term_translations
         * @param WPML_Post_Translation $wpml_post_translations
         */
        public function __construct(\SitePress &$sitepress = \null, \WP_Query &$wp_query = \null, \WPML_Term_Translation $wpml_term_translations = \null, \WPML_Post_Translation $wpml_post_translations = \null)
        {
        }
        /**
         * Try to parse the URL to find a related post or term
         *
         * @param string $url
         * @param string $lang_code
         *
         * @return string|bool
         */
        public function resolve_object_url($url, $lang_code)
        {
        }
        private function cached_retrieve_translations($url)
        {
        }
        private function retrieve_translations()
        {
        }
    }
    class WPML_Absolute_Url_Persisted
    {
        const OPTION_KEY = 'wpml_resolved_url_persist';
        private static $instance;
        /**
         * @var array
         */
        private $urls;
        /**
         * @return WPML_Absolute_Url_Persisted
         */
        public static function get_instance()
        {
        }
        protected function __construct()
        {
        }
        private function __clone()
        {
        }
        private function __wakeup()
        {
        }
        /**
         * Returns urls array.
         *
         * @return array Array with urls.
         */
        private function get_urls()
        {
        }
        /** @return bool */
        public function has_urls()
        {
        }
        /**
         * @param string       $original_url
         * @param string       $lang
         * @param string|false $converted_url A `false` value means that the URL could not be resolved
         */
        public function set($original_url, $lang, $converted_url)
        {
        }
        /**
         * @param string $original_url
         * @param string $lang
         *
         * @return string|false|null If the URL has already been processed but could not be resolved, it will return `false`
         */
        public function get($original_url, $lang)
        {
        }
        public function reset()
        {
        }
        public function persist()
        {
        }
        private function persist_in_shutdown()
        {
        }
    }
    class WPML_Resolve_Absolute_Url implements \IWPML_Resolve_Object_Url
    {
        /** @var SitePress $sitepress */
        private $sitepress;
        /** @var WPML_Translate_Link_Targets */
        private $translate_link_targets;
        /** @var bool */
        private $lock;
        public function __construct(\SitePress $sitepress, \WPML_Translate_Link_Targets $translate_link_targets)
        {
        }
        /**
         * @param string $url
         * @param string $lang
         *
         * @return string|false
         */
        public function resolve_object_url($url, $lang)
        {
        }
    }
    class WPML_Resolve_Absolute_Url_Cached implements \IWPML_Resolve_Object_Url
    {
        /** @var WPML_Absolute_Url_Persisted $url_persisted */
        private $url_persisted;
        /** @var WPML_Resolve_Absolute_Url $resolve_url */
        private $resolve_url;
        public function __construct(\WPML_Absolute_Url_Persisted $url_persisted, \WPML_Resolve_Absolute_Url $resolve_url)
        {
        }
        /**
         * @param string $url
         * @param string $lang
         *
         * @return false|string Will return `false` if the URL could not be resolved
         */
        public function resolve_object_url($url, $lang)
        {
        }
    }
    class WPML_Resolve_Object_Url_Helper_Factory
    {
        const CURRENT_URL_RESOLVER = 'current';
        const ABSOLUTE_URL_RESOLVER = 'absolute';
        /**
         * @return IWPML_Resolve_Object_Url
         */
        public function create($type = self::CURRENT_URL_RESOLVER)
        {
        }
    }
    class WPML_URL_HTTP_Referer_Factory
    {
        /**
         * @return WPML_URL_HTTP_Referer
         */
        public function create()
        {
        }
    }
    class WPML_XDomain_Data_Parser
    {
        const SCRIPT_HANDLER = 'wpml-xdomain-data';
        /**
         * @var array $settings
         */
        private $settings;
        /**
         * var WPML_Data_Encrypter
         */
        private $encryptor;
        /**
         * WPML_XDomain_Data_Parser constructor.
         *
         * @param array $settings
         * @param WPML_Data_Encrypter
         */
        public function __construct(&$settings, $encryptor)
        {
        }
        public function init_hooks()
        {
        }
        public function init()
        {
        }
        public function register_scripts_action()
        {
        }
        public function set_up_xdomain_language_data()
        {
        }
        public function send_xdomain_language_data()
        {
        }
        public function get_xdomain_data()
        {
        }
    }
}
namespace WPML\Core\REST {
    class RewriteRules implements \IWPML_REST_Action, \IWPML_DIC_Action
    {
        /** @var \SitePress */
        private $sitepress;
        /**
         * @param \SitePress $sitepress
         */
        public function __construct(\SitePress $sitepress)
        {
        }
        public function add_hooks()
        {
        }
        public function addOptionRewriteRulesHook()
        {
        }
        public function updateRules($rewriteRules)
        {
        }
        /**
         * @return bool
         */
        private function isLangInDirectory()
        {
        }
        /**
         * @return bool
         */
        private function isUseDirectoryForDefaultLanguage()
        {
        }
        /**
         * @return bool
         */
        private function isInstalledInSubdirectory()
        {
        }
        /**
         * @return string
         */
        private function getSubdirectory()
        {
        }
    }
    class Status
    {
        const PING_KEY = 'wp-rest-enabled-ping';
        const CACHE_EXPIRATION_IN_SEC = 3600;
        const ENABLED = 'enabled';
        const DISABLED = 'disabled';
        const TIMEOUT = 'timeout';
        /** @var \WP_Http */
        private $wp_http;
        /**
         * @param \WP_Http $wp_http
         */
        public function __construct(\WP_Http $wp_http)
        {
        }
        public function isEnabled()
        {
        }
        /**
         * @return bool
         */
        private function is_rest_accessible()
        {
        }
        /**
         * @param callable $callback
         *
         * @return mixed
         */
        private function cacheInTransient(callable $callback)
        {
        }
        /**
         * @return string
         */
        private function pingRestEndpoint()
        {
        }
        /**
         * The PHP session ID causes the request to be blocked if some theme/plugin
         * calls `session_start` (this always leads to hit the timeout).
         *
         * @return array
         */
        private function getCookiesWithoutSessionId()
        {
        }
        /**
         * @param \WP_Error $response
         *
         * @return bool
         */
        private function isTimeout(\WP_Error $response)
        {
        }
    }
}
namespace {
    class WPML_Translate_Independently
    {
        public function __construct()
        {
        }
        public function init()
        {
        }
        public function wpml_translate_independently()
        {
        }
        public function localize_scripts()
        {
        }
        /**
         * Add callback to detect post editor change.
         * @param  array $initArray
         *
         * @return array
         */
        public function add_tiny_mce_change_detection($initArray)
        {
        }
    }
    /**
     * This code is inspired by WPML Widgets (https://wordpress.org/plugins/wpml-widgets/),
     * created by Jeroen Sormani
     *
     * @author OnTheGo Systems
     */
    class WPML_Widgets_Support_Backend implements \IWPML_Action
    {
        const NONCE = 'wpml-language-nonce';
        private $active_languages;
        private $template_service;
        /**
         * WPML_Widgets constructor.
         *
         * @param array                  $active_languages
         * @param IWPML_Template_Service $template_service
         */
        public function __construct(array $active_languages, \IWPML_Template_Service $template_service)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param WP_Widget|null $widget
         * @param string|null    $form
         * @param array          $instance
         */
        public function language_selector($widget, $form, $instance)
        {
        }
        /**
         * @param array     $instance
         * @param array     $new_instance
         * @param array     $old_instance
         * @param WP_Widget $widget_instance
         *
         * @return array
         */
        public function update($instance, $new_instance, $old_instance, $widget_instance)
        {
        }
    }
    /**
     * This code is inspired by WPML Widgets (https://wordpress.org/plugins/wpml-widgets/),
     * created by Jeroen Sormani
     *
     * @author OnTheGo Systems
     */
    class WPML_Widgets_Support_Frontend implements \IWPML_Action
    {
        private $current_language;
        /**
         * WPML_Widgets constructor.
         *
         * @param string $current_language
         */
        public function __construct($current_language)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * Get display status of the widget.
         *
         * @param array|bool $instance
         *
         * @return array|bool
         */
        public function display($instance)
        {
        }
        /**
         * Returns display status of the widget as boolean.
         *
         * @param array $instance
         *
         * @return bool
         */
        private function it_must_display($instance)
        {
        }
    }
    /**
     * This code is inspired by WPML Widgets (https://wordpress.org/plugins/wpml-widgets/),
     * created by Jeroen Sormani
     *
     * @author OnTheGo Systems
     */
    class WPML_Widgets_Support_Factory implements \IWPML_Backend_Action_Loader, \IWPML_Frontend_Action_Loader, \IWPML_Deferred_Action_Loader
    {
        public function get_load_action()
        {
        }
        /**
         * @return WPML_Widgets_Support_Backend|WPML_Widgets_Support_Frontend|null
         */
        public function create()
        {
        }
        private function create_backend_ui(\SitePress $sitepress)
        {
        }
        public function create_frontend_ui(\SitePress $sitepress)
        {
        }
        /**
         * @param SitePress $sitepress
         *
         * @return bool
         */
        private function is_human_page(\SitePress $sitepress)
        {
        }
    }
    /**
     * @package wpml-core
     */
    class WPML_UI_Screen_Options_Pagination
    {
        /**
         * @var string $option_name
         */
        private $option_name;
        /**
         * @var int $default_per_page
         */
        private $default_per_page;
        /**
         * WPML_UI_Screen_Options_Pagination constructor.
         *
         * @param string $option_name
         * @param int $default_per_page
         */
        public function __construct($option_name, $default_per_page)
        {
        }
        public function init_hooks()
        {
        }
        public function add_screen_options()
        {
        }
        public function set_screen_options_filter($value, $option, $set_value)
        {
        }
        public function get_items_per_page()
        {
        }
    }
    /**
     * @package wpml-core
     */
    class WPML_UI_Help_Tab
    {
        private $wp_api;
        private $id;
        private $title;
        private $content;
        public function __construct(\WPML_WP_API $wp_api, $id, $title, $content)
        {
        }
        public function init_hooks()
        {
        }
        public function add_help_tab()
        {
        }
    }
    /**
     * @package wpml-core
     */
    class WPML_UI_Screen_Options_Factory
    {
        /** @var SitePress $sitepress */
        private $sitepress;
        public function __construct(\SitePress $sitepress)
        {
        }
        /**
         * @param string $option_name
         * @param int    $default_per_page
         *
         * @return WPML_UI_Screen_Options_Pagination
         */
        public function create_pagination($option_name, $default_per_page)
        {
        }
        public function create_help_tab($id, $title, $content)
        {
        }
        public function create_admin_table_sort()
        {
        }
    }
    class WPML_UI_Unlock_Button
    {
        public function render($disabled, $unlocked, $radio_name, $unlocked_name)
        {
        }
    }
    /**
     * @package wpml-core
     */
    class WPML_UI_Pagination extends \WP_List_Table
    {
        public function __construct($total, $number_per_page)
        {
        }
        public function show()
        {
        }
    }
    class WPML_Sticky_Posts_Lang_Filter
    {
        /** @var SitePress */
        private $sitepress;
        /** @var WPML_Post_Translation */
        private $post_translation;
        /** @var array */
        private $post_valid_in_all_langs_cache = array();
        /**
         * @param SitePress             $sitepress
         * @param WPML_Post_Translation $post_translation
         */
        public function __construct(\SitePress $sitepress, \WPML_Post_Translation $post_translation)
        {
        }
        /**
         * @param array $posts
         * @param string $lang
         *
         * @return array
         */
        public function filter_by_language(array $posts, $lang)
        {
        }
        /**
         * @param string $post_type
         *
         * @return bool
         */
        private function is_post_type_valid_in_any_language($post_type)
        {
        }
    }
    class WPML_Sticky_Posts_Sync
    {
        /** @var SitePress */
        private $sitepress;
        /** @var  WPML_Post_Translation $post_translation */
        private $post_translation;
        /** @var WPML_Sticky_Posts_Lang_Filter */
        private $populate_lang_option;
        /**
         * @param SitePress                     $sitepress
         * @param WPML_Post_Translation         $post_translation
         * @param WPML_Sticky_Posts_Lang_Filter $populate_lang_option
         */
        public function __construct(\SitePress $sitepress, \WPML_Post_Translation $post_translation, \WPML_Sticky_Posts_Lang_Filter $populate_lang_option)
        {
        }
        /**
         * It returns only those sticky posts which belong to a current language
         *
         * @return array|false
         */
        public function pre_option_sticky_posts_filter()
        {
        }
        /**
         * Ensure that the original main `sticky_posts` option contains sticky posts from ALL languages
         *
         * @param array $posts
         *
         * @return array
         */
        public function pre_update_option_sticky_posts($posts)
        {
        }
        /**
         * It marks as `sticky` all posts which are translation of the post or have the same original post.
         * Basically, it means that they have the same trid in icl_translations table.
         *
         * @param int $post_id
         */
        public function on_post_stuck($post_id)
        {
        }
        /**
         * It un-marks as `sticky` all posts which are translation of the post or have the same original post.
         *
         * @param int $post_id
         */
        public function on_post_unstuck($post_id)
        {
        }
        /**
         * It returns an original, unfiltered `sticky_posts` option which contains sticky posts from ALL languages
         *
         * @return array|false
         */
        public function get_unfiltered_sticky_posts_option()
        {
        }
        /**
         * @param int $post_id
         *
         * @return array
         */
        private function get_post_translations($post_id)
        {
        }
        /**
         * @param int $post_id
         */
        private function add_post_id_to_original_option($post_id)
        {
        }
        /**
         * @param string $option
         * @param int    $post_id
         */
        private function add_post_id($option, $post_id)
        {
        }
        /**
         * @param int $post_id
         */
        private function remove_post_id_from_original_option($post_id)
        {
        }
        /**
         * @param int      $post_id
         * @param callable $callback
         */
        private function update_original_option($post_id, $callback)
        {
        }
        /**
         * @param string $option
         * @param int    $post_id
         */
        private function remove_post_id($option, $post_id)
        {
        }
        /**
         * @param string $lang
         *
         * @return array
         */
        private function get_option_by_lang($lang)
        {
        }
    }
    class WPML_Sticky_Posts_Loader
    {
        /** @var SitePress */
        private $sitepress;
        /**
         * @param SitePress $sitepress
         */
        public function __construct(\SitePress $sitepress)
        {
        }
        public function add_hooks()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Download_Localization
    {
        private $active_languages;
        private $default_language;
        private $not_founds = array();
        private $errors = array();
        /**
         * WPML_Localization constructor.
         *
         * @param array  $active_languages
         * @param string $default_language
         */
        public function __construct(array $active_languages, $default_language)
        {
        }
        public function download_language_packs()
        {
        }
        public function get_not_founds()
        {
        }
        public function get_errors()
        {
        }
        private function download_language_pack($language)
        {
        }
    }
}
namespace WPML\Ajax {
    class Factory implements \IWPML_AJAX_Action
    {
        public function add_hooks()
        {
        }
    }
}
namespace {
    class WPML_Ajax_Route
    {
        const ACTION_PREFIX = 'wp_ajax_';
        const ACTION_PREFIX_LENGTH = 8;
        /** @var  WPML_Ajax_Factory $factory */
        private $factory;
        public function __construct(\WPML_Ajax_Factory $factory)
        {
        }
        public function add($class_name)
        {
        }
        public function do_ajax()
        {
        }
    }
    class WPML_Ajax_Response
    {
        private $success;
        private $response_data;
        public function __construct($success, $response_data)
        {
        }
        public function send_json()
        {
        }
        public function is_success()
        {
        }
        public function get_response()
        {
        }
    }
    class WPML_Not_Doing_Ajax_On_Send_Exception extends \Exception
    {
        public $response;
        public function __construct($response)
        {
        }
    }
    interface IWPML_AJAX_Action_Run
    {
        public function run();
    }
    abstract class WPML_Ajax_Factory
    {
        public function add_route(\WPML_Ajax_Route $route)
        {
        }
        abstract function get_class_names();
        abstract function create($class_name);
    }
}
namespace WPML\Ajax {
    class Locale implements \IWPML_AJAX_Action, \IWPML_DIC_Action
    {
        /** @var \SitePress */
        private $sitePress;
        public function __construct(\SitePress $sitePress)
        {
        }
        public function add_hooks()
        {
        }
    }
}
namespace {
    /**
     * @since      3.1.8.4
     *
     * Class WPML_Term_Language_Synchronization
     *
     * @package    wpml-core
     * @subpackage taxonomy-term-translation
     */
    class WPML_Term_Language_Synchronization extends \WPML_WPDB_And_SP_User
    {
        /** @var string $taxonomy */
        private $taxonomy;
        /** @var array $data */
        private $data;
        /** @var array $missing_terms */
        private $missing_terms = array();
        /** @var WPML_Terms_Translations $term_utils */
        private $term_utils;
        /**
         * @param SitePress               $sitepress
         * @param WPML_Terms_Translations $term_utils
         * @param string                  $taxonomy
         */
        public function __construct(&$sitepress, &$term_utils, $taxonomy)
        {
        }
        /**
         * Wrapper for the two database actions performed by this object.
         * First those terms are created that lack translations and then following that,
         * the assignment of posts and languages is corrected, taking advantage of the newly created terms
         * and resulting in a state of no conflicts in the form of a post language being different from
         * an assigned terms language, remaining.
         */
        public function set_translated()
        {
        }
        /**
         * Helper function for the installation process,
         * finds all terms missing an entry in icl_translations and then
         * assigns them the default language.
         */
        public function set_initial_term_language()
        {
        }
        /**
         * Performs an SQL query assigning all terms to their correct language equivalent if it exists.
         * This should only be run after the previous functionality in here has finished.
         * Afterwards the term counts are recalculated globally, since term assignments bypassing the WordPress Core,
         * will not trigger any sort of update on those.
         */
        private function reassign_terms()
        {
        }
        /**
         * @param object[] $sql_result holding the information retrieved in \self::set_affected_ids
         *
         * @return array The associative array to be returned by \self::set_affected_ids
         */
        private function format_data($sql_result)
        {
        }
        /**
         * Uses the API provided in \WPML_Terms_Translations to create missing term translations.
         * These arise when a term, previously having been untranslated, is set to be translated
         * and assigned to posts in more than one language.
         *
         * @param $trid        int The trid value for which term translations are missing.
         * @param $source_lang string The source language of this trid.
         * @param $langs       array The languages' codes for which term translations are missing.
         */
        private function prepare_missing_translations($trid, $source_lang, $langs)
        {
        }
        /**
         * Retrieves all term_ids, and if applicable, their language and assigned to posts,
         * in an associative array,
         * which are in the situation of not being assigned to any language or in which a term
         * is assigned to a post in a language different from its own.
         *
         * @return array
         */
        private function set_affected_ids()
        {
        }
        /**
         * Assigns language information to terms that are to be treated as originals at the time of
         * their taxonomy being set to translated instead of 'do nothing'.
         */
        private function prepare_missing_originals()
        {
        }
        /**
         * Uses the data retrieved from the database and saves information about,
         * in need of fixing terms to this object.
         *
         * @return array
         */
        private function prepare_missing_terms_data()
        {
        }
    }
    /**
     * Class WPML_Taxonomy_Translation_Help_Notice
     */
    class WPML_Taxonomy_Translation_Help_Notice
    {
        const NOTICE_GROUP = 'taxonomy-term-help-notices';
        /**
         * @var WPML_Notices
         */
        private $wpml_admin_notices;
        /**
         * @var WPML_Notice
         */
        private $notice = \false;
        /**
         * @var SitePress
         */
        private $sitepress;
        /**
         * WPML_Taxonomy_Translation_Help_Notice constructor.
         *
         * @param WPML_Notices $wpml_admin_notices
         * @param SitePress $sitepress
         */
        public function __construct(\WPML_Notices $wpml_admin_notices, \SitePress $sitepress)
        {
        }
        public function __sleep()
        {
        }
        public function __wakeup()
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @return bool
         */
        public function should_display_help_notice()
        {
        }
        /**
         * Create and add notice.
         */
        public function add_help_notice()
        {
        }
        /**
         * @return bool|WP_Taxonomy
         */
        private function get_current_translatable_taxonomy()
        {
        }
        /**
         * @return WPML_Notice
         */
        private function create_and_set_term_translation_help_notice()
        {
        }
        private function add_term_help_notice_to_admin_notices()
        {
        }
        /**
         * @param $taxonomy
         *
         * @return string
         */
        private function build_tag_to_taxonomy_translation($taxonomy)
        {
        }
        private function taxonomy_term_screen()
        {
        }
        /**
         * @param WPML_Notice $notice
         */
        public function set_notice(\WPML_Notice $notice)
        {
        }
        /**
         * @return WPML_Notice
         */
        public function get_notice()
        {
        }
        /**
         * Enqueue JS callback script.
         */
        public function enqueue_scripts()
        {
        }
        /**
         * @param string $taxonomy
         *
         * @return bool
         */
        private function is_translatable_taxonomy($taxonomy)
        {
        }
    }
    /**
     * WPML_Term_Actions Class
     *
     * @package    wpml-core
     * @subpackage taxonomy-term-translation
     *
     */
    class WPML_Term_Actions extends \WPML_Full_Translation_API
    {
        /** @var bool $delete_recursion_flag */
        private $delete_recursion_flag = \false;
        /**
         * Handle AJAX request to generate unique slug.
         */
        public function generate_unique_term_slug_ajax_handler()
        {
        }
        /**
         * @param int                    $tt_id    Taxonomy Term ID of the saved Term
         * @param string                 $taxonomy Taxonomy of the saved Term
         */
        function save_term_actions($tt_id, $taxonomy)
        {
        }
        /**
         * @param int $term_id
         * @param int $tt_id
         */
        public function sync_term_meta($term_id, $tt_id)
        {
        }
        /**
         * @param int    $term_taxonomy_id term taxonomy id of the deleted term
         * @param string $taxonomy_name    taxonomy of the deleted term
         */
        function delete_term_actions($term_taxonomy_id, $taxonomy_name)
        {
        }
        /**
         * @param $trid
         * @param $deleted_language_code
         */
        public function set_new_original_term($trid, $deleted_language_code)
        {
        }
        /**
         * This action is hooked to the 'deleted_term_relationships' hook.
         * It removes terms from translated posts as soon as they are removed from the original post.
         * It only fires, if the setting 'sync_post_taxonomies' is activated.
         *
         * @param int   $post_id      ID of the post the deleted terms were attached to
         * @param array $delete_terms Array of term taxonomy id's for those terms that were deleted from the post.
         */
        public function deleted_term_relationships($post_id, $delete_terms)
        {
        }
        /**
         * Copies taxonomy terms from original posts to their translation, if the translations of these terms exist
         * and the option 'sync_post_taxonomies' is set.
         *
         * @param $object_id int ID of the object, that terms have just been added to.
         */
        public function added_term_relationships($object_id)
        {
        }
        /**
         * @param array $corrections
         *
         * @uses \WPML_WP_API::wp_set_object_terms to add terms to posts, always appending terms
         */
        private function apply_added_term_changes($corrections)
        {
        }
        /**
         * Gets the language under which a term is to be saved from the HTTP request and falls back on existing data in
         * case the HTTP request does not contain the necessary data.
         * If no language can be determined for the term to be saved under the default language is used as a fallback.
         *
         * @param int    $tt_id Taxonomy Term ID of the saved term
         * @param string $post_action
         * @param string $taxonomy
         *
         * @return null|string
         */
        private function get_term_lang($tt_id, $post_action, $taxonomy)
        {
        }
        /**
         * If no language could be set from the WPML $_POST variables as well as from the HTTP Referrer, then this function
         * uses fallbacks to determine the language from the post the the term might be associated to.
         * A post language determined from $_POST['icl_post_language'] will be used as term language.
         * Also a check for whether the publishing of the term happens via quickpress is performed in which case the term
         * is always associated with the default language.
         * Next a check for the 'inline-save-tax' and the 'editedtag' action is performed. In case the check returns true
         * the language of the term is not changed from what is saved for it in the database.
         * If no term language can be determined from the above the $_POST['post_ID'] is checked as a last resort and in
         * case it contains a valid post_ID the posts language is associated with the term.
         *
         * @param string $post_action
         * @param int    $tt_id
         *
         * @return string|null Language code of the term
         */
        private function get_lang_from_post($post_action, $tt_id)
        {
        }
        /**
         * This function tries to determine the terms language from the HTTP Referer. This is used in case of ajax actions
         * that save the term.
         *
         * @param string $taxonomy
         * @param string $post_action
         *
         * @return null|string
         */
        public function get_term_lang_ajax($taxonomy, $post_action)
        {
        }
        private function get_saved_term_trid($tt_id, $post_action)
        {
        }
        /**
         * @param int    $term_taxonomy_id
         * @param string $taxonomy
         * @param array  $translations
         */
        private function delete_translations($term_taxonomy_id, $taxonomy, array $translations)
        {
        }
    }
    class WPML_Sync_Term_Meta_Action
    {
        /** @var SitePress $sitepress */
        private $sitepress;
        /** @var int $term_taxonomy_id */
        private $term_taxonomy_id;
        /** @var bool $is_new_term */
        private $is_new_term;
        /**
         * WPML_Sync_Term_Meta_Action constructor.
         *
         * @param SitePress $sitepress
         * @param int       $term_taxonomy_id just saved term's term_taxonomy_id
         * @param bool      $is_new_term
         */
        public function __construct($sitepress, $term_taxonomy_id, $is_new_term = \false)
        {
        }
        /**
         * Copies to be synchronized term meta data to the translations of the term.
         */
        public function run()
        {
        }
        /**
         * @param int $term_taxonomy_id_to
         * @param int $term_taxonomy_id_from
         */
        private function copy_custom_fields($term_taxonomy_id_to, $term_taxonomy_id_from)
        {
        }
        private function sync_custom_field($term_id_from, $term_id_to, $meta_key)
        {
        }
        /**
         * @param int $meta_key_status
         * @param int $term_taxonomy_id_to
         *
         * @return bool
         */
        private function should_copy_once($meta_key_status, $term_taxonomy_id_to)
        {
        }
    }
    class WPML_Update_Term_Count
    {
        const CACHE_GROUP = __CLASS__;
        /** @var  WPML_WP_API $wp_api */
        private $wp_api;
        /**
         * WPML_Update_Term_Count constructor.
         *
         * @param WPML_WP_API $wp_api
         */
        public function __construct($wp_api)
        {
        }
        /**
         * Triggers an update to the term count of all terms associated with the
         * input post_id
         *
         * @param int $post_id
         */
        public function update_for_post($post_id)
        {
        }
    }
    class WPML_Set_Attachments_Language_Factory implements \IWPML_Backend_Action_Loader, \IWPML_Deferred_Action_Loader
    {
        const MEDIA_OPTION_KEY = '_wpml_media';
        private $wpml_media_settings;
        public function get_load_action()
        {
        }
        public function create()
        {
        }
        private function needs_starting_help()
        {
        }
        private function is_not_media_settings_page()
        {
        }
        private function is_wpml_media_not_set_up()
        {
        }
        private function has_unprocessed_attachments()
        {
        }
        public static function get_media_settings_page()
        {
        }
    }
    class WPML_Media_Settings_Factory extends \WPML_Current_Screen_Loader_Factory
    {
        public function create_hooks()
        {
        }
        public function get_screen_regex()
        {
        }
    }
    class WPML_Media_Settings
    {
        const ID = 'ml-content-setup-sec-media';
        private $wpdb;
        public function __construct($wpdb)
        {
        }
        public function add_hooks()
        {
        }
        public function enqueue_script()
        {
        }
        public function render()
        {
        }
        public function mcsetup_navigation_links(array $mcsetup_sections)
        {
        }
    }
    class WPML_Model_Attachments
    {
        const ATTACHMENT_TYPE = 'post_attachment';
        /** @var SitePress */
        private $sitepress;
        /**
         * @var WPML_Post_Status
         */
        private $status_helper;
        /**
         * @param SitePress $sitepress
         * @param WPML_Post_Status $status_helper
         */
        public function __construct(\SitePress $sitepress, \WPML_Post_Status $status_helper)
        {
        }
        /**
         * @param int $attachment_id
         * @param int $duplicated_attachment_id
         */
        public function duplicate_post_meta_data($attachment_id, $duplicated_attachment_id)
        {
        }
        /**
         * @param int $trid
         * @param string $target_language
         *
         * @return null|WP_Post
         */
        public function find_duplicated_attachment($trid, $target_language)
        {
        }
        /**
         * @param WP_Post|null $attachment
         * @param int $parent_id_of_attachement
         * @param string $target_language
         *
         * @return int|null
         */
        public function fetch_translated_parent_id($attachment, $parent_id_of_attachement, $target_language)
        {
        }
        /**
         * @param int $new_parent_id
         * @param WP_Post $attachment
         */
        public function update_parent_id_in_existing_attachment($new_parent_id, $attachment)
        {
        }
        /**
         * @param string $post_type
         *
         * @return bool
         */
        private function is_valid_post_type($post_type)
        {
        }
        /**
         * @param int $attachment_id
         * @param string $target_language
         * @param int $parent_id_in_target_language
         * @param int $trid
         *
         * @return int
         * @throws WPML_Media_Exception
         */
        public function duplicate_attachment($attachment_id, $target_language, $parent_id_in_target_language, $trid)
        {
        }
        /**
         * @param WP_Post $post
         *
         * @return int
         */
        private function insert_attachment($post)
        {
        }
        /**
         * @param int $attachment_id
         * @param int $duplicated_attachment_id
         * @param string $target_language
         * @param int $trid
         */
        private function add_language_information_to_attachment($attachment_id, $duplicated_attachment_id, $target_language, $trid)
        {
        }
    }
    /**
     * WPML_Attachment_Action class file.
     *
     * @package WPML
     */
    /**
     * Class WPML_Attachment_Action
     */
    class WPML_Attachment_Action implements \IWPML_Action
    {
        /**
         * Sitepress instance.
         *
         * @var SitePress
         */
        private $sitepress;
        /**
         * Wpdb instance.
         *
         * @var wpdb
         */
        private $wpdb;
        /**
         * WPML_Attachment_Action constructor.
         *
         * @param SitePress $sitepress Sitepress instance.
         * @param wpdb      $wpdb      wpdb instance.
         */
        public function __construct(\SitePress $sitepress, \wpdb $wpdb)
        {
        }
        /**
         * Add hooks.
         */
        public function add_hooks()
        {
        }
        /**
         * Check if we are in site console or xmlrpc request is active.
         *
         * @return bool
         */
        private function is_admin_or_xmlrpc()
        {
        }
        /**
         * Check if we are uploading plugin or theme.
         *
         * @return bool
         */
        private function is_uploading_plugin_or_theme()
        {
        }
        /**
         * Filter views.
         *
         * @param array $views Views.
         *
         * @return array
         */
        public function views_upload_actions($views)
        {
        }
        /**
         * Check if the image is not duplicated to another post before deleting it physically.
         *
         * @param string $file Full file name.
         *
         * @return string|null
         */
        public function delete_file_filter($file)
        {
        }
        private function get_file_name($file)
        {
        }
        /**
         * Get file name without a size, i.e. 'a-600x400.png' -> 'a.png'.
         *
         * @param string $file Full file name.
         *
         * @return mixed|string|string[]|null
         */
        private function get_file_name_without_size_from_full_name($file)
        {
        }
    }
    /**
     * WPML_Attachment_Action_Factory
     *
     * @package WPML
     */
    /**
     * Class WPML_Attachment_Action_Factory
     */
    class WPML_Attachment_Action_Factory implements \IWPML_Backend_Action_Loader, \IWPML_Frontend_Action_Loader, \IWPML_AJAX_Action_Loader, \IWPML_Deferred_Action_Loader
    {
        /**
         * Get load action.
         *
         * @return string
         */
        public function get_load_action()
        {
        }
        /**
         * Create attachment action.
         *
         * @return WPML_Attachment_Action
         */
        public function create()
        {
        }
    }
    class WPML_Media_Exception extends \Exception
    {
    }
    class WPML_Set_Attachments_Language implements \IWPML_Action
    {
        const AJAX_ACTION = 'wpml_media_dismiss_starting_help';
        public function add_hooks()
        {
        }
        public function set_languages_notice()
        {
        }
        public function dismiss_wpml_media_starting_help()
        {
        }
    }
}
namespace WPML\Media\Duplication {
    class Hooks
    {
        public static function add()
        {
        }
        public static function syncAttachedFile($meta_id, $object_id, $meta_key, $meta_value)
        {
        }
    }
}
namespace {
    class WPML_Media_Attachments_Duplication
    {
        /** @var  WPML_Model_Attachments */
        private $attachments_model;
        /** @var SitePress */
        private $sitepress;
        private $wpdb;
        private $language_resolution;
        private $original_thumbnail_ids = array();
        /**
         * WPML_Media_Attachments_Duplication constructor.
         *
         * @param SitePress $sitepress
         * @param WPML_Model_Attachments $attachments_model
         *
         * @internal param WPML_WP_API $wpml_wp_api
         */
        public function __construct(\SitePress $sitepress, \WPML_Model_Attachments $attachments_model, \wpdb $wpdb, \WPML_Language_Resolution $language_resolution)
        {
        }
        public function add_hooks()
        {
        }
        private function add_postmeta_hooks()
        {
        }
        private function withPostMetaFiltersDisabled(callable $callback)
        {
        }
        private function is_admin_or_xmlrpc()
        {
        }
        public function save_attachment_actions($post_id)
        {
        }
        private function is_uploading_media_on_wpml_media_screen()
        {
        }
        public function wp_generate_attachment_metadata($metadata, $attachment_id)
        {
        }
        private function update_attachment_metadata($source_attachment_id)
        {
        }
        private function synchronize_attachment_metadata($metadata, $attachment_id)
        {
        }
        private function update_attachment_texts($translation)
        {
        }
        public function save_translated_attachments($post_id)
        {
        }
        private function translate_attachments($attachment_id, $source_language, $override_always_translate_media = \false)
        {
        }
        private function is_uploading_plugin_or_theme()
        {
        }
        public function make_duplicate($master_post_id, $target_lang, $post_array, $target_post_id)
        {
        }
        /**
         * @param int $attachment_id
         * @param int $parent_id
         * @param string $target_language
         *
         * @return int|null
         */
        public function create_duplicate_attachment($attachment_id, $parent_id, $target_language)
        {
        }
        public function sync_on_translation_complete($new_post_id, $fields, $job)
        {
        }
        public function record_original_thumbnail_ids_and_sync($meta_id, $object_id, $meta_key, $meta_value)
        {
        }
        /**
         * @param $pidd int
         * @param $post WP_Post
         */
        function save_post_actions($pidd, $post)
        {
        }
        /**
         * @param $pidd int
         * @param $post WP_Post
         */
        function sync_attachments($pidd, $post)
        {
        }
        /**
         * @param int      $post_id
         * @param int|null $request_post_thumbnail_id
         */
        public function sync_post_thumbnail($post_id, $request_post_thumbnail_id = \null)
        {
        }
        protected function are_post_thumbnails_still_in_sync($source_id, $source_thumbnail_id, $translation)
        {
        }
        private function are_translations_of_each_other($post_id_1, $post_id_2)
        {
        }
        function duplicate_post_attachments($pidd, $icl_trid, $source_lang = \null, $lang = \null)
        {
        }
        /**
         * @param int $post_id
         *
         * @return bool
         */
        private function is_media_marked_to_duplication($post_id)
        {
        }
        /**
         * @param int $post_id
         *
         * @return bool
         */
        private function is_feature_image_marked_to_duplication($post_id)
        {
        }
        /**
         * @param $source_attachment_id
         * @param $pidd
         * @param $lang
         *
         * @return int|null|WP_Error
         */
        public function create_duplicate_attachment_not_static($source_attachment_id, $pidd, $lang)
        {
        }
        private function duplicate_featured_images($limit = 0)
        {
        }
        /**
         * @param int $limit
         *
         * @return array
         */
        public function get_post_thumbnail_map($limit = 0)
        {
        }
        /**
         * @param stdClass $post contains properties `ID` and `post_type`
         * @param array    $thumbnails a map of post ID => thumbnail ID
         */
        public function duplicate_featured_image_in_post($post, $thumbnails = array())
        {
        }
        public function batch_duplicate_featured_images()
        {
        }
        public function batch_duplicate_media()
        {
        }
        private function get_batch_translate_limit($active_languages)
        {
        }
        public function batch_translate_media()
        {
        }
        public function batch_set_initial_language()
        {
        }
        function batch_scan_prepare()
        {
        }
        public function batch_mark_processed()
        {
        }
        public function create_duplicated_media($attachment)
        {
        }
        function set_content_defaults_prepare()
        {
        }
        function set_content_defaults()
        {
        }
        private function set_media_duplication_meta_for_existing_posts($meta_key)
        {
        }
        private function add_missing_media_duplication_meta_values($meta_key)
        {
        }
    }
}
namespace WPML\Media\Duplication {
    abstract class AbstractFactory implements \IWPML_Backend_Action_Loader, \IWPML_Frontend_Action_Loader
    {
        /**
         * @return bool
         */
        protected static function shouldActivateHooks()
        {
        }
    }
}
namespace {
    class WPML_Media_Attachments_Duplication_Factory extends \WPML\Media\Duplication\AbstractFactory
    {
        public function create()
        {
        }
    }
}
namespace WPML\Media\Duplication {
    class HooksFactory extends \WPML\Media\Duplication\AbstractFactory
    {
        public function create()
        {
        }
    }
}
namespace {
    // phpcs:disable PEAR.NamingConventions.ValidClassName.Invalid
    // phpcs:disable PEAR.NamingConventions.ValidClassName.StartWithCapital
    /**
     * Class icl_cache
     */
    class icl_cache
    {
        /** @var array */
        protected $data;
        /** @var string */
        protected $name;
        /** @var bool */
        protected $cache_to_option;
        /** @var bool */
        protected $cache_needs_saving;
        public function __construct($name = '', $cache_to_option = \false)
        {
        }
        public function init()
        {
        }
        public function save_cache_if_required()
        {
        }
        public function get($key)
        {
        }
        public function has_key($key)
        {
        }
        public function set($key, $value)
        {
        }
        public function clear()
        {
        }
    }
    class ICL_AdminNotifier
    {
        public static function init()
        {
        }
        public static function add_script()
        {
        }
        /**
         * @param string $message
         * @param string $type
         */
        public static function add_instant_message($message, $type = '')
        {
        }
        /**
         * @param $message_id
         *
         * @return bool|array
         */
        public static function get_message($message_id)
        {
        }
        public static function message_id_exists($message_id)
        {
        }
        private static function get_messages()
        {
        }
        private static function save_messages($messages)
        {
        }
        /**
         * @param $args
         *    Args attributes:
         *    string        id - An unique identifier for the message
         *    string        msg - The actual message
         *    string        type (optional) - Any string: it will be used as css class fro the message container. A typical value is 'error', but the following strings can be also used: icl-admin-message-information, icl-admin-message-warning
         *    array         classes (optional) - Display the notice only on specific url(s)
         *    bool          hide (optional) - Enable the toggle link to permanently hide the notice
         *    bool          hide_per_user (optional) - Enable the toggle link per user basis (overrides hide option)
         *    bool          dismiss (optional) - Enable the dismiss option
         *    bool          dismiss_per_user (optional) - Enable the dismiss option per user basis (overrides dismiss option)
         *    bool|string   fallback_text (optional) - A message to show when the notice gets hidden
         *    bool|string   fallback_type (optional) - The message type to use in the fallback message (@see $type)
         *    array         fallback_classes (optional) - The message type to use in the fallback message (@see $type)
         *    bool|string   group (optional) - A way to group messages: when displaying messages stored with this method, it's possible to filter them by group (@see ICL_AdminNotifier::displayMessages)
         *    bool          admin_notice (optional) - Hook the rendering to the 'admin_notice' action
         *    string|array  limit_to_page (optional) - Display the notice only on specific page(s)
         */
        public static function add_message($args)
        {
        }
        public static function is_user_dismissed($message_data)
        {
        }
        public static function is_globally_dismissed($message_data)
        {
        }
        public static function is_globally_hidden($message_data)
        {
        }
        public static function hide_message()
        {
        }
        public static function get_message_id()
        {
        }
        public static function show_message()
        {
        }
        public static function engage_message()
        {
        }
        private static function set_message_display($message_id, $show, $action, $action_past, $action_user)
        {
        }
        public static function remove_message($message_id)
        {
        }
        public static function remove_message_group($message_group)
        {
        }
        public static function display_messages($group = \false)
        {
        }
        /**
         * @deprecated deprecated @since version 3.2. Use ICL_AdminNotifier::display_message()
         *
         * @param bool $group
         */
        public static function displayMessages($group = \false)
        {
        }
        public static function admin_notices()
        {
        }
        /**
         * @param string       $id
         * @param string       $message
         * @param string       $type
         * @param string|array $classes
         * @param bool         $hide
         * @param bool         $dismiss
         * @param bool         $admin_notice
         * @param bool         $echo
         *
         * @return string
         */
        private static function display_message($id, $message, $type = '', $classes = array(), $hide = \true, $dismiss = \false, $admin_notice = \false, $echo = \false)
        {
        }
        public static function display_instant_message($message, $type = 'information', $class = \false, $return = \false, $fadeout = \false)
        {
        }
        /**
         * @param $args
         *
         * @return mixed
         */
        private static function sanitize_message_args($args)
        {
        }
        static function troubleshooting_js_data($data)
        {
        }
        static function has_hidden_messages()
        {
        }
        static function troubleshooting()
        {
        }
        static function remove_notifications()
        {
        }
        static function restore_notifications()
        {
        }
        /** Deprecated methods */
        /**
         * @deprecated deprecated @since version 3.2. Use ICL_AdminNotifier::remove_message()
         *
         * @param $message_id
         *
         * @return bool
         */
        public static function removeMessage($message_id)
        {
        }
        /**
         * @deprecated deprecated @since version 3.2
         */
        public static function hideMessage()
        {
        }
        /**
         * @deprecated deprecated @since version 3.2
         *
         * @param string $message
         * @param string $type
         */
        public static function addInstantMessage($message, $type = '')
        {
        }
        /**
         * @deprecated deprecated @since version 3.2
         */
        public static function addScript()
        {
        }
        /**
         * @deprecated deprecated @since version 3.2
         *
         * @param string $id               An unique identifier for the message
         * @param string $msg              The actual message
         * @param string $type             (optional) Any string: it will be used as css class fro the message container. A typical value is 'error', but the following strings can be also used: icl-admin-message-information, icl-admin-message-warning
         * @param bool   $hide             (optional) Enable the toggle link to permanently hide the notice
         * @param bool   $fallback_message (optional) A message to show when the notice gets hidden
         * @param bool   $fallback_type    (optional) The message type to use in the fallback message (@see $type)
         * @param bool   $group            (optional) A way to group messages: when displaying messages stored with this method, it's possible to filter them by group (@see ICL_AdminNotifier::displayMessages)
         * @param bool   $admin_notice     (optional) Hook the rendering to the 'admin_notice' action
         */
        public static function addMessage($id, $msg, $type = '', $hide = \true, $fallback_message = \false, $fallback_type = \false, $group = \false, $admin_notice = \false)
        {
        }
        /**
         * @deprecated deprecated @since version 3.2. Use ICL_AdminNotifier::display_instant_message()
         *
         * @param        $message
         * @param string $type
         * @param bool   $class
         * @param bool   $return
         *
         * @return string
         */
        public static function displayInstantMessage($message, $type = 'information', $class = \false, $return = \false)
        {
        }
        /**
         * @param $message
         *
         * @return string
         */
        public static function sanitize_and_format_message($message)
        {
        }
    }
    /**
     * Class SitePressLanguageSwitcher
     *
     * @deprecated since 3.6.0
     */
    class SitePressLanguageSwitcher
    {
        /**
         * @deprecated since 3.6.0
         *
         * @return string
         */
        static function get_language_selector_footer()
        {
        }
        /**
         * @deprecated since 3.6.0
         */
        function language_selector_footer()
        {
        }
        /**
         * @deprecated since 3.6.0
         *
         * @param $native_name
         * @param bool $translated_name
         * @param bool $show_native_name
         * @param bool $show_translate_name
         * @param bool $include_html
         *
         * @return string
         */
        public function language_display($native_name, $translated_name = \false, $show_native_name = \false, $show_translate_name = \false, $include_html = \true)
        {
        }
    }
    /*
     * NextGen Gallery plugin integration.
     *
     * - Filters the_content
     * -- Adjusts gallery preview image URL from default to current language (2.0.66 <=)
     */
    class WPML_Plugin_Integration_Nexgen_Gallery
    {
        function __construct()
        {
        }
        /**
         * Filters post content and fixes gallery preview images URL.
         *
         * Adjust gallery preview image URL from default to current language.
         * Allows NextGen to match and replace preview images with gallery.
         * NextGen inserts image previews with default language URL.
         *
         * @global SitePress $sitepress
         * @param string $content
         * @return string
         */
        public static function the_content_gallery_preview_images($content)
        {
        }
    }
    class WPML_Post_Comments extends \WPML_WPDB_User
    {
        /**
         * @param wpdb $wpdb
         */
        public function __construct(&$wpdb)
        {
        }
        private function hooks()
        {
        }
        public function count_orphans_action()
        {
        }
        public function get_orphan_comments($return_count = \false, $limit = 10)
        {
        }
        public function delete_orphans_action()
        {
        }
        /**
         * @param $hook
         */
        public function enqueue_scripts($hook)
        {
        }
        public function troubleshooting_action()
        {
        }
        /**
         * @param $how_many
         *
         * @return false|int
         */
        public function delete_orphans($how_many)
        {
        }
        /**
         * @param $post_ids
         */
        private function update_comments_count($post_ids)
        {
        }
        /**
         * @param string|array|int $comment_ids
         *
         * @return mixed
         */
        private function get_post_ids_from_comments_ids($comment_ids)
        {
        }
    }
    class WPML_Post_Edit_Ajax
    {
        const AJAX_ACTION_SWITCH_POST_LANGUAGE = 'wpml_switch_post_language';
        /**
         * For test purposes
         *
         * @var WPML_Custom_Field_Setting_Factory
         */
        public static $post_custom_field_settings;
        /**
         * Ajax handler for adding a term via Ajax.
         */
        public static function wpml_save_term_action()
        {
        }
        public static function save_term_ajax($sitepress, $lang, $taxonomy, $slug, $name, $trid, $description, $meta_data)
        {
        }
        /**
         * Gets the content of a post, its excerpt as well as its title and returns it as an array
         *
         * @param string $content_type
         * @param string $excerpt_type
         * @param int    $trid
         * @param string $lang
         *
         * @return array containing all the fields information
         */
        public static function copy_from_original_fields($content_type, $excerpt_type, $trid, $lang)
        {
        }
        /**
         * Gets the content of a custom posts custom field , its excerpt as well as its title and returns it as an array
         *
         * @param  WP_post $post
         *
         * @return array
         */
        public static function copy_from_original_custom_fields($post)
        {
        }
        /**
         * @param WP_Post $post
         * @return array
         */
        private static function copy_meta_values_from_original($post)
        {
        }
        /**
         * Ajax handler for switching the language of a post.
         */
        public static function wpml_switch_post_language()
        {
        }
        public static function wpml_get_default_lang()
        {
        }
        /**
         * @param array $term
         * @param array $meta_data
         * @param bool  $is_new_term
         *
         * @return bool
         */
        private static function add_term_metadata($term, $meta_data, $is_new_term)
        {
        }
    }
    class ICanLocalizeQuery
    {
        private $site_id;
        private $access_key;
        private $error = \null;
        private $sitepress;
        private $wpml_icl_client;
        function __construct($site_id = \null, $access_key = \null, \SitePress $sitepress = \null, $wpml_icl_client = \null)
        {
        }
        public function setting($setting)
        {
        }
        public function error()
        {
        }
        function updateAccount($data)
        {
        }
        /**
         * @param bool $force
         *
         * @return array of website details returned from a direct API call to ICL
         */
        function get_website_details($force = \false)
        {
        }
        private function request($request, $method = 'GET', $formvars = \null)
        {
        }
    }
    class WPML_Mobile_Detect
    {
        protected $scriptVersion = '2.5.7';
        // External info.
        protected $userAgent = \null;
        protected $httpHeaders;
        // Arrays holding all detection rules.
        protected $mobileDetectionRules = \null;
        protected $mobileDetectionRulesExtended = \null;
        // Type of detection to use.
        protected $detectionType = 'mobile';
        // mobile, extended @todo: refactor this.
        // List of mobile devices (phones)
        protected $phoneDevices = array(
            'iPhone' => '\\biPhone.*Mobile|\\biPod|\\biTunes',
            'BlackBerry' => 'BlackBerry|\\bBB10\\b|rim[0-9]+',
            'HTC' => 'HTC|HTC.*(Sensation|Evo|Vision|Explorer|6800|8100|8900|A7272|S510e|C110e|Legend|Desire|T8282)|APX515CKT|Qtek9090|APA9292KT|HD_mini|Sensation.*Z710e|PG86100|Z715e|Desire.*(A8181|HD)|ADR6200|ADR6425|001HT|Inspire 4G',
            'Nexus' => 'Nexus One|Nexus S|Galaxy.*Nexus|Android.*Nexus.*Mobile',
            // @todo: Is 'Dell Streak' a tablet or a phone? ;)
            'Dell' => 'Dell.*Streak|Dell.*Aero|Dell.*Venue|DELL.*Venue Pro|Dell Flash|Dell Smoke|Dell Mini 3iX|XCD28|XCD35|\\b001DL\\b|\\b101DL\\b|\\bGS01\\b',
            'Motorola' => 'Motorola|\\bDroid\\b.*Build|DROIDX|Android.*Xoom|HRI39|MOT-|A1260|A1680|A555|A853|A855|A953|A955|A956|Motorola.*ELECTRIFY|Motorola.*i1|i867|i940|MB200|MB300|MB501|MB502|MB508|MB511|MB520|MB525|MB526|MB611|MB612|MB632|MB810|MB855|MB860|MB861|MB865|MB870|ME501|ME502|ME511|ME525|ME600|ME632|ME722|ME811|ME860|ME863|ME865|MT620|MT710|MT716|MT720|MT810|MT870|MT917|Motorola.*TITANIUM|WX435|WX445|XT300|XT301|XT311|XT316|XT317|XT319|XT320|XT390|XT502|XT530|XT531|XT532|XT535|XT603|XT610|XT611|XT615|XT681|XT701|XT702|XT711|XT720|XT800|XT806|XT860|XT862|XT875|XT882|XT883|XT894|XT909|XT910|XT912|XT928',
            'Samsung' => 'Samsung|BGT-S5230|GT-B2100|GT-B2700|GT-B2710|GT-B3210|GT-B3310|GT-B3410|GT-B3730|GT-B3740|GT-B5510|GT-B5512|GT-B5722|GT-B6520|GT-B7300|GT-B7320|GT-B7330|GT-B7350|GT-B7510|GT-B7722|GT-B7800|GT-C3010|GT-C3011|GT-C3060|GT-C3200|GT-C3212|GT-C3212I|GT-C3222|GT-C3300|GT-C3300K|GT-C3303|GT-C3303K|GT-C3310|GT-C3322|GT-C3330|GT-C3350|GT-C3500|GT-C3510|GT-C3530|GT-C3630|GT-C3780|GT-C5010|GT-C5212|GT-C6620|GT-C6625|GT-C6712|GT-E1050|GT-E1070|GT-E1075|GT-E1080|GT-E1081|GT-E1085|GT-E1087|GT-E1100|GT-E1107|GT-E1110|GT-E1120|GT-E1125|GT-E1130|GT-E1160|GT-E1170|GT-E1175|GT-E1180|GT-E1182|GT-E1200|GT-E1210|GT-E1225|GT-E1230|GT-E1390|GT-E2100|GT-E2120|GT-E2121|GT-E2152|GT-E2220|GT-E2222|GT-E2230|GT-E2232|GT-E2250|GT-E2370|GT-E2550|GT-E2652|GT-E3210|GT-E3213|GT-I5500|GT-I5503|GT-I5700|GT-I5800|GT-I5801|GT-I6410|GT-I6420|GT-I7110|GT-I7410|GT-I7500|GT-I8000|GT-I8150|GT-I8160|GT-I8320|GT-I8330|GT-I8350|GT-I8530|GT-I8700|GT-I8703|GT-I8910|GT-I9000|GT-I9001|GT-I9003|GT-I9010|GT-I9020|GT-I9023|GT-I9070|GT-I9100|GT-I9103|GT-I9220|GT-I9250|GT-I9300|GT-I9300 |GT-M3510|GT-M5650|GT-M7500|GT-M7600|GT-M7603|GT-M8800|GT-M8910|GT-N7000|GT-P6810|GT-P7100|GT-S3110|GT-S3310|GT-S3350|GT-S3353|GT-S3370|GT-S3650|GT-S3653|GT-S3770|GT-S3850|GT-S5210|GT-S5220|GT-S5229|GT-S5230|GT-S5233|GT-S5250|GT-S5253|GT-S5260|GT-S5263|GT-S5270|GT-S5300|GT-S5330|GT-S5350|GT-S5360|GT-S5363|GT-S5369|GT-S5380|GT-S5380D|GT-S5560|GT-S5570|GT-S5600|GT-S5603|GT-S5610|GT-S5620|GT-S5660|GT-S5670|GT-S5690|GT-S5750|GT-S5780|GT-S5830|GT-S5839|GT-S6102|GT-S6500|GT-S7070|GT-S7200|GT-S7220|GT-S7230|GT-S7233|GT-S7250|GT-S7500|GT-S7530|GT-S7550|GT-S7562|GT-S8000|GT-S8003|GT-S8500|GT-S8530|GT-S8600|SCH-A310|SCH-A530|SCH-A570|SCH-A610|SCH-A630|SCH-A650|SCH-A790|SCH-A795|SCH-A850|SCH-A870|SCH-A890|SCH-A930|SCH-A950|SCH-A970|SCH-A990|SCH-I100|SCH-I110|SCH-I400|SCH-I405|SCH-I500|SCH-I510|SCH-I515|SCH-I600|SCH-I730|SCH-I760|SCH-I770|SCH-I830|SCH-I910|SCH-I920|SCH-LC11|SCH-N150|SCH-N300|SCH-R100|SCH-R300|SCH-R351|SCH-R400|SCH-R410|SCH-T300|SCH-U310|SCH-U320|SCH-U350|SCH-U360|SCH-U365|SCH-U370|SCH-U380|SCH-U410|SCH-U430|SCH-U450|SCH-U460|SCH-U470|SCH-U490|SCH-U540|SCH-U550|SCH-U620|SCH-U640|SCH-U650|SCH-U660|SCH-U700|SCH-U740|SCH-U750|SCH-U810|SCH-U820|SCH-U900|SCH-U940|SCH-U960|SCS-26UC|SGH-A107|SGH-A117|SGH-A127|SGH-A137|SGH-A157|SGH-A167|SGH-A177|SGH-A187|SGH-A197|SGH-A227|SGH-A237|SGH-A257|SGH-A437|SGH-A517|SGH-A597|SGH-A637|SGH-A657|SGH-A667|SGH-A687|SGH-A697|SGH-A707|SGH-A717|SGH-A727|SGH-A737|SGH-A747|SGH-A767|SGH-A777|SGH-A797|SGH-A817|SGH-A827|SGH-A837|SGH-A847|SGH-A867|SGH-A877|SGH-A887|SGH-A897|SGH-A927|SGH-B100|SGH-B130|SGH-B200|SGH-B220|SGH-C100|SGH-C110|SGH-C120|SGH-C130|SGH-C140|SGH-C160|SGH-C170|SGH-C180|SGH-C200|SGH-C207|SGH-C210|SGH-C225|SGH-C230|SGH-C417|SGH-C450|SGH-D307|SGH-D347|SGH-D357|SGH-D407|SGH-D415|SGH-D780|SGH-D807|SGH-D980|SGH-E105|SGH-E200|SGH-E315|SGH-E316|SGH-E317|SGH-E335|SGH-E590|SGH-E635|SGH-E715|SGH-E890|SGH-F300|SGH-F480|SGH-I200|SGH-I300|SGH-I320|SGH-I550|SGH-I577|SGH-I600|SGH-I607|SGH-I617|SGH-I627|SGH-I637|SGH-I677|SGH-I700|SGH-I717|SGH-I727|SGH-i747M|SGH-I777|SGH-I780|SGH-I827|SGH-I847|SGH-I857|SGH-I896|SGH-I897|SGH-I900|SGH-I907|SGH-I917|SGH-I927|SGH-I937|SGH-I997|SGH-J150|SGH-J200|SGH-L170|SGH-L700|SGH-M110|SGH-M150|SGH-M200|SGH-N105|SGH-N500|SGH-N600|SGH-N620|SGH-N625|SGH-N700|SGH-N710|SGH-P107|SGH-P207|SGH-P300|SGH-P310|SGH-P520|SGH-P735|SGH-P777|SGH-Q105|SGH-R210|SGH-R220|SGH-R225|SGH-S105|SGH-S307|SGH-T109|SGH-T119|SGH-T139|SGH-T209|SGH-T219|SGH-T229|SGH-T239|SGH-T249|SGH-T259|SGH-T309|SGH-T319|SGH-T329|SGH-T339|SGH-T349|SGH-T359|SGH-T369|SGH-T379|SGH-T409|SGH-T429|SGH-T439|SGH-T459|SGH-T469|SGH-T479|SGH-T499|SGH-T509|SGH-T519|SGH-T539|SGH-T559|SGH-T589|SGH-T609|SGH-T619|SGH-T629|SGH-T639|SGH-T659|SGH-T669|SGH-T679|SGH-T709|SGH-T719|SGH-T729|SGH-T739|SGH-T746|SGH-T749|SGH-T759|SGH-T769|SGH-T809|SGH-T819|SGH-T839|SGH-T919|SGH-T929|SGH-T939|SGH-T959|SGH-T989|SGH-U100|SGH-U200|SGH-U800|SGH-V205|SGH-V206|SGH-X100|SGH-X105|SGH-X120|SGH-X140|SGH-X426|SGH-X427|SGH-X475|SGH-X495|SGH-X497|SGH-X507|SGH-X600|SGH-X610|SGH-X620|SGH-X630|SGH-X700|SGH-X820|SGH-X890|SGH-Z130|SGH-Z150|SGH-Z170|SGH-ZX10|SGH-ZX20|SHW-M110|SPH-A120|SPH-A400|SPH-A420|SPH-A460|SPH-A500|SPH-A560|SPH-A600|SPH-A620|SPH-A660|SPH-A700|SPH-A740|SPH-A760|SPH-A790|SPH-A800|SPH-A820|SPH-A840|SPH-A880|SPH-A900|SPH-A940|SPH-A960|SPH-D600|SPH-D700|SPH-D710|SPH-D720|SPH-I300|SPH-I325|SPH-I330|SPH-I350|SPH-I500|SPH-I600|SPH-I700|SPH-L700|SPH-M100|SPH-M220|SPH-M240|SPH-M300|SPH-M305|SPH-M320|SPH-M330|SPH-M350|SPH-M360|SPH-M370|SPH-M380|SPH-M510|SPH-M540|SPH-M550|SPH-M560|SPH-M570|SPH-M580|SPH-M610|SPH-M620|SPH-M630|SPH-M800|SPH-M810|SPH-M850|SPH-M900|SPH-M910|SPH-M920|SPH-M930|SPH-N100|SPH-N200|SPH-N240|SPH-N300|SPH-N400|SPH-Z400|SWC-E100|SCH-i909|GT-N7100|GT-N8010',
            'Sony' => 'sony|SonyEricsson|SonyEricssonLT15iv|LT18i|E10i',
            'Asus' => 'Asus.*Galaxy',
            'Palm' => 'PalmSource|Palm',
            // avantgo|blazer|elaine|hiptop|plucker|xiino ; @todo - complete the regex.
            'Vertu' => 'Vertu|Vertu.*Ltd|Vertu.*Ascent|Vertu.*Ayxta|Vertu.*Constellation(F|Quest)?|Vertu.*Monika|Vertu.*Signature',
            // Just for fun ;)
            // @ref: http://www.pantech.co.kr/en/prod/prodList.do?gbrand=VEGA (PANTECH)
            // Most of the VEGA devices are legacy. PANTECH seem to be newer devices based on Android.
            'Pantech' => 'PANTECH|IM-A850S|IM-A840S|IM-A830L|IM-A830K|IM-A830S|IM-A820L|IM-A810K|IM-A810S|IM-A800S|IM-T100K|IM-A725L|IM-A780L|IM-A775C|IM-A770K|IM-A760S|IM-A750K|IM-A740S|IM-A730S|IM-A720L|IM-A710K|IM-A690L|IM-A690S|IM-A650S|IM-A630K|IM-A600S|VEGA PTL21|PT003|P8010|ADR910L|P6030|P6020|P9070|P4100|P9060|P5000|CDM8992|TXT8045|ADR8995|IS11PT|P2030|P6010|P8000|PT002|IS06|CDM8999|P9050|PT001|TXT8040|P2020|P9020|P2000|P7040|P7000|C790',
            // @ref: http://www.fly-phone.com/devices/smartphones/ ; Included only smartphones.
            'Fly' => 'IQ230|IQ444|IQ450|IQ440|IQ442|IQ441|IQ245|IQ256|IQ236|IQ255|IQ235|IQ245|IQ275|IQ240|IQ285|IQ280|IQ270|IQ260|IQ250',
            // Added simvalley mobile just for fun. They have some interesting devices.
            // @ref: http://www.simvalley.fr/telephonie---gps-_22_telephonie-mobile_telephones_.html
            'SimValley' => '\\b(SP-80|XT-930|SX-340|XT-930|SX-310|SP-360|SP60|SPT-800|SP-120|SPT-800|SP-140|SPX-5|SPX-8|SP-100|SPX-8|SPX-12)\\b',
            // @Tapatalk is a mobile app; @ref: http://support.tapatalk.com/threads/smf-2-0-2-os-and-browser-detection-plugin-and-tapatalk.15565/#post-79039
            'GenericPhone' => 'Tapatalk|PDA;|PPC;|SAGEM|mmp|pocket|psp|symbian|Smartphone|smartfon|treo|up.browser|up.link|vodafone|wap|nokia|Series40|Series60|S60|SonyEricsson|N900|MAUI.*WAP.*Browser|LG-P500',
        );
        // List of tablet devices.
        protected $tabletDevices = array(
            'iPad' => 'iPad|iPad.*Mobile',
            // @todo: check for mobile friendly emails topic.
            'NexusTablet' => '^.*Android.*Nexus(((?:(?!Mobile))|(?:(\\s(7|10).+))).)*$',
            'SamsungTablet' => 'SAMSUNG.*Tablet|Galaxy.*Tab|SC-01C|GT-P1000|GT-P1010|GT-P6210|GT-P6800|GT-P6810|GT-P7100|GT-P7300|GT-P7310|GT-P7500|GT-P7510|SCH-I800|SCH-I815|SCH-I905|SGH-I957|SGH-I987|SGH-T849|SGH-T859|SGH-T869|SPH-P100|GT-P3100|GT-P3110|GT-P5100|GT-P5110|GT-P6200|GT-P7320|GT-P7511|GT-N8000|GT-P8510|SGH-I497|SPH-P500|SGH-T779|SCH-I705|SCH-I915|GT-N8013|GT-P3113|GT-P5113|GT-P8110|GT-N8010|GT-N8005|GT-N8020|GT-P1013|GT-P6201|GT-P6810|GT-P7501',
            // @reference: http://www.labnol.org/software/kindle-user-agent-string/20378/
            'Kindle' => 'Kindle|Silk.*Accelerated',
            'AsusTablet' => 'Transformer|TF101',
            'BlackBerryTablet' => 'PlayBook|RIM Tablet',
            'HTCtablet' => 'HTC Flyer|HTC Jetstream|HTC-P715a|HTC EVO View 4G|PG41200',
            'MotorolaTablet' => 'xoom|sholest|MZ615|MZ605|MZ505|MZ601|MZ602|MZ603|MZ604|MZ606|MZ607|MZ608|MZ609|MZ615|MZ616|MZ617',
            'NookTablet' => 'Android.*Nook|NookColor|nook browser|BNTV250A|LogicPD Zoom2',
            // @ref: http://www.acer.ro/ac/ro/RO/content/drivers
            // @ref: http://www.packardbell.co.uk/pb/en/GB/content/download (Packard Bell is part of Acer)
            'AcerTablet' => 'Android.*\\b(A100|A101|A110|A200|A210|A211|A500|A501|A510|A511|A700|A701|W500|W500P|W501|W501P|W510|W511|W700|G100|G100W|B1-A71)\\b',
            // @ref: http://eu.computers.toshiba-europe.com/innovation/family/Tablets/1098744/banner_id/tablet_footerlink/
            // @ref: http://us.toshiba.com/tablets/tablet-finder
            // @ref: http://www.toshiba.co.jp/regza/tablet/
            'ToshibaTablet' => 'Android.*(AT100|AT105|AT200|AT205|AT270|AT275|AT300|AT305|AT1S5|AT500|AT570|AT700|AT830)',
            // @ref: http://www.nttdocomo.co.jp/english/service/developer/smart_phone/technical_info/spec/index.html
            'LGTablet' => '\\bL-06C|LG-V900|LG-V909',
            'YarvikTablet' => 'Android.*(TAB210|TAB211|TAB224|TAB250|TAB260|TAB264|TAB310|TAB360|TAB364|TAB410|TAB411|TAB420|TAB424|TAB450|TAB460|TAB461|TAB464|TAB465|TAB467|TAB468)',
            'MedionTablet' => 'Android.*\\bOYO\\b|LIFE.*(P9212|P9514|P9516|S9512)|LIFETAB',
            'ArnovaTablet' => 'AN10G2|AN7bG3|AN7fG3|AN8G3|AN8cG3|AN7G3|AN9G3|AN7dG3|AN7dG3ST|AN7dG3ChildPad|AN10bG3|AN10bG3DT',
            // @reference: http://wiki.archosfans.com/index.php?title=Main_Page
            'ArchosTablet' => 'Android.*ARCHOS|101G9|80G9',
            // @reference: http://en.wikipedia.org/wiki/NOVO7
            'AinolTablet' => 'NOVO7|Novo7Aurora|Novo7Basic|NOVO7PALADIN',
            // @todo: inspect http://esupport.sony.com/US/p/select-system.pl?DIRECTOR=DRIVER
            // @ref: Readers http://www.atsuhiro-me.net/ebook/sony-reader/sony-reader-web-browser
            // @ref: http://www.sony.jp/support/tablet/
            'SonyTablet' => 'Sony Tablet|Sony Tablet S|SGPT12|SGPT121|SGPT122|SGPT123|SGPT111|SGPT112|SGPT113|SGPT211|SGPT213|EBRD1101|EBRD1102|EBRD1201',
            // @ref: db + http://www.cube-tablet.com/buy-products.html
            'CubeTablet' => 'Android.*(K8GT|U9GT|U10GT|U16GT|U17GT|U18GT|U19GT|U20GT|U23GT|U30GT)|CUBE U8GT',
            // @ref: http://www.cobyusa.com/?p=pcat&pcat_id=3001
            'CobyTablet' => 'MID1042|MID1045|MID1125|MID1126|MID7012|MID7014|MID7034|MID7035|MID7036|MID7042|MID7048|MID7127|MID8042|MID8048|MID8127|MID9042|MID9740|MID9742|MID7022|MID7010',
            // @ref: http://pdadb.net/index.php?m=pdalist&list=SMiT (NoName Chinese Tablets)
            // @ref: http://www.imp3.net/14/show.php?itemid=20454
            'SMiTTablet' => 'Android.*(\\bMID\\b|MID-560|MTV-T1200|MTV-PND531|MTV-P1101|MTV-PND530)',
            // @ref: http://www.rock-chips.com/index.php?do=prod&pid=2
            'RockChipTablet' => 'Android.*(RK2818|RK2808A|RK2918|RK3066)|RK2738|RK2808A',
            // @ref: http://www.telstra.com.au/home-phone/thub-2/
            'TelstraTablet' => 'T-Hub2',
            // @ref: http://www.fly-phone.com/devices/tablets/ ; http://www.fly-phone.com/service/
            'FlyTablet' => 'IQ310|Fly Vision',
            // @ref: http://www.bqreaders.com/gb/tablets-prices-sale.html
            'bqTablet' => 'bq.*(Elcano|Curie|Edison|Maxwell|Kepler|Pascal|Tesla|Hypatia|Platon|Newton|Livingstone|Cervantes|Avant)',
            // @ref: http://www.huaweidevice.com/worldwide/productFamily.do?method=index&directoryId=5011&treeId=3290
            // @ref: http://www.huaweidevice.com/worldwide/downloadCenter.do?method=index&directoryId=3372&treeId=0&tb=1&type=software (including legacy tablets)
            'HuaweiTablet' => 'MediaPad|IDEOS S7|S7-201c|S7-202u|S7-101|S7-103|S7-104|S7-105|S7-106|S7-201|S7-Slim',
            // Nec or Medias Tab
            'NecTablet' => '\\bN-06D|\\bN-08D',
            // Broncho Tablets: http://www.broncho.cn/ (hard to find)
            'BronchoTablet' => 'Broncho.*(N701|N708|N802|a710)',
            // @ref: http://versusuk.com/support.html
            'VersusTablet' => 'TOUCHPAD.*[78910]',
            // @ref: http://www.zync.in/index.php/our-products/tablet-phablets
            'ZyncTablet' => 'z1000|Z99 2G|z99|z930|z999|z990|z909|Z919|z900',
            // @ref: https://www.nabitablet.com/
            'NabiTablet' => 'Android.*\\bNabi',
            // @note: Avoid detecting 'PLAYSTATION 3' as mobile.
            'PlaystationTablet' => 'Playstation.*(Portable|Vita)',
            'GenericTablet' => 'Android.*\\b97D\\b|Tablet(?!.*PC)|ViewPad7|MID7015|BNTV250A|LogicPD Zoom2|\\bA7EB\\b|CatNova8|A1_07|CT704|CT1002|\\bM721\\b|hp-tablet',
        );
        // List of mobile Operating Systems.
        protected $operatingSystems = array(
            'AndroidOS' => 'Android',
            'BlackBerryOS' => 'blackberry|\\bBB10\\b|rim tablet os',
            'PalmOS' => 'PalmOS|avantgo|blazer|elaine|hiptop|palm|plucker|xiino',
            'SymbianOS' => 'Symbian|SymbOS|Series60|Series40|SYB-[0-9]+|\\bS60\\b',
            // @reference: http://en.wikipedia.org/wiki/Windows_Mobile
            'WindowsMobileOS' => 'Windows CE.*(PPC|Smartphone|Mobile|[0-9]{3}x[0-9]{3})|Window Mobile|Windows Phone [0-9.]+|WCE;',
            // @reference: http://en.wikipedia.org/wiki/Windows_Phone
            // http://wifeng.cn/?r=blog&a=view&id=106
            // http://nicksnettravels.builttoroam.com/post/2011/01/10/Bogus-Windows-Phone-7-User-Agent-String.aspx
            'WindowsPhoneOS' => 'Windows Phone OS|XBLWP7|ZuneWP7',
            'iOS' => '\\biPhone.*Mobile|\\biPod|\\biPad',
            // http://en.wikipedia.org/wiki/MeeGo
            // @todo: research MeeGo in UAs
            'MeeGoOS' => 'MeeGo',
            // http://en.wikipedia.org/wiki/Maemo
            // @todo: research Maemo in UAs
            'MaemoOS' => 'Maemo',
            'JavaOS' => 'J2ME/MIDP|Java/',
            'webOS' => 'webOS|hpwOS',
            'badaOS' => '\\bBada\\b',
            'BREWOS' => 'BREW',
        );
        // List of mobile User Agents.
        protected $userAgents = array(
            // @reference: https://developers.google.com/chrome/mobile/docs/user-agent
            'Chrome' => '\\bCrMo\\b|CriOS|Android.*Chrome/[.0-9]* (Mobile)?',
            'Dolfin' => '\\bDolfin\\b',
            'Opera' => 'Opera.*Mini|Opera.*Mobi|Android.*Opera',
            'Skyfire' => 'Skyfire',
            'IE' => 'IEMobile|MSIEMobile',
            'Firefox' => 'fennec|firefox.*maemo|(Mobile|Tablet).*Firefox|Firefox.*Mobile',
            'Bolt' => 'bolt',
            'TeaShark' => 'teashark',
            'Blazer' => 'Blazer',
            // @reference: http://developer.apple.com/library/safari/#documentation/AppleApplications/Reference/SafariWebContent/OptimizingforSafarioniPhone/OptimizingforSafarioniPhone.html#//apple_ref/doc/uid/TP40006517-SW3
            'Safari' => 'Version.*Mobile.*Safari|Safari.*Mobile',
            // @ref: http://en.wikipedia.org/wiki/Midori_(web_browser)
            //'Midori'          => 'midori',
            'Tizen' => 'Tizen',
            'UCBrowser' => 'UC.*Browser|UCWEB',
            // @ref: https://github.com/serbanghita/Mobile-Detect/issues/7
            'DiigoBrowser' => 'DiigoBrowser',
            // http://www.puffinbrowser.com/index.php
            'Puffin' => 'Puffin',
            // @ref: http://mercury-browser.com/index.html
            'Mercury' => '\\bMercury\\b',
            // @reference: http://en.wikipedia.org/wiki/Minimo
            // http://en.wikipedia.org/wiki/Vision_Mobile_Browser
            'GenericBrowser' => 'NokiaBrowser|OviBrowser|SEMC.*Browser|FlyFlow|Minimo|NetFront|Novarra-Vision',
        );
        // Utilities.
        protected $utilities = array(
            'TV' => 'SonyDTV115',
            // experimental
            'WebKit' => '(webkit)[ /]([\\w.]+)',
            'Bot' => 'Googlebot|DoCoMo|YandexBot|bingbot|ia_archiver|AhrefsBot|Ezooms|GSLFbot|WBSearchBot|Twitterbot|TweetmemeBot|Twikle|PaperLiBot|Wotbox|UnwindFetchor|facebookexternalhit',
            'MobileBot' => 'Googlebot-Mobile|DoCoMo|YahooSeeker/M1A1-R2D2',
        );
        // Properties list.
        // @reference: http://user-agent-string.info/list-of-ua#Mobile Browser
        const VER = '([\\w._]+)';
        protected $properties = array(
            // Build
            'Mobile' => 'Mobile/[VER]',
            'Build' => 'Build/[VER]',
            'Version' => 'Version/[VER]',
            'VendorID' => 'VendorID/[VER]',
            // Devices
            'iPad' => 'iPad.*CPU[a-z ]+[VER]',
            'iPhone' => 'iPhone.*CPU[a-z ]+[VER]',
            'iPod' => 'iPod.*CPU[a-z ]+[VER]',
            //'BlackBerry'    => array('BlackBerry[VER]', 'BlackBerry [VER];'),
            'Kindle' => 'Kindle/[VER]',
            // Browser
            'Chrome' => 'Chrome/[VER]',
            'CriOS' => 'CriOS/[VER]',
            'Dolfin' => 'Dolfin/[VER]',
            // @reference: https://developer.mozilla.org/en-US/docs/User_Agent_Strings_Reference
            'Firefox' => 'Firefox/[VER]',
            'Fennec' => 'Fennec/[VER]',
            // @reference: http://msdn.microsoft.com/en-us/library/ms537503(v=vs.85).aspx
            'IEMobile' => array('IEMobile/[VER];', 'IEMobile [VER]'),
            'MSIE' => 'MSIE [VER];',
            // http://en.wikipedia.org/wiki/NetFront
            'NetFront' => 'NetFront/[VER]',
            'NokiaBrowser' => 'NokiaBrowser/[VER]',
            'Opera' => 'Version/[VER]',
            'Opera Mini' => 'Opera Mini/[VER]',
            'Opera Mobi' => 'Version/[VER]',
            'UC Browser' => 'UC Browser[VER]',
            'Safari' => 'Version/[VER]',
            'Skyfire' => 'Skyfire/[VER]',
            'Tizen' => 'Tizen/[VER]',
            'Webkit' => 'webkit[ /][VER]',
            // Engine
            'Gecko' => 'Gecko/[VER]',
            'Trident' => 'Trident/[VER]',
            'Presto' => 'Presto/[VER]',
            // OS
            'Android' => 'Android [VER]',
            'BlackBerry' => array('BlackBerry[\\w]+/[VER]', 'BlackBerry.*Version/[VER]'),
            'BREW' => 'BREW [VER]',
            'Java' => 'Java/[VER]',
            // @reference: http://windowsteamblog.com/windows_phone/b/wpdev/archive/2011/08/29/introducing-the-ie9-on-windows-phone-mango-user-agent-string.aspx
            // @reference: http://en.wikipedia.org/wiki/Windows_NT#Releases
            'Windows Phone OS' => 'Windows Phone OS [VER]',
            'Windows Phone' => 'Windows Phone [VER]',
            'Windows CE' => 'Windows CE/[VER]',
            // http://social.msdn.microsoft.com/Forums/en-US/windowsdeveloperpreviewgeneral/thread/6be392da-4d2f-41b4-8354-8dcee20c85cd
            'Windows NT' => 'Windows NT [VER]',
            'Symbian' => array('SymbianOS/[VER]', 'Symbian/[VER]'),
            'webOS' => array('webOS/[VER]', 'hpwOS/[VER];'),
        );
        function __construct()
        {
        }
        /**
         * Get the current script version.
         * This is useful for the demo.php file,
         * so people can check on what version they are testing
         * for mobile devices.
         */
        public function getScriptVersion()
        {
        }
        public function setHttpHeaders($httpHeaders = \null)
        {
        }
        public function getHttpHeaders()
        {
        }
        public function setUserAgent($userAgent = \null)
        {
        }
        public function getUserAgent()
        {
        }
        function setDetectionType($type = \null)
        {
        }
        public function getPhoneDevices()
        {
        }
        public function getTabletDevices()
        {
        }
        /**
         * Method sets the mobile detection rules.
         *
         * This method is used for the magic methods $detect->is*()
         */
        public function setMobileDetectionRules()
        {
        }
        /**
         * Method sets the mobile detection rules + utilities.
         * The reason this is separate is because utilities rules
         * don't necessary imply mobile.
         *
         * This method is used inside the new $detect->is('stuff') method.
         *
         * @return bool
         */
        public function setMobileDetectionRulesExtended()
        {
        }
        /**
         * @return array
         */
        public function getRules()
        {
        }
        /**
        * Check the HTTP headers for signs of mobile.
        * This is the fastest mobile check possible; it's used
        * inside isMobile() method.
        * @return boolean
        */
        public function checkHttpHeadersForMobile()
        {
        }
        /**
         * Magic overloading method.
         *
         * @method boolean is[...]()
         * @param string $name
         * @param array $arguments
         * @return mixed
         */
        public function __call($name, $arguments)
        {
        }
        /**
         * Find a detection rule that matches the current User-agent.
         *
         * @param null $userAgent deprecated
         * @return boolean
         */
        private function matchDetectionRulesAgainstUA($userAgent = \null)
        {
        }
        /**
         * Search for a certain key in the rules array.
         * If the key is found the try to match the corresponding
         * regex agains the User-agent.
         *
         * @param string $key
         * @param null $userAgent deprecated
         * @return mixed
         */
        private function matchUAAgainstKey($key, $userAgent = \null)
        {
        }
        /**
         * Check if the device is mobile.
         * Returns true if any type of mobile device detected, including special ones
         * @param null $userAgent deprecated
         * @param null $httpHeaders deprecated
         * @return bool
         */
        public function isMobile($userAgent = \null, $httpHeaders = \null)
        {
        }
        /**
         * Check if the device is a tablet.
         * Return true if any type of tablet device is detected.
         *
         * @param null $userAgent deprecated
         * @param null $httpHeaders deprecated
         * @return bool
         */
        public function isTablet($userAgent = \null, $httpHeaders = \null)
        {
        }
        /**
         * This method checks for a certain property in the
         * userAgent.
         * @todo: The httpHeaders part is not yet used.
         *
         * @param $key
         * @param string $userAgent deprecated
         * @param string $httpHeaders deprecated
         * @return bool|int|null
         */
        public function is($key, $userAgent = \null, $httpHeaders = \null)
        {
        }
        public function getOperatingSystems()
        {
        }
        /**
         * Some detection rules are relative (not standard),
         * because of the diversity of devices, vendors and
         * their conventions in representing the User-Agent or
         * the HTTP headers.
         *
         * This method will be used to check custom regexes against
         * the User-Agent string.
         *
         * @param $regex
         * @param string $userAgent
         * @return bool
         *
         * @todo: search in the HTTP headers too.
         */
        function match($regex, $userAgent = \null)
        {
        }
        /**
         * Get the properties array.
         * @return array
         */
        function getProperties()
        {
        }
        /**
         * Prepare the version number.
         *
         * @param $ver
         * @return int
         */
        function prepareVersionNo($ver)
        {
        }
        /**
         * Check the version of the given property in the User-Agent.
         * Will return a float number. (eg. 2_0 will return 2.0, 4.3.1 will return 4.31)
         *
         * @param string $propertyName
         * @return mixed $version
         */
        function version($propertyName)
        {
        }
        function mobileGrade()
        {
        }
    }
    /**
     * Main SitePress Class
     *
     * @package wpml-core
     */
    class SitePress extends \WPML_WPDB_User implements \IWPML_Current_Language, \IWPML_Taxonomy_State
    {
        const AFTER_ST_PLUGIN_LOADED_HOOK = -\PHP_INT_MAX + 1;
        /** @var WPML_Taxonomy_Translation */
        private $taxonomy_translation;
        private $template_real_path;
        /** @var WPML_Post_Translation $post_translation */
        private $post_translation;
        /** @var WPML_Terms_Translations $term_translation */
        private $term_translation;
        /** @var WPML_Post_Duplication $post_duplication */
        private $post_duplication;
        /** @var WPML_Term_Actions $term_actions */
        private $term_actions;
        /** @var WPML_Admin_Scripts_Setup $scripts_handler */
        private $scripts_handler;
        /** @var WPML_Set_Language $language_setter */
        private $language_setter;
        /** @var WPML_Term_Query_Filter $term_query_filter */
        private $term_query_filter;
        /** @var array $settings */
        private $settings;
        private $active_languages = array();
        private $_admin_notices = array();
        private $this_lang;
        private $wp_query;
        private $admin_language;
        private $user_preferences = array();
        /** @var  WPML_WP_API $wp_api */
        private $wp_api;
        /** @var WPML_Records $records */
        private $records;
        /** @var  @var int $loaded_blog_id */
        private $loaded_blog_id;
        /**
         * @var string $original_language caches the initial language when calling
         * \SitePress::switch_lang() for the first time.
         */
        private $original_language;
        /**
         * @var string $original_language_cookie caches the initial language value
         * in the user's cookie when calling \SitePress::switch_lang() for the
         * first time.
         */
        private $original_language_cookie;
        /** @var  WPML_Locale $locale_utils */
        public $locale_utils;
        public $footer_preview = \false;
        /**
         * @var icl_cache
         */
        public $icl_translations_cache;
        /**
         * @var WPML_Flags
         */
        private $flags;
        /**
         * @var icl_cache
         */
        public $icl_language_name_cache;
        /**
         * @var icl_cache
         */
        public $icl_term_taxonomy_cache;
        /** @var WPML_Term_Adjust_Id */
        private $wpml_term_adjust_id = \null;
        /**
         * @var array $current_request_data - Use to store temporary information during the current request
         */
        private $current_request_data = array();
        function __construct()
        {
        }
        /**
         * @since 3.2
         */
        public function api_hooks()
        {
        }
        function init()
        {
        }
        /**
         * Sets the current language in \SitePress::$this_lang, redirects if
         * frontend requests point to incomplete or incorrect urls, un-sets the
         * $_GET['lang'] and $_GET['admin_bar'] values so that upload.php is able to
         * enqueue 'media-grid' correctly without url parameters breaking its
         * functionality.
         */
        public function maybe_set_this_lang()
        {
        }
        function load_dependencies()
        {
        }
        /**
         * Sets up all term/taxonomy actions for use outside Translations Management or the Post Edit screen
         */
        function set_term_filters_and_hooks()
        {
        }
        function remove_admin_language_switcher()
        {
        }
        function rebuild_language_information()
        {
        }
        function setup()
        {
        }
        public function user_lang_by_authcookie()
        {
        }
        function get_current_user()
        {
        }
        function ajax_setup()
        {
        }
        function check_if_admin_action_from_referer()
        {
        }
        /**
         * Check translation mangement column screen option.
         *
         * @param string $post_type Current post type.
         *
         * @return bool
         */
        public function show_management_column_content($post_type)
        {
        }
        function initialize_cache()
        {
        }
        /**
         * @return icl_cache
         */
        function get_translations_cache()
        {
        }
        /**
         * @return icl_cache
         */
        function get_language_name_cache()
        {
        }
        public function set_admin_language($admin_language = \false)
        {
        }
        function get_admin_language()
        {
        }
        public function is_wpml_switch_language_triggered()
        {
        }
        /**
         * @return bool
         */
        function is_post_edit_screen()
        {
        }
        function get_user_admin_language_filter($value, $user_id)
        {
        }
        function get_user_admin_language($user_id, $reload = \false)
        {
        }
        /**
         * @todo rename this method, has it has nothing to do with the menus
         */
        function administration_menu()
        {
        }
        private function check_and_display_missing_records_notice()
        {
        }
        function taxonomy_translation_page()
        {
        }
        /**
         * @param int|string $blog_id
         */
        function init_settings($blog_id)
        {
        }
        /**
         * @param array|null $settings
         */
        function save_settings($settings = \null)
        {
        }
        /**
         * @since 3.1
         */
        function get_settings()
        {
        }
        function filter_get_setting($value, $key)
        {
        }
        /**
         * @param string     $key
         * @param mixed|bool $default
         *
         * @since 3.1
         *
         * @return bool|mixed
         */
        function get_setting($key, $default = \false)
        {
        }
        function action_set_setting($key, $value, $save_now)
        {
        }
        /**
         * @param string $key
         * @param mixed  $value
         * @param bool   $save_now Immediately update the settings record in the DB
         *
         * @since 3.1
         *
         * @return bool Always True. If `$save_now === true`, it returns the result of `update_option`
         */
        function set_setting($key, $value, $save_now = \false)
        {
        }
        function get_user_preferences()
        {
        }
        function set_user_preferences($value)
        {
        }
        function save_user_preferences()
        {
        }
        /**
         * @deprecated Use \SitePress::get_setting instead
         *
         * @param $option_name
         *
         * @return mixed|null
         */
        public function get_option($option_name)
        {
        }
        function verify_settings()
        {
        }
        /**
         * @param bool   $refresh
         * @param bool   $major_first
         * @param string $order_by
         *
         * @return array
         */
        function get_active_languages($refresh = \false, $major_first = \false, $order_by = 'english_name')
        {
        }
        /**
         * Returns an input array of languages, that are in the form of associative arrays,
         * ordered by the user-chosen language order
         *
         * @param array[] $languages
         *
         * @return array[]
         */
        function order_languages($languages)
        {
        }
        /**
         * @param $lang_code
         * Checks if a given language code belongs to a currently active language.
         *
         * @return bool
         */
        function is_active_language($lang_code)
        {
        }
        public function get_languages($lang = \false, $active_only = \false, $refresh = \false, $major_first = \false, $order_by = 'english_name')
        {
        }
        function get_language_details($code)
        {
        }
        function get_language_code($english_name)
        {
        }
        function get_language_code_from_locale($locale)
        {
        }
        function get_locale_from_language_code($code)
        {
        }
        function get_default_language()
        {
        }
        private function is_valid_language($language)
        {
        }
        private function set_this_lang($new_value)
        {
        }
        public function get_this_lang()
        {
        }
        function get_current_language()
        {
        }
        /**
         * Switches whole site to the given language or back to the current language
         * that was set when first calling this function.
         *
         * @param null|string $code        language code to switch into, will revert to
         *                                 initial language if null is given
         * @param bool|string $cookie_lang optionally also switch the cookie language
         *                                 to the value given
         */
        public function switch_lang($code = \null, $cookie_lang = \false)
        {
        }
        function set_default_language($code)
        {
        }
        /**
         * Hooked to `init`
         */
        function register_assets()
        {
        }
        /**
         * Hooked to `admin_enqueue_scripts` AND `wp_enqueue_scripts`
         */
        function js_load()
        {
        }
        private function is_post_edit_script_allowed()
        {
        }
        function backend_js($setup_complete = \true)
        {
        }
        function rtl_fix()
        {
        }
        function process_forms()
        {
        }
        function post_edit_language_options()
        {
        }
        function set_element_language_details_action($args)
        {
        }
        /**
         * @param int         $el_id the element's ID (for terms we use the `term_taxonomy_id`)
         * @param string      $el_type
         * @param int         $trid
         * @param string      $language_code
         * @param null|string $src_language_code
         * @param bool        $check_duplicates
         *
         * @return bool|int|null|string
         */
        public function set_element_language_details($el_id, $el_type = 'post_post', $trid, $language_code, $src_language_code = \null, $check_duplicates = \true)
        {
        }
        public function delete_orphan_element($element_id, $element_type, $target_language)
        {
        }
        function delete_element_translation($trid, $element_type, $language_code = \false, $orphan_translation_only = \false)
        {
        }
        function get_element_language_details($el_id, $el_type = 'post_post')
        {
        }
        public function sync_custom_field($post_id_from, $post_id_to, $meta_key)
        {
        }
        function copy_custom_fields($post_id_from, $post_id_to)
        {
        }
        /**
         * @param int|string $mode
         *
         * @return array
         */
        public function get_custom_fields_translation_settings($mode)
        {
        }
        /**
         * This method does nothing and is only there as a placeholder for backward compatibility with old Types versions!
         *
         * @deprecated Since WPML 3.1.9
         *
         * @param $meta_id
         * @param $object_id
         * @param $meta_key
         * @param $_meta_value
         */
        function update_post_meta($meta_id, $object_id, $meta_key, $_meta_value)
        {
        }
        /**
         * This method does nothing and is only there as a placeholder for backward compatibility with old Types versions!
         *
         * @deprecated Since WPML 3.1.9
         *
         * @param $meta_id
         */
        function delete_post_meta($meta_id)
        {
        }
        /* Custom fields synchronization - END */
        function get_element_translations_filter($value, $trid, $el_type = 'post_post', $skip_empty = \false, $all_statuses = \false, $skip_cache = \false)
        {
        }
        public function get_original_element_id_filter($empty, $element_id, $element_type = 'post_post')
        {
        }
        public function get_element_trid_filter($empty, $element_id, $element_type = 'post_post')
        {
        }
        function is_original_content_filter($default = \false, $element_id, $element_type = 'post_post')
        {
        }
        /**
         * @param int    $trid
         * @param string $el_type Use comment, post, page, {custom post time name}, nav_menu, nav_menu_item, category, post_tag, etc. (prefixed with 'post_', 'tax_', or nothing for 'comment')
         * @param bool   $skip_empty
         * @param bool   $all_statuses
         * @param bool   $skip_cache
         * @param bool   $skip_recursions
         *
         * @return array|bool|mixed
         */
        function get_element_translations($trid, $el_type = 'post_post', $skip_empty = \false, $all_statuses = \false, $skip_cache = \false, $skip_recursions = \false)
        {
        }
        function clear_elements_cache($ids, $taxonomy)
        {
        }
        static function get_original_element_id($element_id, $element_type = 'post_post', $skip_empty = \false, $all_statuses = \false, $skip_cache = \false)
        {
        }
        public function get_original_element_translation($trid, $element_type, $skip_empty = \false, $all_statuses = \false, $skip_cache = \false)
        {
        }
        /**
         * @param int    $element_id Use term_taxonomy_id for taxonomies, post_id for posts
         * @param string $el_type    Use comment, post, page, {custom post time name}, nav_menu, nav_menu_item, category, post_tag, etc. (prefixed with 'post_', 'tax_', or nothing for 'comment')
         *
         * @return bool|mixed|null|string
         */
        function get_element_trid($element_id, $el_type = 'post_post')
        {
        }
        /**
         * @param int $trid
         *
         * @return int|bool
         */
        static function get_original_element_id_by_trid($trid)
        {
        }
        static function get_source_language_by_trid($trid)
        {
        }
        public function get_element_translations_object($element_type)
        {
        }
        /**
         * @param int    $element_id   Use term_taxonomy_id for taxonomies, post_id for posts
         * @param string $element_type Use comment, post, page, {custom post time name}, nav_menu, nav_menu_item, category,
         *                             post_tag, etc. (prefixed with 'post_', 'tax_', or nothing for 'comment')
         *
         * @return null|string
         */
        function get_language_for_element($element_id, $element_type = 'post_post')
        {
        }
        /**
         * @param string $el_type     Use comment, post, page, {custom post time name}, nav_menu, nav_menu_item, category, post_tag, etc. (prefixed with 'post_', 'tax_', or nothing for 'comment')
         * @param string $target_lang Target language code
         * @param string $source_lang Source language code
         *
         * @return array
         */
        function get_elements_without_translations($el_type, $target_lang, $source_lang)
        {
        }
        /**
         * @param string $selected_language
         * @param string $default_language
         * @param string $post_type
         *
         * @used_by SitePress:meta_box
         *
         * @return array
         */
        function get_posts_without_translations($selected_language, $default_language, $post_type = 'post_post')
        {
        }
        public function get_orphan_translations($trid, $post_type = 'post', $source_language)
        {
        }
        /**
         * @param WP_Post $post
         */
        function meta_box($post)
        {
        }
        function meta_box_config($post)
        {
        }
        /**
         * Filters the WP_Query in case of retrieving an ajax post list,
         * e.g. links in the WYSIWYG post editor
         *
         * @param WP_Query $wpq
         *
         * @return WP_Query
         */
        function pre_get_posts($wpq)
        {
        }
        function comment_feed_join($join)
        {
        }
        /**
         * @param string[]         $clauses
         * @param WP_Comment_Query $obj
         *
         * @return string[]
         */
        function comments_clauses($clauses, $obj)
        {
        }
        function language_filter()
        {
        }
        /**
         * @param array $arr                Array of posts to filter
         * @param array $get_page_arguments Arguments passed to the `get_pages` function
         *
         * @return array
         */
        function exclude_other_language_pages2($arr, $get_page_arguments)
        {
        }
        function wp_dropdown_pages($output)
        {
        }
        function add_translate_options($trid, $active_languages, $selected_language, $translations, $type)
        {
        }
        /**
         * @param array|string $name
         *
         * @deprecated deprecated since version 3.1.8
         * @return array|mixed
         */
        function the_category_name_filter($name)
        {
        }
        /**
         * @param $terms
         *
         * @deprecated deprecated since version 3.1.8
         * @return mixed
         */
        function get_terms_filter($terms)
        {
        }
        /**
         * Wrapper for \WPML_Term_Actions::save_term_actions
         *
         * @param int    $cat_id
         * @param int    $tt_id term taxonomy id of the new term
         * @param string $taxonomy
         *
         * @uses \WPML_Term_Actions::save_term_actions to handle required actions
         *                                               when creating a term
         *
         * @hook delete_term
         */
        function create_term($cat_id, $tt_id, $taxonomy)
        {
        }
        /**
         * Wrapper for \WPML_Term_Actions::deleted_term_relationships
         *
         * @param int   $post_id
         * @param array $delete_terms
         *
         * @uses \WPML_Term_Actions::deleted_term_relationships to handle required actions
         *                                               when removing a term from a post
         *
         * @hook deleted_term_relationships
         */
        function deleted_term_relationships($post_id, $delete_terms)
        {
        }
        /**
         * Wrapper for \WPML_Term_Actions::delete_term_actions
         *
         * @param mixed  $cat
         * @param int    $tt_id term taxonomy id of the deleted term
         * @param string $taxonomy
         *
         * @uses \WPML_Term_Actions::delete_term_actions to handle required actions
         *                                               when deleting a term
         *
         * @hook delete_term
         */
        function delete_term($cat, $tt_id, $taxonomy)
        {
        }
        /**
         * @return WPML_Term_Actions
         */
        public function get_term_actions_helper()
        {
        }
        function get_terms_args_filter($args, $taxonomies)
        {
        }
        public function clear_term_query_filter()
        {
        }
        function terms_clauses($clauses, $taxonomies, $args)
        {
        }
        /**
         * Saves the current $wp_query to \SitePress::$wp_query
         *
         * @global WP_Query $wp_query
         */
        public function set_wp_query()
        {
        }
        /**
         * @return WP_Query
         */
        public function get_wp_query()
        {
        }
        /**
         * Converts WP generated url to language specific based on plugin settings
         *
         * @param string      $url
         * @param null|string $code (if null, fallback to default language for root page, or current language in all other cases)
         *
         * @return bool|string
         */
        function convert_url($url, $code = \null)
        {
        }
        /**
         * @param string $url
         * @param string $code
         *
         * @return string
         */
        function convert_url_string($url, $code)
        {
        }
        function language_url($code = \null)
        {
        }
        function post_type_archive_link_filter($link, $post_type)
        {
        }
        public function adjust_cpt_in_url($link, $post_type, $language_code = \null)
        {
        }
        /**
         * Check if "Translate base slugs (via WPML String Translation)."
         * and slug translation for given $post_type are both checked
         *
         * @param string $post_type
         *
         * @return boolean
         */
        private function cpt_slug_translation_turned_on($post_type)
        {
        }
        function home_url($url)
        {
        }
        function get_comment_link_filter($link)
        {
        }
        function attachment_link_filter($link, $id)
        {
        }
        /**
         * @return WPML_Query_Utils
         */
        public function get_query_utils()
        {
        }
        /**
         * @return WPML_Root_Page_Actions
         */
        public function get_root_page_utils()
        {
        }
        /**
         * @return WPML_WP_API
         */
        public function get_wp_api()
        {
        }
        /**
         * @return wpdb
         */
        public function &wpdb()
        {
        }
        /**
         * @return TranslationManagement
         */
        public function &core_tm()
        {
        }
        /**
         * @return WPML_Term_Translation
         */
        function &term_translations()
        {
        }
        /**
         * @return WPML_Post_Translation
         */
        function &post_translations()
        {
        }
        /**
         * @return WPML_Records
         */
        public function get_records()
        {
        }
        /**
         * @param WPML_WP_API $wp_api
         */
        public function set_wp_api($wp_api)
        {
        }
        public function get_ls_languages($template_args = array())
        {
        }
        function get_display_single_language_name_filter($empty, $args)
        {
        }
        function get_display_language_name($lang_code, $display_code = \null)
        {
        }
        function get_flag($lang_code)
        {
        }
        function get_flag_url($code)
        {
        }
        function get_flag_img($code)
        {
        }
        function clear_flags_cache()
        {
        }
        /**
         * @deprecated
         *
         * @return string
         */
        function get_desktop_language_selector()
        {
        }
        /**
         * @deprecated
         *
         * @return string
         */
        function get_mobile_language_selector()
        {
        }
        /**
         * @deprecated
         *
         * @return string
         */
        function get_language_selector()
        {
        }
        /**
         * @deprecated
         */
        function language_selector()
        {
        }
        public function add_extra_debug_info($extra_debug)
        {
        }
        function set_default_categories($def_cat)
        {
        }
        function pre_option_default_category($setting)
        {
        }
        function update_option_default_category($oldvalue, $new_value)
        {
        }
        /**
         * @param WP_Term $term
         *
         * @return WP_Term
         */
        public function get_term_adjust_id($term)
        {
        }
        public function edited_term_action()
        {
        }
        function get_pages_adjust_ids($pages, $args)
        {
        }
        private function translate_csv_page_ids($args, $index)
        {
        }
        // feeds links
        function feed_link($out)
        {
        }
        // commenting links
        function post_comments_feed_link($out)
        {
        }
        function trackback_url($out)
        {
        }
        function user_trailingslashit($string, $type_of_url)
        {
        }
        /**
         * Fixes double dashes
         *
         * @param string $url
         *
         * @return string
         */
        function author_link($url)
        {
        }
        function pre_option_home($setting = \false)
        {
        }
        /**
         *
         *
         * @param array $public_query_vars
         *
         * @return array with added 'lang' index
         */
        function query_vars($public_query_vars)
        {
        }
        function parse_query($q)
        {
        }
        function adjust_wp_list_pages_excludes($pages)
        {
        }
        function language_attributes($output)
        {
        }
        // Localization
        function plugin_localization()
        {
        }
        /**
         * @return WPML_Locale
         */
        public function get_wpml_locale()
        {
        }
        function locale_filter($default)
        {
        }
        function get_language_tag($code)
        {
        }
        function get_locale($code)
        {
        }
        function switch_locale($lang_code = \false)
        {
        }
        function get_locale_file_names()
        {
        }
        function pre_option_page_on_front()
        {
        }
        function pre_option_page_for_posts()
        {
        }
        function fix_trashed_front_or_posts_page_settings($post_id)
        {
        }
        // adds the language parameter to the admin post filtering/search
        function restrict_manage_posts()
        {
        }
        function get_edit_term_link($link, $term_id, $taxonomy, $object_type)
        {
        }
        function noscript_notice()
        {
        }
        function save_user_options()
        {
        }
        function help_admin_notice()
        {
        }
        function upgrade_notice()
        {
        }
        function display_wpml_footer()
        {
        }
        function xmlrpc_methods($methods)
        {
        }
        function xmlrpc_call_actions($action)
        {
        }
        /**
         * @deprecated Use `wpml.get_languages` XMLRPC call
         * @since      3.5.0
         *
         * @param $lang
         *
         * @return array|bool|mixed|null
         */
        function xmlrpc_get_languages_list($lang)
        {
        }
        function xml_unprotect_wpml_meta($protected, $meta_key, $meta_type)
        {
        }
        function meta_generator_tag()
        {
        }
        function get_language_cookie()
        {
        }
        function set_admin_language_cookie($lang = \false)
        {
        }
        function get_admin_language_cookie()
        {
        }
        function reset_admin_language_cookie()
        {
        }
        function rewrite_rules_filter($value)
        {
        }
        function is_rtl($lang = \false)
        {
        }
        /**
         * Returns an array of post types that are set to be translatable
         *
         * @param array $default Set the default value, in case no posts are set to be translatable (default: array())
         *
         * @return array
         */
        function get_translatable_documents_filter($default = array())
        {
        }
        function get_translatable_documents($include_not_synced = \false)
        {
        }
        public function get_display_as_translated_documents()
        {
        }
        /**
         * @param bool   $include_not_synced
         * @param string $deprecated
         *
         * @return array
         * @internal string $deprecated
         * @since    3.8.0 $deprecated (formerly $object_type) is not used anymore
         */
        function get_translatable_taxonomies($include_not_synced = \false, $deprecated = 'post')
        {
        }
        /**
         * @param string $tax
         *
         * @return bool
         */
        function is_translated_taxonomy($tax)
        {
        }
        public function is_display_as_translated_taxonomy($tax)
        {
        }
        public function get_display_as_translated_taxonomies()
        {
        }
        public function is_translated_post_type_filter($value, $post_type)
        {
        }
        /**
         * @param string $type
         *
         * @return bool
         */
        public function is_translated_post_type($type)
        {
        }
        public function is_display_as_translated_post_type_filter($value, $post_type)
        {
        }
        public function is_display_as_translated_post_type($type)
        {
        }
        /**
         * @param null   $value
         * @param string $taxonomy
         *
         * @return int
         */
        public function is_translated_taxonomy_filter($value, $taxonomy)
        {
        }
        function verify_post_translations_action($post_types)
        {
        }
        /**
         * Sets the default language for all posts in a given post type that do not have any language set
         *
         * @param string $post_type
         */
        public function verify_post_translations($post_type)
        {
        }
        /**
         * This function is to be used on setting a taxonomy from untranslated to being translated.
         * It creates potentially missing translations and reassigns posts to the then created terms in the correct language.
         * This function affects all terms in a taxonomy and therefore, depending on the database size results in
         * heavy resource demand. It should not be used to fix term and post assignment problems other than those
         * resulting from the action of turning a translated taxonomy into an untranslated one.
         *
         * An exception is being made for the installation process assigning all existing terms the default language,
         * given no prior language information is saved about them in the database.
         *
         * @param string $taxonomy
         */
        function verify_taxonomy_translations($taxonomy)
        {
        }
        function wp_upgrade_locale($locale)
        {
        }
        function admin_language_switcher()
        {
        }
        function admin_notices($message, $class = 'updated')
        {
        }
        function _admin_notices_hook()
        {
        }
        function allowed_redirect_hosts($hosts)
        {
        }
        public static function get_installed_plugins()
        {
        }
        /**
         * @param int  $limit
         * @param bool $provide_object
         * @param bool $ignore_args
         *
         * @return array
         */
        public function get_backtrace($limit = 0, $provide_object = \false, $ignore_args = \true)
        {
        }
        /**
         * Used as filter for WordPress core function url_to_postid()
         *
         * @global AbsoluteLinks $absolute_links_object
         *
         * @param string $url URL to filter
         *
         * @return string URL changed into format ...?p={ID} or original
         */
        function url_to_postid($url)
        {
        }
        /**
         * Check if $url is in format ...?cpt-slug=cpt-title and change into ...?p={ID}
         *
         * @param string $url          URL, probably in format ?cpt-slug=cpt-title
         * @param string $original_url URL in original format (probably with permalink)
         *
         * @return string URL, if $url was in expected format ?cpt-slug format, url is now changed into ?p={ID}, otherwise, returns $url as it was passed in parameter
         */
        function cpt_url_to_id_url($url, $original_url)
        {
        }
        /**
         * Fix sticky link url to have ID of translated post (used in case both translations have same slug)
         *
         * @param string $url          - url in sticky link form
         * @param string $original_url - url in permalink form
         *
         * @return string  - url in sticky link form to correct translation
         */
        private function maybe_adjust_url($url, $original_url)
        {
        }
        /**
         * Find language of document based on given permalink
         *
         * @param string $url Local url in permalink form
         *
         * @return string language code
         */
        function get_language_from_url($url)
        {
        }
        function update_index_screen()
        {
        }
        /**
         * Filter to add language field to WordPress search form
         *
         * @param string $form HTML code of search for before filtering
         *
         * @return string HTML code of search form
         */
        function get_search_form_filter($form)
        {
        }
        /**
         * @param string $key
         *
         * @return bool|mixed
         */
        public function get_string_translation_settings($key = '')
        {
        }
        /**
         * @param $setting
         * @param $key
         *
         * @return bool
         */
        private function setting_array_is_set_or_has_key($setting, $key)
        {
        }
        /**
         * @param string $element_type
         * @param string $option_key
         * @param string $readonly_config_key
         * @param string $unlocked_key
         *
         * @return bool
         */
        private function is_translated_element($element_type, $option_key, $readonly_config_key, $unlocked_key)
        {
        }
        /**
         * @return array
         */
        public function get_always_translatable_post_types()
        {
        }
        /**
         * @param Integer $master_post_id The original post id for which duplicate posts are to be retrieved
         *
         * @return Integer[] An associative array with language codes as indexes and post_ids as values
         */
        function get_duplicates($master_post_id)
        {
        }
        /**
         * @param Integer $master_post_id ID of the to be duplicated post
         * @param String  $lang           Language code to which the post is to be duplicated
         *
         * @return bool|int|WP_Error
         */
        function make_duplicate($master_post_id, $lang)
        {
        }
        function get_new_post_source_id($post_id)
        {
        }
        /**
         * @param int        $element_id
         * @param string     $element_type
         * @param bool|false $return_original_if_missing
         * @param null       $language_code
         *
         * @return int|null
         */
        function get_object_id($element_id, $element_type = 'post', $return_original_if_missing = \false, $language_code = \null)
        {
        }
        private function is_troubleshooting_page()
        {
        }
        public function handle_head_hreflang()
        {
        }
        /**
         * Get previously set data for the current request.
         *
         * @param      $key
         * @param null $default
         *
         * @return mixed|null
         */
        public function get_current_request_data($key, $default = \null)
        {
        }
        /**
         * Set temporary data for the current request that can be recalled later
         *
         * @param $key
         * @param $data
         */
        public function set_current_request_data($key, $data)
        {
        }
        /**
         * Clear the data for the current request
         *
         * @param $key
         */
        public function clear_current_request_data($key)
        {
        }
        /**
         * Load \TranslationManagement class.
         */
        public function load_core_tm()
        {
        }
        public function is_setup_complete()
        {
        }
        /**
         * @return bool
         */
        private function is_taxonomy_related_page()
        {
        }
        /**
         * @return bool
         */
        private function is_saving_taxonomy_labels()
        {
        }
        private function switch_to_admin_language()
        {
        }
        private function move_current_language_to_the_top()
        {
        }
        /**
         * @param mixed[] $active_languages
         *
         * @return mixed[]
         */
        private function maybeHideLanguages(array $active_languages)
        {
        }
    }
}
namespace {
    /**
     * Checks if the language switcher is to be displayed.
     * Used to check if the displayed page is a root page and the switcher is to be hidden because of it.
     *
     * @return bool true if the switcher is to be hidden
     */
    function wpml_home_url_ls_hide_check()
    {
    }
    /**
     * @package wpml-core
     */
    function icl_reset_language_data()
    {
    }
    function icl_sitepress_activate()
    {
    }
    function icl_sitepress_deactivate()
    {
    }
    function icl_enable_capabilities()
    {
    }
    /**
     * Fires at plugins_loaded action, to call icl_enable_capabilities().
     * https://onthegosystems.myjetbrains.com/youtrack/issue/wpmlcore-5695
     */
    function wpml_enable_capabilities()
    {
    }
    function icl_xml2array($contents, $get_attributes = \true)
    {
    }
    /**
     * Fetch the wpml config files for known plugins and themes
     *
     * @package wpml-core
     */
    function update_wpml_config_index_event()
    {
    }
    /* DEBUG ACTION */
    /**
     * @param $term_object
     *
     * @return callable
     */
    function get_term_taxonomy_id_from_term_object($term_object)
    {
    }
    function prepare_synchronization_needed_warning($elements, $type)
    {
    }
    /**
     *
     * @return  WPML_Redirection
     *
     */
    function _wpml_get_redirect_helper()
    {
    }
    function icl_disable_cache()
    {
    }
    function icl_cache_get($key)
    {
    }
    function icl_cache_set($key, $value = \null)
    {
    }
    function icl_cache_clear($key = \false, $key_as_prefix = \false)
    {
    }
    function w3tc_translate_cache_key_filter($key)
    {
    }
    /**
     * Returns true if the site uses ICanLocalize.
     *
     * @return bool
     */
    function wpml_site_uses_icl()
    {
    }
    /**
     * Returns the value of a given key setting.
     *
     * @param string      $key     The setting's key.
     * @param mixed|false $default The value to use if the setting does not exist.
     *
     * @return bool|mixed
     * @since      3.1
     * @deprecated 3.2 use `\wpml_setting` or 'wpml_get_setting_filter' filter instead
     */
    function icl_get_setting($key, $default = \false)
    {
    }
    /**
     * Get a WPML setting value.
     * If the Main SitePress Class cannot be accessed by the function it will read the setting from the database.
     * It will return `$default` if the requested key is not set.
     *
     * @param string     $key          The setting's key.
     * @param mixed|null $default      Required. The value to return if the settings key does not exist
     *                                 (typically it's false, but you may want to use something else).
     *
     * @return mixed The value of the requested setting, or `$default`
     * @since 4.1
     */
    function wpml_get_setting($key, $default = \null)
    {
    }
    /**
     * Get a WPML setting value.
     * If the Main SitePress Class cannot be access to the function will read the setting from the database.
     * Will return false if the requested key is not set or.
     * the default value passed in the function's second parameter.
     *
     * @param mixed|false $default     Required. The value to return if the settings key does not exist
     *                                 (typically it's false, but you may want to use something else).
     * @param string      $key         The setting's key.
     *
     * @return mixed The value of the requested setting, or $default
     * @since 3.2
     * @use \SitePress::api_hooks
     */
    function wpml_get_setting_filter($default, $key)
    {
    }
    /**
     * Returns the value of a given key sub-setting.
     *
     * @param string      $key         The setting's key.
     * @param string      $sub_key     The settings name key to return the value of.
     * @param mixed|false $default     Required. The value to return if the settings key does not exist
     *                                 (typically it's false, but you may want to use something else).
     *
     * @return bool|mixed
     * @since      3.1
     * @deprecated 3.2 use 'wpml_sub_setting' filter instead
     */
    function icl_get_sub_setting($key, $sub_key, $default = \false)
    {
    }
    /**
     * Gets a WPML sub setting value.
     *
     * @uses  \wpml_get_setting_filter
     *
     * @param mixed|false $default     Required. The value to return if the settings key does not exist
     *                                 (typically it's false, but you may want to use something else).
     * @param string      $key         The settings name key the sub key belongs to.
     * @param string      $sub_key     The sub key to return the value of.
     * @param mixed       $deprecated  Deprecated param.
     *
     * @todo  [WPML 3.3] Remove deprecated argument
     *
     * @return mixed The value of the requested setting, or $default
     * @since 3.2
     * @use \SitePress::api_hooks
     */
    function wpml_get_sub_setting_filter($default, $key, $sub_key, $deprecated = \null)
    {
    }
    /**
     * Saves the value of a given key.
     *
     * @param string $key      The settings name key the sub key belongs to.
     * @param mixed  $value    The value to assign to the given key.
     * @param bool   $save_now Must call icl_save_settings() to permanently store the value.
     *
     * @return bool Always True. If `$save_now === true`, it returns the result of `update_option`
     */
    function icl_set_setting($key, $value, $save_now = \false)
    {
    }
    /**
     * Save the settings in the db.
     */
    function icl_save_settings()
    {
    }
    /**
     * Gets all the settings.
     *
     * @return array|false
     */
    function icl_get_settings()
    {
    }
    /**
     * Add settings link to plugin page.
     *
     * @param $links
     * @param $file
     *
     * @return array
     */
    function icl_plugin_action_links($links, $file)
    {
    }
    function _icl_deprecated_icl_debug_mode()
    {
    }
    function icl_js_escape($str)
    {
    }
    /**
     * Read and, if needed, generate the site ID based on the scope.
     *
     * @param string $scope      Defaults to "global".
     *                           Use a different value when the ID is used for specific scopes.
     *
     * @param bool   $create_new Forces the creation of a new ID.
     *
     * @return string|null The generated/stored ID or null if it wasn't possible to generate/store the value.
     */
    function wpml_get_site_id($scope = \WPML_Site_ID::SITE_SCOPES_GLOBAL, $create_new = \false)
    {
    }
    function _icl_tax_has_objects_recursive($id, $term_id = -1, $rec = 0)
    {
    }
    function _icl_trash_restore_prompt()
    {
    }
    /**
     * Build or update duplicated posts from a master post.
     *
     * @param  string $master_post_id The ID of the post to duplicate from. Master post doesn't need to be in the default language.
     *
     * @uses       SitePress
     * @uses       TranslationManagement
     * @since      unknown
     * @deprecated 3.2 use 'wpml_admin_make_duplicates' action instead
     */
    function icl_makes_duplicates($master_post_id)
    {
    }
    /**
     * Build or update duplicated posts from a master post.
     * To be used only for admin backend actions
     *
     * @see   $iclTranslationManagement in \SitePress:: __construct
     *
     * @param  int $master_post_id    The ID of the post to duplicate from.
     *                                The ID can be that of a post, page or custom post
     *                                Master post doesn't need to be in the default language.
     *
     * @uses  SitePress
     * @uses  TranslationManagement
     * @since 3.2
     * @use \SitePress::api_hooks
     */
    function wpml_admin_make_post_duplicates_action($master_post_id)
    {
    }
    /**
     * Build duplicated posts from a master post only in case of the duplicate not being present at the time.
     *
     * @param  string $master_post_id The ID of the post to duplicate from. Master post doesn't need to be in the default language.
     *
     * @uses       SitePress
     * @since      unknown
     * @deprecated 3.2 use 'wpml_make_post_duplicates' action instead
     */
    function icl_makes_duplicates_public($master_post_id)
    {
    }
    /**
     * Build duplicated posts from a master post only in case of the duplicate not being present at the time.
     *
     * @param  int $master_post_id    The ID of the post to duplicate from.
     *                                Master post doesn't need to be in the default language.
     *
     * @uses       SitePress
     * @since      3.2
     * @use \SitePress::api_hooks
     * @deprecated This function will be removed in future releases.
     */
    function wpml_make_post_duplicates_action($master_post_id)
    {
    }
    /**
     * Wrapper function for deprecated like_escape() and recommended wpdb::esc_like()
     *
     * @global wpdb  $wpdb
     *
     * @param string $text
     *
     * @return string
     */
    function wpml_like_escape($text)
    {
    }
    function icl_do_not_promote()
    {
    }
    /**
     * @param $time
     *
     * @return string
     */
    function icl_convert_to_user_time($time)
    {
    }
    /**
     * Check if given language is activated
     *
     * @global sitepress $sitepress
     *
     * @param string     $language 2 letters language code
     *
     * @return boolean
     * @since      unknown
     * @deprecated 3.2 use 'wpml_language_is_active' filter instead
     */
    function icl_is_language_active($language)
    {
    }
    /**
     * Checks if given language is enabled
     *
     * @global sitepress $sitepress
     *
     * @param mixed      $empty_value   This is normally the value the filter will be modifying.
     *                                  We are not filtering anything here therefore the NULL value
     *                                  This for the filter function to actually receive the full argument list:
     *                                  apply_filters('wpml_language_is_active', '', $language_code);
     * @param string     $language_code The language code to check Accepts a 2-letter language code
     *
     * @return boolean
     * @since 3.2
     * @use \SitePress::api_hooks
     */
    function wpml_language_is_active_filter($empty_value, $language_code)
    {
    }
    /**
     * @param string $url url either with or without schema
     *                    Removes the subdirectory in which WordPress is installed from a url.
     *                    If WordPress is not installed in a subdirectory, then the input is returned unaltered.
     *
     * @return string the url input without the blog's subdirectory. Potentially existing schemata on the input are kept intact.
     */
    function wpml_strip_subdir_from_url($url)
    {
    }
    /**
     * Changes array of items into string of items, separated by comma and sql-escaped
     *
     * @see https://coderwall.com/p/zepnaw
     * @global wpdb       $wpdb
     *
     * @param mixed|array $items  item(s) to be joined into string
     * @param string      $format %s or %d
     *
     * @return string Items separated by comma and sql-escaped
     */
    function wpml_prepare_in($items, $format = '%s')
    {
    }
    function is_not_installing_plugins()
    {
    }
    function wpml_mb_strtolower($string)
    {
    }
    function wpml_mb_strpos($haystack, $needle, $offset = 0)
    {
    }
    function wpml_set_plugin_as_inactive()
    {
    }
    function wpml_version_is($version_to_check, $comparison = '==')
    {
    }
    /**
     * Interrupts the plugin activation process if the WPML Core Plugin could not be activated
     */
    function icl_suppress_activation()
    {
    }
    /**
     * @param SitePress $sitepress
     */
    function activate_installer($sitepress = \null)
    {
    }
    function wpml_missing_filter_input_notice()
    {
    }
    function repair_el_type_collate()
    {
    }
    /**
     * Wrapper for `parse_url` using `wp_parse_url`
     *
     * @param     $url
     * @param int $component
     *
     * @return array|string|int|null
     */
    function wpml_parse_url($url, $component = -1)
    {
    }
    /**
     * Wrapper function to prevent ampersand to be encoded (depending on some PHP versions)
     *
     * @link http://php.net/manual/en/function.http-build-query.php#102324
     *
     * @param array|object $query_data
     *
     * @return string
     */
    function wpml_http_build_query($query_data)
    {
    }
    /**
     * @param array $array
     * @param int   $sort_flags
     *
     * @uses \wpml_array_unique_fallback
     *
     * @return array
     */
    function wpml_array_unique($array, $sort_flags = \SORT_REGULAR)
    {
    }
    /**
     * @param $array
     * @param $keep_key_assoc
     *
     * @see \wpml_array_unique
     *
     * @return array
     */
    function wpml_array_unique_fallback($array, $keep_key_assoc)
    {
    }
    /**
     * @return bool
     */
    function wpml_is_rest_request()
    {
    }
    /**
     * @return bool
     */
    function wpml_is_rest_enabled()
    {
    }
    function wpml_is_cli()
    {
    }
    function wpml_sticky_post_sync(\Sitepress $sitepress = \null)
    {
    }
    /**
     * @return WP_Filesystem_Direct
     */
    function wpml_get_filesystem_direct()
    {
    }
    /**
     * @param array       $postarray It will be escaped inside the function
     * @param string|null $lang
     * @param bool        $wp_error
     *
     * @return int|\WP_Error
     */
    function wpml_update_escaped_post(array $postarray, $lang = \null, $wp_error = \false)
    {
    }
    /**
     * @param string $group
     *
     * @return WPML_WP_Cache
     */
    function wpml_get_cache($group = '')
    {
    }
    /**
     * wpml_is_ajax - Returns true when the page is loaded via ajax.
     *
     * @since  3.1.5
     *
     * @return bool
     */
    function wpml_is_ajax()
    {
    }
    function get_debug_info()
    {
    }
    function object_to_array($obj)
    {
    }
    /**
     * A more helpful version of `admin_url`
     * Is not called it `wpml_admin_url` because there is already a class with the same name
     *
     * @param array $args
     *
     * @return string
     */
    function wpml_get_admin_url(array $args = array())
    {
    }
    /**
     * Loads global variables providing functionality that is used throughout the plugin.
     *
     * @param null|book              $is_admin If set to `null` it will read from `is_admin()`
     *
     * @global                       $wpml_language_resolution
     * @global $wpml_slug_filter
     * @global WPML_Term_Translation $wpml_term_translations
     */
    function load_essential_globals($is_admin = \null)
    {
    }
    function wpml_load_post_translation($is_admin, $settings)
    {
    }
    function wpml_load_query_filter($installed)
    {
    }
    function load_wpml_url_converter($settings, $domain_validation, $default_lang_code)
    {
    }
    /**
     * @param string             $req_uri
     * @param WPML_URL_Converter $wpml_url_converter
     * @param bool               $directory
     *
     * @return string
     */
    function wpml_validate_host($req_uri, $wpml_url_converter, $directory = \true)
    {
    }
    /**
     * Checks if a given taxonomy is currently translated
     *
     * @param string $taxonomy name/slug of a taxonomy
     * @return bool true if the taxonomy is currently set to being translatable in WPML
     */
    function is_taxonomy_translated($taxonomy)
    {
    }
    /**
     * Checks if a given post_type is currently translated
     *
     * @param string $post_type name/slug of a post_type
     * @return bool true if the post_type is currently set to being translatable in WPML
     */
    function is_post_type_translated($post_type)
    {
    }
    function setup_admin_menus()
    {
    }
    function maybe_load_translated_tax_screen()
    {
    }
    function wpml_reload_active_languages_setting($override = \false)
    {
    }
    /**
     * Returns and if necessary instantiates an instance of the WPML_Installation Class
     *
     * @return \WPML_Installation
     */
    function wpml_get_setup_instance()
    {
    }
    function wpml_load_admin_files()
    {
    }
    function wpml_get_post_status_helper()
    {
    }
    function wpml_get_create_post_helper()
    {
    }
    /**
     * @return \TranslationManagement
     */
    function wpml_load_core_tm()
    {
    }
    function wpml_get_langs_in_dirs_val($http_client, $wpml_url_converter, $posted_url = \false)
    {
    }
    function wpml_get_root_page_actions_obj()
    {
    }
    function wpml_get_hierarchy_sync_helper($type = 'post')
    {
    }
    function wpml_maybe_setup_post_edit()
    {
    }
    /**
     * @return \WPML_Frontend_Tax_Filters
     */
    function wpml_load_frontend_tax_filters()
    {
    }
    /**
     * @return \WPML_Settings_Helper
     */
    function wpml_load_settings_helper()
    {
    }
    function wpml_get_term_translation_util()
    {
    }
    /**
     * @return \WPML_Term_Filters
     */
    function wpml_load_term_filters()
    {
    }
    function wpml_show_user_options()
    {
    }
    /**
     * @return \WPML_Upgrade_Command_Factory
     */
    function wpml_get_upgrade_command_factory()
    {
    }
    function wpml_get_upgrade_schema()
    {
    }
    /**
     * @param string      $class_name   A class implementing \IWPML_Upgrade_Command.
     * @param array       $dependencies An array of dependencies passed to the `$class_name`'s constructor.
     * @param array       $scopes       An array of scope values. Accepted values are: `\WPML_Upgrade::SCOPE_ADMIN`, `\WPML_Upgrade::SCOPE_AJAX`, and `\WPML_Upgrade::SCOPE_FRONT_END`.
     * @param string|null $method       The method to call to run the upgrade (otherwise, it calls the "run" method),
     *
     * @return \WPML_Upgrade_Command_Definition
     */
    function wpml_create_upgrade_command_definition($class_name, array $dependencies, array $scopes, $method = \null)
    {
    }
    function icl_wpmuadminedit()
    {
    }
    function icl_network_administration_menu()
    {
    }
    function icl_network_reset_wpml()
    {
    }
    function icl_network_deactivate_wpml($blog_id = \false)
    {
    }
    function icl_network_activate_wpml($blog_id = \false)
    {
    }
    /**
     * @param string $input
     * @param string $default_if_invalid
     *
     * @return string
     */
    function wpml_sanitize_hex_color($input, $default_if_invalid = '')
    {
    }
    function wpml_sanitize_hex_color_array($input, $default_if_invalid = '', $bypass_non_strings = \true, $recursive = \false)
    {
    }
    /**
     * @param string $input
     *
     * @return bool
     */
    function wpml_is_valid_hex_color($input)
    {
    }
    function wpml_get_valid_hex_color_pattern()
    {
    }
    /**
     * Convert RGB color code to HEX code.
     *
     * @param array $rgb
     *
     * @return bool|string
     */
    function wpml_rgb_to_hex($rgb)
    {
    }
    function wpml_get_authenticated_action()
    {
    }
    /**
     * Validates a nonce according to the schema also used by \wpml_nonce_field
     *
     * @param string $action
     *
     * @return false|int
     */
    function wpml_is_action_authenticated($action)
    {
    }
    /**
     * Generates HTML for the hidden nonce input field following the schema
     * used by \wpml_is_action_authenticated
     *
     * @param string $action
     *
     * @return string
     */
    function wpml_nonce_field($action)
    {
    }
    function uuid_v5($name, $ns_uuid = '6ba7b811-9dad-11d1-80b4-00c04fd430c8')
    {
    }
    /**
     * @param string   $object_id
     * @param string   $object_type
     * @param int|null $timestamp   If this parameter is `null`, it will be assigned the current time
     *                              Set this parameter to 0 if the uuid should not have a time footprint
     *
     * @return string
     */
    function wpml_uuid($object_id, $object_type, $timestamp = \null)
    {
    }
    function icl_reset_wpml($blog_id = \false)
    {
    }
    /**
     * Ajax handler for type assignment fix troubleshoot action
     */
    function icl_repair_broken_type_and_language_assignments()
    {
    }
    function icl_import_xml()
    {
    }
    function icl_import_xml_start()
    {
    }
    /**
     * Registers scripts so that they can be reused throughout WPML plugins
     * Hooked to `admin_enqueue_scripts`
     */
    function wpml_register_js_scripts()
    {
    }
    /**
     * @return mixed
     */
    function icl_get_languages_names()
    {
    }
    /**
     * @return array
     */
    function icl_get_languages_codes()
    {
    }
    /**
     * @return array
     */
    function icl_get_languages_locales()
    {
    }
    function icl_incomp_plugins_warn()
    {
    }
    function wpml_wcml_3_8_is_required()
    {
    }
    /**
     * Determines if we should load compatibility classes for wordpress-seo.
     */
    function wpml_should_load_wpseo_classes()
    {
    }
    /**
     * Loads compatibility classes for active plugins.
     */
    function wpml_plugins_integration_setup()
    {
    }
    /**
     * Loads compatibility classes for active themes.
     */
    function wpml_themes_integration_setup()
    {
    }
    /**
     * SitePress Template functions
     * @package wpml-core
     */
    /**
     * @since      3.2.3
     * @deprecated Use 'wpml_get_capabilities' instead.
     */
    function icl_sitepress_get_capabilities()
    {
    }
    function wpml_get_capabilities_names()
    {
    }
    function wpml_get_capabilities_labels()
    {
    }
    function wpml_get_capabilities()
    {
    }
    function wpml_get_read_only_capabilities_filter($empty)
    {
    }
    function wpml_get_roles()
    {
    }
    function wpml_roles_read_only_filter($empty)
    {
    }
    /**
     * @since      unknown
     * @deprecated 3.2 use 'wpml_home_url' filter instead.
     */
    function icl_get_home_url()
    {
    }
    /**
     * Get the home url in the current language
     * To be used in place of get_option('home')
     * Note: Good code will make use of get_home_url() or home_url() which apply filters natively.
     * In this case there is no need to replace anything.
     * @since 3.2
     * @return string
     * @use \SitePress::api_hooks
     */
    function wpml_get_home_url_filter()
    {
    }
    /**
     * @since      unknown
     * @deprecated 3.2 use 'wpml_active_languages' filter instead.
     *
     * @param string $a
     *
     * @return mixed
     */
    function icl_get_languages($a = '')
    {
    }
    /**
     * Get a list of the active languages
     * Usually used to create custom language switchers
     * @since                             3.2
     *
     * @param mixed        $empty_value   This is normally the value the filter will be modifying.
     *                                    We are not filtering anything here therefore the NULL value
     *                                    This for the filter function to actually receive the full argument list:
     *                                    apply_filters( 'wpml_active_languages', '', $args)
     * @param array|string $args          {
     *                                    Optional A string of arguments to filter the language output
     *
     * @type bool          $skip_missing  How to treat languages with no translations. 0 | Skip language or 1 | Link to home of language for missing translations.
     * @type string        $link_empty_to Works in conjunction with skip_missing = 0 and allows using custom links for the languages that do not have translations
     *                                    for the current element. {%lang} can be used as placeholder for the language code. Empty by default.
     * @type string        $orderby       Accepts id|code|name Defaults to custom.
     *                                    The custom order can be defined in the WordPress admin under WPML > Languages > Language Switcher Options
     * @type string        $order         Accepts asc|desc
     *                                    }
     * @return array
     * @use \SitePress::api_hooks
     */
    function wpml_get_active_languages_filter($empty_value, $args = '')
    {
    }
    /**
     * @since      unknown
     * @deprecated 3.2 use 'wpml_display_language_names' filter instead.
     *
     * @param      $native_name
     * @param bool $translated_name
     * @param bool $lang_native_hidden
     * @param bool $lang_translated_hidden
     *
     * @return string
     */
    function icl_disp_language($native_name, $translated_name = \false, $lang_native_hidden = \false, $lang_translated_hidden = \false)
    {
    }
    /**
     * @deprecated since 3.6.0 / See new Language Switcher API with use of Twig templates
     *
     * Get the native or translated language name or both
     * Checks if native_language_name and translated_language_name are different.
     * If so, it returns them both, otherwise, it returns only one.
     * Usually used in custom language switchers
     * @since 3.2
     *
     * @param mixed       $empty_value
     *
     * @see   \wpml_get_active_languages_filter
     *
     * @param string      $native_name            Required The language native name
     * @param string|bool $translated_name        Required The language translated name Defaults to FALSE
     * @param bool        $lang_native_hidden     Optional, default is FALSE 0|false or 1|true Whether to hide the language native name or not.
     * @param bool        $lang_translated_hidden Optional, default is FALSE 0|false or 1|true Whether to hide the language translated name or not.
     *
     * @return string HTML content
     * @use \SitePress::api_hooks
     */
    function wpml_display_language_names_filter($empty_value, $native_name, $translated_name = \false, $lang_native_hidden = \false, $lang_translated_hidden = \false)
    {
    }
    /**
     * @since      unknown
     * @deprecated 3.2 use 'wpml_element_link' filter instead.
     *
     * @param        $element_id
     * @param string $element_type
     * @param string $link_text
     * @param array  $optional_parameters
     * @param string $anchor
     * @param bool   $echo
     * @param bool   $return_original_if_missing
     *
     * @return string
     */
    function icl_link_to_element($element_id, $element_type = 'post', $link_text = '', $optional_parameters = array(), $anchor = '', $echo = \true, $return_original_if_missing = \true)
    {
    }
    /**
     * Get the link to an element in the current language
     * Produces localized links for WordPress elements (post types and taxonomy terms)
     * @since 3.2
     *
     * @param int    $element_id                 Required The ID of the post type (post, page) or taxonomy term (tag or category) to link to.
     * @param string $element_type               Optional The type of element to link to. Can be 'post', 'page', 'tag' or 'category'.    Defaults to 'post'
     * @param string $link_text                  Optional The link text. Defaults to the element's name.
     * @param array  $optional_parameters        Optional Arguments for the link.
     * @param string $anchor                     Optional Anchor for the link.
     * @param bool   $echo                       Optional 0|false to return or 1|true to echo the localized link. Defaults to true.
     * @param bool   $return_original_if_missing Optional, default is TRUE If set to true it will always return a value (the original value, if translation is missing)
     *
     * @return string HTML content
     * @use \SitePress::api_hooks
     */
    function wpml_link_to_element_filter($element_id, $element_type = 'post', $link_text = '', $optional_parameters = array(), $anchor = '', $echo = \true, $return_original_if_missing = \true)
    {
    }
    /**
     * @since      unknown
     * @deprecated 3.2 use 'wpml_object_id' filter instead.
     *
     * @param             $element_id
     * @param string      $element_type
     * @param bool        $return_original_if_missing
     * @param null|string $ulanguage_code
     *
     * @return null|int
     */
    function icl_object_id($element_id, $element_type = 'post', $return_original_if_missing = \false, $ulanguage_code = \null)
    {
    }
    /**
     * Get the element in the current language
     * @since 3.2
     *
     * @param int         $element_id                 Use term_id for taxonomies, post_id for posts
     * @param string      $element_type               Use post, page, {custom post type name}, nav_menu, nav_menu_item, category, tag, etc.
     *                                                You can also pass 'any', to let WPML guess the type, but this will only work for posts.
     * @param bool        $return_original_if_missing Optional, default is FALSE. If set to true it will always return a value (the original value, if translation is missing).
     * @param string|NULL $language_code              Optional, default is NULL. If missing, it will use the current language.
     *                                                If set to a language code, it will return a translation for that language code or
     *                                                the original if the translation is missing and $return_original_if_missing is set to TRUE.
     *
     * @return int|NULL
     * @use \SitePress::api_hooks
     */
    function wpml_object_id_filter($element_id, $element_type = 'post', $return_original_if_missing = \false, $language_code = \null)
    {
    }
    /**
     * @since      unknown
     * @deprecated 3.2 use 'wpml_translated_language_name' filter instead
     *
     * @param      $lang_code
     * @param bool $display_code
     *
     * @return string
     */
    function icl_get_display_language_name($lang_code, $display_code = \false)
    {
    }
    /**
     * Returns the translated name of a language in another language.
     * The languages involved do not need to be active.
     * @since 3.2
     *
     * @param mixed       $empty_value
     *
     * @see   \wpml_get_active_languages_filter
     *
     * @param string      $lang_code          The language name will be for this language. Accepts a 2-letter code e.g. en
     * @param string|bool $display_code       The language name will display translated in this language. Accepts a 2-letter code e.g. de.
     *                                        If set to false it will return the translated name in the current language. Default is FALSE.
     *
     * @return string The language translated name
     * @use \SitePress::api_hooks
     */
    function wpml_translated_language_name_filter($empty_value, $lang_code, $display_code = \false)
    {
    }
    /**
     * @since      unknown
     * @deprecated 3.2 use 'wpml_current_language' filter instead.
     */
    function icl_get_current_language()
    {
    }
    /**
     * Get the current language
     * @since      3.2
     * @deprecated Use apply_filters('wpml_current_language', '');
     * Example: $my_current_lang = apply_filters('wpml_current_language', '');
     */
    function wpml_get_current_language_filter()
    {
    }
    /**
     * @since      unknown
     * @deprecated 3.2 use 'wpml_default_language' filter instead
     */
    function icl_get_default_language()
    {
    }
    /**
     * Get the default language
     * @since 3.2
     *
     * @param mixed $empty_value
     *
     * @see   \wpml_get_active_languages_filter
     * @use \SitePress::api_hooks
     * @return string
     */
    function wpml_get_default_language_filter($empty_value)
    {
    }
    /**
     * Returns the default language
     * @since 1.3
     * @return string
     */
    function wpml_get_default_language()
    {
    }
    /**
     * Get current language
     * @since 1.3
     * @return string
     */
    function wpml_get_current_language()
    {
    }
    /**
     * @param string $folder
     *
     * @return bool
     */
    function icl_tf_determine_mo_folder($folder)
    {
    }
    /**
     * @todo: [WPML 3.3] refactor in 3.3
     *
     * @param array $attributes
     * @param bool  $checked
     * @param bool  $disabled
     *
     * @return string
     */
    //$field_prefix = 'wpml_cf_translation_preferences_option_ignore_'
    function wpml_input_field_helper($attributes = array(), $checked = \false, $disabled = \false)
    {
    }
    /**
     * @todo: [WPML 3.3] refactor in 3.3
     *
     * @param $attributes
     * @param $caption
     *
     * @return string
     */
    function wpml_label_helper($attributes, $caption)
    {
    }
    /**
     * @todo: [WPML 3.3] refactor in 3.3
     *
     * @param $args
     * @param $id_prefix
     * @param $value
     * @param $caption
     *
     * @return string
     */
    function wpml_translation_preference_input_helper($args, $id_prefix, $value, $caption)
    {
    }
    /**
     * @todo: [WPML 3.3] refactor in 3.3
     *
     * @param        $id
     * @param bool   $custom_field
     * @param string $class
     * @param bool   $ajax
     * @param string $default_value
     * @param bool   $fieldset
     * @param bool   $suppress_error
     *
     * @return string
     */
    function wpml_cf_translation_preferences($id, $custom_field = \false, $class = 'wpml', $ajax = \false, $default_value = 'ignore', $fieldset = \false, $suppress_error = \false)
    {
    }
    /**
     * @todo: [WPML 3.3] refactor in 3.3
     * wpml_get_copied_fields_for_post_edit
     * return a list of fields that are marked for copying and the
     * original post id that the fields should be copied from
     * This should be used to populate any custom field controls when
     * a new translation is selected and the field is marked as "copy" (sync)
     *
     * @param array $fields
     *
     * @return array
     */
    function wpml_get_copied_fields_for_post_edit($fields = array())
    {
    }
    /**
     * Retrieve language information of a post by its ID
     * The language information includes
     * the post locale,
     * the language text direction (True for RTL, False for LTR),
     * the post language translated name and native name and
     * whether the current language is different to the post language (True/False)
     *
     * @param mixed $empty_value
     *
     * @see  \wpml_get_active_languages_filter
     *
     * @param int   $post_id Optional The post id to retrieve information of (post, page, attachment, custom) Defaults to current post ID.
     *
     * @return array|WP_Error
     * @use \SitePress::api_hooks
     */
    function wpml_get_language_information($empty_value = \null, $post_id = \null)
    {
    }
    /**
     * Add metabox definition to edit post type in Types
     * @since x.x.x
     *
     * @param array $boxes Meta boxes in Types.
     *
     * @return array Meta boxes in Types.
     */
    function wpml_wpcf_meta_box_order_defaults($boxes)
    {
    }
    /**
     * @todo: [WPML 3.3] refactor in 3.3
     *
     * @param $type_id
     *
     * @return string
     */
    function wpml_custom_post_translation_options()
    {
    }
    /**
     * @since      unknown
     * @deprecated 3.2 use 'wpml_add_language_selector' filter instead
     */
    function icl_language_selector()
    {
    }
    /**
     * Display the drop down language selector
     * @since 3.2
     * Will use the language selector settings from "Language switcher as shortcode or action"
     * @use \SitePress::api_hooks
     * example: do_action( 'wpml_add_language_selector' );
     */
    function wpml_add_language_selector_action()
    {
    }
    /**
     * @since      unknown
     * @deprecated 3.2 use 'wpml_footer_language_selector' filter instead
     */
    function icl_language_selector_footer()
    {
    }
    /**
     * Display the footer language selector
     * @since 3.2
     * Will use the language selector include configuration from the WPML -> Language admin screen
     * @use \SitePress::api_hooks
     * example: do_action('wpml_footer_language_selector');
     */
    function wpml_footer_language_selector_action()
    {
    }
    /**
     * Returns an HTML hidden input field with name="lang" and value of current language
     * This is for theme authors, to make their themes compatible with WPML when using the search form.
     * In order to make the search form work properly, they should use standard WordPress template tag get_search_form()
     * In this case WPML will handle the the rest.
     * If for some reasons the template function can't be used and form is created differently,
     * authors must the following code between inside the form
     * <?php
     * if (function_exists('wpml_the_language_input_field')) {
     *    wpml_the_language_input_field();
     * }
     * @global SitePress $sitepress
     * @return string|null HTML input field or null
     * @since      3.2
     * @deprecated 3.2 use 'wpml_add_language_form_field' action instead
     */
    function wpml_get_language_input_field()
    {
    }
    /**
     * Echoes the value returned by \wpml_get_language_input_field
     * @since      3.1.7.3
     * @deprecated 3.2 use 'wpml_add_language_form_field' filter instead
     */
    function wpml_the_language_input_field()
    {
    }
    /**
     * @since 3.2
     * Returns an HTML hidden input field with name="lang" and as value the current language
     * In order to add a search form to your theme you would normally use the standard WordPress template tag: <code>get_search_form()</code>
     * If you are making use of the default WordPress search form, you do not need to edit anything. WPML will handle the rest.
     * However, there may be times when <code>get_search_form()</code> can't be used.
     * If you are creating a custom search form and you need to make it WPML compatible then this action hook is what you need.
     * Add the action hook  inside the form:
     * <?php
     * do_action('wpml_add_language_form_field');
     * ?>
     * @global SitePress $sitepress
     * @return string|null HTML input field or null
     * @use \SitePress::api_hooks
     */
    function wpml_add_language_form_field_action()
    {
    }
    function wpml_language_form_field_shortcode()
    {
    }
    function wpml_get_language_form_field()
    {
    }
    /**
     * @since      unknown
     * @deprecated 3.2 use 'wpml_element_translation_type' filter instead
     *
     * @param        $id
     * @param string $type
     *
     * @return bool|int
     */
    function wpml_get_translation_type($id, $type = 'post')
    {
    }
    /**
     * @since 3.2
     * Accepts the ID and type of an element and returns its translation type.
     * Values will be one of these:
     *      WPML_ELEMENT_IS_NOT_TRANSLATED  = 0
     *      WPML_ELEMENT_IS_TRANSLATED      = 1
     *      WPML_ELEMENT_IS_DUPLICATED      = 2
     *      WPML_ELEMENT_IS_A_DUPLICATE     = 3
     *
     * @param mixed  $empty_value
     *
     * @see   \wpml_get_active_languages_filter
     *
     * @param int    $element_id    The element id to retrieve the information of. Use term_id for taxonomies, post_id for posts
     * @param string $element_type  Can be a post type: post, page, attachment, nav_menu_item, {custom post key}
     *                              or taxonomy: category, post_tag, nav_menu {custom taxonomy key}
     *
     * @return int
     * @use \SitePress::api_hooks
     */
    function wpml_get_element_translation_type_filter($empty_value, $element_id, $element_type)
    {
    }
    /**
     * Accepts the ID of a post and returns its translation type.
     * Values will be one of these:
     *      WPML_ELEMENT_IS_NOT_TRANSLATED  = 0
     *      WPML_ELEMENT_IS_TRANSLATED      = 1
     *      WPML_ELEMENT_IS_DUPLICATED      = 2
     *      WPML_ELEMENT_IS_A_DUPLICATE     = 3
     *
     * @param int $post_id The ID of the post from which to get translation information
     *
     * @return int
     * @internal   param string $post_type
     * @since      3.2
     * @deprecated 3.2 use 'wpml_element_translation_type' filter instead
     */
    function wpml_get_post_translation_type($post_id)
    {
    }
    /**
     * @param int    $post_id
     * @param string $post_type
     *
     * @return bool
     * @since      3.2
     * @deprecated 3.2 use 'wpml_element_has_translations' filter instead
     */
    function wpml_post_has_translations($post_id, $post_type = 'post')
    {
    }
    /**
     * Checks if an element has translations
     * A translation can be a manual translation or a duplication.
     * @since 3.2
     *
     * @param mixed  $empty_value
     *
     * @see   \wpml_get_active_languages_filter
     *
     * @param int    $element_id    Use term_id for taxonomies, post_id for posts
     * @param string $element_type  Can be a post type: post, page, attachment, nav_menu_item, {custom post key}
     *                              or taxonomy: category, post_tag, nav_menu {custom taxonomy key}
     *
     * @return bool
     * @use \SitePress::api_hooks
     */
    function wpml_element_has_translations_filter($empty_value, $element_id, $element_type = 'post')
    {
    }
    function wpml_get_content_translations_filter($empty, $post_id, $content_type = 'post')
    {
    }
    /**
     * @param $post_id
     *
     * @return mixed
     * @since      3.2
     * @deprecated 3.2 use 'wpml_master_post_from_duplicate' filter instead
     */
    function wpml_get_master_post_from_duplicate($post_id)
    {
    }
    /**
     * Get the original post from the duplicated post
     *
     * @param int $post_id The duplicated post ID
     *
     * @return int or empty string if there is nothing to return
     * @use \SitePress::api_hooks
     */
    function wpml_get_master_post_from_duplicate_filter($post_id)
    {
    }
    /**
     * @param $master_post_id
     *
     * @return mixed
     * @since      3.2
     * @deprecated 3.2 use 'wpml_post_duplicates' filter instead
     */
    function wpml_get_post_duplicates($master_post_id)
    {
    }
    /**
     * Get the duplicated post ids
     * Will return an associative array with language codes as indexes and post_ids as values
     *
     * @param int $master_post_id The original post id from which duplicates exist
     *
     * @return array
     * @use \SitePress::api_hooks
     */
    function wpml_get_post_duplicates_filter($master_post_id)
    {
    }
    /**
     * Filters a WordPress element by adding the WPML prefix 'post_', 'tax_', or nothing for 'comment' as used in icl_translations db table
     * @since 3.2
     *
     * @param string $element_type Accepts comment, post, page, attachment, nav_menu_item, {custom post key},
     *                                nav_menu, category, post_tag, {custom taxonomy key}
     *
     * @return string
     * @use \SitePress::api_hooks
     */
    function wpml_element_type_filter($element_type)
    {
    }
    /**
     * Retrieves language information for a translatable element
     * Checks icl_translations db table and returns an object with the element's
     * trid, source language code and language code
     * @since                             3.2.2
     *
     * @param mixed $element_object       A WordPress object. Defaults to null
     * @param array $args                 {
     *                                    Required An array of arguments to be used
     *
     * @type int    $element_id           Use term_taxonomy_id for taxonomies, post_id for posts
     * @type string $element_type         Can be a post type: post, page, attachment, nav_menu_item, {custom post key}
     *                                    or taxonomy: category, post_tag, nav_menu {custom taxonomy key}
     *                                    }
     * @return object
     * @use \SitePress::api_hooks
     */
    function wpml_element_language_details_filter($element_object = \null, $args)
    {
    }
    /**
     * Retrieves the language code for a translatable element
     * Checks icl_translations db table and returns the element's language code
     * @since                             3.2.2
     *
     * @param mixed $language_code        A 2-letter language code. Defaults to null
     * @param array $args                 {
     *                                    Required An array of arguments to be used
     *
     * @type int    $element_id           Use term_taxonomy_id for taxonomies, post_id for posts
     * @type string $element_type         Can be a post type: post, page, attachment, nav_menu_item, {custom post key}
     *                                    or taxonomy: category, post_tag, nav_menu {custom taxonomy key}
     *                                    }
     * @return string
     * @use \SitePress::api_hooks
     */
    function wpml_element_language_code_filter($language_code = \null, $args)
    {
    }
    /**
     * Retrieves the elements without translations
     * Queries the database and returns an array with ids
     * @since                             3.2.2
     *
     * @param array $element_ids          An array of element ids. Defaults to an empty array
     * @param array $args                 {
     *                                    Required An array of arguments to be used
     *
     * @type string $target_language      The target language code
     * @type string $source_language      The source language code
     * @type string $element_type         Can be a post type: post, page, attachment, nav_menu_item, {custom post key}
     *                                    or taxonomy: category, post_tag, nav_menu {custom taxonomy key}
     *                                    }
     * @return array
     * @use \SitePress::api_hooks
     */
    function wpml_elements_without_translations_filter($element_ids = array(), $args)
    {
    }
    /**
     * @deprecated Use the filter hook `wpml_permalink` instead
     *
     * Filters a WordPress permalink and converts it to a language specific permalink based on plugin settings
     *
     * @since 3.2.2
     *
     * @param string      $url           The WordPress generated url to filter
     * @param null|string $language_code if null, it falls back to default language for root page,
     *                                   or current language in all other cases.
     *
     * @return string
     */
    function wpml_permalink_filter($url, $language_code = \null)
    {
    }
    /**
     * Switches WPML's query language
     * @since                           3.2.2
     * @type null|string $language_code The language code to switch  to
     *                                  If set to null it restores the original language
     *                                  If set to 'all' it will query content from all active languages
     *                                  Defaults to null
     * @use \SitePress::api_hooks
     */
    function wpml_switch_language_action($language_code = \null)
    {
    }
    function icl_plugin_upgrade()
    {
    }
    function icl_upgrade_version($version, $force = \false)
    {
    }
    function icl_plugin_too_old()
    {
    }
    function icl_table_column_exists($table_name, $column_name)
    {
    }
    function icl_table_index_exists($table_name, $index_name)
    {
    }
    function icl_alter_table_columns($table_name, $column_definitions)
    {
    }
    function icl_drop_table_index($table_name, $index_name)
    {
    }
    function icl_create_table_index($table_name, $index_definition)
    {
    }
    /**
     * @param $array
     * @param $required_keys
     *
     * @return bool
     */
    function icl_array_has_required_keys($array, $required_keys)
    {
    }
    function _wpml_api_allowed_content_type($content_type)
    {
    }
    /**
     * Add translatable content to the WPML translations table
     *
     * @since      1.3
     * @package    WPML
     * @subpackage WPML API
     *
     * @param string      $content_type  Content type.
     * @param int         $content_id    Content ID.
     * @param bool|string $language_code Content language code. (defaults to current language)
     * @param bool|int    $trid          Content trid - if a translation in a different language already exists.
     *
     * @return int error code
     */
    function wpml_add_translatable_content($content_type, $content_id, $language_code = \false, $trid = \false)
    {
    }
    /**
     * Update translatable content in the WPML translations table
     *
     * @since      1.3
     * @package    WPML
     * @subpackage WPML API
     *
     * @param string $content_type  Content type.
     * @param int    $content_id    Content ID.
     * @param string $language_code Content language code.
     *
     * @return int error code
     */
    function wpml_update_translatable_content($content_type, $content_id, $language_code)
    {
    }
    /**
     * Update translatable content in the WPML translations table
     *
     * @since      1.3
     * @deprecated deprecated since 3.2
     *
     * @package    WPML
     * @subpackage WPML API
     *
     * @param string      $content_type  Content type.
     * @param int         $content_id    Content ID.
     * @param bool|string $language_code Content language code. (when ommitted - delete all translations associated with the respective content)
     *
     * @return int error code
     */
    function wpml_delete_translatable_content($content_type, $content_id, $language_code = \false)
    {
    }
    /**
     * Get trid value for a specific piece of content
     *
     * @since 1.3
     * @package WPML
     * @subpackage WPML API
     *
     * @param string $content_type Content type.
     * @param int $content_id Content ID.
     *
     * @return int trid or 0 for error
     *  */
    function wpml_get_content_trid($content_type, $content_id)
    {
    }
    /**
     * Detects the current language and returns the language relevant content id. optionally it can return the original id if a translation is not found
     * See also wpml_object_id_filter() in \template-functions.php
     *
     * @since 1.3
     * @package WPML
     * @subpackage WPML API
     *
     * @param string $content_type Content type.
     * @param int $content_id Content ID.
     * @param bool $return_original return the original id when translation not found.
     *
     * @return int trid or 0 for error
     *
     */
    function wpml_get_content($content_type, $content_id, $return_original = \true)
    {
    }
    /**
     * Get translations for a certain piece of content
     *
     * @since      1.3
     * @package    WPML
     * @subpackage WPML API
     *
     * @param string $content_type Content type.
     * @param int    $content_id   Content ID.
     * @param bool   $skip_missing
     *
     * @internal   param bool $return_original return the original id when translation not found.
     *
     * @return array|int translations or error code
     */
    function wpml_get_content_translations($content_type, $content_id, $skip_missing = \true)
    {
    }
    /**
     *  Returns a certain translation for a piece of content
     *
     * @since 1.3
     * @package WPML
     * @subpackage WPML API
     *
     * @param string $content_type Content type.
     * @param int $content_id Content ID.
     * @param bool $language_code
     *
     * @return int|array error code or array('lang'=>element_id)
     */
    function wpml_get_content_translation($content_type, $content_id, $language_code)
    {
    }
    /**
     * Returns the list of active languages
     * See also wpml_get_active_languages_filter() in \template-functions.php
     *
     * @since 1.3
     * @package WPML
     * @subpackage WPML API
     *
     *
     * @return array
     *  */
    function wpml_get_active_languages()
    {
    }
    /**
     *  Get contents of a specific type
     *
     * @since      1.3
     * @package    WPML
     * @subpackage WPML API
     *
     * @param string $content_type Content type.
     *
     * @param bool   $language_code
     *
     * @return int or array
     */
    function wpml_get_contents($content_type, $language_code = \false)
    {
    }
    /**
     * Returns the number of the words that will be sent to translation and a cost estimate
     * @since      1.3
     * @package    WPML
     * @subpackage WPML API
     *
     * @param string      $string
     * @param bool|string $language - should be specified when the language is one of zh-hans|zh-hant|ja|ko
     *
     * @return array (count, cost)
     */
    function wpml_get_word_count($string, $language = \false)
    {
    }
    /**
     *  Check user is translator
     *
     * @since 1.3
     * @package WPML
     * @subpackage WPML API
     *
     * @param string $from_language Language to translate from
     * @param string $to_language Language to translate into
     *
     * @return bool (true if translator)
     */
    function wpml_check_user_is_translator($from_language, $to_language)
    {
    }
    /**
     *  Check user is translator
     *
     * @since      1.3
     * @package    WPML
     * @subpackage WPML API
     *
     * @param int         $post_id          Post ID
     * @param             $cred_form_id
     * @param bool|string $current_language (optional) current language
     *
     * @internal   param int $form_id Form ID
     * @return bool (true if translator)
     */
    function wpml_generate_controls($post_id, $cred_form_id, $current_language = \false)
    {
    }
    /**
     *  Get original content
     *
     * @since      1.3
     * @package    WPML
     * @subpackage WPML API
     *
     * @param int    $post_id Post ID
     * @param string $field   Post field
     *
     * @param bool   $field_name
     *
     * @return string or array
     */
    function wpml_get_original_content($post_id, $field, $field_name = \false)
    {
    }
    /**
     *  Get synchronizing taxonomies
     *
     * @since      1.3
     * @package    WPML
     * @subpackage WPML API
     *
     * @param int $post_id Post ID
     *
     * @param     $tax_name
     *
     * @return array
     */
    function wpml_get_synchronizing_taxonomies($post_id, $tax_name)
    {
    }
    /**
     *  Get synchronizing fields
     *
     * @since 1.3
     * @package WPML
     * @subpackage WPML API
     *
     * @param int $post_id Post ID
     * @param string $field_name Field name
     * @return array
     */
    function wpml_get_synchronizing_fields($post_id, $field_name)
    {
    }
    function new_duplicated_terms_filter($post_ids, $duplicates_only = \true)
    {
    }
    function display_tax_sync_message($post_id)
    {
    }
    function remove_taxonomy_hierarchy_message()
    {
    }
    /**
     * @return WPML_Notices
     */
    function wpml_get_admin_notices()
    {
    }
    function wpml_validate_language_domain_action()
    {
    }
    function wpml_load_request_handler($is_admin, $active_language_codes, $default_language)
    {
    }
    /**
     * gzdecode implementation
     *
     * @see http://hu.php.net/manual/en/function.gzencode.php#44470
     *
     * @param string $data
     * @param string $filename
     * @param string $error
     * @param int $maxlength
     * @return string
     */
    function icl_gzdecode($data, &$filename = '', &$error = '', $maxlength = \null)
    {
    }
    function wpml_disable_outdated_plugins()
    {
    }
    function wpml_init_language_switcher()
    {
    }
    function wpml_mlo_init()
    {
    }
    /**
     * @param SitePress $sitepress
     */
    function wpml_loaded($sitepress)
    {
    }
    function wpml_integrations_requirements()
    {
    }
    function wpml_troubleshoot_action_load()
    {
    }
    function wpml_init_language_cookie_settings()
    {
    }
}