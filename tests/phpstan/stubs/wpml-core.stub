<?php

namespace WPML\AbsoluteLinks {
    class BlockProtector
    {
        private $protectedBlocks = [];
        public function protect($text)
        {
        }
        public function unProtect($text)
        {
        }
    }
}
namespace {
    class AbsoluteLinks
    {
        /** @var array */
        public $custom_post_query_vars = [];
        /** @var array */
        public $taxonomies_query_vars = [];
        /** @var array */
        private $active_languages;
        public function __construct()
        {
        }
        public function init_query_vars()
        {
        }
        public function _process_generic_text($source_text, &$alp_broken_links)
        {
        }
        private function get_home_url_with_no_lang_directory()
        {
        }
        private function does_lang_exist($lang)
        {
        }
        public function _get_ids_and_post_types($name)
        {
        }
        private function initialize_rewrite($current_language, $default_language, $sitepress)
        {
        }
        public function all_rewrite_rules($rewrite)
        {
        }
        private function get_regex_replacement($def_url, $type, $type_id, $lang_negotiation, $lang, $dir_path, $home_url, $url_parts, $req_uri_params, $anchor_output)
        {
        }
        /**
         * Split parent/child term slug and get only the last part.
         *
         * @see https://onthegosystems.myjetbrains.com/youtrack/issue/wpmlcore-7036
         *
         * If $typeId is a child term of some taxonomy, then it comes here as `parent/child'
         * in next stages WordPress will use it in url like `?category=parent/child` and will try to resolve
         * what category has slug `parent/child'. WordPress must actually try to find just `child` so the code
         * below gets only last part of slash containing $typeId
         *
         * @param string $typeId Type slug.
         *
         * @return string
         */
        private function maybeStripParentTerm($typeId)
        {
        }
        private function get_regex_replacement_offline($def_url, $offsite_url, $lang_negotiation, $lang, $dir_path, $home_url, $anchor_output)
        {
        }
        /**
         * @param string $url
         *
         * @return string
         */
        private static function escapePlusSign($url)
        {
        }
        private function extract_lang_from_path($sitepress_settings, $default_language, $dir_path)
        {
        }
        public function process_string($st_id)
        {
        }
        public function process_post($post_id)
        {
        }
        public function convert_text($text)
        {
        }
        public function convert_url($url, $lang = \null)
        {
        }
        public function is_home($url)
        {
        }
        /**
         * Check if the link is the pagination inside the post.
         *
         * @param string $url
         * @param string $post_name
         *
         * @return bool
         */
        private function is_pagination_in_post($url, $post_name)
        {
        }
    }
    class WPML_Comment_Duplication
    {
        public function move_to_original($duplicate_of, $post_duplicates, $comment)
        {
        }
        public function get_correct_parent($comment, $dup_id)
        {
        }
        public function insert_duplicated_comment($comment, $dup_id, $original_cid)
        {
        }
        private function duplicate_exists($dup_id, $original_cid)
        {
        }
    }
    /**
     * Class WPML_WPDB_User
     *
     * Superclass for all WPML classes using the @global wpdb $wpdb
     *
     * @since 3.2.3
     */
    abstract class WPML_WPDB_User
    {
        /** @var wpdb $wpdb */
        public $wpdb;
        /**
         * @param wpdb $wpdb
         */
        public function __construct(&$wpdb)
        {
        }
        public function get_wpdb()
        {
        }
    }
    /**
     * Class WPML_WPDB_And_SP_User
     */
    abstract class WPML_WPDB_And_SP_User extends \WPML_WPDB_User
    {
        /** @var SitePress $sitepress */
        protected $sitepress;
        /**
         * @param wpdb      $wpdb
         * @param SitePress $sitepress
         */
        public function __construct(&$wpdb, &$sitepress)
        {
        }
    }
    /**
     * Class WPML_Post_Duplication
     *
     * @package    wpml-core
     * @subpackage post-translation
     */
    class WPML_Post_Duplication extends \WPML_WPDB_And_SP_User
    {
        function get_duplicates($master_post_id)
        {
        }
        function make_duplicate($master_post_id, $lang)
        {
        }
        /**
         * @param int $element_id
         *
         * @return null|string
         */
        private function is_external($element_id)
        {
        }
        private function run_wpml_actions($master_post, $trid, $lang, $id, $post_array)
        {
        }
        private function sync_page_template($master_post_id, $duplicate_post_id)
        {
        }
        private function duplicate_comments($master_post_id, $translated_id)
        {
        }
        /**
         * @param array  $post_array
         * @param string $lang
         *
         * @return int|WP_Error
         */
        private function save_duplicate(array $post_array, $lang)
        {
        }
        private function duplicate_fix_children($master_post_id, $lang)
        {
        }
        private function duplicate_taxonomies($master_post_id, $lang)
        {
        }
        private function sync_duplicate_password($master_post_id, $duplicate_post_id)
        {
        }
        private function duplicate_custom_fields($master_post_id, $lang)
        {
        }
        /**
         * @param string   $lang
         * @param \WP_Post $master_post
         *
         * @return array<string,mixed>
         */
        private function duplicate_post_content($lang, $master_post)
        {
        }
        /**
         * @param string   $lang
         * @param \WP_Post $master_post
         *
         * @return mixed
         */
        private function duplicate_post_title($lang, $master_post)
        {
        }
        /**
         * @param string $lang
         * @param WP_Post $master_post
         *
         * @return mixed
         */
        private function duplicate_post_excerpt($lang, $master_post)
        {
        }
    }
    /**
     * WPML_Element_Translation Class
     *
     * @package wpml-core
     * @abstract
     */
    abstract class WPML_Element_Translation extends \WPML_WPDB_User
    {
        /** @var array[] $element_data */
        protected $element_data = [];
        /** @var array[] $translations */
        protected $translations = [];
        /** @var array[] $trid_groups */
        protected $trid_groups = [];
        /** @var array[] $trid_groups */
        protected $translation_ids_element = [];
        /** @var int $type_prefix_length */
        private $type_prefix_length;
        /**
         * @param wpdb $wpdb
         */
        public function __construct(&$wpdb)
        {
        }
        protected abstract function get_element_join();
        protected abstract function get_type_prefix();
        /**
         * Clears the cached translations.
         */
        public function reload()
        {
        }
        public function get_element_trid($element_id)
        {
        }
        /**
         * @param int        $element_id
         * @param string     $lang
         * @param bool|false $original_fallback if true will return input $element_id if no translation is found
         *
         * @return null|int
         */
        public function element_id_in($element_id, $lang, $original_fallback = \false)
        {
        }
        /**
         * @param int  $element_id
         * @param bool $root if true gets the root element of the trid which itself
         * has no original. Otherwise returns the direct original of the given
         * element_id.
         *
         * @return int|null null if the element has no original
         */
        public function get_original_element($element_id, $root = \false)
        {
        }
        public function get_element_id($lang, $trid)
        {
        }
        /**
         * @param int $element_id
         *
         * @return null|string
         */
        public function get_element_lang_code($element_id)
        {
        }
        /**
         * @param int    $element_id
         * @param string $output
         *
         * @return array|null|stdClass
         */
        public function get_element_language_details($element_id, $output = \OBJECT)
        {
        }
        public function get_source_lang_code($element_id)
        {
        }
        public function get_type($element_id)
        {
        }
        public function get_source_lang_from_translation_id($translation_id)
        {
        }
        public function get_translation_id($element_id)
        {
        }
        public function get_translations_ids()
        {
        }
        /**
         * @param int       $element_id
         * @param int|false $trid
         * @param bool      $actual_translations_only
         *
         * @return array<int,int>
         */
        public function get_element_translations($element_id, $trid = \false, $actual_translations_only = \false)
        {
        }
        public function get_element_from_translation_id($translation_id)
        {
        }
        public function get_trid_from_translation_id($translation_id)
        {
        }
        public function get_trids()
        {
        }
        public function prefetch_ids($element_ids)
        {
        }
        /**
         * @param string $trid_snippet
         *
         * @return string
         */
        private function build_sql($trid_snippet)
        {
        }
        private function maybe_populate_cache($element_id, $trid = \false)
        {
        }
        private function group_and_populate_cache($elements)
        {
        }
        private function populate_cache($elements)
        {
        }
        private function filter_for_actual_trans($element_id)
        {
        }
        /**
         * @param int $post_id
         *
         * @return bool
         */
        public function is_a_duplicate($post_id)
        {
        }
    }
    /**
     * Class WPML_Post_Translation
     *
     * @package    wpml-core
     * @subpackage post-translation
     */
    abstract class WPML_Post_Translation extends \WPML_Element_Translation
    {
        protected $settings;
        protected $post_translation_sync;
        public static $defer_term_counting = \false;
        /**
         * @var WPML_Debug_BackTrace
         */
        private $debug_backtrace;
        /**
         * @param array $settings
         * @param wpdb  $wpdb
         */
        public function __construct(&$settings, &$wpdb)
        {
        }
        protected function is_setup_complete()
        {
        }
        public function init()
        {
        }
        public function get_original_post_status($trid, $source_lang_code = \null)
        {
        }
        public function get_original_post_ID($trid, $source_lang_code = \null)
        {
        }
        public function get_original_menu_order($trid, $source_lang_code = \null)
        {
        }
        public function get_original_comment_status($trid, $source_lang_code = \null)
        {
        }
        public function get_original_ping_status($trid, $source_lang_code = \null)
        {
        }
        public function get_original_post_format($trid, $source_lang_code = \null)
        {
        }
        /**
         * @param int     $pidd
         * @param WP_Post $post
         *
         * @return void
         */
        public abstract function save_post_actions($pidd, $post);
        /** @param int $post_id */
        public function attachment_actions($post_id)
        {
        }
        public function shutdown_action()
        {
        }
        public function trash_translation($trans_id)
        {
        }
        public function untrash_translation($trans_id)
        {
        }
        function untrashed_post_actions($post_id)
        {
        }
        public function delete_post_translation_entry($post_id)
        {
        }
        public function trashed_post_actions($post_id)
        {
        }
        /**
         * This function holds all actions to be run after deleting a post.
         * 1. Delete the posts entry in icl_translations.
         * 2. Set one of the posts translations or delete all translations of the post, depending on sitepress settings.
         *
         * @param Integer $post_id
         * @param bool $keep_db_entries Sets whether icl_translations entries are to be deleted or kept, when hooking this to
         * post trashing we want them to be kept.
         */
        public function delete_post_actions($post_id, $keep_db_entries = \false)
        {
        }
        /**
         * @param int    $post_id
         * @param string $post_status
         *
         * @return null|int
         */
        abstract function get_save_post_trid($post_id, $post_status);
        /**
         * @param integer $post_id
         * @param SitePress $sitepress
         * @return bool|mixed|null|string|void
         */
        public function get_save_post_lang($post_id, $sitepress)
        {
        }
        /**
         * @param int    $trid
         * @param string $language_code
         * @param string $default_language
         *
         * @return string|null
         */
        protected abstract function get_save_post_source_lang($trid, $language_code, $default_language);
        /**
         * Sets a posts language details, invalidates caches relating to the post and triggers
         * synchronisation actions across translations of the just saved post.
         *
         * @param int     $trid
         * @param array   $post_vars
         * @param string  $language_code
         * @param string  $source_language
         *
         * @used-by \WPML_Post_Translation::save_post_actions as final step of the WPML Core save_post actions
         */
        protected function after_save_post($trid, $post_vars, $language_code, $source_language)
        {
        }
        /**
         * Create new instance of WPML_WP_Cache for each group and flush cache for group.
         * @param array $groups
         */
        private function flush_object_cache_for_groups($groups = array())
        {
        }
        private function get_original_post_attr($trid, $attribute, $source_lang_code)
        {
        }
        public function has_save_post_action($post)
        {
        }
        /**
         * @param int $post_id
         *
         * @return bool
         */
        protected function is_editing_different_post($post_id)
        {
        }
        protected function get_element_join()
        {
        }
        protected function get_type_prefix()
        {
        }
        public function is_translated_type($post_type)
        {
        }
        /**
         * @param WP_Post $post
         *
         * @return string[] all language codes the post can be translated into
         */
        public function get_allowed_target_langs($post)
        {
        }
        /**
         * Before setting the language of the post to be saved, check if a translation in this language already exists
         * This check is necessary, so that synchronization actions like thrashing or un-trashing of posts, do not lead to
         * database corruption, due to erroneously changing a posts language into a state,
         * where it collides with an existing translation. While the UI prevents this sort of action for the most part,
         * this is not necessarily the case for other plugins like TM.
         * The logic here first of all checks if an existing translation id is present in the desired language_code.
         * If so but this translation is actually not the currently to be saved post,
         * then this post will be saved to its current language. If the translation already exists,
         * the existing translation id will be used. In all other cases a new entry in icl_translations will be created.
         *
         * @param Integer $trid
         * @param String  $post_type
         * @param String  $language_code
         * @param Integer $post_id
         * @param String  $source_language
         */
        private function maybe_set_elid($trid, $post_type, $language_code, $post_id, $source_language)
        {
        }
        /**
         * @return WPML_Post_Synchronization
         */
        private function get_sync_helper()
        {
        }
        /**
         * @return WPML_Debug_BackTrace
         */
        private function get_debug_backtrace()
        {
        }
        public function set_debug_backtrace(\WPML_Debug_BackTrace $debug_backtrace)
        {
        }
        /**
         * @return bool
         */
        protected function is_inner_post_insertion()
        {
        }
        /**
         * @param WP_Post $post
         *
         * @return array
         */
        protected function get_post_vars($post)
        {
        }
        protected function defer_term_counting()
        {
        }
        /**
         * @return self|WPML_Frontend_Post_Actions|WPML_Admin_Post_Actions
         */
        public static function getGlobalInstance()
        {
        }
    }
    class WPML_Frontend_Post_Actions extends \WPML_Post_Translation
    {
        /**
         * @param int    $post_id
         * @param string $post_status
         *
         * @return null|int
         */
        function get_save_post_trid($post_id, $post_status)
        {
        }
        /**
         * @param int     $pidd
         * @param WP_Post $post
         *
         * @return void
         */
        public function save_post_actions($pidd, $post)
        {
        }
        protected function get_save_post_source_lang($trid, $language_code, $default_language)
        {
        }
    }
    abstract class WPML_Hierarchy_Sync extends \WPML_WPDB_User
    {
        const CACHE_GROUP = __CLASS__;
        protected $original_elements_table_alias = 'org';
        protected $translated_elements_table_alias = 'tra';
        protected $original_elements_language_table_alias = 'iclo';
        protected $translated_elements_language_table_alias = 'iclt';
        protected $correct_parent_table_alias = 'corr';
        protected $correct_parent_language_table_alias = 'iclc';
        protected $original_parent_table_alias = 'parents';
        protected $original_parent_language_table_alias = 'parent_lang';
        protected $element_id_column;
        protected $parent_element_id_column;
        protected $parent_id_column;
        protected $element_type_column;
        protected $element_type_prefix;
        protected $elements_table;
        protected $lang_info_table;
        /**
         * @param wpdb $wpdb
         */
        public function __construct(&$wpdb)
        {
        }
        public function clean_cache()
        {
        }
        public function get_unsynced_elements($element_types, $ref_lang_code = \false)
        {
        }
        /**
         * @param string|array $element_types
         * @param bool         $ref_lang_code
         */
        public function sync_element_hierarchy($element_types, $ref_lang_code = \false)
        {
        }
        /**
         * @param string $element_type
         *
         * @return mixed
         */
        public abstract function is_hierarchical($element_type);
        private function update_hierarchy_for_element($row)
        {
        }
        private function validate_parent_synchronization($row)
        {
        }
        private function get_source_element_join()
        {
        }
        private function get_translated_element_join()
        {
        }
        private function get_source_element_table()
        {
        }
        private function get_join_translation_language_data($ref_language_code)
        {
        }
        private function get_select_statement()
        {
        }
        private function get_original_parent_join()
        {
        }
        private function get_original_parent_language_join()
        {
        }
        private function get_correct_parent_language_join()
        {
        }
        private function get_correct_parent_element_join()
        {
        }
        private function get_where_statement($element_types, $ref_lang_code)
        {
        }
    }
    class WPML_Post_Hierarchy_Sync extends \WPML_Hierarchy_Sync
    {
        protected $element_id_column = 'ID';
        protected $parent_element_id_column = 'ID';
        protected $parent_id_column = 'post_parent';
        protected $element_type_column = 'post_type';
        protected $element_type_prefix = 'post_';
        /**
         * @param wpdb $wpdb
         */
        public function __construct(&$wpdb)
        {
        }
        /**
         * @param string $element_type
         *
         * @return bool
         */
        public function is_hierarchical($element_type)
        {
        }
    }
    /**
     * Class WPML_WordPress_Actions
     * @package    wpml-core
     * @subpackage post-translation
     */
    class WPML_WordPress_Actions
    {
        /**
         * @param int $post_id
         *
         * @return bool
         */
        public static function is_bulk_trash($post_id)
        {
        }
        /**
         * @param int $post_id
         *
         * @return bool
         */
        public static function is_bulk_untrash($post_id)
        {
        }
        public static function is_heartbeat()
        {
        }
        protected static function is_trash_action()
        {
        }
        protected static function is_untrash_action()
        {
        }
        /**
         * @param string $action
         *
         * @return bool
         */
        protected static function is_action($action, $type = 'get')
        {
        }
        /**
         * @param int $post_id
         * @param bool $check_ids
         *
         * @return bool
         */
        protected static function post_id_in_bulk($post_id, $check_ids = \false)
        {
        }
    }
    /**
     * Class WPML_Create_Post_Helper
     *
     * @since 3.2
     */
    class WPML_Create_Post_Helper
    {
        /** @var SitePress $sitepress */
        private $sitepress;
        public function __construct(\SitePress $sitepress)
        {
        }
        /**
         * @param array       $postarr will be escaped inside the method
         * @param string|null $lang
         * @param bool        $wp_error
         *
         * @return int|WP_Error
         */
        public function insert_post(array $postarr, $lang = \null, $wp_error = \false)
        {
        }
        public function allow_empty_post()
        {
        }
        /**
         * We need to make sure that tag IDs are not casted into strings.
         * This is a side effect of https://core.trac.wordpress.org/ticket/45121
         * (wp_update_post() can modify post tag) for which we have
         * a temporary fix in `\WPML_Page_Builders_Media_Shortcodes_Update::translate`.
         *
         * @param array $postarr
         *
         * @return array
         */
        private function slash_and_preserve_tag_ids(array $postarr)
        {
        }
        private function parse_tag($tags)
        {
        }
    }
    /**
     * Class WPML_Admin_Post_Actions
     *
     * @package    wpml-core
     * @subpackage post-translation
     */
    class WPML_Admin_Post_Actions extends \WPML_Post_Translation
    {
        const DUPLICATE_MEDIA_META_KEY = '_wpml_media_duplicate';
        const DUPLICATE_FEATURED_META_KEY = '_wpml_media_featured';
        const DUPLICATE_MEDIA_GLOBAL_KEY = 'duplicate_media';
        const DUPLICATE_FEATURED_GLOBAL_KEY = 'duplicate_media';
        private $http_referer;
        public function init()
        {
        }
        /**
         * @param int    $post_id
         * @param string $post_status
         *
         * @return null|int
         */
        function get_save_post_trid($post_id, $post_status)
        {
        }
        /**
         * @param int     $post_id
         * @param WP_Post $post
         */
        public function save_post_actions($post_id, $post)
        {
        }
        /**
         * @param int         $post_id
         * @param string|null $source_language
         */
        private function save_media_options($post_id, $source_language)
        {
        }
        private function has_post_media_options_metabox()
        {
        }
        /**
         * @param int         $post_id
         * @param string|null $source_language
         */
        private function sync_media_options_with_original_or_global_settings($post_id, $source_language)
        {
        }
        private function has_invalid_language_details_on_heartbeat()
        {
        }
        /**
         * @param integer   $post_id
         * @param SitePress $sitepress
         *
         * @return null|string
         */
        public function get_save_post_lang($post_id, $sitepress)
        {
        }
        /**
         * @param array $post_vars
         * @return bool
         */
        private function is_inline_action($post_vars)
        {
        }
        /**
         * @param int    $trid
         * @param string $language_code
         * @param string $default_language
         *
         * @return null|string
         */
        protected function get_save_post_source_lang($trid, $language_code, $default_language)
        {
        }
        /**
         * Gets the source_language $_GET parameter from the HTTP_REFERER
         *
         * @return string|bool
         */
        private function get_source_language_from_referer()
        {
        }
        public function get_trid_from_referer()
        {
        }
        protected function get_http_referer()
        {
        }
    }
    /**
     * Class WPML_SP_User
     *
     * Superclass for all WPML classes using the @global SitePress $sitepress directly
     *
     * @since 3.2.3
     */
    abstract class WPML_SP_User
    {
        /** @var  SitePress $sitepress */
        protected $sitepress;
        /**
         * @param SitePress $sitepress
         */
        public function __construct(&$sitepress)
        {
        }
    }
    abstract class WPML_SP_And_PT_User extends \WPML_SP_User
    {
        /** @var  WPML_Post_Translation $post_translation */
        protected $post_translation;
        /**
         * @param WPML_Post_Translation $post_translation
         * @param SitePress             $sitepress
         */
        public function __construct(&$post_translation, &$sitepress)
        {
        }
    }
    /**
     * Class WPML_Post_Synchronization
     *
     * @package    wpml-core
     * @subpackage post-translation
     */
    class WPML_Post_Synchronization extends \WPML_SP_And_PT_User
    {
        /** @var bool[] */
        private $sync_parent_cpt = array();
        /** @var bool $sync_parent */
        private $sync_parent;
        /** @var bool $sync_delete */
        private $sync_delete;
        /** @var bool $sync_ping_status */
        private $sync_ping_status;
        /** @var bool $sync_post_date */
        private $sync_post_date;
        /** @var bool $sync_post_format */
        private $sync_post_format;
        /** @var bool $sync_comment_status */
        private $sync_comment_status;
        /** @var bool $sync_page_template */
        private $sync_page_template;
        /** @var bool $sync_menu_order */
        private $sync_menu_order;
        /** @var bool $sync_password */
        private $sync_password;
        /** @var bool $sync_private_flag */
        private $sync_private_flag;
        /** @var bool $is_deleting_all_translations */
        private $is_deleting_all_translations = \false;
        /** @var array $deleted_post_types */
        private $deleted_post_types = array();
        /**
         * @var int
         */
        private $sync_document_status;
        /**
         * @param array                 $settings
         * @param WPML_Post_Translation $post_translations
         * @param SitePress             $sitepress
         */
        public function __construct(&$settings, &$post_translations, &$sitepress)
        {
        }
        private function must_sync_parents($post_type)
        {
        }
        /**
         * Fixes parents of translations for hierarchical post types
         *
         * User changed parent for a post in $post_type and we are setting proper parent for $translation_id in
         * $language_code_translated language
         *
         * @param string $post_type - post_type that should have the translated parents fixed
         */
        private function maybe_fix_translated_parent($post_type)
        {
        }
        public function sync_with_duplicates($post_id)
        {
        }
        /**
         * @param int  $post_id
         * @param bool $keep_db_entries
         */
        public function delete_post_actions($post_id, $keep_db_entries = \false)
        {
        }
        /**
         * @param int $post_id
         * @param int $trid
         *
         * @return array
         */
        private function get_translations_without_source($post_id, $trid)
        {
        }
        private function is_bulk_delete()
        {
        }
        /** @param string $post_type */
        private function reset_cache($post_type)
        {
        }
        /** @param string $post_type */
        private function defer_delete_actions($post_type)
        {
        }
        public function shutdown_action()
        {
        }
        /**
         * @param array $translated_ids
         * @param bool  $keep_db_entries
         */
        private function delete_translations(array $translated_ids, $keep_db_entries)
        {
        }
        /** @param string $post_type */
        private function run_final_actions_for_delete_post($post_type)
        {
        }
        private function is_bulk_prevented($post_id)
        {
        }
        function untrashed_post_actions($post_id)
        {
        }
        public function sync_with_translations($post_id, $post_vars = \false)
        {
        }
        /**
         * The function `get_post_status` does not return the raw status for attachments.
         * As we are running direct DB updates here, we need the actual DB value.
         *
         * @param int $post_id
         *
         * @return string|false
         */
        private function get_post_status($post_id)
        {
        }
        private function sync_custom_fields($original_id, $post_id)
        {
        }
        private function set_new_original($trid, $removed_lang_code)
        {
        }
    }
    class WPML_Root_Page_Actions
    {
        /** @var array $sp_settings */
        private $sp_settings;
        public function __construct(&$sitepress_settings)
        {
        }
        public function delete_root_page_lang()
        {
        }
        /**
         * Checks if a given $url points at the root page
         *
         * @param string $url
         *
         * @return bool
         *
         * @uses \WPML_Root_Page::is_root_page
         */
        public function is_url_root_page($url)
        {
        }
        /**
         * If a page is used as the root page, returns the id of that page, otherwise false.
         *
         * @return bool|false|int
         */
        public function get_root_page_id()
        {
        }
        function wpml_home_url_init()
        {
        }
        function wpml_home_url_exclude_root_page_from_menus($args)
        {
        }
        /**
         * Filters out all page menu items that point to the root page.
         *
         * @param object[] $items
         *
         * @return array
         *
         * @hook wp_get_nav_menu_items
         */
        function exclude_root_page_menu_item($items)
        {
        }
        function wpml_home_url_exclude_root_page($excludes)
        {
        }
        function wpml_home_url_exclude_root_page2($args)
        {
        }
        function wpml_home_url_get_pages($pages)
        {
        }
        function wpml_home_url_language_box_setup()
        {
        }
        function wpml_home_url_language_box($post)
        {
        }
        function wpml_home_url_save_post_actions($pidd, $post)
        {
        }
        function wpml_home_url_setup_root_page()
        {
        }
        /**
         * @param WP_Query $q
         *
         * @return mixed
         */
        function wpml_home_url_parse_query($q)
        {
        }
        private function set_page_query_parameters($q, $page_id)
        {
        }
    }
    /**
     * Class WPML_Slug_Resolution
     *
     * @package    wpml-core
     * @subpackage post-translation
     */
    abstract class WPML_Slug_Resolution extends \WPML_WPDB_And_SP_User
    {
        const WPML_BACKUP_KEY = '_wpml_backup';
        /**
         * Returns all active language codes ordered by the language order, but having the current language
         * at the beginning.
         *
         * @return string[]
         *
         * @uses \SitePress::get_setting to get the languages order from the sitepress settings
         */
        protected function get_ordered_langs()
        {
        }
        /**
         * @param string   $key
         * @param WP_Query $wp_query
         */
        protected function set_query_var_to_restore($key, \WP_Query $wp_query)
        {
        }
        /**
         * @param WP_Post[] $posts
         * @param WP_Query  $wp_query
         *
         * @return mixed
         */
        public function restore_query_vars($posts, $wp_query)
        {
        }
    }
    /**
     * Class WPML_Name_Query_Filter
     *
     * @package    wpml-core
     * @subpackage post-translation
     *
     * @since      3.2.3
     */
    abstract class WPML_Name_Query_Filter extends \WPML_Slug_Resolution
    {
        /** @var string $post_type */
        protected $post_type;
        /** @var string[] $indexes */
        protected $indexes = array('name');
        /** @var string $id_index */
        protected $id_index = 'p';
        /** @var string[] $active_languages */
        protected $active_languages = array();
        /** @var string $al_regexp */
        protected $al_regexp;
        /** @var  WPML_Post_Translation $post_translation */
        protected $post_translation;
        protected $is_translated;
        /**
         * @param string                $post_type
         * @param SitePress             $sitepress
         * @param WPML_Post_Translation $post_translations
         * @param wpdb                  $wpdb
         */
        public function __construct($post_type, &$sitepress, &$post_translations, &$wpdb)
        {
        }
        /**
         * Looks through the "name" and "pagename" query vars in a given query and identifies the correct page_id
         * corresponding to either of these two and then adjusts the query page_id to point at this correct page_id.
         *
         * @param WP_Query $page_query
         *
         * @return array
         *                  - WP_Query that uses the id index stored in \WPML_Name_Query_Filter::$id_index
         *                  instead of "name" or "pagename" in case a match was found, otherwise
         *                  returns the input query unaltered.
         *                  - int|false the page ID
         */
        public function filter_page_name(\WP_Query $page_query)
        {
        }
        protected abstract function select_best_match($pages_with_name);
        /**
         * @param WP_Query $page_query
         * @param int      $pid
         * @param string   $index
         *
         * @return WP_Query
         */
        protected function maybe_adjust_query_by_pid($page_query, $pid, $index)
        {
        }
        /**
         * Called when the post id is being adjusted. Can be overridden.
         *
         * @param WP_Query $page_query
         *
         * @return WP_Query
         */
        protected function adjusting_id($page_query)
        {
        }
        /**
         * Returns a SQL snippet for joining the posts table with icl translations filtered for the post_type
         * of this class.
         *
         * @return string
         */
        protected abstract function get_from_join_snippet();
        /**
         * Generates a regular expression matcher for matching language slugs in a URI
         *
         * @param string[] $active_language_codes
         *
         * @return string
         */
        private function generate_al_regexp($active_language_codes)
        {
        }
        /**
         * @param WP_Query $page_query
         * @param string   $index
         *
         * @return array
         */
        private function query_needs_adjustment(\WP_Query $page_query, $index)
        {
        }
        /**
         * @param string $page_name_for_query
         *
         * @return bool
         */
        private function page_name_has_parent($page_name_for_query)
        {
        }
        /**
         * @param WP_Query $page_query
         *
         * @return int|string
         */
        private function get_post_parent_query_var(\WP_Query $page_query)
        {
        }
        /**
         * @param string     $page_name_for_query
         * @param string|int $post_parent
         *
         * @return array
         */
        private function get_single_slug_adjusted_IDs($page_name_for_query, $post_parent)
        {
        }
        /**
         * @param string     $page_name_for_query
         * @param string|int $post_parent
         *
         * @return array
         */
        private function get_single_slug_adjusted_IDs_from_DB($page_name_for_query, $post_parent)
        {
        }
        /**
         * @param string[] $slugs slugs that were queried for
         *
         * @return int[] page_ids ordered by their likelihood of correctly matching the query target,
         *               derived from checking all slugs against the sits pages slugs as well as their parent slugs.
         *               Elements at the beginning of the array are more correct than later elements, but the results
         *               are not yet filtered for the correct language.
         *
         * @used-by \WPML_Page_Name_Query_Filter::filter_page_name to find the correct page_id corresponding to a set of slugs,
         *                                                         by filtering the results of this function by language of the
         *                                                         returned page_ids.
         */
        private function get_multiple_slug_adjusted_IDs($slugs)
        {
        }
        private function get_where_snippet()
        {
        }
    }
    /**
     * Class WPML_Name_Query_Filter_Untranslated
     *
     * @package    wpml-core
     * @subpackage post-translation
     *
     * @since      3.2.3
     */
    class WPML_Name_Query_Filter_Untranslated extends \WPML_Name_Query_Filter
    {
        protected function select_best_match($pages_with_name)
        {
        }
        /**
         * Returns a SQL snippet for joining the posts table with icl translations filtered for the post_type
         * of this class.
         *
         * @return string
         */
        protected function get_from_join_snippet()
        {
        }
    }
    /**
     * Class WPML_Name_Query_Filter_Translated
     *
     * @package    wpml-core
     * @subpackage post-translation
     *
     * @since      3.2.3
     */
    class WPML_Name_Query_Filter_Translated extends \WPML_Name_Query_Filter
    {
        private $pages_to_langs = array();
        /**
         * @param array $pages_with_name
         *
         * @return int|null|string
         */
        protected function select_best_match($pages_with_name)
        {
        }
        /**
         * @param array $matching_ids
         *
         * @return int|null
         */
        private function get_matching_page_in_requested_lang(array $matching_ids)
        {
        }
        /**
         * @return int|null
         */
        private function get_matching_page_displayed_as_translated()
        {
        }
        /**
         * Note: `$this->active_languages` is already ordered in `get_ordered_langs`
         *
         * @param array $related_page_ids
         *
         * @return int|null
         */
        private function get_the_best_related_page_to_redirect(array $related_page_ids)
        {
        }
        /**
         * Returns a SQL snippet for joining the posts table with icl translations filtered for the post_type
         * of this class.
         *
         * @return string
         */
        protected function get_from_join_snippet()
        {
        }
    }
    /**
     * Class WPML_Page_Name_Query_Filter
     *
     * @package    wpml-core
     * @subpackage post-translation
     *
     * @since      3.2
     */
    class WPML_Page_Name_Query_Filter extends \WPML_Name_Query_Filter_Translated
    {
        protected $id_index = 'page_id';
        /**
         * @param SitePress             $sitepress
         * @param WPML_Post_Translation $post_translations
         * @param wpdb                  $wpdb
         */
        public function __construct(&$sitepress, &$post_translations, &$wpdb)
        {
        }
        /**
         * @param WP_Query $page_query
         * @param int      $pid
         * @param string   $index
         *
         * @return WP_Query
         */
        protected function maybe_adjust_query_by_pid($page_query, $pid, $index)
        {
        }
        /**
         * Called when the post id is being adjusted. Can be overridden.
         *
         * @param WP_Query $page_query
         *
         * @return WP_Query
         */
        protected function adjusting_id($page_query)
        {
        }
    }
    class WPML_Settings_Helper
    {
        const KEY_CPT_UNLOCK_OPTION = 'custom_posts_unlocked_option';
        const KEY_TAXONOMY_UNLOCK_OPTION = 'taxonomies_unlocked_option';
        /** @var SitePress */
        protected $sitepress;
        /** @var WPML_Post_Translation */
        protected $post_translation;
        /**
         * @var WPML_Settings_Filters
         */
        private $filters;
        /**
         * @param WPML_Post_Translation $post_translation
         * @param SitePress             $sitepress
         */
        public function __construct(\WPML_Post_Translation $post_translation, \SitePress $sitepress)
        {
        }
        /**
         * @return WPML_Settings_Filters
         */
        private function get_filters()
        {
        }
        function set_post_type_translatable($post_type)
        {
        }
        function set_post_type_display_as_translated($post_type)
        {
        }
        function set_post_type_not_translatable($post_type)
        {
        }
        private function set_post_type_translate_mode($post_type, $mode)
        {
        }
        function set_taxonomy_translatable($taxonomy)
        {
        }
        function set_taxonomy_display_as_translated($taxonomy)
        {
        }
        function set_taxonomy_translatable_mode($taxonomy, $mode)
        {
        }
        function set_taxonomy_not_translatable($taxonomy)
        {
        }
        function set_post_type_translation_unlocked_option($post_type, $unlocked = \true)
        {
        }
        function set_taxonomy_translation_unlocked_option($taxonomy, $unlocked = \true)
        {
        }
        /**
         * @deprecated use the action `wpml_activate_slug_translation` instead
         *             or `WPML_ST_Post_Slug_Translation_Settings` instead (on ST side)
         *
         * @param string $post_type
         */
        function activate_slug_translation($post_type)
        {
        }
        /**
         * @deprecated use `WPML_ST_Post_Slug_Translation_Settings` instead (on ST side)
         *
         * @param string $post_type
         */
        function deactivate_slug_translation($post_type)
        {
        }
        /**
         * @param array[] $taxs_obj_type
         *
         * @see \WPML_Config::maybe_add_filter
         *
         * @return array
         */
        function _override_get_translatable_taxonomies($taxs_obj_type)
        {
        }
        /**
         * @param array[] $types
         *
         * @see \WPML_Config::maybe_add_filter
         *
         * @return array
         */
        function _override_get_translatable_documents($types)
        {
        }
        /**
         * Updates the custom post type translation settings with new settings.
         *
         * @param array $new_options
         *
         * @uses \SitePress::get_setting
         * @uses \SitePress::save_settings
         *
         * @return array new custom post type settings after the update
         */
        function update_cpt_sync_settings(array $new_options)
        {
        }
        /**
         * Updates the taxonomy type translation settings with new settings.
         *
         * @param array $new_options
         *
         * @uses \SitePress::get_setting
         * @uses \SitePress::save_settings
         *
         * @return array new taxonomy type settings after the update
         */
        function update_taxonomy_sync_settings(array $new_options)
        {
        }
        /**
         * Updates the custom post type unlocked settings with new settings.
         *
         * @param array $unlock_options
         *
         * @uses \SitePress::get_setting
         * @uses \SitePress::save_settings
         *
         * @return array new custom post type unlocked settings after the update
         */
        function update_cpt_unlocked_settings(array $unlock_options)
        {
        }
        /**
         * Updates the taxonomy type unlocked settings with new settings.
         *
         * @param array $unlock_options
         *
         * @uses \SitePress::get_setting
         * @uses \SitePress::save_settings
         *
         * @return array new taxonomy type unlocked settings after the update
         */
        function update_taxonomy_unlocked_settings(array $unlock_options)
        {
        }
        /**
         * @param array  $unlock_options
         * @param string $setting_key
         *
         * @return array
         */
        private function update_unlocked_settings(array $unlock_options, $setting_key)
        {
        }
        /**
         * @param string $config_type
         */
        function maybe_add_filter($config_type)
        {
        }
        private function clear_ls_languages_cache()
        {
        }
    }
    class WPML_Media_Duplication_Setup
    {
        const MEDIA_SETTINGS_OPTION_KEY = '_wpml_media';
        public static function initialize_settings()
        {
        }
    }
    class SitePress_Setup
    {
        static function setup_complete()
        {
        }
        static function languages_complete()
        {
        }
        private static function active_languages_complete()
        {
        }
        /**
         * @return array
         */
        private static function get_languages_codes()
        {
        }
        /**
         * @return array
         */
        private static function get_languages_names()
        {
        }
        private static function get_languages_names_count()
        {
        }
        static function get_charset_collate()
        {
        }
        private static function create_languages()
        {
        }
        static function languages_table_is_complete()
        {
        }
        /**
         * @param string $language_name
         *
         * @return string
         */
        protected static function fix_language_name($language_name)
        {
        }
        private static function get_language_translations()
        {
        }
        static function fill_languages()
        {
        }
        private static function create_languages_translations()
        {
        }
        static function fill_languages_translations()
        {
        }
        private static function create_table($name, $table_sql)
        {
        }
        private static function create_flags()
        {
        }
        public static function fill_flags()
        {
        }
        public static function insert_default_category($lang_code)
        {
        }
    }
    class WPML_Installation extends \WPML_WPDB_And_SP_User
    {
        const WPML_START_VERSION_KEY = 'wpml_start_version';
        public static function getStartVersion()
        {
        }
        function go_to_setup1()
        {
        }
        /**
         * Sets the locale in the icl_locale_map if it has not yet been set
         *
         * @param string $initial_language_code
         */
        private function maybe_set_locale($initial_language_code)
        {
        }
        public function finish_step2($active_languages)
        {
        }
        public function set_active_languages($arr)
        {
        }
        private function sanitize_language_input($lang_codes)
        {
        }
        public function finish_installation()
        {
        }
        public function store_site_key($site_key = \false)
        {
        }
        public function finish_step3()
        {
        }
        private function maybe_move_setup($step)
        {
        }
        private function updated_active_languages()
        {
        }
        public function finish_step1($initial_language_code)
        {
        }
        /**
         * @param string $initial_language_code
         *
         * @return string
         */
        private function get_admin_language($initial_language_code)
        {
        }
        private function set_initial_default_category($initial_lang)
        {
        }
        private function rename_default_category_of_initial_language($initial_lang, $category_id)
        {
        }
        /**
         * @param string $display_language
         * @param bool   $active_only
         * @param bool   $major_first
         * @param string $order_by
         *
         * @return array<string,\stdClass>
         */
        public function refresh_active_lang_cache($display_language, $active_only = \false, $major_first = \false, $order_by = 'english_name')
        {
        }
        private function update_languages_order()
        {
        }
        private function prepopulate_translations($lang)
        {
        }
        public function update_active_language($lang)
        {
        }
        function reset_language_data()
        {
        }
    }
    /**
     * Class WPML_Update_Term_Action
     *
     * This class holds the functionality for creating or editing a taxonomy term.
     *
     * @package    wpml-core
     * @subpackage taxonomy-term-translation
     */
    class WPML_Update_Term_Action extends \WPML_WPDB_And_SP_User
    {
        /**
         * TRUE if this object represents valid data for the update or creation of a term, false otherwise.
         *
         * @var bool
         */
        private $is_valid = \true;
        /**
         * TRUE if this object represents term update action, false if it represents a term creation action.
         *
         * @var bool
         */
        private $is_update;
        /**
         * Argument array containing arguments in a format that can and is used as input to \wp_update_term or
         * \wp_insert_term
         *
         * @var array
         */
        private $wp_new_term_args = array();
        /**
         * The taxonomy in which this action takes place.
         *
         * @var string
         */
        private $taxonomy;
        /**
         * Trid value in the icl_translations table to which this action is to be written.
         *
         * @var int
         */
        private $trid;
        /**
         * Language of the term that is to result from this action.
         *
         * @var string
         */
        private $lang_code;
        /**
         * Source language of the term that is to result from this action.
         *
         * @var string|null
         */
        private $source_lang_code = \null;
        /**
         * Array holding translations of the term created by this object prior to it's creation.
         *
         * @var array
         */
        private $existing_translations = array();
        /**
         * The term id of the term to be updated or resulting from this action.
         *
         * @var int
         */
        private $term_id;
        /**
         * This only gets set for update actions. In this case the new slug has to be compared with the old slug,
         * to decide whether any slug name sanitation has to happen.
         *
         * @var string
         */
        private $old_slug;
        /**
         * @param wpdb      $wpdb
         * @param SitePress $sitepress
         * @param array     $args
         */
        public function __construct(&$wpdb, &$sitepress, $args)
        {
        }
        /**
         * Writes the term update or creation action saved in this object to the database.
         *
         * @return array|false
         * Returns either an array containing the term_id and term_taxonomy_id of the term resulting from this database
         * write or false on error.
         */
        public function execute()
        {
        }
        /**
         * This action is to be hooked to the WP create_term and edit_term hooks.
         * It sets the correct language information after a term is saved.
         *
         * @param int|string $term_id
         * @param int|string $term_taxonomy_id
         * @param string     $taxonomy
         */
        public function add_term_language_action($term_id, $term_taxonomy_id, $taxonomy)
        {
        }
        /**
         * Sets the language variables for this object.
         *
         * @param bool|int    $trid
         * @param bool|int    $original_tax_id
         * @param string      $lang_code
         * @param bool|string $source_language
         * @return bool True if the given language parameters allowed for determining valid language information, false
         *              otherwise.
         */
        private function set_language_information($trid, $original_tax_id, $lang_code, $source_language)
        {
        }
        /**
         * Sets the action type of this object.
         * In case of this action being an update the is_update flag is set true.
         * Also the term_id of the existing term is saved in $this->term_id.
         */
        private function set_action_type()
        {
        }
    }
    /**
     * Class WPML_Term_Hierarchy_Duplication
     *
     * @package    wpml-core
     * @subpackage taxonomy-term-translation
     */
    class WPML_Term_Hierarchy_Duplication extends \WPML_WPDB_And_SP_User
    {
        public function duplicates_require_sync($post_ids, $duplicates_only = \true)
        {
        }
        private function get_need_sync_new_dupl($duplicated_ids, $taxonomies)
        {
        }
        private function get_need_sync_all_terms($translated_taxonomies, $post_ids)
        {
        }
        private function get_new_terms_just_duplicated($duplicate_ids, $taxonomies)
        {
        }
    }
    /**
     * Class WPML_WPDB_And_SP_User
     */
    abstract class WPML_Full_PT_API extends \WPML_WPDB_And_SP_User
    {
        /** @var  WPML_Post_Translation $post_translations */
        protected $post_translations;
        /**
         * @param wpdb                  $wpdb
         * @param SitePress             $sitepress
         * @param WPML_Post_Translation $post_translations
         */
        public function __construct(&$wpdb, &$sitepress, &$post_translations)
        {
        }
    }
    class WPML_Full_Translation_API extends \WPML_Full_PT_API
    {
        /** @var  WPML_Term_Translation $term_translations */
        protected $term_translations;
        /**
         * @param SitePress             $sitepress
         * @param wpdb                  $wpdb
         * @param WPML_Post_Translation $post_translations
         * @param WPML_Term_Translation $term_translations
         */
        function __construct(&$sitepress, &$wpdb, &$post_translations, &$term_translations)
        {
        }
    }
    /**
     * Class WPML_Nav_Menu_Actions
     *
     * @package    wpml-core
     * @subpackage taxonomy-term-translation
     */
    class WPML_Nav_Menu_Actions extends \WPML_Full_Translation_API
    {
        /**
         * @param SitePress             $sitepress
         * @param wpdb                  $wpdb
         * @param WPML_Post_Translation $post_translations
         * @param WPML_Term_Translation $term_translations
         */
        public function __construct(&$sitepress, &$wpdb, &$post_translations, &$term_translations)
        {
        }
        public function wp_delete_nav_menu($id)
        {
        }
        function wp_update_nav_menu($menu_id, $menu_data = \null)
        {
        }
        function wp_update_nav_menu_item($menu_id, $menu_item_db_id, $args)
        {
        }
        public function wp_delete_nav_menu_item($menu_item_id)
        {
        }
        public function pre_update_theme_mods_theme($val)
        {
        }
        public function theme_mod_nav_menu_locations($theme_locations)
        {
        }
        private function get_save_lang($menu_id)
        {
        }
        /**
         * @return bool|int|mixed|null|string
         */
        private function get_trid_from_post_data()
        {
        }
    }
    class WPML_Frontend_Tax_Filters
    {
        public function __construct()
        {
        }
        /**
         * Adjust template (taxonomy-)$taxonomy-$term.php for translated term slugs and IDs
         *
         * @since 3.1
         *
         * @param string $template
         *
         * @return string The template filename if found.
         */
        function slug_template($template)
        {
        }
        private function get_template_prefix($taxonomy)
        {
        }
        private function add_term_templates($term, $current_language, $templates)
        {
        }
        private function add_original_term_templates($term, $default_language, $current_language, $templates)
        {
        }
        private function get_queried_tax_term()
        {
        }
    }
    /**
     * WPML_Term_Filters class file.
     *
     * @package    WPML\Core
     * @subpackage taxonomy-term-translation
     */
    /**
     * Class WPML_Term_Filters
     */
    class WPML_Term_Filters extends \WPML_WPDB_And_SP_User
    {
        /**
         * Init class.
         */
        public function init()
        {
        }
        /**
         * @param string       $taxonomy        Taxonomy slug.
         * @param array|string $object_type     Object type or array of object types.
         * @param array        $taxonomy_object Array of taxonomy registration arguments.
         */
        public function registered_taxonomy($taxonomy, $object_type, $taxonomy_object)
        {
        }
        /**
         * @param string $taxonomy Taxonomy slug.
         */
        private function add_hooks_to_translated_taxonomy($taxonomy)
        {
        }
        public function update_tax_children_option($taxonomy_input = \false)
        {
        }
        public function pre_option_tax_children()
        {
        }
        /**
         * @param string $taxonomy
         * @param string $lang_code
         *
         * @return array
         */
        public function get_tax_hier_array($taxonomy, $lang_code)
        {
        }
    }
    class WPML_Term_Translation_Utils extends \WPML_SP_User
    {
        /**
         * Duplicates all terms, that exist in the given target language,
         * from the original post to the translation in that language.
         *
         * @param int    $original_post_id
         * @param string $lang
         */
        function sync_terms($original_post_id, $lang)
        {
        }
        /**
         * Duplicates all terms on the original post to its translation in the given target language.
         * Missing terms are created with the same name as their originals.
         *
         * @param int    $original_post_id
         * @param string $lang
         */
        function duplicate_terms($original_post_id, $lang)
        {
        }
        /**
         * @param int    $original_post_id
         * @param string $lang
         * @param bool   $duplicate sets whether missing terms should be created by duplicating the original term
         */
        private function synchronize_terms($original_post_id, $lang, $duplicate)
        {
        }
        /**
         * @param object[] $terms
         * @param string   $lang
         * @param string   $taxonomy
         * @param bool     $duplicate sets whether missing terms should be created by duplicating the original term
         *
         * @return array
         */
        private function get_translated_term_ids($terms, $lang, $taxonomy, $duplicate)
        {
        }
    }
    /**
     * @since      3.2
     *
     * Class WPML_Term_Translation
     *
     * Provides APIs for translating taxonomy terms
     *
     * @package    wpml-core
     * @subpackage taxonomy-term-translation
     */
    class WPML_Term_Translation extends \WPML_Element_Translation
    {
        /** @var array|null */
        protected $ttids;
        /** @var array|null */
        protected $term_ids;
        public function reload()
        {
        }
        /**
         * @param int $term_id
         *
         * @return null|string
         */
        public function lang_code_by_termid($term_id)
        {
        }
        /**
         * Converts term_id into term_taxonomy_id
         *
         * @param int $term_id
         *
         * @return int
         */
        public function adjust_ttid_for_term_id($term_id)
        {
        }
        /**
         * Converts term_taxonomy_id into term_id
         *
         * @param int $ttid term_taxonomy_id
         *
         * @return int
         */
        public function adjust_term_id_for_ttid($ttid)
        {
        }
        /**
         * @param int        $term_id
         * @param string     $lang_code
         * @param bool|false $original_fallback if true will return the the input term_id in case no translation is found
         *
         * @return null|int
         */
        public function term_id_in($term_id, $lang_code, $original_fallback = \false)
        {
        }
        /**
         * Returns the trid for a given term_id and taxonomy or null on failure
         *
         * @param int    $term_id  term_id of a term
         * @param string $taxonomy taxonomy of the term
         *
         * @return null|int
         */
        public function trid_from_tax_and_id($term_id, $taxonomy)
        {
        }
        /**
         * Returns all post types to which a taxonomy is linked.
         *
         * @param string $taxonomy
         *
         * @return array
         *
         * @since 3.2.3
         */
        public function get_taxonomy_post_types($taxonomy)
        {
        }
        protected function get_element_join()
        {
        }
        protected function get_type_prefix()
        {
        }
        private function maybe_warm_term_id_cache()
        {
        }
        /**
         * @param string $term
         * @param string $slug
         * @param string $taxonomy
         * @param string $lang_code
         *
         * @return string
         */
        public function generate_unique_term_slug($term, $slug, $taxonomy, $lang_code)
        {
        }
        /**
         * @return self
         */
        public static function getGlobalInstance()
        {
        }
    }
    /**
     * @since      3.1.8
     *
     * Class WPML_Terms_Translations
     *
     * This class holds some basic functionality for translating taxonomy terms.
     *
     * @package    wpml-core
     * @subpackage taxonomy-term-translation
     */
    class WPML_Terms_Translations
    {
        /**
         * @param array<string|\WP_Term> $terms
         * @param string[]|string        $taxonomies This is only used by the WP core AJAX call that fetches the preview
         *                                           auto-complete for flat taxonomy term adding
         *
         * @return array<\WP_Term>
         * @deprecated since Version 3.1.8.3
         */
        public static function get_terms_filter($terms, $taxonomies)
        {
        }
        /**
         * @param string $slug
         * @param string $taxonomy
         * @param string $lang
         * Creates a unique slug for a given term, using a scheme
         * encoding the language code in the slug.
         *
         * @return string
         */
        public static function term_unique_slug($slug, $taxonomy, $lang)
        {
        }
        /**
         * @param string $slug
         * @param bool   $taxonomy
         * If $taxonomy is given, then slug existence is checked only for the specific taxonomy.
         *
         * @return bool
         */
        private static function term_slug_exists($slug, $taxonomy = \false)
        {
        }
        /**
         * This function provides an action hook only used by WCML.
         * It will be removed in the future and should not be implemented in new spots.
         *
         * @deprecated deprecated since version 3.1.8.3
         *
         * @param string $taxonomy The identifier of the taxonomy the translation was just saved to.
         * @param array $translated_term The associative array holding term taxonomy id and term id,
         *                         as returned by wp_insert_term or wp_update_term.
         */
        public static function icl_save_term_translation_action($taxonomy, $translated_term)
        {
        }
        /**
         * Prints a hidden div, containing the list of allowed terms for a post type in each language.
         * This is used to only display the correct categories and tags in the quick-edit fields of the post table.
         *
         * @param string                   $column_name
         * @param string|string[]|\WP_Post $post_type
         */
        public static function quick_edit_terms_removal($column_name, $post_type)
        {
        }
        /**
         * Creates a new term from an argument array.
         *
         * @param array $args
         * @return array|bool
         * Returns either an array containing the term_id and term_taxonomy_id of the term resulting from this database
         * write or false on error.
         */
        public static function create_new_term($args)
        {
        }
        /**
         * @param array<mixed> $args
         * Creates an automatic translation of a term, the name of which is set as "original" . @ "lang_code" and the slug of which is set as "original_slug" . - . "lang_code".
         *
         * @return array|bool
         */
        public function create_automatic_translation($args)
        {
        }
        /**
         * @param string $taxonomy
         *
         * Sets all taxonomy terms to the correct language on each post, having at least one term from the taxonomy.
         */
        public static function sync_taxonomy_terms_language($taxonomy)
        {
        }
        /**
         * @param int $post_id
         *
         * Sets all taxonomy terms ot the correct language for a given post.
         */
        public static function sync_post_terms_language($post_id)
        {
        }
        /**
         * @param int    $post_id
         * @param string $taxonomy
         * Synchronizes a posts taxonomy term's languages with the posts language for all translations of the post.
         */
        public static function sync_post_and_taxonomy_terms_language($post_id, $taxonomy)
        {
        }
        /**
         * @param int    $post_id    Object ID.
         * @param array  $terms      An array of object terms.
         * @param array  $tt_ids     An array of term taxonomy IDs.
         * @param string $taxonomy   Taxonomy slug.
         * @param bool   $append     Whether to append new terms to the old terms.
         * @param array  $old_tt_ids Old array of term taxonomy IDs.
         */
        public static function set_object_terms_action($post_id, $terms, $tt_ids, $taxonomy, $append, $old_tt_ids)
        {
        }
        /**
         * @param int    $post_id Object ID.
         * @param array  $tt_ids An array of term taxonomy IDs.
         * @param string $taxonomy Taxonomy slug.
         * @param array  $old_tt_ids Old array of term taxonomy IDs.
         */
        private static function set_tags_in_proper_language($post_id, $tt_ids, $taxonomy, $old_tt_ids)
        {
        }
        /**
         * @param int    $post_id
         * @param string $taxonomy
         * @param array  $changed_ttids
         * @param bool   $bulk
         * Running this function will remove certain issues arising out of bulk adding of terms to posts of various languages.
         * This case can result in situations in which the WP Core functionality adds a term to a post, before the language assignment
         * operations of WPML are triggered. This leads to states in which terms can be assigned to a post even though their language
         * differs from that of the post.
         * This function behaves between hierarchical and flat taxonomies. Hierarchical terms from the wrong taxonomy are simply removed
         * from the post. Flat terms are added with the same name but in the correct language.
         * For flat terms this implies either the use of the existing term or the creation of a new one.
         * This function uses wpdb queries instead of the WordPress API, it is therefore save to be run out of
         * any language setting.
         */
        public static function quick_edited_post_terms($post_id, $taxonomy, $changed_ttids = array(), $bulk = \false)
        {
        }
        /**
         * Returns an array of all terms, that have a language suffix on them.
         * This is used by troubleshooting functionality.
         *
         * @return array
         */
        public static function get_all_terms_with_language_suffix()
        {
        }
    }
    class WPML_Term_Hierarchy_Sync extends \WPML_Hierarchy_Sync
    {
        protected $element_id_column = 'term_taxonomy_id';
        protected $parent_id_column = 'parent';
        protected $parent_element_id_column = 'term_id';
        protected $element_type_column = 'taxonomy';
        protected $element_type_prefix = 'tax_';
        /**
         * @param wpdb $wpdb
         */
        public function __construct(&$wpdb)
        {
        }
        public function is_need_sync($taxonomy, $ref_lang = \false)
        {
        }
        public function sync_element_hierarchy($element_types, $ref_lang = \false)
        {
        }
        /**
         * @param string $element_type
         *
         * @return bool
         */
        public function is_hierarchical($element_type)
        {
        }
    }
    /**
     * WPML Sunrise Script - START
     *
     * @author OnTheGoSystems
     * @version 3.7.0
     *
     * Place this script in the wp-content folder and add "define('SUNRISE', 'on');" in wp-config.php
     * in order to enable using different domains for different languages in multisite mode
     *
     * Experimental feature
     */
    /**
     * Class WPML_Sunrise_Lang_In_Domains
     *
     * @author OnTheGoSystems
     */
    class WPML_Sunrise_Lang_In_Domains
    {
        /** @var  wpdb $wpdb */
        private $wpdb;
        /** @var  string $table_prefix */
        private $table_prefix;
        /** @var  string $current_blog */
        private $current_blog;
        /** @var  bool $no_recursion */
        private $no_recursion;
        /**
         * Method init
         */
        public function init()
        {
        }
        /**
         * @param string $q
         *
         * @return string
         */
        public function query_filter($q)
        {
        }
        /**
         * method set_private_properties
         */
        private function set_private_properties()
        {
        }
        /**
         * @param string $query
         *
         * @return array
         */
        private function extract_variables_from_query($query, $field)
        {
        }
        /**
         * @param string $q
         *
         * @return bool
         */
        private function query_has_no_result($q)
        {
        }
        /**
         * @param string $q
         * @param array  $domains
         *
         * @return string
         */
        private function transpose_query_if_one_domain_is_matching($q, $domains)
        {
        }
        /**
         * @param array $domains
         * @param array $wpml_settings
         * @param int   $blog_id
         *
         * @return mixed
         */
        private function get_blog_id_from_domain(array $domains, array $wpml_settings, $blog_id)
        {
        }
    }
    class WPML_Translation_Job_Helper
    {
        public function encode_field_data($data)
        {
        }
        public function decode_field_data($data, $format)
        {
        }
        protected function get_tm_setting($indexes)
        {
        }
        /**
         * @return TranslationManagement
         */
        public static function get_core_translation_management()
        {
        }
    }
    abstract class WPML_Translation_Job extends \WPML_Translation_Job_Helper
    {
        protected $basic_data;
        protected $element_id = -1;
        protected $status = -1;
        protected $job_id;
        protected $batch_id;
        /** @var  WPML_TM_Blog_Translators $blog_translators */
        protected $blog_translators;
        /**
         * @param  int                      $job_id
         * @param int|null                 $batch_id
         * @param WPML_TM_Blog_Translators $blog_translators
         */
        function __construct($job_id, $batch_id = \null, &$blog_translators = \null)
        {
        }
        public abstract function cancel();
        public abstract function get_original_element_id();
        public abstract function to_array();
        /**
         * @return string
         */
        abstract function get_title();
        public function get_status()
        {
        }
        public function get_status_value()
        {
        }
        public function get_review_status()
        {
        }
        public function get_id()
        {
        }
        public function get_resultant_element_id($force = \false)
        {
        }
        /**
         * Checks whether the input user is allowed to edit this job
         *
         * @param WP_User $user
         *
         * @return bool
         */
        public function user_can_translate($user)
        {
        }
        /**
         * @param array $args
         *
         * @return array
         */
        protected function filter_is_translator_args(array $args)
        {
        }
        /**
         * @param WP_User $user
         * @param int     $translator_id
         *
         * @return bool
         */
        private function is_current_user_allowed_to_translate(\WP_User $user, $translator_id)
        {
        }
        public function get_batch_id()
        {
        }
        /**
         * @param bool|false $as_name if true will return the language's display name if applicable
         *
         * @return bool|string
         */
        public function get_language_code($as_name = \false)
        {
        }
        /**
         * @param bool|false $as_name if true will return the language's display name if applicable
         *
         * @return bool|string
         */
        function get_source_language_code($as_name = \false)
        {
        }
        /**
         * @return string|false
         */
        public function get_translator_name()
        {
        }
        /**
         * Returns the id of the assigned translator or 0 if no translator is assigned to the job
         *
         * @return int
         */
        public function get_translator_id()
        {
        }
        public function get_basic_data()
        {
        }
        /**
         * @param  int    $translator_id
         * @param string $service
         *
         * @return bool true on success false on failure
         */
        public function assign_to($translator_id, $service = 'local')
        {
        }
        /**
         * Returns either the translation service id for the job or 'local' for local jobs
         *
         * @return int|string
         */
        public function get_translation_service()
        {
        }
        protected abstract function save_updated_assignment();
        protected abstract function load_resultant_element_id();
        protected abstract function load_status();
        protected abstract function load_job_data($id);
        abstract function get_type();
        protected function basic_data_to_array($job_data)
        {
        }
        protected function maybe_load_basic_data()
        {
        }
        private function get_inactive_translation_service($translation_service_id)
        {
        }
        protected function get_translator_html($job)
        {
        }
        /**
         * Retrieves the batch ID associated to the job ID
         */
        protected abstract function load_batch_id();
        /**
         * @return string
         */
        protected function generate_lang_text()
        {
        }
        /**
         * @param string $code
         *
         * @return string
         */
        private function lang_code_to_name($code)
        {
        }
        /**
         * @param string $name
         *
         * @return mixed
         */
        public function get_basic_data_property($name)
        {
        }
        /**
         * @param string $name
         * @param mixed $value
         */
        public function set_basic_data_property($name, $value)
        {
        }
    }
    class WPML_String_Translation_Job extends \WPML_Translation_Job
    {
        protected function load_job_data($string_translation_id)
        {
        }
        public function get_title()
        {
        }
        /**
         * @return string
         */
        public function get_id()
        {
        }
        public function get_type()
        {
        }
        public function get_original_element_id()
        {
        }
        public function cancel()
        {
        }
        protected function load_status()
        {
        }
        public function to_array()
        {
        }
        protected function load_resultant_element_id()
        {
        }
        protected function save_updated_assignment()
        {
        }
        /**
         * Retrieves the batch ID for a string job
         */
        protected function load_batch_id()
        {
        }
    }
    abstract class WPML_Element_Translation_Job extends \WPML_Translation_Job
    {
        protected $original_del_text;
        /** @var  WPML_Translation_Job_Factory $job_factory */
        protected $job_factory;
        private $original_doc_id = \false;
        private $translation_id = \false;
        /**
         * @param int                               $job_id
         * @param null|int                          $batch_id
         * @param null|TranslationManagement        $tm_instance
         * @param null|WPML_Translation_Job_Factory $job_factory
         */
        function __construct($job_id, $batch_id = \null, &$tm_instance = \null, $job_factory = \null)
        {
        }
        function get_type()
        {
        }
        function to_array()
        {
        }
        function to_xliff_file()
        {
        }
        function get_original_element_id()
        {
        }
        function get_translation_id()
        {
        }
        /**
         * Saves the job data in this object to the database (e.g. to a post)
         *
         * @param bool $complete whether or not to set the status
         *                       of the target element to complete
         */
        public function save_to_element($complete = \false)
        {
        }
        /**
         * @return int
         */
        function estimate_word_count()
        {
        }
        function get_original_fields()
        {
        }
        public function cancel()
        {
        }
        /**
         * @param TranslationProxy_Project $project
         * @param int                      $translator_id
         * @param WPML_TM_CMS_ID           $cms_id_helper
         * @param TranslationManagement    $tm_instance
         * @param null|string              $note
         *
         * @return array
         */
        function send_to_tp($project, $translator_id, &$cms_id_helper, &$tm_instance, $note = \null)
        {
        }
        /**
         * @param bool|false $original
         *
         * @return string
         */
        abstract function get_url($original = \false);
        /**
         * @return WP_Post|WPML_Package|mixed
         */
        abstract function get_original_document();
        protected function load_status()
        {
        }
        /**
         * @param int $job_id
         *
         * @return bool|stdClass|WPML_Element_Translation_Job
         */
        protected function load_job_data($job_id)
        {
        }
        protected function save_updated_assignment()
        {
        }
        /**
         * Retrieves the batch ID for job elements using the
         * `icl_translation_status` and `icl_translate_job` tables
         */
        protected function load_batch_id()
        {
        }
        private function get_iclt_field($field_name, $translation)
        {
        }
        /**
         * If the job does not have deadline date,
         * we consider that the job was completed on time.
         *
         * @return bool
         */
        public function is_completed_on_time()
        {
        }
        /**
         * @return false|int Negative integer if the job was completed before the deadline, or positive either.
         *                   False is the job has no deadline date
         */
        public function get_number_of_days_overdue()
        {
        }
        /** @return string|null */
        public function get_deadline_date()
        {
        }
        /** @return string|null */
        public function get_completed_date()
        {
        }
        /** @return string|null */
        public function get_manager_id()
        {
        }
        /** @return string|null */
        protected function get_title_from_db()
        {
        }
        /** @return string|null */
        protected function get_uuid()
        {
        }
    }
    class WPML_Post_Translation_Job extends \WPML_Element_Translation_Job
    {
        function get_original_document()
        {
        }
        /**
         * @param bool|false $original
         *
         * @return string
         */
        public function get_url($original = \false)
        {
        }
        /**
         * It checks that the post type is translatable.
         *
         * @return bool
         */
        function is_translatable_post_type()
        {
        }
        function update_fields_from_post()
        {
        }
        function save_terms_to_post()
        {
        }
        function load_terms_from_post_into_job($delete = \null)
        {
        }
        /**
         * @return string
         */
        public function get_title()
        {
        }
        /**
         * @return string
         */
        public function get_type_title()
        {
        }
        /**
         * @return string
         */
        public function get_post_type()
        {
        }
        protected function load_resultant_element_id()
        {
        }
        protected function get_terms_in_job_rows()
        {
        }
        /**
         * Retrieves an array of all terms associated with a post. This array is indexed by indexes of the for {t_}{term_taxonomy_id}.
         *
         * @return array
         */
        protected function get_term_field_array_for_post()
        {
        }
        protected function set_translated_term_values($delete)
        {
        }
        /**
         * @param array $args
         *
         * @return array
         */
        protected function filter_is_translator_args(array $args)
        {
        }
    }
    class WPML_External_Translation_Job extends \WPML_Element_Translation_Job
    {
        function get_original_document()
        {
        }
        /**
         * @param bool|false $original
         *
         * @return string
         */
        public function get_url($original = \false)
        {
        }
        /**
         * @return string
         */
        public function get_title()
        {
        }
        /**
         * @return string
         */
        public function get_type_title()
        {
        }
        protected function load_resultant_element_id()
        {
        }
        private function title_from_job_fields()
        {
        }
    }
    /**
     * Represents a helper class for building the SQL statement which retrieves the job,
     * as well as for converting this collection to specific implementations of \WPML_Element_Translation_Job.
     *
     * @package WPML\TM
     */
    class WPML_Abstract_Job_Collection
    {
        /**
         * Instance of \wpdb.
         *
         * @var \wpdb $wpdb
         */
        public $wpdb;
        /**
         * Instance of \SitePress.
         *
         * @var \SitePress
         */
        private $sitepress;
        /**
         * WPML_Abstract_Job_Collection constructor.
         *
         * @param WPDB $wpdb An instance of \wpdb.
         */
        public function __construct(\WPDB $wpdb)
        {
        }
        /**
         * It gets the (INNER) JOIN clause of the query.
         *
         * @param bool   $single                            It should only return the last job revision.
         * @param string $icl_translate_alias               The alias for `{$this->wpdb->prefix}icl_translate_job`.
         * @param string $icl_translations_translated_alias The alias for translated documents in `{$this->wpdb->prefix}icl_translations`.
         * @param string $icl_translations_original_alias   The alias for original documents in `{$this->wpdb->prefix}icl_translations`.
         * @param string $icl_translation_status_alias      The alias for `{$this->wpdb->prefix}icl_translation_status`.
         * @param string $icl_translate_job_alias           The alias for `{$this->wpdb->prefix}icl_translate_job`.
         *
         * @return string
         */
        protected function get_table_join($single = \false, $icl_translate_alias = 'iclt', $icl_translations_translated_alias = 't', $icl_translations_original_alias = 'ito', $icl_translation_status_alias = 's', $icl_translate_job_alias = 'j')
        {
        }
        /**
         * It gets the LEFT JOIN clause of the query.
         *
         * @param string $icl_translations_original_alias The alias for original documents in `{$this->wpdb->prefix}icl_translations`.
         * @param string $posts_alias                     The alias for `{$this->wpdb->prefix}posts`.
         *
         * @return array
         */
        protected function left_join_post($icl_translations_original_alias = 'ito', $posts_alias = 'p')
        {
        }
        /**
         * It converts an array of \stdClass jobs into an array of \WPML_Element_Translation_Job instances.
         *
         * @param array $jobs The array of \stdClass jobs.
         *
         * @return \WPML_Element_Translation_Job[]|\WPML_Post_Translation_Job[]|\WPML_String_Translation_Job[]|\WPML_External_Translation_Job[]
         */
        protected function plain_objects_to_job_instances($jobs)
        {
        }
        /**
         * Optional arguments to filter the results.
         *
         * @param array $args {
         *                    Optional. An array of arguments.
         *
         * @type int    translator_id
         * @type int    status
         * @type int    status__not
         * @type bool   include_unassigned
         * @type int    limit_no
         * @type array  language_pairs
         * @type string service
         * @type string from
         * @type string to
         * @type string type
         * @type bool   overdue
         * @type string   title
         * }
         *
         * @return string
         */
        protected function build_where_clause(array $args)
        {
        }
    }
    class WPML_Translation_Job_Helper_With_API extends \WPML_Translation_Job_Helper
    {
        /** @var  WPML_Element_Translation_Package $package_helper */
        protected $package_helper;
        function __construct()
        {
        }
        protected function get_translation_job($job_id, $include_non_translatable_elements = \false, $revisions = 0)
        {
        }
        protected function get_lang_by_rid($rid)
        {
        }
    }
    abstract class WPML_TM_Update_Translation_Data_Action extends \WPML_Translation_Job_Helper_With_API
    {
        function get_prev_job_data($rid)
        {
        }
        /**
         * Adds a translation job record in icl_translate_job
         *
         * @param mixed               $rid
         * @param mixed               $translator_id
         * @param       $translation_package
         * @param array               $batch_options
         *
         * @return bool|int
         */
        function add_translation_job($rid, $translator_id, array $translation_package, array $batch_options)
        {
        }
        /**
         * @param int   $prev_id
         * @param array $package
         *
         * @return mixed
         */
        protected abstract function populate_prev_translation($prev_id, array $package);
        /**
         * @param int   $rid
         * @param array $package
         *
         * @return mixed
         */
        protected function get_translated_field_values($rid, array $package)
        {
        }
        protected function fire_notification_actions($job_id, $translation_status, $translator_id)
        {
        }
    }
    class WPML_TM_Update_Post_Translation_Data_Action extends \WPML_TM_Update_Translation_Data_Action
    {
        protected function populate_prev_translation($rid, array $package)
        {
        }
        private function get_previous_element($prev_job, $field_name)
        {
        }
    }
    class WPML_TM_Update_External_Translation_Data_Action extends \WPML_TM_Update_Translation_Data_Action
    {
        protected function populate_prev_translation($rid, array $package)
        {
        }
    }
    class WPML_Save_Translation_Data_Action extends \WPML_Translation_Job_Helper_With_API
    {
        /** @var WPML_TM_Records $tm_records */
        private $tm_records;
        /** @var  array $data */
        private $data;
        private $redirect_target = \false;
        private $translate_link_targets_in_posts;
        private $translate_link_targets_in_strings;
        public function __construct($data, $tm_records)
        {
        }
        function save_translation()
        {
        }
        /**
         * Returns false if after saving the translation no redirection is to happen or the target of the redirection
         * in case saving the data is followed by a redirect.
         *
         * @return false|string
         */
        function get_redirect_target()
        {
        }
        private function save_translation_field($tid, $field)
        {
        }
        private function handle_failed_validation($validation_results, $data_to_validate)
        {
        }
        private function get_validation_results($job, $data_to_validate)
        {
        }
        private function save_terms_for_job($job_id)
        {
        }
        private function add_message($message)
        {
        }
        /**
         * @param string   $element_type_prefix
         * @param object   $job
         * @param callable $decoder
         */
        private static function save_external($element_type_prefix, $job, $decoder)
        {
        }
        /**
         * @param string $element_type_prefix
         * @param object $job
         */
        private static function notify_job_in_progress($element_type_prefix, $job)
        {
        }
    }
    class WPML_Translation_Jobs_Collection extends \WPML_Abstract_Job_Collection
    {
        /** @var WPML_Translation_Batch[] $translation_batches */
        private $translation_batches = array();
        private $count = 0;
        private $first_count;
        private $last_count;
        private $before_count = 0;
        private $after_count = 0;
        /** @var array $filter */
        private $filter;
        /** @var string $jobs_union_table_sql */
        private $jobs_union_table_sql;
        /**
         * @param wpdb  $wpdb
         * @param array $icl_translation_filter
         */
        public function __construct(&$wpdb, $icl_translation_filter)
        {
        }
        /**
         * @param int $page
         * @param int $per_page
         *
         * @return array
         */
        public function get_paginated_batches($page, $per_page)
        {
        }
        /**
         * Returns the number of jobs that meet the filter \WPML_Translation_Jobs_Collection::$filter in the database
         *
         * @return int
         */
        public function get_count()
        {
        }
        /**
         * @param WPML_Translation_Job $job
         */
        public function add_job($job)
        {
        }
        private function load_translation_jobs($page, $per_page)
        {
        }
        /**
         * @param array $args
         * @param array $pagination_args
         *
         * @return array
         */
        private function get_jobs_table(array $args = array(), array $pagination_args = array('page' => 1, 'per_page' => 10))
        {
        }
        /**
         * @param int $found_rows
         *
         * @return array
         */
        private function get_default_batch_counts($found_rows)
        {
        }
        private function get_jobs_in_db(array $args = array(), array $pagination_args = \null)
        {
        }
        public function get_jobs(array $args = array())
        {
        }
        /**
         * @param array $data
         * @param int   $count
         * @param array $pagination_args
         *
         * @return array
         */
        private function calculate_batch_counts($data, $count, $pagination_args)
        {
        }
        private function get_jobs_union_table_sql($where_jobs, $args)
        {
        }
    }
    class WPML_Translation_Batch extends \WPML_Abstract_Job_Collection
    {
        private $name = \false;
        private $id = \false;
        private $url = \false;
        /** @var WPML_Translation_Job[] $job_objects  */
        private $job_objects = array();
        /**
         * @param wpdb $wpdb
         * @param int  $batch_id
         */
        public function __construct(&$wpdb, $batch_id = 0)
        {
        }
        public function reload()
        {
        }
        public function get_batch_url()
        {
        }
        public function get_batch_meta_array()
        {
        }
        /**
         * Cancels all translation jobs in this batch
         */
        public function cancel_all_jobs()
        {
        }
        // todo: [WPML 3.2.1] This method and other similar methods can likely be removed
        public function get_last_update()
        {
        }
        /**
         * @param WPML_Translation_Job $job
         */
        public function add_job($job)
        {
        }
        public function get_jobs_as_array()
        {
        }
        public function get_item_count()
        {
        }
        public function get_id()
        {
        }
        public function get_batch_name()
        {
        }
        public function get_batch_tp_id()
        {
        }
        public function get_status_array()
        {
        }
        private function retrieve_generic_batch_id()
        {
        }
        private function belongs_to_active_ts()
        {
        }
        private function ts_supports_notifications()
        {
        }
        public function clear_batch_data()
        {
        }
    }
    class WPML_Translation_Batch_Factory
    {
        /**
         * @param int $id
         *
         * @return WPML_Translation_Batch
         */
        public function create($id)
        {
        }
    }
    class WPML_Translator
    {
        var $ID;
        var $display_name;
        var $user_login;
        var $language_pairs;
        /**
         * @param string $property
         *
         * @return int
         */
        public function __get($property)
        {
        }
        /**
         * @param string $property
         * @param int $value
         *
         * @return null
         */
        public function __set($property, $value)
        {
        }
    }
    /**
     * Class TranslationManagement
     *
     * Use `wpml_load_core_tm` to get an instance
     *
     * @package wpml-core
     */
    class TranslationManagement
    {
        const INIT_PRIORITY = 1500;
        const DUPLICATE_ELEMENT_ACTION = 2;
        const TRANSLATE_ELEMENT_ACTION = 1;
        /**
         * @var WPML_Translator
         */
        private $selected_translator;
        /**
         * @var WPML_Translator
         */
        private $current_translator;
        private $messages = array();
        public $settings;
        public $admin_texts_to_translate = array();
        private $comment_duplicator;
        /** @var WPML_Custom_Field_Setting_Factory $settings_factory */
        private $settings_factory;
        /** @var  WPML_Cache_Factory */
        private $cache_factory;
        /**
         * Keep list of message ID suffixes.
         *
         * @access private
         */
        private $message_ids = array('add_translator', 'edit_translator', 'remove_translator', 'save_notification_settings', 'cancel_jobs');
        /**
         * @var \WPML_Translation_Management_Filters_And_Actions
         */
        private $filters_and_actions;
        /**
         * @var \WPML_Cookie
         */
        private $wpml_cookie;
        function __construct(\WPML_Cookie $wpml_cookie = \null)
        {
        }
        public function wpml_loaded_action()
        {
        }
        public function load_settings_if_required()
        {
        }
        /**
         * @param array $args      {
         *
         * @type string $section
         * @type string $key
         * @type mixed  $value     (when used as translation action: 0: do not translate, 1: copy, 2: translate)
         * @type bool   $read_only Options. Default to true.
         * }
         */
        public function wpml_config_action($args)
        {
        }
        /**
         * @return WPML_Custom_Field_Setting_Factory
         */
        public function settings_factory()
        {
        }
        /**
         * @param WP_User         $current_user
         * @param WPML_Translator $current_translator
         *
         * @return WPML_Translator
         */
        private function init_translator_language_pairs(\WP_User $current_user, \WPML_Translator $current_translator)
        {
        }
        /**
         * @param string $code
         *
         * @return bool
         */
        private function is_valid_language_code_format($code)
        {
        }
        /**
         * @param array $language_pairs
         *
         * @return array
         */
        private function sanitize_language_pairs($language_pairs)
        {
        }
        /**
         * @param array $args @see \TranslationManagement::wpml_config_action
         */
        private function update_section_translation_setting($args)
        {
        }
        public function init()
        {
        }
        public function get_settings()
        {
        }
        public function wpml_add_duplicate_check_actions()
        {
        }
        public function wp_loaded()
        {
        }
        public function admin_enqueue_scripts()
        {
        }
        public static function get_batch_name($batch_id)
        {
        }
        public static function get_batch_url($batch_id)
        {
        }
        public static function get_batch_last_update($batch_id)
        {
        }
        public static function get_batch_tp_id($batch_id)
        {
        }
        public static function get_batch_data($batch_id)
        {
        }
        function save_settings()
        {
        }
        /**
         * @return string[]
         */
        public function initial_custom_field_translate_states()
        {
        }
        /**
         * @return string[]
         */
        public function initial_term_custom_field_translate_states()
        {
        }
        function process_request($data)
        {
        }
        /**
         * @param string $name
         * @param string $value
         * @param int    $expiration
         */
        private function set_cookie($name, $value, $expiration)
        {
        }
        /**
         * @param string $name
         *
         * @return array
         */
        private function get_cookie($name)
        {
        }
        function ajax_calls($call, $data)
        {
        }
        /**
         * @param string $element_type_full
         *
         * @return mixed
         */
        public function get_element_prefix($element_type_full)
        {
        }
        /**
         * @param int $job_id
         *
         * @return mixed
         */
        public function get_element_type_prefix_from_job_id($job_id)
        {
        }
        /**
         * @param \stdClass $job
         *
         * @return mixed
         */
        public function get_element_type_prefix_from_job($job)
        {
        }
        /**
         * Display admin notices.
         */
        public function show_messages()
        {
        }
        /* TRANSLATORS */
        /**
         * @deprecated use `WPML_TM_Blog_Translators::get_blog_translators` instead
         *
         * @return bool
         */
        public function has_translators()
        {
        }
        /**
         * @deprecated use `WPML_TM_Blog_Translators::get_blog_translators` instead
         *
         * @param array $args
         *
         * @return array
         */
        public static function get_blog_translators($args = array())
        {
        }
        /**
         * @return WPML_Translator
         */
        function get_selected_translator()
        {
        }
        /**
         * @return WPML_Translator
         */
        function get_current_translator()
        {
        }
        public static function get_translator_edit_url($translator_id)
        {
        }
        /* HOOKS */
        function make_duplicates($data)
        {
        }
        function make_duplicate($master_post_id, $lang)
        {
        }
        function make_duplicates_all($master_post_id)
        {
        }
        function reset_duplicate_flag($post_id)
        {
        }
        function set_duplicate($master_post_id, $post_lang)
        {
        }
        function duplication_delete_comment($comment_id)
        {
        }
        function duplication_edit_comment($comment_id)
        {
        }
        function duplication_status_comment($comment_id, $comment_status)
        {
        }
        function duplication_insert_comment($comment_id)
        {
        }
        private function get_comment_duplicator()
        {
        }
        /**
         * @param int $post_id Post ID.
         */
        public function delete_post_actions($post_id)
        {
        }
        /* TRANSLATIONS */
        /**
         * calculate post md5
         *
         * @param object|int $post
         *
         * @return string
         */
        function post_md5($post)
        {
        }
        function get_element_translation($element_id, $language, $element_type = 'post_post')
        {
        }
        function get_element_translations($element_id, $element_type = 'post_post', $service = \false)
        {
        }
        /**
         * returns icon class according to status code
         *
         * @param int $status
         * @param int $needs_update
         * @param bool $needs_review
         *
         * @return string
         */
        public function status2icon_class($status, $needs_update = 0, $needs_review = \false)
        {
        }
        public static function status2text($status)
        {
        }
        public function decode_field_data($data, $format)
        {
        }
        /**
         * create translation package
         *
         * @param object|int $post
         *
         * @return array|false
         */
        function create_translation_package($post)
        {
        }
        function messages_by_type($type)
        {
        }
        public function add_basket_message($type, $message, $id = \null)
        {
        }
        function add_message($message)
        {
        }
        /**
         * add/update icl_translation_status record
         *
         * @param array $data
         * @param int   $rid
         *
         * @return array
         */
        function update_translation_status($data, $rid = \null)
        {
        }
        /**
         * @param int $translation_id
         *
         * @return int
         */
        private function get_rid_from_translation_id($translation_id)
        {
        }
        /* TRANSLATION JOBS */
        /**
         * @param \WPML_TM_Translation_Batch $batch
         * @param string $type
         * @param int|null $sendFrom
         *
         * @return array
         */
        function send_jobs($batch, $type = 'post', $sendFrom = \null)
        {
        }
        private function revert_job_when_tp_job_could_not_be_created($job_ids, $rid, $translator_id, $backup_translation_status)
        {
        }
        /**
         * @param stdClass|null        $current_translation_status
         * @param WP_Post|WPML_Package $post
         *
         * @return string
         */
        private function get_uuid($current_translation_status, $post)
        {
        }
        private function get_translation_status_data($translation_id)
        {
        }
        /**
         * @param string $translation_id
         * @param string $status
         */
        private function cancel_previous_job_if_still_waiting($translation_id, $status)
        {
        }
        private function cancel_previous_job_if_in_progress($translation_id)
        {
        }
        /**
         * Adds a translation job record in icl_translate_job
         *
         * @param mixed                                     $rid
         * @param mixed                                     $translator_id
         * @param array<string,string|array<string,string>> $translation_package
         * @param array                                     $batch_options
         *
         * @return bool|int
         */
        function add_translation_job($rid, $translator_id, $translation_package, $batch_options = array())
        {
        }
        function get_translation_jobs($args = array())
        {
        }
        function get_translation_job_types($args = array())
        {
        }
        /**
         * Clean orphan jobs in posts
         *
         * @param array $posts
         */
        function cleanup_translation_jobs_cart_posts($posts)
        {
        }
        /**
         * Incorporates posts in cart data with post title, post date, post notes,
         * post type, post status
         *
         * @param array $posts
         *
         * @return boolean | array
         */
        function get_translation_jobs_basket_posts($posts)
        {
        }
        /**
         * Incorporates strings in cart data
         *
         * @param array       $strings
         * @param bool|string $source_language
         *
         * @return boolean | array
         */
        function get_translation_jobs_basket_strings($strings, $source_language = \false)
        {
        }
        function get_translation_job($job_id, $include_non_translatable_elements = \false, $auto_assign = \false, $revisions = 0)
        {
        }
        function get_translation_job_id_filter($empty, $args)
        {
        }
        /**
         * @param int $trid
         *
         * @return array
         */
        private function get_translation_job_info($trid)
        {
        }
        /**
         * @param int    $trid
         * @param string $language_code
         *
         * @return int|null
         */
        public function get_translation_job_id($trid, $language_code)
        {
        }
        /**
         * @param int    $trid
         * @param string $language_code
         *
         * @return string|null
         */
        public function get_translation_job_editor($trid, $language_code)
        {
        }
        function save_translation($data)
        {
        }
        /**
         * Saves the contents a job's post to the job itself
         *
         * @param int $job_id
         *
         * @hook wpml_save_job_fields_from_post
         * @deprecated since WPML 3.2.3 use the action hook wpml_save_job_fields_from_post
         */
        function save_job_fields_from_post($job_id)
        {
        }
        function mark_job_done($job_id)
        {
        }
        function resign_translator($job_id, $skip_notification = \false)
        {
        }
        /**
         * Resign the given translator from all unfinished translation jobs.
         *
         * @param WP_User $translator
         */
        public function resign_translator_from_unfinished_jobs(\WP_User $translator)
        {
        }
        function remove_translation_job($job_id, $new_translation_status = \ICL_TM_WAITING_FOR_TRANSLATOR, $new_translator_id = 0)
        {
        }
        function abort_translation()
        {
        }
        // $translation_id - int or array
        function cancel_translation_request($translation_id, $remove_translation_record = \true)
        {
        }
        function render_option_writes($name, $value, $key = '')
        {
        }
        /**
         * @param array $info
         *
         * @deprecated @since 3.2 Use TranslationProxy::get_current_service_info instead
         * @return array
         */
        public static function current_service_info($info = array())
        {
        }
        // set slug according to user preference
        static function set_page_url($post_id)
        {
        }
        /**
         * @param array<string,mixed> $postarr
         * @param string              $lang
         *
         * @return int|WP_Error
         * @deprecated since 4.2.8 Use directly `wpml_get_create_post_helper()` instead.
         *
         */
        public function icl_insert_post($postarr, $lang)
        {
        }
        /**
         * Add missing language to posts
         *
         * @param array $post_types
         */
        private function add_missing_language_to_posts($post_types)
        {
        }
        /**
         * Add missing language to a given post
         *
         * @param WP_Post $post
         */
        private function add_missing_language_to_post($post)
        {
        }
        /**
         * Add missing language to taxonomies
         *
         * @param array $post_types
         */
        private function add_missing_language_to_taxonomies($post_types)
        {
        }
        /**
         * Add missing language to a given taxonomy
         *
         * @param OBJECT $taxonomy
         */
        private function add_missing_language_to_taxonomy($taxonomy)
        {
        }
        /**
         * Add missing language information to entities that don't have this
         * information configured.
         */
        public function add_missing_language_information()
        {
        }
        public static function include_underscore_templates($name)
        {
        }
        public static function get_job_status_string($status_id, $needs_update = \false)
        {
        }
        function display_basket_notification($position)
        {
        }
        public function get_element_type($trid)
        {
        }
        /**
         * @param string $type
         *
         * @return bool
         */
        public function is_external_type($type)
        {
        }
        /**
         * @param int    $post_id
         * @param string $element_type_prefix
         *
         * @return mixed|null|void|WP_Post
         */
        public function get_post($post_id, $element_type_prefix)
        {
        }
        private function init_comments_synchronization()
        {
        }
        private function init_default_settings()
        {
        }
        public function init_current_translator()
        {
        }
        public function get_translation_setting_name($section)
        {
        }
        public function get_custom_translation_setting_name($section)
        {
        }
        public function get_custom_readonly_translation_setting_name($section)
        {
        }
        public function get_readonly_translation_setting_name($section)
        {
        }
        private function get_sanitized_translation_setting_section($section)
        {
        }
        private function assign_translation_job($job_id, $translator_id, $service = 'local', $type = 'post')
        {
        }
        /**
         * @param string $table
         *
         * @return string[]
         */
        private function initial_translation_states($table)
        {
        }
        /**
         * Save notification settings.
         *
         * @param array $data  Request data
         */
        public function icl_tm_save_notification_settings($data)
        {
        }
        /**
         * Cancel translation jobs.
         *
         * @param array $data  Request data
         */
        public function icl_tm_cancel_jobs($data)
        {
        }
        /** @return int */
        public function get_init_priority()
        {
        }
        /**
         * @param array $translation_status_data
         *
         * @return mixed
         */
        private function get_translation_prev_state(array $translation_status_data)
        {
        }
        private function is_unlocked_type($type, $unlocked_options)
        {
        }
        private function displayMessageThatJobsCreated()
        {
        }
    }
    class WPML_Lang_URL_Validator
    {
        /** @var  SitePress $sitepress */
        private $sitepress;
        /** @var WPML_URL_Converter $wpml_url_converter */
        private $url_converter;
        /**
         * @param WPML_URL_Converter $wpml_url_converter
         * @param SitePress          $sitepress
         */
        public function __construct(\WPML_URL_Converter $wpml_url_converter, \SitePress $sitepress)
        {
        }
        public function validate_langs_in_dirs()
        {
        }
        public function print_explanation($sample_lang_code, $root = \false)
        {
        }
        private function get_sample_url($sample_lang_code)
        {
        }
    }
    /**
     * Class WPML_Slug_Filter
     *
     * @package    wpml-core
     * @subpackage url-handling
     */
    class WPML_Slug_Filter extends \WPML_Full_PT_API
    {
        /**
         * @param wpdb                  $wpdb
         * @param SitePress             $sitepress
         * @param WPML_Post_Translation $post_translations
         */
        public function __construct(&$wpdb, &$sitepress, &$post_translations)
        {
        }
        /**
         * @param String $slug
         * @param String $taxonomy
         * Filters slug input, so to ensure uniqueness of term slugs.
         *
         * @return String Either the original slug or a new slug that has been generated from the original one in order to
         *                ensure slug uniqueness.
         */
        public function pre_term_slug_filter($slug, $taxonomy)
        {
        }
        private function lang_term_slug_save($taxonomy)
        {
        }
        function wp_unique_post_slug($slug_suggested, $post_id, $post_status, $post_type, $post_parent, $slug)
        {
        }
        private function post_slug_exists($post_id, $post_language, $slug, $post_type, $parent = \false)
        {
        }
        private function find_unique_slug_post($post_id, $post_type, $post_language, $post_parent, $slug)
        {
        }
    }
    // phpcs:disable PHPCompatibility.Constants.NewConstants.openssl_raw_dataFound -- This and the following exceptions are made as function and version checks are also made
    // phpcs:disable PHPCompatibility.Constants.RemovedConstants.mcrypt_mode_ecbDeprecatedRemoved
    // phpcs:disable PHPCompatibility.Constants.RemovedConstants.mcrypt_randDeprecatedRemoved
    // phpcs:disable PHPCompatibility.Constants.RemovedConstants.mcrypt_rijndael_256DeprecatedRemoved
    // phpcs:disable PHPCompatibility.Extensions.RemovedExtensions.mcryptDeprecatedRemoved
    // phpcs:disable PHPCompatibility.FunctionUse.NewFunctionParameters.openssl_decrypt_ivFound
    // phpcs:disable PHPCompatibility.FunctionUse.NewFunctionParameters.openssl_encrypt_ivFound
    // phpcs:disable PHPCompatibility.FunctionUse.RemovedFunctions.mcrypt_create_ivDeprecatedRemoved
    // phpcs:disable PHPCompatibility.FunctionUse.RemovedFunctions.mcrypt_decryptDeprecatedRemoved
    // phpcs:disable PHPCompatibility.FunctionUse.RemovedFunctions.mcrypt_encryptDeprecatedRemoved
    // phpcs:disable PHPCompatibility.FunctionUse.RemovedFunctions.mcrypt_get_iv_sizeDeprecatedRemoved
    class WPML_Data_Encryptor
    {
        const SALT_CHARS = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-_ []{}<>~`+=,.;:/?|';
        const SALT_LENGTH = 64;
        /**
         * @var string $method
         */
        private $method;
        /**
         * @var string $key
         */
        private $key;
        /**
         * @var string $iv
         */
        private $iv;
        /**
         * @var string
         */
        private $library = \false;
        /**
         * WPML_Data_Encryptor constructor.
         *
         * @param string $key_salt
         * @param string $method
         */
        public function __construct($key_salt = '', $method = 'AES-256-CTR')
        {
        }
        /**
         * @param string $data
         *
         * @return string
         */
        public function encrypt($data)
        {
        }
        /**
         * @param string $encrypted_data
         *
         * @return string
         */
        public function decrypt($encrypted_data)
        {
        }
        /**
         * @param string $library
         */
        public function set_crypt_library($library)
        {
        }
        /**
         * @return string
         */
        public function get_crypt_library()
        {
        }
        /**
         * @return string
         */
        private function get_key_salt()
        {
        }
        /**
         * @return string
         */
        private function generate_salt_key()
        {
        }
    }
    class WPML_Color_Picker
    {
        private $color_selector_item;
        public function __construct($color_selector_item)
        {
        }
        public function admin_print_scripts()
        {
        }
        public function current_language_color_selector_control()
        {
        }
        public function get_current_language_color_selector_control()
        {
        }
    }
    /**
     * Class WPML_Languages
     *
     * @package wpml-core
     */
    class WPML_Languages extends \WPML_SP_And_PT_User
    {
        /** @var  WPML_Term_Translation $term_translation */
        private $term_translation;
        /** @var WPML_Query_Utils $query_utils */
        private $query_utils;
        /**
         * @param WPML_Term_Translation $term_translation
         * @param SitePress             $sitepress
         * @param WPML_Post_Translation $post_translation
         */
        public function __construct(&$term_translation, &$sitepress, &$post_translation)
        {
        }
        /**
         * @param WP_Query $wp_query
         * @param WP_Query $_wp_query_back
         * @param WP_Query $saved_query
         *
         * @return array<array<string,\stdClass>, \WP_Query>
         */
        public function get_ls_translations($wp_query, $_wp_query_back, $saved_query)
        {
        }
        /**
         * @param array                              $lang
         * @param array                              $translations
         * @param bool                               $icl_lso_link_empty
         * @param bool                               $skip_lang
         * @param string                             $link_empty_to
         * @param WPML_LS_Display_As_Translated_Link $display_as_translated_ls_link
         *
         * @return array
         */
        public function add_tax_url_to_ls_lang($lang, $translations, $icl_lso_link_empty, $skip_lang, $link_empty_to, \WPML_LS_Display_As_Translated_Link $display_as_translated_ls_link)
        {
        }
        /**
         * @param array          $lang
         * @param object|WP_User $author_data
         * @param bool           $icl_lso_link_empty
         * @param bool           $skip_lang
         * @param bool           $link_empty_to
         *
         * @return array
         */
        public function add_author_url_to_ls_lang($lang, $fallback_lang, $author_data, $icl_lso_link_empty, $skip_lang, $link_empty_to)
        {
        }
        /**
         * @param array    $lang
         * @param string   $fallback_lang
         * @param WP_Query $current_query
         * @param bool     $icl_lso_link_empty
         * @param bool     $skip_lang
         * @param string   $link_empty_to
         *
         * @return array
         */
        public function add_date_or_cpt_url_to_ls_lang($lang, $fallback_lang, $current_query, $icl_lso_link_empty, $skip_lang, $link_empty_to)
        {
        }
        public function get_ls_language($lang_code, $current_language, $language_array = \false)
        {
        }
        public function sort_ls_languages($w_active_languages, $template_args)
        {
        }
        /**
         * @param array $lang
         * @param array $args with keys below
         * - `skip_lang`        bool|int
         * - `link_empty`       bool|int
         * - `link_empty_to`    string a URL possibly with a {%lang} placeholder (e.g. http://example.tld/{%lang}/notify-no-translation/)
         * - `override_missing` bool if true language will always be shown ( Example: untranslated CPT archives)
         *
         * @return array
         */
        private function maybe_mark_lang_missing($lang, $args)
        {
        }
        /**
         * @param WP_Query $query
         *
         * @return array()
         */
        private function extract_date_data_from_query($query)
        {
        }
        /**
         * @param WP_Query $wp_query
         *
         * @return array()
         */
        private function extract_tax_archive_data($wp_query)
        {
        }
        /**
         * @param string $taxonomy
         * @param int    $term_id
         *
         * @return array
         */
        private function get_post_format_translations($taxonomy, $term_id)
        {
        }
        private function sort_by_id($array_a, $array_b)
        {
        }
        private function sort_by_name($array_a, $array_b)
        {
        }
    }
    abstract class WPML_Menu_Sync_Functionality extends \WPML_Full_Translation_API
    {
        const STRING_CONTEXT_SUFFIX = ' menu';
        const STRING_NAME_LABEL_PREFIX = 'Menu Item Label ';
        const STRING_NAME_URL_PREFIX = 'Menu Item URL ';
        private $menu_items_cache;
        /**
         * @param SitePress               $sitepress
         * @param wpdb                    $wpdb
         * @param WPML_Post_Translation   $post_translations
         * @param WPML_Terms_Translations $term_translations
         */
        function __construct(&$sitepress, &$wpdb, &$post_translations, &$term_translations)
        {
        }
        function get_menu_items($menu_id, $translations = \true)
        {
        }
        function sync_menu_translations($menu_trans_data, $menus)
        {
        }
        /**
         * @param \stdClass $item
         * @param int       $menu_id
         *
         * @return array
         */
        function get_menu_item_translations($item, $menu_id)
        {
        }
        /**
         * Synchronises a page menu item's translations' trids according to the trids of the pages they link to.
         *
         * @param object $menu_item
         *
         * @return int number of affected menu item translations
         */
        function sync_page_menu_item_trids($menu_item)
        {
        }
        /**
         * @param  int  $menu_id
         * @param bool $include_original
         *
         * @return bool|array
         */
        function get_menu_translations($menu_id, $include_original = \false)
        {
        }
        protected function get_menu_name($menu_id)
        {
        }
        /**
         * @param int          $menu_id
         * @param string|false $language_code
         *
         * @return bool
         */
        protected function get_translated_menu($menu_id, $language_code = \false)
        {
        }
        /**
         * We need to register the string first in the default language
         * to avoid it being "auto-registered" in English
         *
         * @param string           $menu_name
         * @param WP_Post|stdClass $item
         * @param string           $lang
         * @param bool             $has_label_translation
         * @param bool             $has_url_translation
         *
         * @return array
         */
        protected function icl_t_menu_item($menu_name, $item, $lang, &$has_label_translation, &$has_url_translation)
        {
        }
        /**
         * @param object $item
         * @param string $lang_code
         *
         * @return int
         */
        private function is_parent_not_translated($item, $lang_code)
        {
        }
        private function get_page_orphan_sql($existing_languages, $menu_item_id)
        {
        }
        private function maybe_reload_post_item($translated_object_id, $item_translations, $item, $lang_code)
        {
        }
        private function get_menu_item_depth($item_id)
        {
        }
        private function st_actions($lang_code, $menu_id, $item, $translated_object_id, $translated_object_title, $translated_object_url, &$icl_st_label_exists, &$icl_st_url_exists)
        {
        }
        /**
         * @param array<string,int> $item_translations
         * @param int               $menu_id
         */
        private function fix_assignment_to_menu($item_translations, $menu_id)
        {
        }
        /**
         * Removes potentially mis-assigned menu items from their menu, whose language differs from that of their
         * associated menu.
         */
        private function fix_language_conflicts()
        {
        }
    }
    class ICLMenusSync extends \WPML_Menu_Sync_Functionality
    {
        public $menus;
        public $is_preview = \false;
        public $sync_data = \false;
        public $string_translation_links = array();
        public $operations = array();
        /** @var  WPML_Menu_Item_Sync $menu_item_sync */
        private $menu_item_sync;
        /**
         * @param SitePress             $sitepress
         * @param wpdb                  $wpdb
         * @param WPML_Post_Translation $post_translations
         * @param WPML_Term_Translation $term_translations
         */
        function __construct(&$sitepress, &$wpdb, &$post_translations, &$term_translations)
        {
        }
        function init_hooks()
        {
        }
        function init($previous_menu = \false)
        {
        }
        function get_menu_names()
        {
        }
        function get_menus_tree()
        {
        }
        private function get_menu_options($menu_id)
        {
        }
        public function add_ghost_entries()
        {
        }
        public function set_new_menu_order()
        {
        }
        function do_sync(array $data)
        {
        }
        function render_items_tree_default($menu_id, $parent = 0, $depth = 0)
        {
        }
        private function render_option_update($active_language_codes, $default_language, $menu_id, &$need_sync)
        {
        }
        private function render_deleted_items($deleted_items, &$need_sync, $depth, $menu_id)
        {
        }
        private function index_changed($index, $item_id, $item_translation, $menu_id, $lang_code, $change = \true)
        {
        }
        function _item_has_children($menu_id, $item_id)
        {
        }
        function get_item_depth($menu_id, $item_id)
        {
        }
        function admin_notices()
        {
        }
        public function display_menu_links_to_string_translation()
        {
        }
        public function get_links_for_menu_strings_translation()
        {
        }
        private function incOperation($mode)
        {
        }
    }
    class WPML_Menu_Item_Sync extends \WPML_Menu_Sync_Functionality
    {
        /** @var array $labels_to_add */
        private $labels_to_add = array();
        /** @var array $urls_to_add */
        private $urls_to_add = array();
        /**
         * @var string
         */
        const MENU_ITEM_POST_TYPE = 'post_nav_menu_item';
        /**
         * @return int the number of removed broken page items
         */
        function cleanup_broken_page_items()
        {
        }
        function sync_deleted_menus($deleted_data)
        {
        }
        function sync_menu_options($options_data)
        {
        }
        public function sync_menu_order(array $menus)
        {
        }
        function sync_added_items(array $added_data, array $menus)
        {
        }
        function sync_moved_items(array $moved_data, array $menus)
        {
        }
        /**
         * @param int $item_id
         * @param int $menu_id
         */
        private function assign_orphan_item_to_menu($item_id, $menu_id)
        {
        }
        function sync_caption($label_change_data)
        {
        }
        function sync_urls($url_change_data)
        {
        }
        function sync_missing_captions($label_missing)
        {
        }
        function sync_urls_to_add($url_missing_data)
        {
        }
        /**
         * @param array $menus Registered menus.
         */
        public function sync_custom_fields($menus)
        {
        }
        /**
         * @param int $menuItemId
         */
        private function sync_custom_fields_set_to_copy($menuItemId)
        {
        }
        /**
         * @param int $menuItemId
         */
        private function sync_custom_fields_set_to_copy_once($menuItemId)
        {
        }
        private function fix_hierarchy_added_items($added_data)
        {
        }
        private function fix_hierarchy_moved_items($moved_data)
        {
        }
        private function fix_hierarchy_for_item($item_id, $language)
        {
        }
        private function get_or_set_trid($item_id, $language_code)
        {
        }
    }
    class WPML_Nav_Menu
    {
        private $current_menu;
        private $current_lang;
        /** @var  WPML_Term_Translation $term_translations */
        protected $term_translations;
        /** @var  WPML_Post_Translation $post_translations */
        protected $post_translations;
        /** @var SitePress $sitepress */
        protected $sitepress;
        /** @var wpdb $wpdb */
        public $wpdb;
        /** @var  WPML_Nav_Menu_Actions $nav_menu_actions */
        public $nav_menu_actions;
        function __construct(\SitePress $sitepress, \wpdb $wpdb, \WPML_Post_Translation $post_translations, \WPML_Term_Translation $term_translations)
        {
        }
        public function init_hooks()
        {
        }
        /**
         * @return bool
         */
        private function must_filter_menus()
        {
        }
        function init()
        {
        }
        function sync_menus_via_ajax()
        {
        }
        public function get_links_for_menu_strings_translation_ajax()
        {
        }
        /**
         * @param string $menu_id
         */
        function admin_menu_setup($menu_id)
        {
        }
        /**
         *
         * Associates menus without language information with default language
         */
        private function _set_menus_language()
        {
        }
        function ajax($data)
        {
        }
        function _get_menu_language($menu_id)
        {
        }
        /**
         *
         * Gets first menu in a specific language
         * used to override nav_menu_recently_edited when a different language is selected
         *
         * @param string $lang
         * @return int
         */
        function _get_first_menu($lang)
        {
        }
        function get_current_menu()
        {
        }
        /**
         * @param bool|int $menu_id
         *
         * @return array
         */
        function _load_menu($menu_id = \false)
        {
        }
        private function get_action_icon($css_class, $label)
        {
        }
        function nav_menu_language_controls()
        {
        }
        function get_menus_without_translation($lang, $trid = 0)
        {
        }
        private function render_translation_of($lang, $trid = \false)
        {
        }
        private function render_button_language_switcher_settings()
        {
        }
        function get_menus_by_language()
        {
        }
        function languages_menu($echo = \true)
        {
        }
        function get_terms_filter($terms, $taxonomies, $args)
        {
        }
        /**
         * Filter posts by language.
         *
         * @param \WP_Query $q
         *
         * @return \WP_Query
         */
        public function parse_query($q)
        {
        }
        /**
         * @param mixed $val
         *
         * @return mixed
         */
        function option_nav_menu_options($val)
        {
        }
        /**
         * @return bool
         */
        private function is_duplication_mode()
        {
        }
        function wp_nav_menu_args_filter($args)
        {
        }
        /**
         * It will fallback to the original if the translation
         * does not exist. This is required for nav menus in
         * a "widget" context.
         *
         * @param int $navMenuId
         *
         * @return int
         */
        private static function convert_nav_menu_id($navMenuId)
        {
        }
        function wp_nav_menu_items_filter($items)
        {
        }
        function _set_custom_status_in_theme_location_switcher()
        {
        }
        // on the nav menus when selecting pages using the pagination filter pages > 2 by language
        function _enable_sitepress_query_filters($args)
        {
        }
        function wp_get_nav_menus_filter($menus)
        {
        }
        private function setup_menu_item()
        {
        }
        private function setup_menu_synchronization()
        {
        }
        private function unfilter_non_default_language_menus($menus)
        {
        }
        private function adjust_current_language_if_required()
        {
        }
    }
}
namespace WPML\Core\Menu {
    class Translate implements \IWPML_Frontend_Action
    {
        public function add_hooks()
        {
        }
        /**
         * @param array $items An array of menu item post objects.
         * @param object $menu The menu object.
         *
         * @return array
         */
        public static function translate($items, $menu)
        {
        }
        /**
         * @param object $item Menu item - post object
         *
         * @return bool
         */
        public static function hasTranslation($item)
        {
        }
        /**
         * @param object $item Menu item - post object
         *
         * @return object
         */
        public static function translateItem($item)
        {
        }
        /**
         * @param object $item Menu item - post object
         *
         * @return bool
         */
        public static function canView($item)
        {
        }
        /**
         * @param object $menu The menu object.
         *
         * @return bool
         */
        private static function doesNotHaveMenuInCurrentLanguage($menu)
        {
        }
        /**
         * @param object $item Menu item - post object
         *
         * @return int|null
         */
        private static function getTranslatedId($item)
        {
        }
    }
}
namespace {
    /**
     * Class WPML_Compatibility_2017
     *
     * # Compatbility class for 2017 theme
     *
     * ## Why is this needed?
     *
     * When configuring 2017 to use a static page, you can define sections in these pages.
     * Each section is another page and the value is stored with the ID of that page.
     * In order to display the sections in the current language, WPML needs to know the IDs of the translated pages.
     *
     * ## How this works?
     *
     * WPML tries to retrieve the number of Frontpage panels and, for each of them, will add a filter to translate the ID with the one in the current language, if any.
     *
     * This class is loaded and instantiated by `plugins-integration.php` only if the `twentyseventeen_panel_count` function exists and the `twentyseventeen_translate_panel_id` does not.
     */
    class WPML_Compatibility_2017
    {
        function init_hooks()
        {
        }
        function get_translated_panel_id($id)
        {
        }
    }
    class WPML_Compatibility_Gutenberg implements \IWPML_Action
    {
        /**
         * We need to load the filter after `wpml_before_init` where ST loads the blocking filter
         * and before `plugins_loaded` (priority 10) where Gutenberg loads the text domain.
         */
        const PRIORITY_ON_PLUGINS_LOADED = 5;
        /** @var WPML_PHP_Functions $php_functions */
        private $php_functions;
        public function __construct(\WPML_PHP_Functions $php_functions = \null)
        {
        }
        public function add_hooks()
        {
        }
        public function load_textdomain_filter()
        {
        }
        /**
         * @param bool   $override
         * @param string $domain
         *
         * @return bool
         */
        public function unblock_gutenberg_domain($override, $domain)
        {
        }
    }
    /**
     * Class WPML_Compatibility_Factory
     */
    class WPML_Compatibility_Factory implements \IWPML_Frontend_Action_Loader, \IWPML_Backend_Action_Loader
    {
        /**
         * Create array of compatibility objects.
         *
         * @return array
         */
        public function create()
        {
        }
    }
    class WPML_Compatibility_Disqus implements \IWPML_Action
    {
        const LANGUAGE_NOT_SUPPORTED = '';
        /** @var SitePress */
        private $sitepress;
        /**
         * @param SitePress $sitepress
         */
        public function __construct(\SitePress $sitepress)
        {
        }
        public function add_hooks()
        {
        }
        public function set_language()
        {
        }
        /**
         * @return string
         */
        private function get_current_lang()
        {
        }
        /**
         * @return array
         */
        private function get_lang_map()
        {
        }
    }
    class WPML_Compatibility_Disqus_Factory implements \IWPML_Frontend_Action_Loader
    {
        /**
         * @return WPML_Compatibility_Disqus
         */
        public function create()
        {
        }
    }
    class WPML_Compatibility_Tiny_Compress_Images
    {
        /** @var \WPML_Translation_Element_Factory */
        private $element_factory;
        /**
         * WPML_Compatibility_Tiny_Compress_Images constructor.
         *
         * @param \WPML_Translation_Element_Factory $element_factory
         */
        function __construct(\WPML_Translation_Element_Factory $element_factory)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param int    $post_id
         * @param string $meta_key
         * @param mixed  $meta_value
         */
        public function updated_tiny_postmeta_action($post_id, $meta_key, $meta_value)
        {
        }
        private function source_and_translation_matches($source_attachment_file, $translated_attachment_id)
        {
        }
    }
    class WPML_Compatibility_Tiny_Compress_Images_Factory implements \IWPML_Backend_Action_Loader
    {
        /**
         * @return \WPML_Compatibility_Tiny_Compress_Images
         */
        public function create()
        {
        }
    }
    /**
     * Class WPML_Compatibility_Jetpack
     */
    class WPML_Compatibility_Jetpack implements \IWPML_Action
    {
        /**
         * Add hooks.
         */
        public function add_hooks()
        {
        }
        /**
         * Filter to prevent duplicate post from being publicized.
         *
         * @param bool    $should_publicize Should publicize post.
         * @param WP_Post $post Post.
         *
         * @return bool
         */
        public function publicize_should_publicize_published_post_filter($should_publicize, $post)
        {
        }
        /**
         * Check if post is a duplicate being created at the moment.
         * We cannot use standard method to determine duplicate as post meta '_icl_lang_duplicate_of' is not set yet.
         *
         * @param \WP_Post $post
         *
         * @return bool
         */
        private function is_post_duplicated($post)
        {
        }
    }
    /**
     * Class WPML_Google_Sitemap_Generator
     *
     * # Compatibility class for Google XML Sitemaps (https://wordpress.org/plugins/google-sitemap-generator/)
     *
     * ## Why is this needed?
     *
     * Google XML Sitemaps displays all the translations together. When we use a different domain per language we want to have separate sitemaps for each domain.
     *
     * ## How does this work?
     *
     * WPML fetches a list of post ids in other languages to pass them to the database query via 'sm_b_exclude' option.
     *
     * This class is loaded and instantiated by `plugins-integration.php` only if the `GoogleSitemapGeneratorLoader` class exists.
     */
    class WPML_Google_Sitemap_Generator
    {
        private $wpdb;
        private $sitepress;
        /**
         * @param wpdb $wpdb
         */
        public function __construct(\wpdb $wpdb, \SitePress $sitepress)
        {
        }
        public function init_hooks()
        {
        }
        /**
         * Add hooks for the different types of permalinks.
         */
        public function init_permalink_hooks()
        {
        }
        /**
         * Filter sitemap urls to apply the correct URL format.
         *
         * @param string      $permalink The URL to filter.
         * @param WP_Post|int $post      The post id it belongs to.
         *
         * @return string
         */
        public function permalink_filter($permalink, $post)
        {
        }
        /**
         * @return bool
         */
        private function is_per_domain()
        {
        }
        /**
         * @param array $value
         *
         * @return array
         */
        public function exclude_other_languages($value)
        {
        }
    }
}
namespace WPML\Compatibility\GoogleSiteKit {
    class Hooks implements \IWPML_Backend_Action
    {
        public function add_hooks()
        {
        }
        /**
         * @return string
         */
        public function getCanonicalHomeUrl()
        {
        }
    }
}
namespace {
    class WPML_Admin_Language_Switcher
    {
        private $flag_kses_tags = array('img' => array('src' => array(), 'class' => array(), 'height' => array(), 'width' => array()), 'i' => array('class' => array()));
        private $current_language;
        function render()
        {
        }
        public function get_languages_links()
        {
        }
        private function render_admin_bar_menu($languages_links, $current_language)
        {
        }
    }
    class WPML_Dashboard_Ajax
    {
        /** @var WPML_Super_Globals_Validation $super_globals*/
        private $super_globals;
        public function __construct(\WPML_Super_Globals_Validation $super_globals)
        {
        }
        public function init_ajax_actions()
        {
        }
        public function enqueue_js()
        {
        }
        private function get_wpml_tm_script_js_strings()
        {
        }
        public function wpml_duplicate_dashboard()
        {
        }
        public function wpml_need_sync_message()
        {
        }
    }
    /**
     * Class WPML_TM_Dashboard
     */
    class WPML_TM_Dashboard
    {
        /**
         * @var array
         */
        private $translatable_post_types = \null;
        /**
         * @var wpdb
         */
        private $wpdb;
        /**
         * @var SitePress
         */
        private $sitepress;
        /**
         * @var int
         */
        private $found_documents = 0;
        /**
         * WPML_TM_Dashboard constructor.
         *
         * @param wpdb      $wpdb
         * @param SitePress $sitepress
         */
        public function __construct(\wpdb $wpdb, \SitePress $sitepress)
        {
        }
        /**
         * @param array $args
         *
         * @return array
         */
        public function get_documents($args = array())
        {
        }
        /**
         * @param $args
         *
         * @return array
         */
        private function remove_empty_arguments($args)
        {
        }
        /**
         * Add list of translatable post types to dashboard.
         *
         * @param array $results
         * @param array $args
         *
         * @return array
         */
        private function add_translatable_posts($results, $args)
        {
        }
        /**
         * Add additional where conditions to support the following query arguments:
         *  - post_title_like         - Allow query posts with SQL LIKE in post title.
         *  - post_language_to        - Allow query posts with language they are translated to.
         *  - post_translation_status - Allow to query posts by their translation status.
         *
         * @param string $where
         * @param object $wp_query
         *
         * @return string
         */
        public function add_dashboard_filter_conditions($where, $wp_query)
        {
        }
        /**
         * Add string packages to translation dashboard.
         *
         * @param array $results
         * @param array $args
         *
         * @return array
         */
        private function add_string_packages($results, $args)
        {
        }
        /**
         * Create additional where clause for querying string packages based on filters.
         *
         * @param array $args
         *
         * @return string
         */
        private function create_string_packages_where($args)
        {
        }
        /**
         * @param  integer $translation_status
         * @param  string  $language
         *
         * @return string
         */
        private function build_translation_status_where($translation_status, $language = \null)
        {
        }
        private function only_language_condition($language)
        {
        }
        private function explicit_status_condition($status, $language = \null)
        {
        }
        private function needs_update_condition($language = \null)
        {
        }
        private function not_translated_or_needs_update_condition($language = \null)
        {
        }
        private function language_where($language)
        {
        }
        /**
         * @param array  $args
         * @param string $post_type
         *
         * @return bool
         */
        private function is_cpt_type($args = array(), $post_type = '')
        {
        }
        /**
         * @return array
         */
        private function get_translatable_post_types()
        {
        }
    }
    abstract class WPML_TM_Menus
    {
        protected $post_types;
        protected $tab_items;
        private $base_target_url;
        protected $current_shown_item;
        /** @var  WPML_UI_Screen_Options_Pagination|null $dashboard_pagination */
        protected $dashboard_pagination;
        function __construct()
        {
        }
        public function display_main(\WPML_UI_Screen_Options_Pagination $dashboard_pagination = \null)
        {
        }
        protected abstract function render_main();
        private function build_tab_item_target_url($target)
        {
        }
        protected abstract function build_tab_items();
        /**
         * @return string
         */
        private function get_current_shown_item()
        {
        }
        private function build_tabs()
        {
        }
        private function build_content()
        {
        }
        protected function render_items()
        {
        }
        public function build_content_dashboard_fetch_translations_box()
        {
        }
        /**
         * Used only by unit tests at the moment
         *
         * @return mixed
         */
        public function get_post_types()
        {
        }
        protected function heading($text)
        {
        }
        private function current_user_can_access($tab_item)
        {
        }
        protected abstract function get_page_slug();
        protected abstract function get_default_tab();
    }
    class WPML_TM_Menus_Settings extends \WPML_TM_Menus
    {
        /** @var WPML_Translate_Link_Targets_UI $translate_link_targets_ui */
        private $translate_link_targets_ui;
        /** @var bool $end_user_feature_enabled */
        private $end_user_feature_enabled;
        private $mcsetup_sections = array();
        public function init()
        {
        }
        private function init_navigation_links()
        {
        }
        protected function render_main()
        {
        }
        protected function build_tab_items()
        {
        }
        private function build_mcs_item()
        {
        }
        private function build_translation_notifications_item()
        {
        }
        public function build_content_mcs()
        {
        }
        private function build_content_mcs_custom_fields()
        {
        }
        public function build_content_translation_notifications()
        {
        }
        protected function get_page_slug()
        {
        }
        protected function get_default_tab()
        {
        }
        private function render_mcsetup_navigation_links()
        {
        }
        private function get_navigation_link($anchor)
        {
        }
        /** @return bool */
        private function should_show_mcsetup_section($anchor)
        {
        }
        /** @return WPML_Translate_Link_Targets_UI */
        private function get_translate_link_targets_ui()
        {
        }
    }
    class SitePress_EditLanguages
    {
        const ACCEPTED_MIME_TYPES = ['gif' => 'image/gif', 'jpg|jpeg|jpe' => 'image/jpg', 'png' => 'image/png', 'svg' => 'image/svg+xml'];
        public static $active_languages;
        public $upload_dir;
        public $is_writable = \false;
        public $required_fields = ['code' => '', 'english_name' => '', 'translations' => 'array', 'flag' => '', 'default_locale' => '', 'tag' => ''];
        private $mode = 'edit';
        private $validation_action = \null;
        public $validation_failed = \false;
        private $error = '';
        private $message = '';
        private $max_file_size;
        private $max_locale_length = 35;
        /**
         * @var WPML_Flags
         */
        private $wpml_flags;
        /**
         * @var array<string>
         */
        private $wpml_flag_files;
        /** @var bool $update_language_packs_if_needed */
        private $update_language_packs_if_needed;
        /** @var array */
        private static $languages_available_in_ate;
        /**
         * This is a helper variable that stores just saved mapping.
         * It is needed to avoid the problem with delayed mapping propagation in ATE.
         * When we save a new mapping, we try to retrieve those data immediately after which does not always work.
         * Instead of that, we store this data here after saving. When a user reloads the page, we will ask ATE API for those data.
         *
         * @var array|null
         */
        public static $newlySavedMapping;
        /**
         * @param \WPML_Flags $wpml_flags
         * @param bool        $update_language_packs_if_needed
         */
        public function __construct(\WPML_Flags $wpml_flags, $update_language_packs_if_needed = \true)
        {
        }
        /**
         * @param bool $clearCache
         *
         * @return array
         */
        public static function getLanguagesAvailableInATE($clearCache = \false)
        {
        }
        function render()
        {
        }
        function edit_table()
        {
        }
        private function prepare_new_lang_data($new_lang)
        {
        }
        private function table_row($lang, $echo = \true, $add = \false)
        {
        }
        public static function get_active_languages()
        {
        }
        function update_main_table($id, $code, $default_locale, $encode_url, $tag)
        {
        }
        function insert_translation($name, $language_code, $display_language_code)
        {
        }
        function update_translation($name, $language_code, $display_language_code)
        {
        }
        function insert_flag($lang_code, $flag, $from_template)
        {
        }
        function update_flag($lang_code, $flag, $from_template)
        {
        }
        function update()
        {
        }
        /**
         * @param array<string,string|array<string,string>> $data
         * @param int                                       $id
         *
         * @return int
         */
        private function handle_flag_post_data(array &$data, $id)
        {
        }
        private function isBuildInLang($langCode)
        {
        }
        /**
         * @param array<string,string|array<string,string>> $data
         * @param int                                       $id
         *
         * @return bool
         */
        private function is_flag_uploading_process(array &$data, $id)
        {
        }
        function insert_one($data)
        {
        }
        function validate_one($id, $data)
        {
        }
        /**
         * Checks that language code is valid.
         *
         * @param string $language_code Unvalidated language code from input.
         *
         * @return bool
         */
        private function is_language_code_valid($language_code)
        {
        }
        /**
         * @return bool
         */
        private function is_delete_language_action()
        {
        }
        /**
         * @return bool
         */
        private function must_display_new_language_translation_column()
        {
        }
        /**
         * @return bool
         */
        private function is_new_data_and_invalid()
        {
        }
        /**
         * @return bool
         */
        private function is_new_data_and_valid()
        {
        }
        /**
         * @return bool
         */
        private function is_edit_mode()
        {
        }
        private function set_validation_failed($id)
        {
        }
        function delete_language($lang_id)
        {
        }
        function sanitize($data)
        {
        }
        function check_extension($file)
        {
        }
        function get_errors()
        {
        }
        function set_errors($str = \false)
        {
        }
        function get_messages()
        {
        }
        function set_messages($str = \false)
        {
        }
        function upload_flag($id)
        {
        }
        function migrate()
        {
        }
        /**
         * @param \SitePress $sitepress
         */
        private function update_language_packs(\SitePress $sitepress)
        {
        }
        /**
         * @param int $id
         *
         * @return string
         */
        private function get_add_language_from_post_data($id)
        {
        }
        /**
         * @param array<string,string|array<string,string>> $lang
         * @param array<string,string>                      $translation
         *
         * @return string
         */
        private function get_translations_data($lang, $translation)
        {
        }
        private function saveLanguageMapping($languagesData)
        {
        }
        private function displayMappingField($lang, $add)
        {
        }
    }
    class WPML_Translation_Selector extends \WPML_SP_User
    {
        private $default_language_code;
        private $source_language_code;
        private $element_id;
        public function __construct(&$sitepress, $default_language, $source_language, $element_id)
        {
        }
        function add_translation_of_selector_to_page($trid, $current_language, $selected_language, $untranslated_ids)
        {
        }
        private function get_name_by_ttid($ttid)
        {
        }
        /**
         * @param int $trid
         * @return null|object
         */
        private function get_original_name_by_trid($trid)
        {
        }
    }
    class SitePress_Table extends \WP_List_Table
    {
        public function __construct()
        {
        }
    }
    class WPML_Post_Status_Display
    {
        const ICON_TRANSLATION_EDIT = 'otgs-ico-edit';
        const ICON_TRANSLATION_NEEDS_UPDATE = 'otgs-ico-refresh';
        const ICON_TRANSLATION_ADD = 'otgs-ico-add';
        const ICON_TRANSLATION_ADD_DISABLED = 'otgs-ico-add-disabled';
        const ICON_TRANSLATION_EDIT_DISABLED = 'otgs-ico-edit-disabled';
        const ICON_TRANSLATION_IN_PROGRESS = 'otgs-ico-in-progress';
        private $active_langs;
        public function __construct($active_languages)
        {
        }
        /**
         * Returns the html of a status icon.
         *
         * @param string $link Link the status icon is to point to.
         * @param string $text Hover text for the status icon.
         * @param string $css_class
         *
         * @return string
         */
        private function render_status_icon($link, $text, $css_class)
        {
        }
        private function get_action_icon($css_class, $label)
        {
        }
        /**
         * This function takes a post ID and a language as input.
         * It will always return the status icon,
         * of the version of the input post ID in the language given as the second parameter.
         *
         * @param int    $post_id  original post ID
         * @param string $lang     language of the translation
         *
         * @return string
         */
        public function get_status_html($post_id, $lang)
        {
        }
        /**
         * @param string $css_class
         * @param int    $post_id
         * @param string $lang
         * @param int    $trid
         *
         * @return string
         */
        private function map_old_icon_filter_to_css_class($css_class, $post_id, $lang, $trid)
        {
        }
        public function get_status_data($post_id, $lang)
        {
        }
        /**
         * @param int $post_id
         * @param bool $update   true if the translation in questions is in need of an update,
         *                       false otherwise.
         *
         * @return array
         */
        private function generate_edit_allowed_data($post_id, $update = \false)
        {
        }
        /**
         * Generates the data for displaying a link element pointing towards a translation, that the current user can
         * create.
         *
         * @param int    $trid
         * @param int    $original_id
         * @param string $lang_code
         * @param string $source_language
         *
         * @return array
         */
        private function generate_add_data($trid, $lang_code, $source_language, $original_id)
        {
        }
        private function generate_retry_data()
        {
        }
    }
    abstract class WPML_Language_Filter_Bar extends \WPML_WPDB_And_SP_User
    {
        protected $active_languages;
        protected $current_language;
        protected function init()
        {
        }
        protected function lang_span($lang_code, $count)
        {
        }
        protected function strong_lang_span_cover($lang_code, $count)
        {
        }
        private function sanitize_get_input($index, $parent_array)
        {
        }
        protected function sanitize_request()
        {
        }
        protected abstract function get_count_data($element_type);
        protected function extra_conditions_snippet()
        {
        }
        protected function get_counts($element_type)
        {
        }
        private function generate_counts_array(array $data)
        {
        }
    }
    class WPML_Taxonomy_Translation_Sync_Display
    {
        public function __construct()
        {
        }
        private function get_req_data()
        {
        }
        public function ajax_sync_preview()
        {
        }
        public function ajax_sync_save()
        {
        }
    }
    class WPML_Tax_Menu_Loader
    {
        /** @var SitePress $sitepress */
        private $sitepress;
        /** @var wpdb $wpdb */
        public $wpdb;
        /** @var string $taxonomy */
        private $taxonomy;
        /**
         * @param wpdb      $wpdb
         * @param SitePress $sitepress
         * @param string    $taxonomy
         */
        public function __construct($wpdb, $sitepress, $taxonomy)
        {
        }
        public function get_wpdb()
        {
        }
        public function init()
        {
        }
        /**
         * Filters the display of the categories list in order to prevent the default category from being delete-able.
         * This is done by printing a hidden div containing a JSON encoded array with all category id's, the checkboxes of which are to be removed.
         */
        public function category_display_action()
        {
        }
        public function js_scripts_tags()
        {
        }
        function wp_dropdown_cats_select_parent($html, $args)
        {
        }
        /**
         * @param Object $term
         */
        public function wpml_edit_term_form($term)
        {
        }
        function _tax_adding()
        {
        }
        /**
         * If user perform bulk taxonomy deletion when displaying non-default
         * language taxonomies, after deletion should stay with same language
         *
         * @param string $location Url where browser will redirect.
         * @return string Url where browser will redirect.
         */
        public function preserve_lang_param($location)
        {
        }
    }
    class WPML_Term_Language_Filter extends \WPML_Language_Filter_Bar
    {
        function terms_language_filter($echo = \true)
        {
        }
        private function lang_element($languages, $code, $taxonomy, $post_type)
        {
        }
        protected function get_count_data($taxonomy)
        {
        }
    }
    class WPML_Taxonomy_Element_Language_Dropdown
    {
        function add_language_selector_to_page($active_languages, $selected_language, $translations, $element_id, $type)
        {
        }
        private function filter_allowed_languages($active_languages, $selected_language)
        {
        }
        private function add_options($active_languages, $selected_language)
        {
        }
    }
    class WPML_Taxonomy_Translation_Table_Display
    {
        private static function get_strings_translation_array()
        {
        }
        public static function enqueue_taxonomy_table_resources($sitepress)
        {
        }
        public static function wpml_get_table_taxonomies(\SitePress $sitepress)
        {
        }
        public static function wpml_get_terms_and_labels_for_taxonomy_table()
        {
        }
        private static function render_tax_language_selector($labels, $taxonomy)
        {
        }
    }
    class WPML_Troubleshooting_Terms_Menu
    {
        /**
         * Displays the admin notice informing about terms in the old format, using the language suffix.
         * The notice is displayed until it is either dismissed or the update button is pressed.
         */
        public static function display_terms_with_suffix_admin_notice()
        {
        }
        /**
         * Returns the HTML for the display of all terms with a language suffix in the troubleshooting menu.
         *
         * @return string
         */
        public static function display_terms_with_suffix()
        {
        }
        /**
         * @param string $term_name
         * Strips a term off all language suffixes in the form @<lang_code> on it.
         *
         * @return string
         */
        public static function strip_language_suffix($term_name)
        {
        }
        /**
         * Ajax handler for the troubleshoot page. Updates the term name on those terms given via the Ajax action.
         */
        public static function wpml_update_term_names_troubleshoot()
        {
        }
    }
    class WPML_Post_Language_Filter extends \WPML_Language_Filter_Bar
    {
        private $post_status;
        private $post_type;
        protected function sanitize_request()
        {
        }
        public function register_scripts()
        {
        }
        public function post_language_filter()
        {
        }
        protected function extra_conditions_snippet()
        {
        }
        protected function get_count_data($type)
        {
        }
        private function language_links($type)
        {
        }
    }
    class WPML_Meta_Boxes_Post_Edit_Ajax_Factory implements \IWPML_Backend_Action_Loader, \IWPML_AJAX_Action_Loader
    {
        /**
         * @return WPML_Meta_Boxes_Post_Edit_Ajax
         */
        public function create()
        {
        }
    }
    /**
     * Class WPML_Meta_Boxes_Post_Edit_HTML
     */
    class WPML_Meta_Boxes_Post_Edit_HTML
    {
        const FLAG_HAS_MEDIA_OPTIONS = 'wpml_has_media_options';
        const TAXONOMIES_PRIORITY = 'translation_priority';
        const WRAPPER_ID = 'icl_div';
        /** @var SitePress $sitepress */
        private $sitepress;
        /** @var WPML_Post_Translation $post_translation */
        private $post_translation;
        private $translation_of_options;
        /** @var  array $allowed_languages */
        private $allowed_languages;
        /** @var  bool $can_translate_post */
        private $can_translate_post;
        /** @var  bool $is_original */
        private $is_original;
        /** @var  WP_Post $post */
        private $post;
        /** @var  string $post_type_label */
        private $post_type_label;
        /** @var  string $selected_language */
        private $selected_language;
        /** @var  string $source_language */
        private $source_language;
        /** @var  array $translations */
        private $translations;
        /** @var  int $trid */
        private $trid;
        /**
         * @param SitePress             $sitepress
         * @param WPML_Post_Translation $post_translation
         */
        function __construct(\SitePress $sitepress, \WPML_Post_Translation $post_translation)
        {
        }
        /**
         * @param null|WP_Post $post
         */
        public function render_languages($post = \null)
        {
        }
        private function post_edit_languages_duplicate_of()
        {
        }
        private function post_edit_languages_dropdown()
        {
        }
        private function translation_priority()
        {
        }
        /**
         * @param int $element_id
         *
         * @return WP_Term|null
         */
        private function get_term_obj($element_id)
        {
        }
        private function connect_translations()
        {
        }
        private function translation_of()
        {
        }
        private function minor_edit()
        {
        }
        private function languages_actions()
        {
        }
        private function is_a_translation()
        {
        }
        private function has_translations()
        {
        }
        private function render_translation_of_options()
        {
        }
        /**
         * @return bool
         */
        private function can_translate()
        {
        }
        private function count_untranslated_posts()
        {
        }
        private function languages_table($status_display)
        {
        }
        /**
         * @param WPML_Post_Status_Display $status_display
         */
        private function translation_summary($status_display)
        {
        }
        private function init_translation_of_options()
        {
        }
        /**
         * @param string                   $lang
         * @param WPML_Post_Status_Display $status_display
         */
        private function translate_option($lang, $status_display)
        {
        }
        private function handle_as_original()
        {
        }
        private function add_translation_of_option($value, $label, $selected)
        {
        }
        private function fix_source_language()
        {
        }
        /**
         * @return bool
         */
        private function is_edit_action()
        {
        }
        /**
         * Helper function to tell if $lang_code should be marked as selected in post language chooser
         *
         * @param string     $lang_code         2 letters language code
         * @param string     $selected_language 2 letters language code
         *
         * @return boolean
         */
        private function is_selected_lang($lang_code, $selected_language)
        {
        }
        /**
         * Renders the "Copy From" and "Overwrite With" buttons on the post edit screen.
         *
         * @param WP_Post $post
         *
         * @hook icl_post_languages_options_after
         */
        private function copy_from_original($post)
        {
        }
        private function media_options($post)
        {
        }
        /**
         * Renders the button for copying the original posts content to the currently edited post on the post edit screen.
         *
         * @param string  $source_lang
         * @param string  $source_lang_name
         * @param WP_Post $post
         * @param int     $trid
         */
        private function display_copy_from_button($source_lang, $source_lang_name, $post, $trid)
        {
        }
        /**
         * Renders the "Overwrite" button on the post edit screen that allows setting the post as a duplicate of its
         * original.
         *
         * @param WP_Post $post
         * @param string  $source_lang_name
         * @param int     $original_post_id
         * @param string  $post_lang
         */
        private function display_set_as_dupl_btn($post, $source_lang_name, $original_post_id, $post_lang)
        {
        }
        private function get_untranslated_posts()
        {
        }
        /**
         * Wrapper for \WPML_Post_Translation::get_element_translations that retrieves all translations of the currently
         * edited post.
         *
         * @uses \WPML_Post_Translation::get_element_translations
         *
         * @return int[]
         */
        private function get_translations()
        {
        }
        /**
         * @return int|false
         */
        private function get_trid()
        {
        }
        /**
         * Returns the post title for a given post or a placeholder if no title exists
         *
         * @param int $source_element_id
         *
         * @return string
         */
        private function get_element_title($source_element_id)
        {
        }
        private function init_post_data()
        {
        }
        /**
         * Returns the id of the master post in case the currently edited post is a duplicate.
         *
         * @return int|bool|false
         */
        private function is_a_duplicate()
        {
        }
        private function set_post(&$post)
        {
        }
        /**
         * Returns the languages for which a post is missing translations and can be translated to
         *
         * @param WP_Post $post
         *
         * @return string[] language codes
         */
        private function get_allowed_target_langs($post)
        {
        }
        private function init_trid_and_selected_language()
        {
        }
        private function init_source_element_data()
        {
        }
        /**
         * @return bool|int|mixed|void
         */
        private function get_selected_priority()
        {
        }
    }
    class WPML_Sync_Custom_Field_Note extends \WPML_SP_User
    {
        /**
         * Prints and admins notice if custom fields where copied to a new post.
         *
         * @param string $source_lang
         * @param int[]  $translations
         */
        public function print_sync_copy_custom_field_note($source_lang, $translations)
        {
        }
        /**
         * @param string $source_lang
         * @param array  $translations
         *
         * @return array
         */
        private function get_copied_custom_fields($source_lang, $translations)
        {
        }
    }
    class WPML_Meta_Boxes_Post_Edit_Ajax implements \IWPML_Action
    {
        const ACTION_GET_META_BOXES = 'wpml_get_meta_boxes_html';
        const ACTION_GET_ADMIN_LS = 'wpml_get_admin_ls_links';
        const ACTION_DUPLICATE = 'make_duplicates';
        private $meta_boxes_post_edit_html;
        private $translation_management;
        private $admin_language_switcher;
        public function __construct(\WPML_Meta_Boxes_Post_Edit_HTML $meta_boxes_post_edit_html, \TranslationManagement $iclTranslationManagement, \WPML_Admin_Language_Switcher $admin_language_switcher)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param string $hook
         */
        public function enqueue_scripts($hook)
        {
        }
        public function render_meta_boxes_html()
        {
        }
        public function get_admin_ls_links()
        {
        }
        /**
         * @param bool $is_edit_page
         *
         * @return bool
         */
        public function force_post_edit_when_refreshing_meta_boxes($is_edit_page)
        {
        }
        public function duplicate_post()
        {
        }
        /**
         * @param string $action
         * @return bool
         */
        private function is_valid_request($action)
        {
        }
    }
    class WPML_Post_Status_Display_Factory
    {
        /** @var SitePress $sitepress */
        private $sitepress;
        public function __construct(\SitePress $sitepress = \null)
        {
        }
        public function create()
        {
        }
    }
    class WPML_TM_Menus_Management extends \WPML_TM_Menus
    {
        const SKIP_TM_WIZARD_META_KEY = 'wpml_skip_tm_wizard';
        /** @var IWPML_Template_Service $template_service */
        private $template_service;
        /** @var WPML_Translation_Manager_Records $manager_records */
        private $manager_records;
        /** @var WPML_Translator_Records $translator_records */
        private $translator_records;
        private $active_languages;
        private $translatable_types;
        private $current_language;
        private $filter_post_status;
        private $filter_translation_type;
        private $post_statuses;
        private $selected_languages;
        private $source_language;
        /** @var \WPML_TM_Translation_Priorities */
        private $translation_priorities;
        private $dashboard_title_sort_link;
        private $dashboard_date_sort_link;
        private $documents;
        private $selected_posts = array();
        private $translation_filter;
        private $found_documents;
        /**
         * @var \Mockery\MockInterface
         */
        private $admin_sections;
        public function __construct(\IWPML_Template_Service $template_service, \WPML_Translation_Manager_Records $manager_records, \WPML_Translator_Records $translator_records)
        {
        }
        protected function render_main()
        {
        }
        /**
         * It builds all the sections.
         */
        protected function build_tab_items()
        {
        }
        /**
         * It reorders all items based on their `order` key as well as the order (index) they were added.
         */
        private function reorder_items()
        {
        }
        private function build_dashboard_item()
        {
        }
        public function build_content_dashboard()
        {
        }
        /**
         * Used only by unit tests at the moment
         */
        private function build_dashboard_data()
        {
        }
        private function build_dashboard_filter_arguments()
        {
        }
        private function build_dashboard_documents()
        {
        }
        /**
         * @return bool
         */
        private function there_are_hidden_posts()
        {
        }
        private function display_hidden_posts_message()
        {
        }
        private function build_content_dashboard_remote_translations_controls()
        {
        }
        private function build_content_dashboard_results()
        {
        }
        private function build_content_dashboard_documents()
        {
        }
        private function get_translate_tooltip_attributes()
        {
        }
        private function get_translate_tooltip_text()
        {
        }
        private function build_content_dashboard_documents_options()
        {
        }
        private function build_content_dashboard_documents_head_footer_cells()
        {
        }
        private function build_content_dashboard_documents_body()
        {
        }
        /**
         * @return bool
         */
        private function current_user_can_manage_translations()
        {
        }
        private function build_content_dashboard_documents_sorting_link($url, $label, $filter_argument)
        {
        }
        private function build_basket_item()
        {
        }
        /**
         * @param int $basket_items_count
         *
         * @return string
         */
        private function build_basket_item_caption($basket_items_count = 0)
        {
        }
        public function build_content_basket()
        {
        }
        private function build_translation_options()
        {
        }
        public function get_translators_dropdown($lang_code)
        {
        }
        private function build_translation_jobs_item()
        {
        }
        public function build_content_translation_jobs()
        {
        }
        private function build_tp_com_log_item()
        {
        }
        public function build_tp_com_log()
        {
        }
        public function get_dashboard_documents()
        {
        }
        public function build_content_dashboard_filter()
        {
        }
        private function build_external_types()
        {
        }
        /**
         * @param array $post_types
         *
         * @since 2.6.0
         *
         * @return array
         */
        public function exclude_attachments($post_types)
        {
        }
        protected function get_page_slug()
        {
        }
        protected function get_default_tab()
        {
        }
        /**
         * @return bool|\TranslationProxy_Service|\WP_Error
         */
        private function is_translation_service_enabled()
        {
        }
        /**
         * @return string
         */
        private function get_translation_roles_link($text)
        {
        }
        /**
         * @return string
         */
        private function get_translation_services_link($text)
        {
        }
        private function get_tm_menu_link($section, $text)
        {
        }
    }
    class WPML_Menu_Sync_Display
    {
        private $menu_id;
        /** @var ICLMenusSync $icl_ms*/
        private $icl_ms;
        private $labels;
        public function __construct($menu_id, $icl_ms)
        {
        }
        private function print_label_missing_text($icl_menus_sync, $menu_id)
        {
        }
        public function print_sync_field($index)
        {
        }
        private function get_action_label($index, $item_name, $item_id)
        {
        }
        private function get_additional_data($index, $name)
        {
        }
        private function get_item_name($index, $name)
        {
        }
        private function hierarchical_prefix($index, $item_id)
        {
        }
    }
    class WPMLCpi
    {
        // supported plugins
        static $wpml_cpi_plugins = array('wp-super-cache/wp-cache.php' => 'WP_CPI_WP_Super_Cache');
        private $plugin_cp_class;
        // plugin compatibility package class name
        private $settings;
        function __construct()
        {
        }
        function init()
        {
        }
        private function get_raw_post_data()
        {
        }
        function validate_settings()
        {
        }
        function save_settings()
        {
        }
        function ajx_calls($call, $data)
        {
        }
        function menu()
        {
        }
        function icl_save_settings_cb($settings)
        {
        }
        function call_cache_clear($do_clear = \false)
        {
        }
    }
}
namespace WPML\TM\Templates\Notices {
    class AteLocked
    {
        public function renderUser($model)
        {
        }
        public function renderAdmin($model)
        {
        }
    }
}
namespace {
    /**
     * Wrapper class for basic PHP functions
     */
    class WPML_PHP_Functions
    {
        /**
         * Wrapper around PHP constant defined
         *
         * @param string $constant_name
         *
         * @return bool
         */
        public function defined($constant_name)
        {
        }
        /**
         * Wrapper around PHP constant lookup
         *
         * @param string $constant_name
         *
         * @return string|int
         */
        public function constant($constant_name)
        {
        }
        /**
         * @param string $function_name The function name, as a string.
         *
         * @return bool true if <i>function_name</i> exists and is a function, false otherwise.
         * This function will return false for constructs, such as <b>include_once</b> and <b>echo</b>.
         * @return bool
         */
        public function function_exists($function_name)
        {
        }
        /**
         * @param string $class_name The class name. The name is matched in a case-insensitive manner.
         * @param bool   $autoload   [optional] Whether or not to call &link.autoload; by default.
         *
         * @return bool true if <i>class_name</i> is a defined class, false otherwise.
         * @return bool
         */
        public function class_exists($class_name, $autoload = \true)
        {
        }
        /**
         * @param string $name The extension name
         *
         * @return bool true if the extension identified by <i>name</i> is loaded, false otherwise.
         */
        public function extension_loaded($name)
        {
        }
        /**
         * @param string $string
         *
         * @return string
         */
        public function mb_strtolower($string)
        {
        }
        /**
         * Wrapper for \phpversion()
         *
         * * @param string $extension (optional)
         *
         * @return string
         */
        public function phpversion($extension = \null)
        {
        }
        /**
         * Compares two "PHP-standardized" version number strings
         *
         * @see \WPML_WP_API::version_compare
         *
         * @param string $version1
         * @param string $version2
         * @param null   $operator
         *
         * @return mixed
         */
        public function version_compare($version1, $version2, $operator = \null)
        {
        }
        /**
         * @param array $array
         * @param int   $sort_flags
         *
         * @return array
         */
        public function array_unique($array, $sort_flags = \SORT_REGULAR)
        {
        }
        /**
         * @param string $message
         * @param int    $message_type
         * @param string $destination
         * @param string $extra_headers
         *
         * @return bool
         */
        public function error_log($message, $message_type = \null, $destination = \null, $extra_headers = \null)
        {
        }
        public function exit_php()
        {
        }
    }
    interface IWPML_WP_Element_Type
    {
        /**
         * @param string $element_name
         *
         * @return mixed
         */
        public function get_wp_element_type_object($element_name);
    }
    class WPML_WP_Post_Type implements \IWPML_WP_Element_Type
    {
        /**
         * @param string $post_type
         *
         * @return null|WP_Post_Type
         */
        public function get_wp_element_type_object($post_type)
        {
        }
    }
    class WPML_WP_API extends \WPML_PHP_Functions
    {
        /**
         * @param string $file
         * @param string $filename
         *
         * @return false | string
         */
        public function get_file_mime_type($file, $filename)
        {
        }
        /**
         * Wrapper for \get_option
         *
         * @param string     $option
         * @param bool|false $default
         *
         * @return mixed
         */
        public function get_option($option, $default = \false)
        {
        }
        public function is_url($value)
        {
        }
        public function get_transient($transient)
        {
        }
        public function set_transient($transient, $value, $expiration = 0)
        {
        }
        /**
         * @param string      $option
         * @param mixed       $value
         * @param string|bool $autoload
         *
         * @return bool False if value was not updated and true if value was updated.
         */
        public function update_option($option, $value, $autoload = \null)
        {
        }
        /**
         * @param string|int|WP_Post $ID Optional. Post ID or post object. Default empty.
         *
         * @return false|string
         */
        public function get_post_status($ID = '')
        {
        }
        /**
         * Wrapper for \get_term_link
         *
         * @param  object|int|string $term
         * @param string            $taxonomy
         *
         * @return string|WP_Error
         */
        public function get_term_link($term, $taxonomy = '')
        {
        }
        /**
         *  Wrapper for \get_term_by
         *
         * @param string     $field
         * @param string|int $value
         * @param string     $taxonomy
         * @param string     $output
         * @param string     $filter
         *
         * @return bool|WP_Term
         */
        public function get_term_by($field, $value, $taxonomy = '', $output = \OBJECT, $filter = 'raw')
        {
        }
        /**
         * Wrapper for \add_submenu_page
         *
         * @param string       $parent_slug
         * @param string       $page_title
         * @param string       $menu_title
         * @param string       $capability
         * @param string       $menu_slug
         * @param array|string $function
         *
         * @return false|string
         */
        public function add_submenu_page($parent_slug, $page_title, $menu_title, $capability, $menu_slug, $function = '')
        {
        }
        /**
         * @param string       $page_title
         * @param string       $menu_title
         * @param string       $capability
         * @param string       $menu_slug
         * @param array|string $function
         * @param string       $icon_url
         * @param null         $position
         *
         * @return string
         */
        public function add_menu_page($page_title, $menu_title, $capability, $menu_slug, $function = '', $icon_url = '', $position = \null)
        {
        }
        /**
         * Wrapper for \get_post_type_archive_link
         *
         * @param string $post_type
         *
         * @return string
         */
        public function get_post_type_archive_link($post_type)
        {
        }
        /**
         * Wrapper for \get_edit_post_link
         *
         * @param int    $id
         * @param string $context
         *
         * @return null|string|void
         */
        public function get_edit_post_link($id = 0, $context = 'display')
        {
        }
        /**
         * Wrapper for get_the_title
         *
         * @param int|WP_Post $post
         *
         * @return string
         */
        public function get_the_title($post)
        {
        }
        /**
         * Wrapper for \get_day_link
         *
         * @param int $year
         * @param int $month
         * @param int $day
         *
         * @return string
         */
        public function get_day_link($year, $month, $day)
        {
        }
        /**
         * Wrapper for \get_month_link
         *
         * @param int $year
         * @param int $month
         *
         * @return string
         */
        public function get_month_link($year, $month)
        {
        }
        /**
         * Wrapper for \get_year_link
         *
         * @param int $year
         *
         * @return string
         */
        public function get_year_link($year)
        {
        }
        /**
         * Wrapper for \get_author_posts_url
         *
         * @param int    $author_id
         * @param string $author_nicename
         *
         * @return string
         */
        public function get_author_posts_url($author_id, $author_nicename = '')
        {
        }
        /**
         * Wrapper for \current_user_can
         *
         * @param string $capability
         *
         * @return bool
         */
        public function current_user_can($capability)
        {
        }
        /**
         * @param int    $user_id
         * @param string $key
         * @param bool   $single
         *
         * @return mixed
         */
        public function get_user_meta($user_id, $key = '', $single = \false)
        {
        }
        /**
         * Wrapper for \get_post_type
         *
         * @param null|int|WP_Post $post
         *
         * @return false|string
         */
        public function get_post_type($post = \null)
        {
        }
        public function is_archive()
        {
        }
        public function is_front_page()
        {
        }
        public function is_home()
        {
        }
        /**
         * @param int|string|array $page Optional. Page ID, title, slug, or array of such. Default empty.
         *
         * @return bool
         */
        public function is_page($page = '')
        {
        }
        public function is_paged()
        {
        }
        /**
         * @param string $post
         *
         * @return int|string|array $post Optional. Post ID, title, slug, or array of such. Default empty.
         */
        public function is_single($post = '')
        {
        }
        /**
         * @param string|array $post_types
         *
         * @return bool
         */
        public function is_singular($post_types = '')
        {
        }
        /**
         * @param int|WP_User $user
         * @param string      $capability
         *
         * @return bool
         */
        public function user_can($user, $capability)
        {
        }
        /**
         * Wrapper for add_filter
         *
         * @param string   $tag
         * @param callable $function_to_add
         * @param int      $priority
         * @param int      $accepted_args
         *
         * @return bool|mixed|true|void
         */
        public function add_filter($tag, $function_to_add, $priority = 10, $accepted_args = 1)
        {
        }
        /**
         * Wrapper for remove_filter
         *
         * @param string   $tag
         * @param callable $function_to_remove
         * @param int      $priority
         *
         * @return bool
         */
        public function remove_filter($tag, $function_to_remove, $priority = 10)
        {
        }
        /**
         * Wrapper for current_filter
         */
        public function current_filter()
        {
        }
        /**
         * @param null|string $tab
         * @param null|string $hash
         *
         * @return string
         */
        public function get_tm_url($tab = \null, $hash = \null)
        {
        }
        /**
         * Wrapper for \is_admin()
         *
         * @return bool
         */
        public function is_admin()
        {
        }
        public function is_jobs_tab()
        {
        }
        /**
         * @param string|null $tab
         * @param string|null $page_type
         *
         * @return bool
         */
        public function is_tm_page($tab = \null, $page_type = 'management')
        {
        }
        public function is_translation_queue_page()
        {
        }
        public function is_string_translation_page()
        {
        }
        public function is_support_page()
        {
        }
        public function is_troubleshooting_page()
        {
        }
        /**
         * @param string $page
         *
         * @return bool
         */
        public function is_core_page($page = '')
        {
        }
        public function is_back_end()
        {
        }
        public function is_front_end()
        {
        }
        public function is_ajax()
        {
        }
        public function is_cron_job()
        {
        }
        public function is_heartbeat()
        {
        }
        public function is_post_edit_page()
        {
        }
        public function is_new_post_page()
        {
        }
        public function is_term_edit_page()
        {
        }
        public function is_customize_page()
        {
        }
        public function is_comments_post_page()
        {
        }
        public function is_plugins_page()
        {
        }
        public function is_themes_page()
        {
        }
        /**
         * Wrapper for \is_feed that returns false if called before the loop
         *
         * @param string $feeds
         *
         * @return bool
         */
        public function is_feed($feeds = '')
        {
        }
        /**
         * Wrapper for \wp_update_term_count
         *
         * @param int[]      $terms given by their term_taxonomy_ids
         * @param string     $taxonomy
         * @param bool|false $do_deferred
         *
         * @return bool
         */
        public function wp_update_term_count($terms, $taxonomy, $do_deferred = \false)
        {
        }
        /**
         * Wrapper for \get_taxonomy
         *
         * @param string $taxonomy
         *
         * @return bool|object
         */
        public function get_taxonomy($taxonomy)
        {
        }
        /**
         * Wrapper for \wp_set_object_terms
         *
         * @param int              $object_id The object to relate to.
         * @param array|int|string $terms     A single term slug, single term id, or array of either term slugs or ids.
         *                                    Will replace all existing related terms in this taxonomy.
         * @param string           $taxonomy  The context in which to relate the term to the object.
         * @param bool             $append    Optional. If false will delete difference of terms. Default false.
         *
         * @return array|WP_Error Affected Term IDs.
         */
        public function wp_set_object_terms($object_id, $terms, $taxonomy, $append = \false)
        {
        }
        /**
         * Wrapper for \get_post_types
         *
         * @param array  $args
         * @param string $output
         * @param string $operator
         *
         * @return array
         */
        public function get_post_types($args = array(), $output = 'names', $operator = 'and')
        {
        }
        public function wp_send_json($response)
        {
        }
        public function wp_send_json_success($data = \null)
        {
        }
        public function wp_send_json_error($data = \null)
        {
        }
        /**
         * Wrapper for \get_current_user_id
         *
         * @return int
         */
        public function get_current_user_id()
        {
        }
        /**
         * Wrapper for \get_post
         *
         * @param null|int|WP_Post $post
         * @param string           $output
         * @param string           $filter
         *
         * @return array|null|WP_Post
         */
        public function get_post($post = \null, $output = \OBJECT, $filter = 'raw')
        {
        }
        /**
         * Wrapper for \get_post_meta
         *
         * @param int    $post_id Post ID.
         * @param string $key Optional. The meta key to retrieve. By default, returns
         *                        data for all keys. Default empty.
         * @param bool   $single Optional. Whether to return a single value. Default false.
         *
         * @return mixed Will be an array if $single is false. Will be value of meta data
         *               field if $single is true.
         */
        public function get_post_meta($post_id, $key = '', $single = \false)
        {
        }
        /**
         * Wrapper for \update_post_meta
         *
         * @param int    $post_id Post ID.
         * @param string $key
         * @param mixed  $value
         * @param mixed  $prev_value
         *
         * @return int|bool
         */
        public function update_post_meta($post_id, $key, $value, $prev_value = '')
        {
        }
        /**
         * Wrapper for add_post_meta
         *
         * @param int    $post_id    Post ID.
         * @param string $meta_key   Metadata name.
         * @param mixed  $meta_value Metadata value. Must be serializable if non-scalar.
         * @param bool   $unique     Optional. Whether the same key should not be added.
         *                           Default false.
         * @return int|false Meta ID on success, false on failure.
         */
        public function add_post_meta($post_id, $meta_key, $meta_value, $unique = \false)
        {
        }
        /**
         * Wrapper for delete_post_meta
         *
         * @param int    $post_id    Post ID.
         * @param string $meta_key   Metadata name.
         * @param mixed  $meta_value Optional. Metadata value. Must be serializable if
         *                           non-scalar. Default empty.
         * @return bool True on success, false on failure.
         */
        public function delete_post_meta($post_id, $meta_key, $meta_value = '')
        {
        }
        /**
         * Wrapper for \get_term_meta
         *
         * @param int    $term_id
         * @param string $key
         * @param bool   $single
         *
         * @return mixed
         */
        public function get_term_meta($term_id, $key = '', $single = \false)
        {
        }
        /**
         * Wrapper for \get_permalink
         *
         * @param int        $id
         * @param bool|false $leavename
         *
         * @return bool|string
         */
        public function get_permalink($id = 0, $leavename = \false)
        {
        }
        /**
         * Wrapper for \wp_mail
         *
         * @param string       $to
         * @param string       $subject
         * @param string       $message
         * @param string|array $headers
         * @param array|array  $attachments
         *
         * @return bool
         */
        public function wp_mail($to, $subject, $message, $headers = '', $attachments = array())
        {
        }
        /**
         * Wrapper for \get_post_custom
         *
         * @param int $post_id
         *
         * @return array
         */
        public function get_post_custom($post_id = 0)
        {
        }
        public function is_dashboard_tab()
        {
        }
        public function wp_safe_redirect($redir_target, $status = 302)
        {
        }
        /**
         * Wrapper for \load_textdomain
         *
         * @param string $domain
         * @param string $mofile
         *
         * @return bool
         */
        public function load_textdomain($domain, $mofile)
        {
        }
        /**
         * Wrapper for \get_home_url
         *
         * @param null|int    $blog_id
         * @param string      $path
         * @param null|string $scheme
         *
         * @return string
         */
        public function get_home_url($blog_id = \null, $path = '', $scheme = \null)
        {
        }
        /**
         * Wrapper for \get_site_url
         *
         * @param null|int    $blog_id
         * @param string      $path
         * @param null|string $scheme
         *
         * @return string
         */
        public function get_site_url($blog_id = \null, $path = '', $scheme = \null)
        {
        }
        /**
         * Wrapper for \is_multisite
         *
         * @return bool
         */
        public function is_multisite()
        {
        }
        /**
         * Wrapper for \is_main_site
         *
         * @param null|int $site_id
         *
         * @return bool
         */
        public function is_main_site($site_id = \null)
        {
        }
        /**
         * Wrapper for \ms_is_switched
         *
         * @return bool
         */
        public function ms_is_switched()
        {
        }
        /**
         * Wrapper for \get_current_blog_id
         *
         * @return int
         */
        public function get_current_blog_id()
        {
        }
        /**
         * Wrapper for wp_get_post_terms
         *
         * @param int    $post_id
         * @param string $taxonomy
         * @param array  $args
         *
         * @return array|WP_Error
         */
        public function wp_get_post_terms($post_id = 0, $taxonomy = 'post_tag', $args = array())
        {
        }
        /**
         * Wrapper for get_taxonomies
         *
         * @param array  $args
         * @param string $output
         * @param string $operator
         *
         * @return array
         */
        public function get_taxonomies($args = array(), $output = 'names', $operator = 'and')
        {
        }
        /**
         * Wrapper for \wp_get_theme
         *
         * @param string $stylesheet
         * @param string $theme_root
         *
         * @return WP_Theme
         */
        public function wp_get_theme($stylesheet = \null, $theme_root = \null)
        {
        }
        /**
         * Wrapper for \wp_get_theme->get('Name')
         *
         * @return string
         */
        public function get_theme_name()
        {
        }
        /**
         * Wrapper for \wp_get_theme->parent_theme
         *
         * @return string
         */
        public function get_theme_parent_name()
        {
        }
        /**
         * Wrapper for \wp_get_theme->get('URI')
         *
         * @return string
         */
        public function get_theme_URI()
        {
        }
        /**
         * Wrapper for \wp_get_theme->get('Author')
         *
         * @return string
         */
        public function get_theme_author()
        {
        }
        /**
         * Wrapper for \wp_get_theme->get('AuthorURI')
         *
         * @return string
         */
        public function get_theme_authorURI()
        {
        }
        /**
         * Wrapper for \wp_get_theme->get('Template')
         *
         * @return string
         */
        public function get_theme_template()
        {
        }
        /**
         * Wrapper for \wp_get_theme->get('Version')
         *
         * @return string
         */
        public function get_theme_version()
        {
        }
        /**
         * Wrapper for \wp_get_theme->get('TextDomain')
         *
         * @return string
         */
        public function get_theme_textdomain()
        {
        }
        /**
         * Wrapper for \wp_get_theme->get('DomainPath')
         *
         * @return string
         */
        public function get_theme_domainpath()
        {
        }
        /**
         * Wrapper for \get_plugins()
         *
         * @return array
         */
        public function get_plugins()
        {
        }
        /**
         * Wrapper for \get_post_custom_keys
         *
         * @param int $post_id
         *
         * @return array|void
         */
        public function get_post_custom_keys($post_id)
        {
        }
        /**
         * Wrapper for \get_bloginfo
         *
         * @param string $show (optional)
         * @param string $filter (optional)
         *
         * @return string
         */
        public function get_bloginfo($show = '', $filter = 'raw')
        {
        }
        /**
         * Compare version in their "naked" form
         *
         * @see \WPML_WP_API::get_naked_version
         * @see \WPML_WP_API::version_compare
         * @see \version_compare
         *
         * @param string $version1
         * @param string $version2
         * @param null   $operator
         *
         * @return mixed
         */
        public function version_compare_naked($version1, $version2, $operator = \null)
        {
        }
        /**
         * Returns only the first 3 numeric elements of a version (assuming to use MAJOR.MINOR.PATCH
         *
         * @param string $version
         *
         * @return string
         */
        public function get_naked_version($version)
        {
        }
        public function has_filter($tag, $function_to_check = \false)
        {
        }
        public function add_action($tag, $function_to_add, $priority = 10, $accepted_args = 1)
        {
        }
        public function get_current_screen()
        {
        }
        /**
         * Wrapper for \get_query_var
         *
         * @param string $var
         * @param mixed  $default
         *
         * @return mixed
         */
        public function get_query_var($var, $default = '')
        {
        }
        /**
         * Wrapper for \get_queried_object
         */
        public function get_queried_object()
        {
        }
        public function get_raw_post_data()
        {
        }
        public function wp_verify_nonce($nonce, $action = -1)
        {
        }
        /**
         * @param string $action
         *
         * @return int The number of times action hook $tag is fired.
         */
        public function did_action($action)
        {
        }
        /**
         * @return string
         */
        public function current_action()
        {
        }
        public function get_wp_post_types_global()
        {
        }
        /**
         * @return wp_xmlrpc_server
         */
        public function get_wp_xmlrpc_server()
        {
        }
        /**
         * Wrapper for $wp_taxonomies global variable
         */
        public function get_wp_taxonomies()
        {
        }
        /**
         * Wrapper for get_category_link function
         *
         * @param int $category_id
         *
         * @return string
         */
        public function get_category_link($category_id)
        {
        }
        /**
         * Wrapper for is_wp_error function
         *
         * @param mixed $thing
         *
         * @return bool
         */
        public function is_wp_error($thing)
        {
        }
        /**
         * @param int  $limit
         * @param bool $provide_object
         * @param bool $ignore_args
         *
         * @return array
         */
        public function get_backtrace($limit = 0, $provide_object = \false, $ignore_args = \true)
        {
        }
        /**
         * @return WP_Filesystem_Direct
         */
        public function get_wp_filesystem_direct()
        {
        }
        /**
         * @return WPML_Notices
         */
        public function get_admin_notices()
        {
        }
        /**
         * @param Twig_LoaderInterface $loader
         * @param array                $environment_args
         *
         * @return Twig_Environment
         */
        public function get_twig_environment($loader, $environment_args)
        {
        }
        /**
         * @param array $template_paths
         *
         * @return Twig_Loader_Filesystem|\WPML\Core\Twig_LoaderInterface
         */
        public function get_twig_loader_filesystem($template_paths)
        {
        }
        /**
         * @return \WPML\Core\Twig_Loader_String|\WPML\Core\Twig_LoaderInterface
         */
        public function get_twig_loader_string()
        {
        }
        public function is_a_REST_request()
        {
        }
    }
    /**
     * Created by PhpStorm.
     * User: bruce
     * Date: 30/10/17
     * Time: 9:09 PM
     */
    class WPML_WP_Taxonomy implements \IWPML_WP_Element_Type
    {
        public static function get_linked_post_types($taxonomy)
        {
        }
        /**
         * @param string $taxonomy
         *
         * @return false|WP_Taxonomy
         */
        public function get_wp_element_type_object($taxonomy)
        {
        }
    }
    class WPML_WP_Roles
    {
        const ROLES_ADMINISTRATOR = 'administrator';
        const ROLES_EDITOR = 'editor';
        const ROLES_CONTRIBUTOR = 'contributor';
        const ROLES_SUBSCRIBER = 'subscriber';
        const EDITOR_LEVEL = 'level_7';
        const CONTRIBUTOR_LEVEL = 'level_1';
        const SUBSCRIBER_LEVEL = 'level_0';
        /**
         * Returns an array of roles which meet the capability level set in \WPML_WP_Roles::EDITOR_LEVEL.
         *
         * @return array
         */
        public static function get_editor_roles()
        {
        }
        /**
         * Returns an array of roles which meet the capability level set in \WPML_WP_Roles::CONTRIBUTOR_LEVEL.
         *
         * @return array
         */
        public static function get_contributor_roles()
        {
        }
        /**
         * Returns an array of roles wich meet the capability level set in \WPML_WP_Roles::SUBSCRIBER_LEVEL.
         *
         * @return array
         */
        public static function get_subscriber_roles()
        {
        }
        /**
         * @return array
         */
        public static function get_roles_up_to_user_level(\WP_User $user)
        {
        }
        /**
         * @param  WP_User $user
         *
         * @return int
         */
        public static function get_user_max_level(\WP_User $user)
        {
        }
        public static function get_highest_level(array $capabilities)
        {
        }
        /**
         * It returns a filtered array of roles.
         *
         * @param  string      $level  The capability level that the role must meet.
         * @param  null|string $default  The role ID to use as a default.
         *
         * @return array
         */
        private static function get_roles_for_level($level, $default = \null)
        {
        }
        private static function get_roles_with_max_level($level, $default = \null)
        {
        }
        private static function create_build_role_entity($level, $default = \null)
        {
        }
        private static function create_is_default($level, $default = \null)
        {
        }
    }
}
namespace WPML\Core {
    interface ISitePress
    {
    }
}
namespace {
    class WPML_Post_Types extends \WPML_SP_User
    {
        public function get_translatable()
        {
        }
        public function get_readonly()
        {
        }
        public function get_translatable_and_readonly()
        {
        }
    }
    /**
     * Created by PhpStorm.
     * User: bruce
     * Date: 4/10/17
     * Time: 10:15 AM
     */
    class WPML_Translation_Modes
    {
        public function is_translatable_mode($mode)
        {
        }
        public function get_options_for_post_type($post_type_label)
        {
        }
        public function get_options()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Requirements_Notification
    {
        /**
         * @var \IWPML_Template_Service
         */
        private $template_service;
        /**
         * WPML_Requirements_Notification constructor.
         *
         * @param IWPML_Template_Service $template_service
         */
        public function __construct(\IWPML_Template_Service $template_service)
        {
        }
        public function get_core_message($issues)
        {
        }
        public function get_message($issues, $limit = 0)
        {
        }
        private function get_shared_message($strings, $issues, $limit = 0)
        {
        }
        public function get_settings($integrations)
        {
        }
        /**
         * @param array $issues
         *
         * @return string
         */
        private function get_product_names($issues)
        {
        }
        /**
         * @param array<string> $items
         *
         * @return string
         */
        private function build_items_in_sentence($items)
        {
        }
    }
}
namespace WPML\Requirements {
    class WordPress
    {
        public static function checkMinimumRequiredVersion()
        {
        }
        public static function displayMissingVersionRequirementNotice()
        {
        }
    }
}
namespace {
    /**
     * @author OnTheGo Systems
     */
    class WPML_Integrations_Requirements
    {
        const NOTICE_GROUP = 'requirements';
        const CORE_REQ_NOTICE_ID = 'core-requirements';
        const MISSING_REQ_NOTICE_ID = 'missing-requirements';
        const EDITOR_NOTICE_ID = 'enable-translation-editor';
        const DOCUMENTATION_LINK = 'https://wpml.org/documentation/translating-your-contents/page-builders/?utm_source=plugin&utm_medium=gui&utm_campaign=wpmlcore';
        const DOCUMENTATION_LINK_BLOCK_EDITOR = 'https://wpml.org/?page_id=2909360&utm_source=wpmlplugin&utm_campaign=gutenberg&utm_medium=translation-editor&utm_term=translating-content-created-using-gutenberg-editor';
        private $core_issues = array();
        private $issues = array();
        private $tm_settings;
        private $should_create_editor_notice = \false;
        private $integrations;
        private $requirements_scripts;
        /** @var SitePress $sitepress */
        private $sitepress;
        /** @var  WPML_Third_Party_Dependencies $third_party_dependencies */
        private $third_party_dependencies;
        /** @var  WPML_Requirements_Notification $requirements_notification */
        private $requirements_notification;
        /**
         * WPML_Integrations_Requirements constructor.
         *
         * @param SitePress                      $sitepress
         * @param WPML_Third_Party_Dependencies  $third_party_dependencies
         * @param WPML_Requirements_Notification $requirements_notification
         * @param array                          $integrations
         */
        public function __construct(\SitePress $sitepress, \WPML_Third_Party_Dependencies $third_party_dependencies = \null, \WPML_Requirements_Notification $requirements_notification = \null, $integrations = \null)
        {
        }
        public function init_hooks()
        {
        }
        public function init()
        {
        }
        private function update_notices()
        {
        }
        private function update_issues()
        {
        }
        private function update_should_create_editor_notice()
        {
        }
        public function set_translation_editor_callback()
        {
        }
        private function is_valid_request()
        {
        }
        private function get_integrations()
        {
        }
        /**
         * @param string $notice_type
         *
         * @return array
         */
        private function get_integrations_names($notice_type)
        {
        }
        /**
         * @return WPML_Requirements_Notification
         */
        private function get_notice_model()
        {
        }
        /**
         * @param WPML_Notice $notice
         */
        private function add_actions_to_notice(\WPML_Notice $notice)
        {
        }
        private function add_actions_to_core_notice(\WPML_Notice $notice)
        {
        }
        /**
         * @param string $type
         *
         * @return bool
         */
        private function has_issues($type)
        {
        }
        /**
         * @param WPML_Notice $notice
         * @param WPML_WP_API $wp_api
         */
        private function add_callbacks(\WPML_Notice $notice, \WPML_WP_API $wp_api)
        {
        }
        /**
         * @param WPML_Requirements_Notification $notice_model
         * @param WPML_Notices                   $wpml_admin_notices
         * @param WPML_WP_API                    $wp_api
         */
        private function add_core_requirements_notice(\WPML_Requirements_Notification $notice_model, \WPML_Notices $wpml_admin_notices, \WPML_WP_API $wp_api)
        {
        }
        /**
         * @param WPML_Requirements_Notification $notice_model
         * @param WPML_Notices                   $wpml_admin_notices
         * @param WPML_WP_API                    $wp_api
         */
        private function add_requirements_notice(\WPML_Requirements_Notification $notice_model, \WPML_Notices $wpml_admin_notices, \WPML_WP_API $wp_api)
        {
        }
        /**
         * @param WPML_Requirements_Notification $notice_model
         * @param WPML_Notices                   $wpml_admin_notices
         * @param WPML_WP_API                    $wp_api
         */
        private function add_tm_editor_notice(\WPML_Requirements_Notification $notice_model, \WPML_Notices $wpml_admin_notices, \WPML_WP_API $wp_api)
        {
        }
        /**
         * @return WPML_Integrations_Requirements_Scripts
         */
        private function get_requirements_scripts()
        {
        }
        /**
         * @return WPML_Third_Party_Dependencies
         */
        private function get_third_party_dependencies()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Requirements
    {
        private $active_plugins = array();
        private $disabled_plugins = array();
        private $missing_requirements = array();
        private $plugins = array('wpml-media-translation' => array('version' => '2.1.24', 'name' => 'WPML Media Translation'), 'wpml-string-translation' => array('version' => '2.5.2', 'name' => 'WPML String Translation'), 'wpml-translation-management' => array('version' => '2.2.7', 'name' => 'WPML Translation Management'), 'woocommerce-multilingual' => array('version' => '4.7.0', 'name' => 'WooCommerce Multilingual', 'url' => 'https://wpml.org/download/woocommerce-multilingual/?utm_source=plugin&utm_medium=gui&utm_campaign=wpmlcore'), 'gravityforms-multilingual' => array('name' => 'GravityForms Multilingual', 'url' => 'https://wpml.org/download/gravityforms-multilingual/?utm_source=plugin&utm_medium=gui&utm_campaign=wpmlcore'), 'buddypress-multilingual' => array('name' => 'BuddyPress Multilingual', 'url' => 'https://wpml.org/download/buddypress-multilingual/?utm_source=plugin&utm_medium=gui&utm_campaign=wpmlcore'), 'wp-seo-multilingual' => array('name' => 'Yoast SEO Multilingual', 'url' => 'https://wpml.org/download/yoast-seo-multilingual/?utm_source=plugin&utm_medium=gui&utm_campaign=wpmlcore'));
        private $modules = array(\WPML_Integrations::SCOPE_WP_CORE => array('url' => 'https://wpml.org/?page_id=2909360&utm_source=wpmlplugin&utm_campaign=gutenberg&utm_medium=translation-editor&utm_term=translating-content-created-using-gutenberg-editor', 'requirements_class' => 'WPML_Integration_Requirements_Block_Editor'), 'page-builders' => array('url' => 'https://wpml.org/?page_id=1129854', 'requirements' => array('wpml-string-translation')), 'gravityforms' => array('url' => '#', 'requirements' => array('gravityforms-multilingual', 'wpml-string-translation')), 'buddypress' => array('url' => '#', 'requirements' => array('buddypress-multilingual')), 'bb-plugin' => array('url' => '#', 'requirements' => array('wpml-string-translation')), 'elementor-plugin' => array('url' => '#', 'requirements' => array('wpml-string-translation')), 'wordpress-seo' => array('url' => '#', 'requirements' => array('wp-seo-multilingual')));
        /**
         * WPML_Requirements constructor.
         */
        public function __construct()
        {
        }
        public function is_plugin_active($plugin_slug)
        {
        }
        /**
         * @param array $plugin_data
         *
         * @return string|null
         */
        public function get_plugin_slug(array $plugin_data)
        {
        }
        /**
         * @return array
         */
        public function get_missing_requirements()
        {
        }
        /**
         * @param string $type
         * @param string $slug
         *
         * @return array
         */
        public function get_requirements($type, $slug)
        {
        }
        /**
         * @param string $slug
         *
         * @return array
         */
        function get_plugin_data($slug)
        {
        }
        /**
         * @param string $type
         * @param string $slug
         *
         * @return array
         */
        private function get_missing_plugins_for_type($type, $slug)
        {
        }
        /**
         * @return array
         */
        private function get_components()
        {
        }
        /**
         * @param string $type
         * @param string $slug
         *
         * @return array
         */
        private function get_components_by_type($type, $slug)
        {
        }
        /**
         * @param string $type
         * @param string $slug
         *
         * @return array
         */
        private function get_components_requirements_by_type($type, $slug)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Third_Party_Dependencies
    {
        private $integrations;
        private $requirements;
        /**
         * WPML_Third_Party_Dependencies constructor.
         *
         * @param WPML_Integrations $integrations
         * @param WPML_Requirements $requirements
         */
        public function __construct(\WPML_Integrations $integrations, \WPML_Requirements $requirements)
        {
        }
        public function get_issues($scope = \null)
        {
        }
        private function get_components($scope)
        {
        }
        private function get_issue($component_data, $slug)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Notice
    {
        private $display_callbacks = array();
        private $id;
        private $text;
        private $collapsed_text;
        private $group = 'default';
        private $restricted_to_user_ids = array();
        private $actions = array();
        /**
         * @see \WPML_Notice::set_css_class_types
         * @var array
         */
        private $css_class_types = array();
        private $css_classes = array();
        private $dismissible = \false;
        private $exclude_from_pages = array();
        private $hideable = \false;
        private $collapsable = \false;
        private $restrict_to_pages = array();
        private $restrict_to_page_prefixes = array();
        private $restrict_to_screen_ids = array();
        private $hide_if_notice_exists = \null;
        private $dismissible_for_different_text = \true;
        private $default_group_name = 'default';
        private $capabilities = array();
        private $dismiss_reset = \false;
        /*
         * @var bool
         * @since 4.1.0
         */
        private $flash = \false;
        /**
         * @var string
         */
        private $nonce_action;
        /** @var bool */
        private $text_only = \false;
        /**
         * WPML_Admin_Notification constructor.
         *
         * @param int|string $id
         * @param string     $text
         * @param string     $group
         */
        public function __construct($id, $text, $group = 'default')
        {
        }
        public function add_action(\WPML_Notice_Action $action)
        {
        }
        public function add_exclude_from_page($page)
        {
        }
        public function add_restrict_to_page($page)
        {
        }
        /** @param int $user_id */
        public function add_user_restriction($user_id)
        {
        }
        /** @param int $user_id */
        public function remove_user_restriction($user_id)
        {
        }
        /** @return array */
        public function get_restricted_user_ids()
        {
        }
        /** @return bool */
        public function is_user_restricted()
        {
        }
        /** @return bool */
        public function is_for_current_user()
        {
        }
        /**
         * @return bool
         */
        public function is_user_cap_allowed()
        {
        }
        public function can_be_dismissed()
        {
        }
        public function can_be_dismissed_for_different_text()
        {
        }
        public function can_be_hidden()
        {
        }
        /**
         * @return bool
         */
        public function can_be_collapsed()
        {
        }
        /**
         * As the notice is supposed to be serialized and stored into the DB,
         * the callback should be only a function or a static method.
         *
         * Before to use a callback, please check the existing options with:
         * - add_exclude_from_page
         * - add_restrict_to_page
         * - add_user_restriction
         * - add_capability_check
         *
         * @param callable $callback
         */
        public function add_display_callback($callback)
        {
        }
        public function add_capability_check(array $cap)
        {
        }
        public function get_display_callbacks()
        {
        }
        /**
         * @return array<\WPML_Notice_Action>
         */
        public function get_actions()
        {
        }
        public function get_css_classes()
        {
        }
        /**
         * @param string|array $css_classes
         */
        public function set_css_classes($css_classes)
        {
        }
        public function get_exclude_from_pages()
        {
        }
        /**
         * @return string
         */
        public function get_group()
        {
        }
        /**
         * @return int|string
         */
        public function get_id()
        {
        }
        public function set_restrict_to_page_prefixes(array $page_prefixes)
        {
        }
        /**
         * @return array
         */
        public function get_restrict_to_page_prefixes()
        {
        }
        public function get_restrict_to_pages()
        {
        }
        public function set_restrict_to_screen_ids(array $screens)
        {
        }
        /**
         * @return array
         */
        public function get_restrict_to_screen_ids()
        {
        }
        public function get_nonce_action()
        {
        }
        /**
         * @return string
         */
        public function get_text()
        {
        }
        public function get_css_class_types()
        {
        }
        /**
         * @return string
         */
        public function get_collapsed_text()
        {
        }
        /**
         * Use this to set the look of the notice.
         * WordPress recognize these values:
         * - notice-error
         * - notice-warning
         * - notice-success
         * - notice-info
         * You can use the above values with or without the "notice-" prefix:
         * the prefix will be added automatically in the HTML, if missing.
         *
         * @see https://codex.wordpress.org/Plugin_API/Action_Reference/admin_notices for more details
         *
         * @param string|array $types Accepts either a space separated values string, or an array of values.
         * @return WPML_Notice
         */
        public function set_css_class_types($types)
        {
        }
        /**
         * @param bool $dismissible
         */
        public function set_dismissible($dismissible)
        {
        }
        public function set_exclude_from_pages(array $pages)
        {
        }
        public function set_hide_if_notice_exists($notice_id, $notice_group = \null)
        {
        }
        public function get_hide_if_notice_exists()
        {
        }
        /**
         * @param bool $hideable
         */
        public function set_hideable($hideable)
        {
        }
        /**
         * @param bool $collapsable
         */
        public function set_collapsable($collapsable)
        {
        }
        /**
         * @param string $action
         */
        public function set_nonce_action($action)
        {
        }
        /**
         * @param string $collapsed_text
         */
        public function set_collapsed_text($collapsed_text)
        {
        }
        public function set_restrict_to_pages(array $pages)
        {
        }
        public function reset_dismiss()
        {
        }
        public function must_reset_dismiss()
        {
        }
        public function is_different(\WPML_Notice $other_notice)
        {
        }
        /**
         * Set notice to only display once.
         *
         * @param bool $flash
         *
         * @return WPML_Notice
         * @since 4.1.0
         */
        public function set_flash($flash = \true)
        {
        }
        /**
         * @return bool
         * @since 4.1.0
         */
        public function is_flash()
        {
        }
        /**
         * @return bool
         */
        public function should_be_text_only()
        {
        }
        /**
         * @param bool $text_only
         */
        public function set_text_only($text_only)
        {
        }
        /**
         * @param int|string $id
         * @param string     $text
         * @param string     $group
         *
         * @return WPML_Notice
         */
        public static function make($id, $text, $group = 'default')
        {
        }
    }
    /**
     * Created by PhpStorm.
     * User: bruce
     * Date: 28/08/17
     * Time: 11:54 AM
     */
    class WPML_TM_Editor_Notice extends \WPML_Notice
    {
        public function is_different(\WPML_Notice $other_notice)
        {
        }
        private function strip_nonce_field($text)
        {
        }
    }
    /**
     * WPML_Whip_Requirements class file.
     *
     * @package wpml-core
     */
    /**
     * Class WPML_Whip_Requirements
     */
    class WPML_Whip_Requirements
    {
        /**
         * Add hooks.
         */
        public function add_hooks()
        {
        }
        /**
         * Get host name for message about PHP.
         *
         * @return string
         */
        public function whip_name_of_host()
        {
        }
        /**
         * Get WPML message about PHP.
         *
         * @return string
         */
        public function whip_message_from_host_about_php()
        {
        }
        /**
         * Load Whip.
         */
        public function load_whip()
        {
        }
    }
    interface IWPML_Integration_Requirements_Module
    {
        public function get_requirements();
    }
    class WPML_Integration_Requirements_Block_Editor implements \IWPML_Integration_Requirements_Module
    {
        /** @var WPML_Requirements $requirements */
        private $requirements;
        public function __construct(\WPML_Requirements $requirements)
        {
        }
        public function get_requirements()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Integrations
    {
        const SCOPE_WP_CORE = 'wp-core';
        private $components = array(self::SCOPE_WP_CORE => array('block-editor' => array('name' => 'WordPress Block Editor', 'function' => 'parse_blocks', 'notices-display' => array())), 'page-builders' => array('js_composer' => array('name' => 'Visual Composer', 'constant' => 'WPB_VC_VERSION', 'notices-display' => array('wpml-translation-editor')), 'divi' => array('name' => 'Divi', 'constant' => 'ET_BUILDER_DIR', 'notices-display' => array('wpml-translation-editor')), 'layouts' => array('name' => 'Toolset Layouts', 'constant' => 'WPDDL_VERSION', 'notices-display' => array('wpml-translation-editor')), 'x-theme' => array('name' => 'X Theme', 'constant' => 'X_VERSION', 'notices-display' => array('wpml-translation-editor')), 'enfold' => array('name' => 'Enfold', 'constant' => 'AVIA_FW', 'notices-display' => array('wpml-translation-editor')), 'avada' => array('name' => 'Avada', 'function' => 'Avada', 'notices-display' => array('wpml-translation-editor')), 'oxygen' => array('name' => 'Oxygen', 'constant' => 'CT_VERSION', 'notices-display' => array('wpml-translation-editor'))), 'integrations' => array('bb-plugin' => array('name' => 'Beaver Builder Plugin', 'class' => 'FLBuilderLoader', 'notices-display' => array('wpml-translation-editor')), 'elementor-plugin' => array('name' => 'Elementor', 'class' => '\\Elementor\\Plugin', 'notices-display' => array('wpml-translation-editor'))));
        private $items = array();
        private $wpml_wp_api;
        /**
         * WPML_Integrations constructor.
         *
         * @param WPML_WP_API $wpml_wp_api
         */
        function __construct(\WPML_WP_API $wpml_wp_api)
        {
        }
        private function fetch_items()
        {
        }
        public function get_results()
        {
        }
        /**
         * @param array $data
         *
         * @return bool
         */
        private function component_has_constant(array $data)
        {
        }
        /**
         * @param array $data
         *
         * @return bool
         */
        private function component_has_function(array $data)
        {
        }
        /**
         * @param array $data
         *
         * @return bool
         */
        private function component_has_class(array $data)
        {
        }
        /**
         * @param array $data
         *
         * @return mixed
         */
        private function get_component_name(array $data)
        {
        }
        /**
         * @return array
         */
        private function get_components()
        {
        }
    }
    class WPML_Integrations_Requirements_Scripts
    {
        public function add_translation_editor_notice_hook()
        {
        }
        public function enqueue_translation_editor_notice_script()
        {
        }
        public function add_plugins_activation_hook()
        {
        }
        public function enqueue_plugin_activation_script()
        {
        }
    }
    /**
     * WPML_BBPress_Filters class file.
     *
     * @package WPML\Core
     */
    /**
     * Class WPML_BBPress_Filters
     */
    class WPML_BBPress_Filters
    {
        /**
         * WPML_BBPress_API instance.
         *
         * @var WPML_BBPress_API
         */
        private $wpml_bbpress_api;
        /**
         * WPML_BBPress_Filters constructor.
         *
         * @param WPML_BBPress_API $wpml_bbpress_api WPML_BBPress_API instance.
         */
        public function __construct($wpml_bbpress_api)
        {
        }
        /**
         * Destruct instance.
         */
        public function __destruct()
        {
        }
        /**
         * Add hooks.
         */
        public function add_hooks()
        {
        }
        /**
         * Remove hooks.
         */
        public function remove_hooks()
        {
        }
        /**
         * Author link filter.
         *
         * @param string $link            Author link.
         * @param int    $author_id       Author id.
         * @param string $author_nicename Author nicename.
         *
         * @return mixed
         */
        public function author_link_filter($link, $author_id, $author_nicename)
        {
        }
    }
    class WPML_BBPress_API
    {
        public function bbp_get_user_profile_url($user_id = 0, $user_nicename = '')
        {
        }
    }
}
namespace WPML\Options {
    class Reset implements \IWPML_Backend_Action
    {
        public function add_hooks()
        {
        }
    }
}
namespace {
    /**
     * Class WPML_Multilingual_Options_Array_Helper
     */
    class WPML_Multilingual_Options_Array_Helper
    {
        /**
         * @param array $value1
         * @param array $value2
         *
         * @return array
         */
        public function array_diff_recursive(array $value1, array $value2)
        {
        }
        /**
         * @param array $target
         * @param array $source
         *
         * @return array
         */
        public function recursive_merge(array $target, array $source)
        {
        }
        /**
         * @param array  $haystack
         * @param mixed  $needle
         * @param string $needle_key
         *
         * @return bool
         */
        private function in_array(array $haystack, $needle, $needle_key)
        {
        }
    }
    /**
     * Class WPML_Multilingual_Options
     */
    class WPML_Multilingual_Options
    {
        private $array_helper;
        private $registered_options = array();
        private $sitepress;
        private $utils;
        /**
         * WPML_Multilingual_Options constructor.
         *
         * @param SitePress                              $sitepress
         * @param WPML_Multilingual_Options_Array_Helper $array_helper
         * @param WPML_Multilingual_Options_Utils        $utils
         */
        public function __construct(\SitePress $sitepress, \WPML_Multilingual_Options_Array_Helper $array_helper, \WPML_Multilingual_Options_Utils $utils)
        {
        }
        /**
         * @param string $new_code         New WPML default language code
         * @param string $previous_default Previous WPML default language code
         */
        public function default_language_changed_action($new_code, $previous_default)
        {
        }
        /**
         * @param string $option_name
         */
        public function multilingual_options_action($option_name)
        {
        }
        public function init_hooks()
        {
        }
        /**
         * @param mixed  $value
         * @param string $option_name
         *
         * @return mixed
         */
        public function pre_option_filter($value, $option_name)
        {
        }
        /**
         * @param string $option_name
         * @param string $language
         * @param mixed  $value
         *
         * @return bool
         */
        private function update_cache($option_name, $language, $value)
        {
        }
        /**
         * @param array<mixed>|mixed $new_value
         * @param array<mixed>|mixed $old_value
         * @param string $option_name
         *
         * @return array
         */
        public function pre_update_option_filter($new_value, $old_value, $option_name)
        {
        }
        /**
         * @param string $option_name
         * @param string $language
         *
         * @return bool
         */
        private function invalidate_cache($option_name, $language)
        {
        }
        /**
         * @param array $target
         * @param array $source
         *
         * @return array
         */
        private function merge($target, $source)
        {
        }
    }
    /**
     * Class WPML_Multilingual_Options_Utils
     */
    class WPML_Multilingual_Options_Utils
    {
        /** @var  wpdb */
        private $wpdb;
        /**
         * WPML_Multilingual_Options_Utils constructor.
         *
         * @param wpdb $wpdb
         */
        public function __construct(\wpdb $wpdb)
        {
        }
        /**
         * @param string $option_name
         * @param mixed  $default
         *
         * @return mixed|null
         */
        public function get_option_without_filtering($option_name, $default = \null)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    abstract class WPML_WP_Option
    {
        public abstract function get_key();
        public abstract function get_default();
        public function get()
        {
        }
        public function set($value, $autoload = \true)
        {
        }
    }
}
namespace WPML\Setup {
    class Initializer
    {
        public static function loadJS()
        {
        }
        public static function getData()
        {
        }
        /**
         * @return bool
         */
        private static function isPredefinedSiteKeySaved()
        {
        }
        /**
         * @param string $siteKey
         */
        private static function savePredefinedSiteKey($siteKey)
        {
        }
        /**
         * @return string
         */
        private static function getLanguageNegotiationMode()
        {
        }
        /**
         * @return string
         */
        private static function getDefaultLang()
        {
        }
        private static function getCustomFlagsDir()
        {
        }
        private static function getATEBaseUrl()
        {
        }
        /**
         * @return string
         */
        private static function getWPMLVersion()
        {
        }
        /**
         * @return string
         */
        private static function getSiteKey()
        {
        }
        private static function getSiteUrl()
        {
        }
    }
    class DisableNotices implements \IWPML_DIC_Action, \IWPML_Backend_Action
    {
        public function add_hooks()
        {
        }
    }
}
namespace WPML\Setup\Endpoint {
    class CheckTMAllowed implements \WPML\Ajax\IHandler
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    class SetOriginalLanguage implements \WPML\Ajax\IHandler
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    class CurrentStep implements \WPML\Ajax\IHandler
    {
        const STEPS = ['languages', 'address', 'license', 'translation', 'support', 'plugins', 'finished'];
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    class AddLanguages implements \WPML\Ajax\IHandler
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
        /**
         * @param string $language
         * @param int $id
         */
        private function saveMapping($language, $id)
        {
        }
    }
    class TranslationServices implements \WPML\Ajax\IHandler
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    class SetSecondaryLanguages implements \WPML\Ajax\IHandler
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    class LicenseStep implements \WPML\Ajax\IHandler
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    class SetSupport implements \WPML\Ajax\IHandler
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    class TranslationStep implements \WPML\Ajax\IHandler
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    class AddressStep implements \WPML\Ajax\IHandler
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
        /**
         * @return callable(Collection) : Either Left(unavailable) | Right(data)
         */
        private function validateDomains()
        {
        }
        /**
         * @return callable(Collection) : Either Left(unavailable) | Right(data)
         */
        private function handleDomains()
        {
        }
        /**
         * @return callable(Collection) : Either Left(unavailable) | Right(data)
         */
        private function validateSubdirectoryUrls()
        {
        }
        /**
         * @param Collection $domains
         * @param Collection $data
         *
         * @return callable|\WPML\FP\Left|Right
         */
        private function validate(\WPML\Collect\Support\Collection $domains, \WPML\Collect\Support\Collection $data)
        {
        }
        /**
         * @param Collection $data
         *
         * @return callable(string) : bool
         */
        private function getValidator(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    class RecommendedPlugins implements \WPML\Ajax\IHandler
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    class FinishStep implements \WPML\Ajax\IHandler
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
        private static function enableFooterLanguageSwitcher()
        {
        }
        private static function setCurrentUserToTranslateAllLangs()
        {
        }
    }
}
namespace {
    class WPML_Translation_Proxy_API
    {
        public function get_current_service_name()
        {
        }
        public function has_preferred_translation_service()
        {
        }
    }
    class WPML_Translation_Management_Filters_And_Actions
    {
        /**
         * @var  SitePress $sitepress
         */
        private $sitepress;
        /**
         * @var \AbsoluteLinks
         */
        private $absolute_links;
        /**
         * @var \WPML_Absolute_To_Permalinks
         */
        private $permalinks_converter;
        /**
         * @var \WPML_Translate_Link_Targets_In_Custom_Fields
         */
        private $translate_links_in_custom_fields;
        /**
         * @var \WPML_Translate_Link_Targets_In_Custom_Fields_Hooks
         */
        private $translate_links_in_custom_fields_hooks;
        /**
         * @var \WPML_Translate_Link_Targets
         */
        private $translate_link_target;
        /**
         * @var \WPML_Translate_Link_Targets_Hooks
         */
        private $translate_link_target_hooks;
        /**
         * @param TranslationManagement $tm_instance
         * @param \SitePress            $sitepress
         */
        public function __construct($tm_instance, $sitepress)
        {
        }
        private function add_filters_for_translating_link_targets(&$tm_instance)
        {
        }
    }
    class WPML_Translate_Link_Targets_Hooks
    {
        /**
         * WPML_Translate_Link_Targets_Hooks constructor.
         *
         * @param WPML_Translate_Link_Targets $translate_link_targets
         * @param WPML_WP_API                 $wp_api
         */
        public function __construct($translate_link_targets, $wp_api)
        {
        }
    }
    interface IWPML_Taxonomy_State
    {
        public function is_translated_taxonomy($tax);
        public function is_display_as_translated_taxonomy($tax);
        public function get_display_as_translated_taxonomies();
        public function get_translatable_taxonomies($include_not_synced = \false, $deprecated = 'post');
    }
    /**
     * WPML_TM_Reset_Options_Filter_Factory class file.
     *
     * @package WPML\TM
     */
    /**
     * Class WPML_TM_Reset_Options_Filter_Factory
     */
    class WPML_TM_Reset_Options_Filter_Factory implements \IWPML_Backend_Action_Loader
    {
        /**
         * Create reset options filter.
         *
         * @return WPML_TM_Reset_Options_Filter
         */
        public function create()
        {
        }
    }
    /**
     * WPML_TM_Reset_Options_Filter class file
     *
     * @package WPML\TM
     */
    /**
     * Class WPML_TM_Reset_Options_Filter
     */
    class WPML_TM_Reset_Options_Filter implements \IWPML_Action
    {
        /**
         * Add hooks
         */
        public function add_hooks()
        {
        }
        /**
         * Add options to reset.
         *
         * @param array $options Options.
         *
         * @return array
         */
        public function reset_options(array $options)
        {
        }
    }
    /**
     * @deprecated since WPML 4.2.8
     *
     * Some constants are used in other projects, but it should be removed soon.
     */
    class WPML_Theme_Localization_Type
    {
        const USE_ST = 1;
        const USE_MO_FILES = 2;
        const USE_ST_AND_NO_MO_FILES = 3;
    }
    /**
     * Class WPML_TM_Post_Edit_Custom_Field_Settings_Menu
     */
    class WPML_TM_Post_Edit_Custom_Field_Settings_Menu
    {
        /** @var  WPML_Custom_Field_Setting_Factory $setting_factory */
        private $setting_factory;
        /** @var WP_Post $post */
        private $post;
        private $rendered = \false;
        /**
         * WPML_TM_Post_Edit_Custom_Field_Settings_Menu constructor.
         *
         * @param WPML_Custom_Field_Setting_Factory $settings_factory
         * @param WP_Post                           $post
         */
        public function __construct(&$settings_factory, $post)
        {
        }
        /**
         * @return string
         */
        public function render()
        {
        }
        /**
         * @return bool true if there were actual custom fields to display options for
         */
        public function is_rendered()
        {
        }
    }
    /**
     * Class WPML_Lang_Domains_Box
     *
     * Displays the table holding the language domains on languages.php
     */
    class WPML_Lang_Domains_Box extends \WPML_SP_User
    {
        public function render()
        {
        }
        /**
         * @param string   $code
         * @param string   $default_home
         * @param string[] $language_domains
         *
         * @return string
         */
        private function get_language_domain($code, $default_home, $language_domains)
        {
        }
        private function render_suggested_url($home, $lang)
        {
        }
    }
    abstract class WPML_TM_Post_Link
    {
        /** @var SitePress $sitepress */
        protected $sitepress;
        /** @var int $post */
        protected $post_id;
        /**
         * WPML_TM_Post_Link constructor.
         *
         * @param SitePress $sitepress
         * @param int       $post_id
         */
        public function __construct($sitepress, $post_id)
        {
        }
    }
    class WPML_Admin_Scripts_Setup extends \WPML_Full_Translation_API
    {
        const PRIORITY_ENQUEUE_SCRIPTS = 10;
        /** @var string $page */
        private $page;
        /**
         * @param wpdb                    $wpdb
         * @param SitePress               $sitepress
         * @param WPML_Post_Translation   $post_translation
         * @param WPML_Terms_Translations $term_translation
         * @param string                  $page
         */
        public function __construct(&$wpdb, &$sitepress, &$post_translation, &$term_translation, $page)
        {
        }
        public function add_admin_hooks()
        {
        }
        public function register_styles()
        {
        }
        private function print_js_globals()
        {
        }
        public function wpml_js_scripts_setup()
        {
        }
        /**
         * Prints JavaScript to display correct links on the posts by status break down and also fixes links
         * to category and tag pages
         *
         * @param string $current_language
         */
        private function correct_status_links_js($current_language)
        {
        }
        /**
         * Prints the JavaScript for synchronizing page order or page template on the post edit screen.
         *
         * @param int    $trid
         * @param string $source_lang
         */
        private function print_mo_sync_js($trid, $source_lang)
        {
        }
        /**
         * Prints the JavaScript for synchronizing ping and comment status for a post translation on the post edit screen.
         *
         * @param int    $trid
         * @param string $source_lang
         */
        private function print_ping_and_comment_sync_js($trid, $source_lang)
        {
        }
        /**
         * Prints the JavaScript for disabling editing the post_date on the post edit screen,
         * when the synchronize post_date for translations setting is activated.
         */
        private function print_sync_date_js()
        {
        }
        private function print_tax_sync_js()
        {
        }
        private function get_current_req_post_id()
        {
        }
        private function print_reading_options_js()
        {
        }
        function wpml_css_setup()
        {
        }
        private function verify_home_and_blog_pages_translations()
        {
        }
        /**
         * @param int    $original_page_id
         * @param string $label
         * @param string $additional_css
         *
         * @return string
         */
        private function missing_page_warning($original_page_id, $label, $additional_css = '')
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Custom_Columns_Factory implements \IWPML_Backend_Action_Loader, \IWPML_AJAX_Action_Loader
    {
        private $hooks;
        /**
         * @return WPML_Custom_Columns
         */
        public function create()
        {
        }
    }
    /**
     * Class WPML_Custom_Columns
     */
    class WPML_Custom_Columns implements \IWPML_Action
    {
        const COLUMN_KEY = 'icl_translations';
        const CUSTOM_COLUMNS_PRIORITY = 1010;
        /**
         * @param SitePress $sitepress
         */
        private $sitepress;
        /**
         * @var WPML_Post_Status_Display
         */
        public $post_status_display;
        public function __construct(\SitePress $sitepress)
        {
        }
        /**
         * @param array $columns
         *
         * @return array
         */
        public function add_posts_management_column($columns)
        {
        }
        public function get_flags_column()
        {
        }
        private function get_flag_img($language_data)
        {
        }
        /**
         * Add posts management column.
         *
         * @param string   $column_name
         * @param int|null $post_id
         */
        public function add_content_for_posts_management_column($column_name, $post_id = \null)
        {
        }
        /**
         * Check translation management column screen option.
         *
         * @param string $post_type Current post type.
         *
         * @return bool
         */
        public function show_management_column_content($post_type)
        {
        }
        /**
         * Get list of active languages.
         *
         * @return array
         */
        private function get_filtered_active_languages()
        {
        }
        public function add_hooks()
        {
        }
        /**
         * Add custom columns hooks.
         */
        public function add_custom_columns_hooks()
        {
        }
        public function preloadTranslationData()
        {
        }
        /**
         * Check if we need to add custom columns on page.
         *
         * @return bool
         */
        private function has_custom_columns()
        {
        }
    }
    /**
     * Class WPML_Taxonomy_Translation_UI
     */
    class WPML_Taxonomy_Translation_UI
    {
        private $sitepress;
        private $taxonomy;
        private $tax_selector;
        private $screen_options;
        /**
         * WPML_Taxonomy_Translation constructor.
         *
         * @param SitePress                      $sitepress
         * @param string                         $taxonomy if given renders a specific taxonomy,
         *                                                 otherwise renders a placeholder
         * @param bool[]                         $args array with possible indices:
         *                                             'taxonomy_selector' => bool .. whether or not to show the taxonomy selector
         * @param WPML_UI_Screen_Options_Factory $screen_options_factory
         */
        public function __construct(\SitePress $sitepress, $taxonomy = '', array $args = array(), \WPML_UI_Screen_Options_Factory $screen_options_factory = \null)
        {
        }
        /**
         * Echos the HTML that serves as an entry point for the taxonomy translation
         * screen and enqueues necessary js.
         */
        public function render()
        {
        }
        /**
         * @return int
         */
        private function get_items_per_page()
        {
        }
        /**
         * @return string
         */
        private function get_help_text()
        {
        }
    }
    /**
     * Class WPML_Translation_Tree
     *
     * @package    wpml-core
     * @subpackage taxonomy-term-translation
     */
    class WPML_Translation_Tree extends \WPML_SP_User
    {
        private $taxonomy;
        private $tree = array();
        private $trid_levels;
        private $language_order;
        private $term_ids;
        /**
         * @param SitePress $sitepress
         * @param string    $element_type
         * @param object[]  $terms
         */
        public function __construct(&$sitepress, $element_type, $terms)
        {
        }
        /**
         * Returns all terms in the translation tree, ordered by hierarchy and as well as alphabetically within a level and/or parent term relationship.
         *
         * @return array
         */
        public function get_alphabetically_ordered_list()
        {
        }
        /**
         * @param array $terms
         *
         * Generates a tree representation of an array of terms objects
         *
         * @return array|bool
         */
        private function get_tree_from_terms_array($terms)
        {
        }
        /**
         * Groups an array of terms objects by their trid and language_code
         *
         * @param array<\stdClass> $terms
         *
         * @return array<int>
         */
        private function generate_trid_groups($terms)
        {
        }
        /**
         * @param string $name
         *
         * @return string
         */
        private function get_unique_term_name($name)
        {
        }
        /**
         * @param array<int>       $trids
         * @param array|bool|false $root_trid_group
         * @param int              $level current depth in the tree
         *                                Recursively turns an array of unordered trid objects into a tree.
         *
         * @return array|bool
         */
        private function parse_tree($trids, $root_trid_group, $level)
        {
        }
        /**
         * @param array|bool $parent
         * @param array      $children
         *                   Checks if one trid is the root of another. This is the case if at least one parent child
         *                   relationship between both trids exists.
         *
         * @return bool
         */
        private function is_root($children, $parent)
        {
        }
        private function sort_trids_alphabetically($trid_groups)
        {
        }
        /**
         * @param array $trid_group
         * @param array $existing_list
         *
         * Reads in a trid array and appends it and its children to the input array.
         * This is done in the order parent->alphabetically ordered children -> ( alphabetically ordered children's children) ...
         *
         * @return array
         */
        private function get_children_recursively($trid_group, $existing_list = array())
        {
        }
        /**
         * Adds the hierarchical depth as a variable to all terms.
         * 0 means, that the term has no parent.
         *
         * @param array $tridgroup
         *
         * @return array
         */
        private function add_level_information_to_terms($tridgroup)
        {
        }
        /**
         * Counts the number of terms per language and returns an array of language codes,
         * that is ordered by the number of terms in every language.
         *
         * @param array $terms
         *
         * @return array
         */
        private function get_language_order($terms)
        {
        }
    }
    /**
     * Class WPML_User_Options_Menu
     * Renders the WPML UI elements on the WordPress user profile edit screen
     */
    class WPML_User_Options_Menu
    {
        /** @var WP_User */
        private $current_user;
        /** @var SitePress */
        private $sitepress;
        /**
         * @var string
         */
        private $user_language;
        /**
         * @var string
         */
        private $user_admin_def_lang;
        /**
         * @var mixed[]
         */
        private $lang_details;
        /**
         * @var string
         */
        private $admin_default_language;
        /**
         * @var string
         */
        private $admin_language;
        /**
         * @var mixed[]
         */
        private $all_languages;
        /**
         * WPML_User_Options_Menu constructor.
         *
         * @param SitePress $sitepress
         * @param WP_User   $current_user
         */
        public function __construct(\SitePress $sitepress, \WP_User $current_user)
        {
        }
        /**
         * @return string the html for the user profile edit screen element WPML
         * adds to it
         */
        public function render()
        {
        }
        /**
         * @param bool $use_admin_language_for_edit
         */
        private function get_hidden_languages_options($use_admin_language_for_edit)
        {
        }
    }
    class WPML_Support_Page
    {
        /**
         * @var \WPML_WP_API
         */
        private $wpml_wp_api;
        /**
         * WPML_Support_Page constructor.
         *
         * @param WPML_WP_API $wpml_wp_api
         */
        public function __construct(&$wpml_wp_api)
        {
        }
        public function display_compatibility_issues()
        {
        }
        /**
         * @return string
         */
        private function get_message()
        {
        }
        private function init_hooks()
        {
        }
        /**
         * @return string
         */
        private function missing_extension_message()
        {
        }
        /**
         * @return string
         */
        private function missing_extension_message_for_php7()
        {
        }
        /**
         * @return string
         */
        private function contact_the_admin()
        {
        }
        /**
         * @param string $message
         */
        private function render_message($message)
        {
        }
    }
    class WPML_Custom_Types_Translation_UI
    {
        /** @var array */
        private $translation_option_class_names;
        /** @var WPML_Translation_Modes $translation_modes */
        private $translation_modes;
        /** @var WPML_UI_Unlock_Button $unlock_button_ui */
        private $unlock_button_ui;
        public function __construct(\WPML_Translation_Modes $translation_modes, \WPML_UI_Unlock_Button $unlock_button_ui)
        {
        }
        public function render_custom_types_header_ui($type_label)
        {
        }
        public function render_row($content_label, $name, $content_slug, $disabled, $current_translation_mode, $unlocked, $content_label_singular = \false)
        {
        }
        /**
         * @param bool   $unlocked
         * @param bool   $disabled
         * @param int    $mode
         * @param string $content_slug
         *
         * @return array
         */
        public static function get_disabled_state_for_mode($unlocked, $disabled, $mode, $content_slug)
        {
        }
        public function renderModeLabels()
        {
        }
    }
    abstract class WPML_TM_Post_Link_Anchor extends \WPML_TM_Post_Link
    {
        /** @var string $anchor */
        private $anchor;
        /** @var string $target */
        private $target;
        /**
         * WPML_TM_Post_Link_Anchor constructor.
         *
         * @param SitePress $sitepress
         * @param int $post_id
         * @param string $anchor
         * @param string $target
         */
        public function __construct(\SitePress $sitepress, $post_id, $anchor, $target = '')
        {
        }
        public function __toString()
        {
        }
        protected abstract function link_target();
    }
    /**
     * class WPML_Taxonomy_Translation
     *
     * Used by WCML so be careful about modifications to the contructor
     */
    class WPML_Taxonomy_Translation
    {
        private $ui = \null;
        /**
         * WPML_Taxonomy_Translation constructor.
         *
         * @param string                         $taxonomy if given renders a specific taxonomy,
         *                                                 otherwise renders a placeholder
         * @param bool[]                         $args array with possible indices:
         *                                             'taxonomy_selector' => bool .. whether or not to show the taxonomy selector
         * @param WPML_UI_Screen_Options_Factory $screen_options_factory
         */
        public function __construct($taxonomy = '', $args = array(), $screen_options_factory = \null)
        {
        }
        /**
         * Echos the HTML that serves as an entry point for the taxonomy translation
         * screen and enqueues necessary js.
         */
        public function render()
        {
        }
    }
    /**
     * Class WPML_TM_Post_Edit_Link_Anchor
     *
     * Creates post links with a given anchor text, pointing at the back-end
     * post edit view
     */
    class WPML_TM_Post_Edit_Link_Anchor extends \WPML_TM_Post_Link_Anchor
    {
        protected function link_target()
        {
        }
    }
    /**
     * Class WPML_Twig_Template_Loader
     */
    class WPML_Twig_Template_Loader
    {
        /**
         * @var array
         */
        private $paths;
        /**
         * WPML_Twig_Template_Loader constructor.
         *
         * @param array $paths
         */
        public function __construct(array $paths)
        {
        }
        /**
         * @return WPML_Twig_Template
         */
        public function get_template()
        {
        }
    }
    class WPML_Inactive_Content_Render extends \WPML_Twig_Template_Loader
    {
        const TEMPLATE = 'inactive-content.twig';
        /** @var WPML_Inactive_Content $inactive_content */
        private $inactive_content;
        public function __construct(\WPML_Inactive_Content $inactive_content, array $paths)
        {
        }
        public function render()
        {
        }
    }
    class WPML_Post_Edit_Screen
    {
        /** @var SitePress $sitepress */
        private $sitepress;
        /**
         * @param SitePress $sitepress
         */
        public function __construct(\SitePress $sitepress)
        {
        }
        /**
         * Enqueues scripts and styles for the post edit screen.
         */
        function scripts_setup()
        {
        }
        /**
         * Filters the preview links on the post edit screen so that they always point to the currently used language
         * domain. This ensures that the user can actually see the preview, as he might not have the login cookie set for
         * the actual language domain of the post.
         *
         * @param string $link
         *
         * @return mixed
         */
        public function preview_post_link_filter($link)
        {
        }
        /**
         * @param array $permalink Array containing the sample permalink with placeholder for the post name, and the post name.
         *
         * @return array
         */
        public function get_sample_permalink_filter(array $permalink)
        {
        }
    }
    /**
     * Class WPML_TM_Post_View_Link_Anchor
     *
     * Creates post links with a given anchor text, pointing at the front-end
     * post view
     */
    class WPML_TM_Post_View_Link_Anchor extends \WPML_TM_Post_Link_Anchor
    {
        protected function link_target()
        {
        }
    }
    /**
     * Class WPML_TM_Post_View_Link_Title
     *
     * Creates post links with the post title as anchor text, pointing at the front-end
     * post view
     */
    class WPML_TM_Post_View_Link_Title extends \WPML_TM_Post_View_Link_Anchor
    {
        public function __construct(&$sitepress, $post_id)
        {
        }
    }
}
namespace WPML\Settings {
    class PostTypesUI extends \WPML_Custom_Types_Translation_UI
    {
        public function renderModeLabels()
        {
        }
        public function render_row($content_label, $name, $content_slug, $disabled, $current_translation_mode, $unlocked, $content_label_singular = false)
        {
        }
    }
}
namespace {
    /**
     * Class WPML_TM_Post_Link_Factory
     *
     * Creates post links for the TM dashboard and the translation queue
     */
    class WPML_TM_Post_Link_Factory
    {
        /** @var SitePress $sitepress */
        private $sitepress;
        public function __construct(\SitePress $sitepress)
        {
        }
        /**
         * Link to the front end, link text is the post title
         *
         * @param int $post_id
         *
         * @return string
         */
        public function view_link($post_id)
        {
        }
        /**
         * Link to the front end, link text is given by the anchor
         *
         * @param int    $post_id
         * @param string $anchor
         *
         * @return string
         */
        public function view_link_anchor($post_id, $anchor, $target = '')
        {
        }
        /**
         * Link to the backend, link text is given by the anchor
         *
         * @param int    $post_id
         * @param string $anchor
         *
         * @return string
         */
        public function edit_link_anchor($post_id, $anchor)
        {
        }
    }
    class WPML_Taxonomy_Translation_Screen_Data extends \WPML_WPDB_And_SP_User
    {
        const WPML_TAXONOMY_TRANSLATION_MAX_TERMS_RESULTS_SET = 1000;
        /** @var  string $taxonomy */
        private $taxonomy;
        /**
         * WPML_Taxonomy_Translation_Screen_Data constructor.
         *
         * @param SitePress $sitepress
         * @param string    $taxonomy
         */
        public function __construct(&$sitepress, $taxonomy)
        {
        }
        /**
         * The returned array from this function is indexed as follows.
         * It holds an array of all terms to be displayed under [terms]
         * and the count of all terms matching the filter under [count].
         *
         * The array under [terms] itself is index as such:
         * [trid][lang]
         *
         * It holds in itself the terms objects of the to be displayed terms.
         * These are ordered by their names alphabetically.
         * Also their objects are amended by the index $term->translation_of holding the term_taxonomy_id of their original element
         * and their level under $term->level in case of hierarchical terms.
         *
         * Also the index [trid][source_lang] holds the source language of the term group.
         *
         * @return array
         */
        public function terms()
        {
        }
        /**
         * @param array $terms
         *               Turn a numerical array of terms objects into an associative once,
         *               holding the same terms, but indexed by their term_id.
         *
         * @return array
         */
        private function index_terms_array($terms)
        {
        }
        /**
         * @param array $trid_group
         * @param array $terms
         *                    Transforms the term arrays generated by the Translation Tree class and turns them into
         *                    standard WordPress terms objects.
         *
         * @return mixed
         */
        private function set_language_information($trid_group, $terms)
        {
        }
        /**
         * Orders a list of terms alphabetically and hierarchy-wise
         *
         * @param array $terms
         *
         * @return array
         */
        private function order_terms_list($terms)
        {
        }
        /**
         * @param array $selects
         *                 Generates a list of to be selected variables in an sql query.
         *
         * @return string
         */
        private function build_select_vars($selects)
        {
        }
        /**
         * @param array $selects
         *                 Returns an array of alias statements to be used in SQL queries with joins.
         *
         * @return array
         */
        private function alias_statements($selects)
        {
        }
        private function build_where_clause($selects)
        {
        }
        /**
         * @param string $from
         * @param array  $selects
         * @param int    $limit
         *
         * @return string
         */
        private function build_from_clause($from, $selects, $limit)
        {
        }
        /**
         * @param array $all_terms
         *
         * @return array
         */
        private function add_metadata($all_terms)
        {
        }
    }
    class WPML_TM_Jobs_Deadline_Cron_Hooks_Factory implements \IWPML_Backend_Action_Loader, \IWPML_Frontend_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_TM_Jobs_Deadline_Estimate
    {
        const LATENCY_DAYS = 1;
        const WORDS_PER_DAY = 1200;
        /** @var WPML_TM_Translatable_Element_Provider */
        private $translatable_element_provider;
        /** @var WPML_TM_Jobs_Repository */
        private $jobs_repository;
        public function __construct(\WPML_TM_Translatable_Element_Provider $translatable_element_provider, \WPML_TM_Jobs_Repository $jobs_repository)
        {
        }
        /**
         * @param array $basket
         * @param array $translator_options
         *
         * @return string
         */
        public function get(array $basket, array $translator_options)
        {
        }
        /**
         * @param array $translator_options
         *
         * @return WPML_TM_Jobs_Collection
         */
        private function get_pending_jobs_for_translator(array $translator_options)
        {
        }
        /**
         * @param WPML_TM_Jobs_Collection $pending_jobs
         *
         * @return int[]
         */
        private function get_pending_words_per_langs(\WPML_TM_Jobs_Collection $pending_jobs)
        {
        }
        /**
         * @param array $basket
         * @param int[] $words_per_langs
         *
         * @return int[]
         */
        private function add_basket_words_per_langs(array $basket, array $words_per_langs)
        {
        }
    }
    /**
     * Class WPML_AJAX_Base_Factory
     *
     * @author OnTheGoSystems
     */
    abstract class WPML_AJAX_Base_Factory implements \IWPML_AJAX_Action_Loader, \IWPML_Deferred_Action_Loader
    {
        /** @var  WPML_AJAX_Action_Validation $ajax_action_check */
        private $ajax_action_validation;
        /**
         * This loader must be deferred at least to 'plugins_loaded' to make sure
         * all the WP functions needed to validate the request are already loaded
         *
         * @return string
         */
        public function get_load_action()
        {
        }
        public function is_valid_action($ajax_action)
        {
        }
        /**
         * @param WPML_AJAX_Action_Validation $ajax_action_validation
         */
        public function set_ajax_action_validation(\WPML_AJAX_Action_Validation $ajax_action_validation)
        {
        }
    }
    class WPML_TM_Jobs_Deadline_Estimate_AJAX_Action_Factory extends \WPML_AJAX_Base_Factory
    {
        /** @return null|WPML_TM_Jobs_Deadline_Estimate_AJAX_Action */
        public function create()
        {
        }
    }
    class WPML_TM_Jobs_Deadline_Estimate_AJAX_Action implements \IWPML_Action
    {
        /** @var WPML_TM_Jobs_Deadline_Estimate $deadline_estimate */
        private $deadline_estimate;
        /** @var array $translation_basket */
        private $translation_basket;
        /** @var array $post_data */
        private $post_data;
        public function __construct(\WPML_TM_Jobs_Deadline_Estimate $deadline_estimate, array $translation_basket, array $post_data)
        {
        }
        public function add_hooks()
        {
        }
        public function refresh()
        {
        }
        /**
         * The translator data for a remote service will be like "ts-7" with 7 the ID of the remote service
         * For a local translator, the translation data will be the ID
         *
         * @param string $translator_data
         *
         * @return array
         */
        private function parse_translator_data($translator_data)
        {
        }
    }
    class WPML_TM_Jobs_Deadline_Estimate_Factory
    {
        public function create()
        {
        }
    }
    class WPML_TM_Jobs_Deadline_Cron_Hooks implements \IWPML_Action
    {
        const CHECK_OVERDUE_JOBS_EVENT = 'wpml-tm-check-overdue-jobs-event';
        /** @var WPML_TM_Overdue_Jobs_Report_Factory $overdue_jobs_report_factory */
        private $overdue_jobs_report_factory;
        /** @var TranslationManagement $notification_settings */
        private $translation_management;
        public function __construct(\WPML_TM_Overdue_Jobs_Report_Factory $overdue_jobs_report_factory, \TranslationManagement $translation_management)
        {
        }
        public function add_hooks()
        {
        }
        public function schedule_event()
        {
        }
        /** @return int */
        private function get_init_priority()
        {
        }
        /** @return bool */
        private function is_notification_enabled()
        {
        }
        public function send_overdue_email_report()
        {
        }
    }
    /**
     * Class WPML_TM_Batch_Report_Email_Process
     */
    class WPML_TM_Batch_Report_Email_Process
    {
        /**
         * @var WPML_TM_Batch_Report
         */
        private $batch_report;
        /**
         * @var WPML_TM_Batch_Report_Email_Builder
         */
        private $email_builder;
        /**
         * WPML_TM_Batch_Report_Email_Process constructor.
         *
         * @param WPML_TM_Batch_Report $batch_report
         * @param WPML_TM_Batch_Report_Email_Builder $email_builder
         */
        public function __construct(\WPML_TM_Batch_Report $batch_report, \WPML_TM_Batch_Report_Email_Builder $email_builder)
        {
        }
        public function process_emails()
        {
        }
        private function send_emails()
        {
        }
    }
    abstract class WPML_TM_Email_View
    {
        const FOOTER_TEMPLATE = 'email-footer.twig';
        const HEADER_TEMPLATE = 'email-header.twig';
        /** @var WPML_Twig_Template $template_service */
        protected $template_service;
        public function __construct(\WPML_Twig_Template $template_service)
        {
        }
        /**
         * @param string $username
         *
         * @return string
         */
        public function render_header($username = '')
        {
        }
        /**
         * @param string $username
         *
         * @return string
         */
        public function render_casual_header($first_name = '')
        {
        }
        /**
         * @param string $bottom_text
         *
         * @return string
         */
        protected function render_email_footer($bottom_text = '')
        {
        }
    }
    /**
     * Class WPML_TM_Email_Jobs_Summary_View
     */
    class WPML_TM_Email_Jobs_Summary_View extends \WPML_TM_Email_View
    {
        const JOBS_TEMPLATE = 'batch-report/email-job-pairs.twig';
        /**
         * @var WPML_TM_Blog_Translators
         */
        private $blog_translators;
        /**
         * @var SitePress
         */
        private $sitepress;
        /**
         * @var array
         */
        private $assigned_jobs;
        /**
         * WPML_TM_Batch_Report_Email_Template constructor.
         *
         * @param WPML_Twig_Template $template_service
         * @param WPML_TM_Blog_Translators $blog_translators
         * @param SitePress $sitepress
         */
        public function __construct(\WPML_Twig_Template $template_service, \WPML_TM_Blog_Translators $blog_translators, \SitePress $sitepress)
        {
        }
        /**
         * @param array $language_pairs
         * @param int $translator_id
         * @param string $title_singular
         * @param string $title_plural
         *
         * @return null|string
         */
        public function render_jobs_list($language_pairs, $translator_id, $title_singular, $title_plural = '')
        {
        }
        /** @return string */
        public function render_footer()
        {
        }
        /**
         * @param int $job_id
         * @param string $type
         */
        private function add_assigned_job($job_id, $type)
        {
        }
        /**
         * @return array
         */
        public function get_assigned_jobs()
        {
        }
        private function empty_assigned_jobs()
        {
        }
        private function get_closing_sentence()
        {
        }
    }
    /**
     * Class WPML_TM_Batch_Report_Email
     */
    class WPML_TM_Batch_Report_Email_Builder
    {
        /**
         * @var WPML_TM_Batch_Report
         */
        private $batch_report;
        /**
         * @var array
         */
        private $emails;
        /**
         * @var WPML_TM_Email_Jobs_Summary_View
         */
        private $email_template;
        /**
         * WPML_TM_Notification_Batch_Email constructor.
         *
         * @param WPML_TM_Batch_Report            $batch_report
         * @param WPML_TM_Email_Jobs_Summary_View $email_template
         */
        public function __construct(\WPML_TM_Batch_Report $batch_report, \WPML_TM_Email_Jobs_Summary_View $email_template)
        {
        }
        /**
         * @param array $batch_jobs
         */
        public function prepare_assigned_jobs_emails($batch_jobs)
        {
        }
        /**
         * @param array $batch_jobs
         */
        public function prepare_unassigned_jobs_emails($batch_jobs)
        {
        }
        /**
         * @param array $email
         * @param array $jobs
         *
         * @return array
         */
        private function add_attachments($email, $jobs)
        {
        }
        /**
         * @return string
         */
        private function get_subject_assigned_job()
        {
        }
        /**
         * @return string
         */
        private function get_subject_unassigned_job()
        {
        }
        /**
         * @return array
         */
        public function get_emails()
        {
        }
    }
    /**
     * Class WPML_TM_Batch_Report
     */
    class WPML_TM_Batch_Report
    {
        const BATCH_REPORT_OPTION = '_wpml_batch_report';
        /**
         * @var WPML_TM_Blog_Translators
         */
        private $blog_translators;
        /**
         * WPML_TM_Batch_Report constructor.
         *
         * @param WPML_TM_Blog_Translators $blog_translators
         */
        public function __construct(\WPML_TM_Blog_Translators $blog_translators)
        {
        }
        /**
         * @param WPML_Translation_Job $job
         */
        public function set_job(\WPML_Translation_Job $job)
        {
        }
        /**
         * @return array
         */
        public function get_unassigned_jobs()
        {
        }
        /**
         * @return array
         */
        public function get_unassigned_translators()
        {
        }
        /**
         * @return array
         */
        public function get_jobs()
        {
        }
        public function reset_batch_report($translator_id)
        {
        }
    }
    /**
     * Class WPML_TM_Notification_Batch_Hooks
     */
    class WPML_TM_Batch_Report_Hooks
    {
        /**
         * @var WPML_TM_Batch_Report
         */
        private $batch_report;
        /**
         * @var WPML_TM_Batch_Report_Email_Process
         */
        private $email_process;
        /**
         * WPML_TM_Batch_Report_Hooks constructor.
         *
         * @param WPML_TM_Batch_Report $batch_report
         * @param WPML_TM_Batch_Report_Email_Process $email_process
         */
        public function __construct(\WPML_TM_Batch_Report $batch_report, \WPML_TM_Batch_Report_Email_Process $email_process)
        {
        }
        public function add_hooks()
        {
        }
        public function set_job($job)
        {
        }
    }
    class WPML_TM_Email_Notification_View extends \WPML_TM_Email_View
    {
        const PROMOTE_TRANSLATION_SERVICES_TEMPLATE = 'notification/promote-translation-services.twig';
        /**
         * @param array  $model
         * @param string $template
         *
         * @return string
         */
        public function render_model(array $model, $template)
        {
        }
        /**
         * @param array $model
         *
         * @return string
         */
        private function render_promote_translation_services(array $model)
        {
        }
        /** @return string */
        private function render_footer()
        {
        }
    }
    class WPML_TM_Jobs_Summary_Report_Hooks
    {
        const EVENT_HOOK = 'wpml_tm_send_summary_report';
        const EVENT_CALLBACK = 'send_summary_report';
        /**
         * @var WPML_TM_Jobs_Summary_Report_Process_Factory
         */
        private $process_factory;
        /**
         * @var TranslationManagement
         */
        private $tm;
        public function __construct(\WPML_TM_Jobs_Summary_Report_Process_Factory $process_factory, \TranslationManagement $tm)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @return bool
         */
        private function notification_setting_allow_scheduling()
        {
        }
        public function send_summary_report()
        {
        }
        public function schedule_email()
        {
        }
        /**
         * @return int
         */
        private function get_schedule_time()
        {
        }
    }
    class WPML_TM_Jobs_Summary
    {
        const WEEKLY_REPORT = 'weekly';
        const DAILY_REPORT = 'daily';
        const DAILY_SCHEDULE = '1 day';
        const WEEKLY_SCHEDULE = '1 week';
        const JOBS_COMPLETED_KEY = 'completed';
        const JOBS_WAITING_KEY = 'waiting';
    }
    class WPML_TM_Jobs_Summary_Report_Process
    {
        /**
         * @var WPML_TM_Jobs_Summary_Report_View
         */
        private $view;
        /**
         * @var WPML_TM_Jobs_Summary_Report_Model
         */
        private $report_model;
        /**
         * @var array
         */
        private $jobs;
        public function __construct(\WPML_TM_Jobs_Summary_Report_View $view, \WPML_TM_Jobs_Summary_Report_Model $report_model, array $jobs)
        {
        }
        public function send()
        {
        }
        /**
         * @param int $manager_id
         */
        private function send_email($manager_id)
        {
        }
    }
    class WPML_TM_Jobs_Summary_Report
    {
        /**
         * @var WPML_Translation_Jobs_Collection
         */
        private $jobs_collection;
        /**
         * @var array
         */
        private $jobs = array();
        /**
         * @var WPML_TM_String
         */
        private $string_counter;
        /**
         * @var WPML_TM_Post
         */
        private $post_counter;
        /**
         * @var string
         */
        private $type;
        /**
         * @var WPML_Translation_Element_Factory
         */
        private $element_factory;
        public function __construct(\WPML_Translation_Jobs_Collection $jobs_collection, \WPML_TM_String $string_counter, \WPML_TM_Post $post_counter, $type, \WPML_Translation_Element_Factory $element_factory)
        {
        }
        private function build_completed_jobs()
        {
        }
        private function build_waiting_jobs()
        {
        }
        /**
         * @param WPML_Element_Translation_Job $job
         *
         * @return string
         */
        private function get_translator_name(\WPML_Element_Translation_Job $job)
        {
        }
        /**
         * @return array
         */
        public function get_jobs()
        {
        }
    }
    class WPML_TM_Jobs_Summary_Report_Hooks_Factory implements \IWPML_Frontend_Action_Loader, \IWPML_Backend_Action_Loader
    {
        /**
         * @return WPML_TM_Jobs_Summary_Report_Hooks
         */
        public function create()
        {
        }
    }
    class WPML_TM_Jobs_Summary_Report_View extends \WPML_TM_Email_View
    {
        const WEEKLY_SUMMARY_TEMPLATE = 'notification/summary/summary.twig';
        /**
         * @var array
         */
        private $jobs;
        /**
         * @var int
         */
        private $manager_id;
        /**
         * @var string
         */
        private $summary_text;
        /**
         * @return string
         */
        public function get_report_content()
        {
        }
        /**
         * @return array
         */
        private function get_model()
        {
        }
        /**
         * @param array $jobs
         *
         * @return $this
         */
        public function set_jobs($jobs)
        {
        }
        /**
         * @param int $manager_id
         *
         * @return $this
         */
        public function set_manager_id($manager_id)
        {
        }
        /**
         * @param string $summary_text
         *
         * @return $this
         */
        public function set_summary_text($summary_text)
        {
        }
    }
    class WPML_TM_Jobs_Summary_Report_Process_Factory
    {
        /** @var WPML_TM_Jobs_Summary_Report_View $template */
        private $template;
        /** @var WPML_TM_Jobs_Summary_Report_Process $weekly_report */
        private $weekly_report;
        /** @var WPML_TM_Jobs_Summary_Report_Process $daily_report */
        private $daily_report;
        /**
         * @return WPML_TM_Jobs_Summary_Report_Process
         */
        public function create_weekly_report()
        {
        }
        /**
         * @return WPML_TM_Jobs_Summary_Report_Process
         */
        public function create_daily_report()
        {
        }
        /**
         * @param string $frequency
         *
         * @return WPML_TM_Jobs_Summary_Report
         */
        private function get_summary_report($frequency)
        {
        }
        /**
         * @return WPML_TM_Jobs_Summary_Report_View
         */
        private function get_template()
        {
        }
    }
    interface WPML_TM_Jobs_Summary_Report_Model
    {
        /**
         * @return string
         */
        public function get_subject();
        /**
         * @return string
         */
        public function get_summary_text();
    }
    class WPML_TM_Jobs_Weekly_Summary_Report_Model implements \WPML_TM_Jobs_Summary_Report_Model
    {
        /**
         * @return string
         */
        public function get_subject()
        {
        }
        /**
         * @return string
         */
        public function get_summary_text()
        {
        }
    }
    class WPML_TM_Jobs_Daily_Summary_Report_Model implements \WPML_TM_Jobs_Summary_Report_Model
    {
        /**
         * @return string
         */
        public function get_subject()
        {
        }
        /**
         * @return string
         */
        public function get_summary_text()
        {
        }
    }
    class WPML_TM_ATE_Request_Activation_Email
    {
        const REQUEST_ACTIVATION_TEMPLATE = 'notification/request-ate-activation.twig';
        /** @var WPML_TM_Email_Notification_View */
        private $email_view;
        public function __construct(\WPML_TM_Email_Notification_View $email_view)
        {
        }
        public function send_email($to_manager, $from_user)
        {
        }
    }
    class WPML_TM_Overdue_Jobs_Report
    {
        const OVERDUE_JOBS_REPORT_TEMPLATE = 'notification/overdue-jobs-report.twig';
        /** @var  WPML_Translation_Jobs_Collection $jobs_collection */
        private $jobs_collection;
        /** @var WPML_TM_Email_Notification_View $email_view */
        private $email_view;
        /** @var bool $has_active_remote_service */
        private $has_active_remote_service;
        /** @var array $notification_settings */
        private $notification_settings;
        private $sitepress;
        private $tp_jobs;
        /**
         * @param WPML_Translation_Jobs_Collection $jobs_collection
         * @param WPML_TM_Email_Notification_View $email_view
         * @param bool $has_active_remote_service
         * @param array $notification_settings
         * @param SitePress $sitepress
         * @param WPML_TP_Jobs_Collection|null $tp_jobs
         */
        public function __construct(\WPML_Translation_Jobs_Collection $jobs_collection, \WPML_TM_Email_Notification_View $email_view, $has_active_remote_service, array $notification_settings, \SitePress $sitepress, \WPML_TP_Jobs_Collection $tp_jobs = \null)
        {
        }
        public function send()
        {
        }
        /** @return array */
        private function get_overdue_jobs_by_manager_id()
        {
        }
        /**
         * @param string $manager_id
         * @param array  $jobs
         */
        private function send_email($manager_id, array $jobs)
        {
        }
    }
    class WPML_TM_Overdue_Jobs_Report_Factory
    {
        public function create()
        {
        }
    }
    class WPML_TM_Email_Twig_Template_Factory
    {
        /** @return WPML_Twig_Template */
        public function create()
        {
        }
    }
    /**
     * Class WPML_TM_Mail_Notification
     */
    class WPML_TM_Mail_Notification
    {
        const JOB_COMPLETE_TEMPLATE = 'notification/job-completed.twig';
        const JOB_REVISED_TEMPLATE = 'notification/job-revised.twig';
        const JOB_CANCELED_TEMPLATE = 'notification/job-canceled.twig';
        private $mail_cache = array();
        private $process_mail_queue;
        /** @var wpdb $wpdb */
        private $wpdb;
        /** @var SitePress $sitepress */
        private $sitepress;
        /** @var WPML_Translation_Job_Factory $job_factory */
        private $job_factory;
        /** @var WPML_TM_Email_Notification_View $email_view */
        private $email_view;
        /** @var array $notification_settings */
        private $notification_settings;
        /** @var bool $has_active_remote_service */
        private $has_active_remote_service;
        public function __construct(\SitePress $sitepress, \wpdb $wpdb, \WPML_Translation_Job_Factory $job_factory, \WPML_TM_Email_Notification_View $email_view, array $notification_settings, $has_active_remote_service)
        {
        }
        public function init()
        {
        }
        /**
         * @return bool
         */
        private function should_send_email_on_update()
        {
        }
        public function send_queued_mails()
        {
        }
        /**
         * @param int $job_id
         *
         * @return array|null
         */
        private function get_basic_mail_data($job_id)
        {
        }
        /**
         * @param WPML_Translation_Job|int $job_id
         * @param bool|false               $update
         *
         * @return false|array representation of the email to be sent
         */
        public function wpml_tm_job_complete_mail($job_id, $update = \false)
        {
        }
        /**
         * @param $job_id
         *
         * @return array|bool
         */
        public function revised_job_email($job_id)
        {
        }
        /**
         * @param WPML_TM_Job_Entity $job
         *
         * @return array|bool
         */
        public function canceled_job_email(\WPML_TM_Job_Entity $job)
        {
        }
        private function generic_update_notification_email($job_id, $mail_subject, $body_placeholder, $template)
        {
        }
        private function should_send_immediate_notification($type)
        {
        }
        /**
         * @param array                        $model
         * @param WPML_Element_Translation_Job $job
         *
         * @return array
         */
        private function update_model_for_deadline(array $model, \WPML_Element_Translation_Job $job)
        {
        }
        /**
         * @param int                      $translator_id
         * @param WPML_Translation_Job|int $job
         *
         * @return bool
         */
        public function translator_removed_mail($translator_id, $job)
        {
        }
        /**
         * @param int                      $translator_id
         * @param int|WPML_Translation_Job $job_id
         *
         * @return array|bool
         */
        public function translator_resign_mail($translator_id, $job_id)
        {
        }
        private function enqueue_mail($mail)
        {
        }
        /**
         * @param int|WPML_Translation_Job $job_id
         *
         * @return array
         */
        private function get_mail_elements($job_id)
        {
        }
        /**
         * @param WPML_Translation_Job $job
         * @param string               $user_language
         *
         * @return array
         */
        private function get_lang_to_from($job, $user_language)
        {
        }
    }
}
namespace WPML\TM\Editor {
    class Editor
    {
        const ATE_JOB_COULD_NOT_BE_CREATED = 101;
        const ATE_EDITOR_URL_COULD_NOT_BE_FETCHED = 102;
        const ATE_IS_NOT_ACTIVE = 103;
        /** @var CloneJobs */
        private $clone_jobs;
        /** @var Manual */
        private $manualJobs;
        /**
         * Editor constructor.
         *
         * @param CloneJobs $clone_jobs
         * @param Manual $manualJobs
         */
        public function __construct(\WPML\TM\Menu\TranslationQueue\CloneJobs $clone_jobs, \WPML\TM\Jobs\Manual $manualJobs)
        {
        }
        /**
         * @param array $params
         *
         * @return array
         */
        public function open($params)
        {
        }
        /**
         * @param array $params
         * @param \WPML_Element_Translation_Job $jobObject
         *
         * @return array
         */
        private function tryToDisplayATE($params = null, $jobObject = null)
        {
        }
        /**
         * @param \WPML_Element_Translation_Job $jobObject
         *
         * @return array
         */
        private function displayCTE($jobObject = null)
        {
        }
        private function maybeSetReviewStatus($jobObject)
        {
        }
        /**
         * It returns an url to place where a user should be redirected. The url contains a job id and error's code.
         *
         * @param array $params
         * @param int $code
         * @param \WPML_Element_Translation_Job $jobObject
         *
         * @return array
         */
        private function handleATEJobCreationError($params = null, $code = null, $jobObject = null)
        {
        }
        /**
         * It asserts a job's editor.
         *
         * @param string $editor
         * @param \WPML_Element_Translation_Job  $jobObject
         *
         * @return bool
         */
        private function isEditor($editor = null, $jobObject = null)
        {
        }
        /**
         * It checks if we created a new entry in wp_icl_translate_job table.
         * It happens when none for a specific lang existed so far or when a translation was "needs update".
         *
         * @param array $params
         * @param \WPML_Element_Translation_Job  $jobObject
         *
         * @return bool
         */
        private function isNewJobCreated($params = null, $jobObject = null)
        {
        }
        /**
         * It creates a corresponding job in ATE for already existing WPML job in such situations:
         *  1. Previously job was created in CTE, but a user selected the setting to translate existing CTE jobs in ATE
         *  2. ATE job could not be created before and user clicked "Retry" button
         *  3. Job was sent via basket and ATE job could not be created
         *
         * @param array $params
         *
         * @return callable :: \WPML_Element_Translation_Job->Either
         */
        private function maybeCreateATECounterpartForExistingWPMLJob(array $params)
        {
        }
        private function shouldNewJobBeOpenedInATE(array $params)
        {
        }
        /**
         * At this stage, we know that a corresponding job in ATE is created and we should open ATE editor.
         * We are trying to do that.
         *
         * @param array $params
         * @param \WPML_Element_Translation_Job $jobObject
         *
         * @return false|mixed
         */
        private function openATE($params = null, $jobObject = null)
        {
        }
        /**
         * @return string
         */
        private function getReturnUrl($params)
        {
        }
        private function filterQueryParameters($query)
        {
        }
    }
    class ClassicEditorActions
    {
        public function addHooks()
        {
        }
        public function saveJob()
        {
        }
    }
}
namespace {
    class WPML_TM_Editors
    {
        const ATE = 'ate';
        const WPML = 'wpml';
        const WP = 'wp';
        const NONE = 'none';
    }
    class WPML_TM_Old_Jobs_Editor
    {
        const OPTION_NAME = 'wpml-old-jobs-editor';
        /** @var wpdb */
        private $wpdb;
        /** @var WPML_Translation_Job_Factory */
        private $job_factory;
        public function __construct(\WPML_Translation_Job_Factory $job_factory)
        {
        }
        /**
         * @param int $job_id
         *
         * @return null|string
         */
        public function get($job_id)
        {
        }
        /**
         * @param int $job_id
         *
         * @return bool
         */
        public function shouldStickToWPMLEditor($job_id)
        {
        }
        /**
         * @return string
         */
        public function editorForTranslationsPreviouslyCreatedUsingCTE()
        {
        }
        public function set($job_id, $editor)
        {
        }
        /**
         * @param int $job_id
         *
         * @return null|string
         */
        public function get_current_editor($job_id)
        {
        }
    }
}
namespace WPML\TM\Editor {
    class ATERetry
    {
        /**
         * @param int $jobId
         *
         * @return bool
         */
        public static function hasFailed($jobId)
        {
        }
        /**
         * @param int $jobId
         *
         * @return int
         */
        public static function getCount($jobId)
        {
        }
        /**
         * @param int $jobId
         */
        public static function incrementCount($jobId)
        {
        }
        /**
         * @param int $jobId
         */
        public static function reset($jobId)
        {
        }
        /**
         * @param int $jobId
         *
         * @return string
         */
        public static function getOptionName($jobId)
        {
        }
    }
    class ManualJobCreationErrorNotice implements \IWPML_Backend_Action
    {
        const RETRY_LIMIT = 3;
        public function add_hooks()
        {
        }
        /**
         * @param array $params
         *
         * @return string
         */
        private function getContent(array $params)
        {
        }
        public static function retryMessage(array $params)
        {
        }
        public static function retryFailedMessage()
        {
        }
        public static function ateNotActiveMessage()
        {
        }
    }
}
namespace {
    class WPML_WP_Cron_Check
    {
        const TRANSIENT_NAME = 'wpml_cron_check';
        /** @var WPML_PHP_Functions $php_functions */
        private $php_functions;
        public function __construct(\WPML_PHP_Functions $php_functions)
        {
        }
        /** @return bool */
        public function verify()
        {
        }
        /** @return bool */
        public function is_doing_cron()
        {
        }
    }
    class WPML_TM_Array_Search
    {
        /**
         * @var array
         */
        private $where;
        /**
         * @var array
         */
        private $data;
        /**
         * @param array $data
         *
         * @return $this
         */
        public function set_data($data)
        {
        }
        /**
         * @param array $args
         *
         * @return $this
         */
        public function set_where($args)
        {
        }
        /**
         * @return array
         */
        public function get_results()
        {
        }
    }
}
namespace WPML\TM\WP\App {
    class Resources
    {
        // enqueueApp :: string $app -> ( string $localizeData )
        public static function enqueueApp($app)
        {
        }
    }
}
namespace {
    class WPML_TM_Requirements
    {
        const INVALID_PHP_EXTENSIONS_OPTION = 'wpml-invalid-php-extensions';
        private $missing;
        private $missing_one;
        public function __construct()
        {
        }
        private function check_required_plugins()
        {
        }
        public function plugins_loaded_action()
        {
        }
        public function missing_php_extensions()
        {
        }
        private function build_invalid_php_extensions_message_args(array $extensions)
        {
        }
        private function get_current_php_extensions()
        {
        }
        /**
         * Missing plugins warning.
         */
        public function missing_plugins_warning()
        {
        }
    }
    class WPML_Theme_Plugin_Localization_UI
    {
        const TEMPLATE_PATH = '/templates/theme-plugin-localization/';
        /**
         * @return IWPML_Template_Service
         */
        private function get_template_service()
        {
        }
        /**
         * @param IWPML_Theme_Plugin_Localization_UI_Strategy $localization_strategy
         */
        public function render(\IWPML_Theme_Plugin_Localization_UI_Strategy $localization_strategy)
        {
        }
    }
    class WPML_Theme_Plugin_Localization_Options_Ajax implements \IWPML_AJAX_Action, \IWPML_DIC_Action
    {
        const NONCE_LOCALIZATION_OPTIONS = 'wpml-localization-options-nonce';
        /** @var WPML_Save_Themes_Plugins_Localization_Options */
        private $save_localization_options;
        /**
         * WPML_Themes_Plugins_Localization_Options_Ajax constructor.
         *
         * @param WPML_Save_Themes_Plugins_Localization_Options $save_localization_options
         */
        public function __construct(\WPML_Save_Themes_Plugins_Localization_Options $save_localization_options)
        {
        }
        public function add_hooks()
        {
        }
        public function update_localization_options()
        {
        }
        /** @return bool */
        private function is_valid_request()
        {
        }
    }
    class WPML_Theme_Plugin_Localization_UI_Hooks
    {
        /** @var WPML_Theme_Plugin_Localization_UI */
        private $localization_ui;
        /** @var WPML_Theme_Plugin_Localization_Options_UI */
        private $options_ui;
        /**
         * WPML_Theme_Plugin_Localization_UI_Hooks constructor.
         *
         * @param WPML_Theme_Plugin_Localization_UI         $localization_ui
         * @param WPML_Theme_Plugin_Localization_Options_UI $options_ui
         */
        public function __construct(\WPML_Theme_Plugin_Localization_UI $localization_ui, \WPML_Theme_Plugin_Localization_Options_UI $options_ui)
        {
        }
        public function add_hooks()
        {
        }
        public function enqueue_styles()
        {
        }
        public function render_options_ui()
        {
        }
    }
    class WPML_Save_Themes_Plugins_Localization_Options
    {
        /** @var SitePress */
        private $sitepress;
        /**
         * WPML_Save_Themes_Plugins_Localization_Options constructor.
         *
         * @param SitePress $sitepress
         */
        public function __construct(\SitePress $sitepress)
        {
        }
        /** @param array $settings */
        public function save_settings($settings)
        {
        }
        /** @return array */
        private function get_settings()
        {
        }
    }
    interface IWPML_Theme_Plugin_Localization_UI_Strategy
    {
        public function get_model();
        public function get_template();
    }
    class WPML_Theme_Plugin_Localization_Options_UI implements \IWPML_Theme_Plugin_Localization_UI_Strategy
    {
        /** @var SitePress */
        private $sitepress;
        public function __construct(\SitePress $sitepress)
        {
        }
        /** @return array */
        public function get_model()
        {
        }
        /** @return string */
        public function get_template()
        {
        }
    }
    class WPML_Themes_Plugin_Localization_UI_Hooks_Factory implements \IWPML_Backend_Action_Loader, \IWPML_Deferred_Action_Loader
    {
        /** @return WPML_Theme_Plugin_Localization_UI_Hooks */
        public function create()
        {
        }
        /** @return string */
        public function get_load_action()
        {
        }
    }
}
namespace WPML\TM\AdminBar {
    class Hooks implements \IWPML_Frontend_Action, \IWPML_DIC_Action
    {
        /** @var \WPML_Post_Translation */
        private $postTranslations;
        public function __construct(\WPML_Post_Translation $postTranslations)
        {
        }
        public function add_hooks()
        {
        }
        public function addTranslateMenuItem(\WP_Admin_Bar $wpAdminMenu)
        {
        }
        public function enqueueScripts()
        {
        }
    }
}
namespace {
    abstract class WPML_TM_AJAX_Factory_Obsolete
    {
        protected $ajax_actions;
        /**
         * @var WPML_WP_API
         */
        protected $wpml_wp_api;
        public function __construct(&$wpml_wp_api)
        {
        }
        protected function init()
        {
        }
        protected function add_ajax_action($handle, $callback)
        {
        }
        private function add_ajax_actions()
        {
        }
        public abstract function enqueue_resources($hook_suffix);
    }
    class WPML_TM_Service_Activation_AJAX extends \WPML_TM_AJAX_Factory_Obsolete
    {
        private $script_handle = 'wpml_tm_service_activation';
        private $ignore_local_jobs;
        /**
         * @var WPML_Translation_Job_Factory
         */
        private $job_factory;
        /**
         * @param WPML_WP_API                  $wpml_wp_api
         * @param WPML_Translation_Job_Factory $job_factory
         */
        public function __construct(&$wpml_wp_api, &$job_factory)
        {
        }
        public function get_ignore_local_jobs()
        {
        }
        public function set_ignore_local_jobs($value)
        {
        }
        public function cancel_open_local_translators_jobs()
        {
        }
        public function keep_open_local_translators_jobs()
        {
        }
        public function register_resources()
        {
        }
        public function enqueue_resources($hook_suffix)
        {
        }
    }
}
namespace WPML\TranslationRoles\UI {
    class Initializer
    {
        public static function loadJS()
        {
        }
        public static function getData()
        {
        }
        public static function getEndPoints()
        {
        }
        public static function getTranslationData(callable $userExtra = null)
        {
        }
        /**
         * @param \WP_User|null $currentUser
         *
         * @return array
         */
        private static function getTranslationManagerRoles($currentUser)
        {
        }
        /**
         * @param callable $userExtra
         *
         * @return array
         * @throws \WPML\Auryn\InjectionException
         */
        private static function getManagers(callable $userExtra = null)
        {
        }
    }
}
namespace WPML\TranslationRoles {
    class GetTranslatorRecords implements \WPML\Ajax\IHandler
    {
        /**
         * @inheritDoc
         */
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    abstract class SaveUser implements \WPML\Ajax\IHandler
    {
        /**
         * @param Collection $data
         *
         * @return Left|Right
         */
        protected static function getUser(\WPML\Collect\Support\Collection $data)
        {
        }
        /**
         * @param Collection $data
         *
         * @return Left|Right
         */
        public static function createNewWpUser(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    class SaveTranslator extends \WPML\TranslationRoles\SaveUser
    {
        /**
         * @inheritDoc
         */
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    abstract class Remove implements \WPML\Ajax\IHandler
    {
        /**
         * @inheritDoc
         */
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
        protected static abstract function getCap();
        protected function msgUserNotFound()
        {
        }
    }
    class RemoveManager extends \WPML\TranslationRoles\Remove
    {
        protected static function getCap()
        {
        }
    }
    class FindAvailableByRole implements \WPML\Ajax\IHandler
    {
        const USER_SEARCH_LIMIT = 10;
        /**
         * @inheritDoc
         */
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    class SaveManager extends \WPML\TranslationRoles\SaveUser
    {
        const TRANSLATION_MANAGER_INSTRUCTIONS_TEMPLATE = 'notification/translation-manager-instructions.twig';
        /**
         * @inheritDoc
         */
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
        public static function sendInstructions(\WP_User $manager)
        {
        }
    }
    class GetManagerRecords implements \WPML\Ajax\IHandler
    {
        /**
         * @inheritDoc
         */
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    class RemoveTranslator extends \WPML\TranslationRoles\Remove
    {
        /**
         * @inheritDoc
         */
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
        protected static function getCap()
        {
        }
    }
}
namespace {
    class WPML_WP_Options_General_Hooks implements \IWPML_Action
    {
        public function add_hooks()
        {
        }
        public function admin_enqueue_scripts($hook)
        {
        }
    }
    /**
     * Class WPML_Current_Screen_Loader_Factory
     *
     * @author OnTheGoSystems
     */
    abstract class WPML_Current_Screen_Loader_Factory implements \IWPML_Backend_Action_Loader, \IWPML_Deferred_Action_Loader
    {
        /** @return string */
        public function get_load_action()
        {
        }
        /** @return string */
        protected abstract function get_screen_regex();
        /** @return null|IWPML_Action */
        protected abstract function create_hooks();
        /** @return null|IWPML_Action */
        public function create()
        {
        }
        /** return bool */
        private function is_on_matching_screen()
        {
        }
    }
    class WPML_WP_Options_General_Hooks_Factory extends \WPML_Current_Screen_Loader_Factory
    {
        protected function get_screen_regex()
        {
        }
        protected function create_hooks()
        {
        }
    }
    class WPML_TM_Troubleshooting_Reset_Pro_Trans_Config_UI
    {
        const TROUBLESHOOTING_RESET_PRO_TRANS_TEMPLATE = 'reset-pro-trans-config.twig';
        /**
         * Template service.
         *
         * @var IWPML_Template_Service
         */
        private $template_service;
        /**
         * WPML_TM_Troubleshooting_Reset_Pro_Trans_Config_UI constructor.
         *
         * @param IWPML_Template_Service $template_service WPML_Twig_Template twig service.
         */
        public function __construct(\IWPML_Template_Service $template_service)
        {
        }
        /**
         * Returns of template service render result.
         *
         * @return string
         */
        public function show()
        {
        }
        /**
         * Returns model array for Troubleshooting Reset Pro Trans.
         *
         * @return array
         */
        private function get_model()
        {
        }
    }
    class WPML_TM_Troubleshooting_Reset_Pro_Trans_Config_UI_Factory
    {
        /**
         * Sets template base directory.
         */
        private function get_template_base_dir()
        {
        }
        /**
         * Creates WPML_TM_Troubleshooting_Reset_Pro_Trans_Config_UI instance
         *
         * @return WPML_TM_Troubleshooting_Reset_Pro_Trans_Config_UI
         */
        public function create()
        {
        }
    }
}
namespace WPML\TM\Troubleshooting {
    class ResetPreferredTranslationService implements \IWPML_Backend_Action
    {
        const ACTION_ID = 'wpml-tm-reset-preferred-translation-service';
        public function add_hooks()
        {
        }
        public function displayButton()
        {
        }
        public function resetAndFetchPreferredTS()
        {
        }
        public function enqueueScripts($page)
        {
        }
    }
}
namespace WPML\TM\Troubleshooting\SynchronizeSourceIdOfATEJobs {
    class TriggerSynchronization implements \IWPML_Backend_Action, \IWPML_DIC_Action
    {
        const ACTION_ID = 'wpml-tm-ate-source-id-migration';
        /** @var CommandsStatus */
        private $commandStatus;
        /**
         * @param CommandsStatus $commandStatus
         */
        public function __construct(\WPML\Upgrade\CommandsStatus $commandStatus)
        {
        }
        public function add_hooks()
        {
        }
        public function displayButton()
        {
        }
        public function enqueueScripts($hook)
        {
        }
        public function clearExecutedStateToForceUpgrade()
        {
        }
    }
}
namespace {
    class WPML_TM_Troubleshooting_Reset_Pro_Trans_Config extends \WPML_TM_AJAX_Factory_Obsolete
    {
        const SCRIPT_HANDLE = 'wpml_reset_pro_trans_config';
        /**
         * Wpdb Object to perform DB queries.
         *
         * @var wpdb $wpdb
         */
        private $wpdb;
        /**
         * SitePress object - superclass for all WPML classes using the global wpdb object.
         *
         * @var SitePress
         */
        private $sitepress;
        /**
         * Translation Proxy service.
         *
         * @var WPML_Translation_Proxy_API $translation_proxy
         */
        private $translation_proxy;
        /**
         * WPML_TM_Troubleshooting_Clear_TS constructor.
         *
         * @param SitePress                  $sitepress SitePress object.
         * @param WPML_Translation_Proxy_API $translation_proxy Translation Proxy service.
         * @param WPML_WP_API                $wpml_wp_api WPML WordPress API wrapper.
         * @param wpdb                       $wpdb Wpdb Object to perform DB queries.
         */
        public function __construct(&$sitepress, &$translation_proxy, &$wpml_wp_api, &$wpdb)
        {
        }
        /**
         * Loading actions.
         */
        public function load_action()
        {
        }
        /**
         * Adding WP hooks.
         */
        private function add_hooks()
        {
        }
        /**
         * Registering WP scripts.
         */
        public function register_resources()
        {
        }
        /**
         * Enqueue WordPress resources.
         *
         * @param string $hook_suffix Hook suffix.
         */
        public function enqueue_resources($hook_suffix)
        {
        }
        /**
         * Rendering user interface.
         */
        public function render_ui()
        {
        }
        /**
         * Resetting professional translation configuration action.
         *
         * @return array|null
         */
        public function reset_pro_translation_configuration_action()
        {
        }
        /**
         * Implementation of core class functionality - resetting professional translation configuration.
         *
         * @return string
         */
        public function reset_pro_translation_configuration()
        {
        }
    }
    class WPML_TM_User
    {
        /** @var  TranslationManagement $tm_instance */
        protected $tm_instance;
        /**
         * WPML_Custom_Field_Setting_Factory constructor.
         *
         * @param TranslationManagement $tm_instance
         */
        public function __construct(\TranslationManagement $tm_instance)
        {
        }
    }
    /**
     * Class WPML_URL_Converter_User
     *
     * @since 3.2.3
     */
    abstract class WPML_URL_Converter_User
    {
        /** @var  WPML_URL_Converter */
        protected $url_converter;
        /**
         * @param \WPML_URL_Converter $url_converter
         */
        public function __construct(&$url_converter)
        {
        }
    }
    class WPML_Set_Language extends \WPML_Full_Translation_API
    {
        /**
         * @param int           $el_id the element's ID (for terms we use the `term_taxonomy_id`)
         * @param string        $el_type
         * @param int|bool|null $trid Trid the element is to be assigned to. Input that is == false will cause the term to
         *                            be assigned a new trid and potential translation relations to/from it to disappear.
         * @param string        $language_code
         * @param null|string   $src_language_code
         * @param bool          $check_duplicates
         *
         * @return bool|int|null|string
         */
        public function set($el_id, $el_type, $trid, $language_code, $src_language_code = \null, $check_duplicates = \true)
        {
        }
        /**
         * Returns the translation id belonging to a specific trid, language_code combination
         *
         * @param int    $trid
         * @param string $lang
         *
         * @return null|int
         */
        private function trid_lang_trans_id($trid, $lang)
        {
        }
        /**
         * Changes the source_language_code of an element
         *
         * @param int    $trid
         * @param int    $el_id
         * @param string $el_type
         * @param string $language_code
         * @param string $src_language_code
         */
        private function change_translation_of($trid, $el_id, $el_type, $language_code, $src_language_code)
        {
        }
        /**
         * @param string $el_type
         * @param int    $el_id
         */
        private function delete_existing_row($el_type, $el_id)
        {
        }
        /**
         * Inserts a new row into icl_translations
         *
         * @param int    $el_id
         * @param int    $trid
         * @param string $el_type
         * @param string $language_code
         * @param string $src_language_code
         *
         * @return int Translation ID of the new row
         */
        private function insert_new_row($el_id, $trid, $el_type, $language_code, $src_language_code)
        {
        }
        /**
         * Checks if a row exists for a concrete id, type and trid combination
         * in icl_translations.
         *
         * @param int    $el_id
         * @param string $el_type
         * @param int    $trid
         *
         * @return null|int
         */
        private function is_language_change($el_id, $el_type, $trid)
        {
        }
        /**
         * Checks if a given trid, language_code combination contains a placeholder with NULL element_id
         * and if so returns the translation id of this row.
         *
         * @param int    $trid
         * @param string $language_code
         *
         * @return null|string translation id
         */
        private function is_placeholder_update($trid, $language_code)
        {
        }
        /**
         * Checks if a row in icl_translations exists for a concrete element type and id combination
         *
         * @param int    $el_id
         * @param string $el_type
         *
         * @return null|int
         */
        private function existing_element($el_id, $el_type)
        {
        }
        /**
         * Checks if a trid contains an existing translation other than a specific element id and deletes that row if it
         * exists.
         *
         * @param int    $trid
         * @param string $language_code
         * @param int    $correct_element_id
         */
        private function maybe_delete_orphan($trid, $language_code, $correct_element_id)
        {
        }
        /**
         * Checks if a duplicate element_id already exists with a different than the input type.
         * This only applies to posts and taxonomy terms.
         *
         * @param string $el_type
         * @param int    $el_id
         *
         * @return null|string null if no duplicate icl translations entry is found
         * having a different than the input element type, the element type if a
         * duplicate row is found.
         */
        private function check_duplicate($el_type, $el_id)
        {
        }
        private function duplicate_from_db($el_id, $el_type, $_type)
        {
        }
        private function clear_cache()
        {
        }
    }
    class WPML_TM_Job_Element_Entity
    {
        /** @var int */
        private $id;
        /** @var int */
        private $content_id;
        /** @var int */
        private $timestamp;
        /** @var string */
        private $type;
        /** @var string */
        private $format;
        /** @var bool */
        private $translatable;
        /** @var string */
        private $data;
        /** @var string */
        private $data_translated;
        /** @var bool */
        private $finished;
        /**
         * @param int    $id
         * @param int    $content_id
         * @param int    $timestamp
         * @param string $type
         * @param string $format
         * @param bool   $is_translatable
         * @param string $data
         * @param string $data_translated
         * @param bool   $finished
         */
        public function __construct($id, $content_id, $timestamp, $type, $format, $is_translatable, $data, $data_translated, $finished)
        {
        }
        /**
         * @return int
         */
        public function get_id()
        {
        }
        /**
         * @return int
         */
        public function get_content_id()
        {
        }
        /**
         * @return int
         */
        public function get_timestamp()
        {
        }
        /**
         * @return string
         */
        public function get_type()
        {
        }
        /**
         * @return string
         */
        public function get_format()
        {
        }
        /**
         * @return bool
         */
        public function is_translatable()
        {
        }
        /**
         * @return string
         */
        public function get_data()
        {
        }
        /**
         * @return string
         */
        public function get_data_translated()
        {
        }
        /**
         * @return bool
         */
        public function is_finished()
        {
        }
    }
    class WPML_TM_Jobs_Date_Range
    {
        /** @var DateTime|null */
        private $begin;
        /** @var DateTime|null */
        private $end;
        /**
         * Specify how we should treat date values which are NULL
         *
         * @var bool
         */
        private $include_null_date;
        /**
         * @param DateTime|null $begin
         * @param DateTime|null $end
         * @param bool          $include_null_date
         */
        public function __construct(\DateTime $begin = \null, \DateTime $end = \null, $include_null_date = \false)
        {
        }
        /**
         * @return DateTime|null
         */
        public function get_begin()
        {
        }
        /**
         * @return DateTime|null
         */
        public function get_end()
        {
        }
        /**
         * @return bool
         */
        public function is_include_null_date()
        {
        }
    }
}
namespace WPML\TM\Jobs\Query {
    interface Query
    {
        /**
         * @param WPML_TM_Jobs_Search_Params $params
         *
         * @return string
         */
        public function get_data_query(\WPML_TM_Jobs_Search_Params $params);
        /**
         * @param WPML_TM_Jobs_Search_Params $params
         *
         * @return int
         */
        public function get_count_query(\WPML_TM_Jobs_Search_Params $params);
    }
    abstract class AbstractQuery implements \WPML\TM\Jobs\Query\Query
    {
        /** @var wpdb */
        protected $wpdb;
        /** @var QueryBuilder */
        protected $query_builder;
        /** @var string */
        protected $title_column = 'posts.post_title';
        /** @var string */
        protected $batch_name_column = 'batches.batch_name';
        /**
         * @param wpdb         $wpdb
         * @param QueryBuilder $query_builder
         */
        public function __construct(\wpdb $wpdb, \WPML\TM\Jobs\Query\QueryBuilder $query_builder)
        {
        }
        public function get_data_query(\WPML_TM_Jobs_Search_Params $params)
        {
        }
        public function get_count_query(\WPML_TM_Jobs_Search_Params $params)
        {
        }
        /**
         * @param WPML_TM_Jobs_Search_Params $params
         * @param array                      $columns
         *
         * @return string
         */
        protected function build_query(\WPML_TM_Jobs_Search_Params $params, array $columns)
        {
        }
        /**
         * @param WPML_TM_Jobs_Search_Params $params
         *
         * @return bool
         */
        protected function check_job_type(\WPML_TM_Jobs_Search_Params $params)
        {
        }
        /**
         * @return string
         */
        protected abstract function get_type();
        protected function define_joins(\WPML\TM\Jobs\Query\QueryBuilder $query_builder)
        {
        }
        protected abstract function add_resource_join(\WPML\TM\Jobs\Query\QueryBuilder $query_builder);
        protected function define_filters(\WPML\TM\Jobs\Query\QueryBuilder $query_builder, \WPML_TM_Jobs_Search_Params $params)
        {
        }
        private function set_status_filter(\WPML\TM\Jobs\Query\QueryBuilder $query_builder, \WPML_TM_Jobs_Search_Params $params)
        {
        }
        private function set_scope_filter(\WPML\TM\Jobs\Query\QueryBuilder $query_builder, \WPML_TM_Jobs_Search_Params $params)
        {
        }
    }
    class PostQuery extends \WPML\TM\Jobs\Query\AbstractQuery
    {
        /**
         * @param  QueryBuilder  $query_builder
         */
        protected function add_resource_join(\WPML\TM\Jobs\Query\QueryBuilder $query_builder)
        {
        }
        protected function get_type()
        {
        }
    }
    class PackageQuery extends \WPML\TM\Jobs\Query\PostQuery
    {
        /** @var string */
        protected $title_column = 'string_packages.title';
        protected function add_resource_join(\WPML\TM\Jobs\Query\QueryBuilder $query_builder)
        {
        }
        protected function get_type()
        {
        }
    }
    class OrderQueryHelper
    {
        public function get_order(\WPML_TM_Jobs_Search_Params $params)
        {
        }
        /**
         * @param WPML_TM_Jobs_Search_Params $params
         *
         * @return array
         */
        private function map_sort_parameters(\WPML_TM_Jobs_Search_Params $params)
        {
        }
    }
    class LimitQueryHelper
    {
        /**
         * @param WPML_TM_Jobs_Search_Params $params
         *
         * @return string
         */
        public function get_limit(\WPML_TM_Jobs_Search_Params $params)
        {
        }
    }
    class StringsBatchQuery extends \WPML\TM\Jobs\Query\AbstractQuery
    {
        /** @var string */
        protected $title_column = 'translation_batches.batch_name';
        protected function add_resource_join(\WPML\TM\Jobs\Query\QueryBuilder $query_builder)
        {
        }
        protected function get_type()
        {
        }
    }
    class QueryBuilder
    {
        /** @var wpdb */
        private $wpdb;
        /** @var LimitQueryHelper */
        protected $limit_helper;
        /** @var OrderQueryHelper */
        protected $order_helper;
        /** @var array */
        private $columns = array();
        /** @var string */
        private $from;
        /** @var array */
        private $joins = array();
        /** @var array */
        private $where = array();
        /** @var string */
        private $order;
        /** @var string */
        private $limit;
        /**
         * @param LimitQueryHelper $limit_helper
         * @param OrderQueryHelper $order_helper
         */
        public function __construct(\WPML\TM\Jobs\Query\LimitQueryHelper $limit_helper, \WPML\TM\Jobs\Query\OrderQueryHelper $order_helper)
        {
        }
        /**
         * @param array $columns
         *
         * @return self
         */
        public function set_columns(array $columns)
        {
        }
        /**
         * @param $column
         *
         * @return self
         */
        public function add_column($column)
        {
        }
        /**
         * @param string $from
         *
         * @return self
         */
        public function set_from($from)
        {
        }
        /**
         * @param $join
         *
         * @return self
         */
        public function add_join($join)
        {
        }
        /**
         * @param                            $column
         * @param WPML_TM_Jobs_Search_Params $params
         *
         * @return self
         */
        public function set_status_filter($column, \WPML_TM_Jobs_Search_Params $params)
        {
        }
        /**
         * @param string     $column
         * @param array|null $values
         *
         * @return $this
         */
        public function set_multi_value_text_filter($column, $values)
        {
        }
        /**
         * @param                            $column
         * @param WPML_TM_Jobs_Search_Params $params
         *
         * @return $this
         */
        public function set_source_language($column, \WPML_TM_Jobs_Search_Params $params)
        {
        }
        /**
         * @param                            $column
         * @param WPML_TM_Jobs_Search_Params $params
         *
         * @return $this
         */
        public function set_target_language($column, \WPML_TM_Jobs_Search_Params $params)
        {
        }
        public function set_translated_by_filter($local_translator_column, $translation_service_column, \WPML_TM_Jobs_Search_Params $params)
        {
        }
        /**
         * @param string    $column
         * @param int|int[] $value
         *
         * @return $this
         */
        public function set_numeric_value_filter($column, $value)
        {
        }
        /**
         * @param                            $column
         * @param WPML_TM_Jobs_Search_Params $params
         *
         * @return $this
         */
        public function set_tp_id_filter($column, \WPML_TM_Jobs_Search_Params $params)
        {
        }
        /**
         * @param string                  $column
         * @param WPML_TM_Jobs_Date_Range $date_range
         *
         * @return self
         */
        public function set_date_range($column, \WPML_TM_Jobs_Date_Range $date_range)
        {
        }
        public function set_needs_review()
        {
        }
        public function set_max_retries($maxRetries)
        {
        }
        /**
         * @param bool $automatic
         */
        public function set_automatic($automatic = true)
        {
        }
        /**
         * @param int $maxAteSyncCount
         */
        public function set_max_ate_sync_count($maxAteSyncCount)
        {
        }
        public function set_set_excluded_jobs()
        {
        }
        /**
         * @param string $where
         *
         * @return self
         */
        public function add_AND_where_condition($where)
        {
        }
        /**
         * @param WPML_TM_Jobs_Search_Params $params
         *
         * @return self
         */
        public function set_order(\WPML_TM_Jobs_Search_Params $params)
        {
        }
        /**
         * @param WPML_TM_Jobs_Search_Params $params
         *
         * @return self
         */
        public function set_limit(\WPML_TM_Jobs_Search_Params $params)
        {
        }
        public function build()
        {
        }
    }
    class StringQuery implements \WPML\TM\Jobs\Query\Query
    {
        /**
         * WP database instance
         *
         * @var wpdb
         */
        protected $wpdb;
        /**
         * Query builder instance
         *
         * @var QueryBuilder
         */
        protected $query_builder;
        /** @var string */
        protected $batch_name_column = 'batches.batch_name';
        /**
         * @param wpdb         $wpdb          WP database instance.
         * @param QueryBuilder $query_builder Query builder instance.
         */
        public function __construct(\wpdb $wpdb, \WPML\TM\Jobs\Query\QueryBuilder $query_builder)
        {
        }
        /**
         * Get data query
         *
         * @param WPML_TM_Jobs_Search_Params $params Job search params.
         *
         * @return string
         */
        public function get_data_query(\WPML_TM_Jobs_Search_Params $params)
        {
        }
        /**
         * Get count query
         *
         * @param WPML_TM_Jobs_Search_Params $params Job search params.
         *
         * @return int|string
         */
        public function get_count_query(\WPML_TM_Jobs_Search_Params $params)
        {
        }
        /**
         * Build query
         *
         * @param WPML_TM_Jobs_Search_Params $params  Job search params.
         * @param array                      $columns Database columns.
         *
         * @return string
         */
        private function build_query(\WPML_TM_Jobs_Search_Params $params, array $columns)
        {
        }
        /**
         * Check job type.
         *
         * @param WPML_TM_Jobs_Search_Params $params Job search params.
         *
         * @return bool
         */
        protected function check_job_type(\WPML_TM_Jobs_Search_Params $params)
        {
        }
        /**
         * Define joins
         *
         * @param QueryBuilder $query_builder Query builder instance.
         */
        private function define_joins(\WPML\TM\Jobs\Query\QueryBuilder $query_builder)
        {
        }
        /**
         * Define filters
         *
         * @param QueryBuilder               $query_builder Query builder instance.
         * @param WPML_TM_Jobs_Search_Params $params Job search params.
         */
        private function define_filters(\WPML\TM\Jobs\Query\QueryBuilder $query_builder, \WPML_TM_Jobs_Search_Params $params)
        {
        }
        private function set_scope_filter(\WPML\TM\Jobs\Query\QueryBuilder $query_builder, \WPML_TM_Jobs_Search_Params $params)
        {
        }
    }
    class CompositeQuery implements \WPML\TM\Jobs\Query\Query
    {
        const METHOD_UNION = 'union';
        const METHOD_COUNT = 'count';
        /**
         * Job queries
         *
         * @var Query[]
         */
        private $queries;
        /**
         * Limit query helper
         *
         * @var LimitQueryHelper
         */
        private $limit_query_helper;
        /**
         * Order query helper
         *
         * @var OrderQueryHelper
         */
        private $order_query_helper;
        /**
         * @param Query[]  $queries      Job queries.
         * @param LimitQueryHelper $limit_helper Limit helper.
         * @param OrderQueryHelper $order_helper Order helper.
         *
         * @throws InvalidArgumentException In case of error.
         */
        public function __construct(array $queries, \WPML\TM\Jobs\Query\LimitQueryHelper $limit_helper, \WPML\TM\Jobs\Query\OrderQueryHelper $order_helper)
        {
        }
        /**
         * Get data query
         *
         * @param WPML_TM_Jobs_Search_Params $params Job search params.
         *
         * @throws InvalidArgumentException In case of error.
         * @return string
         */
        public function get_data_query(\WPML_TM_Jobs_Search_Params $params)
        {
        }
        /**
         * Get count query
         *
         * @param WPML_TM_Jobs_Search_Params $params Job search params.
         *
         * @return int|string
         */
        public function get_count_query(\WPML_TM_Jobs_Search_Params $params)
        {
        }
        /**
         * Get SQL request string
         *
         * @param WPML_TM_Jobs_Search_Params $params Job search params.
         * @param string                     $method Query method.
         *
         * @throws InvalidArgumentException In case of error.
         * @throws RuntimeException In case of error.
         * @return string
         */
        private function get_sql(\WPML_TM_Jobs_Search_Params $params, $method)
        {
        }
        /**
         * Get union
         *
         * @param array $parts Query parts.
         *
         * @return string
         */
        private function get_union(array $parts)
        {
        }
        /**
         * Get count
         *
         * @param array $parts Query parts.
         *
         * @return string
         */
        private function get_count(array $parts)
        {
        }
        /**
         * Is query valid
         *
         * @param mixed $query SQL query.
         *
         * @return bool
         */
        private function is_query_valid($query)
        {
        }
    }
}
namespace WPML\TM\Jobs\Utils {
    class ElementLinkFactory
    {
        public static function create()
        {
        }
    }
    class ElementLink
    {
        /** @var WPML_TM_Post_Link_Factory $postLinkFactory */
        private $postLinkFactory;
        /** @var WPML_Post_Translation $postTranslation */
        private $postTranslation;
        public function __construct(\WPML_TM_Post_Link_Factory $postLinkFactory, \WPML_Post_Translation $postTranslation)
        {
        }
        /**
         * @param stdClass $job
         *
         * @return string
         */
        public function getOriginal(\stdClass $job)
        {
        }
        /**
         * @param stdClass $job
         *
         * @return string
         */
        public function getTranslation(\stdClass $job)
        {
        }
        /**
         * @param stdClass    $job
         * @param string      $viewText
         * @param string|null $elementId
         *
         * @return mixed|string|void
         */
        private function get(\stdClass $job, $viewText, $elementId = null)
        {
        }
        /**
         * @param string $elementTypePrefix
         *
         * @return bool
         */
        private function isExternalType($elementTypePrefix)
        {
        }
    }
}
namespace {
    class WPML_TM_Jobs_Repository
    {
        /** @var wpdb */
        private $wpdb;
        /** @var Query */
        private $query_builder;
        /** @var WPML_TM_Job_Elements_Repository */
        private $elements_repository;
        /**
         * @param wpdb                            $wpdb
         * @param Query              $query_builder
         * @param WPML_TM_Job_Elements_Repository $elements_repository
         */
        public function __construct(\wpdb $wpdb, \WPML\TM\Jobs\Query\Query $query_builder, \WPML_TM_Job_Elements_Repository $elements_repository)
        {
        }
        /**
         * @param WPML_TM_Jobs_Search_Params $params
         *
         * @return WPML_TM_Jobs_Collection
         */
        public function get(\WPML_TM_Jobs_Search_Params $params)
        {
        }
        /**
         * @param array $ateJobIds
         *
         * @return bool
         */
        public function increment_ate_sync_count(array $ateJobIds)
        {
        }
        /**
         * @param WPML_TM_Jobs_Search_Params $params
         *
         * @return int
         */
        public function get_count(\WPML_TM_Jobs_Search_Params $params)
        {
        }
        /**
         * @param int    $local_job_id
         * @param string $job_type
         *
         * @throws InvalidArgumentException
         * @return WPML_TM_Job_Entity|false
         */
        public function get_job($local_job_id, $job_type)
        {
        }
        /**
         * @param stdClass $raw_data
         *
         * @return WPML_TM_Job_Entity
         */
        private function build_job_entity(\stdClass $raw_data)
        {
        }
        /**
         * @param stdClass $raw_data
         *
         * @return DateTime|null
         */
        private function get_deadline(\stdClass $raw_data)
        {
        }
    }
    class WPML_TM_Job_Entity
    {
        const POST_TYPE = 'post';
        const STRING_TYPE = 'string';
        const STRING_BATCH = 'st-batch_strings';
        const PACKAGE_TYPE = 'package';
        /** @var int */
        private $id;
        /** @var string */
        private $type;
        /** @var int */
        private $tp_id;
        /** @var WPML_TM_Jobs_Batch */
        private $batch;
        /** @var int */
        private $status;
        /** @var int */
        private $original_element_id;
        /** @var string */
        private $source_language;
        /** @var string */
        private $target_language;
        /** @var string */
        private $translation_service;
        /** @var DateTime */
        private $sent_date;
        /** @var DateTime|null */
        private $deadline;
        /** @var int */
        private $translator_id;
        /** @var int */
        private $revision;
        /** @var WPML_TM_Job_TS_Status */
        private $ts_status;
        /** @var bool */
        private $needs_update;
        /** @var bool  */
        private $has_completed_translation = \false;
        /** @var string */
        private $title;
        /**
         * @param int                $id
         * @param string             $type
         * @param int                $tp_id
         * @param WPML_TM_Jobs_Batch $batch
         * @param int                $status
         */
        public function __construct($id, $type, $tp_id, \WPML_TM_Jobs_Batch $batch, $status)
        {
        }
        /**
         * @deprecated Use `get_rid` instead.
         *
         * This method is deprecated because it caused confusion
         * between the `job_id` and the `rid`.
         *
         * It's actually returning the `rid`.
         *
         * @return int
         */
        public function get_id()
        {
        }
        /**
         * @return int
         */
        public function get_rid()
        {
        }
        /**
         * @return string
         */
        public function get_type()
        {
        }
        /**
         * @return int
         */
        public function get_tp_id()
        {
        }
        /**
         * @return WPML_TM_Jobs_Batch
         */
        public function get_batch()
        {
        }
        /**
         * @return int
         */
        public function get_status()
        {
        }
        /**
         * @param int $status
         */
        public function set_status($status)
        {
        }
        /**
         * @return int
         */
        public function get_original_element_id()
        {
        }
        /**
         * @param int $original_element_id
         */
        public function set_original_element_id($original_element_id)
        {
        }
        /**
         * @return string
         */
        public function get_source_language()
        {
        }
        /**
         * @param string $source_language
         */
        public function set_source_language($source_language)
        {
        }
        /**
         * @return string
         */
        public function get_target_language()
        {
        }
        /**
         * @param string $target_language
         */
        public function set_target_language($target_language)
        {
        }
        /**
         * @return string
         */
        public function get_translation_service()
        {
        }
        /**
         * @param string $translation_service
         */
        public function set_translation_service($translation_service)
        {
        }
        /**
         * @return DateTime
         */
        public function get_sent_date()
        {
        }
        /**
         * @param DateTime $sent_date
         */
        public function set_sent_date(\DateTime $sent_date)
        {
        }
        /**
         * @param int $tp_id
         */
        public function set_tp_id($tp_id)
        {
        }
        /**
         * @return DateTime|null
         */
        public function get_deadline()
        {
        }
        /**
         * @param DateTime|null $deadline
         */
        public function set_deadline(\DateTime $deadline = \null)
        {
        }
        /**
         * @return int
         */
        public function get_translator_id()
        {
        }
        /**
         * @param int $translator_id
         *
         * @return self
         */
        public function set_translator_id($translator_id)
        {
        }
        /**
         * @return int
         */
        public function get_revision()
        {
        }
        /**
         * @param int $revision
         */
        public function set_revision($revision)
        {
        }
        /**
         * @return WPML_TM_Job_TS_Status
         */
        public function get_ts_status()
        {
        }
        /**
         * @param WPML_TM_Job_TS_Status|string $ts_status
         */
        public function set_ts_status($ts_status)
        {
        }
        /**
         * @param WPML_TM_Job_Entity $job
         *
         * @return bool
         */
        public function is_equal(\WPML_TM_Job_Entity $job)
        {
        }
        /**
         * @return bool
         */
        public function does_need_update()
        {
        }
        /**
         * @param bool $needs_update
         */
        public function set_needs_update($needs_update)
        {
        }
        /**
         * @return bool
         */
        public function has_completed_translation()
        {
        }
        /**
         * @param bool $has_completed_translation
         */
        public function set_has_completed_translation($has_completed_translation)
        {
        }
        /**
         * @return string
         */
        public function get_title()
        {
        }
        /**
         * @param  string $title
         */
        public function set_title($title)
        {
        }
        /**
         * @param string $type
         *
         * @return bool
         */
        public static function is_type_valid($type)
        {
        }
    }
    class WPML_TM_Job_Elements_Repository
    {
        /** @var wpdb */
        private $wpdb;
        /**
         * @param wpdb $wpdb
         */
        public function __construct(\wpdb $wpdb)
        {
        }
        /**
         * @param WPML_TM_Post_Job_Entity $job
         *
         * @return WPML_TM_Job_Element_Entity[]
         */
        public function get_job_elements(\WPML_TM_Post_Job_Entity $job)
        {
        }
        /**
         * @param stdClass $raw_data
         *
         * @return WPML_TM_Job_Element_Entity
         */
        private function build_element_entity(\stdClass $raw_data)
        {
        }
    }
    class WPML_TM_Jobs_Collection implements \IteratorAggregate, \Countable
    {
        /** @var WPML_TM_Job_Entity[] */
        private $jobs = array();
        public function __construct(array $jobs)
        {
        }
        /**
         * @param WPML_TM_Job_Entity $job
         */
        private function add(\WPML_TM_Job_Entity $job)
        {
        }
        /**
         * @param int $tp_id
         *
         * @return null|WPML_TM_Job_Entity
         */
        public function get_by_tp_id($tp_id)
        {
        }
        /**
         * @param callable $callback
         *
         * @return WPML_TM_Jobs_Collection
         */
        public function filter($callback)
        {
        }
        /**
         * @param array|int $status
         * @param bool      $exclude
         *
         * @return WPML_TM_Jobs_Collection
         */
        public function filter_by_status($status, $exclude = \false)
        {
        }
        /**
         * @param callable $callback
         * @param bool     $return_job_collection
         *
         * @return array|WPML_TM_Jobs_Collection
         */
        public function map($callback, $return_job_collection = \false)
        {
        }
        public function map_to_property($property)
        {
        }
        /**
         * @param $jobs
         *
         * @return WPML_TM_Jobs_Collection
         */
        public function append($jobs)
        {
        }
        /**
         * @return ArrayIterator
         */
        public function getIterator()
        {
        }
        public function toArray()
        {
        }
        public function count()
        {
        }
    }
    class WPML_TM_Post_Job_Entity extends \WPML_TM_Job_Entity
    {
        /** @var WPML_TM_Job_Element_Entity[]|callable */
        private $elements;
        /** @var int */
        private $translate_job_id;
        /** @var string */
        private $editor;
        /** @var int */
        private $editor_job_id;
        /** @var null|DateTime */
        private $completed_date;
        /** @var bool */
        private $automatic;
        /** @var null|string  */
        private $review_status = \null;
        public function __construct($id, $type, $tp_id, $batch, $status, $elements)
        {
        }
        /**
         * @return WPML_TM_Job_Element_Entity[]
         */
        public function get_elements()
        {
        }
        /**
         * @return int
         */
        public function get_translate_job_id()
        {
        }
        /**
         * @param int $translate_job_id
         */
        public function set_translate_job_id($translate_job_id)
        {
        }
        /**
         * @return string
         */
        public function get_editor()
        {
        }
        /**
         * @param string $editor
         */
        public function set_editor($editor)
        {
        }
        /**
         * @return int
         */
        public function get_editor_job_id()
        {
        }
        /**
         * @param int $editor_job_id
         */
        public function set_editor_job_id($editor_job_id)
        {
        }
        /**
         * @return bool
         */
        public function is_ate_job()
        {
        }
        /**
         * @return bool
         */
        public function is_ate_editor()
        {
        }
        /**
         * @return DateTime|null
         */
        public function get_completed_date()
        {
        }
        /**
         * @param DateTime|null $completed_date
         */
        public function set_completed_date(\DateTime $completed_date = \null)
        {
        }
        /**
         * @return bool
         */
        public function is_automatic()
        {
        }
        /**
         * @param bool $automatic
         */
        public function set_automatic($automatic)
        {
        }
        /**
         * @return string|null
         */
        public function get_review_status()
        {
        }
        /**
         * @param string|null $review_status
         */
        public function set_review_status($review_status)
        {
        }
    }
}
namespace WPML\TM\Jobs {
    class Manual
    {
        /**
         * @param array $params
         *
         * @return \WPML_Translation_Job|null
         */
        public function createOrReuse(array $params)
        {
        }
        private function getOriginalPostId($trid)
        {
        }
        /**
         * @param $jobId
         * @param array $params
         *
         * @return array ( job_id, trid, updated_needed, language_code, post_type )
         */
        private function get_job_data_for_restore($jobId, array $params)
        {
        }
        /**
         * @param string $sourceLangCode
         * @param string $targetLangCode
         * @param string $postId
         *
         * @return bool
         */
        private function can_user_translate($sourceLangCode, $targetLangCode, $postId)
        {
        }
        /**
         * @param $originalPostId
         * @param $targetLangCode
         * @param $elementType
         *
         * @return \WPML_Translation_Job|null
         */
        private function createLocalJob($originalPostId, $targetLangCode, $elementType)
        {
        }
        private function maybeAssignTranslator()
        {
        }
        private function maybeSetJobStatus()
        {
        }
        private function markJobAsManual($jobObject)
        {
        }
        private function isDuplicate(\WPML_Translation_Job $jobObject)
        {
        }
    }
}
namespace {
    class WPML_TM_Jobs_Sorting_Param
    {
        /** @var string */
        private $column;
        /** @var string */
        private $direction;
        /**
         * @param string $column
         * @param string $direction
         */
        public function __construct($column, $direction = 'asc')
        {
        }
        /**
         * @return string
         */
        public function get_column()
        {
        }
        /**
         * @return string
         */
        public function get_direction()
        {
        }
    }
    class WPML_TM_Jobs_Search_Params
    {
        const SCOPE_REMOTE = 'remote';
        const SCOPE_LOCAL = 'local';
        const SCOPE_ALL = 'all';
        const SCOPE_ATE = 'ate';
        private static $scopes = array(self::SCOPE_LOCAL, self::SCOPE_REMOTE, self::SCOPE_ALL, self::SCOPE_ATE);
        /** @var array */
        private $status = array();
        /** @var WPML_TM_Jobs_Needs_Update_Param|null */
        private $needs_update;
        /** @var string */
        private $scope = self::SCOPE_ALL;
        /** @var array */
        private $job_types = array();
        /** @var int[] */
        private $local_job_ids;
        /** @var int */
        private $limit;
        /** @var int */
        private $offset;
        /** @var int */
        private $id;
        /** @var string[] */
        private $title;
        /** @var string[] */
        private $batch_name;
        /** @var string */
        private $source_language;
        /** @var string[] */
        private $target_language;
        /** @var array */
        private $tp_id = '';
        /** @var WPML_TM_Jobs_Sorting_Param[] */
        private $sorting = array();
        /** @var int */
        private $translated_by;
        /** @var WPML_TM_Jobs_Date_Range */
        private $deadline;
        /** @var WPML_TM_Jobs_Date_Range */
        private $sent;
        /** @var WPML_TM_Jobs_Date_Range */
        private $completed_date;
        /** @var int */
        private $original_element_id;
        /** @var bool */
        private $needs_review = \false;
        /** @var bool */
        private $exclude_hidden_jobs = \true;
        /** @var int */
        private $max_ate_retries;
        /** @var bool */
        private $exclude_manual = \false;
        /** @var bool */
        private $exclude_longstanding = \false;
        public function __construct(array $params = array())
        {
        }
        /**
         * @return array
         */
        public function get_status()
        {
        }
        /**
         * @param array $status
         *
         * @return self
         */
        public function set_status(array $status)
        {
        }
        /**
         * @return string
         */
        public function get_scope()
        {
        }
        /**
         * @return array
         */
        public function get_tp_id()
        {
        }
        /**
         * @param string $scope
         *
         * @retun self
         */
        public function set_scope($scope)
        {
        }
        /**
         * @return array
         */
        public function get_job_types()
        {
        }
        /**
         * @param int|array $tp_id
         *
         * @return $this
         */
        public function set_tp_id($tp_id)
        {
        }
        /**
         * @param string|array $job_types
         *
         * @return self
         */
        public function set_job_types($job_types)
        {
        }
        /**
         * @return int|null
         */
        public function get_first_local_job_id()
        {
        }
        /**
         * @return int[]
         */
        public function get_local_job_ids()
        {
        }
        /**
         * @param int $local_job_id
         *
         * @return self
         */
        public function set_local_job_id($local_job_id)
        {
        }
        /**
         * @param int[] $local_job_ids
         *
         * @return self
         */
        public function set_local_job_ids(array $local_job_ids)
        {
        }
        /**
         * @return int
         */
        public function get_limit()
        {
        }
        /**
         * @param int $limit
         *
         * @return self
         */
        public function set_limit($limit)
        {
        }
        /**
         * @return int
         */
        public function get_offset()
        {
        }
        /**
         * @param int $offset
         *
         * @return self
         */
        public function set_offset($offset)
        {
        }
        /**
         * @return int
         */
        public function get_id()
        {
        }
        /**
         * @param int $id
         *
         * @return self
         */
        public function set_id($id)
        {
        }
        /**
         * @return string[]
         */
        public function get_title()
        {
        }
        /**
         * @param array|string $title
         *
         * @return self
         */
        public function set_title($title)
        {
        }
        /**
         * @return string[]
         */
        public function get_batch_name()
        {
        }
        /**
         * @param string[] $batch_name
         */
        public function set_batch_name($batch_name)
        {
        }
        /**
         * @return string
         */
        public function get_source_language()
        {
        }
        /**
         * @param string $source_language
         *
         * @return self
         */
        public function set_source_language($source_language)
        {
        }
        /**
         * @return string[]
         */
        public function get_target_language()
        {
        }
        /**
         * @param array|string $target_language
         *
         * @return self
         */
        public function set_target_language($target_language)
        {
        }
        /**
         * @return WPML_TM_Jobs_Sorting_Param[]
         */
        public function get_sorting()
        {
        }
        /**
         * @param WPML_TM_Jobs_Sorting_Param[] $sorting
         *
         * @return self
         */
        public function set_sorting(array $sorting)
        {
        }
        /**
         * @return int
         */
        public function get_translated_by()
        {
        }
        /**
         * @param int|null $translated_by
         *
         * @return self
         */
        public function set_translated_by($translated_by)
        {
        }
        /**
         * @return WPML_TM_Jobs_Date_Range
         */
        public function get_deadline()
        {
        }
        /**
         * @param WPML_TM_Jobs_Date_Range $deadline
         *
         * @return self
         */
        public function set_deadline(\WPML_TM_Jobs_Date_Range $deadline)
        {
        }
        /**
         * @return WPML_TM_Jobs_Date_Range
         */
        public function get_sent()
        {
        }
        /**
         * @return WPML_TM_Jobs_Date_Range
         */
        public function get_completed_date()
        {
        }
        /**
         * @return int
         */
        public function get_original_element_id()
        {
        }
        /**
         * @param WPML_TM_Jobs_Date_Range $sent
         *
         * @return self
         */
        public function set_sent(\WPML_TM_Jobs_Date_Range $sent)
        {
        }
        /**
         * @param WPML_TM_Jobs_Date_Range $completed_date
         *
         * @return self
         */
        public function set_completed_date(\WPML_TM_Jobs_Date_Range $completed_date)
        {
        }
        /**
         * @param int $original_element_id
         *
         * @return $this
         */
        public function set_original_element_id($original_element_id)
        {
        }
        /**
         * @return WPML_TM_Jobs_Needs_Update_Param|null
         */
        public function get_needs_update()
        {
        }
        /**
         * @param WPML_TM_Jobs_Needs_Update_Param|null $needs_update
         *
         * @return $this
         */
        public function set_needs_update(\WPML_TM_Jobs_Needs_Update_Param $needs_update = \null)
        {
        }
        /**
         * @return bool
         */
        public function needs_review()
        {
        }
        /**
         * @return bool
         */
        public function exclude_hidden_jobs()
        {
        }
        /**
         * @param int $max_ate_retries
         *
         * @return $this
         */
        public function set_max_ate_retries($max_ate_retries)
        {
        }
        /**
         * @return int
         */
        public function get_max_ate_retries()
        {
        }
        /**
         * @param bool $needs_review
         */
        public function set_needs_review($needs_review = \true)
        {
        }
        /**
         * @param bool $exclude_hidden_jobs
         */
        public function set_exclude_hidden_jobs($exclude_hidden_jobs)
        {
        }
        /**
         * @param mixed $value
         *
         * @return bool
         */
        public static function is_valid_scope($value)
        {
        }
        /**
         * @param bool $excludeManual
         */
        public function set_exclude_manual($excludeManual)
        {
        }
        /**
         * @return bool
         */
        public function should_exclude_manual()
        {
        }
        /**
         * @param bool $excludeLongstanding
         */
        public function set_exclude_longstanding($excludeLongstanding)
        {
        }
        /**
         * @return bool
         */
        public function should_exclude_longstanding()
        {
        }
    }
    class WPML_TM_Job_TS_Status
    {
        /** @var string */
        private $status;
        /** @var array */
        private $links = array();
        /**
         * WPML_TM_Job_TS_Status constructor.
         *
         * @param string $status
         * @param array  $links
         */
        public function __construct($status, $links)
        {
        }
        /**
         * @return string
         */
        public function get_status()
        {
        }
        /**
         * @return array
         */
        public function get_links()
        {
        }
        public function __toString()
        {
        }
    }
    class WPML_TM_Jobs_Needs_Update_Param
    {
        const INCLUDE_NEEDS_UPDATE = 'include';
        const EXCLUDE_NEEDS_UPDATE = 'exclude';
        /** @var string */
        private $value;
        /**
         * @param string $value
         */
        public function __construct($value)
        {
        }
        /**
         * @return bool
         */
        public function is_needs_update_excluded()
        {
        }
        /**
         * @return bool
         */
        public function is_needs_update_included()
        {
        }
        /**
         * @param string $value
         *
         * @return bool
         */
        public static function is_valid($value)
        {
        }
    }
    class WPML_TM_Jobs_Batch
    {
        /** @var int */
        private $id;
        /** @var string */
        private $name;
        /** @var int|null */
        private $tp_id;
        /**
         * @param int      $id
         * @param string   $name
         * @param int|null $tp_id
         */
        public function __construct($id, $name, $tp_id = \null)
        {
        }
        /**
         * @return int
         */
        public function get_id()
        {
        }
        /**
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * @return int|null
         */
        public function get_tp_id()
        {
        }
    }
    class WPML_TM_Record_User
    {
        /** @var WPML_TM_Records $tm_records */
        protected $tm_records;
        /**
         * WPML_TM_Record_User constructor.
         *
         * @param WPML_TM_Records $tm_records
         */
        public function __construct(&$tm_records)
        {
        }
    }
    abstract class WPML_TM_Job_Factory_User
    {
        /** @var  WPML_Translation_Job_Factory $tm_job_factory */
        protected $job_factory;
        /**
         * WPML_TM_Xliff_Reader constructor.
         *
         * @param WPML_Translation_Job_Factory $job_factory
         */
        public function __construct($job_factory)
        {
        }
    }
    class WPML_Language
    {
        /** @var SitePress $sitepress */
        private $sitepress;
        /** @var string $code */
        private $code;
        private $lang_details;
        public function __construct(\SitePress $sitepress, $code)
        {
        }
        public function is_valid()
        {
        }
        public function get_code()
        {
        }
        public function get_display_name()
        {
        }
        public function get_flag_url()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Languages_AJAX
    {
        private $sitepress;
        private $default_language;
        /**
         * WPML_Languages_AJAX constructor.
         *
         * @param SitePress $sitepress
         */
        public function __construct(\SitePress $sitepress)
        {
        }
        public function ajax_hooks()
        {
        }
        private function validate_ajax_action()
        {
        }
        public function set_active_languages_action()
        {
        }
        public function set_default_language_action()
        {
        }
    }
    class WPML_Language_Collection
    {
        /** @var SitePress $sitepress */
        private $sitepress;
        /** @var array $languages */
        private $languages = array();
        /**
         * WPML_Language_Collection constructor.
         *
         * @param SitePress $sitepress
         * @param array     $initial_languages Array of language codes
         */
        public function __construct(\SitePress $sitepress, $initial_languages = array())
        {
        }
        public function add($code)
        {
        }
        public function get($code)
        {
        }
        public function get_codes()
        {
        }
    }
}
namespace WPML\Languages {
    class UI implements \IWPML_Backend_Action
    {
        public function add_hooks()
        {
        }
        public static function getData($editPage)
        {
        }
        private static function isEditLanguagePage()
        {
        }
    }
}
namespace {
    class WPML_Language_Records
    {
        private $wpdb;
        private $languages;
        /** @var null|array $locale_lang_map */
        private $locale_lang_map;
        public function __construct(\wpdb $wpdb)
        {
        }
        public function is_valid($code)
        {
        }
        private function load()
        {
        }
        /**
         * @param string $lang_code
         *
         * @return string|null
         */
        public function get_locale($lang_code)
        {
        }
        /**
         * @param string $locale
         *
         * @return string|null
         */
        public function get_language_code($locale)
        {
        }
        private function init_locale_lang_map()
        {
        }
        /**
         * @return array
         */
        public function get_locale_lang_map()
        {
        }
        private function get_table()
        {
        }
    }
    interface IWPML_Current_Language
    {
        public function get_current_language();
        public function get_default_language();
        public function get_admin_language();
    }
    class WPML_TM_API
    {
        /** @var TranslationManagement */
        private $TranslationManagement;
        /** @var WPML_TM_Blog_Translators $blog_translators */
        private $blog_translators;
        /**
         * @var mixed[]
         */
        private $translation_statuses;
        /**
         * WPML_TM_API constructor.
         *
         * @param WPML_TM_Blog_Translators $blog_translators
         * @param TranslationManagement    $TranslationManagement
         */
        public function __construct(&$blog_translators, &$TranslationManagement)
        {
        }
        public function get_translation_status_label($status)
        {
        }
        public function init_hooks()
        {
        }
        /**
         * @param bool        $default
         * @param int|WP_User $user
         * @param array       $args
         *
         * @return bool
         */
        public function is_translator_filter($default, $user, $args)
        {
        }
        public function edit_translator_action($user, $language_pairs)
        {
        }
        /**
         * @param int   $user_id
         * @param array $language_pairs
         */
        private function edit_translator($user_id, $language_pairs)
        {
        }
        public function translator_languages_pairs_filter($default, $user)
        {
        }
        /**
         * @param $user
         *
         * @return int
         */
        private function get_user_id($user)
        {
        }
    }
    class WPML_TM_Records
    {
        /** @var WPDB $wpdb */
        public $wpdb;
        /** @var array $cache */
        private $cache = array('icl_translations' => array(), 'status' => array());
        private $preloaded_statuses = \null;
        /** @var  WPML_Frontend_Post_Actions | WPML_Admin_Post_Actions $wpml_post_translations */
        private $wpml_post_translations;
        /** @var WPML_Term_Translation $wpml_term_translations */
        private $wpml_term_translations;
        public function __construct(\wpdb $wpdb, \WPML_Post_Translation $wpml_post_translations, \WPML_Term_Translation $wpml_term_translations)
        {
        }
        public function wpdb()
        {
        }
        public function get_new_wpml_wp_cache($group = '')
        {
        }
        public function get_post_translations()
        {
        }
        public function get_term_translations()
        {
        }
        /**
         * @param int $translation_id
         *
         * @return WPML_TM_ICL_Translation_Status
         */
        public function icl_translation_status_by_translation_id($translation_id)
        {
        }
        private function maybe_preload_translation_statuses()
        {
        }
        public function get_preloaded_translation_status($translation_id, $rid)
        {
        }
        /**
         * @param int $rid
         *
         * @return WPML_TM_ICL_Translation_Status
         */
        public function icl_translation_status_by_rid($rid)
        {
        }
        /**
         * @param int $job_id
         *
         * @return WPML_TM_ICL_Translate_Job
         */
        public function icl_translate_job_by_job_id($job_id)
        {
        }
        /**
         * @param int $translation_id
         *
         * @return WPML_TM_ICL_Translations
         */
        public function icl_translations_by_translation_id($translation_id)
        {
        }
        /**
         * @param int    $element_id
         * @param string $type_prefix
         *
         * @return WPML_TM_ICL_Translations
         */
        public function icl_translations_by_element_id_and_type_prefix($element_id, $type_prefix)
        {
        }
        /**
         * @param int    $trid
         * @param string $lang
         *
         * @return WPML_TM_ICL_Translations
         */
        public function icl_translations_by_trid_and_lang($trid, $lang)
        {
        }
        /**
         * @param int $trid
         *
         * @return int[]
         */
        public function get_element_ids_from_trid($trid)
        {
        }
    }
    class WPML_Initialize_Language_For_Post_Type
    {
        private $wpdb;
        public function __construct(\wpdb $wpdb)
        {
        }
        public function run($post_type, $default_language)
        {
        }
    }
    class WPML_TM_ICL_Translation_Status
    {
        /** @var wpdb $wpdb */
        public $wpdb;
        private $tm_records;
        private $table = 'icl_translation_status';
        private $translation_id = 0;
        private $rid = 0;
        private $status_result;
        /**
         * WPML_TM_ICL_Translation_Status constructor.
         *
         * @param wpdb            $wpdb
         * @param WPML_TM_Records $tm_records
         * @param int             $id
         * @param string          $type
         */
        public function __construct(\wpdb $wpdb, \WPML_TM_Records $tm_records, $id, $type = 'translation_id')
        {
        }
        /**
         * @param array $args in the same format used by \wpdb::update()
         *
         * @return $this
         */
        public function update($args)
        {
        }
        /**
         * Wrapper for \wpdb::delete()
         */
        public function delete()
        {
        }
        /**
         * @return int
         */
        public function rid()
        {
        }
        /**
         * @return int
         */
        public function status()
        {
        }
        /**
         * @return Just|Nothing
         */
        public function previous()
        {
        }
        /**
         * @return string
         */
        public function md5()
        {
        }
        /**
         * @return int
         */
        public function translation_id()
        {
        }
        public function trid()
        {
        }
        public function element_id()
        {
        }
        /**
         * @return int
         */
        public function translator_id()
        {
        }
        /**
         * @return string|int
         */
        public function service()
        {
        }
        private function get_where()
        {
        }
        private function get_args()
        {
        }
        /**
         * @param $id
         *
         * @return \WPML_TM_ICL_Translation_Status
         * @throws \WPML\Auryn\InjectionException
         */
        public static function makeByRid($id)
        {
        }
    }
    class WPML_TM_ICL_Translations extends \WPML_TM_Record_User
    {
        private $table = 'icl_translations';
        private $fields = array();
        private $related = array();
        /** @var wpdb $wpdb */
        private $wpdb;
        private $translation_id = 0;
        /** @var  WPML_Frontend_Post_Actions | WPML_Admin_Post_Actions $post_translations */
        private $post_translations;
        /** @var WPML_Term_Translation $term_translations */
        private $term_translations;
        /**
         * WPML_TM_ICL_Translations constructor.
         *
         * @throws InvalidArgumentException if given data does not correspond to a
         * record in icl_translations
         *
         * @param WPML_TM_Records $tm_records
         * @param int|array       $id
         * @param string          $type translation id, trid_lang or id_prefix for now
         */
        public function __construct(&$tm_records, $id, $type = 'translation_id')
        {
        }
        private function build_from_element_id($id)
        {
        }
        private function build_from_trid($id)
        {
        }
        /**
         * @return WPML_TM_ICL_Translations[]
         */
        public function translations()
        {
        }
        private function select_by($function, $field)
        {
        }
        /**
         * @return null|int
         */
        public function trid()
        {
        }
        /**
         * @return int
         */
        public function translation_id()
        {
        }
        /**
         * @return null|int
         */
        public function element_id()
        {
        }
        /**
         * @return string|null
         */
        public function language_code()
        {
        }
        /**
         * @return string|null
         */
        public function source_language_code()
        {
        }
        /**
         *
         * @return $this
         */
        public function delete()
        {
        }
        private function select_field($field)
        {
        }
        private function get_args()
        {
        }
        private function select_translation_id($where, $prepare_args)
        {
        }
    }
    class WPML_TM_Update_Translation_Status
    {
        /**
         * @param int $job_id
         * @param int $new_status
         */
        public static function by_job_id($job_id, $new_status)
        {
        }
    }
    class WPML_TM_ICL_Translate_Job
    {
        private $table = 'icl_translate_job';
        private $job_id = 0;
        /** @var WPML_TM_Records $tm_records */
        private $tm_records;
        /**
         * WPML_TM_ICL_Translation_Status constructor.
         *
         * @param WPML_TM_Records $tm_records
         * @param int             $job_id
         */
        public function __construct(\WPML_TM_Records $tm_records, $job_id)
        {
        }
        /**
         * @return int
         */
        public function translator_id()
        {
        }
        /**
         * @return string|int
         */
        public function service()
        {
        }
        /**
         * @param array $args in the same format used by \wpdb::update()
         *
         * @return $this
         */
        public function update($args)
        {
        }
        /**
         * @return bool true if this job is the most recent job for the element it
         * belongs to and hence may be updated.
         */
        public function is_open()
        {
        }
        public function rid()
        {
        }
        public function editor()
        {
        }
        private function get_job_column($column)
        {
        }
    }
    class WPML_TM_Loader
    {
        /**
         * Sets up the XLIFF class handling the frontend xliff related hooks
         * and rendering
         */
        public function load_xliff_frontend()
        {
        }
        /**
         * Wrapper for \tm_after_load()
         */
        public function tm_after_load()
        {
        }
        /**
         * @param WPML_WP_API $wpml_wp_api
         */
        public function load_pro_translation($wpml_wp_api)
        {
        }
    }
    /**
     * Class WPML_Translation_Management
     */
    class WPML_Translation_Management
    {
        const PAGE_SLUG_MANAGEMENT = '/menu/main.php';
        const PAGE_SLUG_SETTINGS = '/menu/settings';
        const PAGE_SLUG_QUEUE = '/menu/translations-queue.php';
        var $load_priority = 200;
        /** @var  SitePress $sitepress */
        protected $sitepress;
        /** @var  WPML_TM_Loader $tm_loader */
        private $tm_loader;
        /** @var  TranslationManagement $tm_instance */
        private $tm_instance;
        /** @var  WPML_Translations_Queue $tm_queue */
        private $tm_queue;
        /** @var WPML_TM_Menus_Management $wpml_tm_menus_management */
        private $wpml_tm_menus_management;
        /** @var WPML_Ajax_Route $ajax_route */
        private $ajax_route;
        /**
         * @var WPML_TP_Translator
         */
        private $wpml_tp_translator;
        /** @var  WPML_UI_Screen_Options_Pagination $dashboard_screen_options */
        private $dashboard_screen_options;
        /**
         * WPML_Translation_Management constructor.
         *
         * @param SitePress             $sitepress
         * @param WPML_TM_Loader        $tm_loader
         * @param TranslationManagement $tm_instance
         * @param WPML_TP_Translator    $wpml_tp_translator
         */
        function __construct($sitepress, $tm_loader, $tm_instance, \WPML_TP_Translator $wpml_tp_translator = \null)
        {
        }
        public function init()
        {
        }
        public function load()
        {
        }
        public function api_hooks()
        {
        }
        /**
         * @return bool `true` if notices were added
         */
        private function notices_added_because_wpml_is_inactive_or_incomplete()
        {
        }
        public function filter_wpml_config_white_list_pages(array $white_list_pages)
        {
        }
        public function maybe_show_wpml_not_installed_warning()
        {
        }
        function trashed_post_actions($post_id)
        {
        }
        function is_jobs_tab()
        {
        }
        function is_translators_tab()
        {
        }
        function admin_enqueue_scripts()
        {
        }
        function admin_print_styles()
        {
        }
        function translation_service_js_data($data)
        {
        }
        function _no_wpml_warning()
        {
        }
        function _wpml_not_installed_warning()
        {
        }
        function _old_wpml_warning()
        {
        }
        function job_saved_message()
        {
        }
        function job_cancelled_message()
        {
        }
        /**
         * @param string $menu_id
         */
        public function management_menu($menu_id)
        {
        }
        function management_page()
        {
        }
        /**
         * Sets up the menu items for non-admin translators pointing at the TM
         * and ST translators interfaces
         *
         * @param string $menu_id
         */
        public function translators_menu($menu_id)
        {
        }
        /**
         * Renders the TM queue
         *
         * @used-by \WPML_Translation_Management::menu
         */
        function translation_queue_page()
        {
        }
        /**
         * @param string $menu_id
         */
        public function settings_menu($menu_id)
        {
        }
        public function settings_page()
        {
        }
        private function is_the_main_request()
        {
        }
        function dismiss_icl_side_by_site()
        {
        }
        function plugin_action_links($links, $file)
        {
        }
        // Localization
        function plugin_localization()
        {
        }
        function _icl_tm_toggle_promo()
        {
        }
        /**
         * @return array
         */
        public function get_active_services()
        {
        }
        public function automatic_service_selection_action()
        {
        }
        /**
         * Handles the display of notices in the TM translators tab
         */
        public function handle_notices_action()
        {
        }
        public function basket_extra_fields_refresh()
        {
        }
        /**
         * If user display Translation Dashboard or Translators
         *
         * @return boolean
         */
        function automatic_service_selection_pages()
        {
        }
        public function add_com_log_link()
        {
        }
        public function service_activation_incomplete()
        {
        }
        /**
         * If a service is active (even if not authenticated) it returns true.
         *
         * @return bool
         */
        public function has_active_service()
        {
        }
        private function service_requires_translators()
        {
        }
        private function service_requires_authentication()
        {
        }
        private function service_has_accepted_translators()
        {
        }
        private function service_authentication_notice()
        {
        }
        private function is_tm_page($tab = \null)
        {
        }
        private function automatic_service_selection()
        {
        }
        /**
         * @param $custom_field_name
         * @param $translation_option
         */
        public function wpml_save_custom_field_translation_option($custom_field_name, $translation_option)
        {
        }
        private function handle_get_requests()
        {
        }
        private function handle_icl_action_reminder_popup()
        {
        }
        private function add_pre_tm_init_admin_hooks()
        {
        }
        /**
         * @param $pagenow
         */
        private function add_translation_in_progress_warning($pagenow)
        {
        }
        /**
         * @param $pagenow
         */
        private function add_post_tm_init_admin_hooks($pagenow)
        {
        }
        /**
         * @param $pagenow
         */
        private function add_non_theme_customizer_hooks($pagenow)
        {
        }
        private function add_custom_xml_config()
        {
        }
        private function add_menu_items()
        {
        }
        private function add_translation_queue_hooks()
        {
        }
        private function add_dashboard_screen_options()
        {
        }
        private function translate_independently()
        {
        }
        public function should_show_wizard()
        {
        }
    }
    /**
     * Use this class as parent class for translatable elements in WPML,
     * to have a common approach for retrieving and setting translation information.
     *
     * @author OnTheGo Systems
     */
    abstract class WPML_Translation_Element extends \WPML_SP_User
    {
        /** @var int */
        protected $id;
        /** @var stdClass */
        private $languages_details;
        /** @var array */
        private $element_translations;
        /** @var WPML_WP_Cache */
        protected $wpml_cache;
        /**
         * WPML_Translation_Element constructor.
         *
         * @param int           $id
         * @param SitePress     $sitepress
         * @param WPML_WP_Cache $wpml_cache
         */
        public function __construct($id, \SitePress $sitepress, \WPML_WP_Cache $wpml_cache = \null)
        {
        }
        public function get_id()
        {
        }
        public function get_source_language_code()
        {
        }
        /**
         * @return stdClass
         * @throws \UnexpectedValueException
         */
        protected function get_language_details()
        {
        }
        abstract function get_element_id();
        abstract function get_wpml_element_type();
        /**
         * @return array
         */
        private function get_element_translations()
        {
        }
        /**
         * @param string $language_code
         *
         * @return WPML_Translation_Element|null
         * @throws \InvalidArgumentException
         */
        public function get_translation($language_code)
        {
        }
        /**
         * @return WPML_Translation_Element[]
         */
        public function get_translations()
        {
        }
        /**
         * @return WPML_Translation_Element[]
         */
        public function maybe_init_translations()
        {
        }
        /**
         * @return false|int
         */
        public function get_trid()
        {
        }
        /**
         * @return string|WP_Error
         */
        function get_wp_element_type()
        {
        }
        /**
         * @return mixed|WP_Error
         */
        abstract function get_wp_object();
        /**
         * @param mixed $element
         *
         * @return string
         */
        abstract function get_type($element = \null);
        /**
         * @param null|stdClass $element_data null, or a standard object containing at least the `translation_id`, `language_code`, `element_id`, `source_language_code`, `element_type`, and `original` properties.
         *
         * @return WPML_Translation_Element
         */
        abstract function get_new_instance($element_data);
        /**
         * @return null|WPML_Translation_Element
         */
        public function get_source_element()
        {
        }
        /**
         * @return string|null
         */
        public function get_language_code()
        {
        }
        protected function init_language_details()
        {
        }
        public function flush_cache()
        {
        }
        /** @return bool */
        public function is_in_default_language()
        {
        }
        abstract function is_translatable();
        abstract function is_display_as_translated();
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Term_Element extends \WPML_Translation_Element
    {
        /** @var string Taxonomy name */
        protected $taxonomy;
        /**
         * WPML_Term_Element constructor.
         *
         * @param int           $id term_id of Term Element.
         * @param SitePress     $sitepress
         * @param string        $taxonomy
         * @param WPML_WP_Cache $wpml_cache
         */
        public function __construct($id, \SitePress $sitepress, $taxonomy = '', \WPML_WP_Cache $wpml_cache = \null)
        {
        }
        /**
         * @return array|null|WP_Error|WP_Term
         */
        public function get_wp_object()
        {
        }
        /**
         * @param WP_Term $term
         *
         * @return string
         */
        public function get_type($term = \null)
        {
        }
        public function get_wpml_element_type()
        {
        }
        public function get_element_id()
        {
        }
        /**
         * @param null|stdClass $element_data null, or a standard object containing at least the `translation_id`, `language_code`, `element_id`, `source_language_code`, `element_type`, and `original` properties.
         *
         * @return WPML_Term_Element
         * @throws \InvalidArgumentException Exception.
         */
        public function get_new_instance($element_data)
        {
        }
        public function is_translatable()
        {
        }
        public function is_display_as_translated()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    interface WPML_Duplicable_Element
    {
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Post_Element extends \WPML_Translation_Element implements \WPML_Duplicable_Element
    {
        /**
         * @return WP_Post
         */
        function get_wp_object()
        {
        }
        /**
         * @param WP_Post $post
         *
         * @return string
         */
        function get_type($post = \null)
        {
        }
        public function get_wpml_element_type()
        {
        }
        function get_element_id()
        {
        }
        /**
         * @param null|stdClass $element_data null, or a standard object containing at least the `translation_id`, `language_code`, `element_id`, `source_language_code`, `element_type`, and `original` properties.
         *
         * @return WPML_Post_Element
         * @throws \InvalidArgumentException
         */
        function get_new_instance($element_data)
        {
        }
        function is_translatable()
        {
        }
        function is_display_as_translated()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Translations extends \WPML_SP_User
    {
        /** @var bool */
        public $skip_empty = \false;
        /** @var bool */
        public $all_statuses = \false;
        /** @var bool */
        public $skip_cache = \false;
        /** @var bool */
        public $skip_recursions = \false;
        private $duplicated_by = array();
        private $mark_as_duplicate_meta_key = '_icl_lang_duplicate_of';
        private $wpml_cache;
        /**
         * WPML_Translations constructor.
         *
         * @param SitePress     $sitepress
         * @param WPML_WP_Cache $wpml_cache
         */
        public function __construct(\SitePress $sitepress, \WPML_WP_Cache $wpml_cache = \null)
        {
        }
        /**
         * @param int    $trid
         * @param string $wpml_element_type
         * @param bool $skipPrivilegeChecking
         *
         * @return array<string,\stdClass>
         */
        public function get_translations($trid, $wpml_element_type, $skipPrivilegeChecking = \false)
        {
        }
        public function link_elements(\WPML_Translation_Element $source_translation_element, \WPML_Translation_Element $target_translation_element, $target_language = \null)
        {
        }
        public function set_source_element(\WPML_Translation_Element $element, \WPML_Translation_Element $source_element)
        {
        }
        private function elements_type_matches($element1, $element2)
        {
        }
        /**
         * @param WPML_Translation_Element $element
         * @param string                   $language_code
         */
        public function set_language_code(\WPML_Translation_Element $element, $language_code)
        {
        }
        /**
         * @param WPML_Translation_Element $element
         * @param int                      $trid
         *
         * @throws \UnexpectedValueException
         */
        public function set_trid(\WPML_Translation_Element $element, $trid)
        {
        }
        /**
         * @param \WPML_Translation_Element $duplicate
         * @param \WPML_Translation_Element $original
         *
         * @throws \UnexpectedValueException
         */
        public function make_duplicate_of(\WPML_Translation_Element $duplicate, \WPML_Translation_Element $original)
        {
        }
        /**
         * @param \WPML_Translation_Element $element
         *
         * @return WPML_Post_Element
         * @throws \InvalidArgumentException
         */
        public function is_a_duplicate_of(\WPML_Translation_Element $element)
        {
        }
        /**
         * @param \WPML_Translation_Element $element
         *
         * @return array
         * @throws \UnexpectedValueException
         * @throws \InvalidArgumentException
         */
        public function is_duplicated_by(\WPML_Translation_Element $element)
        {
        }
        /**
         * @param \WPML_Translation_Element $element
         * @param string                    $argument_name
         *
         * @throws \UnexpectedValueException
         */
        private function validate_duplicable_element(\WPML_Translation_Element $element, $argument_name = 'element')
        {
        }
        /**
         * @param \WPML_Translation_Element $element
         */
        private function init_cache_for_element(\WPML_Translation_Element $element)
        {
        }
        /**
         * @param string                     $element_type
         * @param array<string,array<string>> $sql_parts
         * @param bool $skipPrivilegeChecking
         *
         * @return array<string,array<string>>
         */
        private function get_sql_parts_for_post($element_type, $sql_parts, $skipPrivilegeChecking = \false)
        {
        }
        /**
         * @return string
         */
        private function get_public_statuses()
        {
        }
        /**
         * @param array<string,array<string>> $sql_parts
         *
         * @return array<string,array<string>>
         */
        private function get_sql_parts_for_taxonomy($sql_parts)
        {
        }
        /**
         * @param stdClass $translation
         *
         * @return bool
         */
        private function must_ignore_translation(\stdClass $translation)
        {
        }
        /**
         * @param stdClass $translation
         *
         * @return bool
         */
        private function must_ignore_translation_for_taxonomy(\stdClass $translation)
        {
        }
        /**
         * @param string $wpml_element_type
         *
         * @return int
         */
        private function wpml_element_type_is_taxonomy($wpml_element_type)
        {
        }
        /**
         * @param string $wpml_element_type
         *
         * @return bool
         */
        private function wpml_element_type_is_post($wpml_element_type)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Menu_Element extends \WPML_Term_Element
    {
        /**
         * WPML_Menu_Element constructor.
         *
         * @param int           $id
         * @param SitePress     $sitepress
         * @param WPML_WP_Cache $wpml_cache
         */
        public function __construct($id, \SitePress $sitepress, \WPML_WP_Cache $wpml_cache = \null)
        {
        }
        /**
         * @param stdClass $element_data standard object containing at least the `term_id` property.
         *
         * @return WPML_Menu_Element
         * @throws \InvalidArgumentException Exception.
         */
        public function get_new_instance($element_data)
        {
        }
    }
    class WPML_Translation_Element_Factory
    {
        const ELEMENT_TYPE_POST = 'Post';
        const ELEMENT_TYPE_TERM = 'Term';
        const ELEMENT_TYPE_MENU = 'Menu';
        /** @var SitePress */
        private $sitepress;
        /** @var WPML_WP_Cache */
        private $wpml_cache;
        /**
         * @param SitePress     $sitepress
         * @param WPML_WP_Cache $wpml_cache
         */
        public function __construct(\SitePress $sitepress, \WPML_WP_Cache $wpml_cache = \null)
        {
        }
        /**
         * @param int    $id
         * @param string $type any of `WPML_Translation_Element_Factory::ELEMENT_TYPE_POST`, `WPML_Translation_Element_Factory::ELEMENT_TYPE_TERM`, `WPML_Translation_Element_Factory::ELEMENT_TYPE_MENU`.
         *
         * @return WPML_Translation_Element
         * @throws InvalidArgumentException InvalidArgumentException.
         */
        public function create($id, $type)
        {
        }
        public function create_post($id)
        {
        }
        public function create_term($id)
        {
        }
        public function create_menu($id)
        {
        }
    }
    /** NOTE:
     *  Use the $wpml_post_translations or $wpml_term_translations globals for posts and taxonomy
     *  They are more efficient
     */
    class WPML_Element_Type_Translation
    {
        /** @var wpdb $wpdb */
        private $wpdb;
        /** @var  WPML_Cache_Factory $cache_factory */
        private $cache_factory;
        /** @var  string $element_type */
        private $element_type;
        public function __construct(\wpdb $wpdb, \WPML_Cache_Factory $cache_factory, $element_type)
        {
        }
        function get_element_lang_code($element_id)
        {
        }
    }
}
namespace WPML\TM {
    /**
     * @method static callable getCountryByIp( ...$httpPost, ...$ip ) - Curried :: callable->string->array|null
     */
    class Geolocalization
    {
        use \WPML\Collect\Support\Traits\Macroable;
        public static function init()
        {
        }
    }
}
namespace {
    class WPML_Cache_Terms_Per_Lang_Factory implements \IWPML_Backend_Action_Loader, \IWPML_Frontend_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_Display_As_Translated_Default_Lang_Messages
    {
        const PREVIOUS_LANG_KEY = 'wpml-previous-default-language';
        /**
         * @var SitePress
         */
        private $sitepress;
        /**
         * @var WPML_Display_As_Translated_Default_Lang_Messages_View
         */
        private $view;
        public function __construct(\SitePress $sitepress, \WPML_Display_As_Translated_Default_Lang_Messages_View $view)
        {
        }
        public function add_hooks()
        {
        }
        public function enqueue_scripts()
        {
        }
        /**
         * @param string $prev_lang
         */
        public function save_previous_lang($prev_lang)
        {
        }
        public function display_messages()
        {
        }
        /**
         * @return bool
         */
        private function should_display_message()
        {
        }
    }
    class WPML_Display_As_Translated_Snippet_Filters_Factory implements \IWPML_Frontend_Action_Loader, \IWPML_Backend_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_Cache_Terms_Per_Lang implements \IWPML_Action
    {
        const CACHE_GROUP = 'WPML_Cache_Terms_Per_Lang';
        /** @var SitePress $sitepress */
        private $sitepress;
        /**
         * WPML_Cache_Terms_Per_Lang constructor.
         *
         * @param SitePress $sitepress
         */
        public function __construct(\SitePress $sitepress)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param array  $terms
         * @param int    $post_id
         * @param string $taxonomy
         *
         * @return array|bool
         */
        public function terms_per_lang($terms, $post_id, $taxonomy)
        {
        }
        /**
         * @param array  $all_terms
         * @param string $taxonomy
         *
         * @return WPML\Collect\Support\Collection
         */
        private function get_terms_by_tax($all_terms, $taxonomy)
        {
        }
        /**
         * @param array $object_ids An array of object IDs.
         */
        public function clear_cache($object_ids)
        {
        }
    }
    class WPML_Display_As_Translated_Default_Lang_Messages_Factory extends \WPML_Current_Screen_Loader_Factory
    {
        /**
         * @return WPML_Display_As_Translated_Default_Lang_Messages
         */
        public function create_hooks()
        {
        }
        /** @return string */
        public function get_screen_regex()
        {
        }
    }
    class WPML_Display_As_Translated_Default_Lang_Messages_View
    {
        const TEMPLATE = 'default-language-change.twig';
        /**
         * @var WPML_Twig_Template
         */
        private $template_service;
        public function __construct(\WPML_Twig_Template $template_service)
        {
        }
        /**
         * @param string $prev_default_lang
         * @param string $default_lang
         */
        public function display($prev_default_lang, $default_lang)
        {
        }
        /**
         * @param string $prev_default_lang
         * @param string $default_lang
         *
         * @return array
         */
        private function get_model($prev_default_lang, $default_lang)
        {
        }
    }
    class WPML_Display_As_Translated_Message_For_New_Post implements \IWPML_Action
    {
        /** @var SitePress $sitepress */
        private $sitepress;
        /** @var WPML_Notices $notices */
        private $notices;
        public function __construct(\SitePress $sitepress, \WPML_Notices $notices)
        {
        }
        public function add_hooks()
        {
        }
        public function init()
        {
        }
        public function get_notice_content()
        {
        }
        private function is_display_as_translated_mode()
        {
        }
        private function current_language_is_not_default_language()
        {
        }
        private function get_post_type()
        {
        }
    }
    /**
     * Created by PhpStorm.
     * User: bruce
     * Date: 28/10/17
     * Time: 5:07 PM
     */
    class WPML_Fix_Links_In_Display_As_Translated_Content implements \IWPML_Action, \IWPML_Frontend_Action, \IWPML_DIC_Action
    {
        /** @var SitePress $sitepress */
        private $sitepress;
        /** @var WPML_Translate_Link_Targets $translate_link_targets */
        private $translate_link_targets;
        public function __construct(\SitePress $sitepress, \WPML_Translate_Link_Targets $translate_link_targets)
        {
        }
        public function add_hooks()
        {
        }
        public function fix_fallback_links($content)
        {
        }
        private function is_display_as_translated_content_type()
        {
        }
        private function encode_language_switcher_links($content)
        {
        }
        private function decode_language_switcher_links($content, $encoded_ls_links)
        {
        }
    }
    class WPML_Display_As_Translated_Message_For_New_Post_Factory implements \IWPML_Backend_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_Display_As_Translated_Snippet_Filters implements \IWPML_Action
    {
        public function add_hooks()
        {
        }
        public function filter_post_types($should_use_snippet, array $post_type)
        {
        }
        private function is_admin_media_list_page()
        {
        }
        private function is_media_ajax_query(array $post_type)
        {
        }
    }
    class WPML_Upgrade
    {
        const SCOPE_ADMIN = 'admin';
        const SCOPE_AJAX = 'ajax';
        const SCOPE_FRONT_END = 'front-end';
        /** @var array */
        private $commands;
        const UPDATE_STATUSES_KEY = 'wpml_update_statuses';
        /** @var SitePress */
        private $sitepress;
        /** @var WPML_Upgrade_Command_Factory */
        private $command_factory;
        /** @var CommandsStatus */
        private $command_status;
        /** @var bool $upgrade_in_progress */
        private $upgrade_in_progress;
        /**
         * WPML_Upgrade constructor.
         *
         * @param array                        $commands
         * @param SitePress                    $sitepress
         * @param WPML_Upgrade_Command_Factory $command_factory
         * @param CommandsStatus               $command_status
         */
        public function __construct(array $commands, \SitePress $sitepress, \WPML_Upgrade_Command_Factory $command_factory, \WPML\Upgrade\CommandsStatus $command_status = \null)
        {
        }
        /**
         * @param array $commands
         */
        public function add_commands(array $commands)
        {
        }
        public function run()
        {
        }
        private function get_commands_by_scope($scope)
        {
        }
        private function get_admin_commands()
        {
        }
        private function get_ajax_commands()
        {
        }
        private function get_front_end_commands()
        {
        }
        private function run_admin()
        {
        }
        private function run_ajax()
        {
        }
        private function run_front_end()
        {
        }
        private function run_commands($commands, $default)
        {
        }
        private function run_command(\WPML_Upgrade_Command_Definition $command_definition, $default)
        {
        }
        /** @noinspection PhpUnusedPrivateMethodInspection
         * @param IWPML_Upgrade_Command $upgrade
         *
         * @return null
         */
        private function maybe_run_admin(\IWPML_Upgrade_Command $upgrade)
        {
        }
        /** @noinspection PhpUnusedPrivateMethodInspection
         * @param IWPML_Upgrade_Command $upgrade
         *
         * @return null
         */
        private function maybe_run_front_end(\IWPML_Upgrade_Command $upgrade)
        {
        }
        /** @noinspection PhpUnusedPrivateMethodInspection
         * @param IWPML_Upgrade_Command $upgrade
         *
         * @return null
         */
        private function maybe_run_ajax(\IWPML_Upgrade_Command $upgrade)
        {
        }
        private function nonce_ok($class)
        {
        }
        /**
         * @param IWPML_Upgrade_Command $class
         */
        public function mark_command_as_executed(\IWPML_Upgrade_Command $class)
        {
        }
        /**
         * @param string $class_name
         *
         * @return string
         */
        private function get_command_id($class_name)
        {
        }
        private function set_upgrade_in_progress()
        {
        }
        private function set_upgrade_completed()
        {
        }
    }
    interface IWPML_Upgrade_Command
    {
        public function run_admin();
        public function run_ajax();
        public function run_frontend();
        public function get_results();
    }
    abstract class WPML_Upgrade_Run_All implements \IWPML_Upgrade_Command
    {
        /** @var bool $result */
        protected $result = \true;
        protected abstract function run();
        public function run_admin()
        {
        }
        public function run_ajax()
        {
        }
        public function run_frontend()
        {
        }
        /** @return bool */
        public function get_results()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Upgrade_Command_Definition
    {
        private $class_name;
        private $dependencies = array();
        /** @var array Can be 'admin', 'ajax' or 'front-end' */
        private $scopes = array();
        private $method;
        /** @var callable|null */
        private $factory_method;
        /**
         * WPML_Upgrade_Command_Definition constructor.
         *
         * @param string      $class_name A class implementing \IWPML_Upgrade_Command.
         * @param array       $dependencies An array of dependencies passed to the `$class_name`'s constructor.
         * @param array       $scopes An array of scope values. Accepted values are: `\WPML_Upgrade::SCOPE_ADMIN`, `\WPML_Upgrade::SCOPE_AJAX`, and `\WPML_Upgrade::SCOPE_FRONT_END`.
         * @param string|null $method The method to call to run the upgrade (otherwise, it calls the "run" method),
         * @param callable    $factory_method
         */
        public function __construct($class_name, array $dependencies, array $scopes, $method = \null, callable $factory_method = \null)
        {
        }
        /**
         * @return array
         */
        public function get_dependencies()
        {
        }
        /**
         * @return string
         */
        public function get_class_name()
        {
        }
        /**
         * @return string
         */
        public function get_method()
        {
        }
        /**
         * @return array
         */
        public function get_scopes()
        {
        }
        /**
         * @return callable|null
         */
        public function get_factory_method()
        {
        }
        /**
         * @return IWPML_Upgrade_Command
         */
        public function create()
        {
        }
    }
    class WPML_TM_Upgrade_Loader implements \IWPML_Action
    {
        /** @var SitePress */
        private $sitepress;
        /** @var WPML_Upgrade_Schema */
        private $upgrade_schema;
        /** @var WPML_Settings_Helper */
        private $settings;
        /** @var WPML_Upgrade_Command_Factory */
        private $factory;
        /** @var WPML_Notices */
        private $notices;
        public function __construct(\SitePress $sitepress, \WPML_Upgrade_Schema $upgrade_schema, \WPML_Settings_Helper $settings, \WPML_Notices $wpml_notices, \WPML_Upgrade_Command_Factory $factory)
        {
        }
        public function add_hooks()
        {
        }
        public function wpml_tm_upgrade()
        {
        }
    }
    class WPML_Upgrade_Command_Factory
    {
        /**
         * @param string        $class_name
         * @param array         $dependencies
         * @param array         $scopes
         * @param string|null   $method
         * @param callable|null $factory_method
         *
         * @return WPML_Upgrade_Command_Definition
         */
        public function create_command_definition($class_name, array $dependencies, array $scopes, $method = \null, callable $factory_method = \null)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Upgrade_Localization_Files implements \IWPML_Upgrade_Command
    {
        private $download_localization;
        private $results = \null;
        /** @var SitePress */
        private $sitepress;
        /**
         * WPML_Upgrade_Localization_Files constructor.
         *
         * @param array $args
         */
        public function __construct(array $args)
        {
        }
        public function run_admin()
        {
        }
        public function run_ajax()
        {
        }
        public function run_frontend()
        {
        }
        public function get_command_id()
        {
        }
        public function get_results()
        {
        }
    }
    class WPML_TM_Upgrade_Loader_Factory implements \IWPML_Backend_Action_Loader, \IWPML_Frontend_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_Upgrade_Loader_Factory implements \IWPML_Backend_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_Upgrade_Schema
    {
        /** @var wpdb $wpdb */
        private $wpdb;
        public function __construct(\wpdb $wpdb)
        {
        }
        /**
         * @param string $table_name
         *
         * @return bool
         */
        public function does_table_exist($table_name)
        {
        }
        /**
         * @param string $table_name
         * @param string $column_name
         *
         * @return bool
         */
        public function does_column_exist($table_name, $column_name)
        {
        }
        /**
         * @param string $table_name
         * @param string $index_name
         *
         * @return bool
         */
        public function does_index_exist($table_name, $index_name)
        {
        }
        /**
         * @param string $table_name
         * @param string $key_name
         *
         * @return bool
         */
        public function does_key_exist($table_name, $key_name)
        {
        }
        /**
         * @param string $table_name
         * @param string $column_name
         * @param string $attribute_string
         *
         * @return false|int
         */
        public function add_column($table_name, $column_name, $attribute_string)
        {
        }
        /**
         * @param string $table_name
         * @param string $column_name
         * @param string $attribute_string
         *
         * @return false|int
         */
        public function modify_column($table_name, $column_name, $attribute_string)
        {
        }
        /**
         * @param string $table_name
         * @param string $index_name
         * @param string $attribute_string
         *
         * @return false|int
         */
        public function add_index($table_name, $index_name, $attribute_string)
        {
        }
        /**
         * @param string $table_name
         * @param array  $key_columns
         *
         * @return false|int
         */
        public function add_primary_key($table_name, $key_columns)
        {
        }
        /**
         * @param string $table_name
         * @param string $index_name
         *
         * @return false|int
         */
        public function drop_index($table_name, $index_name)
        {
        }
        /**
         * @param string $table_name
         * @param string $column_name
         *
         * @return null|string
         */
        public function get_column_collation($table_name, $column_name)
        {
        }
        /**
         * @param string $table_name
         *
         * @return string|null
         */
        public function get_table_collation($table_name)
        {
        }
        /**
         * We try to get the collation from the posts table first.
         *
         * @return string|null
         */
        public function get_default_collate()
        {
        }
        /**
         * @param string $table_name
         *
         * @return string|null
         */
        public function get_table_charset($table_name)
        {
        }
        /**
         * We try to get the charset from the posts table first.
         *
         * @return string|null
         */
        public function get_default_charset()
        {
        }
        /**
         * @return wpdb
         */
        public function get_wpdb()
        {
        }
    }
}
namespace WPML\Upgrade {
    class CommandsStatus
    {
        const OPTION_KEY = 'wpml_update_statuses';
        /**
         * @param string $className
         *
         * @return bool
         */
        public function hasBeenExecuted($className)
        {
        }
        /**
         * @param string $className
         * @param bool   $flag
         */
        public function markAsExecuted($className, $flag = true)
        {
        }
        /**
         * @param string $className
         *
         * @return string
         */
        private function get_command_id($className)
        {
        }
        private function set_update_status($id, $value)
        {
        }
        private function get_update_option_value($id)
        {
        }
    }
}
namespace {
    /**
     * Class WPML_Upgrade_Loader
     */
    class WPML_Upgrade_Loader implements \IWPML_Action
    {
        const TRANSIENT_UPGRADE_IN_PROGRESS = 'wpml_core_update_in_progress';
        /**
         * SitePress instance.
         *
         * @var SitePress
         */
        private $sitepress;
        /**
         * Upgrade Schema instance.
         *
         * @var WPML_Upgrade_Schema
         */
        private $upgrade_schema;
        /**
         * Settings Helper instance.
         *
         * @var WPML_Settings_Helper
         */
        private $settings;
        /**
         * Upgrade Command Factory instance.
         *
         * @var WPML_Upgrade_Command_Factory
         */
        private $factory;
        /**
         * Notices instance.
         *
         * @var WPML_Notices
         */
        private $notices;
        /**
         * WPML_Upgrade_Loader constructor.
         *
         * @param SitePress                    $sitepress      SitePress instance.
         * @param WPML_Upgrade_Schema          $upgrade_schema Upgrade schema instance.
         * @param WPML_Settings_Helper         $settings       Settings Helper instance.
         * @param WPML_Notices                 $wpml_notices   Notices instance.
         * @param WPML_Upgrade_Command_Factory $factory        Upgrade Command Factory instance.
         */
        public function __construct(\SitePress $sitepress, \WPML_Upgrade_Schema $upgrade_schema, \WPML_Settings_Helper $settings, \WPML_Notices $wpml_notices, \WPML_Upgrade_Command_Factory $factory)
        {
        }
        /**
         * Add hooks.
         */
        public function add_hooks()
        {
        }
        /**
         * Upgrade WPML plugin.
         */
        public function wpml_upgrade()
        {
        }
    }
    class WPML_TM_Upgrade_Cancel_Orphan_Jobs implements \IWPML_Upgrade_Command
    {
        /** @var WPML_TP_Sync_Orphan_Jobs_Factory */
        private $factory;
        /** @var WPML_TM_Jobs_Migration_State */
        private $migration_state;
        /**
         * @param array $args
         */
        public function __construct(array $args)
        {
        }
        /**
         * @return bool
         */
        public function run_admin()
        {
        }
        /**
         * @return null
         */
        public function run_ajax()
        {
        }
        /**
         * @return null
         */
        public function run_frontend()
        {
        }
        /**
         * @return null
         */
        public function get_results()
        {
        }
    }
    class WPML_Upgrade_Fix_Non_Admin_With_Admin_Cap implements \IWPML_Upgrade_Command
    {
        private $results = array();
        /**
         * @return bool|void
         */
        public function run_admin()
        {
        }
        /**
         * @return bool
         */
        public function run_ajax()
        {
        }
        /**
         * @return bool
         */
        public function run_frontend()
        {
        }
        /**
         * @return null
         */
        public function get_results()
        {
        }
    }
    class WPML_TM_Upgrade_Translation_Priorities_For_Posts implements \IWPML_Upgrade_Command
    {
        /** @var bool $result */
        private $result = \true;
        const TRANSLATION_PRIORITY_TAXONOMY = 'translation_priority';
        /**
         * Add the default terms for Translation Priority taxonomy
         *
         * @return bool
         */
        private function run()
        {
        }
        public function run_admin()
        {
        }
        public function run_ajax()
        {
        }
        public function run_frontend()
        {
        }
        /** @return bool */
        public function get_results()
        {
        }
    }
}
namespace WPML\TM\Upgrade\Commands {
    class CreateAteDownloadQueueTable implements \IWPML_Upgrade_Command
    {
        const TABLE_NAME = 'icl_translation_downloads';
        /** @var \WPML_Upgrade_Schema $schema */
        private $schema;
        /** @var bool $result */
        private $result = false;
        public function __construct(array $args)
        {
        }
        /**
         * @return bool
         */
        public function run()
        {
        }
        /**
         * Runs in admin pages.
         *
         * @return bool
         */
        public function run_admin()
        {
        }
        /**
         * Unused.
         *
         * @return null
         */
        public function run_ajax()
        {
        }
        /**
         * Unused.
         *
         * @return null
         */
        public function run_frontend()
        {
        }
        /**
         * @return bool
         */
        public function get_results()
        {
        }
    }
}
namespace {
    /**
     * Abstract class to upgrade a table by adding a column to it.
     *
     * @package WPML
     */
    /**
     * Class WPML_Upgrade_Add_Column_To_Table
     */
    abstract class WPML_Upgrade_Add_Column_To_Table implements \IWPML_Upgrade_Command
    {
        /**
         * Get table name.
         *
         * @return string
         */
        protected abstract function get_table();
        /**
         * Get column name.
         *
         * @return string
         */
        protected abstract function get_column();
        /**
         * Get column definition.
         *
         * @return string
         */
        protected abstract function get_column_definition();
        /**
         * Upgrade schema.
         *
         * @var WPML_Upgrade_Schema
         */
        private $upgrade_schema;
        /**
         * WPML_Upgrade_Add_Column_To_Table constructor.
         *
         * @param array $args Arguments.
         */
        public function __construct(array $args)
        {
        }
        /**
         * Run the table upgrade.
         *
         * @return bool
         */
        private function run()
        {
        }
        /**
         * Run in admin.
         *
         * @return bool
         */
        public function run_admin()
        {
        }
        /**
         * Run in ajax.
         *
         * @return bool
         */
        public function run_ajax()
        {
        }
        /**
         * Run in frontend.
         *
         * @return bool
         */
        public function run_frontend()
        {
        }
        /**
         * Get upgrade results.
         *
         * @return bool
         */
        public function get_results()
        {
        }
    }
}
namespace WPML\TM\Upgrade\Commands {
    class AddReviewStatusColumnToTranslationStatus extends \WPML_Upgrade_Add_Column_To_Table
    {
        /**
         * @return string
         */
        protected function get_table()
        {
        }
        /**
         * @return string
         */
        protected function get_column()
        {
        }
        /**
         * @return string
         */
        protected function get_column_definition()
        {
        }
    }
}
namespace {
    class WPML_TM_Upgrade_Service_Redirect_To_Field implements \IWPML_Upgrade_Command
    {
        /** @var bool $result */
        private $result = \true;
        /** @var RefreshServices */
        private $service_refresh;
        public function __construct($args)
        {
        }
        /**
         * Add the default terms for Translation Priority taxonomy
         *
         * @return bool
         */
        private function run()
        {
        }
        public function run_admin()
        {
        }
        public function run_ajax()
        {
        }
        public function run_frontend()
        {
        }
        /** @return bool */
        public function get_results()
        {
        }
        private function get_service_refresh()
        {
        }
    }
    class WPML_Upgrade_Remove_Translation_Services_Transient implements \IWPML_Upgrade_Command
    {
        /**
         * @return bool|void
         */
        public function run_admin()
        {
        }
        /**
         * @return bool
         */
        public function run_ajax()
        {
        }
        /**
         * @return bool
         */
        public function run_frontend()
        {
        }
        /**
         * @return null
         */
        public function get_results()
        {
        }
    }
}
namespace WPML\TM\Upgrade\Commands {
    class MigrateAteRepository implements \IWPML_Upgrade_Command
    {
        const TABLE_NAME = 'icl_translate_job';
        const COLUMN_EDITOR_JOB_ID = 'editor_job_id';
        const COLUMN_EDIT_TIMESTAMP = 'edit_timestamp';
        const OPTION_NAME_REPO = 'WPML_TM_ATE_JOBS';
        /** @var \WPML_Upgrade_Schema $schema */
        private $schema;
        /** @var bool $result */
        private $result = false;
        public function __construct(array $args)
        {
        }
        /**
         * @return bool
         */
        public function run()
        {
        }
        private function addColumnsToJobsTable()
        {
        }
        private function migrateOldRepository()
        {
        }
        /**
         * @param string $field
         *
         * @return \Closure
         */
        private function getCasesReducer()
        {
        }
        private function disableAutoloadOnOldOption()
        {
        }
        /**
         * Runs in admin pages.
         *
         * @return bool
         */
        public function run_admin()
        {
        }
        /**
         * Unused.
         *
         * @return null
         */
        public function run_ajax()
        {
        }
        /**
         * Unused.
         *
         * @return null
         */
        public function run_frontend()
        {
        }
        /**
         * @return bool
         */
        public function get_results()
        {
        }
    }
}
namespace WPML\Upgrade\Commands {
    class AddCountryColumnToLanguages extends \WPML_Upgrade_Add_Column_To_Table
    {
        /**
         * Get table name.
         *
         * @return string
         */
        protected function get_table()
        {
        }
        /**
         * Get column name.
         *
         * @return string
         */
        protected function get_column()
        {
        }
        /**
         * Get column definition.
         *
         * @return string
         */
        protected function get_column_definition()
        {
        }
    }
    class RemoveRestDisabledNotice implements \IWPML_Upgrade_Command
    {
        public function run_admin()
        {
        }
        public function run_ajax()
        {
        }
        public function run_frontend()
        {
        }
        public function get_results()
        {
        }
    }
}
namespace WPML\TM\Upgrade\Commands {
    class RefreshTranslationServices implements \IWPML_Upgrade_Command
    {
        const WPML_VERSION_SINCE_PREVIEW_LOGOS_AVAILABLE = '4.4.0';
        /** @var bool $result */
        private $result = false;
        /** @var RefreshServicesFactory */
        private $refreshServicesFactory;
        /** @var callable */
        private $isHigherThanInstallationVersion;
        public function __construct(array $args)
        {
        }
        /**
         * @return bool
         */
        public function run_admin()
        {
        }
        /**
         * Unused.
         *
         * @return null
         */
        public function run_ajax()
        {
        }
        /**
         * Unused.
         *
         * @return null
         */
        public function run_frontend()
        {
        }
        /**
         * @return bool
         */
        public function get_results()
        {
        }
    }
}
namespace {
    class WPML_Upgrade_Element_Type_Length_And_Collation implements \IWPML_Upgrade_Command
    {
        /** @var bool $result */
        private $result = \true;
        /** @var WPML_Upgrade_Schema */
        private $upgrade_schema;
        public function __construct(array $args)
        {
        }
        /** @return bool */
        private function run()
        {
        }
        private function add_collation_from_post_type($element_type_attr)
        {
        }
        public function run_admin()
        {
        }
        public function run_ajax()
        {
        }
        public function run_frontend()
        {
        }
        /** @return bool */
        public function get_results()
        {
        }
    }
}
namespace WPML\Upgrade\Commands {
    /**
     * Class Add_Index_To_Table
     */
    abstract class AddIndexToTable extends \WPML_Upgrade_Run_All
    {
        /**
         * Get table name.
         *
         * @return string
         */
        protected abstract function get_table();
        /**
         * Get index name.
         *
         * @return string
         */
        protected abstract function get_index();
        /**
         * Get index definition.
         *
         * @return string
         */
        protected abstract function get_index_definition();
        /**
         * Upgrade schema.
         *
         * @var \WPML_Upgrade_Schema
         */
        private $upgrade_schema;
        /**
         * Add_Index_To_Table constructor.
         *
         * @param array $args
         */
        public function __construct(array $args)
        {
        }
        /**
         * Run the table upgrade.
         *
         * @return bool
         */
        protected function run()
        {
        }
    }
    class AddStringPackageIdIndexToStrings extends \WPML\Upgrade\Commands\AddIndexToTable
    {
        protected function get_table()
        {
        }
        protected function get_index()
        {
        }
        protected function get_index_definition()
        {
        }
    }
}
namespace {
    class AddTMAllowedOption extends \WPML_Upgrade_Run_All
    {
        /**
         * @return bool
         */
        public function run()
        {
        }
    }
    /**
     * Upgrades the former option to the new one.
     */
    class WPML_Upgrade_WPML_Site_ID implements \IWPML_Upgrade_Command
    {
        /**
         * Runs the upgrade process.
         *
         * @return bool
         */
        public function run()
        {
        }
        /**
         * Checks has the old option.
         *
         * @return bool
         */
        protected function old_option_exists()
        {
        }
        /**
         * Runs in admin pages.
         *
         * @return bool
         */
        public function run_admin()
        {
        }
        /**
         * Unused.
         *
         * @return null
         */
        public function run_ajax()
        {
        }
        /**
         * Unused.
         *
         * @return null
         */
        public function run_frontend()
        {
        }
        /**
         * Unused.
         *
         * @return null
         */
        public function get_results()
        {
        }
    }
}
namespace WPML\Upgrade\Command {
    class DisableOptionsAutoloading implements \IWPML_Upgrade_Command
    {
        /** @var bool */
        private $results;
        public function run()
        {
        }
        public function run_admin()
        {
        }
        public function run_ajax()
        {
        }
        public function run_frontend()
        {
        }
        public function get_results()
        {
        }
    }
}
namespace WPML\Upgrade\Commands {
    class AddAutomaticColumnToIclTranslateJob extends \WPML_Upgrade_Add_Column_To_Table
    {
        /**
         * Get table name.
         *
         * @return string
         */
        protected function get_table()
        {
        }
        /**
         * Get column name.
         *
         * @return string
         */
        protected function get_column()
        {
        }
        /**
         * Get column definition.
         *
         * @return string
         */
        protected function get_column_definition()
        {
        }
    }
}
namespace WPML\TM\Upgrade\Commands {
    class ATEProxyUpdateRewriteRules implements \IWPML_Upgrade_Command
    {
        /** @var bool $result */
        private $result = false;
        /**
         * @return bool
         */
        public function run_admin()
        {
        }
        /**
         * Unused.
         *
         * @return null
         */
        public function run_ajax()
        {
        }
        /**
         * Unused.
         *
         * @return null
         */
        public function run_frontend()
        {
        }
        /**
         * @return bool
         */
        public function get_results()
        {
        }
    }
}
namespace {
    /**
     * Upgrade 'icl_strings' table by adding 'wrap' column.
     *
     * @package WPML
     */
    /**
     * Class WPML_Upgrade_Add_Wrap_Column_To_Strings
     */
    class WPML_Upgrade_Add_Wrap_Column_To_Strings extends \WPML_Upgrade_Add_Column_To_Table
    {
        /**
         * Get table name.
         *
         * @return string
         */
        protected function get_table()
        {
        }
        /**
         * Get column name.
         *
         * @return string
         */
        protected function get_column()
        {
        }
        /**
         * Get column definition.
         *
         * @return string
         */
        protected function get_column_definition()
        {
        }
    }
    /**
     * Upgrade 'icl_translate' table by adding 'field_wrap_tag' column.
     *
     * @package WPML
     */
    /**
     * Class WPML_Upgrade_Add_Wrap_Column_To_Translate
     */
    class WPML_Upgrade_Add_Wrap_Column_To_Translate extends \WPML_Upgrade_Add_Column_To_Table
    {
        /**
         * Get table name.
         *
         * @return string
         */
        protected function get_table()
        {
        }
        /**
         * Get column name.
         *
         * @return string
         */
        protected function get_column()
        {
        }
        /**
         * Get column definition.
         *
         * @return string
         */
        protected function get_column_definition()
        {
        }
    }
}
namespace WPML\TM\Upgrade\Commands {
    class AddAteCommunicationRetryColumnToTranslationStatus extends \WPML_Upgrade_Add_Column_To_Table
    {
        /**
         * @return string
         */
        protected function get_table()
        {
        }
        /**
         * @return string
         */
        protected function get_column()
        {
        }
        /**
         * @return string
         */
        protected function get_column_definition()
        {
        }
    }
}
namespace {
    class WPML_TM_Upgrade_Default_Editor_For_Old_Jobs implements \IWPML_Upgrade_Command
    {
        /** @var SitePress */
        private $sitepress;
        public function __construct($args)
        {
        }
        /**
         * @return bool
         */
        private function run()
        {
        }
        public function run_admin()
        {
        }
        public function run_ajax()
        {
        }
        public function run_frontend()
        {
        }
        /** @return bool */
        public function get_results()
        {
        }
    }
    /**
     * Upgrade 'icl_translation_status' table by adding 'uuid' column.
     *
     * @package WPML
     */
    /**
     * Class WPML_Add_UUID_Column_To_Translation_Status
     */
    class WPML_Add_UUID_Column_To_Translation_Status extends \WPML_Upgrade_Add_Column_To_Table
    {
        /**
         * Get table name.
         *
         * @return string
         */
        protected function get_table()
        {
        }
        /**
         * Get column name.
         *
         * @return string
         */
        protected function get_column()
        {
        }
        /**
         * Get column definition.
         *
         * @return string
         */
        protected function get_column_definition()
        {
        }
    }
}
namespace WPML\Upgrade\Commands {
    class AddContextIndexToStrings extends \WPML\Upgrade\Commands\AddIndexToTable
    {
        protected function get_table()
        {
        }
        protected function get_index()
        {
        }
        protected function get_index_definition()
        {
        }
    }
    abstract class AddPrimaryKeyToTable extends \WPML_Upgrade_Run_All
    {
        /**
         * @return string
         */
        protected abstract function get_table();
        /**
         * @return string
         */
        protected abstract function get_key_name();
        /**
         * @return array
         */
        protected abstract function get_key_columns();
        /**
         * @var \WPML_Upgrade_Schema
         */
        private $upgrade_schema;
        /**
         * @param array $args
         */
        public function __construct(array $args)
        {
        }
        /**
         * @return bool
         */
        protected function run()
        {
        }
    }
    class AddPrimaryKeyToLocaleMap extends \WPML\Upgrade\Commands\AddPrimaryKeyToTable
    {
        protected function get_table()
        {
        }
        protected function get_key_name()
        {
        }
        protected function get_key_columns()
        {
        }
    }
    abstract class DropIndexFromTable extends \WPML_Upgrade_Run_All
    {
        /**
         * @return string
         */
        protected abstract function get_table();
        /**
         * @return string
         */
        protected abstract function get_index();
        /**
         * @var \WPML_Upgrade_Schema
         */
        private $upgrade_schema;
        /**
         * @param array $args
         */
        public function __construct(array $args)
        {
        }
        /**
         * @return bool
         */
        protected function run()
        {
        }
    }
    class AddStatusIndexToStringTranslations extends \WPML\Upgrade\Commands\AddIndexToTable
    {
        protected function get_table()
        {
        }
        protected function get_index()
        {
        }
        protected function get_index_definition()
        {
        }
    }
    class DropCodeLocaleIndexFromLocaleMap extends \WPML\Upgrade\Commands\DropIndexFromTable
    {
        protected function get_table()
        {
        }
        protected function get_index()
        {
        }
    }
}
namespace {
    /**
     * Some sites were not properly upgraded in 4.2.0.
     * In that case the old option was not deleted
     * and new site IDs were wrongly created.
     */
    class WPML_Upgrade_WPML_Site_ID_Remaining implements \IWPML_Upgrade_Command
    {
        /**
         * @var string
         *
         * @see WPML_TM_ATE::SITE_ID_SCOPE
         */
        const SCOPE_ATE = 'ate';
        /**
         * @return bool
         */
        public function run()
        {
        }
        /**
         * @return bool
         */
        protected function old_and_new_options_exist()
        {
        }
        /**
         * @param string $key
         *
         * @return bool
         */
        private function option_exists($key)
        {
        }
        /**
         * Runs in admin pages.
         *
         * @return bool
         */
        public function run_admin()
        {
        }
        /**
         * Unused.
         *
         * @return null
         */
        public function run_ajax()
        {
        }
        /**
         * Unused.
         *
         * @return null
         */
        public function run_frontend()
        {
        }
        /**
         * Unused.
         *
         * @return null
         */
        public function get_results()
        {
        }
    }
    class WPML_Upgrade_Admin_Users_Languages
    {
        private $sitepress;
        const ICL_ADMIN_LANGUAGE_MIGRATED_TO_WP_47 = 'icl_admin_language_migrated_to_wp47';
        public function __construct(\SitePress $sitepress)
        {
        }
        public function add_hooks()
        {
        }
        public function run()
        {
        }
    }
    class WPML_Upgrade_Table_Translate_Job_For_3_9_0 implements \IWPML_Upgrade_Command
    {
        /** @var bool $result */
        private $result = \true;
        /** @var WPML_Upgrade_Schema */
        private $upgrade_schema;
        public function __construct(array $args)
        {
        }
        /** @return bool */
        private function run()
        {
        }
        public function run_admin()
        {
        }
        public function run_ajax()
        {
        }
        public function run_frontend()
        {
        }
        /** @return bool */
        public function get_results()
        {
        }
    }
}
namespace WPML\TM\Upgrade\Commands {
    class AddAteSyncCountToTranslationJob extends \WPML_Upgrade_Add_Column_To_Table
    {
        /**
         * @return string
         */
        protected function get_table()
        {
        }
        /**
         * @return string
         */
        protected function get_column()
        {
        }
        /**
         * @return string
         */
        protected function get_column_definition()
        {
        }
    }
}
namespace {
    class WPML_TM_Add_TP_ID_Column_To_Translation_Status extends \WPML_Upgrade_Run_All
    {
        /** @var WPML_Upgrade_Schema */
        private $upgrade_schema;
        public function __construct(array $args)
        {
        }
        /** @return bool */
        protected function run()
        {
        }
    }
    /**
     * Upgrades the former option to the new one.
     */
    class WPML_TM_Upgrade_WPML_Site_ID_ATE implements \IWPML_Upgrade_Command
    {
        /**
         * Runs the upgrade process.
         *
         * @return bool
         */
        public function run()
        {
        }
        /**
         * True if all conditions are met.
         *
         * @return bool
         */
        private function must_run()
        {
        }
        /**
         * Checks has the old option.
         *
         * @return bool
         */
        protected function site_id_ate_does_not_exist()
        {
        }
        /**
         * Runs in admin pages.
         *
         * @return bool
         */
        public function run_admin()
        {
        }
        /**
         * Unused.
         *
         * @return null
         */
        public function run_ajax()
        {
        }
        /**
         * Unused.
         *
         * @return null
         */
        public function run_frontend()
        {
        }
        /**
         * Unused.
         *
         * @return null
         */
        public function get_results()
        {
        }
    }
    /**
     * Upgrade 'icl_strings' table by adding 'location' column.
     *
     * @package WPML
     */
    /**
     * Class WPML_Upgrade_Add_Location_Column_To_Strings
     */
    class WPML_Upgrade_Add_Location_Column_To_Strings extends \WPML_Upgrade_Add_Column_To_Table
    {
        /**
         * Get table name.
         *
         * @return string
         */
        protected function get_table()
        {
        }
        /**
         * Get column name.
         *
         * @return string
         */
        protected function get_column()
        {
        }
        /**
         * Get column definition.
         *
         * @return string
         */
        protected function get_column_definition()
        {
        }
    }
}
namespace WPML\Upgrade\Commands {
    class AddTranslationManagerCapToAdmin extends \WPML_Upgrade_Run_All
    {
        protected function run()
        {
        }
    }
}
namespace {
    /**
     * Upgrade 'icl_translate_job' table by adding 'editor' column.
     *
     * @package WPML
     */
    /**
     * Class WPML_Upgrade_Add_Editor_Column_To_Icl_Translate_Job
     */
    class WPML_Upgrade_Add_Editor_Column_To_Icl_Translate_Job extends \WPML_Upgrade_Add_Column_To_Table
    {
        /**
         * Get table name.
         *
         * @return string
         */
        protected function get_table()
        {
        }
        /**
         * Get column name.
         *
         * @return string
         */
        protected function get_column()
        {
        }
        /**
         * Get column definition.
         *
         * @return string
         */
        protected function get_column_definition()
        {
        }
    }
    class WPML_Upgrade_Media_Without_Language extends \WPML_Upgrade_Run_All
    {
        /** @var wpdb */
        private $wpdb;
        /** @var string */
        private $default_language;
        public function __construct(array $args)
        {
        }
        /** @return bool */
        protected function run()
        {
        }
    }
    class WPML_Upgrade_Media_Duplication_In_Core implements \IWPML_Upgrade_Command
    {
        const DUPLICATE_FEATURED_META_KEY = '_wpml_media_featured';
        const FEATURED_AS_TRANSLATED_META_KEY = '_wpml_featured_image_as_translated';
        const TRANSIENT_DEFERRED_UPGRADE_IN_PROGRESS = 'wpml_upgrade_media_duplication_in_progress';
        const MAX_TIME = 10;
        /** @var SitePress */
        private $sitepress;
        /** @var WPML_Upgrade $wpml_upgrade */
        private $wpml_upgrade;
        /** @var wpdb $wpdb */
        private $wpdb;
        /** @var WPML_Notices $notices */
        private $notices;
        /** @var WPML_Media_Attachments_Duplication $media_attachment_duplication */
        private $media_attachment_duplication;
        /** @var array $post_thumbnail_map */
        private $post_thumbnail_map;
        /** @var int $start_time */
        private $start_time;
        public function __construct(array $args)
        {
        }
        /**
         * @return bool
         */
        public function run_admin()
        {
        }
        public function deferred_upgrade_admin()
        {
        }
        /**
         * @return bool
         */
        public function run_ajax()
        {
        }
        public function deferred_upgrade_ajax()
        {
        }
        /**
         * @return bool
         */
        public function run_frontend()
        {
        }
        /**
         * @return array
         */
        public function get_results()
        {
        }
        private function process_upgrade()
        {
        }
        private function get_notice_content()
        {
        }
        /**
         * Some posts could have been created between WPML 4.0.2 and WPML 4.0.4
         * And they would have '_wpml_featured_image_as_translated' but not '_wpml_media_featured'
         */
        private function find_posts_altered_between_402_and_404()
        {
        }
        private function duplicate_missing_featured_image_for_post($post)
        {
        }
        private function has_thumbnail($post_id)
        {
        }
        /**
         * @return array
         */
        private function get_post_thumbnail_map()
        {
        }
        private function duplicate_missing_attachments_for_post($post)
        {
        }
        private function should_duplicate_media()
        {
        }
        public function update_global_settings()
        {
        }
        private function cleanup_display_featured_as_translated_meta()
        {
        }
        private function mark_migration_completed()
        {
        }
        private function get_media_settings()
        {
        }
        private function get_media_attachment_duplication()
        {
        }
        private function acquire_lock()
        {
        }
        private function release_lock()
        {
        }
        private function start_timer()
        {
        }
        private function is_max_time_elapsed()
        {
        }
        private function remove_notice()
        {
        }
        private function create_or_refresh_notice()
        {
        }
        private function has_notice()
        {
        }
    }
    class WPML_TM_Add_TP_Revision_And_TS_Status_Columns_To_Translation_Status extends \WPML_Upgrade_Run_All
    {
        /** @var WPML_Upgrade_Schema */
        private $upgrade_schema;
        public function __construct(array $args)
        {
        }
        /** @return bool */
        protected function run()
        {
        }
    }
    class WPML_Upgrade_Chinese_Flags implements \IWPML_Upgrade_Command
    {
        private $wpdb;
        /**
         * WPML_Upgrade_Chinese_Flags constructor.
         *
         * @param array $args {
         *                    'wpdb' => @type wpdb
         *                    }
         */
        public function __construct(array $args)
        {
        }
        public function run()
        {
        }
        /**
         * @param \stdClass $flag
         *
         * @return bool
         */
        protected function must_update($flag)
        {
        }
        public function run_admin()
        {
        }
        public function run_ajax()
        {
        }
        public function run_frontend()
        {
        }
        public function get_results()
        {
        }
    }
    /**
     * Upgrade 'icl_strings' table by adding 'word_count' column.
     *
     * @package WPML
     */
    /**
     * Class WPML_Upgrade_Add_Word_Count_Column_To_Strings
     */
    class WPML_Upgrade_Add_Word_Count_Column_To_Strings extends \WPML_Upgrade_Add_Column_To_Table
    {
        /**
         * Get table name.
         *
         * @return string
         */
        protected function get_table()
        {
        }
        /**
         * Get column name.
         *
         * @return string
         */
        protected function get_column()
        {
        }
        /**
         * Get column definition.
         *
         * @return string
         */
        protected function get_column_definition()
        {
        }
    }
    class WPML_TM_Add_TP_Revision_And_TS_Status_Columns_To_Core_Status implements \IWPML_Upgrade_Command
    {
        /** @var WPML_Upgrade_Schema */
        private $upgrade_schema;
        public function __construct(array $args)
        {
        }
        /** @return bool */
        private function run()
        {
        }
        public function run_admin()
        {
        }
        public function run_ajax()
        {
        }
        public function run_frontend()
        {
        }
        /** @return bool */
        public function get_results()
        {
        }
    }
}
namespace WPML\TM\Upgrade\Commands\SynchronizeSourceIdOfATEJobs {
    class Repository
    {
        /** @var \wpdb */
        private $wpdb;
        /**
         * @param \wpdb $wpdb
         */
        public function __construct(\wpdb $wpdb)
        {
        }
        /**
         * @return \WPML\Collect\Support\Collection
         */
        public function getPairs()
        {
        }
    }
    class Command implements \IWPML_Upgrade_Command
    {
        const CHUNK_SIZE = 1000;
        /** @var Repository */
        private $repository;
        /** @var \WPML_TM_ATE_API */
        private $api;
        /** @var Pager */
        private $pager;
        /** @var CommandsStatus */
        private $commandStatus;
        /** @var bool $result */
        private $result = false;
        /**
         * Command constructor.
         *
         * @param Repository       $repository
         * @param \WPML_TM_ATE_API $api
         * @param Pager            $pager
         * @param CommandsStatus   $commandStatus
         */
        public function __construct(\WPML\TM\Upgrade\Commands\SynchronizeSourceIdOfATEJobs\Repository $repository, \WPML_TM_ATE_API $api, \WPML\Utils\Pager $pager, \WPML\Upgrade\CommandsStatus $commandStatus)
        {
        }
        public function run_admin()
        {
        }
        public function run_ajax()
        {
        }
        public function run_frontend()
        {
        }
        /**
         * @return bool
         */
        public function get_results()
        {
        }
        /**
         * @return mixed
         */
        private function hasBeenMigrateATERepositoryUpgradeRun()
        {
        }
    }
    class CommandFactory
    {
        const PAGER_OPTION_NAME = 'sync-source-id-ate-jobs-pager';
        /**
         * @return Command
         */
        public function create()
        {
        }
    }
}
namespace {
    class WPML_Upgrade_Display_Mode_For_Posts implements \IWPML_Upgrade_Command
    {
        const DISPLAY_MODE_SETTING = 'show_untranslated_blog_posts';
        /** @var SitePress */
        private $sitepress;
        /** @var WPML_Settings_Helper */
        private $settings;
        /** @var WPML_Notices */
        private $wpml_notices;
        public function __construct(array $args)
        {
        }
        /**
         * @return bool
         */
        public function run_admin()
        {
        }
        public function add_notice()
        {
        }
        /**
         * @return bool
         */
        public function run_ajax()
        {
        }
        /**
         * @return bool
         */
        public function run_frontend()
        {
        }
        /**
         * @return array
         */
        public function get_results()
        {
        }
        private function get_notice_content()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_Support_Info_Filter
    {
        /** @var WPML_TM_Support_Info */
        private $support_info;
        function __construct(\WPML_TM_Support_Info $support_info)
        {
        }
        /**
         * @param array $blocks
         *
         * @return array
         */
        public function filter_blocks(array $blocks)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Support_Info_UI_Factory
    {
        function create()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Support_Info
    {
        /** @var wpdb */
        private $wpdb;
        /**
         * @param wpdb $wpdb
         */
        public function __construct(\wpdb $wpdb)
        {
        }
        public function is_suhosin_active()
        {
        }
        public function eval_disabled_by_suhosin()
        {
        }
        public function get_max_execution_time()
        {
        }
        public function get_max_input_vars()
        {
        }
        public function get_php_memory_limit()
        {
        }
        public function get_memory_usage()
        {
        }
        public function get_php_version()
        {
        }
        public function get_wp_memory_limit()
        {
        }
        public function get_wp_max_memory_limit()
        {
        }
        public function get_wp_multisite()
        {
        }
        public function get_wp_version()
        {
        }
        public function is_memory_less_than($reference, $memory)
        {
        }
        public function is_version_less_than($reference, $version)
        {
        }
        public function is_utf8mb4_charset_supported()
        {
        }
        private function return_bytes($val)
        {
        }
        private function format_size_units($bytes)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Support_Info_UI
    {
        /** @var WPML_Support_Info */
        private $support_info;
        /** @var IWPML_Template_Service */
        private $template_service;
        function __construct(\WPML_Support_Info $support_info, \IWPML_Template_Service $template_service)
        {
        }
        /**
         * @return string
         */
        public function show()
        {
        }
        /** @return array */
        private function get_model()
        {
        }
        /**
         * @param array  $blocks
         * @param string $type
         */
        private function set_has_messages(array &$blocks, $type)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_Support_Info
    {
        public function is_simplexml_extension_loaded()
        {
        }
    }
    class WPML_TM_Dashboard_Display_Filter
    {
        const PARENT_TAXONOMY_CONTAINER = 'parent-taxonomy-container';
        const PARENT_SELECT_ID = 'parent-filter-control';
        const PARENT_SELECT_NAME = 'filter[parent_type]';
        const PARENT_OR_TAXONOMY_ITEM_CONTAINER = 'parent-taxonomy-item-container';
        private $active_languages = array();
        private $translation_filter;
        private $post_types;
        private $post_statuses;
        private $source_language_code;
        private $priorities;
        /** @var wpdb $wpdb */
        private $wpdb;
        public function __construct($active_languages, $source_language_code, $translation_filter, $post_types, $post_statuses, array $priorities, \wpdb $wpdb)
        {
        }
        private function from_lang_select()
        {
        }
        private function get_language_from()
        {
        }
        private function get_language_from_filter()
        {
        }
        private function to_lang_select()
        {
        }
        private function translation_status_select()
        {
        }
        private function get_from_language_filter_lock_message_if_required()
        {
        }
        private function display_post_type_select()
        {
        }
        private function display_parent_taxonomy_controls()
        {
        }
        private function filter_title_textbox()
        {
        }
        private function display_post_statuses_select()
        {
        }
        private function display_post_translation_priority_select()
        {
        }
        private function display_button()
        {
        }
        public function display()
        {
        }
        private function has_taxonomy_terms_in_any_language($taxonomy)
        {
        }
        private function heading($text)
        {
        }
        private function get_admin_page_url(array $query_args)
        {
        }
    }
    /**
     * Class WPML_TM_Dashboard_Pagination
     */
    class WPML_TM_Dashboard_Pagination
    {
        public function add_hooks()
        {
        }
        /**
         * @param array $query_args
         * @param array $args
         *
         * @return array
         */
        public function filter_dashboard_post_query_args_for_pagination($query_args, $args)
        {
        }
        /**
         * @param integer $posts_per_page
         * @param integer $found_documents
         */
        public function add_tm_dashboard_pagination($posts_per_page, $found_documents)
        {
        }
    }
    class WPML_TM_Dashboard_Document_Row
    {
        /** @var stdClass $data */
        private $data;
        private $post_types;
        private $active_languages;
        private $selected;
        private $note_text;
        private $note_icon_class;
        private $post_statuses;
        /** @var SitePress $sitepress */
        private $sitepress;
        /** @var WPML_TM_Translatable_Element_Provider $translatable_element_provider */
        private $translatable_element_provider;
        public function __construct($doc_data, $post_types, $post_statuses, $active_languages, $selected, \SitePress $sitepress, \WPML_TM_Translatable_Element_Provider $translatable_element_provider)
        {
        }
        public function get_word_count()
        {
        }
        public function get_title()
        {
        }
        private function is_external_type()
        {
        }
        public function get_type_prefix()
        {
        }
        public function get_type()
        {
        }
        public function display()
        {
        }
        private function get_date()
        {
        }
        private function has_remote_jobs($jobs)
        {
        }
        private function get_general_status()
        {
        }
        private function get_status_in_lang($language_code)
        {
        }
    }
}
namespace WPML\TM\Menu\Dashboard {
    class PostJobsRepository
    {
        /**
         * @param int    $original_element_id
         * @param string $element_type
         *
         * @return array
         */
        public function getJobsGroupedByLang($original_element_id, $element_type)
        {
        }
        /**
         * @param int    $original_element_id
         * @param string $element_type
         *
         * @return \WPML\Collect\Support\Collection
         */
        private function getJobsFor($original_element_id, $element_type)
        {
        }
        /**
         * @param int    $original_element_id
         * @param string $element_type
         *
         * @return \WPML_TM_Jobs_Search_Params
         */
        private function buildSearchParams($original_element_id, $element_type)
        {
        }
        /**
         * @param \WPML_TM_Post_Job_Entity $job
         *
         * @return array
         */
        public function mapJob(\WPML_TM_Post_Job_Entity $job)
        {
        }
        /**
         * @param \WPML_TM_Job_Entity $job
         *
         * @return int
         */
        private function getJobStatus(\WPML_TM_Job_Entity $job)
        {
        }
        /**
         * @param \WPML_TM_Job_Entity $job
         *
         * @return bool
         */
        private function postHasTranslationButLatestJobCancelled(\WPML_TM_Job_Entity $job)
        {
        }
    }
}
namespace {
    /**
     * Created by PhpStorm.
     * User: bruce
     * Date: 20/04/17
     * Time: 11:39 AM
     */
    class WPML_TM_WP_Query extends \WP_Query
    {
        public function get_found_count()
        {
        }
    }
}
namespace WPML\TM\Menu\TranslationRoles {
    class RoleValidator
    {
        /**
         * @param string $roleName
         *
         * @return string|null
         */
        public static function getTheHighestPossibleIfNotValid($roleName)
        {
        }
    }
}
namespace {
    interface IWPML_TM_Admin_Section
    {
        /**
         * Returns a value which will be used for sorting the sections.
         *
         * @return int
         */
        public function get_order();
        /**
         * Returns the unique slug of the sections which is used to build the URL for opening this section.
         *
         * @return string
         */
        public function get_slug();
        /**
         * Returns one or more capabilities required to display this section.
         *
         * @return string|array
         */
        public function get_capabilities();
        /**
         * Returns the caption to display in the section.
         *
         * @return string
         */
        public function get_caption();
        /**
         * Returns the callback responsible for rendering the content of the section.
         *
         * @return callable
         */
        public function get_callback();
        /**
         * This method is hooked to the `admin_enqueue_scripts` action.
         *
         * @param string $hook The current page.
         */
        public function admin_enqueue_scripts($hook);
        /**
         * Used to extend the logic for displaying/hiding the section.
         *
         * @return bool
         */
        public function is_visible();
    }
    class WPML_TM_Translation_Roles_Section implements \IWPML_TM_Admin_Section
    {
        const SLUG = 'translators';
        /**
         * @var Section
         */
        private $translation_services_section;
        public function __construct(\WPML\TM\Menu\TranslationServices\Section $translation_services_section)
        {
        }
        /**
         * Returns a value which will be used for sorting the sections.
         *
         * @return int
         */
        public function get_order()
        {
        }
        /**
         * Returns the unique slug of the sections which is used to build the URL for opening this section.
         *
         * @return string
         */
        public function get_slug()
        {
        }
        /**
         * Returns one or more capabilities required to display this section.
         *
         * @return string|array
         */
        public function get_capabilities()
        {
        }
        /**
         * Returns the caption to display in the section.
         *
         * @return string
         */
        public function get_caption()
        {
        }
        /**
         * Returns the callback responsible for rendering the content of the section.
         *
         * @return callable
         */
        public function get_callback()
        {
        }
        /**
         * This method is hooked to the `admin_enqueue_scripts` action.
         *
         * @param string $hook The current page.
         */
        public function admin_enqueue_scripts($hook)
        {
        }
        /**
         * Used to extend the logic for displaying/hiding the section.
         *
         * @return bool
         */
        public function is_visible()
        {
        }
        /**
         * Outputs the content of the section.
         */
        public function render()
        {
        }
    }
    interface IWPML_TM_Admin_Section_Factory
    {
        /**
         * Returns an instance of a class implementing \IWPML_TM_Admin_Section.
         *
         * @return \IWPML_TM_Admin_Section
         */
        public function create();
    }
    class WPML_TM_Translation_Roles_Section_Factory implements \IWPML_TM_Admin_Section_Factory
    {
        /**
         * @return \WPML_TM_Admin_Section|\WPML_TM_Translation_Roles_Section
         */
        public function create()
        {
        }
    }
    class WPML_TM_Admin_Menus_Factory implements \IWPML_Backend_Action_Loader
    {
        public function create()
        {
        }
    }
    /**
     * It handles the admin sections shown in the TM page.
     *
     * @author OnTheGo Systems
     */
    class WPML_TM_Admin_Sections
    {
        /**
         * It stores the tab items.
         *
         * @var array The tab items.
         */
        private $tab_items = array();
        /**
         * It stores the tab items.
         *
         * @var IWPML_TM_Admin_Section[] The admin sections.
         */
        private $admin_sections = array();
        /** @var array */
        private $items_urls = array();
        /**
         * It adds the hooks.
         */
        public function init_hooks()
        {
        }
        public function init_sections()
        {
        }
        /**
         * @return \IWPML_TM_Admin_Section[]
         */
        private function get_admin_sections()
        {
        }
        /**
         * It returns the tab items.
         *
         * @return array The tab items.
         */
        public function get_tab_items()
        {
        }
        /**
         * It returns and filters the admin sections in the TM page.
         *
         * @return array<\WPML\TM\Menu\TranslationServices\SectionFactory|\WPML_TM_AMS_ATE_Console_Section_Factory|\WPML_TM_Translation_Roles_Section_Factory>
         */
        private function get_admin_section_factories()
        {
        }
        /**
         * Returns the URL of a tab item or an empty string if it cannot be found.
         *
         * @param string $slug
         *
         * @return string
         */
        public function get_item_url($slug)
        {
        }
        /**
         * Returns an instance of IWPML_TM_Admin_Section from its slug or null if it cannot be found.
         *
         * @param string $slug
         *
         * @return \IWPML_TM_Admin_Section|null
         */
        public function get_section($slug)
        {
        }
        /**
         * @return bool
         */
        public static function is_translation_roles_section()
        {
        }
        /**
         * @return bool
         */
        public static function is_translation_services_section()
        {
        }
        /**
         * @return bool
         */
        public static function is_dashboard_section()
        {
        }
        /**
         * @param string $section
         *
         * @return bool
         */
        private static function is_section($section)
        {
        }
    }
    class WPML_TM_Jobs_List_Status_Names
    {
        /**
         * @return array
         */
        public static function get_statuses()
        {
        }
    }
    class WPML_TM_Jobs_List_Translators
    {
        /** @var WPML_Translator_Records */
        private $translator_records;
        /**
         * @param WPML_Translator_Records $translator_records
         */
        public function __construct(\WPML_Translator_Records $translator_records)
        {
        }
        public function get()
        {
        }
        private function getTranslatorData($translator)
        {
        }
        private function getLanguagePairs($translator)
        {
        }
    }
    class WPML_TM_Jobs_List_Script_Data
    {
        /** @var WPML_TM_Rest_Jobs_Language_Names */
        private $language_names;
        /** @var WPML_TM_Jobs_List_Translated_By_Filters */
        private $translated_by_filter;
        /** @var WPML_TM_Jobs_List_Translators */
        private $translators;
        /** @var WPML_TM_Jobs_List_Services */
        private $services;
        /**
         * @param WPML_TM_Rest_Jobs_Language_Names|null        $language_names
         * @param WPML_TM_Jobs_List_Translated_By_Filters|null $translated_by_filters
         * @param WPML_TM_Jobs_List_Translators|null           $translators
         * @param WPML_TM_Jobs_List_Services|null              $services
         */
        public function __construct(\WPML_TM_Rest_Jobs_Language_Names $language_names = \null, \WPML_TM_Jobs_List_Translated_By_Filters $translated_by_filters = \null, \WPML_TM_Jobs_List_Translators $translators = \null, \WPML_TM_Jobs_List_Services $services = \null)
        {
        }
        /**
         * @return array
         */
        public function get()
        {
        }
    }
    class WPML_TM_Jobs_List_Services
    {
        /** @var wpdb */
        private $wpdb;
        /** @var WPML_TM_Rest_Jobs_Translation_Service */
        private $service_names;
        /** @var array|null */
        private $cache;
        public function __construct(\WPML_TM_Rest_Jobs_Translation_Service $service_names)
        {
        }
        public function get()
        {
        }
        private function map($translation_service_id)
        {
        }
    }
    class WPML_TM_Jobs_List_Translated_By_Filters
    {
        /** @var WPML_TM_Jobs_List_Services */
        private $services;
        /** @var WPML_TM_Jobs_List_Translators */
        private $translators;
        /**
         * @param WPML_TM_Jobs_List_Services    $services
         * @param WPML_TM_Jobs_List_Translators $translators
         */
        public function __construct(\WPML_TM_Jobs_List_Services $services, \WPML_TM_Jobs_List_Translators $translators)
        {
        }
        /**
         * @return array
         */
        public function get()
        {
        }
    }
    class WPML_TM_Admin_Menus_Hooks implements \IWPML_Action
    {
        public function add_hooks()
        {
        }
        public function init_action()
        {
        }
        public function redirect_settings_menu()
        {
        }
        public function redirect_from_empty_basket_page()
        {
        }
        public static function is_tm_basket_empty()
        {
        }
    }
}
namespace WPML\TM\Menu\TranslationMethod {
    class TranslationMethodSettings
    {
        public static function addHooks()
        {
        }
        public static function localize()
        {
        }
        public static function render()
        {
        }
    }
}
namespace {
    /**
     * It handles the TM section responsible for displaying the AMS/ATE console.
     *
     * This class takes care of the following:
     * - enqueuing the external script which holds the React APP
     * - adding the ID to the enqueued script (as it's required by the React APP)
     * - adding an inline script to initialize the React APP
     *
     * @author OnTheGo Systems
     */
    class WPML_TM_AMS_ATE_Console_Section implements \IWPML_TM_Admin_Section
    {
        const ATE_APP_ID = 'eate_widget';
        const TAB_ORDER = 10000;
        const CONTAINER_SELECTOR = '#ams-ate-console';
        const TAB_SELECTOR = '.wpml-tabs .nav-tab.nav-tab-active.nav-tab-ate-ams';
        const SLUG = 'ate-ams';
        /**
         * An instance of \SitePress.
         *
         * @var SitePress The instance of \SitePress.
         */
        private $sitepress;
        /**
         * Instance of WPML_TM_ATE_AMS_Endpoints.
         *
         * @var WPML_TM_ATE_AMS_Endpoints
         */
        private $endpoints;
        /**
         * Instance of WPML_TM_ATE_Authentication.
         *
         * @var WPML_TM_ATE_Authentication
         */
        private $auth;
        /**
         * Instance of WPML_TM_AMS_API.
         *
         * @var WPML_TM_AMS_API
         */
        private $ams_api;
        /**
         * WPML_TM_AMS_ATE_Console_Section constructor.
         *
         * @param SitePress                  $sitepress The instance of \SitePress.
         * @param WPML_TM_ATE_AMS_Endpoints  $endpoints The instance of WPML_TM_ATE_AMS_Endpoints.
         * @param WPML_TM_ATE_Authentication $auth      The instance of WPML_TM_ATE_Authentication.
         * @param WPML_TM_AMS_API            $ams_api   The instance of WPML_TM_AMS_API.
         */
        public function __construct(\SitePress $sitepress, \WPML_TM_ATE_AMS_Endpoints $endpoints, \WPML_TM_ATE_Authentication $auth, \WPML_TM_AMS_API $ams_api)
        {
        }
        /**
         * Returns a value which will be used for sorting the sections.
         *
         * @return int
         */
        public function get_order()
        {
        }
        /**
         * Returns the unique slug of the sections which is used to build the URL for opening this section.
         *
         * @return string
         */
        public function get_slug()
        {
        }
        /**
         * Returns one or more capabilities required to display this section.
         *
         * @return string|array
         */
        public function get_capabilities()
        {
        }
        /**
         * Returns the caption to display in the section.
         *
         * @return string
         */
        public function get_caption()
        {
        }
        /**
         * Returns the callback responsible for rendering the content of the section.
         *
         * @return callable
         */
        public function get_callback()
        {
        }
        /**
         * Used to extend the logic for displaying/hiding the section.
         *
         * @return bool
         */
        public function is_visible()
        {
        }
        /**
         * Outputs the content of the section.
         */
        public function render()
        {
        }
        /**
         * This method is hooked to the `admin_enqueue_scripts` action.
         *
         * @param string $hook The current page.
         */
        public function admin_enqueue_scripts($hook)
        {
        }
        /**
         * It returns true if the current page and tab are the ATE Console.
         *
         * @return bool
         */
        private function is_ate_console_tab()
        {
        }
        /**
         * It returns the list of all translatable post types.
         *
         * @return array
         */
        private function get_post_types_data()
        {
        }
        /**
         * It returns the current user's language.
         *
         * @return string
         */
        private function get_user_admin_language()
        {
        }
        /**
         * @return array<string,mixed>
         */
        public function get_widget_constructor()
        {
        }
        /**
         * @return string
         */
        public function getWidgetScriptUrl()
        {
        }
    }
    class WPML_TM_AMS_ATE_Console_Section_Factory implements \IWPML_TM_Admin_Section_Factory
    {
        /**
         * Returns an instance of a class implementing \IWPML_TM_Admin_Section.
         *
         * @return \IWPML_TM_Admin_Section
         */
        public function create()
        {
        }
    }
    class WPML_TM_Options_Ajax
    {
        const NONCE_TRANSLATED_DOCUMENT = 'wpml-translated-document-options-nonce';
        private $sitepress;
        public function __construct(\SitePress $sitepress)
        {
        }
        public function ajax_hooks()
        {
        }
        public function wpml_translated_document_options()
        {
        }
        private function is_valid_request()
        {
        }
    }
    abstract class WPML_TM_MCS_Section_UI
    {
        private $id;
        private $title;
        public function __construct($id, $title)
        {
        }
        /**
         * @return mixed
         */
        public function get_id()
        {
        }
        public function add_hooks()
        {
        }
        public function mcsetup_navigation_links(array $mcsetup_sections)
        {
        }
        public function render()
        {
        }
        /**
         * @return string
         */
        protected abstract function render_content();
    }
    class WPML_Translate_Link_Targets_UI extends \WPML_TM_MCS_Section_UI
    {
        const ID = 'ml-content-setup-sec-links-target';
        /** @var WPDB $wpdb */
        private $wpdb;
        /** @var WPML_Pro_Translation $pro_translation */
        private $pro_translation;
        /** @var  WPML_WP_API $wp_api */
        private $wp_api;
        /** @var  SitePress $sitepress */
        private $sitepress;
        public function __construct($title, $wpdb, $sitepress, $pro_translation)
        {
        }
        /**
         * @return string
         */
        protected function render_content()
        {
        }
    }
    class WPML_TM_MCS_Custom_Field_Settings_Menu_Factory
    {
        /** @var WPML_Custom_Field_Setting_Factory $setting_factory */
        private $setting_factory;
        /** @var WPML_UI_Unlock_Button $unlock_button */
        private $unlock_button;
        /** @var WPML_Custom_Field_Setting_Query_Factory $query_factory */
        private $query_factory;
        /**
         * @return WPML_TM_MCS_Post_Custom_Field_Settings_Menu
         */
        public function create_post()
        {
        }
        /**
         * @return WPML_TM_MCS_Term_Custom_Field_Settings_Menu
         */
        public function create_term()
        {
        }
        private function get_setting_factory()
        {
        }
        private function get_unlock_button()
        {
        }
        private function get_query_factory()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_MCS_ATE_Strings
    {
        const AMS_STATUS_ACTIVE_NOT_ALL_SUBSCRIBED = 'active-not-all-subscribed';
        /**
         * @var WPML_TM_ATE_Authentication
         */
        private $authentication;
        private $authentication_data;
        /**
         * @var WPML_TM_ATE_AMS_Endpoints
         */
        private $endpoints;
        private $statuses;
        /**
         * WPML_TM_MCS_ATE constructor.
         *
         * @param WPML_TM_ATE_Authentication $authentication
         * @param WPML_TM_ATE_AMS_Endpoints  $endpoints
         */
        public function __construct(\WPML_TM_ATE_Authentication $authentication, \WPML_TM_ATE_AMS_Endpoints $endpoints)
        {
        }
        /**
         * @return string|WP_Error
         * @throws \InvalidArgumentException
         */
        public function get_auto_login()
        {
        }
        public function get_status_HTML($status, $all_users_have_subscription = \true)
        {
        }
        /**
         * @return string
         */
        public function get_status()
        {
        }
        /**
         * @param string     $attribute
         * @param null|mixed $default
         *
         * @return mixed
         */
        public function get_current_status_attribute($attribute, $default = \null)
        {
        }
        /**
         * @param string     $status
         * @param string     $attribute
         * @param null|mixed $default
         *
         * @return mixed
         */
        public function get_status_attribute($status, $attribute, $default = \null)
        {
        }
        public function get_statuses()
        {
        }
        public function get_synchronize_button_text()
        {
        }
    }
    /**
     * Class WPML_TM_MCS_Pagination_Ajax
     */
    class WPML_TM_MCS_Pagination_Ajax
    {
        /** @var WPML_TM_MCS_Custom_Field_Settings_Menu_Factory */
        private $menu_factory;
        public function __construct(\WPML_TM_MCS_Custom_Field_Settings_Menu_Factory $menu_factory)
        {
        }
        /**
         * Define Ajax hooks.
         */
        public function add_hooks()
        {
        }
        /**
         * Update custom fields form.
         */
        public function update_mcs_cf()
        {
        }
    }
    /**
     * Class WPML_TM_MCS_Search_Factory
     */
    class WPML_TM_MCS_Search_Factory
    {
        /**
         * Create MCS Search.
         *
         * @param string $search_string
         *
         * @return WPML_TM_MCS_Search_Render
         */
        public function create($search_string = '')
        {
        }
    }
    /**
     * WPML_TM_MCS_Pagination_Render class file.
     *
     * @package wpml-translation-management
     */
    /**
     * Class WPML_TM_MCS_Pagination_Render
     */
    class WPML_TM_MCS_Pagination_Render
    {
        /**
         * Twig template path.
         */
        const TM_MCS_PAGINATION_TEMPLATE = 'tm-mcs-pagination.twig';
        /**
         * Twig template service.
         *
         * @var IWPML_Template_Service
         */
        private $template;
        /**
         * Admin pagination instance.
         *
         * @var WPML_Admin_Pagination
         */
        private $pagination;
        /**
         * Items per page.
         *
         * @var int Items per page
         */
        private $items_per_page;
        /**
         * Total items.
         *
         * @var int Total items
         */
        private $total_items;
        /**
         * Current page number.
         *
         * @var int Current page
         */
        private $current_page;
        /**
         * Total number of pages.
         *
         * @var int Total pages
         */
        private $total_pages;
        /**
         * WPML_TM_MCS_Pagination_Render constructor.
         *
         * @param IWPML_Template_Service $template   Twig template service.
         * @param WPML_Admin_Pagination  $pagination Admin pagination object.
         */
        public function __construct(\IWPML_Template_Service $template, \WPML_Admin_Pagination $pagination)
        {
        }
        /**
         * Get twig model.
         *
         * @return array
         */
        private function get_model()
        {
        }
        /**
         * Render model via twig.
         *
         * @return mixed
         */
        public function render()
        {
        }
        /**
         * Paginate links.
         *
         * @return array
         */
        public function paginate_links()
        {
        }
    }
    class WPML_TM_Pickup_Mode_Ajax
    {
        const NONCE_PICKUP_MODE = 'wpml_save_translation_pickup_mode';
        /**
         * @var SitePress
         */
        private $sitepress;
        /**
         * @var WPML_Update_PickUp_Method
         */
        private $update_pickup_mode;
        /**
         * @var WPML_Pro_Translation
         */
        private $icl_pro_translation;
        public function __construct(\SitePress $sitepress, \WPML_Pro_Translation $icl_pro_translation)
        {
        }
        public function ajax_hooks()
        {
        }
        public function wpml_save_translation_pickup_mode()
        {
        }
        private function is_valid_request()
        {
        }
    }
    /**
     * Class WPML_TM_MCS_Search_Render
     */
    class WPML_TM_MCS_Search_Render
    {
        /**
         * Twig template path.
         */
        const TM_MCS_SEARCH_TEMPLATE = 'tm-mcs-search.twig';
        /**
         * @var IWPML_Template_Service
         */
        private $template;
        /**
         * @var string Search string
         */
        private $search_string;
        /**
         * WPML_TM_MCS_Search_Render constructor.
         *
         * @param IWPML_Template_Service $template Twig template service.
         * @param string                 $search_string Search string.
         */
        public function __construct(\IWPML_Template_Service $template, $search_string)
        {
        }
        /**
         * Get twig model.
         *
         * @return array
         */
        public function get_model()
        {
        }
        /**
         * Render model via twig.
         *
         * @return mixed
         */
        public function render()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_MCS_ATE extends \WPML_Twig_Template_Loader
    {
        /**
         * @var WPML_TM_ATE_Authentication
         */
        private $authentication;
        private $authentication_data;
        /**
         * @var WPML_TM_ATE_AMS_Endpoints
         */
        private $endpoints;
        /**
         * @var WPML_TM_MCS_ATE_Strings
         */
        private $strings;
        private $model = array();
        /**
         *
         * /**
         * WPML_TM_MCS_ATE constructor.
         *
         * @param WPML_TM_ATE_Authentication $authentication
         * @param WPML_TM_ATE_AMS_Endpoints  $endpoints
         *
         * @param WPML_TM_MCS_ATE_Strings    $strings
         */
        public function __construct(\WPML_TM_ATE_Authentication $authentication, \WPML_TM_ATE_AMS_Endpoints $endpoints, \WPML_TM_MCS_ATE_Strings $strings)
        {
        }
        /**
         * @return string
         */
        public function get_template_path()
        {
        }
        public function init_hooks()
        {
        }
        /**
         * @param array $args
         *
         * @return array
         */
        public function get_model(array $args = array())
        {
        }
        public function render()
        {
        }
        public function renderTroubleshooting()
        {
        }
        public function get_strings()
        {
        }
        private function has_translators()
        {
        }
        /**
         * @return mixed
         */
        private function get_status_button_text()
        {
        }
        /**
         * @return array
         */
        public function get_script_data()
        {
        }
    }
    /**
     * Class WPML_TM_MCS_Pagination_Render_Factory
     */
    class WPML_TM_MCS_Pagination_Render_Factory
    {
        /**
         * @var int Items per page
         */
        private $items_per_page;
        /**
         * WPML_TM_MCS_Pagination_Render_Factory constructor.
         *
         * @param int $items_per_page
         */
        public function __construct($items_per_page)
        {
        }
        /**
         * @param $items_per_page
         * @param $total_items
         * @param int            $current_page
         *
         * @return WPML_TM_MCS_Pagination_Render
         */
        public function create($total_items, $current_page = 1)
        {
        }
    }
}
namespace WPML\TM\Menu\McSetup {
    class CfMetaBoxOption
    {
        const GROUP = 'core';
        const CF_META_BOX_OPTION_KEY = 'show_cf_meta_box';
        /**
         * @return boolean
         */
        public static function get()
        {
        }
        /**
         * @param boolean $value
         */
        public static function update($value)
        {
        }
    }
}
namespace {
    abstract class WPML_TM_MCS_Custom_Field_Settings_Menu
    {
        /** @var  WPML_Custom_Field_Setting_Factory $settings_factory */
        protected $settings_factory;
        /** @var WPML_UI_Unlock_Button $unlock_button_ui */
        private $unlock_button_ui;
        /** @var WPML_Custom_Field_Setting_Query_Factory $query_factory */
        private $query_factory;
        /** @var WPML_Custom_Field_Setting_Query $query */
        private $query;
        /** @var string[] Custom field keys */
        private $custom_fields_keys;
        /** @var int $total_keys */
        private $total_keys;
        /** @var array Custom field options */
        private $custom_field_options;
        /** @var int Initial setting of items per page */
        const ITEMS_PER_PAGE = 20;
        public function __construct(\WPML_Custom_Field_Setting_Factory $settings_factory, \WPML_UI_Unlock_Button $unlock_button_ui, \WPML_Custom_Field_Setting_Query_Factory $query_factory)
        {
        }
        /**
         * This will fetch the data from DB
         * depending on the user inputs (pagination/search)
         *
         * @param array $args
         */
        public function init_data(array $args = array())
        {
        }
        /**
         * @return string
         */
        public function render()
        {
        }
        /**
         * @return string
         */
        protected abstract function kind_shorthand();
        /**
         * @return string
         */
        protected abstract function get_title();
        protected abstract function get_meta_type();
        /**
         * @param string $key
         *
         * @return WPML_Custom_Field_Setting
         */
        protected abstract function get_setting($key);
        private function render_radio($cf_key, $html_disabled, $status, $ref_status)
        {
        }
        private function get_radio_name($cf_key)
        {
        }
        private function get_unlock_name($cf_key)
        {
        }
        /**
         * @return string header and footer of the setting table
         */
        private function render_heading()
        {
        }
        /**
         * Render search box for Custom Field Settings.
         *
         * @param string $search_string Search String.
         */
        public function render_search($search_string = '')
        {
        }
        /**
         * Render body of Custom Field Settings.
         */
        public function render_body()
        {
        }
        /**
         * Render pagination for Custom Field Settings.
         *
         * @param int $items_per_page Items per page to display.
         * @param int $current_page Which page to display.
         */
        public function render_pagination($items_per_page, $current_page)
        {
        }
        public abstract function get_no_data_message();
        public abstract function get_column_header($id);
        /**
         * @return WPML_Custom_Field_Setting_Query
         */
        private function get_query()
        {
        }
    }
    class WPML_TM_MCS_Term_Custom_Field_Settings_Menu extends \WPML_TM_MCS_Custom_Field_Settings_Menu
    {
        /**
         * @return string
         */
        protected function get_meta_type()
        {
        }
        /**
         * @param string $key
         *
         * @return WPML_Term_Custom_Field_Setting
         */
        protected function get_setting($key)
        {
        }
        /**
         * @return string
         */
        protected function get_title()
        {
        }
        /**
         * @return string
         */
        protected function kind_shorthand()
        {
        }
        /**
         * @return string
         */
        public function get_no_data_message()
        {
        }
        /**
         * @param string $id
         *
         * @return string
         */
        public function get_column_header($id)
        {
        }
    }
    class WPML_TM_MCS_Post_Custom_Field_Settings_Menu extends \WPML_TM_MCS_Custom_Field_Settings_Menu
    {
        /**
         * @return string
         */
        protected function get_meta_type()
        {
        }
        /**
         * @param string $key
         *
         * @return WPML_Post_Custom_Field_Setting
         */
        protected function get_setting($key)
        {
        }
        /**
         * @return string
         */
        protected function get_title()
        {
        }
        /**
         * @return string
         */
        protected function kind_shorthand()
        {
        }
        /**
         * @return string
         */
        public function get_no_data_message()
        {
        }
        /**
         * @param string $id
         *
         * @return string
         */
        public function get_column_header($id)
        {
        }
    }
    /**
     * Class WPML_TM_MCS_Pagination_Ajax_Factory
     */
    class WPML_TM_MCS_Pagination_Ajax_Factory implements \IWPML_AJAX_Action_Loader
    {
        /**
         * Create MCS Pagination.
         *
         * @return WPML_TM_MCS_Pagination_Ajax
         */
        public function create()
        {
        }
    }
    class WPML_TM_Editor_Job_Save
    {
        public function save($data)
        {
        }
    }
    class WPML_Translation_Editor extends \WPML_WPDB_And_SP_User
    {
        /**
         * @var WPML_Element_Translation_Job $job
         */
        private $job;
        /**
         * @param SitePress                    $sitepress
         * @param wpdb                         $wpdb
         * @param WPML_Element_Translation_Job $job
         */
        public function __construct(&$sitepress, &$wpdb, $job)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * Enqueues the JavaScript used by the TM editor.
         */
        public function enqueue_js()
        {
        }
        /**
         * @return string[]
         */
        private function get_translation_editor_strings()
        {
        }
        public function filter_original_editor_buttons($config, $editor_id)
        {
        }
        public function output_editors($field)
        {
        }
    }
    class WPML_Custom_Field_Editor_Settings
    {
        /** @var WPML_Custom_Field_Setting_Factory */
        private $settings_factory;
        public function __construct(\WPML_Custom_Field_Setting_Factory $settingsFactory)
        {
        }
        public function filter_name($fieldType, $default)
        {
        }
        public function filter_style($fieldType, $default)
        {
        }
        public function get_group($fieldType)
        {
        }
        private function extractTypeName($fieldType)
        {
        }
    }
    class WPML_Editor_UI_Fields
    {
        private $fields = array();
        public function add_field($field)
        {
        }
        public function get_fields()
        {
        }
        public function get_layout()
        {
        }
    }
    class WPML_Editor_UI_Field_Section extends \WPML_Editor_UI_Fields
    {
        private $title;
        private $sub_title;
        function __construct($title = '', $sub_title = '')
        {
        }
        public function get_layout()
        {
        }
    }
    class WPML_Editor_UI_Field_Group extends \WPML_Editor_UI_Fields
    {
        private $title;
        private $divider;
        function __construct($title = '', $divider = \true)
        {
        }
        public function get_layout()
        {
        }
    }
    class WPML_Editor_UI_Field
    {
        protected $id;
        protected $title;
        protected $original;
        protected $translation;
        private $requires_complete;
        protected $is_complete;
        function __construct($id, $title, $data, $requires_complete = \false)
        {
        }
        public function get_fields()
        {
        }
        public function get_layout()
        {
        }
    }
    class WPML_Editor_UI_TextArea_Field extends \WPML_Editor_UI_Field
    {
        private $include_copy_button;
        function __construct($id, $title, $data, $include_copy_button, $requires_complete = \false)
        {
        }
        public function get_fields()
        {
        }
    }
    class WPML_Editor_UI_WYSIWYG_Field extends \WPML_Editor_UI_Field
    {
        private $include_copy_button;
        function __construct($id, $title, $data, $include_copy_button, $requires_complete = \false)
        {
        }
        public function get_fields()
        {
        }
    }
    class WPML_Editor_UI_Single_Line_Field extends \WPML_Editor_UI_Field
    {
        private $include_copy_button;
        function __construct($id, $title, $data, $include_copy_button, $requires_complete = \false)
        {
        }
        public function get_fields()
        {
        }
    }
    class WPML_Editor_UI_Field_Image extends \WPML_Editor_UI_Fields
    {
        private $image_id;
        private $divider;
        private $group;
        function __construct($id, $image_id, $data, $divider = \true)
        {
        }
        public function get_layout()
        {
        }
    }
    class WPML_Translation_Editor_Languages extends \WPML_SP_User
    {
        private $job;
        /**
         * @param SitePress $sitepress
         */
        public function __construct(&$sitepress, $job)
        {
        }
        public function get_model()
        {
        }
    }
    class WPML_TM_Field_Type_Sanitizer
    {
        /**
         * Get elements custom field `field_type`.
         * Removes last character if it's number.
         * ex. field-custom_field-0 => field-custom_field
         *
         * @param $element
         *
         * @return string
         */
        public static function sanitize($custom_field_type)
        {
        }
    }
    abstract class WPML_TM_Job_Action
    {
        /** @var  WPML_TM_Job_Action_Factory $job_action_factory */
        protected $job_action_factory;
        /**
         * WPML_TM_Job_Action constructor.
         *
         * @param WPML_TM_Job_Action_Factory $job_action_factory
         */
        public function __construct(&$job_action_factory)
        {
        }
    }
    class WPML_TM_Editor_Save_Ajax_Action extends \WPML_TM_Job_Action
    {
        private $data;
        /**
         * WPML_TM_Editor_Save_Ajax_Action constructor.
         *
         * @param WPML_TM_Job_Action_Factory $job_action_factory
         * @param array                      $data
         */
        public function __construct(&$job_action_factory, array $data)
        {
        }
        public function run()
        {
        }
    }
    class WPML_Translation_Editor_UI
    {
        const MAX_ALLOWED_SINGLE_LINE_LENGTH = 50;
        /** @var SitePress $sitepress */
        private $sitepress;
        /** @var WPDB $wpdb */
        private $wpdb;
        /** @var array */
        private $all_translations;
        /**
         * @var WPML_Translation_Editor
         */
        private $editor_object;
        private $job;
        private $original_post;
        private $rtl_original;
        private $rtl_original_attribute_object;
        private $rtl_translation;
        private $rtl_translation_attribute;
        private $is_duplicate = \false;
        /**
         * @var TranslationManagement
         */
        private $tm_instance;
        /** @var WPML_Element_Translation_Job|WPML_External_Translation_Job */
        private $job_instance;
        private $job_factory;
        private $job_layout;
        /** @var array */
        private $fields;
        function __construct(\wpdb $wpdb, \SitePress $sitepress, \TranslationManagement $iclTranslationManagement, \WPML_Element_Translation_Job $job_instance, \WPML_TM_Job_Action_Factory $job_factory, \WPML_TM_Job_Layout $job_layout)
        {
        }
        function render()
        {
        }
        /**
         * @return array
         */
        private function init_rtl_settings()
        {
        }
        private function init_original_post()
        {
        }
        private function init_editor_object()
        {
        }
        private function output_model()
        {
        }
        private function output_ate_notice()
        {
        }
        private function output_gutenberg_notice()
        {
        }
        private function output_wysiwyg_editors()
        {
        }
        private function output_copy_all_dialog()
        {
        }
        private function output_edit_independently_dialog()
        {
        }
        private function output_editor_form()
        {
        }
        private function add_titles_and_adjust_styles(array $fields)
        {
        }
        private function add_rtl_attributes(array $fields)
        {
        }
        private function filter_the_model(array $model)
        {
        }
    }
    class WPML_Editor_UI_Job
    {
        private $fields = array();
        protected $job_id;
        private $job_type;
        private $job_type_title;
        private $title;
        private $view_link;
        private $source_lang;
        private $target_lang;
        private $translation_complete;
        private $duplicate;
        private $note = '';
        function __construct($job_id, $job_type, $job_type_title, $title, $view_link, $source_lang, $target_lang, $translation_complete, $duplicate)
        {
        }
        public function add_field($field)
        {
        }
        public function add_note($note)
        {
        }
        public function get_all_fields()
        {
        }
        public function get_layout_of_fields()
        {
        }
        public function get_target_language()
        {
        }
        public function is_translation_complete()
        {
        }
        public function save($data)
        {
        }
        private function convert_id_to_translation_key($id)
        {
        }
        public function requires_translation_complete_for_each_field()
        {
        }
        public function display_hide_completed_switcher()
        {
        }
        public function is_hide_empty_fields()
        {
        }
        public function save_translations($translations)
        {
        }
    }
    class WPML_Translation_Editor_Header
    {
        private $job_instance;
        public function __construct($job_instance)
        {
        }
        public function get_model()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Translations_Queue_Factory
    {
        /**
         * @return \WPML_Translations_Queue|null
         */
        public function create()
        {
        }
    }
}
namespace WPML\TM\Menu\TranslationQueue {
    class CloneJobs
    {
        /**
         * @var WPML_TM_ATE_Jobs
         */
        private $ateJobs;
        /**
         * @var WPML_TM_ATE_API
         */
        private $apiClient;
        /**
         * @param WPML_TM_ATE_Jobs $ateJobs
         * @param WPML_TM_ATE_API  $apiClient
         */
        public function __construct(\WPML_TM_ATE_Jobs $ateJobs, \WPML_TM_ATE_API $apiClient)
        {
        }
        /**
         * @param WPML_Element_Translation_Job $jobObject
         * @param int|null $sentFrom
         */
        public function cloneCompletedATEJob(\WPML_Element_Translation_Job $jobObject, $sentFrom = null)
        {
        }
        /**
         * It creates a corresponding ATE job for WPML Job if such ATE job does not exist yet
         *
         * @param int $wpmlJobId
         * @return bool
         */
        public function maybeCloneWPMLJob($wpmlJobId)
        {
        }
    }
}
namespace {
    class WPML_Translations_Queue
    {
        /** @var  SitePress $sitepress */
        private $sitepress;
        /* @var WPML_UI_Screen_Options_Pagination */
        private $screen_options;
        /** @var WPML_Admin_Table_Sort $table_sort */
        private $table_sort;
        private $must_render_the_editor = \false;
        /** @var WPML_Translation_Editor_UI */
        private $translation_editor;
        /**
         * @var Editor
         */
        private $editor;
        /**
         * @param SitePress                      $sitepress
         * @param WPML_UI_Screen_Options_Factory $screen_options_factory
         * @param Editor                      $editor
         */
        public function __construct($sitepress, $screen_options_factory, \WPML\TM\Editor\Editor $editor)
        {
        }
        public function init_hooks()
        {
        }
        public function load()
        {
        }
        private function openClassicTranslationEditor($job_object)
        {
        }
        /**
         * @param array $icl_translation_filter
         *
         * @throws \InvalidArgumentException
         */
        public function display(array $icl_translation_filter = array())
        {
        }
        /**
         * @param $translation_jobs
         * @param $has_actions
         * @param $open_job
         */
        public function show_table($translation_jobs, $has_actions, $open_job)
        {
        }
        /**
         * @param stdClass $job
         *
         * @return string
         */
        private function get_row_css_attribute($job)
        {
        }
        /**
         * @return bool
         */
        private function must_open_the_editor()
        {
        }
        /**
         * @return array
         */
        public static function get_cookie_filters()
        {
        }
    }
    /**
     * Created by OnTheGo Systems
     */
    class WPML_Translations_Queue_Pagination_UI
    {
        private $translation_jobs;
        private $jobs_per_page;
        function __construct($translation_jobs, $jobs_per_page)
        {
        }
        public function show()
        {
        }
        public function get_paged_jobs()
        {
        }
    }
    /**
     * Created by OnTheGo Systems
     */
    class WPML_Translations_Queue_Jobs_Model
    {
        /** @var  TranslationManagement $tm_instance */
        private $tm_instance;
        /** @var array $translation_jobs */
        private $translation_jobs;
        /** @var WPML_TM_API $tm_api */
        private $tm_api;
        /** @var array $post_types */
        private $post_types;
        private $post_type_names = array();
        /** @var ElementLink $element_link */
        private $element_link;
        /**
         * WPML_Translations_Queue_Jobs_Model constructor.
         *
         * @param SitePress $sitepress
         * @param TranslationManagement $tm_instance
         * @param WPML_TM_API $tm_api
         * @param ElementLink $elemen_link
         * @param array $translation_jobs
         */
        public function __construct(\SitePress $sitepress, \TranslationManagement $tm_instance, \WPML_TM_API $tm_api, \WPML\TM\Jobs\Utils\ElementLink $elemen_link, array $translation_jobs)
        {
        }
        public function get()
        {
        }
        private function get_post_link($job)
        {
        }
        private function get_view_translation_link($job)
        {
        }
        private function get_post_type($job)
        {
        }
        private function get_status_text($job)
        {
        }
        private function get_target_status($job)
        {
        }
        private function get_edit_url($job)
        {
        }
        private function get_resign_url($job)
        {
        }
    }
}
namespace WPML\TM\Menu\TranslationServices {
    class ActivationAjax
    {
        const NONCE_ACTION = 'translation_service_toggle';
        const REFRESH_TS_INFO_ACTION = 'refresh_ts_info';
        /** @var \WPML_TP_Client */
        private $tp_client;
        public function __construct(\WPML_TP_Client $tp_client)
        {
        }
        public function add_hooks()
        {
        }
        public function translation_service_toggle()
        {
        }
        public function refresh_ts_info()
        {
        }
        /**
         * @param int $service_id
         *
         * @return array
         * @throws \InvalidArgumentException
         */
        private function activate_service($service_id)
        {
        }
        private function deactivate_service()
        {
        }
        /**
         * @param string $action
         *
         * @return bool
         */
        private function is_valid_request($action)
        {
        }
        private function send_invalid_nonce_error()
        {
        }
    }
    class ActiveServiceTemplate
    {
        const ACTIVE_SERVICE_TEMPLATE = 'active-service.twig';
        const HOURS_BEFORE_TS_REFRESH = 24;
        /**
         * @param  callable         $templateRenderer
         * @param  \WPML_TP_Service $active_service
         *
         * @return string
         */
        public static function render($templateRenderer, \WPML_TP_Service $active_service)
        {
        }
        /**
         * @return array
         */
        private static function getModel(\WPML_TP_Service $active_service)
        {
        }
        private static function isAuthorizedText($serviceName)
        {
        }
        private static function shouldRefreshData(\WPML_TP_Service $active_service)
        {
        }
    }
}
namespace WPML\TM\Menu\TranslationServices\Troubleshooting {
    class RefreshServicesFactory implements \IWPML_Backend_Action_Loader
    {
        /**
         * @return RefreshServices|null
         * @throws \Auryn\InjectionException
         */
        public function create()
        {
        }
        /**
         * @return RefreshServices
         * @throws \Auryn\InjectionException
         */
        public function create_an_instance()
        {
        }
        /**
         * @return string
         */
        private function is_visible()
        {
        }
    }
    class RefreshServices
    {
        const TEMPLATE = 'refresh-services.twig';
        const AJAX_ACTION = 'wpml_tm_refresh_services';
        /**
         * @var \IWPML_Template_Service
         */
        private $template;
        /**
         * @var \WPML_TP_API_Services
         */
        private $tp_services;
        public function __construct(\IWPML_Template_Service $template, \WPML_TP_API_Services $tp_services)
        {
        }
        public function add_hooks()
        {
        }
        public function render()
        {
        }
        /**
         * @return array
         */
        private function get_model()
        {
        }
        public function refresh_services_ajax_handler()
        {
        }
        /**
         * @return bool
         */
        public function refresh_services()
        {
        }
        private function refresh_active_service()
        {
        }
        /**
         * @return bool
         */
        private function is_valid_request()
        {
        }
        public function enqueue_scripts()
        {
        }
    }
}
namespace WPML\TM\Menu\TranslationServices {
    class AuthenticationAjax
    {
        const AJAX_ACTION = 'translation_service_authentication';
        /** @var  AuthorizationFactory */
        protected $authorize_factory;
        /**
         * @param AuthorizationFactory $authorize_factory
         */
        public function __construct(\WPML\TM\TranslationProxy\Services\AuthorizationFactory $authorize_factory)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @return bool
         */
        public function authenticate_service()
        {
        }
        /**
         * @return bool
         */
        public function update_credentials()
        {
        }
        /**
         * @return bool
         */
        public function invalidate_service()
        {
        }
        /**
         * @param callable $action
         * @param callable $request_validation
         * @param string   $success_message
         * @param string   $failure_message
         *
         * @return bool
         */
        private function handle_action(callable $action, callable $request_validation, $success_message, $failure_message)
        {
        }
        /**
         * @param string $msg
         *
         * @return bool
         */
        private function send_success_response($msg)
        {
        }
        /**
         * @param string $msg
         *
         * @return bool
         */
        private function send_error_message($msg)
        {
        }
        /**
         * @return bool
         */
        public function is_valid_request()
        {
        }
        /**
         * @return bool
         */
        public function is_valid_request_with_params()
        {
        }
    }
    class SectionFactory implements \IWPML_TM_Admin_Section_Factory
    {
        /**
         * @return Section
         */
        public function create()
        {
        }
        /**
         * @return bool|string
         */
        private function site_key_exists()
        {
        }
        /**
         * @param  \WPML_Twig_Template_Loader $twig_loader
         * @param  \WPML_TP_Client            $tp_client
         *
         * @return callable
         */
        private function createServicesListRenderer()
        {
        }
        /**
         * @return callable
         */
        private function getTemplateRenderer()
        {
        }
        /**
         * @return \WPML_TP_API_Services
         */
        private function getTpApiServices()
        {
        }
    }
    class NoSiteKeyTemplate
    {
        const TEMPLATE = 'no-site-key.twig';
        /**
         * @param  callable $templateRenderer
         */
        public static function render($templateRenderer)
        {
        }
        /**
         * @return array
         */
        private static function get_no_site_key_model()
        {
        }
    }
    class ActivationAjaxFactory implements \IWPML_Backend_Action_Loader
    {
        /**
         * @return ActivationAjax
         */
        public function create()
        {
        }
    }
    class ActiveServiceRepository
    {
        /**
         * @return \WPML_TP_Service|null
         */
        public static function get()
        {
        }
        public static function getId()
        {
        }
    }
    class AuthenticationAjaxFactory implements \IWPML_Backend_Action_Loader
    {
        /**
         * @return AuthenticationAjax
         */
        public function create()
        {
        }
    }
    class Section implements \IWPML_TM_Admin_Section
    {
        const SLUG = 'translators';
        /**
         * The SitePress instance.
         *
         * @var \SitePress
         */
        private $sitepress;
        /**
         * The WPML_WP_API instance.
         *
         * @var \WPML_WP_API
         */
        private $wp_api;
        /**
         * The template to use.
         *
         * @var mixed $template
         */
        private $template;
        /**
         * WPML_TM_Translation_Services_Admin_Section constructor.
         *
         * @param \SitePress $sitepress The SitePress instance.
         * @param callable   $template  The template to use.
         */
        public function __construct(\SitePress $sitepress, $template)
        {
        }
        /**
         * Returns a value which will be used for sorting the sections.
         *
         * @return int
         */
        public function get_order()
        {
        }
        /**
         * Outputs the content of the section.
         */
        public function render()
        {
        }
        /**
         * Used to extend the logic for displaying/hiding the section.
         *
         * @return bool
         */
        public function is_visible()
        {
        }
        /**
         * Returns the unique slug of the sections which is used to build the URL for opening this section.
         *
         * @return string
         */
        public function get_slug()
        {
        }
        /**
         * Returns one or more capabilities required to display this section.
         *
         * @return string|array
         */
        public function get_capabilities()
        {
        }
        /**
         * Returns the caption to display in the section.
         *
         * @return string
         */
        public function get_caption()
        {
        }
        /**
         * Returns the callback responsible for rendering the content of the section.
         *
         * @return callable
         */
        public function get_callback()
        {
        }
        /**
         * This method is hooked to the `admin_enqueue_scripts` action.
         *
         * @param string $hook The current page.
         */
        public function admin_enqueue_scripts($hook)
        {
        }
    }
    class Resources implements \IWPML_Backend_Action
    {
        public function add_hooks()
        {
        }
        public function enqueue_styles()
        {
        }
        public function enqueue_scripts()
        {
        }
        private function is_active()
        {
        }
    }
    class ActiveServiceTemplateFactory
    {
        /**
         * @return \Closure
         */
        public static function createRenderer()
        {
        }
        /**
         * @return \WPML_Twig_Template
         */
        private static function getTemplateRenderer()
        {
        }
    }
    class ServiceMapper
    {
        /**
         * @param \WPML_TP_Service $service
         * @param callable         $getActiveServiceId
         *
         * @return array
         */
        public static function map(\WPML_TP_Service $service, $getActiveServiceId)
        {
        }
    }
    class MainLayoutTemplate
    {
        const SERVICES_LIST_TEMPLATE = 'services-layout.twig';
        /**
         * @param  callable $templateRenderer
         * @param  callable $activeServiceRenderer
         * @param  bool     $hasPreferredService
         * @param  callable $retrieveServiceTabsData
         */
        public static function render($templateRenderer, $activeServiceRenderer, $hasPreferredService, $retrieveServiceTabsData)
        {
        }
        /**
         * @param  callable $activeServiceRenderer
         * @param  bool     $hasPreferredService
         * @param  callable $retrieveServiceTabsData
         *
         * @return array
         */
        private static function getModel($activeServiceRenderer, $hasPreferredService, $retrieveServiceTabsData)
        {
        }
    }
    class ServicesRetriever
    {
        public static function get(\WPML_TP_API_Services $servicesAPI, $getUserCountry, $mapService)
        {
        }
        // buildPartnerServicesSections :: \WPML_TP_Services[] -> string[]
        private static function buildPartnerServicesSections($buildSection, $userCountry)
        {
        }
        /**
         * @param  callable $mapService
         *
         * @return callable
         */
        private static function buildSection($mapService)
        {
        }
        // belongToUserCountry :: \WPML_TP_Service -> bool
        private static function belongToUserCountry($userCountry)
        {
        }
    }
}
namespace WPML\TM\Menu\TranslationServices\Endpoints {
    class Select implements \WPML\Ajax\IHandler
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
        public static function select($serviceId)
        {
        }
    }
    class Deactivate implements \WPML\Ajax\IHandler
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    class Activate implements \WPML\Ajax\IHandler
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
}
namespace {
    class WPML_Basket_Tab_Ajax
    {
        /** @var  TranslationProxy_Project $project */
        private $project;
        /** @var  WPML_Translation_Proxy_Basket_Networking $networking */
        private $networking;
        /** @var  WPML_Translation_Basket $basket */
        private $basket;
        /**
         * @param TranslationProxy_Project                 $project
         * @param WPML_Translation_Proxy_Basket_Networking $networking
         * @param WPML_Translation_Basket                  $basket
         */
        function __construct($project, $networking, $basket)
        {
        }
        function init()
        {
        }
        /**
         * Handler for the ajax call to commit a chunk of the items in a batch provided in the request.
         *
         * @uses \WPML_Translation_Proxy_Basket_Networking::commit_basket_chunk
         */
        function send_basket_chunk()
        {
        }
        /**
         * Ajax handler for the first ajax request call in the basket commit workflow, responding with an message
         * containing information about the basket's contents.
         *
         * @uses \WPML_Basket_Tab_Ajax::create_remote_batch_message
         */
        function begin_basket_commit()
        {
        }
        /**
         * Last ajax call in the multiple ajax calls made during the commit of a batch.
         * Empties the basket in case the commit worked error free responds to the ajax call.
         */
        function send_basket_commit()
        {
        }
        /**
         * @param $translators
         *
         * @return bool
         */
        public function contains_local_translators_different_than_current_user($translators)
        {
        }
        /**
         * Ajax handler for checking if a current basket/batch name is valid for use with the currently used translation
         * service.
         *
         * @uses \WPML_Translation_Basket::check_basket_name
         */
        function check_basket_name()
        {
        }
        public function rollback_basket()
        {
        }
        /** @return string */
        private function get_basket_name()
        {
        }
        private static function sanitize_errors($source)
        {
        }
        /**
         * Sends the response to the ajax for \WPML_Basket_Tab_Ajax::send_basket_commit and rolls back the commit
         * in case of any errors.
         *
         * @see  \WPML_Basket_Tab_Ajax::send_basket_commit
         * @uses \WPML_Translation_Basket::delete_all_items
         *
         * @param object|bool $response
         * @param array       $errors
         */
        private function send_json_response($response, $errors)
        {
        }
        /**
         * Creates the message that is shown before committing a batch.
         *
         * @see \WPML_Basket_Tab_Ajax::begin_basket_commit
         *
         * @param string $basket_name
         *
         * @return array
         */
        private function create_remote_batch_message($basket_name)
        {
        }
    }
}
namespace WPML\TM\Menu\TranslationBasket {
    class Utility
    {
        /** @var \SitePress */
        private $sitepress;
        /** @var \WPML_Translator_Records */
        private $translatorRecords;
        /**
         * @param \SitePress               $sitepress
         * @param \WPML_Translator_Records $translatorRecords
         */
        public function __construct(\SitePress $sitepress, \WPML_Translator_Records $translatorRecords)
        {
        }
        /**
         * @return array
         */
        public function getTargetLanguages()
        {
        }
        /**
         * @param $targetLanguages
         *
         * @return bool
         */
        public function isTheOnlyAvailableTranslatorForTargetLanguages($targetLanguages)
        {
        }
        /**
         * @return bool
         */
        public function isTheOnlyAvailableTranslator()
        {
        }
    }
}
namespace {
    class SitePress_Table_Basket extends \SitePress_Table
    {
        public static function enqueue_js()
        {
        }
        function prepare_items()
        {
        }
        function get_columns()
        {
        }
        /**
         * @param object $item
         * @param string $column_name
         *
         * @return mixed|string
         */
        function column_default($item, $column_name)
        {
        }
        function column_title($item)
        {
        }
        /**
         * @param array $item
         *
         * @return string
         */
        function column_delete($item)
        {
        }
        function no_items()
        {
        }
        function get_sortable_columns()
        {
        }
        /**
         * @param $post_id
         * @param $data
         * @param $item_type
         */
        private function build_basket_item($post_id, $data, $item_type)
        {
        }
        /**
         * @param $element_id
         * @param $element_type
         * @param $languages_count
         */
        private function get_words_count($element_id, $element_type, $languages_count)
        {
        }
        /**
         * @param $cart_items
         * @param $item_type
         */
        private function build_basket_items($cart_items, $item_type)
        {
        }
        private function usort_reorder($a, $b)
        {
        }
        /**
         * @param $post_status
         *
         * @return string
         */
        private function get_post_status_label($post_status)
        {
        }
        /**
         * @param string $post_type
         * @param array  $item
         *
         * @return string
         */
        private function get_post_type_label($post_type, array $item)
        {
        }
        private function action_callback()
        {
        }
        private function get_data()
        {
        }
        function display_tablenav($which)
        {
        }
        function display()
        {
        }
        private function display_total_word_count_info()
        {
        }
    }
    class WPML_TM_Translate_Independently
    {
        /** @var TranslationManagement $translation_management */
        private $translation_management;
        /** @var WPML_Translation_Basket $translation_basket */
        private $translation_basket;
        /** @var SitePress $sitepress */
        private $sitepress;
        public function __construct(\TranslationManagement $translation_management, \WPML_Translation_Basket $translation_basket, \SitePress $sitepress)
        {
        }
        /**
         * Init all plugin actions.
         */
        public function init()
        {
        }
        /**
         * Add hidden fields to TM basket.
         * #icl_duplicate_post_in_basket with list of duplicated ids in basket target languages.
         * #icl_disconnect_nonce nonce for AJAX call.
         */
        public function add_hidden_field()
        {
        }
        /**
         * @param array $basket_posts
         *
         * @return array
         */
        private function duplicates_to_disconnect($basket_posts)
        {
        }
        /**
         * AJAX action to bulk disconnect posts before sending them to translation.
         */
        public function ajax_disconnect_duplicates()
        {
        }
    }
}
namespace WPML\TM\Menu\TranslationBasket {
    class Strings
    {
        const ATE_AUTOMATIC_TRANSLATION_SUGGESTION = 'wpml-ate-automatic-translation-suggestion';
        /** @var Utility */
        private $utility;
        /** @var DismissNotices */
        private $dismissNotices;
        /**
         * @param Utility        $utility
         * @param DismissNotices $dismissNotices
         */
        public function __construct(\WPML\TM\Menu\TranslationBasket\Utility $utility, \WPML\Notices\DismissNotices $dismissNotices)
        {
        }
        public function getAll()
        {
        }
        /**
         * @return string
         */
        public function duplicatePostTranslationWarning()
        {
        }
        /**
         * @return string
         */
        public function jobsSentToLocalTranslator()
        {
        }
        /**
         * @return string
         */
        public function jobsSentToCurrentUserWhoIsTheOnlyTranslator()
        {
        }
        /**
         * @return string
         */
        private function automaticTranslationTip()
        {
        }
        /**
         * @return string
         */
        public function jobsSentDefaultMessage()
        {
        }
        /**
         * @return string
         */
        private function getJobsLink()
        {
        }
        private function getTMLink()
        {
        }
        /**
         * @return string
         */
        public function emailNotSentError()
        {
        }
    }
}
namespace {
    class WPML_TM_Emails_Settings
    {
        const TEMPLATE = 'emails-settings.twig';
        const COMPLETED_JOB_FREQUENCY = 'completed_frequency';
        const NOTIFY_IMMEDIATELY = 1;
        const NOTIFY_DAILY = 2;
        const NOTIFY_WEEKLY = 3;
        /**
         * @var IWPML_Template_Service
         */
        private $template_service;
        /**
         * @var array
         */
        private $tm;
        public function __construct(\IWPML_Template_Service $template_service, \TranslationManagement $tm)
        {
        }
        public function add_hooks()
        {
        }
        public function render()
        {
        }
        private function get_model()
        {
        }
        public function remove_scheduled_summary_email()
        {
        }
    }
    class WPML_TM_Emails_Settings_Factory implements \IWPML_Backend_Action_Loader
    {
        /**
         * @return WPML_TM_Emails_Settings
         */
        public function create()
        {
        }
        private function is_tm_settings_page()
        {
        }
    }
    /**
     * Class WPML_TM_Last_Picked_Up
     */
    class WPML_TM_Last_Picked_Up
    {
        /**
         * @var Sitepress $sitepress
         */
        private $sitepress;
        /**
         * WPML_TM_Last_Picked_Up constructor.
         *
         * @param Sitepress $sitepress
         */
        public function __construct($sitepress)
        {
        }
        /**
         * Get last_picked_up setting.
         *
         * @return bool|mixed
         */
        public function get()
        {
        }
        /**
         * Get last_picked_up setting as formatted string.
         *
         * @param string $format
         *
         * @return string
         */
        public function get_formatted($format = 'Y, F jS @g:i a')
        {
        }
        /**
         * Set last_picked_up setting.
         */
        public function set()
        {
        }
    }
    /**
     * Class WPML_TM_Polling_Box
     */
    class WPML_TM_Polling_Box
    {
        /**
         * Renders the html for the TM polling pickup box
         * @uses $GLOBALS['sitepress']
         *
         * @return string
         */
        public function render()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_Scripts_Factory
    {
        private $ate;
        private $ams_api;
        private $auth;
        private $endpoints;
        private $http;
        private $strings;
        public function init_hooks()
        {
        }
        /**
         * @throws \InvalidArgumentException
         */
        public function admin_enqueue_scripts()
        {
        }
        private function load_pick_up_box_scripts()
        {
        }
        public function register_otgs_notices()
        {
        }
        public function localize_jobs_list()
        {
        }
        /**
         * @param $handle
         *
         * @throws \InvalidArgumentException
         */
        public function localize_script($handle, $additional_data = array())
        {
        }
        /**
         * @return WPML_TM_MCS_ATE
         * @throws \InvalidArgumentException
         */
        public function create_ate()
        {
        }
        private function get_authentication()
        {
        }
        private function get_endpoints()
        {
        }
        private function create_ate_strings()
        {
        }
        /**
         * @param array $strings
         * @param bool  $all_users_have_subscription
         *
         * @return array
         */
        public function filter_translators_view_strings(array $strings, $all_users_have_subscription)
        {
        }
        /**
         * @return string
         */
        private function get_ate_activation_status()
        {
        }
        /**
         * @return string
         */
        private function fetch_and_update_ate_activation_status()
        {
        }
    }
    class WPML_Fix_Type_Assignments extends \WPML_WPDB_And_SP_User
    {
        /**
         * WPML_Fix_Type_Assignments constructor.
         *
         * @param SitePress $sitepress
         */
        public function __construct($sitepress)
        {
        }
        /**
         * Runs various database repair and cleanup actions on icl_translations.
         *
         * @return int Number of rows in icl_translations that were fixed
         */
        public function run()
        {
        }
        /**
         * Deletes rows from icl_translations that are duplicated in terms of their
         * element id and within their meta type ( post,taxonomy,package ...),
         * with the duplicate actually being of the correct type.
         *
         * @return int number of rows fixed
         */
        private function fix_broken_duplicate_rows()
        {
        }
        /**
         * Fixes all taxonomy term rows in icl_translations, which have a corrupted
         * element_type set, different from the one actually set in the term_taxonomy
         * table.
         *
         * @return int number of rows fixed
         */
        private function fix_broken_taxonomy_assignments()
        {
        }
        /**
         * Fixes all post rows in icl_translations, which have a corrupted
         * element_type set, different from the one actually set in the wp_posts
         * table.
         *
         * @return int number of rows fixed
         */
        private function fix_broken_post_assignments()
        {
        }
        /**
         * Fixes all instances of a different element_type having been set for
         * an original element and it's translation, by setting the original's type
         * on the corrupted translation rows.
         *
         * @return int number of rows fixed
         */
        private function fix_broken_type_assignments()
        {
        }
        /**
         * Fixes all rows that have an empty string instead of NULL or a source language
         * equal to its actual language set by setting the source language to NULL.
         *
         * @return int number of rows fixed
         */
        private function fix_wrong_source_language()
        {
        }
        /**
         * Fixes instances of the source element of a trid being missing, by assigning
         * the oldest element ( determined by the lowest element_id ) as the original
         * element in a trid.
         *
         * @return int number of rows fixed
         */
        private function fix_missing_original()
        {
        }
    }
    /**
     * Class WPML_Troubleshoot_Sync_Posts_Taxonomies
     */
    class WPML_Troubleshoot_Sync_Posts_Taxonomies
    {
        const BATCH_SIZE = 5;
        /** @var SitePress $sitepress */
        private $sitepress;
        /** @var WPML_Term_Translation_Utils $term_translation_utils */
        private $term_translation_utils;
        public function __construct(\SitePress $sitePress, \WPML_Term_Translation_Utils $term_translation_utils)
        {
        }
        public function run()
        {
        }
        /**
         * @param string $type
         * @param int    $batch_number
         *
         * @return array
         */
        private function get_posts_batch($type, $batch_number)
        {
        }
        /**
         * @param array $posts
         */
        private function synchronize_batch($posts)
        {
        }
    }
    class WPML_Table_Collate_Fix implements \IWPML_AJAX_Action, \IWPML_Backend_Action, \IWPML_DIC_Action
    {
        const AJAX_ACTION = 'fix_tables_collation';
        /**
         * @var wpdb
         */
        private $wpdb;
        /** @var WPML_Upgrade_Schema $schema */
        private $schema;
        public function __construct(\wpdb $wpdb, \WPML_Upgrade_Schema $schema)
        {
        }
        public function add_hooks()
        {
        }
        public function fix_collate_ajax()
        {
        }
        public function render_troubleshooting_button()
        {
        }
        public function enqueue_scripts($hook)
        {
        }
        public function fix_collate()
        {
        }
        /**
         * @return array
         */
        private function get_all_wpml_tables()
        {
        }
    }
    /**
     * Class WPML_Troubleshoot_Action
     *
     * @author onTheGoSystems
     */
    class WPML_Troubleshoot_Action
    {
        const SYNC_POSTS_TAXONOMIES_SLUG = 'synchronize_posts_taxonomies';
        /**
         * @return bool
         */
        public function is_valid_request()
        {
        }
    }
    class WPML_Debug_Information
    {
        /** @var wpdb $wpdb */
        public $wpdb;
        /** @var SitePress $sitepress */
        protected $sitepress;
        /**
         * @param wpdb      $wpdb
         * @param SitePress $sitepress
         */
        public function __construct($wpdb, $sitepress)
        {
        }
        public function run()
        {
        }
        function get_core_info()
        {
        }
        function get_plugins_info()
        {
        }
        function get_theme_info()
        {
        }
        function do_json_encode($data)
        {
        }
    }
}
namespace WPML\Troubleshooting {
    class AssignTranslationStatusToDuplicates
    {
        public static function run()
        {
        }
        /**
         * @return array
         */
        private static function get_duplicates()
        {
        }
    }
}
namespace {
    /**
     * Class WPML_Block_Editor_Helper
     */
    class WPML_Block_Editor_Helper
    {
        /**
         * Check if Block Editor is active.
         * Must only be used after plugins_loaded action is fired.
         *
         * @return bool
         */
        public static function is_active()
        {
        }
        /**
         * Check if it is admin page to edit any type of post with Block Editor.
         * Must be used not earlier than plugins_loaded action fired.
         *
         * @return bool
         */
        public static function is_edit_post()
        {
        }
        /**
         * Check if Classic Editor plugin is active.
         *
         * @return bool
         */
        public static function is_classic_editor_plugin_active()
        {
        }
        public static function is_block_editor($current_screen)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Download_Localization
    {
        private $active_languages;
        private $default_language;
        private $not_founds = array();
        private $errors = array();
        /**
         * WPML_Localization constructor.
         *
         * @param array  $active_languages
         * @param string $default_language
         */
        public function __construct(array $active_languages, $default_language)
        {
        }
        public function download_language_packs()
        {
        }
        public function get_not_founds()
        {
        }
        public function get_errors()
        {
        }
        private function download_language_pack($language)
        {
        }
    }
    class WPML_Element_Sync_Settings
    {
        /** @var array $settings */
        private $settings;
        public function __construct(array $settings)
        {
        }
        /**
         * @param string $type
         *
         * @return bool
         */
        public function is_sync($type)
        {
        }
    }
    class WPML_TM_Serialized_Custom_Field_Package_Handler_Factory implements \IWPML_Backend_Action_Loader
    {
        public function create()
        {
        }
    }
    abstract class WPML_Custom_Field_Setting extends \WPML_TM_User
    {
        /** @var  string $index */
        private $index;
        /**
         * WPML_Custom_Field_Setting constructor.
         *
         * @param TranslationManagement $tm_instance
         * @param string                $index
         */
        public function __construct(&$tm_instance, $index)
        {
        }
        /**
         * @return bool true if the custom field setting is given by a setting in
         *              a wpml-config.xml
         */
        public function is_read_only()
        {
        }
        /**
         * @return bool
         */
        public function is_unlocked()
        {
        }
        /**
         * @return bool
         */
        public function excluded()
        {
        }
        public function status()
        {
        }
        public function make_read_only()
        {
        }
        public function set_to_copy()
        {
        }
        public function set_to_copy_once()
        {
        }
        public function set_to_translatable()
        {
        }
        public function set_to_nothing()
        {
        }
        public function set_editor_style($style)
        {
        }
        public function get_editor_style()
        {
        }
        public function set_editor_label($label)
        {
        }
        public function get_editor_label()
        {
        }
        public function set_editor_group($group)
        {
        }
        public function get_editor_group()
        {
        }
        public function set_translate_link_target($state, $sub_fields)
        {
        }
        public function is_translate_link_target()
        {
        }
        public function get_translate_link_target_sub_fields()
        {
        }
        public function set_convert_to_sticky($state)
        {
        }
        public function is_convert_to_sticky()
        {
        }
        public function set_encoding($encoding)
        {
        }
        public function get_encoding()
        {
        }
        /**
         * @param array $whitelist
         */
        public function set_attributes_whitelist($whitelist)
        {
        }
        public function get_attributes_whitelist()
        {
        }
        private function set_state($state)
        {
        }
        /**
         * @return string
         */
        private function get_array_setting_index($index)
        {
        }
        /**
         * @return string
         */
        protected abstract function get_state_array_setting_index();
        protected abstract function get_unlocked_setting_index();
        /**
         * @return  string[]
         */
        protected abstract function get_excluded_keys();
        /**
         * @return string
         */
        protected abstract function get_setting_prefix();
    }
    class WPML_Post_Custom_Field_Setting extends \WPML_Custom_Field_Setting
    {
        /**
         * @return string
         */
        protected function get_state_array_setting_index()
        {
        }
        /**
         * @return string
         */
        protected function get_unlocked_setting_index()
        {
        }
        /**
         * @return string
         */
        protected function get_setting_prefix()
        {
        }
        /**
         * @return  string[]
         */
        protected function get_excluded_keys()
        {
        }
    }
    class WPML_Custom_Field_Setting_Query
    {
        /** @var wpdb $wpdb */
        private $wpdb;
        /** @var array $excluded_keys */
        private $excluded_keys;
        /** @var string $table */
        private $table;
        /**
         * @param wpdb   $wpdb
         * @param array  $excluded_keys
         * @param string $table
         */
        public function __construct(\wpdb $wpdb, array $excluded_keys, $table)
        {
        }
        /**
         * @param array $args
         *
         * @return array
         */
        public function get(array $args)
        {
        }
        /**
         * @return int
         */
        public function get_total_rows()
        {
        }
        /**
         * @return string
         */
        private function add_AND_excluded_fields_condition()
        {
        }
        /**
         * @param string $search
         *
         * @return string
         */
        private function add_AND_search_condition($search)
        {
        }
        /**
         * @param bool $hide_system_fields
         *
         * @return string
         */
        private function add_AND_system_fields_condition($hide_system_fields)
        {
        }
        /**
         * @param array $args
         *
         * @return string
         */
        private function get_limit_offset(array $args)
        {
        }
    }
    class WPML_TM_Settings_Update extends \WPML_SP_User
    {
        private $index_singular;
        private $index_ro;
        private $index_sync;
        private $index_plural;
        private $index_unlocked;
        /** @var  TranslationManagement $tm_instance */
        private $tm_instance;
        /** @var WPML_Settings_Helper $settings_helper */
        private $settings_helper;
        /**
         * @param string                $index_singular
         * @param string                $index_plural
         * @param TranslationManagement $tm_instance
         * @param SitePress             $sitepress
         * @param WPML_Settings_Helper  $settings_helper
         */
        public function __construct($index_singular, $index_plural, &$tm_instance, &$sitepress, $settings_helper)
        {
        }
        /**
         * @param array $config
         */
        public function update_from_config(array $config)
        {
        }
        private function sync_settings(array $config)
        {
        }
        /**
         * @param int $new_sync 0, 1 or 2
         * @param int $old_sync 0, 1 or 2
         *
         * @return bool
         */
        private function is_making_type_translatable($new_sync, $old_sync)
        {
        }
        private function update_tm_settings(array $config)
        {
        }
        private function is_unlocked_type($type, $unlocked_options)
        {
        }
    }
}
namespace WPML\TM\Settings {
    class Repository
    {
        public static function getSetting($indexes)
        {
        }
        public static function getCustomFieldsToTranslate()
        {
        }
        public static function getCustomFields()
        {
        }
        /**
         * @return array
         */
        private static function getAllSettings()
        {
        }
    }
}
namespace {
    class WPML_TM_Default_Settings implements \IWPML_Action
    {
        /** @var TranslationManagement */
        private $tm;
        public function __construct(\TranslationManagement $tm)
        {
        }
        public function add_hooks()
        {
        }
        public function init_action()
        {
        }
        /**
         * @param string $key
         * @param mixed  $default
         *
         * @return bool
         */
        private function get_notification($key, $default = \null)
        {
        }
        /**
         * @param string $key
         *
         * @return bool
         */
        private function has_notification($key)
        {
        }
        /**
         * @param string $key
         * @param mixed  $value
         */
        private function maybe_update_notification($key, $value)
        {
        }
        /**
         * @param string $key
         * @param mixed  $value
         */
        private function update_notification($key, $value)
        {
        }
    }
    /**
     * Created by PhpStorm.
     * User: bruce
     * Date: 5/10/17
     * Time: 10:23 PM
     */
    class WPML_Verify_SitePress_Settings
    {
        /** @var WPML_WP_API $wp_api */
        private $wp_api;
        public function __construct(\WPML_WP_API $wp_api)
        {
        }
        /**
         * @param array $settings
         *
         * @return array
         */
        public function verify($settings)
        {
        }
    }
    class WPML_TM_Serialized_Custom_Field_Package_Handler
    {
        /** @var WPML_Custom_Field_Setting_Factory $custom_field_setting_factory */
        private $custom_field_setting_factory;
        public function __construct(\WPML_Custom_Field_Setting_Factory $custom_field_setting_factory)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param int    $translated
         * @param string $custom_field_job_type - e.g: field-my_custom_field-0-my_attribute.
         *
         * @return int
         */
        public function translate_only_whitelisted_attributes($translated, $custom_field_job_type)
        {
        }
        /**
         * Matches the attributes array to the whitelist array
         * The whitelist array has the attribute as the key to another array for sub keys
         * eg. array( 'attribute1' => array( 'subkey1' => array() ) )
         *
         * @param array $attributes - The attributes in the custom field.
         * @param array $whitelist - The whitelist attributes to match against.
         * @param int   $current_depth - The current depth in the attributes array.
         *
         * @return bool
         */
        private function match_in_order($attributes, $whitelist, $current_depth = 0)
        {
        }
        /**
         * Matches the attribute to the whitelist array using wildcards.
         * Wildcards can only be used at the end of the string.
         * eg. 'title-*', 'data*', '*'
         * A '*' matches everything.
         *
         * @param string $attribute - the current attributes.
         * @param array  $whitelist - the whitelist to match against.
         *
         * @return string - Returns the whitelist string match.
         */
        private function match_with_wildcards($attribute, $whitelist)
        {
        }
    }
    class WPML_Term_Custom_Field_Setting extends \WPML_Custom_Field_Setting
    {
        /**
         * @return string
         */
        protected function get_state_array_setting_index()
        {
        }
        /**
         * @return string
         */
        protected function get_unlocked_setting_index()
        {
        }
        /**
         * @return string
         */
        protected function get_setting_prefix()
        {
        }
        /**
         * @return  string[]
         */
        protected function get_excluded_keys()
        {
        }
    }
    class WPML_TM_Default_Settings_Factory implements \IWPML_Frontend_Action_Loader, \IWPML_Backend_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_Term_Custom_Field_Setting_Keys
    {
        /**
         * @return string
         */
        public static function get_state_array_setting_index()
        {
        }
        /**
         * @return string
         */
        public static function get_unlocked_setting_index()
        {
        }
        /**
         * @return string
         */
        public static function get_setting_prefix()
        {
        }
        /**
         * @return  string[]
         */
        public static function get_excluded_keys()
        {
        }
    }
    class WPML_Custom_Field_XML_Settings_Import
    {
        /** @var  WPML_Custom_Field_Setting_Factory $setting_factory */
        private $setting_factory;
        /** @var  array $settings_array */
        private $settings_array;
        /**
         * WPML_Custom_Field_XML_Settings_Import constructor.
         *
         * @param WPML_Custom_Field_Setting_Factory $setting_factory
         * @param array                             $settings_array
         */
        public function __construct($setting_factory, $settings_array)
        {
        }
        /**
         * Runs the actual import of the xml
         */
        public function run()
        {
        }
        private function import_action($c, $setting)
        {
        }
        private function import_editor_settings($c, $setting)
        {
        }
        private function import_custom_field_texts()
        {
        }
        private function get_custom_field_texts_keys($data)
        {
        }
    }
}
namespace WPML\Settings {
    class UI implements \IWPML_Backend_Action
    {
        public function add_hooks()
        {
        }
        public static function getData()
        {
        }
    }
}
namespace {
    class WPML_TM_Settings_Post_Process extends \WPML_TM_User
    {
        /**
         * Saves TM settings to the database in case they have changed after reading a config file.
         */
        public function run()
        {
        }
        private function prev_index($index)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Settings_Filters
    {
        /**
         * @param array $types
         * @param array $read_only_cpt_settings
         * @param array $cpt_unlocked_options
         *
         * @return array
         * @see \WPML_Config::maybe_add_filter
         */
        function get_translatable_documents(array $types, array $read_only_cpt_settings, array $cpt_unlocked_options)
        {
        }
        /**
         * @param array  $cpt_unlocked_options
         * @param string $cp
         *
         * @return bool
         */
        private function is_cpt_unlocked(array $cpt_unlocked_options, $cp)
        {
        }
    }
    class WPML_Element_Sync_Settings_Factory
    {
        const POST = 'post';
        const TAX = 'taxonomy';
        const KEY_POST_SYNC_OPTION = 'custom_posts_sync_option';
        const KEY_TAX_SYNC_OPTION = 'taxonomies_sync_option';
        /**
         * @param string $type
         *
         * @return WPML_Element_Sync_Settings
         * @throws Exception
         */
        public static function create($type)
        {
        }
        public static function createPost()
        {
        }
        public static function createTax()
        {
        }
    }
    class WPML_Custom_Field_Setting_Factory extends \WPML_TM_User
    {
        public $show_system_fields = \false;
        /**
         * @param  string $meta_key
         *
         * @return WPML_Post_Custom_Field_Setting
         */
        public function post_meta_setting($meta_key)
        {
        }
        /**
         * @param  string $meta_key
         *
         * @return WPML_Term_Custom_Field_Setting
         */
        public function term_meta_setting($meta_key)
        {
        }
        /**
         * Returns all custom field names for which a site has either a setting
         * in the TM settings or that can be found on any post.
         *
         * @return string[]
         */
        public function get_post_meta_keys()
        {
        }
        /**
         * Returns all term custom field names for which a site has either a setting
         * in the TM settings or that can be found on any term.
         *
         * @return string[]
         */
        public function get_term_meta_keys()
        {
        }
        private function filter_custom_field_key($custom_fields_key)
        {
        }
        /**
         * @param array $keys
         *
         * @return array
         */
        public function filter_custom_field_keys($keys)
        {
        }
    }
    class WPML_Custom_Field_Setting_Query_Factory
    {
        const TYPE_POSTMETA = 'postmeta';
        const TYPE_TERMMETA = 'termmeta';
        public function create($type)
        {
        }
        /**
         * @return array
         */
        private function get_excluded_post_meta_keys()
        {
        }
        /**
         * @return array
         */
        private function get_excluded_term_meta_keys()
        {
        }
        /**
         * @param array  $hardcoded_excluded_keys
         * @param string $settings_prefix
         * @param string $settings_state_index
         * @param string $settings_unlock_index
         *
         * @return array
         */
        private function get_excluded_meta_keys(array $hardcoded_excluded_keys, $settings_prefix, $settings_state_index, $settings_unlock_index)
        {
        }
        /**
         * @param TranslationManagement $tm_settings
         * @param string                $index
         *
         * @return array
         */
        private function get_not_ignore_keys(\TranslationManagement $tm_settings, $index)
        {
        }
    }
    class WPML_Page_Builder_Settings
    {
        const OPTION_KEY = 'wpml_page_builders_options';
        private $settings;
        /** @return bool */
        public function is_raw_html_translatable()
        {
        }
        /** @param bool $is_enabled */
        public function set_raw_html_translatable($is_enabled)
        {
        }
        /**
         * @param string $key
         * @param mixed  $value
         */
        private function set_setting($key, $value)
        {
        }
        /**
         * @param string $key
         * @param mixed  $default
         *
         * @return mixed
         */
        private function get_setting($key, $default = \null)
        {
        }
        public function save()
        {
        }
    }
}
namespace WPML\TM\Settings {
    class ProcessNewTranslatableFields
    {
        const MAX_POSTS = 10;
        public function run(\WPML\Collect\Support\Collection $data, \wpdb $wpdb, \WPML_TM_Post_Actions $postActions, \WPML\TM\AutomaticTranslation\Actions\Actions $autoTranslateActions)
        {
        }
        private static function getPosts(\wpdb $wpdb, array $fields, $page)
        {
        }
        private static function getFetchNextPageResponse($fields, $page)
        {
        }
        /**
         * @param array                 $postIds
         * @param \WPML_TM_Post_Actions $postActions
         */
        private function updateNeedsUpdate(array $postIds, \WPML_TM_Post_Actions $postActions, \WPML\TM\AutomaticTranslation\Actions\Actions $autoTranslateActions)
        {
        }
    }
}
namespace {
    class WPML_Post_Custom_Field_Setting_Keys
    {
        /**
         * @return string
         */
        public static function get_state_array_setting_index()
        {
        }
        /**
         * @return string
         */
        public static function get_unlocked_setting_index()
        {
        }
        /**
         * @return string
         */
        public static function get_setting_prefix()
        {
        }
        /**
         * @return  string[]
         */
        public static function get_excluded_keys()
        {
        }
    }
}
namespace WPML\TM\Settings {
    class CustomFieldChangeDetector implements \IWPML_Backend_Action
    {
        const PREVIOUS_SETTING = 'previous-custom-fields-to-translate';
        const DETECTED_SETTING = 'detected-custom-fields-to-translate';
        const LOCK_TIME = 2 * MINUTE_IN_SECONDS;
        public function add_hooks()
        {
        }
        public static function getNew()
        {
        }
        public static function notify(array $newFields)
        {
        }
        public static function remove(array $fields)
        {
        }
        public static function updatePrevious()
        {
        }
        public static function getDetected()
        {
        }
        public static function processNewFields()
        {
        }
    }
}
namespace WPML\Core {
    /**
     * Class LanguageNegotiation
     * @package WPML\Core
     *
     * @method static callable|void saveMode( ...$mode ) - int|string->void
     *
     * @method static int getMode()
     *
     * @method static string getModeAsString( $mode = null )
     *
     * @method static callable|void saveDomains( ...$domains ) - array->void
     *
     * @method static array getDomains()
     */
    class LanguageNegotiation
    {
        use \WPML\Collect\Support\Traits\Macroable;
        const DIRECTORY = 1;
        const DOMAIN = 2;
        const PARAMETER = 3;
        const DIRECTORY_STRING = 'directory';
        const DOMAIN_STRING = 'domain';
        const PARAMETER_STRING = 'parameter';
        private static $modeMap = [self::DIRECTORY_STRING => self::DIRECTORY, self::DOMAIN_STRING => self::DOMAIN, self::PARAMETER_STRING => self::PARAMETER];
        /**
         * @ignore
         */
        public static function init()
        {
        }
    }
}
namespace {
    /**
     * Class WPML_TF_Feedback_Page_Filter
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Feedback_Page_Filter
    {
        /** @var  SitePress $sitepress */
        private $sitepress;
        /** @var WPML_TF_Feedback_Query $feedback_query */
        private $feedback_query;
        /** @var  array $statuses */
        private $statuses = array();
        /** @var  array $languages */
        private $languages = array();
        /** @var  array $url_args */
        private $url_args;
        /** @var  string $current_url */
        private $current_url;
        /**
         * WPML_TF_Feedback_Page_Filter constructor.
         *
         * @param SitePress              $sitepress
         * @param WPML_TF_Feedback_Query $feedback_query
         */
        public function __construct(\SitePress $sitepress, \WPML_TF_Feedback_Query $feedback_query)
        {
        }
        /**
         * @return array
         */
        public static function get_filter_keys()
        {
        }
        /**
         * Will not create filters inside the trash
         * And will not include the "trash" status in the status row
         */
        public function populate_counters_and_labels()
        {
        }
        /**
         * @return array
         */
        public function get_all_and_trash_data()
        {
        }
        /**
         * @return array
         */
        public function get_statuses_data()
        {
        }
        /**
         * @return array
         */
        public function get_languages_data()
        {
        }
        /**
         * @param string $filter_name
         * @param string $filter_value
         *
         * @return string
         */
        private function get_filter_url($filter_name, $filter_value)
        {
        }
        /**
         * @param string $filter_key
         * @param string $filter_value
         *
         * @return bool
         */
        private function is_current_filter($filter_key, $filter_value = \null)
        {
        }
        /**
         * @return array
         */
        public function get_current_filters()
        {
        }
        /**
         * @return array
         */
        private function get_url_args()
        {
        }
        /**
         * @return string
         */
        private function get_current_url()
        {
        }
        /**
         * @return string
         */
        private function get_reset_filters_url()
        {
        }
    }
    /**
     * Class WPML_TF_Rating_Average
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Post_Rating_Metrics
    {
        const QUANTITY_KEY = 'wpml_tf_post_rating_quantity';
        const AVERAGE_KEY = 'wpml_tf_post_rating_average';
        /** @var wpdb $wpdb */
        private $wpdb;
        public function __construct(\wpdb $wpdb)
        {
        }
        /**
         * @param int $post_id
         *
         * @return string
         */
        public function get_display($post_id)
        {
        }
        /** @param int $post_id */
        public function refresh($post_id)
        {
        }
    }
    /**
     * Class WPML_TF_Translation_Service
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Translation_Service
    {
        /** @var WPML_TP_Client_Factory $tp_client_factory */
        private $tp_client_factory;
        /**
         * WPML_TF_Translation_Service constructor.
         *
         * @param WPML_TP_Client_Factory $tp_client_factory
         */
        public function __construct(\WPML_TP_Client_Factory $tp_client_factory = \null)
        {
        }
        /** @return bool */
        public function allows_translation_feedback()
        {
        }
    }
    /**
     * Class WPML_TF_Document_Information
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Document_Information
    {
        /** @var  SitePress $sitepress */
        protected $sitepress;
        /** @var  int $id */
        protected $id;
        /** @var  string $type */
        protected $type;
        /** @var  stdClass $language_details */
        protected $language_details;
        /** @var null|int|stdClass */
        private $translation_job;
        /**
         * WPML_TF_Document_Information constructor.
         *
         * @param SitePress $sitepress
         */
        public function __construct(\SitePress $sitepress)
        {
        }
        /**
         * @param int    $id
         * @param string $type
         */
        public function init($id, $type)
        {
        }
        /**
         * @return string|null
         */
        public function get_source_language()
        {
        }
        /**
         * @return string
         */
        public function get_language()
        {
        }
        /**
         * @return null|int
         */
        public function get_job_id()
        {
        }
        /**
         * @return null|int
         */
        protected function get_trid()
        {
        }
        /**
         * @param int $job_id
         *
         * @return bool
         */
        public function is_local_translation($job_id)
        {
        }
        /**
         * @param int $job_id
         *
         * @return int|stdClass
         */
        protected function get_translation_job($job_id)
        {
        }
    }
    /**
     * Class WPML_TF_Backend_Document_Information
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Backend_Document_Information extends \WPML_TF_Document_Information
    {
        /** @var WPML_TP_Client_Factory|null $tp_client_factory */
        private $tp_client_factory;
        /** @var WPML_TP_Client|null $tp_client */
        private $tp_client;
        /**
         * WPML_TF_Backend_Document_Information constructor.
         *
         * @param SitePress              $sitepress
         * @param WPML_TP_Client_Factory $tp_client_factory
         */
        public function __construct(\SitePress $sitepress, \WPML_TP_Client_Factory $tp_client_factory = \null)
        {
        }
        /**
         * @return false|null|string
         */
        public function get_url()
        {
        }
        /**
         * @return null|string
         */
        public function get_title()
        {
        }
        /**
         * @return bool
         */
        private function is_post_document()
        {
        }
        /**
         * @param string $language_code
         *
         * @return string
         */
        public function get_flag_url($language_code)
        {
        }
        /**
         * @return string
         */
        public function get_edit_url()
        {
        }
        private function load_link_to_translation_tm_filters()
        {
        }
        /**
         * @return null|int
         */
        public function get_source_id()
        {
        }
        /**
         * @return null|string
         */
        public function get_source_url()
        {
        }
        /**
         * @return null|string
         */
        public function get_source_title()
        {
        }
        /**
         * @return array|bool|mixed
         */
        private function get_translations()
        {
        }
        /**
         * @param int $job_id
         *
         * @return string
         */
        public function get_translator_name($job_id)
        {
        }
        /**
         * @param string $from
         * @param string $to
         *
         * @return array
         */
        public function get_available_translators($from, $to)
        {
        }
        /**
         * @param int $post_id
         *
         * @return null|string
         */
        private function get_post_title($post_id)
        {
        }
        /** @return null|WPML_TP_Client */
        private function get_tp_client()
        {
        }
    }
    /**
     * Class WPML_TF_Frontend_Display_Requirements
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Frontend_Display_Requirements
    {
        /** @var WPML_Queried_Object $queried_object */
        private $queried_object;
        /** @var WPML_TF_Settings $settings */
        private $settings;
        /**
         * WPML_TF_Frontend_Display_Requirements constructor.
         *
         * @param WPML_Queried_Object $queried_object
         * @param WPML_TF_Settings    $settings
         */
        public function __construct(\WPML_Queried_Object $queried_object, \WPML_TF_Settings $settings)
        {
        }
        /**
         * @return bool
         */
        public function verify()
        {
        }
        /**
         * @return bool
         */
        private function is_enabled_on_frontend()
        {
        }
        /**
         * @return bool
         */
        private function is_translation()
        {
        }
        /**
         * @return bool
         */
        private function is_allowed_language()
        {
        }
        /**
         * @return bool
         */
        private function is_not_expired()
        {
        }
    }
    /**
     * Class WPML_TF_TP_Ratings_Synchronize
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_TP_Ratings_Synchronize
    {
        const MAX_RATINGS_TO_SYNCHRONIZE = 5;
        const PENDING_SYNC_RATING_IDS_OPTION = 'wpml_tf_pending_sync_rating_ids';
        const MAX_ATTEMPTS_TO_SYNC = 3;
        /** @var WPML_TF_Data_Object_Storage $feedback_storage */
        private $feedback_storage;
        /** @var WPML_TP_API_TF_Ratings $tp_ratings */
        private $tp_ratings;
        /** @var array $pending_ids */
        private $pending_ids;
        /**
         * WPML_TF_TP_Ratings_Synchronize constructor.
         *
         * @param WPML_TF_Data_Object_Storage $feedback_storage
         * @param WPML_TP_API_TF_Ratings      $tp_ratings
         */
        public function __construct(\WPML_TF_Data_Object_Storage $feedback_storage, \WPML_TP_API_TF_Ratings $tp_ratings)
        {
        }
        /** @param bool $clear_all_pending_ratings */
        public function run($clear_all_pending_ratings = \false)
        {
        }
        private function set_tp_rating_id(\WPML_TF_Feedback $feedback, $tp_rating_id)
        {
        }
        private function handle_pending_rating_sync(\WPML_TF_Feedback $feedback)
        {
        }
        /**
         * @param int $id
         *
         * @return bool
         */
        private function exceeds_max_attempts($id)
        {
        }
        /** @param int $id */
        private function increment_attempts($id)
        {
        }
    }
    /**
     * Class WPML_TF_WP_Cron_Events
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_WP_Cron_Events implements \IWPML_Action
    {
        const SYNCHRONIZE_RATINGS_EVENT = 'wpml_tf_synchronize_ratings_event';
        /** @var WPML_TF_Settings_Read $settings_read */
        private $settings_read;
        /** @var WPML_TF_Settings $settings */
        private $settings;
        /** @var WPML_TF_TP_Ratings_Synchronize_Factory $ratings_synchronize_factory */
        private $ratings_synchronize_factory;
        /**
         * WPML_TF_WP_Cron_Events constructor.
         *
         * @param WPML_TF_Settings_Read                  $settings_read
         * @param WPML_TF_TP_Ratings_Synchronize_Factory $ratings_synchronize_factory
         */
        public function __construct(\WPML_TF_Settings_Read $settings_read, \WPML_TF_TP_Ratings_Synchronize_Factory $ratings_synchronize_factory)
        {
        }
        public function add_hooks()
        {
        }
        public function init_action()
        {
        }
        private function add_synchronize_ratings_event()
        {
        }
        private function remove_synchronize_ratings_event()
        {
        }
        public function synchronize_ratings()
        {
        }
        /** @return WPML_TF_Settings */
        private function get_settings()
        {
        }
    }
    /**
     * Class WPML_TF_Module
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Module
    {
        /** @var WPML_Action_Filter_Loader $action_filter_loader */
        private $action_filter_loader;
        /** @var WPML_TF_Settings $settings */
        private $settings;
        /**
         * WPML_TF_Module constructor.
         *
         * @param WPML_Action_Filter_Loader $action_filter_loader
         * @param IWPML_TF_Settings         $settings
         */
        public function __construct(\WPML_Action_Filter_Loader $action_filter_loader, \IWPML_TF_Settings $settings)
        {
        }
        public function run()
        {
        }
        /**
         * @return array
         */
        private function get_actions_to_load_always()
        {
        }
        /**
         * @return array
         */
        private function get_actions_to_load_when_module_enabled()
        {
        }
    }
    /**
     * Class WPML_TF_Settings_Handler
     *
     * @author OnTheGoSystems
     */
    abstract class WPML_TF_Settings_Handler
    {
        /**
         * @param string $class_name
         *
         * @return string
         */
        protected function get_option_name($class_name)
        {
        }
    }
    /**
     * Class WPML_TF_Settings_Read
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Settings_Read extends \WPML_TF_Settings_Handler
    {
        /**
         * @param string $settings_class
         *
         * @return IWPML_TF_Settings
         *
         * @throws InvalidArgumentException
         */
        public function get($settings_class)
        {
        }
        /**
         * @param IWPML_TF_Settings $settings
         * @param array             $settings_properties
         *
         * @throws BadMethodCallException
         */
        private function set_properties(\IWPML_TF_Settings $settings, array $settings_properties)
        {
        }
    }
    /**
     * Class WPML_TF_Settings_Write
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Settings_Write extends \WPML_TF_Settings_Handler
    {
        /**
         * @param IWPML_TF_Settings $settings
         *
         * @return bool
         */
        public function save(\IWPML_TF_Settings $settings)
        {
        }
    }
    /**
     * Interface WPML_Settings_Interface
     *
     * @author OnTheGoSystems
     */
    interface IWPML_TF_Settings
    {
        /**
         * @return array of name/value pairs
         *
         * Each property should have its own setter "set_{$property_name}"
         */
        public function get_properties();
    }
    /**
     * Class WPML_TF_Settings
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Settings implements \IWPML_TF_Settings
    {
        const BUTTON_MODE_DISABLED = 'disabled';
        const BUTTON_MODE_LEFT = 'left';
        const BUTTON_MODE_RIGHT = 'right';
        const BUTTON_MODE_CUSTOM = 'custom';
        const ICON_STYLE_LEGACY = 'translation';
        const ICON_STYLE_STAR = 'star';
        const ICON_STYLE_THUMBSUP = 'thumbsup';
        const ICON_STYLE_BULLHORN = 'bullhorn';
        const ICON_STYLE_COMMENT = 'comment';
        const ICON_STYLE_QUOTE = 'quote';
        const DISPLAY_ALWAYS = 'always';
        const DISPLAY_CUSTOM = 'custom';
        const EXPIRATION_ON_PUBLISH_OR_UPDATE = 'publish_or_update';
        const EXPIRATION_ON_PUBLISH_ONLY = 'publish_only';
        const EXPIRATION_ON_UPDATE_ONLY = 'update_only';
        const DELAY_DAY = 1;
        const DELAY_WEEK = 7;
        const DELAY_MONTH = 30;
        /** @var bool $enabled */
        private $enabled = \false;
        /** @var string $button_mode */
        private $button_mode = self::BUTTON_MODE_LEFT;
        /** @var string $icon_style */
        private $icon_style = self::ICON_STYLE_LEGACY;
        /** @var null|array $languages_to */
        private $languages_to = \null;
        /** @var string $display_mode */
        private $display_mode = self::DISPLAY_CUSTOM;
        /** @var string $expiration_mode */
        private $expiration_mode = self::EXPIRATION_ON_PUBLISH_OR_UPDATE;
        /** @var int $expiration_delay_quantity */
        private $expiration_delay_quantity = 1;
        /** @var int $expiration_delay_unit */
        private $expiration_delay_unit = self::DELAY_MONTH;
        /**
         * @param bool $enabled
         */
        public function set_enabled($enabled)
        {
        }
        /**
         * @return bool
         */
        public function is_enabled()
        {
        }
        /**
         * @param string $button_mode
         */
        public function set_button_mode($button_mode)
        {
        }
        /**
         * @return string
         */
        public function get_button_mode()
        {
        }
        /** @param string $style */
        public function set_icon_style($style)
        {
        }
        /** @return string */
        public function get_icon_style()
        {
        }
        /**
         * @param array $languages_to
         */
        public function set_languages_to(array $languages_to)
        {
        }
        /**
         * @return null|array
         */
        public function get_languages_to()
        {
        }
        /**
         * @param string $display_mode
         */
        public function set_display_mode($display_mode)
        {
        }
        /**
         * @return string
         */
        public function get_display_mode()
        {
        }
        /**
         * @param string $expiration_mode
         */
        public function set_expiration_mode($expiration_mode)
        {
        }
        /**
         * @return string
         */
        public function get_expiration_mode()
        {
        }
        /**
         * @param int $expiration_delay_quantity
         */
        public function set_expiration_delay_quantity($expiration_delay_quantity)
        {
        }
        /**
         * @return int
         */
        public function get_expiration_delay_quantity()
        {
        }
        /**
         * @param int $expiration_delay_unit
         */
        public function set_expiration_delay_unit($expiration_delay_unit)
        {
        }
        /**
         * @return int
         */
        public function get_expiration_delay_unit()
        {
        }
        /**
         * @return int delay in days before expiration
         */
        public function get_expiration_delay_in_days()
        {
        }
        /**
         * @return array
         */
        public function get_properties()
        {
        }
    }
    /**
     * Class WPML_TF_AJAX_Exception
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_AJAX_Exception extends \Exception
    {
    }
    /**
     * Class WPML_TF_Feedback_Update_Exception
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Feedback_Update_Exception extends \Exception
    {
    }
    /**
     * Class WPML_TF_Backend_Options_Scripts
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Backend_Options_Scripts
    {
        const HANDLE = 'wpml-tf-backend-options';
        /**
         * method enqueue
         */
        public function enqueue()
        {
        }
    }
    /**
     * Class WPML_TF_Frontend_Scripts
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Frontend_Scripts
    {
        const HANDLE = 'wpml-tf-frontend';
        /**
         * method enqueue
         */
        public function enqueue()
        {
        }
    }
    /**
     * Class WPML_TF_Backend_Scripts
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Backend_Scripts
    {
        const HANDLE = 'wpml-tf-backend';
        /**
         * method enqueue
         */
        public function enqueue()
        {
        }
    }
    /**
     * Class WPML_TM_TF_Module
     *
     * @author OnTheGoSystems
     */
    class WPML_TM_TF_Module
    {
        /** @var WPML_Action_Filter_Loader $action_filter_loader */
        private $action_filter_loader;
        /** @var WPML_TF_Settings $settings */
        private $settings;
        /**
         * WPML_TF_Module constructor.
         *
         * @param WPML_Action_Filter_Loader $action_filter_loader
         * @param WPML_TF_Settings          $settings
         */
        public function __construct(\WPML_Action_Filter_Loader $action_filter_loader, \WPML_TF_Settings $settings)
        {
        }
        public function run()
        {
        }
        /**
         * @return array
         */
        private function get_actions_to_load_always()
        {
        }
        /**
         * @return array
         */
        private function get_actions_to_load_when_module_enabled()
        {
        }
    }
    /**
     * Class WPML_TF_Backend_Options_View
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Backend_Options_View
    {
        const TEMPLATE_FOLDER = '/templates/translation-feedback/backend/';
        const TEMPLATE = 'options-ui.twig';
        const MAX_EXPIRATION_QUANTITY = 10;
        /** @var  IWPML_Template_Service $template_service */
        private $template_service;
        /** @var WPML_TF_Settings $settings */
        private $settings;
        /** @var SitePress $sitepress */
        private $sitepress;
        /**
         * WPML_TF_Frontend_Hooks constructor.
         *
         * @param IWPML_Template_Service $template_service
         * @param WPML_TF_Settings       $settings
         * @param SitePress              $sitepress
         */
        public function __construct(\IWPML_Template_Service $template_service, \WPML_TF_Settings $settings, \SitePress $sitepress)
        {
        }
        /**
         * @return string
         */
        public function render()
        {
        }
        /**
         * @return array
         */
        public static function get_strings()
        {
        }
        /**
         * @return array
         */
        private function get_module_toggle()
        {
        }
        /**
         * @return array
         */
        private function get_button_modes()
        {
        }
        private function get_icon_styles()
        {
        }
        /**
         * @return array
         */
        private function get_languages_to()
        {
        }
        /**
         * @return array
         */
        private function get_display_modes()
        {
        }
        /**
         * @return array
         */
        private function get_expiration_modes()
        {
        }
        /**
         * @return array
         */
        private function get_expiration_quantities()
        {
        }
        /**
         * @return array
         */
        private function get_expiration_units()
        {
        }
    }
    /**
     * Class WPML_TF_Backend_Feedback_List_View
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Backend_Feedback_List_View
    {
        const TEMPLATE_FOLDER = '/templates/translation-feedback/backend/';
        const TEMPLATE_NAME = 'feedback-list-page.twig';
        const ITEMS_PER_PAGE = 20;
        /** @var IWPML_Template_Service $template_service */
        private $template_service;
        /** @var WPML_TF_Feedback_Query $feedback_query */
        private $feedback_query;
        /** @var WPML_Admin_Pagination $pagination */
        private $pagination;
        /** @var WPML_Admin_Table_Sort $table_sort */
        private $table_sort;
        /** @var WPML_TF_Feedback_Page_Filter $page_filter */
        private $page_filter;
        /**
         * WPML_TF_Backend_Feedback_List_View constructor.
         *
         * @param IWPML_Template_Service       $template_service
         * @param WPML_TF_Feedback_Query       $feedback_query
         * @param WPML_Admin_Pagination        $pagination
         * @param WPML_Admin_Table_Sort        $table_sort
         * @param WPML_TF_Feedback_Page_Filter $page_filter
         */
        public function __construct(\IWPML_Template_Service $template_service, \WPML_TF_Feedback_Query $feedback_query, \WPML_Admin_Pagination $pagination, \WPML_Admin_Table_Sort $table_sort, \WPML_TF_Feedback_Page_Filter $page_filter)
        {
        }
        /** @return string */
        public function render_page()
        {
        }
        /** @return array */
        private function parse_request_args()
        {
        }
        /** @return array */
        private function get_strings()
        {
        }
        /** @return array */
        private function get_columns()
        {
        }
        /**
         * @param array $args
         *
         * @return array
         */
        private function get_pagination(array $args)
        {
        }
        /** @return array */
        private function get_page_filters()
        {
        }
        /** @return array */
        private function get_current_query()
        {
        }
    }
    /**
     * Class WPML_TF_Backend_Feedback_Row_View
     */
    class WPML_TF_Backend_Feedback_Row_View
    {
        const TEMPLATE_FOLDER = '/templates/translation-feedback/backend/';
        const SUMMARY_TEMPLATE = 'feedback-list-page-table-row.twig';
        const DETAILS_TEMPLATE = 'feedback-list-page-table-row-details.twig';
        /** @var IWPML_Template_Service $template_service */
        private $template_service;
        /**
         * WPML_TF_Backend_Feedback_Row_View constructor.
         *
         * @param IWPML_Template_Service $template_service
         */
        public function __construct(\IWPML_Template_Service $template_service)
        {
        }
        /** @param WPML_TF_Feedback $feedback */
        public function render_summary_row(\WPML_TF_Feedback $feedback)
        {
        }
        /** @param WPML_TF_Feedback $feedback */
        public function render_details_row(\WPML_TF_Feedback $feedback)
        {
        }
        /** @return array */
        public static function get_columns_strings()
        {
        }
        /** @return array */
        public static function get_summary_strings()
        {
        }
        /** @return array */
        public static function get_details_strings()
        {
        }
    }
    /**
     * Class WPML_TF_Frontend_Feedback_View
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Frontend_Feedback_View
    {
        const TEMPLATE_FOLDER = '/templates/translation-feedback/frontend/';
        const FORM_TEMPLATE = 'feedback-form.twig';
        const OPEN_TEMPLATE = 'feedback-open-button.twig';
        const CUSTOM_OPEN_LINK_TEMPLATE = 'feedback-custom-open-link.twig';
        const JS_OPEN_NODE_CLASS = 'js-wpml-tf-feedback-icon';
        /** @var  IWPML_Template_Service $template_service */
        private $template_service;
        /** @var SitePress $sitepress */
        private $sitepress;
        /** @var WPML_Queried_Object $queried_object */
        private $queried_object;
        /** @var WPML_TF_Settings $settings */
        private $settings;
        /**
         * WPML_TF_Frontend_Hooks constructor.
         *
         * @param IWPML_Template_Service $template_service
         * @param SitePress              $sitepress
         * @param WPML_Queried_Object    $queried_object
         * @param WPML_TF_Settings       $settings
         */
        public function __construct(\IWPML_Template_Service $template_service, \SitePress $sitepress, \WPML_Queried_Object $queried_object, \WPML_TF_Settings $settings)
        {
        }
        /**
         * @return string
         */
        public function render_form()
        {
        }
        /**
         * @return string
         */
        public function render_open_button()
        {
        }
        /** @return string */
        private function get_wrapper_css_classes()
        {
        }
        /** @return string */
        private function get_icon_css_class()
        {
        }
        /**
         * @param string|array $args
         *
         * @return string
         */
        public function render_custom_open_link($args)
        {
        }
        /** @return array */
        public static function get_default_arguments_for_open_link()
        {
        }
        /** @return array */
        public static function get_icon_css_classes()
        {
        }
    }
    /**
     * Class WPML_TF_Backend_Styles
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Backend_Styles
    {
        const HANDLE = 'wpml-tf-backend';
        /**
         * method enqueue
         */
        public function enqueue()
        {
        }
    }
    /**
     * Class WPML_TF_Frontend_Styles
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Frontend_Styles
    {
        const HANDLE = 'wpml-tf-frontend';
        /**
         * method enqueue
         */
        public function enqueue()
        {
        }
    }
    /**
     * Class WPML_TF_Backend_Options_Styles
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Backend_Options_Styles
    {
        const HANDLE = 'wpml-tf-backend-options';
        /**
         * method enqueue
         */
        public function enqueue()
        {
        }
    }
    /**
     * Class WPML_TF_Backend_Bulk_Actions
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Backend_Bulk_Actions
    {
        /** @var  WPML_TF_Data_Object_Storage $feedback_storage */
        private $feedback_storage;
        /** @var WPML_WP_API $wp_api */
        private $wp_api;
        /** @var  WPML_TF_Backend_Notices $backend_notices */
        private $backend_notices;
        /**
         * WPML_TF_Feedback_List_Bulk_Action_Hooks constructor.
         *
         * @param WPML_TF_Data_Object_Storage $feedback_storage
         * @param WPML_WP_API                 $wp_api
         * @param WPML_TF_Backend_Notices     $backend_notices
         */
        public function __construct(\WPML_TF_Data_Object_Storage $feedback_storage, \WPML_WP_API $wp_api, \WPML_TF_Backend_Notices $backend_notices)
        {
        }
        /**
         * Method bulk_action_callback
         */
        public function process()
        {
        }
        private function change_status(array $feedback_ids, $new_status)
        {
        }
        private function delete(array $feedback_ids, $force_delete = \false)
        {
        }
        private function untrash(array $feedback_ids)
        {
        }
        /**
         * @return bool
         */
        private function is_valid_request()
        {
        }
        private function is_valid_action($action)
        {
        }
        /**
         * Redirect after processing the bulk action
         */
        private function redirect()
        {
        }
    }
    /**
     * Class WPML_TF_XML_RPC_Feedback_Update
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_XML_RPC_Feedback_Update
    {
        /** @var WPML_TF_Data_Object_Storage $feedback_storage */
        private $feedback_storage;
        /** @var WPML_TP_Project $tp_project */
        private $tp_project;
        public function __construct(\WPML_TF_Data_Object_Storage $feedback_storage, \WPML_TP_Project $tp_project)
        {
        }
        public function set_status(array $args)
        {
        }
        /**
         * @param array $args
         *
         * @return bool
         */
        private function valid_arguments(array $args)
        {
        }
        /**
         * @param int $tp_feedback_id
         *
         * @return null|WPML_TF_Feedback
         */
        private function get_feedback($tp_feedback_id)
        {
        }
    }
    /**
     * Class WPML_TF_Promote_Notices
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Promote_Notices
    {
        const NOTICE_GROUP = 'wpml-tf-promote';
        const NOTICE_NEW_SITE = 'notice-new-site';
        const DOC_URL = 'https://wpml.org/documentation/getting-started-guide/getting-visitor-feedback-about-your-sites-translations/?utm_source=plugin&utm_medium=gui&utm_campaign=wpmlcore';
        /** @var SitePress $sitepress */
        private $sitepress;
        public function __construct(\SitePress $sitepress)
        {
        }
        /**
         * @param int $user_id
         */
        public function show_notice_for_new_site($user_id)
        {
        }
        public function remove()
        {
        }
    }
    /**
     * Class WPML_TF_Backend_Notices
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Backend_Notices
    {
        const GROUP = 'wpml_tf_backend_notices';
        const BULK_UPDATED = 'bulk_updated';
        /** @var  WPML_Notices $admin_notices */
        private $admin_notices;
        /**
         * @param array $updated_feedback_ids
         * @parem string
         */
        public function add_bulk_updated_notice(array $updated_feedback_ids, $action)
        {
        }
        /**
         * Add action to remove updated notice after display
         */
        public function remove_bulk_updated_notice_after_display()
        {
        }
        /**
         * Remove bulk_updated notice
         */
        public function remove_bulk_updated_notice()
        {
        }
        /**
         * @return WPML_Notices
         */
        private function get_admin_notices()
        {
        }
    }
    /**
     * Class WPML_TF_Translation_Service_Change_Hooks
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Translation_Service_Change_Hooks implements \IWPML_Action
    {
        /** @var WPML_TF_Settings_Read $settings_read */
        private $settings_read;
        /** @var WPML_TF_Settings_Write $settings_write */
        private $settings_write;
        /** @var WPML_TF_TP_Ratings_Synchronize_Factory $tp_ratings_synchronize_factory */
        private $tp_ratings_synchronize_factory;
        public function __construct(\WPML_TF_Settings_Read $settings_read, \WPML_TF_Settings_Write $settings_write, \WPML_TF_TP_Ratings_Synchronize_Factory $tp_ratings_synchronize_factory)
        {
        }
        public function add_hooks()
        {
        }
        public function before_set_translation_service_callback(\stdClass $service)
        {
        }
        private function cleanup_pending_ratings_queue()
        {
        }
        private function disable_tf_if_not_allowed_by_ts(\stdClass $service)
        {
        }
    }
    /**
     * Class WPML_TM_TF_Feedback_List_Hooks
     *
     * @author OnTheGoSystems
     */
    class WPML_TM_TF_Feedback_List_Hooks implements \IWPML_Action
    {
        public function add_hooks()
        {
        }
        /**
         * @param int|bool $use_translation_editor
         *
         * @return int|bool
         */
        public function maybe_force_to_use_translation_editor($use_translation_editor)
        {
        }
    }
    /**
     * Class WPML_TF_XML_RPC_Hooks
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_XML_RPC_Hooks implements \IWPML_Action
    {
        /** @var WPML_TF_XML_RPC_Feedback_Update_Factory $xml_rpc_feedback_update_factory */
        private $xml_rpc_feedback_update_factory;
        /** @var WPML_WP_API $wp_api */
        private $wp_api;
        public function __construct(\WPML_TF_XML_RPC_Feedback_Update_Factory $xml_rpc_feedback_update_factory, \WPML_WP_API $wp_api)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param array $methods
         *
         * @return array
         */
        public function add_tf_xmlrpc_methods($methods)
        {
        }
        /** @param array $args */
        public function update_feedback_status(array $args)
        {
        }
    }
    /**
     * Class WPML_TF_Translation_Queue_Hooks
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Translation_Queue_Hooks implements \IWPML_Action
    {
        /** @var WPML_TF_Data_Object_Storage $feedback_storage */
        private $feedback_storage;
        public function __construct(\WPML_TF_Data_Object_Storage $feedback_storage)
        {
        }
        public function add_hooks()
        {
        }
        public function add_reviewer_to_allowed_translators(array $allowed_translators, \WPML_Translation_Job $translation_job)
        {
        }
    }
    /**
     * Class WPML_TF_Frontend_AJAX_Hooks
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Frontend_AJAX_Hooks implements \IWPML_Action
    {
        /** @var WPML_TF_Data_Object_Storage $feedback_storage */
        private $feedback_storage;
        /** @var WPML_TF_Document_Information $document_information */
        private $document_information;
        /** @var WPML_TF_Post_Rating_Metrics $post_rating_metrics */
        private $post_rating_metrics;
        /** @var WPML_TP_Client_Factory $tp_client_factory */
        private $tp_client_factory;
        /** @var WPML_TP_Client $tp_client */
        private $tp_client;
        private $post_data;
        /**
         * WPML_TF_Frontend_AJAX_Hooks constructor.
         *
         * @param WPML_TF_Data_Object_Storage  $feedback_storage
         * @param WPML_TF_Document_Information $document_information
         * @param WPML_TF_Post_Rating_Metrics  $post_rating_metrics
         * @param WPML_TP_Client_Factory|null  $tp_client_factory
         * @param mixed[]|null                 $post_data
         */
        public function __construct(\WPML_TF_Data_Object_Storage $feedback_storage, \WPML_TF_Document_Information $document_information, \WPML_TF_Post_Rating_Metrics $post_rating_metrics, \WPML_TP_Client_Factory $tp_client_factory = \null, array $post_data = \null)
        {
        }
        /**
         * method init
         */
        public function add_hooks()
        {
        }
        /**
         * Method callback
         */
        public function save_feedback_callback()
        {
        }
        /**
         * @param int $feedback_id
         *
         * @return WPML_TF_Feedback|null|false
         */
        private function update_feedback($feedback_id)
        {
        }
        /**
         * @return WPML_TF_Feedback
         */
        private function create_feedback()
        {
        }
        /** @return string */
        private function get_filtered_status()
        {
        }
        /** @return null|WPML_TP_Client */
        private function get_tp_client()
        {
        }
    }
    /**
     * Class WPML_TF_Backend_Options_Hooks
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Backend_Options_Hooks implements \IWPML_Action
    {
        const WPML_LOVE_ID = '#lang-sec-10';
        /** @var  WPML_TF_Backend_Options_View $options_view */
        private $options_view;
        /** @var WPML_TF_Backend_Options_Scripts $scripts */
        private $scripts;
        /** @var WPML_TF_Backend_Options_Styles $styles */
        private $styles;
        /** @var WPML_TF_Translation_Service $translation_service */
        private $translation_service;
        /**
         * WPML_TF_Backend_Options_Hooks constructor.
         *
         * @param WPML_TF_Backend_Options_View    $options_view
         * @param WPML_TF_Backend_Options_Scripts $scripts
         * @param WPML_TF_Backend_Options_Styles  $styles
         * @param WPML_TF_Translation_Service     $translation_service
         */
        public function __construct(\WPML_TF_Backend_Options_View $options_view, \WPML_TF_Backend_Options_Scripts $scripts, \WPML_TF_Backend_Options_Styles $styles, \WPML_TF_Translation_Service $translation_service)
        {
        }
        /**
         * Method add_hooks
         */
        public function add_hooks()
        {
        }
        /**
         * Method to render the options UI
         */
        public function display_options_ui()
        {
        }
        /**
         * @param array $items
         *
         * @return mixed
         */
        public function insert_navigation_item($items)
        {
        }
        public function enqueue_scripts_action()
        {
        }
    }
    /**
     * Class WPML_TF_Backend_Hooks
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Backend_Hooks implements \IWPML_Action
    {
        const PAGE_HOOK = 'wpml-translation-feedback-list';
        /** @var WPML_TF_Backend_Bulk_Actions_Factory  */
        private $bulk_actions_factory;
        /** @var WPML_TF_Backend_Feedback_List_View_Factory feedback_list_view_factory */
        private $feedback_list_view_factory;
        /** @var  WPML_TF_Backend_Styles $backend_styles */
        private $backend_styles;
        /** @var WPML_TF_Backend_Scripts */
        private $backend_scripts;
        /** @var wpdb $wpdb */
        private $wpdb;
        /**
         * WPML_TF_Backend_Hooks constructor.
         *
         * @param WPML_TF_Backend_Bulk_Actions_Factory       $bulk_actions_factory
         * @param WPML_TF_Backend_Feedback_List_View_Factory $feedback_list_view_factory
         * @param WPML_TF_Backend_Styles                     $backend_styles
         * @param WPML_TF_Backend_Scripts                    $backend_scripts
         * @param wpdb                                       $wpdb
         */
        public function __construct(\WPML_TF_Backend_Bulk_Actions_Factory $bulk_actions_factory, \WPML_TF_Backend_Feedback_List_View_Factory $feedback_list_view_factory, \WPML_TF_Backend_Styles $backend_styles, \WPML_TF_Backend_Scripts $backend_scripts, \wpdb $wpdb)
        {
        }
        /**
         * method add_hooks
         */
        public function add_hooks()
        {
        }
        /**
         * Define translation feedback list menu and callback
         *
         * @param string $menu_id
         */
        public function add_translation_feedback_list_menu($menu_id)
        {
        }
        /**
         * Callback to display the feedback list page
         */
        public function translation_feedback_list_display()
        {
        }
        /**
         * @param string $hook
         */
        public function admin_enqueue_scripts_action($hook)
        {
        }
        public function bulk_actions_callback($current_screen)
        {
        }
        /**
         * @param string $hook
         *
         * @return bool
         */
        private function is_page_hook($hook)
        {
        }
        /**
         * @param string   $where
         * @param WP_Query $query
         *
         * @return string
         */
        public function maybe_exclude_rating_only_status($where, $query)
        {
        }
    }
    /**
     * Class WPML_TF_Common_Hooks
     * @author OnTheGoSystems
     */
    class WPML_TF_Common_Hooks implements \IWPML_Action
    {
        /** @var WPML_TF_Data_Object_Storage $feedback_storage */
        private $feedback_storage;
        public function __construct(\WPML_TF_Data_Object_Storage $feedback_storage)
        {
        }
        /**
         * method init
         */
        public function add_hooks()
        {
        }
        /**
         * method init_action
         */
        public function init_action()
        {
        }
        /** @param int $post_id */
        public function cleanup_post_feedback_data($post_id)
        {
        }
    }
    /**
     * Class WPML_TF_Frontend_Hooks
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Frontend_Hooks implements \IWPML_Action
    {
        /** @var WPML_TF_Frontend_Feedback_View $feedback_view */
        private $feedback_view;
        /** @var WPML_TF_Frontend_Scripts $scripts */
        private $scripts;
        /** @var WPML_TF_Frontend_Styles $styles */
        private $styles;
        /**
         * WPML_TF_Frontend_Hooks constructor.
         *
         * @param WPML_TF_Frontend_Feedback_View $feedback_view
         * @param WPML_TF_Frontend_Scripts       $scripts
         * @param WPML_TF_Frontend_Styles        $styles
         */
        public function __construct(\WPML_TF_Frontend_Feedback_View $feedback_view, \WPML_TF_Frontend_Scripts $scripts, \WPML_TF_Frontend_Styles $styles)
        {
        }
        /**
         * method init
         */
        public function add_hooks()
        {
        }
        /**
         * method enqueue_scripts_action
         */
        public function enqueue_scripts_action()
        {
        }
        /**
         * method render_feedback_form
         */
        public function render_feedback_form()
        {
        }
        /** @param string|array $args */
        public function render_custom_form_open_link($args)
        {
        }
    }
    /**
     * Class WPML_TF_Backend_Promote_Hooks
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Backend_Promote_Hooks implements \IWPML_Action
    {
        /** @var WPML_TF_Promote_Notices $promote_notices */
        private $promote_notices;
        /** @var WPML_TF_Translation_Service $translation_service */
        private $translation_service;
        /** @var bool $is_setup_complete */
        private $is_setup_complete;
        /**
         * WPML_TF_Backend_Promote_Hooks constructor.
         *
         * @param WPML_TF_Promote_Notices          $promote_notices
         * @param bool                             $is_setup_complete
         * @param WPML_TF_Translation_Service $translation_service
         */
        public function __construct(\WPML_TF_Promote_Notices $promote_notices, $is_setup_complete, \WPML_TF_Translation_Service $translation_service)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param int      $new_post_id
         * @param array    $fields
         * @param stdClass $job
         */
        public function add_notice_for_manager_on_job_completed($new_post_id, $fields, $job)
        {
        }
    }
    /**
     * Class WPML_TF_Backend_Options_AJAX_Hooks
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Backend_Options_AJAX_Hooks implements \IWPML_Action
    {
        /** @var WPML_TF_Settings $settings */
        private $settings;
        /** @var WPML_TF_Settings_Write $settings_write */
        private $settings_write;
        /** @var WPML_TF_Promote_Notices $promote_notices */
        private $promote_notices;
        /** @var array $post_data */
        private $post_data;
        /**
         * WPML_TF_Frontend_AJAX_Hooks constructor.
         *
         * @param WPML_TF_Settings        $settings
         * @param WPML_TF_Settings_Write  $settings_write
         * @param WPML_TF_Promote_Notices $promote_notices
         * @param array                   $post_data
         */
        public function __construct(\WPML_TF_Settings $settings, \WPML_TF_Settings_Write $settings_write, \WPML_TF_Promote_Notices $promote_notices, array $post_data)
        {
        }
        public function add_hooks()
        {
        }
        public function save_settings_callback()
        {
        }
    }
    /**
     * Class WPML_TF_Backend_Post_List_Hooks
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Backend_Post_List_Hooks implements \IWPML_Action
    {
        const RATING_COLUMN_ID = 'translation_rating';
        /** @var WPML_TF_Post_Rating_Metrics $post_rating_metrics*/
        private $post_rating_metrics;
        /** @var WPML_TF_Document_Information $document_information */
        private $document_information;
        /** @var WPML_TF_Backend_Styles $styles */
        private $styles;
        public function __construct(\WPML_TF_Post_Rating_Metrics $post_rating_metrics, \WPML_TF_Document_Information $document_information, \WPML_TF_Backend_Styles $styles)
        {
        }
        /** @return array */
        private function get_post_types()
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param array $columns
         *
         * @return array
         */
        public function add_rating_column_header(array $columns)
        {
        }
        /**
         * @param string $column_name
         * @param int    $post_id
         */
        public function add_rating_column_content($column_name, $post_id)
        {
        }
        /**
         * @param array $columns
         *
         * @return array
         */
        public function add_rating_sortable_column(array $columns)
        {
        }
        public function order_posts_by_rating(\WP_Query $query)
        {
        }
        public function admin_enqueue_scripts_action()
        {
        }
    }
    /**
     * Class WPML_TF_Backend_AJAX_Feedback_Edit_Hooks
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Backend_AJAX_Feedback_Edit_Hooks implements \IWPML_Action
    {
        /** @var WPML_TF_Feedback_Edit $feedback_edit */
        private $feedback_edit;
        /** @var WPML_TF_Backend_Feedback_Row_View $row_view */
        private $row_view;
        /** @var array $post_data */
        private $post_data;
        /**
         * WPML_TF_Backend_AJAX_Feedback_Edit_Hooks constructor.
         *
         * @param WPML_TF_Feedback_Edit             $feedback_edit
         * @param WPML_TF_Backend_Feedback_Row_View $row_view
         * @param array                             $post_data
         */
        public function __construct(\WPML_TF_Feedback_Edit $feedback_edit, \WPML_TF_Backend_Feedback_Row_View $row_view, array $post_data)
        {
        }
        public function add_hooks()
        {
        }
        public function edit_feedback_callback()
        {
        }
        /**
         * @param string $key
         *
         * @throws WPML_TF_AJAX_Exception
         */
        private function check_post_data_key($key)
        {
        }
    }
    /**
     * Class WPML_TF_XML_RPC_Feedback_Update_Factory
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_XML_RPC_Feedback_Update_Factory
    {
        /** @return WPML_TF_XML_RPC_Feedback_Update */
        public function create()
        {
        }
    }
    /**
     * Class WPML_TF_Backend_Feedback_List_View_Factory
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Backend_Feedback_List_View_Factory
    {
        public function create()
        {
        }
    }
    /**
     * Class WPML_TM_TF_Feedback_List_Hooks_Factory
     *
     * @author OnTheGoSystems
     */
    class WPML_TM_TF_Feedback_List_Hooks_Factory extends \WPML_Current_Screen_Loader_Factory
    {
        /** @return string */
        public function get_screen_regex()
        {
        }
        /** @return WPML_TM_TF_Feedback_List_Hooks */
        public function create_hooks()
        {
        }
    }
    /**
     * Class WPML_TF_Backend_Post_List_Hooks_Factory
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Backend_Post_List_Hooks_Factory extends \WPML_Current_Screen_Loader_Factory
    {
        /** @return string */
        protected function get_screen_regex()
        {
        }
        /** @return WPML_TF_Backend_Post_List_Hooks */
        protected function create_hooks()
        {
        }
    }
    /**
     * Class WPML_TF_Translation_Service_Change_Hooks_Factory
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Translation_Service_Change_Hooks_Factory implements \IWPML_Backend_Action_Loader
    {
        /** @return WPML_TF_Translation_Service_Change_Hooks */
        public function create()
        {
        }
    }
    /**
     * Class WPML_TF_Frontend_Hooks_Factory
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Frontend_Hooks_Factory implements \IWPML_Frontend_Action_Loader, \IWPML_Deferred_Action_Loader
    {
        /** @var  WPML_Queried_Object $queried_object */
        private $queried_object;
        /** @var WPML_TF_Frontend_Display_Requirements $display_requirements */
        private $display_requirements;
        /**
         * WPML_TF_Frontend_Hooks_Factory constructor.
         *
         * @param WPML_Queried_Object                   $queried_object
         * @param WPML_TF_Frontend_Display_Requirements $display_requirements
         */
        public function __construct(\WPML_Queried_Object $queried_object = \null, \WPML_TF_Frontend_Display_Requirements $display_requirements = \null)
        {
        }
        /**
         * The frontend hooks must be loaded when the request has been parsed (in "wp")
         * to avoid unnecessary instantiation if the current page is not a translation
         *
         * @return string
         */
        public function get_load_action()
        {
        }
        /**
         * @return null|WPML_TF_Frontend_Hooks
         */
        public function create()
        {
        }
        /**
         * @return WPML_Queried_Object
         */
        private function get_queried_object()
        {
        }
        /**
         * @return WPML_TF_Frontend_Display_Requirements
         */
        private function get_display_requirements()
        {
        }
    }
    /**
     * Class WPML_TF_Translation_Queue_Hooks_Factory
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Translation_Queue_Hooks_Factory extends \WPML_Current_Screen_Loader_Factory
    {
        /** @return string */
        protected function get_screen_regex()
        {
        }
        /** @return WPML_TF_Translation_Queue_Hooks */
        protected function create_hooks()
        {
        }
    }
    /**
     * Class WPML_TF_Backend_Options_Hooks_Factory
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Backend_Options_Hooks_Factory extends \WPML_Current_Screen_Loader_Factory
    {
        /** @return string */
        protected function get_screen_regex()
        {
        }
        /** @return null|WPML_TF_Backend_Options_Hooks */
        protected function create_hooks()
        {
        }
    }
    /**
     * Class WPML_TF_Backend_AJAX_Feedback_Edit_Hooks_Factory
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Backend_AJAX_Feedback_Edit_Hooks_Factory extends \WPML_AJAX_Base_Factory implements \IWPML_Backend_Action_Loader
    {
        const AJAX_ACTION = 'wpml-tf-backend-feedback-edit';
        public function create()
        {
        }
    }
    /**
     * Class WPML_TF_Backend_Hooks_Factory
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Backend_Hooks_Factory implements \IWPML_Backend_Action_Loader
    {
        /**
         * @return WPML_TF_Backend_Hooks
         */
        public function create()
        {
        }
    }
    /**
     * Class WPML_TF_XML_RPC_Hooks_Factory
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_XML_RPC_Hooks_Factory implements \IWPML_Frontend_Action_Loader
    {
        /** @return WPML_TF_XML_RPC_Hooks */
        public function create()
        {
        }
    }
    /**
     * Class WPML_TF_Common_Hooks_Factory
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_WP_Cron_Events_Factory implements \IWPML_Backend_Action_Loader, \IWPML_Frontend_Action_Loader
    {
        /** @return WPML_TF_WP_Cron_Events */
        public function create()
        {
        }
    }
    /**
     * Class WPML_TF_Backend_Options_AJAX_Hooks_Factory
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Backend_Options_AJAX_Hooks_Factory extends \WPML_AJAX_Base_Factory implements \IWPML_Backend_Action_Loader
    {
        const AJAX_ACTION = 'wpml-tf-backend-options';
        /**
         * @return IWPML_Action|null
         */
        public function create()
        {
        }
    }
    /**
     * Class WPML_TF_Backend_Promote_Hooks_Factory
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Backend_Promote_Hooks_Factory implements \IWPML_Backend_Action_Loader, \IWPML_Deferred_Action_Loader
    {
        /** @return string */
        public function get_load_action()
        {
        }
        public function create()
        {
        }
    }
    /**
     * Class WPML_TF_Frontend_AJAX_Hooks_Factory
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Frontend_AJAX_Hooks_Factory extends \WPML_AJAX_Base_Factory
    {
        const AJAX_ACTION = 'wpml-tf-frontend-feedback';
        /**
         * @return IWPML_Action|null
         */
        public function create()
        {
        }
    }
    /**
     * Class WPML_TM_TF_AJAX_Feedback_List_Hooks_Factory
     *
     * @author OnTheGoSystems
     */
    class WPML_TM_TF_AJAX_Feedback_List_Hooks_Factory implements \IWPML_AJAX_Action_Loader
    {
        /** @return WPML_TM_TF_Feedback_List_Hooks */
        public function create()
        {
        }
    }
    /**
     * Class WPML_TF_Common_Hooks_Factory
     * @author OnTheGoSystems
     */
    class WPML_TF_Common_Hooks_Factory implements \IWPML_Backend_Action_Loader, \IWPML_Frontend_Action_Loader
    {
        /**
         * @return WPML_TF_Common_Hooks
         */
        public function create()
        {
        }
    }
    /**
     * Class WPML_TF_Backend_Bulk_Actions_Factory
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Backend_Bulk_Actions_Factory
    {
        /**
         * @return WPML_TF_Backend_Bulk_Actions
         */
        public function create()
        {
        }
    }
    /**
     * Class WPML_TF_TP_Ratings_Synchronize
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_TP_Ratings_Synchronize_Factory
    {
        /**
         * @return WPML_TF_TP_Ratings_Synchronize
         */
        public function create()
        {
        }
    }
    /**
     * Interface IWPML_TF_Collection_Filter
     *
     * @author OnTheGoSystems
     */
    interface IWPML_TF_Collection_Filter
    {
        /**
         * @return array
         */
        public function get_posts_args();
        /**
         * @return WPML_TF_Collection
         */
        public function get_new_collection();
    }
    /**
     * Class WPML_TF_Message_Collection_Filter
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Message_Collection_Filter implements \IWPML_TF_Collection_Filter
    {
        /** @var  int $feedback_id */
        private $feedback_id;
        /** @var  array|null */
        private $feedback_ids;
        /**
         * WPML_TF_Feedback_Collection_Filter constructor.
         *
         * @param array $args
         */
        public function __construct(array $args = array())
        {
        }
        /**
         * @return int|null
         */
        private function get_feedback_id()
        {
        }
        /**
         * @return array|null
         */
        private function get_feedback_ids()
        {
        }
        /**
         * @return array
         */
        public function get_posts_args()
        {
        }
        /**
         * @return WPML_TF_Message_Collection
         */
        public function get_new_collection()
        {
        }
    }
    /**
     * Interface IWPML_TF_Data_Object
     *
     * @author OnTheGoSystems
     */
    interface IWPML_TF_Data_Object
    {
        /**
         * @return int
         */
        public function get_id();
        /**
         * @return int|null
         */
        public function get_feedback_id();
        /**
         * @param \WPML_TF_Message $message
         */
        public function add_message(\WPML_TF_Message $message);
    }
    /**
     * Class WPML_TF_Message
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Message implements \IWPML_TF_Data_Object
    {
        /** @var int $id */
        private $id;
        /** @var  int $feedback_id */
        private $feedback_id;
        /** @var  string $date_created */
        private $date_created;
        /** @var  string $content */
        private $content;
        /** @var  string $author_id */
        private $author_id;
        /**
         * WPML_Translation_Feedback constructor.
         *
         * @param array $data
         */
        public function __construct($data = array())
        {
        }
        /**
         * @return int|mixed|null
         */
        public function get_id()
        {
        }
        /**
         * @return int|null
         */
        public function get_feedback_id()
        {
        }
        /**
         * @param \WPML_TF_Message $message
         */
        public function add_message(\WPML_TF_Message $message)
        {
        }
        /**
         * @return mixed|null|string
         */
        public function get_date_created()
        {
        }
        /**
         * @return mixed|null|string
         */
        public function get_content()
        {
        }
        /**
         * @return int|null
         */
        public function get_author_id()
        {
        }
        /** @return string */
        public function get_author_display_label()
        {
        }
        /** @return bool */
        public function author_is_current_user()
        {
        }
    }
    /**
     * Class WPML_TF_Collection
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Collection implements \Iterator, \Countable
    {
        /** @var array<\IWPML_TF_Data_Object> */
        protected $collection = array();
        /**
         * @param \IWPML_TF_Data_Object $data_object
         */
        public function add(\IWPML_TF_Data_Object $data_object)
        {
        }
        /**
         * @return array
         */
        public function get_ids()
        {
        }
        /**
         * @param int $id
         *
         * @return IWPML_TF_Data_Object|null
         */
        public function get($id)
        {
        }
        /**
         * @return int
         */
        public function count()
        {
        }
        public function rewind()
        {
        }
        /**
         * @return mixed
         */
        public function current()
        {
        }
        /**
         * @return mixed
         */
        public function key()
        {
        }
        public function next()
        {
        }
        /**
         * @return bool
         */
        public function valid()
        {
        }
    }
    /**
     * Class WPML_TF_Message_Collection
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Message_Collection extends \WPML_TF_Collection
    {
    }
    /**
     * Class WPML_TF_Data_Object_Post_Convert
     *
     * @author OnTheGoSystems
     */
    abstract class WPML_TF_Data_Object_Post_Convert
    {
        /**
         * @return array
         */
        public abstract function get_post_fields();
        /**
         * @return array
         */
        public abstract function get_meta_fields();
        /**
         * @param IWPML_TF_Data_Object $data_object
         *
         * @return array
         */
        public abstract function to_post_data(\IWPML_TF_Data_Object $data_object);
        /**
         * @param array $post_data
         *
         * @return object
         */
        public abstract function to_object(array $post_data);
        /**
         * @param array $post_data
         *
         * @return array
         */
        protected function build_object_data_for_constructor(array $post_data)
        {
        }
    }
    /**
     * Class WPML_TF_Message_Post_Convert
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Message_Post_Convert extends \WPML_TF_Data_Object_Post_Convert
    {
        const POST_TYPE = 'wpml_tf_message';
        /**
         * @return array
         */
        public function get_post_fields()
        {
        }
        /**
         * @return array
         */
        public function get_meta_fields()
        {
        }
        /**
         * @param IWPML_TF_Data_Object $message
         *
         * @return array
         * @throws Exception
         */
        public function to_post_data(\IWPML_TF_Data_Object $message)
        {
        }
        /**
         * @param array $post_data
         *
         * @return WPML_TF_Message
         */
        public function to_object(array $post_data)
        {
        }
    }
    /**
     * Class WPML_TF_Feedback_Collection_Filter
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Feedback_Collection_Filter implements \IWPML_TF_Collection_Filter
    {
        /** @var bool $exclude_rating_only */
        private $exclude_rating_only;
        /** @var array $language_pairs */
        private $language_pairs;
        /** @var int $pending_tp_ratings */
        private $pending_tp_ratings;
        /** @var int tp_feedback_id */
        private $tp_feedback_id;
        /** @var int $post_id */
        private $post_id;
        /** @var int $reviewer_id */
        private $reviewer_id;
        /**
         * WPML_TF_Feedback_Collection_Filter constructor.
         *
         * @param array $args
         */
        public function __construct(array $args)
        {
        }
        /** @return null|bool */
        private function get_exclude_rating_only()
        {
        }
        /** @return null|array */
        private function get_language_pairs()
        {
        }
        /** @return null|int */
        private function get_pending_tp_ratings()
        {
        }
        /** @return null|int */
        private function get_tp_feedback_id()
        {
        }
        /** @return null|int */
        private function get_reviewer_id()
        {
        }
        /** @return null|int */
        private function get_post_id()
        {
        }
        /** @return array */
        public function get_posts_args()
        {
        }
        /** @return WPML_TF_Feedback_Collection */
        public function get_new_collection()
        {
        }
    }
    /**
     * Class WPML_TF_TP_Responses
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_TP_Responses
    {
        const FEEDBACK_FORWARD_MANUAL = 'manual';
        const FEEDBACK_FORWARD_EMAIL = 'email';
        const FEEDBACK_FORWARD_API = 'api';
        const FEEDBACK_TP_URL_ENDPOINT = '/feedbacks/{feedback_id}/external';
        /**
         * @var string|int $tp_rating_id
         *
         * - empty string for rating never sent (or problems occurred during TP transmission)
         * - 0 for local jobs (which does not need to be sent)
         * - positive integer for ratings already sent
         *
         * This will allow to have a shorter DB query to select feedback to be sent
         */
        private $rating_id = '';
        /** @var null|int $feedback_id */
        private $feedback_id;
        /** @var null|string $feedback_forward_method */
        private $feedback_forward_method;
        public function __construct(array $args = array())
        {
        }
        /** @param string|int $rating_id */
        public function set_rating_id($rating_id)
        {
        }
        /** @return string|int */
        public function get_rating_id()
        {
        }
        /** @param int $feedback_id */
        public function set_feedback_id($feedback_id)
        {
        }
        /** @return null|int */
        public function get_feedback_id()
        {
        }
        /** @param string $method */
        public function set_feedback_forward_method($method)
        {
        }
        /** @return null|string */
        public function get_feedback_forward_method()
        {
        }
        /** @return bool */
        public function is_manual_feedback()
        {
        }
        /** @return bool */
        public function is_email_feedback()
        {
        }
        /** @return bool */
        public function is_api_feedback()
        {
        }
        /** @return null|string */
        public function get_feedback_tp_url()
        {
        }
        /** @return array */
        public function get_strings()
        {
        }
    }
    /**
     * Class WPML_TF_Feedback_Factory
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Feedback_Factory
    {
        /**
         * @param array $feedback_data
         *
         * @return WPML_TF_Feedback
         */
        public function create(array $feedback_data)
        {
        }
    }
    /**
     * Class WPML_TF_Feedback_Status
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Feedback_Status
    {
        /** @var string $status */
        private $status = 'pending';
        /**
         * WPML_TF_Feedback_Status constructor.
         *
         * @param string $status
         */
        public function __construct($status = \null)
        {
        }
        /** @param string $status*/
        public function set_value($status)
        {
        }
        /** @return string */
        public function get_value()
        {
        }
        /** @return null|string */
        public function get_display_text()
        {
        }
        /** @return bool */
        private function is_admin_user()
        {
        }
        /**
         * This is used by the blue button on the feedback list
         *
         * @return array|null
         */
        public function get_next_status()
        {
        }
        /** @return bool */
        public function is_pending()
        {
        }
    }
    /**
     * Class WPML_TF_Feedback_Post_Convert
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Feedback_Post_Convert extends \WPML_TF_Data_Object_Post_Convert
    {
        const POST_TYPE = 'wpml_tf_feedback';
        /**
         * @return array
         */
        public function get_post_fields()
        {
        }
        /**
         * @return array
         */
        public function get_meta_fields()
        {
        }
        /**
         * @param IWPML_TF_Data_Object $feedback
         *
         * @return array
         * @throws Exception
         */
        public function to_post_data(\IWPML_TF_Data_Object $feedback)
        {
        }
        /**
         * @param array $post_data
         *
         * @return WPML_TF_Feedback
         */
        public function to_object(array $post_data)
        {
        }
    }
    /**
     * Class WPML_TF_Feedback
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Feedback implements \IWPML_TF_Data_Object
    {
        /** @var int */
        private $id;
        /** @var  string */
        private $date_created;
        /** @var WPML_TF_Feedback_Status */
        private $status;
        /** @var  int */
        private $rating;
        /** @var  string */
        private $content;
        /** @var  int */
        private $document_id;
        /** @var  string */
        private $document_type;
        /** @var  string */
        private $language_from;
        /** @var  string */
        private $language_to;
        /** @var  int|null */
        private $job_id;
        /** @var WPML_TF_Feedback_Reviewer */
        private $reviewer;
        /** @var WPML_TF_Collection $messages */
        private $messages;
        /** @var WPML_TF_Backend_Document_Information $document_information */
        private $document_information;
        /** @var WPML_TF_TP_Responses $tp_rating_responses */
        private $tp_responses;
        /**
         * WPML_Translation_Feedback constructor.
         *
         * @param array                                $data
         * @param WPML_TF_Backend_Document_Information $document_information
         */
        public function __construct($data = array(), \WPML_TF_Backend_Document_Information $document_information = \null)
        {
        }
        /**
         * @return int|mixed|null
         */
        public function get_id()
        {
        }
        /**
         * @return int|null
         */
        public function get_feedback_id()
        {
        }
        /**
         * @param \WPML_TF_Message $message
         */
        public function add_message(\WPML_TF_Message $message)
        {
        }
        /**
         * @return mixed|null|string
         */
        public function get_date_created()
        {
        }
        /**
         * @return string
         */
        public function get_status()
        {
        }
        /**
         * @param string $status
         */
        public function set_status($status)
        {
        }
        /**
         * @return int
         */
        public function get_rating()
        {
        }
        /**
         * @param int $rating
         */
        public function set_rating($rating)
        {
        }
        /**
         * @return mixed|null|string
         */
        public function get_content()
        {
        }
        /**
         * @param string $content
         */
        public function set_content($content)
        {
        }
        /**
         * @return int|null
         */
        public function get_document_id()
        {
        }
        /**
         * @return null|string
         */
        public function get_document_type()
        {
        }
        /**
         * @return null|string
         */
        public function get_language_from()
        {
        }
        /**
         * @return null|string
         */
        public function get_language_to()
        {
        }
        /**
         * @return int|null
         */
        public function get_job_id()
        {
        }
        /**
         * @return WPML_TF_Feedback_Reviewer
         */
        public function get_reviewer()
        {
        }
        /**
         * @param int $reviewer_id
         */
        public function set_reviewer($reviewer_id)
        {
        }
        /**
         * @return WPML_TF_Collection
         */
        public function get_messages()
        {
        }
        /** @param WPML_TF_TP_Responses $tp_responses */
        public function set_tp_responses(\WPML_TF_TP_Responses $tp_responses)
        {
        }
        /** @return WPML_TF_TP_Responses */
        public function get_tp_responses()
        {
        }
        /**
         * @return string|null
         */
        public function get_text_status()
        {
        }
        /** @return array */
        public function get_next_status()
        {
        }
        /** @return bool */
        public function is_pending()
        {
        }
        /**
         * @return string
         */
        public function get_document_flag_url()
        {
        }
        /**
         * @return string
         */
        public function get_source_document_flag_url()
        {
        }
        /**
         * @return bool
         */
        public function is_local_translation()
        {
        }
        /**
         * @return string
         */
        public function get_translator_name()
        {
        }
        /**
         * @return array
         */
        public function get_available_translators()
        {
        }
        /**
         * @param WPML_TF_Backend_Document_Information $document_information
         */
        public function set_document_information(\WPML_TF_Backend_Document_Information $document_information)
        {
        }
        /** @return WPML_TF_Backend_Document_Information */
        public function get_document_information()
        {
        }
    }
    /**
     * @author OnTheGoSystems
     */
    class WPML_TF_Feedback_Reviewer
    {
        /** @var int $id WP_User ID */
        private $id;
        /**
         * WPML_TF_Feedback_Reviewer constructor.
         *
         * @param int $id
         */
        public function __construct($id)
        {
        }
        /**
         * @return int|null
         */
        public function get_id()
        {
        }
        /**
         * @return string
         */
        public function get_reviewer_display_name()
        {
        }
    }
    /**
     * Class WPML_TF_Feedback_Collection
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Feedback_Collection extends \WPML_TF_Collection
    {
        private $order;
        private $filter_value;
        /**
         * @param int $offset
         * @param int $length
         */
        public function reduce_collection($offset, $length)
        {
        }
        /**
         * @param string $property
         * @param string $order
         */
        public function sort_collection($property, $order)
        {
        }
        /**
         * @param WPML_TF_Feedback $a
         * @param WPML_TF_Feedback $b
         *
         * @return mixed
         */
        private function compare_by_pending(\WPML_TF_Feedback $a, \WPML_TF_Feedback $b)
        {
        }
        /**
         * @param WPML_TF_Feedback $a
         * @param WPML_TF_Feedback $b
         *
         * @return mixed
         */
        private function compare_by_feedback(\WPML_TF_Feedback $a, \WPML_TF_Feedback $b)
        {
        }
        /**
         * @param WPML_TF_Feedback $a
         * @param WPML_TF_Feedback $b
         *
         * @return mixed
         */
        private function compare_by_rating(\WPML_TF_Feedback $a, \WPML_TF_Feedback $b)
        {
        }
        /**
         * @param WPML_TF_Feedback $a
         * @param WPML_TF_Feedback $b
         *
         * @return mixed
         */
        private function compare_by_status(\WPML_TF_Feedback $a, \WPML_TF_Feedback $b)
        {
        }
        /**
         * @param WPML_TF_Feedback $a
         * @param WPML_TF_Feedback $b
         *
         * @return mixed
         */
        private function compare_by_document_title(\WPML_TF_Feedback $a, \WPML_TF_Feedback $b)
        {
        }
        /**
         * @param WPML_TF_Feedback $a
         * @param WPML_TF_Feedback $b
         *
         * @return mixed
         */
        private function compare_by_date(\WPML_TF_Feedback $a, \WPML_TF_Feedback $b)
        {
        }
        /**
         * @param WPML_TF_Feedback $a
         * @param WPML_TF_Feedback $b
         *
         * @return int
         */
        private function compare_by_id(\WPML_TF_Feedback $a, \WPML_TF_Feedback $b)
        {
        }
        /**
         * @param WPML_TF_Message_Collection $message_collection
         */
        public function link_messages_to_feedback(\WPML_TF_Message_Collection $message_collection)
        {
        }
        /**
         * @param string $property
         * @param string $value
         */
        public function filter_by($property, $value)
        {
        }
        /**
         * @param WPML_TF_Feedback $feedback
         *
         * @return bool
         */
        private function filter_by_status(\WPML_TF_Feedback $feedback)
        {
        }
        /**
         * @param WPML_TF_Feedback $feedback
         *
         * @return bool
         */
        private function filter_by_language(\WPML_TF_Feedback $feedback)
        {
        }
        /**
         * @param WPML_TF_Feedback $feedback
         *
         * @return bool
         */
        private function filter_by_post_id(\WPML_TF_Feedback $feedback)
        {
        }
        public function remove_trashed()
        {
        }
    }
    /**
     * Class WPML_TF_Feedback_Query
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Feedback_Query
    {
        /** @var WPML_TF_Data_Object_Storage $feedback_storage */
        private $feedback_storage;
        /** @var WPML_TF_Data_Object_Storage $message_storage */
        private $message_storage;
        /** @var WPML_TF_Collection_Filter_Factory $collection_filter_factory */
        private $collection_filter_factory;
        /** @var  WPML_TF_Feedback_Collection $unfiltered_feedback_collection */
        private $unfiltered_feedback_collection;
        /** @var int $unfiltered_items_count */
        private $unfiltered_items_count;
        /** @var int $trashed_items_count */
        private $trashed_items_count;
        /** @var int $total_items_count */
        private $total_items_count;
        /** @var int $filtered_items_count */
        private $filtered_items_count;
        /** @var bool $is_in_trash */
        private $is_in_trash = \false;
        /**
         * WPML_TF_Feedback_Collection_Factory constructor.
         *
         * @param WPML_TF_Data_Object_Storage         $feedback_storage
         * @param WPML_TF_Data_Object_Storage         $message_storage
         * @param WPML_TF_Collection_Filter_Factory   $collection_filter_factory
         */
        public function __construct(\WPML_TF_Data_Object_Storage $feedback_storage, \WPML_TF_Data_Object_Storage $message_storage, \WPML_TF_Collection_Filter_Factory $collection_filter_factory)
        {
        }
        /**
         * @return WPML_TF_Feedback_Collection
         */
        public function get_unfiltered_collection()
        {
        }
        /**
         * @param array $args
         *
         * @return WPML_TF_Feedback_Collection
         */
        public function get(array $args)
        {
        }
        /**
         * @param WPML_TF_Feedback_Collection $feedback_collection
         * @param array                       $args
         *
         * @return WPML_TF_Feedback_Collection
         */
        public function trash_filter_collection(\WPML_TF_Feedback_Collection $feedback_collection, array $args)
        {
        }
        /**
         * @param WPML_TF_Feedback_Collection $feedback_collection
         * @param array                       $args
         *
         * @return WPML_TF_Feedback_Collection
         */
        private function filter_collection(\WPML_TF_Feedback_Collection $feedback_collection, array $args)
        {
        }
        /**
         * @param WPML_TF_Feedback_Collection $feedback_collection
         * @param array                       $args
         *
         * @return WPML_TF_Feedback_Collection
         */
        private function sort_collection(\WPML_TF_Feedback_Collection $feedback_collection, array $args)
        {
        }
        /**
         * @param WPML_TF_Feedback_Collection $feedback_collection
         * @param array                       $args
         *
         * @return WPML_TF_Feedback_Collection
         */
        private function apply_pagination(\WPML_TF_Feedback_Collection $feedback_collection, array $args)
        {
        }
        /**
         * @return int
         */
        public function get_total_items_count()
        {
        }
        /** @return int */
        public function get_total_trashed_items_count()
        {
        }
        /** @return int */
        public function get_filtered_items_count()
        {
        }
        /** @return bool */
        public function is_in_trash()
        {
        }
        /**
         * @param int  $feedback_id
         * @param bool $with_messages
         *
         * @return null|\IWPML_TF_Data_Object
         */
        public function get_one($feedback_id, $with_messages = \true)
        {
        }
    }
    /**
     * Class WPML_TF_Data_Object_Storage
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Data_Object_Storage
    {
        const META_PREFIX = 'wpml_tf_';
        /** @var WPML_TF_Data_Object_Post_Convert  */
        private $post_convert;
        /**
         * WPML_TF_Data_Object_Storage constructor.
         *
         * @param WPML_TF_Data_Object_Post_Convert $post_convert
         */
        public function __construct(\WPML_TF_Data_Object_Post_Convert $post_convert)
        {
        }
        /**
         * @param int $id
         *
         * @return IWPML_TF_Data_Object|null
         */
        public function get($id)
        {
        }
        /**
         * @param IWPML_TF_Data_Object $data_object
         *
         * @return int|WP_Error
         */
        public function persist(\IWPML_TF_Data_Object $data_object)
        {
        }
        /**
         * @param int  $id
         * @param bool $force_delete
         */
        public function delete($id, $force_delete = \false)
        {
        }
        /** @param int $id */
        public function untrash($id)
        {
        }
        /**
         * @param IWPML_TF_Collection_Filter $collection_filter
         *
         * @return WPML_TF_Collection
         */
        public function get_collection(\IWPML_TF_Collection_Filter $collection_filter)
        {
        }
        /**
         * For more than 2 meta queries with "OR" relation, the standard WP query has a very bad performance.
         * It's much more efficient to make one query for each meta query.
         *
         * @param array $posts_args
         *
         * @return array
         */
        private function get_posts_from_split_queries(array $posts_args)
        {
        }
    }
    class WPML_TF_Collection_Filter_Factory
    {
        /**
         * @param string $type
         * @param array  $args
         *
         * @return null|IWPML_TF_Collection_Filter
         */
        public function create($type, array $args = array())
        {
        }
    }
    /**
     * Class WPML_TF_Feedback_Edit
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Feedback_Edit
    {
        /** @var WPML_TF_Feedback_Query */
        private $feedback_query;
        /** @var WPML_TF_Data_Object_Storage $feedback_storage */
        private $feedback_storage;
        /** @var WPML_TF_Data_Object_Storage $message_storage */
        private $message_storage;
        /** @var null|WPML_TP_Client_Factory $tp_client_factory */
        private $tp_client_factory;
        /** @var null|WPML_TP_Client $tp_client */
        private $tp_client;
        /**
         * WPML_TF_Feedback_Edit constructor.
         *
         * @param \WPML_TF_Feedback_Query      $feedback_query
         * @param \WPML_TF_Data_Object_Storage $feedback_storage
         * @param \WPML_TF_Data_Object_Storage $message_storage
         * @param \WPML_TP_Client_Factory|null $tp_client_factory
         */
        public function __construct(\WPML_TF_Feedback_Query $feedback_query, \WPML_TF_Data_Object_Storage $feedback_storage, \WPML_TF_Data_Object_Storage $message_storage, \WPML_TP_Client_Factory $tp_client_factory = \null)
        {
        }
        /**
         * @param int   $feedback_id
         * @param array $args
         *
         * @return null|WPML_TF_Feedback
         * @throws \WPML_TF_Feedback_Update_Exception
         */
        public function update($feedback_id, array $args)
        {
        }
        /**
         * @param WPML_TF_Feedback $feedback
         * @param array            $args
         */
        private function update_feedback_content(\WPML_TF_Feedback $feedback, array $args)
        {
        }
        /**
         * @param WPML_TF_Feedback $feedback
         * @param array            $args
         */
        private function add_message_to_feedback(\WPML_TF_Feedback $feedback, array $args)
        {
        }
        /**
         * @param WPML_TF_Feedback $feedback
         * @param array            $args
         */
        private function assign_feedback_to_reviewer(\WPML_TF_Feedback $feedback, array $args)
        {
        }
        /**
         * @param WPML_TF_Feedback $feedback
         * @param array            $args
         *
         * @throws \WPML_TF_Feedback_Update_Exception
         */
        private function update_feedback_status(\WPML_TF_Feedback $feedback, array $args)
        {
        }
        /**
         * @param int $feedback_id
         *
         * @return bool
         */
        public function delete($feedback_id)
        {
        }
        /** @return bool */
        private function is_admin_user()
        {
        }
        /** @return array */
        private function get_feedback_statuses()
        {
        }
        /**
         * @param WPML_TF_Feedback $feedback
         *
         * @throws WPML_TF_Feedback_Update_Exception
         */
        private function send_feedback_to_tp(\WPML_TF_Feedback $feedback)
        {
        }
        /**
         * @param WPML_TF_Feedback $feedback
         *
         * @throws WPML_TF_Feedback_Update_Exception
         */
        private function update_feedback_status_from_tp(\WPML_TF_Feedback $feedback)
        {
        }
        /**
         * @param string $endpoint
         *
         * @return string
         * @throws \WPML_TF_Feedback_Update_Exception
         */
        private function get_communication_error_message($endpoint)
        {
        }
        /**
         * @return null|WPML_TP_Client
         *
         * @throws WPML_TF_Feedback_Update_Exception
         */
        private function get_tp_client()
        {
        }
    }
}
namespace WPML\FullSiteEditing {
    class BlockTemplates implements \IWPML_Backend_Action, \IWPML_Frontend_Action, \IWPML_REST_Action
    {
        public function add_hooks()
        {
        }
        /**
         * @param array  $package
         * @param object $post
         *
         * @return array
         */
        public static function doNotTranslateTitle(array $package, $post)
        {
        }
        /**
         * @param array  $postData
         * @param object $job
         *
         * @return array
         */
        public static function copyOriginalTitleToTranslation($postData, $job)
        {
        }
        /**
         * @param \WP_Post $post Inserted or updated post object.
         */
        public static function syncPostName(\WP_Post $post)
        {
        }
    }
}
namespace {
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ICL20_Migration_Loader
    {
        /** @var WPML_TM_ICL20_Migration_Factory */
        private $factory;
        /** @var  WPML_TM_ICL20_Migration_Progress */
        private $progress;
        /** @var  WPML_TM_ICL20_Migration_Status */
        private $status;
        /** @var WPML_WP_API */
        private $wp_api;
        /**
         * WPML_TM_ICL20_Migration_Loader constructor.
         *
         * @param WPML_WP_API                     $wp_api
         * @param WPML_TM_ICL20_Migration_Factory $factory
         */
        public function __construct(\WPML_WP_API $wp_api, \WPML_TM_ICL20_Migration_Factory $factory)
        {
        }
        /**
         * This is the main method which deals with the whole logic for handling the migration
         */
        public function run()
        {
        }
        /** @return bool */
        private function is_back_end()
        {
        }
        /** @return bool */
        private function requires_migration()
        {
        }
        /**
         * If the website is set to use a preferred translation service which is the legacy ICL, it will replace it with
         * ICL2.0
         */
        private function maybe_fix_preferred_service()
        {
        }
    }
    class WPML_TM_ICL20_Migrate_Remote
    {
        private $container;
        private $progress;
        /**
         * WPML_TM_ICL20 constructor.
         *
         * @param WPML_TM_ICL20_Migration_Progress  $progress
         * @param WPML_TM_ICL20_Migration_Container $container
         */
        public function __construct(\WPML_TM_ICL20_Migration_Progress $progress, \WPML_TM_ICL20_Migration_Container $container)
        {
        }
        /**
         * @param string $ts_accesskey
         * @param int    $ts_id
         *
         * @return bool
         *
         * Note: `ts_id` (aka `website_id`) = `website_id`
         *
         * @link https://onthegosystems.myjetbrains.com/youtrack/issue/icldev-2322
         */
        public function acknowledge_icl($ts_id, $ts_accesskey)
        {
        }
        /**
         * @param string $ts_accesskey
         * @param int    $ts_id
         *
         * @return string|null
         *
         * Note: `ts_id` (aka `website_id`) = `website_id`
         *
         * @link https://onthegosystems.myjetbrains.com/youtrack/issue/icldev-2285
         */
        public function get_token($ts_id, $ts_accesskey)
        {
        }
        /**
         * @param int    $project_id
         * @param string $access_key
         * @param string $new_token
         *
         * @return bool|null
         * @link https://onthegosystems.myjetbrains.com/youtrack/issue/tsapi-887
         *
         */
        public function migrate_project($project_id, $access_key, $new_token)
        {
        }
        /**
         * @param int    $project_id
         * @param string $access_key
         *
         * @return bool
         * @link https://onthegosystems.myjetbrains.com/youtrack/issue/tsapi-887
         *
         */
        public function migrate_project_rollback($project_id, $access_key)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ICL20_Migrate
    {
        private $local_migration;
        private $progress;
        private $remote_migration;
        private $status;
        /** @var WPML_TP_Services  */
        private $tp_services;
        public function __construct(\WPML_TM_ICL20_Migration_Progress $progress, \WPML_TM_ICL20_Migration_Status $status, \WPML_TM_ICL20_Migrate_Remote $remote_migration, \WPML_TM_ICL20_Migrate_Local $local_migration, \WPML_TP_Services $tp_services)
        {
        }
        public function migrate_project_rollback()
        {
        }
        public function run()
        {
        }
        /**
         * @param $project
         *
         * @return string
         */
        private function get_token($project)
        {
        }
        /**
         * @param $project
         * @param $token
         *
         * @return bool
         */
        private function migrate_project($project, $token)
        {
        }
        /**
         * @param $project
         *
         * @return bool
         */
        private function acknowledge_icl($project)
        {
        }
        /**
         * @param $token
         *
         * @return bool
         */
        private function migrate_local_service($token)
        {
        }
        /**
         * @return bool
         */
        private function migrate_local_project()
        {
        }
        /**
         * @param string $table
         * @param string $step
         *
         * @return bool
         */
        private function migrate_local_jobs($table, $step)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ICL20_Migration_Status
    {
        const ICL_20_TS_ID = 67;
        const ICL_LEGACY_TS_ID = 4;
        const ICL_LEGACY_TS_SUID = '6ab1000a33e2cc9ecbcf6abc57254be8';
        const ICL_20_TS_SUID = 'dd17d48516ca4bce0b83043583fabd2e';
        private $installer_settings = array();
        private $service;
        public function __construct($service)
        {
        }
        public function has_active_legacy_icl()
        {
        }
        public function has_active_icl_20()
        {
        }
        public function has_active_service()
        {
        }
        public function get_ICL_LEGACY_TS_ID()
        {
        }
        public function get_ICL_20_TS_ID()
        {
        }
        public function get_ICL_LEGACY_TS_SUID()
        {
        }
        public function get_ICL_20_TS_SUID()
        {
        }
        public function is_preferred_service_legacy_ICL()
        {
        }
        public function set_preferred_service_to_ICL20()
        {
        }
        private function has_preferred_service()
        {
        }
        private function get_preferred_service()
        {
        }
        /**
         * @return array
         */
        private function get_installer_settings()
        {
        }
        private function update_installer_settings()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ICL20_Migration_Factory
    {
        /**
         * @var WPML_TM_ICL20_Migration_Notices
         */
        private $notices;
        /**
         * @var WPML_TM_ICL20_Migration_Progress
         */
        private $progress;
        /**
         * @var WPML_TM_ICL20_Migration_Status
         */
        private $status;
        /**
         * @var WPML_TP_Services
         */
        private $tp_services;
        /**
         * @var WP_Http
         */
        private $wp_http;
        /**
         * @return WPML_TM_ICL20_Migration_AJAX
         */
        public function create_ajax()
        {
        }
        /**
         * @return WPML_TM_ICL20_Migration_Locks
         */
        public function create_locks()
        {
        }
        /**
         * @return WPML_TM_ICL20_Migration_Progress
         */
        public function create_progress()
        {
        }
        /**
         * @return WPML_TM_ICL20_Migrate
         */
        public function create_migration()
        {
        }
        /**
         * @return WPML_TM_ICL20_Migration_Status
         */
        public function create_status()
        {
        }
        /**
         * @return WPML_TM_ICL20_Migrate_Remote
         */
        private function get_remote_migration()
        {
        }
        /**
         * @return WPML_TM_ICL20_Migrate_Local
         */
        private function get_local_migration()
        {
        }
        /**
         * @return WPML_TP_Services
         */
        private function get_tp_services()
        {
        }
        /**
         * @return WP_Http
         */
        private function get_wp_http()
        {
        }
        /**
         * @return SitePress
         */
        private function get_sitepress()
        {
        }
        /**
         * @return WPML_TM_ICL20_Migration_Notices
         */
        public function create_notices()
        {
        }
        /**
         * @return WPML_TM_ICL20_Migration_Support
         */
        public function create_ui_support()
        {
        }
        /**
         * @return bool
         */
        public function can_rollback()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPMLTranslationProxyApiException extends \Exception
    {
        public function __construct($message, $code = 0)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ICL20MigrationException extends \WPMLTranslationProxyApiException
    {
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ICL20_Token
    {
        private $end_point;
        private $http;
        /**
         * WPML_TM_ICL20 constructor.
         *
         * @param WP_Http $http
         * @param string  $end_point
         */
        public function __construct(\WP_Http $http, $end_point)
        {
        }
        /**
         * @param string $ts_accesskey
         * @param int    $ts_id
         *
         * @return string|null
         * @throws \WPML_TM_ICL20MigrationException
         *
         * Note: `ts_id` (aka `website_id`) = `website_id`
         *
         * @link https://onthegosystems.myjetbrains.com/youtrack/issue/icldev-2285
         */
        public function get_token($ts_id, $ts_accesskey)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ICL20_Migration_Container
    {
        private $acknowledge;
        private $project;
        private $token;
        public function __construct(\WPML_TM_ICL20_Token $token, \WPML_TM_ICL20_Project $project, \WPML_TM_ICL20_Acknowledge $ack)
        {
        }
        /**
         * @return WPML_TM_ICL20_Acknowledge
         */
        public function get_acknowledge()
        {
        }
        /**
         * @return WPML_TM_ICL20_Project
         */
        public function get_project()
        {
        }
        /**
         * @return WPML_TM_ICL20_Token
         */
        public function get_token()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ICL20_Acknowledge
    {
        private $end_point;
        private $http;
        /**
         * WPML_TM_ICL20 constructor.
         *
         * @param WP_Http $http
         * @param string  $end_point
         */
        public function __construct(\WP_Http $http, $end_point)
        {
        }
        /**
         * @param string $ts_accesskey
         * @param int    $ts_id
         *
         * @return bool
         * @throws \WPML_TM_ICL20MigrationException
         *
         * Note: `ts_id` (aka `website_id`) = `website_id`
         *
         * @link https://onthegosystems.myjetbrains.com/youtrack/issue/icldev-2322
         */
        public function acknowledge_icl($ts_id, $ts_accesskey)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ICL20_Project
    {
        private $end_point;
        private $http;
        /**
         * WPML_TM_ICL20 constructor.
         *
         * @param WP_Http $http
         * @param string  $end_point
         */
        public function __construct(\WP_Http $http, $end_point)
        {
        }
        /**
         * @param int    $project_id
         * @param string $access_key
         * @param string $new_token
         *
         * @return bool|null
         * @throws \WPML_TM_ICL20MigrationException
         * @link https://onthegosystems.myjetbrains.com/youtrack/issue/tsapi-887
         *
         */
        public function migrate($project_id, $access_key, $new_token)
        {
        }
        /**
         * @param int    $project_id
         * @param string $access_key
         *
         * @return bool
         * @throws WPML_TM_ICL20MigrationException
         */
        public function rollback_migration($project_id, $access_key)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ICL20_Migration_Support
    {
        const PREFIX = 'icl20-migration-reset-';
        const TIMESTAMP_FORMAT = 'Y-m-d H:i:s';
        private $can_rollback;
        private $progress;
        private $template_service;
        function __construct(\IWPML_Template_Service $template_service, \WPML_TM_ICL20_Migration_Progress $progress, $can_rollback = \false)
        {
        }
        function add_hooks()
        {
        }
        public function parse_request()
        {
        }
        public function show()
        {
        }
        private function get_model()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ICL20_Migration_Locks
    {
        private $progress;
        public function __construct(\WPML_TM_ICL20_Migration_Progress $progress)
        {
        }
        public function add_hooks()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ICL20_Migration_Notices
    {
        const NOTICE_GROUP = 'icl-20-migration';
        const NOTICE_MIGRATION_REQUIRED_ID = 'icl-20-migration';
        const NOTICE_MIGRATION_COMPLETED_ID = 'icl-20-migration-completed';
        /**
         * @var WPML_Notices
         */
        private $notices;
        /**
         * @var WPML_TM_ICL20_Migration_Progress
         */
        private $progress;
        /**
         * WPML_TM_ICL20_Migration_Notices constructor.
         *
         * @param WPML_TM_ICL20_Migration_Progress $progress
         * @param WPML_Notices                     $notices
         */
        public function __construct(\WPML_TM_ICL20_Migration_Progress $progress, \WPML_Notices $notices)
        {
        }
        /**
         * @param bool $requires_migration
         */
        public function run($requires_migration = \false)
        {
        }
        /**
         * Clear all notices created before and during the migration
         */
        public function clear_migration_required()
        {
        }
        /**
         * Builds the notice shown if the migration fails
         */
        private function build_migration_failed()
        {
        }
        /**
         * Builds the notice shown when the migration is required
         */
        private function build_migration_required()
        {
        }
        /**
         * @param       $text
         * @param array $actions
         */
        private function create_notice($text, array $actions = array())
        {
        }
        /**
         * Builds the notice shown when the migration completes
         */
        private function build_migration_completed()
        {
        }
        /**
         * Required by `\WPML_TM_ICL20_Migration_Notices::build_migration_required`
         */
        public function admin_enqueue_scripts()
        {
        }
        /**
         * @return string
         */
        private function get_user_confirmation_input()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ICL20_Migrate_Local
    {
        const JOBS_TYPES_DOCUMENTS = 'icl_translation_status';
        const JOBS_TYPES_STRINGS = 'icl_string_translations';
        private $progress;
        private $sitepress;
        private $status;
        /** @var WPML_TP_Services */
        private $tp_services;
        /**
         * WPML_TM_ICL20 constructor.
         *
         * @param WPML_TP_Services                 $tp_services
         * @param WPML_TM_ICL20_Migration_Status   $status
         * @param WPML_TM_ICL20_Migration_Progress $progress
         * @param SitePress                        $sitepress
         *
         * @internal param SitePress $sitepress
         */
        public function __construct(\WPML_TP_Services $tp_services, \WPML_TM_ICL20_Migration_Status $status, \WPML_TM_ICL20_Migration_Progress $progress, \SitePress $sitepress)
        {
        }
        public function migrate_jobs($table)
        {
        }
        /**
         * @param $table
         *
         * @return false|int
         */
        private function update_table($table)
        {
        }
        public function migrate_project()
        {
        }
        private function update_project_index($old_service_index, $new_service_index)
        {
        }
        public function migrate_service($new_token)
        {
        }
        public function rollback_service()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_AJAX
    {
        /**
         * @param string $action
         *
         * @return bool
         */
        protected function is_valid_request($action = '')
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ICL20_Migration_AJAX extends \WPML_TM_AJAX
    {
        /** @var WPML_TM_ICL20_Migration_Progress */
        private $progress;
        /**
         * WPML_TM_ICL20_Migration_AJAX constructor.
         *
         * @param WPML_TM_ICL20_Migration_Progress $progress
         */
        public function __construct(\WPML_TM_ICL20_Migration_Progress $progress)
        {
        }
        /**
         * AJAX callback used to set the user confirmation for starting the migration
         */
        public function user_confirmation()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ICL20_Migration_Progress
    {
        const MAX_AUTOMATIC_ATTEMPTS = 5;
        const OPTION_KEY_USER_CONFIRMED = '_wpml_icl20_migration_user_confirmed';
        const OPTION_KEY_MIGRATION_ATTEMPTS = '_wpml_icl20_migration_attempts';
        const OPTION_KEY_MIGRATION_LAST_ATTEMPT = '_wpml_icl20_migration_last_attempt';
        const OPTION_KEY_MIGRATION_LAST_ERROR = '_wpml_icl20_migration_last_error';
        const OPTION_KEY_MIGRATION_LOCAL_PROJECT_INDEX = '_wpml_icl20_migration_local_project_index';
        const OPTION_KEY_MIGRATION_LOCKED = '_wpml_icl20_migration_locked';
        const OPTION_KEY_MIGRATION_REQUIRED = '_wpml_icl20_migration_required';
        const OPTION_KEY_MIGRATION_STEPS = '_wpml_icl20_migration_step_%s';
        const STEP_ICL_ACK = 'icl_ack';
        const STEP_MIGRATE_JOBS_DOCUMENTS = 'migrate_jobs_doc';
        const STEP_MIGRATE_JOBS_STRINGS = 'migrate_jobs_strings';
        const STEP_MIGRATE_LOCAL_PROJECT = 'migrate_local_project';
        const STEP_MIGRATE_LOCAL_SERVICE = 'migrate_local_service';
        const STEP_MIGRATE_REMOTE_PROJECT = 'migrate_remote_project';
        const STEP_TOKEN = 'token';
        const STEP_FAILED = 'failed';
        const STEP_DONE = 'done';
        const VALUE_YES = 'yes';
        const VALUE_NO = 'no';
        /**
         * @var array
         */
        private $steps;
        /**
         * WPML_TM_ICL20_Migration_Progress constructor.
         */
        public function __construct()
        {
        }
        /**
         * @param string $step
         *
         * @return string|null
         */
        public function get_completed_step($step)
        {
        }
        /**
         * @return int|null
         */
        public function get_last_attempt_timestamp()
        {
        }
        /**
         * @return string|null
         */
        public function get_last_migration_error()
        {
        }
        /**
         * @return string|null
         */
        public function get_project_to_migrate()
        {
        }
        /**
         * @return array
         */
        public function get_steps()
        {
        }
        /**
         * @param string $message
         */
        public function log_failed_attempt($message)
        {
        }
        /**
         * @param string $message
         */
        private function update_last_error($message)
        {
        }
        /**
         * @return bool
         */
        public function is_migration_incomplete()
        {
        }
        /**
         * @param string      $step
         * @param string|bool $value
         */
        public function set_completed_step($step, $value)
        {
        }
        /**
         * @return bool
         */
        public function has_migration_ever_started()
        {
        }
        /**
         * It will mark the migration as done
         */
        public function set_migration_done()
        {
        }
        /**
         * It will remove all the temporary options used to store the status of the migration
         */
        public function clear_temporary_options()
        {
        }
        /**
         * @return bool
         */
        public function is_migration_done()
        {
        }
        /**
         * @return bool
         */
        public function requires_migration()
        {
        }
        /**
         * Sets the migration as started so to know, in the next attempts, if the migration was partial or never started.
         */
        public function set_migration_started()
        {
        }
        /**
         * It will increases on every migration attempt
         */
        private function increase_attempts_count()
        {
        }
        /**
         * @return int
         */
        public function get_current_attempts_count()
        {
        }
        /**
         * @return bool
         */
        public function has_too_many_automatic_attempts()
        {
        }
        /**
         * Used when too many attempts are made
         */
        private function block_next_automatic_attempts()
        {
        }
        /**
         * @return bool
         */
        public function are_next_automatic_attempts_locked()
        {
        }
        /**
         * @param string $old_index
         */
        public function set_project_to_migrate($old_index)
        {
        }
        /**
         * @return bool
         */
        public function get_user_confirmed()
        {
        }
        /**
         * User as an opt-in action from the user before starting the migration
         */
        public function set_user_confirmed()
        {
        }
    }
    /**
     * Fetch the wpml config files for known plugins and themes
     *
     * @package wpml-core
     */
    class WPML_Config_Update
    {
        /** @var bool */
        private $has_errors;
        private $log;
        /** @var  SitePress $sitepress */
        protected $sitepress;
        /**
         * @var WP_Http $http
         */
        private $http;
        /**
         * @var WPML_Active_Plugin_Provider
         */
        private $active_plugin_provider;
        /**
         * WPML_Config_Update constructor.
         *
         * @param SitePress     $sitepress
         * @param WP_Http       $http
         * @param WPML_Log|null $log
         */
        public function __construct($sitepress, $http, \WPML_Log $log = \null)
        {
        }
        /**
         * @param WPML_Active_Plugin_Provider $active_plugin_provider
         */
        public function set_active_plugin_provider(\WPML_Active_Plugin_Provider $active_plugin_provider)
        {
        }
        /**
         * @return WPML_Active_Plugin_Provider
         */
        public function get_active_plugin_provider()
        {
        }
        public function run()
        {
        }
        private function is_valid_wpml_config_files_arr($wpml_config_files_arr)
        {
        }
        /**
         * @param array|WP_Error $response
         *
         * @return bool
         */
        private function is_a_valid_remote_response($response)
        {
        }
        private function is_http_error($response)
        {
        }
        /**
         * @param string|array|WP_Error $response
         * @param string                $request_type
         * @param null                  $component
         * @param array|stdClass|null   $extra_data
         */
        private function log_response($response, $request_type = 'unknown', $component = \null, $extra_data = \null)
        {
        }
        private function is_config_update_disabled()
        {
        }
    }
    /**
     * WPML_Term_Actions Class
     *
     * @package    wpml-core
     * @subpackage taxonomy-term-translation
     */
    class WPML_Term_Actions extends \WPML_Full_Translation_API
    {
        /** @var bool $delete_recursion_flag */
        private $delete_recursion_flag = \false;
        /**
         * Handle AJAX request to generate unique slug.
         */
        public function generate_unique_term_slug_ajax_handler()
        {
        }
        /**
         * @param int    $tt_id    Taxonomy Term ID of the saved Term
         * @param string $taxonomy Taxonomy of the saved Term
         */
        function save_term_actions($tt_id, $taxonomy)
        {
        }
        /**
         * @param int $term_id
         * @param int $tt_id
         */
        public function sync_term_meta($term_id, $tt_id)
        {
        }
        /**
         * @param int    $term_taxonomy_id term taxonomy id of the deleted term
         * @param string $taxonomy_name    taxonomy of the deleted term
         */
        function delete_term_actions($term_taxonomy_id, $taxonomy_name)
        {
        }
        /**
         * @param int    $trid
         * @param string $deleted_language_code
         */
        public function set_new_original_term($trid, $deleted_language_code)
        {
        }
        /**
         * This action is hooked to the 'deleted_term_relationships' hook.
         * It removes terms from translated posts as soon as they are removed from the original post.
         * It only fires, if the setting 'sync_post_taxonomies' is activated.
         *
         * @param int   $post_id      ID of the post the deleted terms were attached to
         * @param array $delete_terms Array of term taxonomy id's for those terms that were deleted from the post.
         */
        public function deleted_term_relationships($post_id, $delete_terms)
        {
        }
        /**
         * Copies taxonomy terms from original posts to their translation, if the translations of these terms exist
         * and the option 'sync_post_taxonomies' is set.
         *
         * @param int $object_id ID of the object, that terms have just been added to.
         */
        public function added_term_relationships($object_id)
        {
        }
        /**
         * @param array $corrections
         *
         * @uses \WPML_WP_API::wp_set_object_terms to add terms to posts, always appending terms
         */
        private function apply_added_term_changes($corrections)
        {
        }
        /**
         * Gets the language under which a term is to be saved from the HTTP request and falls back on existing data in
         * case the HTTP request does not contain the necessary data.
         * If no language can be determined for the term to be saved under the default language is used as a fallback.
         *
         * @param int    $tt_id Taxonomy Term ID of the saved term
         * @param string $post_action
         * @param string $taxonomy
         *
         * @return null|string
         */
        private function get_term_lang($tt_id, $post_action, $taxonomy)
        {
        }
        /**
         * If no language could be set from the WPML $_POST variables as well as from the HTTP Referrer, then this function
         * uses fallbacks to determine the language from the post the the term might be associated to.
         * A post language determined from $_POST['icl_post_language'] will be used as term language.
         * Also a check for whether the publishing of the term happens via quickpress is performed in which case the term
         * is always associated with the default language.
         * Next a check for the 'inline-save-tax' and the 'editedtag' action is performed. In case the check returns true
         * the language of the term is not changed from what is saved for it in the database.
         * If no term language can be determined from the above the $_POST['post_ID'] is checked as a last resort and in
         * case it contains a valid post_ID the posts language is associated with the term.
         *
         * @param string $post_action
         * @param int    $tt_id
         *
         * @return string|null Language code of the term
         */
        private function get_lang_from_post($post_action, $tt_id)
        {
        }
        /**
         * This function tries to determine the terms language from the HTTP Referer. This is used in case of ajax actions
         * that save the term.
         *
         * @param string $taxonomy
         * @param string $post_action
         *
         * @return null|string
         */
        public function get_term_lang_ajax($taxonomy, $post_action)
        {
        }
        private function get_saved_term_trid($tt_id, $post_action)
        {
        }
        /**
         * @param int    $term_taxonomy_id
         * @param string $taxonomy
         * @param array  $translations
         */
        private function delete_translations($term_taxonomy_id, $taxonomy, array $translations)
        {
        }
    }
}
namespace WPML\TaxonomyTermTranslation {
    class AutoSync implements \IWPML_Backend_Action, \IWPML_REST_Action, \IWPML_AJAX_Action
    {
        public function add_hooks()
        {
        }
        /**
         * @return \Closure (int, array, object) -> void
         */
        private static function syncTaxonomyHierarchy()
        {
        }
    }
}
namespace {
    class WPML_Sync_Term_Meta_Action
    {
        /** @var SitePress $sitepress */
        private $sitepress;
        /** @var int $term_taxonomy_id */
        private $term_taxonomy_id;
        /** @var bool $is_new_term */
        private $is_new_term;
        /**
         * WPML_Sync_Term_Meta_Action constructor.
         *
         * @param SitePress $sitepress
         * @param int       $term_taxonomy_id just saved term's term_taxonomy_id
         * @param bool      $is_new_term
         */
        public function __construct($sitepress, $term_taxonomy_id, $is_new_term = \false)
        {
        }
        /**
         * Copies to be synchronized term meta data to the translations of the term.
         */
        public function run()
        {
        }
        /**
         * @param int $term_taxonomy_id_to
         * @param int $term_taxonomy_id_from
         */
        private function copy_custom_fields($term_taxonomy_id_to, $term_taxonomy_id_from)
        {
        }
        private function sync_custom_field($term_id_from, $term_id_to, $meta_key)
        {
        }
        /**
         * @param int $meta_key_status
         * @param int $term_taxonomy_id_to
         *
         * @return bool
         */
        private function should_copy_once($meta_key_status, $term_taxonomy_id_to)
        {
        }
    }
    /**
     * Class WPML_Taxonomy_Translation_Help_Notice
     */
    class WPML_Taxonomy_Translation_Help_Notice
    {
        const NOTICE_GROUP = 'taxonomy-term-help-notices';
        /**
         * @var WPML_Notices
         */
        private $wpml_admin_notices;
        /**
         * @var WPML_Notice
         */
        private $notice = \false;
        /**
         * @var SitePress
         */
        private $sitepress;
        /**
         * WPML_Taxonomy_Translation_Help_Notice constructor.
         *
         * @param WPML_Notices $wpml_admin_notices
         * @param SitePress    $sitepress
         */
        public function __construct(\WPML_Notices $wpml_admin_notices, \SitePress $sitepress)
        {
        }
        public function __sleep()
        {
        }
        public function __wakeup()
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @return bool
         */
        public function should_display_help_notice()
        {
        }
        /**
         * Create and add notice.
         */
        public function add_help_notice()
        {
        }
        /**
         * @return bool|WP_Taxonomy
         */
        private function get_current_translatable_taxonomy()
        {
        }
        /**
         * @return WPML_Notice
         */
        private function create_and_set_term_translation_help_notice()
        {
        }
        private function add_term_help_notice_to_admin_notices()
        {
        }
        /**
         * @param \WP_Taxonomy $taxonomy
         *
         * @return string
         */
        private function build_tag_to_taxonomy_translation($taxonomy)
        {
        }
        private function taxonomy_term_screen()
        {
        }
        /**
         * @param WPML_Notice $notice
         */
        public function set_notice(\WPML_Notice $notice)
        {
        }
        /**
         * @return WPML_Notice
         */
        public function get_notice()
        {
        }
        /**
         * Enqueue JS callback script.
         */
        public function enqueue_scripts()
        {
        }
        /**
         * @param string $taxonomy
         *
         * @return bool
         */
        private function is_translatable_taxonomy($taxonomy)
        {
        }
    }
    class WPML_Update_Term_Count
    {
        const CACHE_GROUP = __CLASS__;
        /** @var  WPML_WP_API $wp_api */
        private $wp_api;
        /**
         * WPML_Update_Term_Count constructor.
         *
         * @param WPML_WP_API $wp_api
         */
        public function __construct($wp_api)
        {
        }
        /**
         * Triggers an update to the term count of all terms associated with the
         * input post_id
         *
         * @param int $post_id
         */
        public function update_for_post($post_id)
        {
        }
    }
    /**
     * @since      3.1.8.4
     *
     * Class WPML_Term_Language_Synchronization
     *
     * @package    wpml-core
     * @subpackage taxonomy-term-translation
     */
    class WPML_Term_Language_Synchronization extends \WPML_WPDB_And_SP_User
    {
        /** @var string $taxonomy */
        private $taxonomy;
        /** @var array $data */
        private $data;
        /** @var array $missing_terms */
        private $missing_terms = array();
        /** @var WPML_Terms_Translations $term_utils */
        private $term_utils;
        /**
         * @param SitePress               $sitepress
         * @param WPML_Terms_Translations $term_utils
         * @param string                  $taxonomy
         */
        public function __construct(&$sitepress, &$term_utils, $taxonomy)
        {
        }
        /**
         * Wrapper for the two database actions performed by this object.
         * First those terms are created that lack translations and then following that,
         * the assignment of posts and languages is corrected, taking advantage of the newly created terms
         * and resulting in a state of no conflicts in the form of a post language being different from
         * an assigned terms language, remaining.
         */
        public function set_translated()
        {
        }
        /**
         * Helper function for the installation process,
         * finds all terms missing an entry in icl_translations and then
         * assigns them the default language.
         */
        public function set_initial_term_language()
        {
        }
        /**
         * Performs an SQL query assigning all terms to their correct language equivalent if it exists.
         * This should only be run after the previous functionality in here has finished.
         * Afterwards the term counts are recalculated globally, since term assignments bypassing the WordPress Core,
         * will not trigger any sort of update on those.
         */
        private function reassign_terms()
        {
        }
        /**
         * @param object[] $sql_result holding the information retrieved in \self::set_affected_ids
         *
         * @return array The associative array to be returned by \self::set_affected_ids
         */
        private function format_data($sql_result)
        {
        }
        /**
         * Uses the API provided in \WPML_Terms_Translations to create missing term translations.
         * These arise when a term, previously having been untranslated, is set to be translated
         * and assigned to posts in more than one language.
         *
         * @param int $trid The trid value for which term translations are missing.
         * @param string $source_lang The source language of this trid.
         * @param array $langs The languages' codes for which term translations are missing.
         */
        private function prepare_missing_translations($trid, $source_lang, $langs)
        {
        }
        /**
         * Retrieves all term_ids, and if applicable, their language and assigned to posts,
         * in an associative array,
         * which are in the situation of not being assigned to any language or in which a term
         * is assigned to a post in a language different from its own.
         *
         * @return array
         */
        private function set_affected_ids()
        {
        }
        /**
         * Assigns language information to terms that are to be treated as originals at the time of
         * their taxonomy being set to translated instead of 'do nothing'.
         */
        private function prepare_missing_originals()
        {
        }
        /**
         * Uses the data retrieved from the database and saves information about,
         * in need of fixing terms to this object.
         */
        private function prepare_missing_terms_data()
        {
        }
    }
    class WPML_TM_Translation_Batch_Element
    {
        /** @var int */
        private $element_id;
        /** @var string */
        private $element_type;
        /** @var string */
        private $source_lang;
        /** @var array */
        private $target_langs;
        /** @var $media_to_translations */
        private $media_to_translations;
        /**
         * @param int $element_id
         * @param string $element_type
         * @param string $source_lang
         * @param array $target_languages
         * @param array $media_to_translations
         */
        public function __construct($element_id, $element_type, $source_lang, array $target_languages, array $media_to_translations = array())
        {
        }
        /**
         * @return int
         */
        public function get_element_id()
        {
        }
        /**
         * @return string
         */
        public function get_element_type()
        {
        }
        /**
         * @return string
         */
        public function get_source_lang()
        {
        }
        /**
         * @return string[]
         */
        public function get_target_langs()
        {
        }
        /**
         * @return mixed
         */
        public function get_media_to_translations()
        {
        }
    }
    class WPML_TM_Translation_Batch
    {
        /** @var WPML_TM_Translation_Batch_Element[] */
        private $elements;
        /** @var string */
        private $basket_name;
        /** @var array */
        private $translators;
        /** @var DateTime */
        private $deadline;
        /**
         * @param WPML_TM_Translation_Batch_Element[] $elements
         * @param string                              $basket_name
         * @param array                               $translators
         * @param DateTime                            $deadline
         *
         * @throws InvalidArgumentException
         */
        public function __construct(array $elements, $basket_name, array $translators, \DateTime $deadline = \null)
        {
        }
        /**
         * @return WPML_TM_Translation_Batch_Element[]
         */
        public function get_elements()
        {
        }
        public function add_element(\WPML_TM_Translation_Batch_Element $element)
        {
        }
        /**
         * @param string $type
         *
         * @return WPML_TM_Translation_Batch_Element[]
         */
        public function get_elements_by_type($type)
        {
        }
        /**
         * @return string
         */
        public function get_basket_name()
        {
        }
        /**
         * @return array
         */
        public function get_translators()
        {
        }
        public function get_translator($lang)
        {
        }
        /**
         * @return DateTime
         */
        public function get_deadline()
        {
        }
        /**
         * @return array
         */
        public function get_target_languages()
        {
        }
        /**
         * @return array
         */
        public function get_remote_target_languages()
        {
        }
        private function is_remote_target_language($lang)
        {
        }
        /**
         * @return array
         */
        public function get_batch_options()
        {
        }
    }
    class WPML_TM_Translation_Batch_Factory
    {
        /** @var  WPML_Translation_Basket $basket */
        private $basket;
        /**
         * @param WPML_Translation_Basket $basket
         */
        public function __construct(\WPML_Translation_Basket $basket)
        {
        }
        /**
         * @param array $batch_data
         *
         * @return WPML_TM_Translation_Batch
         */
        public function create(array $batch_data)
        {
        }
        private function get_elements(array $batch_data, array $translators_target_languages)
        {
        }
        /**
         * The expected format is "2017-09-28"
         *
         * @param string $date
         *
         * @return bool
         */
        private function validate_deadline($date)
        {
        }
    }
    class WPML_TM_Troubleshooting_Clear_TS extends \WPML_TM_AJAX_Factory_Obsolete
    {
        private $script_handle = 'wpml_clear_ts';
        /**
         * WPML_TM_Troubleshooting_Clear_TS constructor.
         *
         * @param WPML_WP_API $wpml_wp_api
         */
        public function __construct(&$wpml_wp_api)
        {
        }
        public function clear_ts_action()
        {
        }
        protected function clear_tp_default_suid()
        {
        }
        public function enqueue_resources($hook_suffix)
        {
        }
        public function register_resources()
        {
        }
        public function load_action()
        {
        }
        private function add_hooks()
        {
        }
        public function render_ui()
        {
        }
    }
}
namespace WPML\Utilities {
    class KeyedLock extends \WPML\Utilities\Lock
    {
        /** @var string $keyName */
        private $keyName;
        /**
         * Lock constructor.
         *
         * @param \wpdb  $wpdb
         * @param string $name
         */
        public function __construct(\wpdb $wpdb, $name)
        {
        }
        /**
         * @param string $key
         * @param int    $release_timeout
         *
         * @return string|false The key or false if could not acquire the lock
         */
        public function create($key = null, $release_timeout = null)
        {
        }
        public function release()
        {
        }
        private function extendTimeout()
        {
        }
    }
    class NullLock implements \WPML\Utilities\ILock
    {
        public function create($release_timeout = null)
        {
        }
        public function release()
        {
        }
    }
}
namespace {
    class WPML_WP_Cache_Item
    {
        /** @var string $key */
        private $key;
        /** @var WPML_WP_Cache $cache */
        private $cache;
        /**
         * WPML_WP_Cache_Item constructor.
         *
         * @param WPML_WP_Cache $cache
         * @param string|array  $key
         */
        public function __construct(\WPML_WP_Cache $cache, $key)
        {
        }
        /**
         * @return bool
         */
        public function exists()
        {
        }
        /**
         * @return mixed
         */
        public function get()
        {
        }
        /**
         * @param mixed $value
         */
        public function set($value)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Queried_Object_Factory
    {
        public function create()
        {
        }
        private function get_sitepress()
        {
        }
    }
}
namespace WPML\Utils {
    /**
     * Class DebugBackTrace
     *
     * @package WPML\Utils
     */
    class DebugBackTrace
    {
        /** @var array */
        private $debug_backtrace = [];
        /** @var int */
        private $limit;
        /** @var bool */
        private $provide_object;
        /** @var bool */
        private $ignore_args;
        /** @var string */
        private $debug_backtrace_function;
        /**
         * DebugBackTrace constructor.
         *
         * @param int  $limit
         * @param bool $provide_object
         * @param bool $ignore_args
         * @param null $debug_backtrace_function
         */
        public function __construct($limit = 0, $provide_object = false, $ignore_args = true, $debug_backtrace_function = null)
        {
        }
        /**
         * @param array $functions
         * @param bool  $refresh
         *
         * @return bool
         */
        public function are_functions_in_call_stack(array $functions, $refresh = true)
        {
        }
        /**
         * @param string $function_name
         * @param bool   $refresh
         *
         * @return bool
         */
        public function is_function_in_call_stack($function_name, $refresh = true)
        {
        }
        /**
         * @param string $function_name
         * @param bool   $refresh
         *
         * @return int
         */
        public function count_function_in_call_stack($function_name, $refresh = true)
        {
        }
        /**
         * @param string $class_name
         * @param string $function_name
         * @param bool   $refresh
         *
         * @return bool
         */
        public function is_class_function_in_call_stack($class_name, $function_name, $refresh = true)
        {
        }
        /**
         * @return array
         */
        public function get_backtrace()
        {
        }
        private function remove_frames_for_this_class()
        {
        }
        public function remove_last_frame()
        {
        }
    }
}
namespace {
    class WPML_WP_Query_API
    {
        private $wp_query;
        public function __construct(&$wp_query)
        {
        }
        public function get_first_post_type()
        {
        }
    }
    class WPML_Temporary_Switch_Admin_Language extends \WPML_SP_User
    {
        private $old_lang = \false;
        /**
         * @param SitePress $sitepress
         * @param string $target_lang
         */
        public function __construct(&$sitepress, $target_lang)
        {
        }
        public function __destruct()
        {
        }
        public function restore_lang()
        {
        }
    }
    /**
     * Class WPML_Transient
     *
     * Due to some conflicts between cached environments (e.g. using W3TC) and the normal
     * WP Transients API, we've added this class which should behaves almost like the normal
     * transients API. Except for the fact that it is stored as normal options, so WP won't
     * recognize/treat it as a transient.
     */
    class WPML_Transient
    {
        const WPML_TRANSIENT_PREFIX = '_wpml_transient_';
        /**
         * @param string $name
         * @param string $value
         * @param string $expiration
         */
        public function set($name, $value, $expiration = '')
        {
        }
        /**
         * @param string $name
         *
         * @return string
         */
        public function get($name)
        {
        }
        /**
         * @param string $name
         */
        public function delete($name)
        {
        }
    }
    class WPML_WP_Post
    {
        /** @var wpdb $wpdb */
        public $wpdb;
        /** @var int */
        private $post_id;
        /**
         * @param wpdb $wpdb
         * @param int $post_id
         */
        public function __construct(\wpdb $wpdb, $post_id)
        {
        }
        /**
         * @param array $post_data_array
         * @param bool  $direct_db_update
         */
        public function update(array $post_data_array, $direct_db_update = \false)
        {
        }
    }
    class WPML_UUID
    {
        /**
         * @param string $object_id
         * @param string $object_type
         * @param int    $timestamp
         *
         * @return string
         */
        public function get($object_id, $object_type, $timestamp = \null)
        {
        }
        /**
         * RFC 4122 compliant UUIDs.
         *
         * The RFC 4122 specification defines a Uniform Resource Name namespace for
         * UUIDs (Universally Unique Identifier), also known as GUIDs (Globally
         * Unique Identifier).  A UUID is 128 bits long, and requires no central
         * registration process.
         *
         * @package UUID
         * @license https://www.gnu.org/licenses/gpl-2.0.txt GPLv2
         * @author bjornjohansen
         * @see https://bjornjohansen.no/uuid-as-wordpress-guid
         *
         * RFC 4122 compliant UUID version 5.
         *
         * @param  string $name    The name to generate the UUID from.
         * @param  string $ns_uuid Namespace UUID. Default is for the NS when name string is a URL.
         *
         * @return string          The UUID string.
         */
        public function get_uuid_v5($name, $ns_uuid = '6ba7b811-9dad-11d1-80b4-00c04fd430c8')
        {
        }
    }
    class WPML_Flags_Factory
    {
        /** @var  wpdb */
        private $wpdb;
        /**
         * @param wpdb $wpdb
         */
        public function __construct(\wpdb $wpdb)
        {
        }
        /**
         * @return WPML_Flags
         */
        public function create()
        {
        }
    }
    class WPML_Inactive_Content
    {
        /** @var wpdb $wpdb */
        private $wpdb;
        /** @var string $current_language */
        private $current_language;
        /** @var array $content_types */
        private $content_types;
        /** @var array $inactive */
        private $inactive;
        public function __construct(\wpdb $wpdb, $current_language)
        {
        }
        /** @return bool */
        public function has_entries()
        {
        }
        /** @return array */
        public function get_content_types()
        {
        }
        /** @return array */
        public function get_languages()
        {
        }
        /** @return array */
        public function get_language_counts_rows()
        {
        }
        /** @return array */
        public function get_total_counts()
        {
        }
        /**
         * @param string $lang
         * @param string $type
         * @param string $slug
         *
         * @return int
         */
        private function count($lang, $type, $slug)
        {
        }
        /** @return array */
        private function get_inactive()
        {
        }
        /**
         * @param stdClass $r
         *
         * @return bool
         */
        private function is_only_default_category($r)
        {
        }
        /**
         * @param string $type
         * @param string $slug
         *
         * @return null|string
         */
        private function get_label($type, $slug)
        {
        }
    }
    class WPML_Admin_URL
    {
        public static function multilingual_setup($section = \null)
        {
        }
    }
    class WPML_Admin_Table_Sort
    {
        /** @var  string $primary_column */
        private $primary_column;
        /** @var  string $url_args */
        private $url_args;
        /** @var  string $current_url */
        private $current_url;
        /** @var string  */
        private $orderby_param;
        /** @var string  */
        private $order_param;
        /**
         * @param string $orderby_param
         * @param string $order_param
         */
        public function __construct($orderby_param = 'orderby', $order_param = 'order')
        {
        }
        /**
         * @param string $primary_column
         */
        public function set_primary_column($primary_column)
        {
        }
        /**
         * @param string $column
         *
         * @return string
         */
        public function get_column_url($column)
        {
        }
        /**
         * @param string $column
         *
         * @return string
         */
        public function get_column_classes($column)
        {
        }
        /**
         * @param string $column
         *
         * @return bool
         */
        private function is_primary($column)
        {
        }
        /**
         * @return string|null
         */
        private function get_current_orderby()
        {
        }
        /**
         * @return string|null
         */
        private function get_current_order()
        {
        }
        /**
         * @return array
         */
        public function get_current_sorters()
        {
        }
        /**
         * @return array
         */
        private function get_url_args()
        {
        }
        /**
         * @return string
         */
        private function get_current_url()
        {
        }
    }
    class WPML_Admin_Pagination_Render
    {
        const TEMPLATE = 'pagination.twig';
        /**
         * @var IWPML_Template_Service
         */
        private $template;
        /**
         * @var WPML_Admin_Pagination
         */
        private $pagination;
        public function __construct(\IWPML_Template_Service $template, \WPML_Admin_Pagination $pagination)
        {
        }
        public function get_model()
        {
        }
        public static function get_strings($totalItems)
        {
        }
        /**
         * @param array $items
         *
         * @return array
         */
        public function paginate($items)
        {
        }
    }
    class WPML_Admin_Pagination_Factory
    {
        /**
         * @var int
         */
        private $items_per_page;
        public function __construct($items_per_page)
        {
        }
        /**
         * @return WPML_Admin_Pagination_Render
         */
        public function create($total_items, $page_param_name = 'paged')
        {
        }
    }
    /**
     * Class WPML_Admin_Pagination
     *
     * @author OnTheGoSystems
     */
    class WPML_Admin_Pagination
    {
        /** @var int $items_per_page */
        private $items_per_page;
        /** @var  int $total_items */
        private $total_items;
        /** @var  int $current_page */
        private $current_page;
        /** @var  string $current_url */
        private $current_url;
        /** @var string  */
        private $page_param_name = 'paged';
        /**
         * @param string $page_param_name
         */
        public function set_page_param_name($page_param_name)
        {
        }
        /**
         * @return string
         */
        public function get_page_param_name()
        {
        }
        /**
         * @param int $items_per_page
         */
        public function set_items_per_page($items_per_page)
        {
        }
        /**
         * @return int
         */
        public function get_items_per_page()
        {
        }
        /**
         * @param int $total_items
         */
        public function set_total_items($total_items)
        {
        }
        /**
         * @return int
         */
        public function get_total_items()
        {
        }
        /**
         * @return int
         */
        public function get_total_pages()
        {
        }
        /**
         * @param int $page
         */
        public function set_current_page($page)
        {
        }
        /**
         * @return int
         */
        public function get_current_page()
        {
        }
        /**
         * @return null|string
         */
        public function get_first_page_url()
        {
        }
        /**
         * @return null|string
         */
        public function get_previous_page_url()
        {
        }
        /**
         * @return null|string
         */
        public function get_next_page_url()
        {
        }
        /**
         * @return null|string
         */
        public function get_last_page_url()
        {
        }
        /**
         * @return string
         */
        private function get_current_url()
        {
        }
    }
    class WPML_Slash_Management
    {
        public function match_trailing_slash_to_reference($url, $reference_url)
        {
        }
        /**
         * @param string $url
         *
         * @return bool
         */
        private function has_lang_param($url)
        {
        }
        /**
         * @param string $url
         * @param string $method Deprecated.
         *
         * @return mixed|string
         */
        public function maybe_user_trailingslashit($url, $method = '')
        {
        }
        /**
         * Follows the logic of WordPress core user_trailingslashit().
         * Can be called on plugins_loaded event, when $wp_rewrite is not set yet.
         *
         * @param string $path
         *
         * @return string
         */
        private function user_trailingslashit($path)
        {
        }
        /**
         * @param array $url_parts
         *
         * @return bool
         */
        private function is_root_url_without_trailingslash_and_without_query_args(array $url_parts)
        {
        }
        /**
         * @param array $url_parts
         *
         * @return bool
         */
        private function is_root_url_with_trailingslash(array $url_parts)
        {
        }
        /**
         * @see Test_WPML_Lang_Domains_Converter::check_domains_and_subdir
         *
         * @param array $url_parts
         *
         * @return array
         */
        public function parse_missing_host_from_path(array $url_parts)
        {
        }
        /**
         * @param string $path
         *
         * @return bool
         */
        private function is_file_path($path)
        {
        }
    }
    class WPML_String_Functions
    {
        public static function is_css_color($string)
        {
        }
        public static function is_css_length($string)
        {
        }
        public static function is_numeric($string)
        {
        }
        public static function is_not_translatable($string)
        {
        }
    }
    class WPML_WP_Cache_Factory
    {
        public function create_cache_group($group)
        {
        }
        public function create_cache_item($group, $key)
        {
        }
    }
    /**
     * Class WPML_Flags
     *
     * @package wpml-core
     */
    class WPML_Flags
    {
        /** @var icl_cache  */
        private $cache;
        /** @var wpdb $wpdb */
        private $wpdb;
        /** @var WP_Filesystem_Direct */
        private $filesystem;
        /**
         * @param wpdb                 $wpdb
         * @param icl_cache            $cache
         * @param WP_Filesystem_Direct $filesystem
         */
        public function __construct($wpdb, \icl_cache $cache, \WP_Filesystem_Direct $filesystem)
        {
        }
        /**
         * @param string $lang_code
         *
         * @return \stdClass|null
         */
        public function get_flag($lang_code)
        {
        }
        /**
         * @param string $lang_code
         *
         * @return string
         */
        public function get_flag_url($lang_code)
        {
        }
        /**
         * @param string $lang_code
         * @param int[]  $size An array describing [ $width, $height ]. It defaults to [18, 12].
         * @param string $fallback_text
         * @param string[] $css_classes Array of CSS class strings.
         *
         * @return string
         */
        public function get_flag_image($lang_code, $size = [], $fallback_text = '', $css_classes = [])
        {
        }
        public function clear()
        {
        }
        /**
         * @param array $allowed_file_types
         *
         * @return string[]
         */
        public function get_wpml_flags($allowed_file_types = \null)
        {
        }
        /**
         * @return string
         */
        public final function get_wpml_flags_directory()
        {
        }
        /**
         * @return string
         */
        public static final function get_wpml_flags_url()
        {
        }
        /**
         * @param string $path
         *
         * @return bool
         */
        private function flag_file_exists($path)
        {
        }
        /**
         * @param array $allowed_file_types
         * @param array $files
         *
         * @return array
         */
        private function filter_flag_files($allowed_file_types, $files)
        {
        }
        /**
         * @param string $base_url
         * @param string $path
         *
         * @return string
         */
        private function append_path_to_url($base_url, $path)
        {
        }
    }
    class WPML_Translate_Link_Targets
    {
        /* @var AbsoluteLinks $absolute_links */
        private $absolute_links;
        /* @var WPML_Absolute_To_Permalinks $permalinks_converter */
        private $permalinks_converter;
        /**
         * WPML_Translate_Link_Targets constructor.
         *
         * @param AbsoluteLinks               $absolute_links
         * @param WPML_Absolute_To_Permalinks $permalinks_converter
         */
        public function __construct(\AbsoluteLinks $absolute_links, \WPML_Absolute_To_Permalinks $permalinks_converter)
        {
        }
        /**
         * convert_text
         *
         * @param string $text
         *
         * @return string
         */
        public function convert_text($text)
        {
        }
        public function is_internal_url($url)
        {
        }
        /**
         * @param string $url
         *
         * @return string
         */
        public function convert_url($url)
        {
        }
    }
    /**
     * Class WPML_Debug_BackTrace
     *
     * @deprecated 4.2.8
     */
    class WPML_Debug_BackTrace extends \WPML\Utils\DebugBackTrace
    {
        /**
         * @param string $php_version Deprecated.
         * @param int    $limit
         * @param bool   $provide_object
         * @param bool   $ignore_args
         * @param string $debug_backtrace_function
         * @phpstan-ignore-next-line
         */
        public function __construct($php_version = \null, $limit = 0, $provide_object = \false, $ignore_args = \true, $debug_backtrace_function = \null)
        {
        }
    }
}
namespace WPML\Utils {
    class Pager
    {
        /** @var string */
        protected $optionName;
        /** @var int */
        protected $pageSize;
        /**
         * @param string $optionName
         * @param int    $pageSize
         */
        public function __construct($optionName, $pageSize = 10)
        {
        }
        /**
         * @param Collection $collection
         * @param callable   $callback
         * @param int        $timeout
         *
         * @return int
         */
        public function iterate(\WPML\Collect\Support\Collection $collection, callable $callback, $timeout = PHP_INT_MAX)
        {
        }
        private function getItemsToProcess(\WPML\Collect\Support\Collection $collection, $processedItems)
        {
        }
        /**
         * @param Collection $collection
         *
         * @return int
         */
        public function getPagesCount(\WPML\Collect\Support\Collection $collection)
        {
        }
        /**
         * @param \WPML\Collect\Support\Collection $collection
         *
         * @return int
         */
        protected function getRemainingPages(\WPML\Collect\Support\Collection $collection, $processedItems)
        {
        }
        /**
         * @return int
         */
        public function getProcessedCount()
        {
        }
    }
}
namespace {
    /**
     * Class WPML_Non_Persistent_Cache
     *
     * Implements non-persistent cache based on an array. Suitable to cache objects during single page load.
     */
    class WPML_Non_Persistent_Cache
    {
        /**
         * @var array Cached objects.
         */
        private static $cache = array();
        /**
         * Retrieves the data contents from the cache, if it exists.
         *
         * @param string $key   Cache key.
         * @param string $group Cache group.
         * @param bool   $found Whether the key was found in the cache (passed by reference).
         *                      Disambiguates a return of false, a storable value.
         *
         * @return mixed|bool
         */
        public static function get($key, $group = 'default', &$found = \null)
        {
        }
        /**
         * Sets the data contents into the cache.
         *
         * @param string $key   Cache key.
         * @param mixed  $data  Data to store in cache.
         * @param string $group Cache group.
         *
         * @return bool
         */
        public static function set($key, $data, $group = 'default')
        {
        }
        /**
         * Executes callback function and caches its result.
         *
         * @param string   $key      Cache key.
         * @param callable $callback Callback function.
         * @param string   $group    Cache group.
         *
         * @return bool
         */
        public static function execute_and_cache($key, $callback, $group = 'default')
        {
        }
        /**
         * Flush cache.
         *
         * @return bool
         */
        public static function flush()
        {
        }
        /**
         * Flush cache group.
         *
         * @param array|string $groups Cache group name.
         *
         * @return bool
         */
        public static function flush_group($groups = 'default')
        {
        }
    }
    class WPML_Encoding
    {
        /**
         * @param string $string The string to decode.
         * @param string $encodings A comma separated list of encodings in the order that the data was encoded
         *
         * @return mixed
         */
        public static function decode($string, $encodings)
        {
        }
        /**
         * @param mixed  $data The data to encode.
         * @param string $encodings A comma separated list of encodings in the order that the data was encoded
         *
         * @return string
         */
        public static function encode($data, $encodings)
        {
        }
    }
    class WPML_Languages_Notices
    {
        const NOTICE_ID_MISSING_MENU_ITEMS = 'wpml-missing-menu-items';
        const NOTICE_GROUP = 'wpml-core';
        const NOTICE_ID_MISSING_DOWNLOADED_LANGUAGES = 'wpml-missing-downloaded-languages';
        /** @var WPML_Notices */
        private $admin_notices;
        private $translations = array();
        /**
         * WPML_Languages_Notices constructor.
         *
         * @param WPML_Notices $admin_notices
         */
        public function __construct(\WPML_Notices $admin_notices)
        {
        }
        function maybe_create_notice_missing_menu_items($languages_count)
        {
        }
        public function missing_languages($not_found_languages)
        {
        }
        public function is_not_languages_edit_page()
        {
        }
        private function get_suggestions(array $language)
        {
        }
        /**
         * @param string $language_attribute
         * @param array  $language
         * @param array  $translation
         *
         * @return string|null
         */
        private function find_matching_attribute($language_attribute, array $language, array $translation)
        {
        }
        /**
         * @param array $language
         * @param array $translation
         *
         * @return null|string
         */
        private function get_matching_language(array $language, array $translation)
        {
        }
    }
    class WPML_WP_User_Factory
    {
        public function create($user_id)
        {
        }
        public function create_by_email($user_email)
        {
        }
        public function create_current()
        {
        }
    }
    class WPML_User extends \WP_User
    {
        /**
         * @see \get_user_meta
         *
         * @param string $key
         * @param bool   $single
         *
         * @return mixed
         */
        public function get_meta($key = '', $single = \false)
        {
        }
        /**
         * @see \update_meta
         *
         * @param string $key
         * @param mixed  $value
         * @param mixed  $prev_value
         */
        public function update_meta($key, $value, $prev_value = '')
        {
        }
        /**
         * @see \get_user_option
         *
         * @param string $option
         * @return mixed
         */
        public function get_option($option)
        {
        }
        /**
         * @see \update_user_option
         *
         * @param string $option_name
         * @param mixed  $new_value
         * @param bool   $global
         * @return int|bool
         */
        function update_option($option_name, $new_value, $global = \false)
        {
        }
    }
    class WPML_WP_User_Query_Factory
    {
        public function create($args)
        {
        }
    }
    /**
     * Class WPML_Queried_Object
     *
     * @author OnTheGoSystems
     */
    class WPML_Queried_Object
    {
        /** @var SitePress $sitepress */
        private $sitepress;
        /** @var  null|object */
        private $queried_object;
        /** @var stdClass $queried_object_details */
        private $queried_object_details;
        /**
         * WPML_TF_Queried_Object constructor.
         *
         * @param SitePress $sitepress
         */
        public function __construct(\SitePress $sitepress)
        {
        }
        public function has_object()
        {
        }
        /**
         * @return null|string
         */
        public function get_source_language_code()
        {
        }
        /**
         * @return string
         */
        public function get_language_code()
        {
        }
        /**
         * @param string $key
         *
         * @return null|mixed
         */
        private function get_queried_object_detail($key)
        {
        }
        /**
         * @return bool
         */
        public function is_post()
        {
        }
        /**
         * @return null|int
         */
        public function get_id()
        {
        }
        /**
         * @return null|string
         */
        public function get_element_type()
        {
        }
        /**
         * @return null|string
         */
        public function get_source_url()
        {
        }
        public function get_post_type()
        {
        }
        public function get_taxonomy()
        {
        }
        public function get_post_type_name()
        {
        }
        public function is_instance_of_post()
        {
        }
        public function is_instance_of_taxonomy()
        {
        }
        public function is_instance_of_post_type()
        {
        }
    }
    class WPML_Deactivate_Old_Media_Factory implements \IWPML_Backend_Action_Loader
    {
        public function create()
        {
        }
    }
}
namespace WPML\Core\WP\App {
    class Resources
    {
        // enqueueApp :: string $app -> ( string $localizeData )
        public static function enqueueApp($app)
        {
        }
    }
}
namespace {
    class WPML_Temporary_Switch_Language extends \WPML_SP_User
    {
        private $old_lang = \false;
        /**
         * @param SitePress $sitepress
         * @param string $target_lang
         */
        public function __construct(&$sitepress, $target_lang)
        {
        }
        public function __destruct()
        {
        }
        public function restore_lang()
        {
        }
    }
    class WPML_WP_Taxonomy_Query
    {
        private $taxonomies_query_vars;
        public function __construct($wp_api)
        {
        }
        public function get_query_vars()
        {
        }
        public function find($taxonomy)
        {
        }
    }
    class WPML_Cache_Factory
    {
        /** @var array */
        private $valid_caches = ['TranslationManagement::get_translation_job_id' => ['clear_actions' => ['wpml_tm_save_post', 'wpml_cache_clear']], 'WPML_Element_Type_Translation::get_language_for_element' => ['clear_actions' => ['wpml_translation_update']], 'WPML_Post_Status::needs_update' => ['clear_actions' => ['wpml_translation_status_update']]];
        public function __construct()
        {
        }
        /**
         * @param string $cache_name
         *
         * @return WPML_WP_Cache
         * @throws InvalidArgumentException Exception.
         */
        public function get($cache_name)
        {
        }
        /**
         * @param string $cache_name
         * @param array  $clear_actions
         */
        public function define($cache_name, array $clear_actions)
        {
        }
        private function init_clear_actions($cache_name, array $clear_actions)
        {
        }
    }
    class WPML_WP_Cache
    {
        /** @var string Key name under which array of all group keys is stored */
        const KEYS = 'WPML_WP_Cache__group_keys';
        /** @var string Group name */
        private $group;
        /**
         * WPML_WP_Cache constructor.
         *
         * @param string $group Optional. Where the cache contents are grouped. Default empty.
         */
        public function __construct($group = '')
        {
        }
        /**
         * Retrieves the cache contents from the cache by key and group.
         *
         * @param int|string $key    The key under which the cache contents are stored.
         * @param bool       $found  Optional. Whether the key was found in the cache (passed by reference).
         *                           Disambiguates a return of false, a storable value. Default null.
         *
         * @return bool|mixed False on failure to retrieve contents or the cache
         *                    contents on success
         */
        public function get($key, &$found = \null)
        {
        }
        /**
         * Saves the data to the cache.
         *
         * @param int|string $key    The cache key to use for retrieval later.
         * @param mixed      $data   The contents to store in the cache.
         * @param int        $expire Optional. When to expire the cache contents, in seconds.
         *                           Default 0 (no expiration).
         *
         * @return bool False on failure, true on success
         */
        public function set($key, $data, $expire = 0)
        {
        }
        /**
         * Removes the cache contents matching key and group.
         */
        public function flush_group_cache()
        {
        }
        public function execute_and_cache($key, $callback)
        {
        }
        /**
         * @param string $key
         *
         * @return array {
         *    @type mixed   $result @see Return value of \wp_cache_get.
         *    @type bool    $found @see `$found` argument of \wp_cache_get.
         * }
         */
        public function get_with_found($key)
        {
        }
        /**
         * Get stored group keys.
         *
         * @return array
         */
        private function get_keys()
        {
        }
    }
    class WPML_Ajax
    {
        /**
         * @return bool
         */
        public static function is_frontend_ajax_request()
        {
        }
        /**
         * @param string $url
         *
         * @return bool
         */
        public static function is_admin_ajax_request_called_from_frontend($url)
        {
        }
    }
    class WPML_Encoding_Validation
    {
        const MIN_CHAR_SIZE = 26;
        /**
         * @param string $string
         *
         * @return int
         */
        public function is_base64($string)
        {
        }
    }
    class WPML_Global_AJAX extends \WPML_SP_User
    {
        /**
         * WPML_Global_AJAX constructor.
         *
         * @param SitePress $sitepress
         */
        public function __construct(&$sitepress)
        {
        }
        public function save_language_negotiation_type_action()
        {
        }
        /**
         * @param string $url
         * @param array  $errors
         *
         * @return bool
         */
        private function validateRootPageUrl($url, array &$errors)
        {
        }
        /**
         * @param string $url
         *
         * @return bool
         */
        function is_external($url)
        {
        }
        /**
         * @param string $site_host
         *
         * @return string
         */
        function remove_www_prefix($site_host)
        {
        }
    }
    class WPML_Simple_Language_Selector extends \WPML_SP_User
    {
        function __construct(&$sitepress)
        {
        }
        function render($options = array())
        {
        }
        public static function enqueue_scripts()
        {
        }
    }
    class WPML_Locale
    {
        /**
         * @var wpdb
         */
        private $wpdb;
        /**
         * @var SitePress
         */
        private $sitepress;
        /**
         * @var  string $locale
         */
        private $locale;
        private $locale_cache;
        /** @var Collection $all_locales */
        private $all_locales;
        /**
         * WPML_Locale constructor.
         *
         * @param wpdb      $wpdb
         * @param SitePress $sitepress
         * @param string    $locale
         */
        public function __construct(\wpdb &$wpdb, \SitePress &$sitepress, &$locale)
        {
        }
        public function init()
        {
        }
        /**
         * @see \Test_Admin_Settings::test_locale
         * @fixme
         * Due to the way these tests work (global state issues) I had to create this method
         * to ensure we have full coverage of the code.
         * This method shouldn't be used anywhere else and should be removed once tests are migrated
         * to the new tests framework.
         */
        public function reset_cached_data()
        {
        }
        /**
         * Hooked to 'sanitize_title' in case the user is using a language that has either German or Danish locale, to
         * ensure that WP Core sanitization functions handle special chars accordingly.
         *
         * @param string $title
         * @param string $raw_title
         *
         * @return string
         */
        public function filter_sanitize_title($title, $raw_title)
        {
        }
        /**
         * @return bool|mixed
         */
        public function locale()
        {
        }
        /**
         * @param string $code
         *
         * @return false|string
         */
        public function get_locale($code)
        {
        }
        /**
         * @return Collection
         */
        public function get_all_locales()
        {
        }
        public function switch_locale($lang_code = \false)
        {
        }
        public function get_locale_file_names()
        {
        }
        private function language_needs_title_sanitization()
        {
        }
        function _language_attributes($latr)
        {
        }
        /**
         * @return WPML_Locale
         */
        public static function get_instance_from_sitepress()
        {
        }
    }
    class WPML_Deactivate_Old_Media
    {
        private $php_functions;
        public function __construct(\WPML_PHP_Functions $php_functions)
        {
        }
        public function add_hooks()
        {
        }
        public function deactivate_media()
        {
        }
    }
    // adapted from http://wordpress.org/extend/plugins/black-studio-wpml-javascript-redirect/
    // thanks to Blank Studio - http://www.blackstudio.it/
    class WPML_Browser_Redirect
    {
        /**
         * @var SitePress
         */
        private $sitepress;
        public function __construct($sitepress)
        {
        }
        public function init_hooks()
        {
        }
        public function init()
        {
        }
        public function enqueue_scripts()
        {
        }
    }
}
namespace WPML\AdminLanguageSwitcher {
    class AdminLanguageSwitcherRenderer
    {
        public static function render($languageOptions)
        {
        }
    }
    class DisableWpLanguageSwitcher implements \IWPML_Frontend_Action, \IWPML_Backend_Action
    {
        public function add_hooks()
        {
        }
        /**
         * @param string $redirect_to
         * @param string $requested_redirect_to
         * @return string
         */
        public function removeWPLangFromRedirectUrl($redirect_to, $requested_redirect_to)
        {
        }
    }
    class AdminLanguageSwitcher implements \IWPML_Frontend_Action
    {
        public function add_hooks()
        {
        }
        public function maybeSaveNewLanguage()
        {
        }
        public function triggerDropdown()
        {
        }
        private function isOnWpLoginPage($url)
        {
        }
        /**
         * @return string|false
         */
        private function getSelectedLocale()
        {
        }
        /**
         * @return bool
         */
        private function isLanguageSwitcherShown()
        {
        }
    }
}
namespace WPML\Language\Detection {
    class CookieLanguage
    {
        /** @var \WPML_Cookie */
        private $cookie;
        /** @var string */
        private $defaultLanguage;
        /**
         * @param  \WPML_Cookie $cookie
         * @param  string       $defaultLanguage
         */
        public function __construct(\WPML_Cookie $cookie, $defaultLanguage)
        {
        }
        /**
         * @param bool $isBackend
         *
         * @return string
         */
        public function getAjaxCookieName($isBackend)
        {
        }
        public function getBackendCookieName()
        {
        }
        public function getFrontendCookieName()
        {
        }
        public function get($cookieName)
        {
        }
        public function set($cookieName, $lang_code)
        {
        }
        /**
         * @return bool|string
         */
        public function get_cookie_domain()
        {
        }
        /**
         * Returns SERVER_NAME, or HTTP_HOST if the first is not available
         *
         * @return string
         */
        private static function get_server_host_name()
        {
        }
        private static function get_port()
        {
        }
    }
}
namespace {
    abstract class WPML_Request
    {
        /** @var  WPML_URL_Converter */
        protected $url_converter;
        protected $active_languages;
        protected $default_language;
        /** @var CookieLanguage  */
        protected $cookieLanguage;
        /**
         * @param  WPML_URL_Converter $url_converter
         * @param  array              $active_languages
         * @param  string             $default_language
         * @param  CookieLanguage     $cookieLanguage
         */
        public function __construct(\WPML_URL_Converter $url_converter, $active_languages, $default_language, \WPML\Language\Detection\CookieLanguage $cookieLanguage)
        {
        }
        protected abstract function get_cookie_name();
        /**
         * Determines the language of the current request.
         *
         * @return string|false language code of the current request, determined from the requested url and the user's
         *                      cookie.
         */
        public abstract function get_requested_lang();
        /**
         * Returns the current REQUEST_URI optionally filtered
         *
         * @param null|int $filter filter to apply to the REQUEST_URI, takes the same arguments
         *                         as filter_var for the filter type.
         *
         * @return string
         */
        public function get_request_uri($filter = \null)
        {
        }
        /**
         * @global $wpml_url_converter
         *
         * @return string|false language code that can be determined from the currently requested URI.
         */
        public function get_request_uri_lang()
        {
        }
        /**
         * @return string language code stored in the user's wp-wpml_current_language cookie
         */
        public function get_cookie_lang()
        {
        }
        /**
         * Checks whether hidden languages are to be displayed at the moment.
         * They are displayed in the frontend if the users has the respective option icl_show_hidden_languages set in his
         * user_meta. The are displayed in the backend for all admins with manage_option capabilities.
         *
         * @return bool true if hidden languages are to be shown
         */
        public function show_hidden()
        {
        }
        /**
         * Sets the language code of the current screen in the User's wp-wpml_current_language cookie
         *
         * When user is not logged we must set cookie with JS to avoid issues with cached pages
         *
         * @param string $lang_code
         */
        public function set_language_cookie($lang_code)
        {
        }
    }
}
namespace WPML\Language\Detection {
    /**
     * @package    wpml-core
     * @subpackage wpml-requests
     */
    class Frontend extends \WPML_Request
    {
        /** @var \WPML_WP_API */
        private $wp_api;
        public function __construct(\WPML_URL_Converter $url_converter, $active_languages, $default_language, \WPML\Language\Detection\CookieLanguage $cookieLanguage, \WPML_WP_API $wp_api)
        {
        }
        public function get_requested_lang()
        {
        }
        /**
         * @return string
         */
        private function get_comment_language()
        {
        }
        protected function get_cookie_name()
        {
        }
    }
    /**
     * Class WPML_Backend_Request
     *
     * @package    wpml-core
     * @subpackage wpml-requests
     */
    class Backend extends \WPML_Request
    {
        /**
         * Determines the requested language in the WP Admin backend from URI, $_POST, $_GET and cookies.
         *
         * @return string The requested language code.
         */
        public function get_requested_lang()
        {
        }
        private function getForPage()
        {
        }
        protected function get_cookie_name()
        {
        }
        private function getFromParam($path, $allowAllValue)
        {
        }
        private function getPostElementLanguage()
        {
        }
        private function is_string_translation_or_translation_queue_page($system)
        {
        }
    }
    class Ajax extends \WPML_Request
    {
        public function get_requested_lang()
        {
        }
        protected function get_cookie_name()
        {
        }
        /**
         * @return bool
         */
        private function is_admin_action_from_referer()
        {
        }
    }
    class Rest extends \WPML_Request
    {
        /** @var Backend */
        private $backend;
        public function __construct($url_converter, $active_languages, $default_language, $cookieLanguage, $backend)
        {
        }
        protected function get_cookie_name()
        {
        }
        public function get_requested_lang()
        {
        }
        /**
         * It tries to detect language in FRONTEND manner.
         *
         * We ignore a default language due to fallback mechanism in WPML_URL_Converter_Subdir_Strategy which never returns
         * NULL when `use_directory_for_default_lang` option is enabled.
         *
         * @return string|null
         */
        private function getFrontendLanguage()
        {
        }
    }
}
namespace {
    class WPML_UI_Unlock_Button
    {
        public function render($disabled, $unlocked, $radio_name, $unlocked_name)
        {
        }
    }
    /**
     * @package wpml-core
     */
    class WPML_UI_Screen_Options_Factory
    {
        /** @var SitePress $sitepress */
        private $sitepress;
        public function __construct(\SitePress $sitepress)
        {
        }
        /**
         * @param string $option_name
         * @param int    $default_per_page
         *
         * @return WPML_UI_Screen_Options_Pagination
         */
        public function create_pagination($option_name, $default_per_page)
        {
        }
        public function create_help_tab($id, $title, $content)
        {
        }
        public function create_admin_table_sort()
        {
        }
    }
    /**
     * @package wpml-core
     */
    class WPML_UI_Help_Tab
    {
        private $wp_api;
        private $id;
        private $title;
        private $content;
        public function __construct(\WPML_WP_API $wp_api, $id, $title, $content)
        {
        }
        public function init_hooks()
        {
        }
        public function add_help_tab()
        {
        }
    }
    /**
     * @package wpml-core
     */
    class WPML_UI_Pagination extends \WP_List_Table
    {
        public function __construct($total, $number_per_page)
        {
        }
        public function show()
        {
        }
    }
    /**
     * @package wpml-core
     */
    class WPML_UI_Screen_Options_Pagination
    {
        /**
         * @var string $option_name
         */
        private $option_name;
        /**
         * @var int $default_per_page
         */
        private $default_per_page;
        /**
         * WPML_UI_Screen_Options_Pagination constructor.
         *
         * @param string $option_name
         * @param int    $default_per_page
         */
        public function __construct($option_name, $default_per_page)
        {
        }
        public function init_hooks()
        {
        }
        public function add_screen_options()
        {
        }
        public function set_screen_options_filter($value, $option, $set_value)
        {
        }
        public function get_items_per_page()
        {
        }
    }
    class WPML_Admin_Resources_Hooks implements \IWPML_Backend_Action
    {
        public function add_hooks()
        {
        }
        public function register_resources()
        {
        }
    }
    class WPML_Translate_Independently
    {
        public function __construct()
        {
        }
        public function init()
        {
        }
        public function wpml_translate_independently()
        {
        }
        public function localize_scripts()
        {
        }
        /**
         * Add callback to detect post editor change.
         *
         * @param  array $initArray
         *
         * @return array
         */
        public function add_tiny_mce_change_detection($initArray)
        {
        }
    }
    class WPML_Sync_Custom_Fields
    {
        /** @var WPML_Translation_Element_Factory $element_factory */
        private $element_factory;
        /** @var array $fields_to_sync */
        private $fields_to_sync;
        /**
         * WPML_Sync_Custom_Fields constructor.
         *
         * @param WPML_Translation_Element_Factory $element_factory
         * @param array                            $fields_to_sync
         */
        public function __construct(\WPML_Translation_Element_Factory $element_factory, array $fields_to_sync)
        {
        }
        /**
         * @param int    $post_id_from
         * @param string $meta_key
         */
        public function sync_to_translations($post_id_from, $meta_key)
        {
        }
        /**
         * @param int $post_id_from
         */
        public function sync_all_custom_fields($post_id_from)
        {
        }
        /**
         * @param int    $post_id_from
         * @param int    $post_id_to
         * @param string $meta_key
         */
        public function sync_custom_field($post_id_from, $post_id_to, $meta_key)
        {
        }
    }
    class WPML_Translate_Link_Targets_In_Custom_Fields_Hooks
    {
        /**
         * WPML_Translate_Link_Targets_In_Custom_Fields_Hook constructor.
         *
         * @param WPML_Translate_Link_Targets_In_Custom_Fields $translate_links
         * @param WPML_WP_API                                  $wp_api
         */
        public function __construct($translate_links, &$wp_api)
        {
        }
    }
    class WPML_Copy_Once_Custom_Field implements \IWPML_Action
    {
        /** @var SitePress $sitepress */
        private $sitepress;
        /** @var WPML_Post_Translation $wpml_post_translation */
        private $wpml_post_translation;
        /**
         * WPML_Copy_Once_Custom_Field constructor.
         *
         * @param SitePress             $sitepress
         * @param WPML_Post_Translation $wpml_post_translation
         */
        public function __construct(\SitePress $sitepress, \WPML_Post_Translation $wpml_post_translation)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param int $post_id
         */
        public function copy($post_id)
        {
        }
    }
    class WPML_Translate_Link_Targets_In_Custom_Fields extends \WPML_Translate_Link_Targets
    {
        /* @var TranslationManagement $tm_instance */
        private $tm_instance;
        /* @var WPML_WP_API $wp_api */
        private $wp_api;
        /* @var array $meta_keys */
        private $meta_keys;
        /**
         * WPML_Translate_Link_Targets_In_Custom_Fields constructor.
         *
         * @param TranslationManagement       $tm_instance
         * @param WPML_WP_API                 $wp_api
         * @param AbsoluteLinks               $absolute_links
         * @param WPML_Absolute_To_Permalinks $permalinks_converter
         */
        public function __construct(&$tm_instance, &$wp_api, $absolute_links, $permalinks_converter)
        {
        }
        public function has_meta_keys()
        {
        }
        /**
         * maybe_translate_link_targets
         *
         * @param string|array $metadata  - Always null for post metadata.
         * @param int          $object_id - Post ID for post metadata
         * @param string       $meta_key  - metadata key.
         * @param bool         $single    - Indicates if processing only a single $metadata value or array of values.
         *
         * @return string|array Original or Modified $metadata.
         */
        public function maybe_translate_link_targets($metadata, $object_id, $meta_key, $single)
        {
        }
        private function convert_sub_fields($sub_fields, $metadata)
        {
        }
    }
    class WPML_Copy_Once_Custom_Field_Factory implements \IWPML_Backend_Action_Loader, \IWPML_Frontend_Action_Loader
    {
        public function create()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Custom_Fields_Post_Meta_Info_Factory implements \IWPML_AJAX_Action_Loader, \IWPML_Backend_Action_Loader
    {
        public function create()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Custom_Fields_Post_Meta_Info implements \IWPML_Action
    {
        const RESOURCES_HANDLE = 'wpml-cf-info';
        const AJAX_ACTION = 'wpml-cf-info-get';
        private $translatable_element_factory;
        /**
         * WPML_Custom_Fields_Post_Meta_Info constructor.
         *
         * @param WPML_Translation_Element_Factory $translatable_element_factory
         */
        public function __construct(\WPML_Translation_Element_Factory $translatable_element_factory)
        {
        }
        public function add_hooks()
        {
        }
        public function get_info_ajax()
        {
        }
        public function get_info_filter($ignore, $post_id, $meta_key)
        {
        }
        private function get_info($post_id, $meta_key)
        {
        }
    }
    class WPML_MO_File_Search
    {
        /**
         * @var SitePress
         */
        private $sitepress;
        /**
         * @var array
         */
        private $settings;
        /**
         * @var WP_Filesystem_Direct
         */
        private $filesystem;
        /**
         * @var array
         */
        private $locales;
        /**
         * @param SitePress $sitepress
         */
        public function __construct(\SitePress $sitepress, \WP_Filesystem_Direct $filesystem = \null)
        {
        }
        /**
         * @param array $active_languages
         *
         * @return bool
         */
        public function has_mo_file_for_any_language($active_languages)
        {
        }
        public function reload_theme_dirs()
        {
        }
        /**
         * @param string $lang_code
         *
         * @return bool
         */
        public function can_find_mo_file($lang_code)
        {
        }
        /**
         * @return string
         */
        protected function get_template_path()
        {
        }
        /**
         * @return array
         */
        public function find_theme_mo_dirs()
        {
        }
        /**
         * @param string $folder
         * @param int $rec
         *
         * @return bool
         */
        public function determine_mo_folder($folder, $rec = 0)
        {
        }
        /**
         * @return array
         */
        public function get_dir_names()
        {
        }
        /**
         * @param array $dirs
         */
        public function save_mo_dirs($dirs)
        {
        }
    }
}
namespace WPML\Installer {
    class DisableRegisterNow implements \IWPML_Backend_Action
    {
        public function add_hooks()
        {
        }
    }
    class AddSiteUrl implements \IWPML_Backend_Action
    {
        public function add_hooks()
        {
        }
    }
}
namespace {
    class WPML_Installer_Gateway
    {
        private static $the_instance;
        private function __construct()
        {
        }
        private function __clone()
        {
        }
        public static function get_instance()
        {
        }
        public static function set_instance($instance)
        {
        }
        public function class_exists()
        {
        }
        public function get_site_key($repository_id = 'wpml')
        {
        }
        public function get_ts_client_id($repository_id = 'wpml')
        {
        }
        public function get_registering_user_id($repository_id = 'wpml')
        {
        }
    }
    class WPML_Installer_Domain_URL_Factory implements \IWPML_Backend_Action_Loader, \IWPML_AJAX_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_Installer_Domain_URL
    {
        private $site_url_in_default_lang;
        public function __construct($site_url_in_default_lang)
        {
        }
        public function add_hooks()
        {
        }
        public function get_site_url_in_default_lang()
        {
        }
    }
}
namespace WPML\TranslationMode\Endpoint {
    class SetTranslateEverything implements \WPML\Ajax\IHandler
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
}
namespace {
    /**
     * Class WPML_TM_Post_Data
     */
    class WPML_TM_Post_Data
    {
        /**
         * @param string $data
         *
         * @return string
         */
        public static function strip_slashes_for_single_quote($data)
        {
        }
    }
}
namespace WPML\TM\StringTranslation {
    class StringTranslationRequest
    {
        /**
         * @param array    $post clone of $_POST
         * @param callable $addStringsToBasket :: array $stringIds -> string $fromLang -> array $toLangs -> void
         */
        public static function sendToTranslation($post, callable $addStringsToBasket)
        {
        }
    }
}
namespace {
    class WPML_Remote_String_Translation
    {
        public static function get_string_status_labels()
        {
        }
        public static function get_string_status_label($status)
        {
        }
        public static function translation_send_strings_local($string_ids, $target, $translator_id = \null, $basket_name = \null)
        {
        }
        public static function display_string_menu($lang_filter)
        {
        }
        public static function string_status_text_filter($text, $string_id)
        {
        }
    }
    abstract class WPML_Templates_Factory
    {
        const NOTICE_GROUP = 'template_factory';
        const OTGS_TWIG_CACHE_DISABLED_KEY = '_otgs_twig_cache_disabled';
        /** @var array */
        protected $custom_filters;
        /** @var array */
        protected $custom_functions;
        /** @var string|array */
        protected $template_paths;
        /** @var string|bool */
        protected $cache_directory;
        protected $template_string;
        /** @var WPML_WP_API $wp_api */
        private $wp_api;
        /** @var Twig_Environment */
        protected $twig;
        /**
         * WPML_Templates_Factory constructor.
         *
         * @param array       $custom_functions
         * @param array       $custom_filters
         * @param WPML_WP_API $wp_api
         */
        public function __construct(array $custom_functions = array(), array $custom_filters = array(), $wp_api = \null)
        {
        }
        protected abstract function init_template_base_dir();
        /**
         * @param null $template
         * @param null $model
         *
         * @throws \WPML\Core\Twig\Error\LoaderError
         * @throws \WPML\Core\Twig\Error\RuntimeError
         * @throws \WPML\Core\Twig\Error\SyntaxError
         */
        public function show($template = \null, $model = \null)
        {
        }
        /**
         * @param string $template
         * @param array<string,mixed> $model
         *
         * @return string
         * @throws \WPML\Core\Twig\Error\LoaderError
         * @throws \WPML\Core\Twig\Error\RuntimeError
         * @throws \WPML\Core\Twig\Error\SyntaxError
         */
        public function get_view($template = \null, $model = \null)
        {
        }
        protected function maybe_init_twig()
        {
        }
        public abstract function get_template();
        public abstract function get_model();
        /**
         * @return Twig_Environment
         */
        protected function get_twig()
        {
        }
        /**
         * @param RuntimeException $e
         */
        protected function add_exception_notice(\RuntimeException $e)
        {
        }
        /**
         * @return WPML_WP_API
         */
        protected function get_wp_api()
        {
        }
        protected function disable_twig_cache()
        {
        }
        protected function is_caching_enabled()
        {
        }
        /**
         * @return bool
         */
        protected function is_string_template()
        {
        }
        /**
         * @return \WPML\Core\Twig_LoaderInterface
         */
        protected function get_twig_loader()
        {
        }
    }
    class WPML_LS_Template extends \WPML_Templates_Factory
    {
        const FILENAME = 'template.twig';
        /* @var array $template */
        private $template;
        /* @var array $model */
        private $model;
        /* @var string $prefix */
        private $prefix = 'wpml-ls-';
        /**
         * WPML_Language_Switcher_Menu constructor.
         *
         * @param array $template_data
         * @param array $template_model
         */
        public function __construct($template_data, $template_model = array())
        {
        }
        /**
         * Make sure some elements are of array type
         *
         * @param array $template_data
         *
         * @return array
         */
        private function format_data($template_data)
        {
        }
        /**
         * @param array $model
         */
        public function set_model($model)
        {
        }
        /**
         * @return string
         * @throws \WPML\Core\Twig\Error\LoaderError
         * @throws \WPML\Core\Twig\Error\RuntimeError
         * @throws \WPML\Core\Twig\Error\SyntaxError
         */
        public function get_html()
        {
        }
        /**
         * @param bool $with_version
         *
         * @return array
         */
        public function get_styles($with_version = \false)
        {
        }
        /**
         * @return bool
         */
        public function has_styles()
        {
        }
        /**
         * @param bool $with_version
         *
         * @return array
         */
        public function get_scripts($with_version = \false)
        {
        }
        /**
         * @param string $url
         *
         * @return string
         */
        private function add_resource_version($url)
        {
        }
        /**
         * @param int $index
         *
         * @return string
         */
        public function get_resource_handler($index)
        {
        }
        /**
         * @return mixed|string|bool
         */
        public function get_inline_style_handler()
        {
        }
        /**
         * @return string
         */
        public function get_version()
        {
        }
        protected function init_template_base_dir()
        {
        }
        /**
         * @return string Template filename
         */
        public function get_template()
        {
        }
        /**
         * @return array
         */
        public function get_model()
        {
        }
        /**
         * @return array
         */
        public function get_template_data()
        {
        }
        /**
         * return bool
         */
        public function is_core()
        {
        }
        /**
         * @return array
         */
        public function supported_slot_types()
        {
        }
        /**
         * @return array
         */
        public function force_settings()
        {
        }
        public function is_path_valid()
        {
        }
        /**
         * @param string $template_string
         */
        public function set_template_string($template_string)
        {
        }
        /**
         * If an asset has a minified and a non-minified version,
         * we remove the non-minified version.
         *
         * @param array $assets
         *
         * @return array
         */
        public static function remove_non_minified_duplicates(array $assets)
        {
        }
    }
    /**
     * Created by PhpStorm.
     * User: bruce
     * Date: 17/10/17
     * Time: 5:18 PM
     */
    class WPML_LS_Languages_Cache
    {
        private $cache_key;
        private $cache;
        public function __construct($template_args, $current_language, $default_language, $wp_query)
        {
        }
        public function get()
        {
        }
        public function set($ls_languages)
        {
        }
    }
    class WPML_LS_Widget extends \WP_Widget
    {
        const SLUG = 'icl_lang_sel_widget';
        const ANCHOR_BASE = '#sidebars/';
        public function __construct()
        {
        }
        public static function register()
        {
        }
        /**
         * @param string $hook
         */
        public function admin_enqueue_scripts_action($hook)
        {
        }
        /**
         * @param array<string,mixed> $args
         * @param array               $instance
         */
        public function widget($args, $instance)
        {
        }
        /**
         * @param array $instance
         *
         * @return void
         */
        public function form($instance)
        {
        }
        /**
         * @param array $new_instance
         * @param array $old_instance
         *
         * @return array
         */
        public function update($new_instance, $old_instance)
        {
        }
        /**
         * @param WPML_LS_Slot $slot
         *
         * @return string
         */
        public function create_new_instance(\WPML_LS_Slot $slot)
        {
        }
        /**
         * @param WPML_LS_Slot $slot
         * @param int          $widget_id
         */
        public function update_instance(\WPML_LS_Slot $slot, $widget_id = \null)
        {
        }
        /**
         * @param int $widget_id
         */
        public function delete_instance($widget_id = \null)
        {
        }
        /**
         * @param string $widget_id
         *
         * @return int
         */
        public function get_number_from_widget_id($widget_id)
        {
        }
        /**
         * @param WPML_LS_Slot $slot
         *
         * @return array
         */
        private function get_instance_options_from_slot(\WPML_LS_Slot $slot)
        {
        }
        /**
         * @param string $slug
         *
         * @return string
         */
        public function get_settings_page_url($slug)
        {
        }
    }
    class WPML_LS_Inline_Styles
    {
        /* @var WPML_LS_Templates $templates */
        private $templates;
        /* @var WPML_LS_Settings $settings */
        private $settings;
        /* @var WPML_LS_Model_Build $model_build */
        private $model_build;
        /**
         * WPML_Language_Switcher_Render_Assets constructor.
         *
         * @param WPML_LS_Templates   $templates
         * @param WPML_LS_Settings    $settings
         * @param WPML_LS_Model_Build $model_build
         */
        public function __construct($templates, $settings, $model_build)
        {
        }
        public function init_hooks()
        {
        }
        /**
         * @param WPML_LS_Slot $slot
         *
         * @return string
         */
        private function get_slot_color_picker_css($slot)
        {
        }
        /**
         * @param WPML_LS_Slot $slot
         *
         * @return string
         */
        private function get_slot_color_picker_css_for_menus($slot)
        {
        }
        /**
         * @param WPML_LS_Slot $slot
         *
         * @return string
         */
        private function get_slot_color_picker_css_for_widgets_and_statics($slot)
        {
        }
        /**
         * @param array $slots
         *
         * @return string
         */
        public function get_slots_inline_styles($slots)
        {
        }
        /**
         * @return string
         */
        public function get_additional_style()
        {
        }
        public function wp_enqueue_scripts_action()
        {
        }
        private function enqueue_inline_styles()
        {
        }
        /**
         * @param array $active_slots
         *
         * @return bool|mixed|null|string
         */
        private function get_first_valid_style_handler($active_slots)
        {
        }
        public function admin_output()
        {
        }
        /**
         * @param WPML_LS_Slot $slot
         * @param string       $css
         *
         * @return string
         */
        private function get_raw_inline_style_tag($slot, $css)
        {
        }
        /**
         * @param string $css
         *
         * @return string
         */
        private function sanitize_css($css)
        {
        }
    }
    class WPML_LS_Model_Build extends \WPML_SP_User
    {
        const LINK_CSS_CLASS = 'wpml-ls-link';
        /* @var WPML_LS_Settings $settings */
        private $settings;
        /* @var WPML_Mobile_Detect $mobile_detect */
        private $mobile_detect;
        /* @var bool $is_touch_screen */
        private $is_touch_screen = \false;
        /* @var string $css_prefix */
        private $css_prefix;
        private $allowed_vars = ['languages' => 'array', 'current_language_code' => 'string', 'css_classes' => 'string', 'css_classes_link' => 'string', 'backward_compatibility' => 'array'];
        private $allowed_language_vars = ['code' => 'string', 'url' => 'string', 'flag_url' => 'string', 'flag_title' => 'string', 'flag_alt' => 'string', 'native_name' => 'string', 'display_name' => 'string', 'is_current' => 'bool', 'css_classes' => 'string', 'db_id' => 'string', 'menu_item_parent' => 'mixed', 'is_parent' => 'bool', 'backward_compatibility' => 'array', 'flag_width' => 'int', 'flag_height' => 'int'];
        /**
         * WPML_Language_Switcher_Render_Model constructor.
         *
         * @param WPML_LS_Settings $settings
         * @param SitePress        $sitepress
         * @param string           $css_prefix
         */
        public function __construct($settings, $sitepress, $css_prefix)
        {
        }
        /**
         * @param WPML_LS_Slot $slot
         * @param array        $template_data
         *
         * @return array
         */
        public function get($slot, $template_data = [])
        {
        }
        /**
         * @param WPML_LS_Slot $slot
         *
         * @return string
         */
        public function get_slot_css_classes($slot)
        {
        }
        /**
         * @param string $group
         * @param string $slug
         *
         * @return string
         */
        public function get_slot_css_main_class($group, $slug)
        {
        }
        /**
         * @return string
         */
        public function get_css_prefix()
        {
        }
        /**
         * @param WPML_LS_Slot $slot
         * @param array        $template_data
         *
         * @return array
         */
        private function get_language_items($slot, $template_data)
        {
        }
        /**
         * @param array  $languages
         * @param string $order_by
         * @param string $order_way
         *
         * @return array
         */
        private function order_languages($languages, $order_by, $order_way)
        {
        }
        /**
         * @param string $url
         * @param array  $template_data
         *
         * @return string
         */
        private function filter_flag_url($url, $template_data = [])
        {
        }
        /**
         * @param WPML_LS_Slot $slot
         * @param string       $code
         *
         * @return array
         */
        private function get_language_css_classes($slot, $code)
        {
        }
        /**
         * @param array $classes
         *
         * @return array
         */
        private function add_user_agent_touch_device_classes($classes)
        {
        }
        /**
         * @return bool
         */
        private function needs_backward_compatibility()
        {
        }
        /**
         * @param string       $code
         * @param WPML_LS_Slot $slot
         *
         * @return string
         */
        private function get_menu_item_id($code, $slot)
        {
        }
        /**
         * @param array $vars
         * @param array $allowed_vars
         *
         * @return array
         */
        private function sanitize_vars($vars, $allowed_vars)
        {
        }
        /**
         * @param array        $lang
         * @param WPML_LS_Slot $slot
         *
         * @return array
         */
        private function add_backward_compatibility_to_languages($lang, $slot)
        {
        }
        /**
         * @param array        $vars
         * @param WPML_LS_Slot $slot
         *
         * @return mixed
         */
        private function add_backward_compatibility_to_wrapper($vars, $slot)
        {
        }
        /**
         * @param string      $template_slug
         * @param string|null $type
         *
         * @return bool
         */
        private function is_legacy_template($template_slug, $type = \null)
        {
        }
    }
    class WPML_LS_Display_As_Translated_Link
    {
        /** @var SitePress $sitepress */
        private $sitepress;
        /** @var IWPML_URL_Converter_Strategy $url_converter */
        private $url_converter;
        /** @var WP_Query $wp_query */
        private $wp_query;
        /** @var WPML_Translation_Element_Factory $element_factory */
        private $element_factory;
        /** @var string $default_language */
        private $default_language;
        /** @var string $processed_language */
        private $processed_language;
        public function __construct(\SitePress $sitepress, \IWPML_URL_Converter_Strategy $url_converter, \WP_Query $wp_query, \WPML_Translation_Element_Factory $element_factory)
        {
        }
        public function get_url($translations, $lang)
        {
        }
        private function get_post_url($translations, $lang, $queried_object)
        {
        }
        private function get_term_url($translations, $lang, $queried_object)
        {
        }
        /**
         * The permalink needs to be adjusted when the URL structure contains the category tag (%category%).
         *
         * @param WP_Term $cat
         *
         * @return WP_Term
         */
        public function adjust_category_in_post_permalink($cat)
        {
        }
    }
    class WPML_LS_Admin_UI extends \WPML_Templates_Factory
    {
        const NONCE_NAME = 'wpml-language-switcher-admin';
        const MAIN_UI_TEMPLATE = 'layout-main.twig';
        const RESET_UI_TEMPLATE = 'layout-reset.twig';
        const BUTTON_TEMPLATE = 'layout-slot-edit-button.twig';
        const SLOT_SLUG_PLACEHOLDER = '%id%';
        const RESET_NONCE_NAME = 'wpml-language-switcher-reset';
        /* @var WPML_LS_Templates $templates */
        private $templates;
        /* @var WPML_LS_Settings $settings */
        private $settings;
        /* @var WPML_LS_Render $render */
        private $render;
        /* @var WPML_LS_Inline_Styles $inline_styles */
        private $inline_styles;
        /* @var WPML_LS_Assets $assets */
        private $assets;
        /* @var SitePress $sitepress */
        private $sitepress;
        /**
         * WPML_Language_Switcher_Menu constructor.
         *
         * @param WPML_LS_Templates     $templates
         * @param WPML_LS_Settings      $settings
         * @param WPML_LS_Render        $render
         * @param WPML_LS_Inline_Styles $inline_styles
         * @param SitePress             $sitepress
         * @param WPML_LS_Assets        $assets
         */
        public function __construct($templates, $settings, $render, $inline_styles, $sitepress, $assets = \null)
        {
        }
        public function init_hooks()
        {
        }
        /**
         * @return string
         */
        public static function get_page_hook()
        {
        }
        /**
         * @param string $hook
         */
        public function admin_enqueue_scripts_action($hook)
        {
        }
        public function admin_head_action()
        {
        }
        public function save_settings_action()
        {
        }
        /**
         * @param array $new_settings
         */
        private function maybe_complete_setup_wizard_step($new_settings)
        {
        }
        public function update_preview_action()
        {
        }
        /**
         * @param string $key
         *
         * @return mixed|null|string
         */
        private function parse_request_settings($key)
        {
        }
        /**
         * @return bool
         */
        private function has_valid_nonce()
        {
        }
        /**
         * @param array $items
         *
         * @return array
         */
        public function languages_navigation_items_filter($items)
        {
        }
        public function after_languages_url_format_action()
        {
        }
        /**
         * @param string|bool $theme_wpml_config_file
         */
        public function after_wpml_love_action($theme_wpml_config_file)
        {
        }
        /**
         * @param string     $type 'sidebars', 'menus', 'statics'
         * @param string|int $slug_or_id
         *
         * @return string
         */
        public function get_button_to_edit_slot($type, $slug_or_id)
        {
        }
        protected function init_template_base_dir()
        {
        }
        /**
         * @return string
         */
        public function get_template()
        {
        }
        /**
         * @return array
         */
        private function get_all_previews()
        {
        }
        /**
         * This method is compulsory but should not be used
         * Use "get_main_ui_model" and "get_reset_ui_model" instead
         *
         * @return array
         */
        public function get_model()
        {
        }
        /**
         * @return array
         */
        public function get_main_ui_model()
        {
        }
        /**
         * @return array
         */
        public function get_misc_strings()
        {
        }
        /**
         * @return array
         */
        public function get_tooltip_strings()
        {
        }
        /**
         * @return array
         */
        public function get_options_section_strings()
        {
        }
        /**
         * @return array
         */
        public function get_menus_section_strings()
        {
        }
        /**
         * @return array
         */
        public function get_sidebars_section_strings()
        {
        }
        /**
         * @return array
         */
        public function get_footer_section_strings()
        {
        }
        /**
         * @return array
         */
        public function get_post_translations_strings()
        {
        }
        /**
         * @return array
         */
        public function get_shortcode_actions_strings()
        {
        }
        /**
         * @return array
         */
        public function get_color_picker_strings()
        {
        }
        /**
         * @return array
         */
        public function get_javascript_strings()
        {
        }
        /**
         * @param string|bool $theme_wpml_config_file
         *
         * @return array
         */
        public function get_reset_ui_model($theme_wpml_config_file)
        {
        }
        /**
         * @return array
         */
        private function get_notifications()
        {
        }
    }
    /**
     * Class WPML_LS_Slot
     */
    class WPML_LS_Slot
    {
        /* @var array $properties */
        private $properties = array();
        /* @var array $protected_properties */
        private $protected_properties = array('slot_group', 'slot_slug');
        /**
         * WPML_Language_Switcher_Slot constructor.
         *
         * @param array $args
         */
        public function __construct(array $args = array())
        {
        }
        /**
         * @param string $property
         *
         * @return mixed
         */
        public function get($property)
        {
        }
        /**
         * @param string $property
         * @param mixed  $value
         */
        public function set($property, $value)
        {
        }
        /**
         * @return mixed|string|null
         */
        public function group()
        {
        }
        /**
         * @return mixed|string|null
         */
        public function slug()
        {
        }
        /**
         * @return bool
         */
        public function is_menu()
        {
        }
        /**
         * @return bool
         */
        public function is_sidebar()
        {
        }
        /**
         * @return bool
         */
        public function is_footer()
        {
        }
        /**
         * @return bool
         */
        public function is_post_translations()
        {
        }
        /**
         * @return bool
         */
        public function is_shortcode_actions()
        {
        }
        /**
         * @return bool
         */
        public function is_enabled()
        {
        }
        /**
         * @return mixed
         */
        public function template()
        {
        }
        /**
         * @return mixed
         */
        public function template_string()
        {
        }
        /**
         * @param array $args
         */
        private function set_properties(array $args)
        {
        }
        /**
         * @return array
         */
        protected function get_allowed_properties()
        {
        }
        /**
         * @param mixed $value
         * @param array $meta_data
         *
         * @return mixed
         */
        private function sanitize($value, array $meta_data)
        {
        }
        /**
         * The use of a plain object does not work in Twig
         * e.g: slot_settings[ option.name ~ "_normal" ] (see in panel-colors.twig)
         *
         * @return array
         */
        public function get_model()
        {
        }
        /**
         * @param string $slug
         *
         * @return string|null
         */
        protected function get_core_template($slug)
        {
        }
    }
    class WPML_LS_Shortcode_Actions_Slot extends \WPML_LS_Slot
    {
        /**
         * @return array
         */
        protected function get_allowed_properties()
        {
        }
        public function is_enabled()
        {
        }
    }
    class WPML_LS_Menu_Slot extends \WPML_LS_Slot
    {
        /**
         * @return bool
         */
        public function is_enabled()
        {
        }
        /**
         * @return array
         */
        protected function get_allowed_properties()
        {
        }
    }
    class WPML_LS_Post_Translations_Slot extends \WPML_LS_Slot
    {
        /**
         * @return array
         */
        protected function get_allowed_properties()
        {
        }
    }
    class WPML_LS_Footer_Slot extends \WPML_LS_Slot
    {
        /**
         * @return array
         */
        protected function get_allowed_properties()
        {
        }
    }
    class WPML_LS_Sidebar_Slot extends \WPML_LS_Slot
    {
        /**
         * @return bool
         */
        public function is_enabled()
        {
        }
        /**
         * @return array
         */
        protected function get_allowed_properties()
        {
        }
    }
    class WPML_LS_Slot_Factory
    {
        /**
         * @param array|WPML_LS_Slot $args
         *
         * @return WPML_LS_Slot
         */
        public function get_slot($args)
        {
        }
        /**
         * @param string $slot_group
         *
         * @return array
         */
        public function get_default_slot_arguments($slot_group)
        {
        }
        /**
         * @param string $slot_group
         *
         * @return WPML_LS_Slot
         */
        public function get_default_slot($slot_group)
        {
        }
        /**
         * @param string $slug
         *
         * @return string|null
         */
        public function get_core_templates($slug)
        {
        }
    }
    class WPML_LS_Menu_Item
    {
        /**
         * @see wp_setup_nav_menu_item() to decorate the object
         */
        public $ID;
        // The term_id if the menu item represents a taxonomy term.
        public $attr_title;
        // The title attribute of the link element for this menu item.
        public $classes = array();
        // The array of class attribute values for the link element of this menu item.
        public $db_id;
        // The DB ID of this item as a nav_menu_item object, if it exists (0 if it doesn't exist).
        public $description;
        // The description of this menu item.
        public $menu_item_parent;
        // The DB ID of the nav_menu_item that is this item's menu parent, if any. 0 otherwise.
        public $object = 'wpml_ls_menu_item';
        // The type of object originally represented, such as "category," "post", or "attachment."
        public $object_id;
        // The DB ID of the original object this menu item represents, e.g. ID for posts and term_id for categories.
        public $post_parent;
        // The DB ID of the original object's parent object, if any (0 otherwise).
        public $post_title;
        // A "no title" label if menu item represents a post that lacks a title.
        public $target;
        // The target attribute of the link element for this menu item.
        public $title;
        // The title of this menu item.
        public $type = 'wpml_ls_menu_item';
        // The family of objects originally represented, such as "post_type" or "taxonomy."
        public $type_label;
        // The singular label used to describe this type of menu item.
        public $url;
        // The URL to which this menu item points.
        public $xfn;
        // The XFN relationship expressed in the link of this menu item.
        public $_invalid = \false;
        // Whether the menu item represents an object that no longer exists.
        public $menu_order;
        public $post_type = 'nav_menu_item';
        // * Extra property => see [wpmlcore-3855]
        /**
         * WPML_LS_Menu_Item constructor.
         *
         * @param array  $language
         * @param string $item_content
         */
        public function __construct($language, $item_content)
        {
        }
        /**
         * @param array  $lang
         * @param string $item_content
         */
        private function decorate_object($lang, $item_content)
        {
        }
        /**
         * @param string $property
         *
         * @return mixed
         */
        public function __get($property)
        {
        }
    }
    class WPML_LS_Migration
    {
        const ICL_OPTIONS_SLUG = 'icl_sitepress_settings';
        /* @var WPML_LS_Settings $settings */
        private $settings;
        /* @var SitePress $sitepress */
        private $sitepress;
        /* @var WPML_LS_Slot_Factory $slot_factory */
        private $slot_factory;
        /* @var array $old_settings */
        private $old_settings;
        /**
         * WPML_LS_Migration constructor.
         *
         * @param WPML_LS_Settings     $settings
         * @param SitePress            $sitepress
         * @param WPML_LS_Slot_Factory $slot_factory
         */
        public function __construct($settings, $sitepress, $slot_factory)
        {
        }
        /**
         * @param array $old_settings
         *
         * @return mixed
         */
        public function get_converted_settings($old_settings)
        {
        }
        /**
         * @return array
         */
        private function get_converted_global_settings()
        {
        }
        /**
         * @return array
         */
        private function get_converted_menus_settings()
        {
        }
        /**
         * @return array
         */
        private function get_converted_sidebars_settings()
        {
        }
        /**
         * @return array
         */
        private function get_converted_footer_settings()
        {
        }
        /**
         * @return array
         */
        private function get_converted_post_translations_settings()
        {
        }
        /**
         * @return array
         */
        private function get_converted_shortcode_actions_settings()
        {
        }
        /**
         * @param string $context
         *
         * @return array
         */
        private function get_color_picker_settings_for($context)
        {
        }
        /**
         * @param string $key
         *
         * @return mixed|string|int|null
         */
        private function get_old_setting($key)
        {
        }
        /**
         * @param string $slot_type
         *
         * @return mixed
         */
        private function get_template_for($slot_type)
        {
        }
        /**
         * @return bool
         */
        private function has_old_keys()
        {
        }
        /**
         * @since 3.7.0 Convert menu LS handled now by ID instead of slugs previously
         *
         * @param array $settings
         *
         * @return array
         */
        public function convert_menu_ids($settings)
        {
        }
    }
    class WPML_LS_Settings_Sanitize
    {
        /**
         * @return array
         */
        private function get_global_settings_keys()
        {
        }
        /**
         * @param array $s
         * @return array
         */
        public function sanitize_all_settings($s)
        {
        }
        /**
         * @param array $settings_slice
         * @param array $allowed_keys
         *
         * @return array
         */
        private function sanitize_settings($settings_slice, $allowed_keys)
        {
        }
    }
    /**
     * Class WPML_LS_Public_API
     */
    class WPML_LS_Public_API
    {
        /** @var WPML_LS_Settings $settings */
        private $settings;
        /** @var WPML_LS_Render $render */
        private $render;
        /** @var SitePress $sitepress */
        protected $sitepress;
        /** @var WPML_LS_Slot_Factory */
        private $slot_factory;
        /**
         * WPML_LS_Public_API constructor.
         *
         * @param WPML_LS_Settings     $settings
         * @param WPML_LS_Render       $render
         * @param SitePress            $sitepress
         * @param WPML_LS_Slot_Factory $slot_factory
         */
        public function __construct(\WPML_LS_Settings $settings, \WPML_LS_Render $render, \SitePress $sitepress, \WPML_LS_Slot_Factory $slot_factory = \null)
        {
        }
        /**
         * @param array       $args
         * @param string|null $twig_template
         *
         * @return string
         */
        protected function render($args, $twig_template = \null)
        {
        }
        /**
         * @param array $args
         *
         * @return array
         */
        private function get_default_slot_args($args)
        {
        }
        /**
         * @param array $args
         *
         * @return array
         */
        protected function convert_shortcode_args_aliases($args)
        {
        }
        /**
         * @return array
         */
        public static function get_argument_aliases()
        {
        }
        /**
         * @return WPML_LS_Slot_Factory
         */
        private function get_slot_factory()
        {
        }
    }
    /**
     * Class WPML_LS_Shortcodes
     */
    class WPML_LS_Shortcodes extends \WPML_LS_Public_API
    {
        public function init_hooks()
        {
        }
        /**
         * @param array|string $args
         * @param string|null  $content
         * @param string       $tag
         *
         * @return string
         */
        public function callback($args, $content = \null, $tag = '')
        {
        }
        /**
         * @param array  $args
         * @param string $tag
         *
         * @return mixed
         */
        private function parse_legacy_shortcodes($args, $tag)
        {
        }
    }
    class WPML_LS_Actions extends \WPML_LS_Public_API
    {
        public function init_hooks()
        {
        }
        /**
         * @param array       $args
         * @param string|null $twig_template
         */
        public function callback($args, $twig_template = \null)
        {
        }
        /**
         * @param array $args
         *
         * @return array
         */
        private function parse_legacy_actions($args)
        {
        }
    }
    class WPML_LS_Assets
    {
        /* @var array $enqueued_templates */
        private $enqueued_templates = array();
        /* @var WPML_LS_Templates $templates */
        private $templates;
        /* @var WPML_LS_Settings $settings */
        private $settings;
        /**
         * WPML_Language_Switcher_Render_Assets constructor.
         *
         * @param WPML_LS_Templates $templates
         * @param WPML_LS_Settings  $settings
         */
        public function __construct($templates, &$settings)
        {
        }
        public function init_hooks()
        {
        }
        public function wp_enqueue_scripts_action()
        {
        }
        /**
         * @param string $slug
         */
        public function maybe_late_enqueue_template($slug)
        {
        }
        /**
         * @param string           $slug
         * @param WPML_LS_Template $template
         */
        private function enqueue_template_resources($slug, $template)
        {
        }
    }
    class WPML_LS_Templates
    {
        const CONFIG_FILE = 'config.json';
        const OPTION_NAME = 'wpml_language_switcher_template_objects';
        /** @var string $uploads_path */
        private $uploads_path;
        /**
         * @var WPML_File
         */
        private $wpml_file;
        /* @var array $templates Collection of WPML_LS_Template */
        private $templates = \false;
        /* @var string $ds */
        private $ds = \DIRECTORY_SEPARATOR;
        public function __construct(\WPML_File $wpml_file = \null)
        {
        }
        public function init_hooks()
        {
        }
        /**
         * @return array
         */
        public function after_setup_theme_action()
        {
        }
        public function activated_plugin_action()
        {
        }
        /**
         * @param null|array $in_array
         *
         * @return array
         */
        public function get_templates($in_array = \null)
        {
        }
        /**
         * @param string $template_slug
         *
         * @return WPML_LS_Template
         */
        public function get_template($template_slug)
        {
        }
        public function get_all_templates_data()
        {
        }
        /**
         * @return array
         */
        private function init_available_templates()
        {
        }
        /**
         * @param array $dirs_to_scan
         *
         * @return array
         */
        private function scan_template_paths($dirs_to_scan)
        {
        }
        /**
         * @param string $template_path
         *
         * @return array
         */
        private function parse_template_config($template_path)
        {
        }
        /**
         * @param string $ext
         * @param string $template_path
         * @param array  $config
         *
         * @return array|null
         */
        private function get_files($ext, $template_path, $config)
        {
        }
        /**
         * @param mixed|string|null $name
         * @param string            $path
         *
         * @return string
         */
        private function get_unique_name($name, $path)
        {
        }
        /**
         * @param string $path
         *
         * @return bool
         */
        private function is_core_template($path)
        {
        }
        private function get_templates_from_transient()
        {
        }
        /**
         * @param WPML_LS_Template[] $templates
         *
         * @return bool
         */
        private function are_template_paths_valid($templates)
        {
        }
        /**
         * @return null|string
         */
        private function get_uploads_path()
        {
        }
    }
}
namespace WPML\LanguageSwitcher\AjaxNavigation {
    class Hooks implements \IWPML_Frontend_Action, \IWPML_DIC_Action
    {
        public function add_hooks()
        {
        }
        public function enqueueScripts()
        {
        }
        /**
         * @return bool
         */
        private function isEnabled()
        {
        }
    }
}
namespace {
    class WPML_LS_Settings
    {
        const SETTINGS_SLUG = 'wpml_language_switcher';
        const DEFAULT_FLAG_WIDTH = 18;
        const DEFAULT_FLAG_HEIGHT = 12;
        /** @var  SitePress $sitepress */
        protected $sitepress;
        /* @var array $settings */
        private $settings;
        /* @var WPML_LS_Templates $templates */
        private $templates;
        /* @var WPML_LS_Slot_Factory $slot_factory */
        private $slot_factory;
        /* @var WPML_LS_Migration $migration */
        private $migration;
        /* @var WPML_LS_Settings_Sanitize $sanitizer */
        private $sanitizer;
        /* @var WPML_LS_Settings_Strings $strings */
        private $strings;
        /* @var WPML_LS_Settings_Color_Presets $color_presets */
        private $color_presets;
        /**
         * WPML_LS_Settings constructor.
         *
         * @param WPML_LS_Templates    $templates
         * @param SitePress            $sitepress
         * @param WPML_LS_Slot_Factory $slot_factory
         * @param WPML_LS_Migration    $migration
         */
        public function __construct($templates, $sitepress, $slot_factory, $migration = \null)
        {
        }
        public function init_hooks()
        {
        }
        /**
         * @param array $ls_config
         */
        public function reset_ls_settings_action(array $ls_config)
        {
        }
        /**
         * @return string|void
         */
        public function get_restore_redirect_url()
        {
        }
        /**
         * @param array $arr
         *
         * @return array
         */
        public function read_config_settings_recursive($arr)
        {
        }
        /**
         * @return string
         */
        public function get_settings_base_slug()
        {
        }
        /**
         * @return array
         */
        public function get_settings()
        {
        }
        /**
         * @return array
         */
        public function get_settings_model()
        {
        }
        /**
         * @return array
         */
        private function get_default_settings()
        {
        }
        /**
         * @return array
         */
        private function get_shared_settings_keys()
        {
        }
        private function init_shared_settings()
        {
        }
        /**
         * @param array<string,mixed> $new_settings
         */
        private function persist_shared_settings($new_settings)
        {
        }
        private function maybe_init_settings()
        {
        }
        private function handle_corrupted_settings()
        {
        }
        /**
         * @param array $corrupted_settings
         */
        private function add_corrupted_settings_notice($corrupted_settings)
        {
        }
        /**
         * @return array
         */
        public function get_registered_sidebars()
        {
        }
        /**
         * @return array
         */
        public function get_available_menus()
        {
        }
        /**
         * @param array<string,mixed> $new_settings
         */
        private function persist_settings($new_settings)
        {
        }
        /**
         * @param string $slot_group
         * @param string $slot_slug
         *
         * @return WPML_LS_Slot
         */
        public function get_slot($slot_group, $slot_slug)
        {
        }
        /**
         * @param int $term_id
         *
         * @return WPML_LS_Slot
         */
        public function get_menu_settings_from_id($term_id)
        {
        }
        /**
         * @return array
         */
        public function get_active_slots()
        {
        }
        /**
         * @return array
         */
        public function get_active_templates()
        {
        }
        /**
         * @param string $key
         *
         * @return mixed string|array|null
         */
        public function get_setting($key)
        {
        }
        /**
         * @param array $new_settings
         */
        public function save_settings($new_settings)
        {
        }
        /**
         * @param array $settings
         *
         * @return array
         */
        public function convert_slot_settings_to_objects(array $settings)
        {
        }
        /**
         * @param array<string,\WPML_LS_Slot> $sidebar_slots
         */
        private function synchronize_widget_instances($sidebar_slots)
        {
        }
        /** @return array */
        private function get_refreshed_sidebars_widgets()
        {
        }
        /**
         * @param array $old_sidebars
         * @param array $sidebars
         */
        public function update_option_sidebars_widgets_action($old_sidebars, $sidebars)
        {
        }
        /**
         * @param string $sidebar_slug
         * @param array  $widgets
         */
        private function synchronize_sidebar_settings($sidebar_slug, $widgets)
        {
        }
        /**
         * @param array      $instance
         * @param array      $new_instance
         * @param array|null $old_instance
         * @param WP_Widget  $widget
         *
         * @return array
         */
        public function widget_update_callback_filter(array $instance, array $new_instance, $old_instance, \WP_Widget $widget)
        {
        }
        /**
         * @param array $widget_instance
         *
         * @return WPML_LS_Slot
         */
        private function get_slot_from_widget_instance($widget_instance)
        {
        }
        /**
         * Find in which sidebar a language switcher instance is set
         *
         * @param string $widget_to_find
         *
         * @return bool|string
         */
        private function find_parent_sidebar($widget_to_find)
        {
        }
        /**
         * Find the first language switcher in an array of widgets
         *
         * @param array $widgets
         *
         * @return string
         */
        private function find_first_ls_widget($widgets)
        {
        }
        /**
         * @return array
         */
        public function get_ordered_languages()
        {
        }
        /**
         * @return array
         */
        public function get_default_color_schemes()
        {
        }
        /**
         * @param mixed|null|string $slug
         *
         * @return mixed|array|string
         */
        public function get_core_templates($slug = \null)
        {
        }
        /**
         * @param string|null $template_slug
         *
         * @return bool
         */
        public function can_load_styles($template_slug = \null)
        {
        }
        /**
         * @param string|null $template_slug
         *
         * @return bool
         */
        public function can_load_script($template_slug = \null)
        {
        }
        /**
         * @return WPML_LS_Migration
         */
        private function migration()
        {
        }
    }
    class WPML_Get_LS_Languages_Status
    {
        private static $the_instance;
        private $in_get_ls_languages = \false;
        public function is_getting_ls_languages()
        {
        }
        public function start()
        {
        }
        public function end()
        {
        }
        /**
         * @return WPML_Get_LS_Languages_Status
         */
        public static function get_instance()
        {
        }
        /**
         * @param WPML_Get_LS_Languages_Status $instance
         */
        public static function set_instance($instance)
        {
        }
    }
    class WPML_LS_Dependencies_Factory
    {
        /* @var SitePress $sitepress */
        private $sitepress;
        /* @var array $parameters */
        private $parameters;
        /* @var WPML_LS_Templates $templates */
        private $templates;
        /* @var WPML_LS_Slot_Factory $slot_factory */
        private $slot_factory;
        /* @var WPML_LS_Settings $settings */
        private $settings;
        /* @var WPML_LS_Model_Build $model_build */
        private $model_build;
        /* @var WPML_LS_Inline_Styles $inline_styles */
        private $inline_styles;
        /* @var WPML_LS_Render $render */
        private $render;
        /* @var WPML_LS_Admin_UI $admin_ui */
        private $admin_ui;
        /** @var WPML_LS_Shortcodes */
        private $shortcodes;
        /** @var  WPML_LS_Actions */
        private $actions;
        /**
         * WPML_LS_Dependencies_Factory constructor.
         *
         * @param SitePress $sitepress
         * @param array     $parameters
         */
        public function __construct(\SitePress $sitepress, array $parameters = [])
        {
        }
        /**
         * @return SitePress
         */
        public function sitepress()
        {
        }
        /**
         * @param string $key
         *
         * @return mixed
         */
        public function parameter($key)
        {
        }
        /**
         * @return WPML_LS_Templates
         */
        public function templates()
        {
        }
        /**
         * @return WPML_LS_Slot_Factory
         */
        public function slot_factory()
        {
        }
        /**
         * @return WPML_LS_Settings
         */
        public function settings()
        {
        }
        /**
         * @return WPML_LS_Model_Build
         */
        public function model_build()
        {
        }
        /**
         * @return WPML_LS_Inline_Styles
         */
        public function inline_styles()
        {
        }
        /**
         * @return WPML_LS_Render
         */
        public function render()
        {
        }
        /**
         * @return WPML_LS_Admin_UI
         */
        public function admin_ui()
        {
        }
        /**
         * @return WPML_LS_Shortcodes
         */
        public function shortcodes()
        {
        }
        /**
         * @return WPML_LS_Shortcodes
         */
        public function actions()
        {
        }
    }
    class WPML_LS_Render extends \WPML_SP_User
    {
        const THE_CONTENT_FILTER_PRIORITY = 100;
        /* @var WPML_LS_Template $current_template */
        private $current_template;
        /* @var WPML_LS_Templates $templates */
        private $templates;
        /* @var WPML_LS_Settings $settings */
        private $settings;
        /* @var WPML_LS_Model_Build $model_build */
        private $model_build;
        /* @var WPML_LS_Inline_Styles &$inline_styles */
        private $inline_styles;
        /* @var WPML_LS_Assets $assets */
        private $assets;
        /** @var bool */
        private $wpml_ls_exclude_in_menu;
        /**
         * WPML_Language_Switcher_Menu constructor.
         *
         * @param WPML_LS_Templates     $templates
         * @param WPML_LS_Settings      $settings
         * @param WPML_LS_Model_Build   $model_build
         * @param WPML_LS_Inline_Styles $inline_styles
         * @param SitePress             $sitepress
         */
        public function __construct($templates, $settings, $model_build, $inline_styles, $sitepress)
        {
        }
        public function init_hooks()
        {
        }
        /**
         * @param WPML_LS_Slot $slot
         *
         * @return string
         */
        public function render($slot)
        {
        }
        /**
         * @param string       $html
         * @param array        $model
         * @param WPML_LS_Slot $slot
         *
         * @return string
         */
        private function filter_html($html, $model, $slot)
        {
        }
        /**
         * @param WPML_LS_Slot $slot
         *
         * @return array
         */
        public function get_preview($slot)
        {
        }
        /**
         * @param array   $items
         * @param WP_Term $menu
         *
         * @return array
         */
        public function wp_get_nav_menu_items_filter($items, $menu)
        {
        }
        private function is_for_menu_panel_in_customizer()
        {
        }
        private function should_not_alter_menu()
        {
        }
        /**
         * @param WP_Post[]           $items
         * @param WPML_LS_Menu_Item[] $lang_items
         * @param bool                $is_before
         *
         * @return array
         */
        private function merge_menu_items($items, $lang_items, $is_before)
        {
        }
        /**
         * @param WPML_LS_Slot $slot
         *
         * @return array
         */
        private function get_menu_items($slot)
        {
        }
        /**
         * @link https://onthegosystems.myjetbrains.com/youtrack/issue/wpmlcore-4706#comment=102-231339
         *
         * @param WP_Post|WPML_LS_Menu_Item|object $item
         *
         * @return object $item
         */
        public function maybe_repair_menu_item($item)
        {
        }
        /**
         * @param WPML_LS_Slot $slot
         *
         * @return string
         */
        private function render_menu_preview($slot)
        {
        }
        /**
         * @param WPML_LS_Slot $slot
         *
         * @return bool true if the switcher is to be hidden
         */
        private function is_hidden($slot)
        {
        }
        public function is_widgets_page()
        {
        }
        /**
         * @param string $content
         *
         * @return string
         */
        public function the_content_filter($content)
        {
        }
        /**
         * @param WPML_LS_Slot $slot
         *
         * @return mixed|string|void
         */
        public function post_translations_label($slot)
        {
        }
        public function wp_footer_action()
        {
        }
    }
    /**
     * Class WPML_Language_Switcher
     *
     * Main class
     */
    class WPML_Language_Switcher extends \WPML_SP_User
    {
        /* @var array $dependencies */
        private $dependencies;
        /**
         * WPML_Language_Switcher constructor.
         *
         * @param SitePress                    $sitepress
         * @param WPML_LS_Dependencies_Factory $dependencies
         */
        public function __construct(\SitePress $sitepress, \WPML_LS_Dependencies_Factory $dependencies = \null)
        {
        }
        public function init_hooks()
        {
        }
        public function init_admin_hooks()
        {
        }
        /**
         * @param string $group
         * @param string $slot
         *
         * @return WPML_LS_Slot
         */
        public function get_slot($group, $slot)
        {
        }
        /**
         * @param WPML_LS_Slot $slot
         *
         * @return string
         */
        public function render($slot)
        {
        }
        /**
         * @param string     $type 'sidebars', 'menus', 'statics'
         * @param string|int $slug_or_id
         *
         * @return string
         */
        public function get_button_to_edit_slot($type, $slug_or_id)
        {
        }
        /**
         * @return array
         */
        public static function parameters()
        {
        }
    }
    class WPML_LS_Settings_Strings
    {
        private $strings_meta = array('availability_text' => array('domain' => 'WPML', 'name' => 'Text for alternative languages for posts'), 'widget_title' => array('domain' => 'Widgets', 'name' => 'widget title'));
        /* @var WPML_LS_Slot_Factory $slot_factory */
        private $slot_factory;
        public function __construct($slot_factory)
        {
        }
        /**
         * @param array $new_settings
         * @param array $old_settings
         */
        public function register_all($new_settings, $old_settings)
        {
        }
        /**
         * @param array $settings
         *
         * @return array
         */
        public function translate_all($settings)
        {
        }
        /**
         * @param WPML_LS_Slot $slot
         * @param WPML_LS_Slot $old_slot
         */
        private function register_slot_strings(\WPML_LS_Slot $slot, \WPML_LS_Slot $old_slot)
        {
        }
        /**
         * @param WPML_LS_Slot $slot
         *
         * @return WPML_LS_Slot
         */
        private function translate_slot_strings($slot)
        {
        }
        /**
         * @param string $key
         * @param string $string_value
         *
         * @return string
         */
        private function get_string_name($key, $string_value)
        {
        }
    }
    class WPML_LS_Settings_Color_Presets
    {
        /**
         * @return array
         */
        public function get_defaults()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_XMLRPC extends \WPML_SP_User
    {
        private $xmlrpc_call_methods_for_save_post;
        /**
         * WPML_XMLRPC constructor.
         *
         * @param SitePress $sitepress
         */
        public function __construct(\SitePress $sitepress)
        {
        }
        public function init_hooks()
        {
        }
        function get_languages($args)
        {
        }
        public function get_post_trid($args)
        {
        }
        /**
         * @param int   $post_ID
         * @param array $args
         *
         * @throws \UnexpectedValueException
         * @throws \InvalidArgumentException
         */
        public function meta_weblog_xmlrpc_post_update_action($post_ID, $args)
        {
        }
        public function save_post_action($pidd, $post)
        {
        }
        /**
         * @param int      $post_ID
         * @param string   $post_type
         * @param string   $post_language_code
         * @param int|bool $trid
         *
         * @throws \InvalidArgumentException
         * @throws \UnexpectedValueException
         */
        private function set_post_language($post_ID, $post_type, $post_language_code, $trid = \false)
        {
        }
        public function xmlrpc_call($action)
        {
        }
        public function xmlrpc_methods($methods)
        {
        }
    }
    /**
     * Class WPML_Translation_Job_Factory
     *
     * Use `wpml_tm_load_job_factory` to get an instance of this class
     */
    class WPML_Translation_Job_Factory extends \WPML_Abstract_Job_Collection
    {
        /** @var  WPML_TM_Records $tm_records */
        private $tm_records;
        /**
         * @param WPML_TM_Records $tm_records
         */
        public function __construct(&$tm_records)
        {
        }
        /**
         * @return WPML_TM_Records
         */
        public function &tm_records()
        {
        }
        public function init_hooks()
        {
        }
        /**
         * Creates a local translation job for a given post and target language and returns the job_id of the created job.
         *
         * @param int      $post_id
         * @param string   $target_language_code
         * @param int|null $translator_id
         * @param int|null $sendFrom
         *
         * @return int|null
         */
        public function create_local_post_job($post_id, $target_language_code, $translator_id = \null, $sendFrom = \WPML\TM\API\Jobs::SENT_MANUALLY)
        {
        }
        public function create_local_job($element_id, $target_language_code, $translator_id, $element_type = \null, $sendFrom = \WPML\TM\API\Jobs::SENT_MANUALLY)
        {
        }
        public function get_translation_jobs_filter($jobs, $args)
        {
        }
        public function get_translation_job_filter($job_id, $include_non_translatable_elements = \false, $revisions = 0)
        {
        }
        /**
         * @param int  $job_id
         * @param bool $include_non_translatable_elements
         * @param int  $revisions
         * @param bool $as_job_instance returns WPML_Element_Translation_Job instead of plain object if true
         *
         * @return bool|stdClass|WPML_Element_Translation_Job
         */
        public function get_translation_job($job_id, $include_non_translatable_elements = \false, $revisions = 0, $as_job_instance = \false)
        {
        }
        /**
         * @param int $job_id
         *
         * @return bool|stdClass
         */
        public function get_translation_job_as_stdclass($job_id)
        {
        }
        /**
         * @param int $job_id
         *
         * @return bool|WPML_Element_Translation_Job
         */
        public function get_translation_job_as_active_record($job_id)
        {
        }
        /**
         * @param int $translation_id
         *
         * @return bool|stdClass|WPML_Element_Translation_Job
         */
        public function job_by_translation_id($translation_id)
        {
        }
        public function string_job_by_translation_id($string_translation_id)
        {
        }
        public function job_id_by_trid_and_lang($trid, $target_language_code)
        {
        }
        public function get_translation_jobs(array $args = array(), $only_ids = \false, $as_job_instances = \false, $default_sort_jobs = \false)
        {
        }
        /**
         * @param array $args
         * @param bool  $include_unassigned
         *
         * @return string
         */
        private function build_order_by_clause(array $args, $include_unassigned, $default_sort_jobs)
        {
        }
        private function add_data_to_post_jobs(array $jobs)
        {
        }
        /**
         * It outputs the HTML for displaying a language pair
         *
         * @param array $source The source data. Requires a `display_name` key and an optional `code` for the language code.
         * @param array $target The target data. Requires a `display_name` key and an optional `code` for the language code.
         *
         * @return string
         */
        private function get_language_pair(array $source, array $target)
        {
        }
        private function retrieve_job_data($job_ids)
        {
        }
        private function get_job_sql($where, $order_by, $only_ids = \false)
        {
        }
        public function get_translation_job_types_filter($value, $args)
        {
        }
        /**
         * @param int   $job_id
         * @param array $data
         */
        public function update_job_data($job_id, array $data)
        {
        }
        /**
         * @param int $job_id
         */
        public function delete_job_data($job_id)
        {
        }
        private function get_job_select($icl_translate_alias = 'iclt', $icl_translations_translated_alias = 't', $icl_translations_original_alias = 'ito', $icl_translation_status_alias = 's', $icl_translate_job_alias = 'j')
        {
        }
        private function add_job_elements($job, $include_non_translatable_elements)
        {
        }
        /**
         * @param $job_id
         * @param $post_id
         *
         * @return string
         */
        private function get_external_job_post_title($job_id, $post_id)
        {
        }
        private function complete_job_data($job, $include_non_translatable_elements, $revisions)
        {
        }
    }
    class WPML_TM_Post_Edit_Notices
    {
        const TEMPLATE_TRANSLATION_IN_PROGRESS = 'translation-in-progress.twig';
        const TEMPLATE_EDIT_ORIGINAL_TRANSLATION_IN_PROGRESS = 'edit-original-translation-in-progress.twig';
        const TEMPLATE_USE_PREFERABLY_TM_DASHBOARD = 'use-preferably-tm-dashboard.twig';
        const TEMPLATE_USE_PREFERABLY_TE = 'use-preferably-translation-editor.twig';
        const DO_NOT_SHOW_AGAIN_EDIT_ORIGINAL_TRANSLATION_IN_PROGRESS_ACTION = 'wpml_dismiss_post_edit_original_te_notice';
        const DO_NOT_SHOW_AGAIN_USE_PREFERABLY_TE_ACTION = 'wpml_dismiss_post_edit_te_notice';
        /** @var WPML_Post_Status $post_status */
        private $post_status;
        /** @var SitePress $sitepress */
        private $sitepress;
        /** @var IWPML_Template_Service $template_render */
        private $template_render;
        /** @var WPML_Super_Globals_Validation $super_globals */
        private $super_globals;
        /** @var WPML_TM_Translation_Status_Display $status_display */
        private $status_display;
        /** @var WPML_Translation_Element_Factory $element_factory */
        private $element_factory;
        /** @var WPML_TM_ATE $tm_ate */
        private $tm_ate;
        /**
         * @param WPML_Post_Status                   $post_status
         * @param SitePress                          $sitepress
         * @param IWPML_Template_Service             $template_render
         * @param WPML_Super_Globals_Validation      $super_globals
         * @param WPML_TM_Translation_Status_Display $status_display
         * @param WPML_Translation_Element_Factory   $element_factory
         */
        public function __construct(\WPML_Post_Status $post_status, \SitePress $sitepress, \IWPML_Template_Service $template_render, \WPML_Super_Globals_Validation $super_globals, \WPML_TM_Translation_Status_Display $status_display, \WPML_Translation_Element_Factory $element_factory, \WPML_TM_ATE $tm_ate)
        {
        }
        public function add_hooks()
        {
        }
        public function enqueue_assets()
        {
        }
        public function display_notices()
        {
        }
        public function do_not_display_it_again_to_user()
        {
        }
        public function do_not_display_it_again()
        {
        }
        /**
         * @return bool
         */
        private function is_valid_request($action)
        {
        }
        /**
         * @return bool
         */
        private function should_display_it_to_user($action)
        {
        }
        /**
         * @return bool
         */
        private function should_display_it($action)
        {
        }
        /**
         * @param WPML_Translation_Element $post_element
         *
         * @return bool
         */
        private function is_waiting_for_a_translations($post_element)
        {
        }
        /**
         * @param int|null $translation_status
         *
         * @return bool
         */
        private function is_waiting_for_a_translation($translation_status)
        {
        }
        /**
         * @param WPML_Post_Element $post_element
         *
         * @return string
         */
        private function get_translation_editor_link(\WPML_Post_Element $post_element)
        {
        }
    }
    class WPML_TM_TS_Instructions_Hooks implements \IWPML_Action
    {
        /** @var WPML_TM_TS_Instructions_Notice */
        private $notice;
        /**
         * WPML_TM_TS_Instructions_Hooks constructor.
         *
         * @param WPML_TM_TS_Instructions_Notice $notice
         */
        public function __construct(\WPML_TM_TS_Instructions_Notice $notice)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param stdClass $service
         * @param stdClass $project
         * @param array    $icl_translation_projects
         */
        public function display_message($service, $project, array $icl_translation_projects)
        {
        }
        public function add_hooks_on_init()
        {
        }
        public function enqueue_scripts()
        {
        }
        public function dismiss()
        {
        }
        /**
         * @return bool
         */
        private function has_completed_remote_jobs()
        {
        }
    }
    class WPML_TM_TS_Instructions_Notice
    {
        const NOTICE_ID = 'translation-service-instructions';
        const NOTICE_GROUP_ID = 'translation-service-instructions';
        const TEMPLATE = 'translation-service-instructions.twig';
        /** @var WPML_Notices */
        private $admin_notices;
        /** @var IWPML_Template_Service */
        private $template_service;
        public function __construct(\WPML_Notices $admin_notices, \IWPML_Template_Service $template_service)
        {
        }
        /**
         * @param stdClass $service
         */
        public function add_notice($service)
        {
        }
        public function remove_notice()
        {
        }
        /**
         * @return bool
         */
        public function exists()
        {
        }
        /**
         * @param stdClass $service
         *
         * @return string
         */
        private function get_notice_content($service)
        {
        }
        /**
         * @param stdClass $service
         *
         * @return array
         */
        private function get_model($service)
        {
        }
    }
    class WPML_TM_TS_Instructions_Hooks_Factory implements \IWPML_Backend_Action_Loader, \IWPML_AJAX_Action_Loader
    {
        /**
         * @return WPML_TM_TS_Instructions_Hooks
         */
        public function create()
        {
        }
        /**
         * @return WPML_TM_TS_Instructions_Notice
         */
        private function create_notice()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Notice_Action
    {
        private $dismiss;
        private $display_as_button;
        private $hide;
        private $text;
        private $url;
        private $group_to_dismiss;
        private $js_callback;
        private $dismiss_different_text;
        private $link_target;
        /**
         * WPML_Admin_Notice_Action constructor.
         *
         * @param string      $text
         * @param string      $url
         * @param bool        $dismiss
         * @param bool        $hide
         * @param bool|string $display_as_button
         * @param bool        $dismiss_different_text
         */
        public function __construct($text, $url = '#', $dismiss = \false, $hide = \false, $display_as_button = \false, $dismiss_different_text = \true)
        {
        }
        public function get_text()
        {
        }
        public function get_url()
        {
        }
        public function can_dismiss()
        {
        }
        public function can_dismiss_different_text()
        {
        }
        public function can_hide()
        {
        }
        public function must_display_as_button()
        {
        }
        public function set_group_to_dismiss($group_name)
        {
        }
        public function get_group_to_dismiss()
        {
        }
        public function set_js_callback($js_callback)
        {
        }
        public function get_js_callback()
        {
        }
        /**
         * @return mixed
         */
        public function get_link_target()
        {
        }
        /**
         * @param mixed $link_target
         */
        public function set_link_target($link_target)
        {
        }
    }
    abstract class WPML_Translation_Jobs_Migration_Notice
    {
        const NOTICE_GROUP_ID = 'translation-jobs';
        const TEMPLATE = 'translation-jobs-migration.twig';
        /**
         * The instance of \WPML_Notices.
         *
         * @var \WPML_Notices
         */
        private $admin_notices;
        /**
         * The instance of \IWPML_Template_Service.
         *
         * @var \IWPML_Template_Service
         */
        private $template_service;
        /**
         * WPML_Translation_Jobs_Migration_Notice constructor.
         *
         * @param \WPML_Notices           $admin_notices    An instance of \WPML_Notices.
         * @param \IWPML_Template_Service $template_service A class implementing \IWPML_Template_Service.
         */
        public function __construct(\WPML_Notices $admin_notices, \IWPML_Template_Service $template_service)
        {
        }
        /**
         * It adds the notice to be shown when conditions meet.
         */
        public function add_notice()
        {
        }
        /**
         * It removes the notice.
         */
        public function remove_notice()
        {
        }
        /**
         * It checks is the notice exists.
         *
         * @return bool
         */
        public function exists()
        {
        }
        /**
         * It gets the notice content.
         *
         * @return string
         */
        private function get_notice_content()
        {
        }
        /**
         * It gets the definition of the notice's content.
         *
         * @return array
         */
        protected abstract function get_model();
        /**
         * It gets the ID of the notice.
         *
         * @return string
         */
        protected abstract function get_notice_id();
    }
    class WPML_Translation_Jobs_Migration_Ajax
    {
        const ACTION = 'wpml_translation_jobs_migration';
        const JOBS_MIGRATED_PER_REQUEST = 100;
        /** @var WPML_Translation_Jobs_Migration  */
        private $jobs_migration;
        /** @var WPML_Translation_Jobs_Migration_Repository  */
        private $jobs_repository;
        /** @var WPML_TM_Jobs_Migration_State */
        private $migration_state;
        public function __construct(\WPML_Translation_Jobs_Migration $jobs_migration, \WPML_Translation_Jobs_Migration_Repository $jobs_repository, \WPML_TM_Jobs_Migration_State $migration_state)
        {
        }
        public function run_migration()
        {
        }
        /**
         * @return bool
         */
        private function is_valid_request()
        {
        }
    }
    class WPML_TM_Jobs_Migration_State
    {
        const MIGRATION_DONE_KEY = 'wpml-tm-translation-jobs-migration';
        const FIXING_MIGRATION_STATE_KEY = 'wpml-tm-all-translation-jobs-migration';
        const MIGRATION_SKIPPED = 'wpml-tm-translation-jobs-migration-skipped';
        /**
         * The fixing migration has already been run but it contained errors
         */
        const FIRST_MIGRATION_FIX_HAS_RUN = 1;
        /**
         * We've already cleaned logs of the first fixing migration and are ready to run another this time flawless version
         */
        const READY_TO_RUN_SECOND_MIGRATION_FIX = 2;
        /**
         * The final flawless fixing migration has been run
         */
        const SECOND_MIGRATION_FIX_HAS_RUN = 3;
        /**
         * Checks if the original migration has been finished
         *
         * @return bool
         */
        public function is_migrated()
        {
        }
        /**
         * Checks if the fixing migration ( migration which fixes the flaws of the original migration ) has been run
         *
         * @return bool
         */
        public function is_fixing_migration_done()
        {
        }
        public function mark_migration_as_done()
        {
        }
        public function mark_fixing_migration_as_done()
        {
        }
        /**
         * @param bool $flag
         */
        public function skip_migration($flag = \true)
        {
        }
        /**
         * @return bool
         */
        public function is_skipped()
        {
        }
    }
    /**
     * The class adds the hook which is triggered in the moment of Translation Service authorization.
     * It checks if the migration has been skipped due to lack of activated service and if so, it turns on the migration.
     */
    class WPML_TM_Restore_Skipped_Migration implements \IWPML_Action
    {
        /** @var WPML_TM_Jobs_Migration_State */
        private $migration_state;
        /**
         * @param WPML_TM_Jobs_Migration_State $migration_state
         */
        public function __construct(\WPML_TM_Jobs_Migration_State $migration_state)
        {
        }
        public function add_hooks()
        {
        }
        public function restore()
        {
        }
    }
    class WPML_Translation_Jobs_Migration_Repository
    {
        private $jobs_repository;
        private $all_jobs = \false;
        public function __construct(\WPML_TM_Jobs_Repository $jobs_repository, $all_jobs = \false)
        {
        }
        public function get()
        {
        }
        public function get_count()
        {
        }
        private function get_params()
        {
        }
    }
    class WPML_Translation_Jobs_Migration_Hooks
    {
        private $notice;
        private $ajax_handler;
        /** @var WPML_Translation_Jobs_Migration_Repository */
        private $jobs_migration_repository;
        /** @var WPML_Upgrade_Schema $schema */
        private $schema;
        /** @var WPML_TM_Jobs_Migration_State */
        private $migration_state;
        public function __construct(\WPML_Translation_Jobs_Migration_Notice $notice, $ajax_handler, \WPML_Translation_Jobs_Migration_Repository $jobs_migration_repository, \WPML_Upgrade_Schema $schema, \WPML_TM_Jobs_Migration_State $migration_state)
        {
        }
        public function add_hooks()
        {
        }
        public function add_hooks_on_init()
        {
        }
        /**
         * @see
         * `WPML_TM_Add_TP_Revision_And_TS_Status_Columns_To_Core_Status`
         * `WPML_TM_Add_TP_Revision_And_TS_Status_Columns_To_Translation_Status`
         * `WPML_TM_Add_TP_ID_Column_To_Translation_Status`
         *
         * @return bool
         */
        private function new_columns_are_not_added_yet()
        {
        }
        public function enqueue_scripts()
        {
        }
        /**
         * @return bool
         */
        private function needs_migration()
        {
        }
        /**
         * @return bool
         */
        private function skip_migration_if_service_is_not_active()
        {
        }
        /**
         * @return bool
         */
        public function lock_tm_ui()
        {
        }
    }
    class WPML_TM_Translation_Jobs_Fix_Summary
    {
        const INVALID_JOBS_SYNCED_KEY = 'wpml_tm_migration_invalid_jobs_already_synced';
        /** @var WPML_TM_Translation_Jobs_Fix_Summary_Notice  */
        private $notice;
        /** @var WPML_TM_Jobs_Migration_State */
        private $migration_state;
        public function __construct(\WPML_TM_Translation_Jobs_Fix_Summary_Notice $notice, \WPML_TM_Jobs_Migration_State $migration_state)
        {
        }
        public function add_hooks()
        {
        }
        public function display_summary()
        {
        }
        private function should_display_summary_notice()
        {
        }
        public function mark_invalid_jobs_as_synced()
        {
        }
    }
    class WPML_TM_Translation_Jobs_Fix_Summary_Notice extends \WPML_Translation_Jobs_Migration_Notice
    {
        protected function get_model()
        {
        }
        protected function get_notice_id()
        {
        }
    }
    class WPML_All_Translation_Jobs_Migration_Notice extends \WPML_Translation_Jobs_Migration_Notice
    {
        /**
         * It gets the definition of the notice's content.
         *
         * @return array
         */
        protected function get_model()
        {
        }
        /**
         * It gets the ID of the notice.
         *
         * @return string
         */
        protected function get_notice_id()
        {
        }
    }
    class WPML_Translation_Jobs_Missing_TP_ID_Migration_Notice extends \WPML_Translation_Jobs_Migration_Notice
    {
        /**
         * It gets the definition of the notice's content.
         *
         * @return array
         */
        protected function get_model()
        {
        }
        /**
         * It gets the ID of the notice.
         *
         * @return string
         */
        protected function get_notice_id()
        {
        }
    }
    class WPML_TM_Troubleshooting_Fix_Translation_Jobs_TP_ID
    {
        const AJAX_ACTION = 'wpml-fix-translation-jobs-tp-id';
        private $jobs_migration;
        private $jobs_repository;
        public function __construct(\WPML_Translation_Jobs_Migration $jobs_migration, \WPML_TM_Jobs_Repository $jobs_repository)
        {
        }
        public function add_hooks()
        {
        }
        public function fix_tp_id_ajax()
        {
        }
        public function enqueue_scripts($hook)
        {
        }
        public function render_troubleshooting_section()
        {
        }
    }
    class WPML_TM_Translation_Jobs_Fix_Summary_Factory implements \IWPML_Backend_Action_Loader
    {
        /**
         * @return WPML_TM_Translation_Jobs_Fix_Summary
         */
        public function create()
        {
        }
    }
    class WPML_Translation_Jobs_Migration
    {
        const MIGRATION_FIX_LOG_KEY = 'wpml_fixing_migration_log';
        private $jobs_repository;
        private $cms_id_builder;
        private $wpdb;
        private $jobs_api;
        public function __construct(\WPML_Translation_Jobs_Migration_Repository $jobs_repository, \WPML_TM_CMS_ID $cms_id_builder, \wpdb $wpdb, \WPML_TP_Jobs_API $jobs_api)
        {
        }
        /**
         * @param WPML_TM_Post_Job_Entity[] $jobs
         * @param bool                      $recover_status
         *
         * @throws WPML_TP_API_Exception
         */
        public function migrate_jobs(array $jobs, $recover_status = \false)
        {
        }
        /**
         * @param array $mapped_jobs
         *
         * @throws WPML_TP_API_Exception
         * @return array
         */
        private function get_tp_jobs(array $mapped_jobs)
        {
        }
        /**
         * @param WPML_TM_Post_Job_Entity $job
         * @param int                     $tp_id
         * @param int                     $revision_id
         */
        private function recovery_mode(\WPML_TM_Post_Job_Entity $job, $tp_id, $revision_id)
        {
        }
        /**
         * @param WPML_TM_Post_Job_Entity $job
         * @param int                     $tp_id
         * @param int                     $revision_id
         */
        private function first_migration_mode(\WPML_TM_Post_Job_Entity $job, $tp_id, $revision_id)
        {
        }
        /**
         * @param array $tp_jobs
         *
         * @return array
         */
        private function get_latest_jobs_grouped_by_cms_id($tp_jobs)
        {
        }
        /**
         * @param WPML_TM_Post_Job_Entity $job
         * @param int                     $new_tp_id
         *
         * @return bool
         */
        private function get_new_status(\WPML_TM_Post_Job_Entity $job, $new_tp_id)
        {
        }
        /**
         * @param WPML_TM_Post_Job_Entity $job
         *
         * @return bool
         * @throws Exception
         */
        private function has_been_completed_after_release(\WPML_TM_Post_Job_Entity $job)
        {
        }
        /**
         * @param int   $cms_id
         * @param array $tp_jobs
         *
         * @return array
         */
        private function get_tp_id_revision_id($cms_id, $tp_jobs)
        {
        }
        /**
         * @param int       $tp_id
         * @param int       $revision_id
         * @param int|false $status
         * @param int       $job_id
         */
        private function fix_job_fields($tp_id, $revision_id, $status, $job_id)
        {
        }
        /**
         * @param WPML_TM_Post_Job_Entity[] $jobs
         *
         * @return array
         */
        private function map_cms_id_job_id($jobs)
        {
        }
        /**
         * @return DateTime
         * @throws Exception
         */
        private function get_4_2_0_release_date()
        {
        }
        /**
         * @param int $rid
         * @param int $old_tp_id
         * @param int $new_tp_id
         * @param int $old_status
         * @param int $new_status
         */
        private function log($rid, $old_tp_id, $new_tp_id, $old_status, $new_status)
        {
        }
    }
    class WPML_TM_Troubleshooting_Fix_Translation_Jobs_TP_ID_Factory implements \IWPML_Backend_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_Translation_Jobs_Migration_Hooks_Factory implements \IWPML_Backend_Action_Loader, \IWPML_AJAX_Action_Loader
    {
        /**
         * It creates an instance of WPML_Translation_Jobs_Migration_Notice.
         *
         * @return null|WPML_Translation_Jobs_Migration_Hooks|WPML_TM_Restore_Skipped_Migration
         */
        public function create()
        {
        }
        /**
         * Check if location is allowed to add migration hooks.
         */
        private function should_add_migration_hooks()
        {
        }
        /**
         * Get request uri.
         *
         * @return string
         */
        private function get_request_uri()
        {
        }
    }
    class WPML_Translation_Jobs_Fixing_Migration_Ajax
    {
        const ACTION = 'wpml_translation_jobs_migration';
        const JOBS_MIGRATED_PER_REQUEST = 100;
        const PAGINATION_OPTION = 'wpml_translation_jobs_migration_processed';
        /** @var WPML_Translation_Jobs_Migration  */
        private $jobs_migration;
        /** @var WPML_Translation_Jobs_Migration_Repository  */
        private $jobs_repository;
        /** @var WPML_TM_Jobs_Migration_State */
        private $migration_state;
        public function __construct(\WPML_Translation_Jobs_Migration $jobs_migration, \WPML_Translation_Jobs_Migration_Repository $jobs_repository, \WPML_TM_Jobs_Migration_State $migration_state)
        {
        }
        public function run_migration()
        {
        }
        /**
         * @return bool
         */
        private function is_valid_request()
        {
        }
        /**
         * @return int
         */
        private function get_already_processed()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Notices
    {
        const NOTICES_OPTION_KEY = 'wpml_notices';
        const DISMISSED_OPTION_KEY = '_wpml_dismissed_notices';
        const USER_DISMISSED_KEY = '_wpml_user_dismissed_notices';
        const NONCE_NAME = 'wpml-notices';
        const DEFAULT_GROUP = 'default';
        private $notice_render;
        /**
         * @var array<string,array<\WPML_Notice>>
         */
        private $notices;
        /**
         * @var array<string,array<int>>
         */
        private $notices_to_remove = array();
        private $dismissed;
        private $user_dismissed;
        private $original_notices_md5;
        /**
         * WPML_Notices constructor.
         *
         * @param WPML_Notice_Render $notice_render
         */
        public function __construct(\WPML_Notice_Render $notice_render)
        {
        }
        /**
         * @return int
         */
        public function count()
        {
        }
        /**
         * @return array
         */
        public function get_all_notices()
        {
        }
        /**
         * @return array
         */
        private function get_all_dismissed()
        {
        }
        private function init_all_user_dismissed()
        {
        }
        /**
         * @param string $id
         * @param string $group
         *
         * @return null|WPML_Notice
         */
        public function get_notice($id, $group = 'default')
        {
        }
        /**
         * @param string $id
         * @param string $text
         * @param string $group
         *
         * @return WPML_Notice
         */
        public function create_notice($id, $text, $group = 'default')
        {
        }
        public function add_notice(\WPML_Notice $notice, $force_update = \false)
        {
        }
        /**
         * @param string $id
         * @param string $text
         * @param string $group
         *
         * @return WPML_Notice
         */
        public function get_new_notice($id, $text, $group = 'default')
        {
        }
        /**
         * @param string $text
         * @param string $url
         * @param bool   $dismiss
         * @param bool   $hide
         * @param bool   $display_as_button
         *
         * @return WPML_Notice_Action
         */
        public function get_new_notice_action($text, $url = '#', $dismiss = \false, $hide = \false, $display_as_button = \false)
        {
        }
        /**
         * @param WPML_Notice $notice
         *
         * @return bool
         */
        private function notice_exists(\WPML_Notice $notice)
        {
        }
        private function get_notices_for_group($group)
        {
        }
        private function save_notices()
        {
        }
        public function save_to_option()
        {
        }
        private function save_dismissed()
        {
        }
        public function remove_notices()
        {
        }
        public function admin_enqueue_scripts()
        {
        }
        private function must_display_notices()
        {
        }
        private function must_hide_if_notice_exists(\WPML_Notice $notice)
        {
        }
        public function admin_notices()
        {
        }
        public function wp_ajax_hide_notice()
        {
        }
        public function wp_ajax_dismiss_notice()
        {
        }
        /**
         * @param string      $notice_id
         * @param null|string $notice_group
         *
         * @return bool
         */
        private function dismiss_notice_by_id($notice_id, $notice_group = \null)
        {
        }
        public function wp_ajax_dismiss_group()
        {
        }
        /**
         * @param null|string $notice_group
         *
         * @return bool
         */
        private function dismiss_notice_group($notice_group)
        {
        }
        /**
         * @return array
         */
        private function parse_group_and_id()
        {
        }
        /**
         * @return false|int
         */
        private function has_valid_nonce()
        {
        }
        private function group_and_id_exist($group, $id)
        {
        }
        /**
         * @param string     $notice_group
         * @param string|int $notice_id
         */
        public function remove_notice($notice_group, $notice_id)
        {
        }
        /**
         * @param string $notice_group
         */
        public function remove_notice_group($notice_group)
        {
        }
        /**
         * @param WPML_Notice $notice
         * @param bool        $persist
         */
        public function dismiss_notice(\WPML_Notice $notice, $persist = \true)
        {
        }
        /**
         * @param WPML_Notice $notice
         * @param bool        $persist
         */
        public function undismiss_notice(\WPML_Notice $notice, $persist = \true)
        {
        }
        /**
         * @param WPML_Notice $notice
         *
         * @return bool
         */
        public function is_notice_dismissed(\WPML_Notice $notice)
        {
        }
        public function init_hooks()
        {
        }
        private function filter_invalid_notices($notices)
        {
        }
    }
}
namespace WPML\Notices {
    class DismissNotices implements \IWPML_Backend_Action
    {
        const OPTION = 'wpml_dismiss_notice';
        const CSS_CLASS = 'wpml_dismiss_notice';
        public function add_hooks()
        {
        }
        public function toggleDismiss()
        {
        }
        /**
         * @param int $id
         *
         * @return bool
         */
        public function isDismissed($id)
        {
        }
        /**
         * @param int $id
         *
         * @return string
         */
        public function renderCheckbox($id)
        {
        }
    }
}
namespace {
    class WPML_Notice_Show_On_Dashboard_And_WPML_Pages
    {
        public static function is_on_page()
        {
        }
    }
}
namespace WPML\TM\Notices {
    class AteLockNotice implements \IWPML_Backend_Action, \IWPML_DIC_Action
    {
        /**
         * @var AteLocked
         */
        private $templateRenderer;
        public function __construct(\WPML\TM\Templates\Notices\AteLocked $templateRenderer)
        {
        }
        public function add_hooks()
        {
        }
        public function enqueueScripts()
        {
        }
        public function ateLockNotice()
        {
        }
        private function shouldRender()
        {
        }
        private function renderNotice()
        {
        }
        private function renderAdminNotice()
        {
        }
        private function renderUserNotice()
        {
        }
        private function shouldDisplayOnCurrentPage()
        {
        }
        /**
         * @param array $screens
         *
         * @return bool
         */
        private function shouldDisplayOnScreen(array $screens)
        {
        }
        /**
         * @param array $pages
         *
         * @return bool
         */
        private function shouldDisplayOnPage(array $pages)
        {
        }
        /**
         * @return array|string[]
         */
        private function getPages()
        {
        }
    }
}
namespace {
    /**
     * @author OnTheGo Systems
     */
    class WPML_Notice_Render
    {
        private $dismiss_html_added;
        private $hide_html_added;
        private $collapse_html_added;
        public function render(\WPML_Notice $notice)
        {
        }
        /**
         * @param WPML_Notice $notice
         *
         * @return string
         */
        public function get_html(\WPML_Notice $notice)
        {
        }
        /**
         * @param WPML_Notice $notice
         *
         * @return string
         */
        private function add_nonce($notice)
        {
        }
        public function must_display_notice(\WPML_Notice $notice)
        {
        }
        /**
         * @param WPML_Notice $notice
         *
         * @return string
         */
        private function get_actions_html(\WPML_Notice $notice)
        {
        }
        private function sanitize_and_format_text($text)
        {
        }
        /**
         * @param null|string $localized_text
         *
         * @return string
         */
        private function get_hide_html($localized_text = \null)
        {
        }
        /**
         * @param null|string $localized_text
         *
         * @return string
         */
        private function get_dismiss_html($localized_text = \null)
        {
        }
        /**
         * @param string|null $localized_text
         *
         * @return string
         */
        private function get_collapse_html($localized_text = \null)
        {
        }
        /**
         * @param WPML_Notice $notice
         * @param string|null $localized_text
         *
         * @return string
         */
        private function get_collapsed_html(\WPML_Notice $notice, $localized_text = \null)
        {
        }
        /**
         * @param WPML_Notice_Action $action
         *
         * @return string
         */
        private function get_action_html($action)
        {
        }
        /**
         * @param WPML_Notice_Action $action
         *
         * @return string
         */
        private function get_action_anchor(\WPML_Notice_Action $action)
        {
        }
        /**
         * @return string
         */
        private function get_data_nonce_attribute()
        {
        }
        /**
         * @param WPML_Notice $notice
         *
         * @return bool
         */
        private function is_current_screen_allowed(\WPML_Notice $notice)
        {
        }
        /**
         * @param WPML_Notice $notice
         * @param string      $current_page
         *
         * @return bool
         */
        private function is_current_page_prefix_allowed(\WPML_Notice $notice, $current_page)
        {
        }
        /**
         * @param WPML_Notice $notice
         *
         * @return bool
         */
        private function is_current_page_allowed(\WPML_Notice $notice)
        {
        }
        /**
         * @param WPML_Notice $notice
         *
         * @return bool
         */
        private function is_allowed_by_callback(\WPML_Notice $notice)
        {
        }
    }
    class WPML_TM_Post_Edit_Notices_Factory
    {
        const TEMPLATES_PATH = '/templates/notices/post-edit/';
        public function create()
        {
        }
    }
    class WPML_TP_Exception extends \Exception
    {
    }
    class WPML_TP_Batch_Exception extends \WPML_TP_Exception
    {
    }
    /**
     * Class WPML_TP_Client_Factory
     *
     * @author OnTheGoSystems
     */
    class WPML_TP_Client_Factory
    {
        /** @return WPML_TP_Client */
        public function create()
        {
        }
    }
    class WPML_TP_Jobs_Collection_Factory
    {
        /**
         * @return WPML_TP_Jobs_Collection
         */
        public function create()
        {
        }
    }
    /**
     * Class WPML_TP_Client
     *
     * @author OnTheGoSystems
     */
    class WPML_TP_Client
    {
        /** @var WPML_TP_Project $project */
        private $project;
        /** @var WPML_TP_TM_Jobs $tm_jobs */
        private $tm_jobs;
        /** @var WPML_TP_API_Services $services */
        private $services;
        /** @var WPML_TP_API_Batches $batches */
        private $batches;
        /** @var WPML_TP_API_TF_Ratings $ratings */
        private $ratings;
        /** @var WPML_TP_API_TF_Feedback $feedback */
        private $feedback;
        public function __construct(\WPML_TP_Project $project, \WPML_TP_TM_Jobs $tm_jobs)
        {
        }
        public function services()
        {
        }
        public function batches()
        {
        }
        /** @return WPML_TP_API_TF_Ratings */
        public function ratings()
        {
        }
        /** @return WPML_TP_API_TF_Feedback */
        public function feedback()
        {
        }
        /** @return WPML_TP_Project */
        public function get_project()
        {
        }
        public function get_tm_jobs()
        {
        }
    }
    abstract class WPML_TP_REST_Object
    {
        public function __construct(\stdClass $object = \null)
        {
        }
        protected abstract function get_properties();
        /**
         * @param stdClass|null $object
         */
        protected function populate_properties_from_object($object)
        {
        }
    }
    /**
     * @link https://git.onthegosystems.com/tp/translation-proxy/wikis/create_batch_job
     */
    class WPML_TP_Batch extends \WPML_TP_REST_Object
    {
        private $id;
        public function get_id()
        {
        }
        public function set_id($id)
        {
        }
        protected function get_properties()
        {
        }
    }
    /**
     * @link https://git.onthegosystems.com/tp/translation-proxy/wikis/translation_services
     */
    class WPML_TP_Service extends \WPML_TP_REST_Object implements \Serializable
    {
        /**
         * @var int
         */
        public $id;
        /**
         * @var string
         */
        public $logo_url;
        /** @var string */
        public $logo_preview_url;
        /**
         * @var string
         */
        public $name;
        /**
         * @var string
         */
        public $description;
        /**
         * @var string
         */
        public $doc_url;
        /**
         * @var bool
         */
        public $tms;
        /**
         * @var bool
         */
        public $partner;
        /**
         * @var stdClass
         */
        public $custom_fields;
        /**
         * @var array
         * @deprecated
         */
        public $custom_fields_data;
        /**
         * @var bool
         * @deprecated
         */
        public $requires_authentication;
        /**
         * @var stdClass
         */
        public $rankings;
        /**
         * @var bool
         */
        public $has_language_pairs;
        /**
         * @var string
         */
        public $url;
        /** @var string */
        public $project_details_url;
        /** @var string */
        public $add_language_pair_url;
        /** @var string */
        public $custom_text_url;
        /** @var string */
        public $select_translator_iframe_url;
        /** @var string */
        public $translator_contact_iframe_url;
        /** @var string */
        public $quote_iframe_url;
        /** @var bool */
        public $has_translator_selection;
        /** @var int */
        public $project_name_length;
        /** @var string */
        public $suid;
        /** @var bool */
        public $notification;
        /** @var bool */
        public $preview_bundle;
        /** @var bool */
        public $deadline;
        /** @var bool */
        public $oauth;
        /** @var string */
        public $oauth_url;
        /** @var int */
        public $default_service;
        /** @var bool */
        public $translation_feedback;
        /** @var string */
        public $feedback_forward_method;
        /** @var int */
        public $last_refresh;
        /** @var string */
        public $popup_message;
        /** @var string */
        public $how_to_get_credentials_desc;
        /** @var string */
        public $how_to_get_credentials_url;
        /** @var string */
        public $client_create_account_page_url;
        /** bool */
        public $redirect_to_ts;
        /** @var \stdClass[] */
        public $countries = [];
        public function __construct(\stdClass $object = \null)
        {
        }
        /**
         * @return int
         */
        public function get_id()
        {
        }
        /**
         * @return string
         */
        public function get_logo_url()
        {
        }
        public function get_logo_preview_url()
        {
        }
        /**
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * @return string
         */
        public function get_description()
        {
        }
        /**
         * @return string
         */
        public function get_doc_url()
        {
        }
        /**
         * @return string
         */
        public function get_tms()
        {
        }
        /**
         * @return bool
         */
        public function is_partner()
        {
        }
        /**
         * @param bool $partner
         */
        public function set_partner($partner)
        {
        }
        /**
         * @return array
         */
        public function get_custom_fields()
        {
        }
        /**
         * @return array
         */
        public function get_custom_fields_data()
        {
        }
        /**
         * @return bool
         */
        public function get_requires_authentication()
        {
        }
        /**
         * @return bool
         */
        public function get_url()
        {
        }
        /**
         * @return bool
         */
        public function get_has_language_pairs()
        {
        }
        /**
         * @return stdClass
         */
        public function get_rankings()
        {
        }
        /**
         * @return string
         */
        public function get_popup_message()
        {
        }
        /**
         * @param int $id
         */
        public function set_id($id)
        {
        }
        /**
         * @param string $logo_url
         */
        public function set_logo_url($logo_url)
        {
        }
        /**
         * @param  string $logo_preview_url
         */
        public function set_logo_preview_url($logo_preview_url)
        {
        }
        /**
         * @param string $url
         */
        public function set_url($url)
        {
        }
        /**
         * @param string $name
         */
        public function set_name($name)
        {
        }
        /**
         * @param string $description
         */
        public function set_description($description)
        {
        }
        /**
         * @param string $doc_url
         */
        public function set_doc_url($doc_url)
        {
        }
        /**
         * @param bool $tms
         */
        public function set_tms($tms)
        {
        }
        /**
         * @param stdClass $rankings
         */
        public function set_rankings($rankings)
        {
        }
        /**
         * @param stdClass $custom_fields
         */
        public function set_custom_fields($custom_fields)
        {
        }
        /**
         * @param string $popup_message
         */
        public function set_popup_message($popup_message)
        {
        }
        public function set_custom_fields_data()
        {
        }
        public function set_requires_authentication()
        {
        }
        /**
         * @param bool $value
         */
        public function set_has_language_pairs($value)
        {
        }
        /**
         * @return string
         */
        public function get_project_details_url()
        {
        }
        /**
         * @param string $project_details_url
         */
        public function set_project_details_url($project_details_url)
        {
        }
        /**
         * @return string
         */
        public function get_add_language_pair_url()
        {
        }
        /**
         * @param string $add_language_pair_url
         */
        public function set_add_language_pair_url($add_language_pair_url)
        {
        }
        /**
         * @return string
         */
        public function get_custom_text_url()
        {
        }
        /**
         * @param string $custom_text_url
         */
        public function set_custom_text_url($custom_text_url)
        {
        }
        /**
         * @return string
         */
        public function get_select_translator_iframe_url()
        {
        }
        /**
         * @param string $select_translator_iframe_url
         */
        public function set_select_translator_iframe_url($select_translator_iframe_url)
        {
        }
        /**
         * @return string
         */
        public function get_translator_contact_iframe_url()
        {
        }
        /**
         * @param string $translator_contact_iframe_url
         */
        public function set_translator_contact_iframe_url($translator_contact_iframe_url)
        {
        }
        /**
         * @return string
         */
        public function get_quote_iframe_url()
        {
        }
        /**
         * @param string $quote_iframe_url
         */
        public function set_quote_iframe_url($quote_iframe_url)
        {
        }
        /**
         * @return bool
         */
        public function get_has_translator_selection()
        {
        }
        /**
         * @param bool $has_translator_selection
         */
        public function set_has_translator_selection($has_translator_selection)
        {
        }
        /**
         * @return int
         */
        public function get_project_name_length()
        {
        }
        /**
         * @param int $project_name_length
         */
        public function set_project_name_length($project_name_length)
        {
        }
        /**
         * @return string
         */
        public function get_suid()
        {
        }
        /**
         * @param string $suid
         */
        public function set_suid($suid)
        {
        }
        /**
         * @return bool
         */
        public function get_notification()
        {
        }
        /**
         * @param bool $notification
         */
        public function set_notification($notification)
        {
        }
        /**
         * @return bool
         */
        public function get_preview_bundle()
        {
        }
        /**
         * @param bool $preview_bundle
         */
        public function set_preview_bundle($preview_bundle)
        {
        }
        /**
         * @return bool
         */
        public function get_deadline()
        {
        }
        /**
         * @param bool $deadline
         */
        public function set_deadline($deadline)
        {
        }
        /**
         * @return bool
         */
        public function get_oauth()
        {
        }
        /**
         * @param bool $oauth
         */
        public function set_oauth($oauth)
        {
        }
        /**
         * @return string
         */
        public function get_oauth_url()
        {
        }
        /**
         * @param string $oauth_url
         */
        public function set_oauth_url($oauth_url)
        {
        }
        /**
         * @return int
         */
        public function get_default_service()
        {
        }
        /**
         * @param int $default_service
         */
        public function set_default_service($default_service)
        {
        }
        /**
         * @return bool
         */
        public function get_translation_feedback()
        {
        }
        /**
         * @param bool $translation_feedback
         */
        public function set_translation_feedback($translation_feedback)
        {
        }
        /**
         * @return string
         */
        public function get_feedback_forward_method()
        {
        }
        /**
         * @param string $feedback_forward_method
         */
        public function set_feedback_forward_method($feedback_forward_method)
        {
        }
        /** @return null|int */
        public function get_last_refresh()
        {
        }
        /** @param int */
        public function set_last_refresh($timestamp)
        {
        }
        /** @return null|string */
        public function get_how_to_get_credentials_desc()
        {
        }
        /** @param string */
        public function set_how_to_get_credentials_desc($desc)
        {
        }
        /** @return null|string */
        public function get_how_to_get_credentials_url()
        {
        }
        /** @param string */
        public function set_how_to_get_credentials_url($url)
        {
        }
        /** @return null|string */
        public function get_client_create_account_page_url()
        {
        }
        /** @param string */
        public function set_client_create_account_page_url($url)
        {
        }
        /**
         * @return mixed
         */
        public function get_redirect_to_ts()
        {
        }
        /**
         * @param mixed $redirect_to_ts
         */
        public function set_redirect_to_ts($redirect_to_ts)
        {
        }
        /**
         * @return stdClass[]
         */
        public function get_countries()
        {
        }
        /**
         * @param  stdClass[] $countries
         */
        public function set_countries(array $countries)
        {
        }
        public function serialize()
        {
        }
        public function unserialize($serialized)
        {
        }
        /**
         * @return array
         */
        protected function get_properties()
        {
        }
    }
    /**
     * @link https://git.onthegosystems.com/tp/translation-proxy/wikis/add_files_batch_job
     */
    class WPML_TP_Job extends \WPML_TP_REST_Object
    {
        const CANCELLED = 'cancelled';
        /** @var int */
        private $id;
        private $cms_id;
        private $batch;
        private $job_state;
        /** @param int $id */
        public function set_id($id)
        {
        }
        /** @return int */
        public function get_id()
        {
        }
        /** @return string */
        public function get_cms_id()
        {
        }
        /** @return string */
        public function get_job_state()
        {
        }
        /**
         * @return int|null
         */
        public function get_original_element_id()
        {
        }
        /** @return stdClass */
        public function get_batch()
        {
        }
        /**
         * @param int $id
         */
        public function set_cms_id($id)
        {
        }
        /**
         * @param string $state
         */
        public function set_job_state($state)
        {
        }
        public function set_batch(\stdClass $batch)
        {
        }
        /** @return array */
        protected function get_properties()
        {
        }
    }
    class WPML_TP_Job_Factory
    {
        /**
         * @param stdClass $job
         *
         * @return WPML_TP_Job
         */
        public function create(\stdClass $job)
        {
        }
    }
    class WPML_TP_Jobs_Collection
    {
        private $project;
        private $job_factory;
        private $batch_factory;
        private $jobs;
        public function __construct(\TranslationProxy_Project $project, \WPML_TP_Job_Factory $job_factory, \WPML_Translation_Batch_Factory $batch_factory)
        {
        }
        /**
         * @return WPML_TP_Job[]
         */
        public function get_all()
        {
        }
        /**
         * @param WPML_Translation_Job $job
         *
         * @return bool
         */
        public function is_job_canceled(\WPML_Translation_Job $job)
        {
        }
    }
    /**
     * Class WPML_TP_Abstract_API
     *
     * @author OnTheGoSystems
     */
    abstract class WPML_TP_Abstract_API
    {
        /** @var WPML_TP_Client $tp_client */
        protected $tp_client;
        /** @var null|Exception $exception */
        protected $exception;
        /** @var null|string $error_message */
        protected $error_message;
        public function __construct(\WPML_TP_Client $tp_client)
        {
        }
        /** @return string */
        protected abstract function get_endpoint_uri();
        /** @return bool */
        protected abstract function is_authenticated();
        /**
         * @param array $params
         *
         * @return mixed
         */
        protected function get(array $params = array())
        {
        }
        /**
         * @param array $params
         *
         * @return mixed
         */
        protected function post(array $params = array())
        {
        }
        protected function put(array $params = array())
        {
        }
        protected function delete(array $params = array())
        {
        }
        /**
         * @param array  $params
         * @param string $method
         *
         * @return mixed
         */
        private function remote_call(array $params, $method)
        {
        }
        /**
         * @param array $params
         *
         * @return array
         */
        private function pre_process_params(array $params)
        {
        }
        /**
         * WPML does not store the Translation Proxy Job ID
         * We have to identify the job somehow.
         * This is why we are using `original_file_id`.
         * It is the same as used in the XLIFF file as a value of `original` attribute.
         * The combination of `original_file_id` and `batch_id` will be always unique.
         * Translation Proxy provides this call, with these arguments, for this specific reason.
         *
         * @see https://git.onthegosystems.com/tp/translation-proxy/wikis/rate_translation
         * @see https://git.onthegosystems.com/tp/translation-proxy/wikis/send_feedback
         *
         * @param int $job_id
         * @param int $document_source_id
         *
         * @return string
         */
        protected function get_original_file_id($job_id, $document_source_id)
        {
        }
        /** @return null|Exception */
        public function get_exception()
        {
        }
        /** @return null|string */
        public function get_error_message()
        {
        }
    }
    /**
     * Class WPML_TP_API_TF_Feedback
     *
     * @author OnTheGoSystems
     */
    class WPML_TP_API_TF_Feedback extends \WPML_TP_Abstract_API
    {
        const URI_SEND = '/batches/{batch_id}/jobs/{original_file_id}/feedbacks';
        const URI_GET_STATUS = '/feedbacks/{feedback_id}';
        /** @var string $endpoint_uri */
        private $endpoint_uri;
        /** @return string */
        protected function get_endpoint_uri()
        {
        }
        /** @return bool */
        protected function is_authenticated()
        {
        }
        /**
         * @param WPML_TF_Feedback $feedback
         * @param array            $args
         *
         * @return int|false
         */
        public function send(\WPML_TF_Feedback $feedback, array $args)
        {
        }
        /**
         * @param WPML_TF_Feedback $feedback
         *
         * @return false[string
         */
        public function status(\WPML_TF_Feedback $feedback)
        {
        }
    }
    /**
     * Class WPML_TP_API_TF_Ratings
     *
     * @author OnTheGoSystems
     */
    class WPML_TP_API_TF_Ratings extends \WPML_TP_Abstract_API
    {
        /** @return string */
        protected function get_endpoint_uri()
        {
        }
        /** @return bool */
        protected function is_authenticated()
        {
        }
        /**
         * @param WPML_TF_Feedback $feedback
         *
         * @return int|false
         */
        public function send(\WPML_TF_Feedback $feedback)
        {
        }
    }
    /**
     * Class WPML_TP_API_Batches
     */
    class WPML_TP_API_Batches extends \WPML_TP_Abstract_API
    {
        const API_VERSION = 1.1;
        const CREATE_BATCH_ENDPOINT = '/projects/{project_id}/batches.json';
        const ADD_JOB_ENDPOINT = '/batches/{batch_id}/jobs.json';
        private $endpoint_uri;
        protected function get_endpoint_uri()
        {
        }
        protected function is_authenticated()
        {
        }
        /**
         * @throws WPML_TP_Batch_Exception
         *
         * @param array       $batch_data
         * @param false|array $extra_fields
         *
         * @return false|stdClass
         *
         * @link https://git.onthegosystems.com/tp/translation-proxy/wikis/create_batch_job
         */
        public function create(array $batch_data, $extra_fields)
        {
        }
        /**
         * @param int   $batch_id
         * @param array $job_data
         *
         * @return false|WPML_TP_Job
         *
         * @link https://git.onthegosystems.com/tp/translation-proxy/wikis/add_files_batch_job
         */
        public function add_job($batch_id, array $job_data)
        {
        }
        /**
         * @link https://git.onthegosystems.com/tp/translation-proxy/wikis/commit_batch_job
         */
        public function commit()
        {
        }
        /**
         * @link https://git.onthegosystems.com/tp/translation-proxy/wikis/send-preview-bundle-job
         */
        public function send_preview_bundle()
        {
        }
    }
    /**
     * Class WPML_TP_API_Services
     *
     * @author OnTheGoSystems
     */
    class WPML_TP_API_Services extends \WPML_TP_Abstract_API
    {
        const ENDPOINT_SERVICES = '/services.json';
        const ENDPOINT_SERVICE = '/services/{service_id}.json';
        const ENDPOINT_LANGUAGES_MAP = '/services/{service_id}/language_identifiers.json';
        const ENDPOINT_CUSTOM_FIELDS = '/services/{service_id}/custom_fields.json';
        const TRANSLATION_MANAGEMENT_SYSTEM = 'tms';
        const PARTNER = 'partner';
        const TRANSLATION_SERVICE = 'ts';
        const CACHED_SERVICES_KEY_DATA = 'wpml_translation_services';
        const CACHED_SERVICES_TRANSIENT_KEY = 'wpml_translation_services_list';
        const CACHED_SERVICES_KEY_TIMESTAMP = 'wpml_translation_services_timestamp';
        private $endpoint;
        /** @return string */
        protected function get_endpoint_uri()
        {
        }
        /** @return bool */
        protected function is_authenticated()
        {
        }
        /**
         * @param bool $reload
         *
         * @return array
         */
        public function get_all($reload = \false)
        {
        }
        /**
         * @return bool
         */
        public function refresh_cache()
        {
        }
        /**
         * @return mixed
         */
        private function get_cached_services()
        {
        }
        /**
         * @return mixed
         */
        private function get_cached_services_timestamp()
        {
        }
        /**
         * @param $services
         */
        private function cache_services($services)
        {
        }
        /**
         * @return bool
         */
        private function has_cache_services_expired()
        {
        }
        /**
         * @param array $translation_services
         *
         * @return array
         */
        private function convert_to_tp_services($translation_services)
        {
        }
        /**
         * @param bool $partner
         * @return array
         */
        public function get_translation_services($partner = \true)
        {
        }
        /**
         * @return array
         */
        public function get_translation_management_systems()
        {
        }
        /**
         * @param bool $reload
         *
         * @return null|WPML_TP_Service
         */
        public function get_active($reload = \false)
        {
        }
        /**
         * @param int  $service_id
         * @param bool $reload
         *
         * @return null|string
         */
        public function get_name($service_id, $reload = \false)
        {
        }
        public function get_service($service_id, $reload = \false)
        {
        }
        /**
         * @param int  $translation_service_id
         * @param bool $reload
         *
         * @return null|WPML_TP_Service
         */
        private function get_one($translation_service_id, $reload = \false)
        {
        }
        /**
         * @param string $translation_service_id
         *
         * @return null|WPML_TP_Service
         */
        private function get_unlisted_service($translation_service_id)
        {
        }
        /**
         * @param $service_id
         *
         * @return array
         */
        public function get_languages_map($service_id)
        {
        }
        /**
         * @param $service_id
         *
         * @return mixed
         */
        public function get_custom_fields($service_id)
        {
        }
    }
    /**
     * Class WPML_TP_TM_Jobs
     *
     * @author OnTheGoSystems
     */
    class WPML_TP_TM_Jobs
    {
        const CACHE_BATCH_ID = 'wpml_tp_tm_jobs_batch_id';
        /** @var wpdb $wpdb */
        private $wpdb;
        /**
         * WPML_TF_Rating_TP_API constructor.
         *
         * @param wpdb $wpdb
         */
        public function __construct(\wpdb $wpdb)
        {
        }
        /**
         * @param int $job_id
         *
         * @return null|string
         */
        public function get_batch_id($job_id)
        {
        }
    }
    /**
     * Class WPML_TP_Project
     *
     * @author OnTheGoSystems
     */
    class WPML_TP_Project
    {
        /** @var false|stdClass $translation_service */
        private $translation_service;
        /** @var false|array $translation_projects */
        private $translation_projects;
        /** @var array $project */
        private $project;
        /**
         * WPML_TP_Project constructor.
         *
         * @param false|stdClass $translation_service
         * @param false|array    $translation_projects
         */
        public function __construct($translation_service, $translation_projects)
        {
        }
        private function init()
        {
        }
        /** @return int|null */
        public function get_translation_service_id()
        {
        }
        /** @return string|null */
        public function get_access_key()
        {
        }
        /** @return int|null */
        public function get_id()
        {
        }
        /**
         * @param string $project_property
         *
         * @return mixed
         */
        private function get_project_property($project_property)
        {
        }
    }
    class WPML_TM_Page
    {
        private static function is_tm_page($page = \null)
        {
        }
        public static function is_tm_dashboard()
        {
        }
        public static function is_tm_translators()
        {
        }
        public static function is_settings()
        {
        }
        public static function is_translation_queue()
        {
        }
        public static function is_translation_editor_page()
        {
        }
        public static function is_job_list()
        {
        }
        public static function is_dashboard()
        {
        }
        public static function is_notifications_page()
        {
        }
        public static function get_translators_url($params = array())
        {
        }
    }
    class WPML_TM_Wizard_Options
    {
        const CURRENT_STEP = 'WPML_TM_Wizard_For_Manager_Current_Step';
        const WIZARD_COMPLETE_FOR_MANAGER = 'WPML_TM_Wizard_For_Manager_Complete';
        const WIZARD_COMPLETE_FOR_ADMIN = 'WPML_TM_Wizard_For_Admin_Complete';
        const WHO_WILL_TRANSLATE_MODE = 'WPML_TM_Wizard_Who_Mode';
        const ONLY_I_USER_META = 'WPML_TM_Wizard_Only_I';
    }
    /**
     * This code is inspired by WPML Widgets (https://wordpress.org/plugins/wpml-widgets/),
     * created by Jeroen Sormani
     *
     * @author OnTheGo Systems
     */
    class WPML_Widgets_Support_Factory implements \IWPML_Backend_Action_Loader, \IWPML_Frontend_Action_Loader, \IWPML_Deferred_Action_Loader
    {
        public function get_load_action()
        {
        }
        /**
         * @return WPML_Widgets_Support_Backend|WPML_Widgets_Support_Frontend|null
         */
        public function create()
        {
        }
        private function create_backend_ui(\SitePress $sitepress)
        {
        }
        public function create_frontend_ui(\SitePress $sitepress)
        {
        }
        /**
         * @param SitePress $sitepress
         *
         * @return bool
         */
        private function is_human_page(\SitePress $sitepress)
        {
        }
    }
    /**
     * This code is inspired by WPML Widgets (https://wordpress.org/plugins/wpml-widgets/),
     * created by Jeroen Sormani
     *
     * @author OnTheGo Systems
     */
    class WPML_Widgets_Support_Backend implements \IWPML_Action
    {
        const NONCE = 'wpml-language-nonce';
        private $active_languages;
        private $template_service;
        /**
         * WPML_Widgets constructor.
         *
         * @param array                  $active_languages
         * @param IWPML_Template_Service $template_service
         */
        public function __construct(array $active_languages, \IWPML_Template_Service $template_service)
        {
        }
        public function add_hooks()
        {
        }
        public function enqueue_scripts()
        {
        }
        /**
         * @param WP_Widget|null $widget
         * @param string|null    $form
         * @param array          $instance
         */
        public function language_selector($widget, $form, $instance)
        {
        }
        /**
         * @param array     $instance
         * @param array     $new_instance
         * @param array     $old_instance
         * @param WP_Widget $widget_instance
         *
         * @return array
         */
        public function update($instance, $new_instance, $old_instance, $widget_instance)
        {
        }
        public function is_widgets_page()
        {
        }
        private function get_legacy_widgets_selected_languages()
        {
        }
        public function set_selected_language_for_legacy_widget()
        {
        }
    }
    /**
     * This code is inspired by WPML Widgets (https://wordpress.org/plugins/wpml-widgets/),
     * created by Jeroen Sormani
     *
     * @author OnTheGo Systems
     */
    class WPML_Widgets_Support_Frontend implements \IWPML_Action
    {
        private $current_language;
        /**
         * WPML_Widgets constructor.
         *
         * @param string $current_language
         */
        public function __construct($current_language)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * Get display status of the widget.
         *
         * @param array|bool $instance
         *
         * @return array|bool
         */
        public function display($instance)
        {
        }
        /**
         * Returns display status of the widget as boolean.
         *
         * @param array $instance
         *
         * @return bool
         */
        private function it_must_display($instance)
        {
        }
        private function find_wpml_language_element_in_multidimensional_array($arr)
        {
        }
    }
    abstract class WPML_TM_Resources_Factory
    {
        protected $ajax_actions;
        /**
         * @var WPML_WP_API
         */
        protected $wpml_wp_api;
        /**
         * @param WPML_WP_API $wpml_wp_api
         */
        public function __construct(&$wpml_wp_api)
        {
        }
        public abstract function enqueue_resources($hook_suffix);
        public abstract function register_resources($hook_suffix);
    }
}
namespace WPML\Core\REST {
    class Status
    {
        const PING_KEY = 'wp-rest-enabled-ping';
        const CACHE_EXPIRATION_IN_SEC = 3600;
        const ENABLED = 'enabled';
        const DISABLED = 'disabled';
        const TIMEOUT = 'timeout';
        /** @var \WP_Http */
        private $wp_http;
        /**
         * @param \WP_Http $wp_http
         */
        public function __construct(\WP_Http $wp_http)
        {
        }
        public function isEnabled()
        {
        }
        /**
         * @return bool
         */
        private function is_rest_accessible()
        {
        }
        /**
         * @param callable $callback
         *
         * @return mixed
         */
        private function cacheInTransient(callable $callback)
        {
        }
        /**
         * @return string
         */
        private function pingRestEndpoint()
        {
        }
        /**
         * The PHP session ID causes the request to be blocked if some theme/plugin
         * calls `session_start` (this always leads to hit the timeout).
         *
         * @return array
         */
        private function getCookiesWithoutSessionId()
        {
        }
        /**
         * @param \WP_Error $response
         *
         * @return bool
         */
        private function isTimeout(\WP_Error $response)
        {
        }
    }
    class RewriteRules implements \IWPML_REST_Action, \IWPML_DIC_Action
    {
        /** @var \SitePress */
        private $sitepress;
        /**
         * @param \SitePress $sitepress
         */
        public function __construct(\SitePress $sitepress)
        {
        }
        public function add_hooks()
        {
        }
        public function addOptionRewriteRulesHook()
        {
        }
        public function updateRules($rewriteRules)
        {
        }
        /**
         * @return bool
         */
        private function isLangInDirectory()
        {
        }
        /**
         * @return bool
         */
        private function isUseDirectoryForDefaultLanguage()
        {
        }
        /**
         * @return bool
         */
        private function isInstalledInSubdirectory()
        {
        }
        /**
         * @return string
         */
        private function getSubdirectory()
        {
        }
    }
}
namespace {
    class WPML_DB_Chunk
    {
        /**
         * @var wpdb
         */
        private $wpdb;
        /**
         * @var int
         */
        private $chunk_size;
        /**
         * @param wpdb $wpdb
         * @param int  $chunk_size
         */
        public function __construct(\wpdb $wpdb, $chunk_size = 1000)
        {
        }
        /**
         * @param string $query
         * @param array  $args
         * @param int    $elements_num
         *
         * @return array
         *
         * @throws \InvalidArgumentException
         */
        public function retrieve($query, $args, $elements_num)
        {
        }
        /**
         * @param string $query
         */
        private function validate_query($query)
        {
        }
    }
    /**
     * @deprecated This class has been replaced by WPML\Language\Detection\Backend and is going to be removed in the next major release.
     * @since 4.4.0
     * @see WPML\Language\Detection\Backend
     *
     * @package    wpml-core
     * @subpackage wpml-requests
     */
    class WPML_Backend_Request extends \WPML_Request
    {
        /** @var Backend */
        private $backend;
        public function __construct($url_converter, $active_languages, $default_language, $cookieLanguage)
        {
        }
        /**
         * @return false|string
         */
        public function get_requested_lang()
        {
        }
        protected function get_cookie_name()
        {
        }
    }
    class WPML_REST_Request_Analyze
    {
        /** @var WPML_URL_Converter $url_converter */
        private $url_converter;
        /** @var array $active_language_codes */
        private $active_language_codes;
        /** @var WP_Rewrite $wp_rewrite */
        private $wp_rewrite;
        /** @var array $uri_parts */
        private $uri_parts;
        public function __construct(\WPML_URL_Converter $url_converter, array $active_language_codes, \WP_Rewrite $wp_rewrite)
        {
        }
        /** @return bool */
        public function is_rest_request()
        {
        }
        /** @return bool */
        private function has_valid_language_prefix()
        {
        }
        /**
         * @param int $index
         *
         * @return string
         */
        private function get_uri_part($index = 0)
        {
        }
    }
    class WPML_Language_Domain_Validation
    {
        const VALIDATE_DOMAIN_KEY = '____icl_validate_domain';
        /** @var WPML_WP_API $wp_api */
        private $wp_api;
        /** @var WP_Http $http */
        private $http;
        /** @var  string $url */
        private $url;
        /** @var  string $validation_url */
        private $validation_url;
        /**
         * @param WPML_WP_API $wp_api
         * @param WP_Http     $http
         *
         * @throws \InvalidArgumentException
         */
        public function __construct(\WPML_WP_API $wp_api, \WP_Http $http)
        {
        }
        /**
         * @param string $url
         *
         * @return bool
         */
        public function is_valid($url)
        {
        }
        /**
         * @return bool
         */
        private function has_scheme_and_host()
        {
        }
        /**
         * @return string
         */
        private function get_validation_url()
        {
        }
        /**
         * @param string $url
         *
         * @return array
         */
        private function get_accepted_responses($url)
        {
        }
        /**
         * @return array|WP_Error
         */
        private function get_validation_response()
        {
        }
        /**
         * @param array|WP_Error $response
         *
         * @return bool
         */
        private function is_valid_response($response)
        {
        }
    }
    /*
     * @deprecated deprecated since version 4.4.0
     * This class has been replaced by WPML\Language\Detection\Frontend and is going to be removed in the next major release.
     *
     *
     * @package    wpml-core
     * @subpackage wpml-requests
     *
     */
    class WPML_Frontend_Request extends \WPML_Request
    {
        /** @var \WPML\Language\Detection\Frontend */
        private $frontend;
        public function __construct($url_converter, $active_languages, $default_language, $cookieLanguage, $wp_api)
        {
        }
        /**
         * @deprecated deprecated since version 4.4.0
         * @return false|string
         */
        public function get_requested_lang()
        {
        }
        protected function get_cookie_name()
        {
        }
    }
    /**
     * Class WPML_Language_Resolution
     *
     * @package    wpml-core
     * @subpackage wpml-requests
     */
    class WPML_Language_Resolution
    {
        private $active_language_codes = array();
        private $current_request_lang = \null;
        private $default_lang = \null;
        /**
         * @var array|null $hidden_lang_codes if set to null,
         * indicates that the cache needs to be reloaded due to changing settings
         * or current user within the request
         */
        private $hidden_lang_codes = \null;
        /**
         * WPML_Language_Resolution constructor.
         *
         * @param string[] $active_language_codes
         * @param string   $default_lang
         */
        public function __construct($active_language_codes, $default_lang)
        {
        }
        public function reload()
        {
        }
        public function current_lang_filter($lang, \WPML_Request $wpml_request_handler)
        {
        }
        public function get_active_language_codes()
        {
        }
        public function is_language_hidden($lang_code)
        {
        }
        public function is_language_active($lang_code, $is_all_active = \false)
        {
        }
        private function maybe_reload()
        {
        }
        /**
         * Returns the language_code of the http referrer's location from which a request originated.
         * Used to correctly determine the language code on ajax link lists for the post edit screen or
         * the flat taxonomy auto-suggest.
         *
         * @return string|null
         */
        public function get_referrer_language_code()
        {
        }
        /**
         *
         * Sets the language of frontend requests to false, if they are not for
         * a hidden or active language code. The handling of permissions in case of
         * hidden languages is done in \SitePress::init.
         *
         * @param string $lang
         *
         * @return string
         */
        private function filter_for_legal_langs($lang)
        {
        }
        /**
         * @return bool
         */
        private function use_cookie_language()
        {
        }
        /**
         * Adjusts the output of the filtering for the current language in case
         * the request is for a preview page.
         *
         * @return null|string
         */
        private function filter_preview_language_code()
        {
        }
    }
    abstract class WPML_Redirection extends \WPML_URL_Converter_User
    {
        /** @var  WPML_Request $request_handler */
        protected $request_handler;
        /** @var WPML_Language_Resolution $lang_resolution */
        protected $lang_resolution;
        /**
         * @param WPML_URL_Converter       $url_converter
         * @param WPML_Request             $request_handler
         * @param WPML_Language_Resolution $lang_resolution
         */
        function __construct(&$url_converter, &$request_handler, &$lang_resolution)
        {
        }
        public abstract function get_redirect_target();
        protected function redirect_hidden_home()
        {
        }
    }
    class WPML_Redirect_By_Param extends \WPML_Redirection
    {
        private $post_like_params = array('p' => 1, 'page_id' => 1);
        private $term_like_params = array('cat_ID' => 1, 'cat' => 1, 'tag' => 1);
        /** @var SitePress */
        private $sitepress;
        /**
         * @param array                    $tax_sync_option
         * @param WPML_URL_Converter       $url_converter
         * @param WPML_Request             $request_handler
         * @param WPML_Language_Resolution $lang_resolution
         * @param SitePress                $sitepress
         */
        public function __construct($tax_sync_option, &$url_converter, &$request_handler, &$lang_resolution, &$sitepress)
        {
        }
        public function init_hooks()
        {
        }
        /**
         * @return bool|string
         */
        public function get_redirect_target()
        {
        }
        private function find_potential_translation($query_params, $lang_code)
        {
        }
        /**
         * @param string $query_params_string
         * @param string $lang_code
         *
         * @return bool|string
         */
        private function needs_redirect($query_params_string, $lang_code)
        {
        }
        private function get_target_link_querystring()
        {
        }
        /**
         * @param string $query_params_string
         *
         * @return null|string
         */
        private function get_element_language($query_params_string)
        {
        }
        /**
         * @param string $url
         *
         * @return array
         */
        private function get_element_details($url)
        {
        }
        /**
         * @link https://onthegosystems.myjetbrains.com/youtrack/issue/wpmlcore-2822
         */
        public function template_redirect_action()
        {
        }
    }
    class WPML_Redirect_By_Domain extends \WPML_Redirection
    {
        /** @var array $domains */
        private $domains;
        /** @var WPML_WP_API $wp_api */
        private $wp_api;
        /**
         * @param array                    $domains
         * @param WPML_WP_API              $wp_api
         * @param WPML_URL_Converter       $url_converter
         * @param WPML_Request             $request_handler
         * @param WPML_Language_Resolution $lang_resolution
         */
        public function __construct($domains, &$wp_api, &$request_handler, &$url_converter, &$lang_resolution)
        {
        }
        public function get_redirect_target($language = \false)
        {
        }
    }
    class WPML_Redirect_By_Subdir extends \WPML_Redirection
    {
        /**
         * @return bool|string
         */
        public function get_redirect_target()
        {
        }
    }
    class WPML_Rootpage_Redirect_By_Subdir extends \WPML_Redirect_By_Subdir
    {
        /** @var array $urls */
        private $urls;
        /**
         * @param  array                    $urls
         * @param  WPML_Request             $request_handler
         * @param  WPML_URL_Converter       $url_converter
         * @param WPML_Language_Resolution $lang_resolution
         */
        public function __construct($urls, &$request_handler, &$url_converter, &$lang_resolution)
        {
        }
        public function get_redirect_target()
        {
        }
        private function maybe_setup_rootpage()
        {
        }
    }
    /**
     * Class WPML_Language_Per_Domain_SSO
     */
    class WPML_Language_Per_Domain_SSO
    {
        const SSO_NONCE = 'wpml_sso';
        const TRANSIENT_SSO_STARTED = 'wpml_sso_started';
        const TRANSIENT_DOMAIN = 'wpml_sso_domain_';
        const TRANSIENT_USER = 'wpml_sso_user_';
        const TRANSIENT_SESSION_TOKEN = 'wpml_sso_session_';
        const IFRAME_USER_TOKEN_KEY = 'wpml_sso_token';
        const IFRAME_USER_TOKEN_KEY_FOR_DOMAIN = 'wpml_sso_token_domain';
        const IFRAME_DOMAIN_HASH_KEY = 'wpml_sso_iframe_hash';
        const IFRAME_USER_STATUS_KEY = 'wpml_sso_user_status';
        const SSO_TIMEOUT = \MINUTE_IN_SECONDS;
        /** @var SitePress $sitepress */
        private $sitepress;
        /** @var WPML_PHP_Functions $php_functions */
        private $php_functions;
        /** @var WPML_Cookie  */
        private $wpml_cookie;
        /** @var string */
        private $site_url;
        /** @var array */
        private $domains;
        /** @var int $current_user_id */
        private $current_user_id;
        public function __construct(\SitePress $sitepress, \WPML_PHP_Functions $php_functions, \WPML_Cookie $wpml_cookie)
        {
        }
        public function init_hooks()
        {
        }
        public function init_action()
        {
        }
        /**
         * @param string  $user_login
         * @param WP_User $user
         */
        public function wp_login_action($user_login, \WP_User $user)
        {
        }
        /**
         * @param string           $redirect_to
         * @param string           $requested_redirect_to
         * @param WP_User|WP_Error $user
         *
         * @return string
         */
        public function add_redirect_user_token($redirect_to, $requested_redirect_to, $user)
        {
        }
        public function add_iframes_to_footer()
        {
        }
        private function send_headers()
        {
        }
        /** @param int $user_id */
        private function set_current_user_id($user_id = \null)
        {
        }
        private function process_iframe_request()
        {
        }
        /** @return bool */
        private function validate_user_sign_request()
        {
        }
        /** @return int */
        private function get_user_id_from_token()
        {
        }
        /**
         * @param int $user_id
         */
        private function init_sso_transients($user_id)
        {
        }
        /**
         * @param string $domain
         */
        private function finish_sso_for_domain($domain)
        {
        }
        /**
         * @param string $domain
         *
         * @return bool
         */
        private function is_sso_started_for_domain($domain)
        {
        }
        /**
         * @return string
         */
        private function get_current_domain()
        {
        }
        /**
         * @return string
         */
        private function get_current_protocol()
        {
        }
        /**
         * @return array
         */
        private function get_domains()
        {
        }
        /**
         * @return bool
         */
        private function is_iframe_request()
        {
        }
        /**
         * @return bool
         */
        private function is_sso_started()
        {
        }
        /**
         * @param int $user_id
         *
         * @return string
         */
        private function create_user_token($user_id)
        {
        }
        /**
         * @param int $user_id
         *
         * @return bool|string
         */
        private function create_user_token_for_domains($user_id)
        {
        }
        /**
         * @param string $session_token
         * @param int    $user_id
         */
        private function save_session_token($session_token, $user_id)
        {
        }
        /**
         * @param int $user_id
         *
         * @return string
         */
        private function get_session_token($user_id)
        {
        }
        /**
         * @param string      $prefix
         * @param string|null $domain
         * @param string|null $token
         *
         * @return string
         */
        private function create_transient_key($prefix, $domain = \null, $token = \null)
        {
        }
        /**
         * @param string $value
         *
         * @return string
         */
        private function get_hash($value)
        {
        }
        /**
         * As the WP doesn't support "SameSite" parameter in cookies, we have to write our own
         * function for saving authentication cookies to work with iframes.
         *
         * @param int $user_id
         * @param string $token
         */
        private function set_auth_cookie($user_id, $token = '')
        {
        }
    }
    class WPML_REST_Request_Analyze_Factory
    {
        /**
         * @return WPML_REST_Request_Analyze
         */
        public static function create()
        {
        }
    }
    class WPML_Frontend_Redirection_Url
    {
        /** @var string $url */
        private $url;
        /**
         * @param string $url
         */
        public function __construct($url)
        {
        }
        /**
         * URL is being checked for apostrophes. If there are any, apostrophes are encoded.
         *
         * @return string URL with the encoded apostrophes.
         */
        public function encode_apostrophes_in_url()
        {
        }
    }
    class WPML_Frontend_Redirection extends \WPML_SP_User
    {
        /** @var Frontend $request_handler */
        private $request_handler;
        /** @var  WPML_Redirection */
        private $redirect_helper;
        /** @var  WPML_Language_Resolution $lang_resolution */
        private $lang_resolution;
        /**
         * WPML_Frontend_Redirection constructor.
         *
         * @param  SitePress                $sitepress
         * @param  Frontend                 $request_handler
         * @param  WPML_Redirection         $redir_helper
         * @param  WPML_Language_Resolution $lang_resolution
         */
        public function __construct(&$sitepress, &$request_handler, &$redir_helper, &$lang_resolution)
        {
        }
        /**
         * Redirects to a URL corrected for the language information in it, in case request URI and $_REQUEST['lang'],
         * requested domain or $_SERVER['REQUEST_URI'] do not match and gives precedence to the explicit language parameter if
         * there.
         *
         * @return string The language code of the currently requested URL in case no redirection was necessary.
         */
        public function maybe_redirect()
        {
        }
    }
    class WPML_Super_Globals_Validation
    {
        /**
         * @param string $key
         * @param int    $filter
         * @param mixed  $options
         *
         * @return mixed|null
         */
        public function get($key, $filter = \FILTER_SANITIZE_STRING, $options = \null)
        {
        }
        /**
         * @param string $key
         * @param int    $filter
         * @param mixed  $options
         *
         * @return mixed|null
         */
        public function post($key, $filter = \FILTER_SANITIZE_STRING, $options = \null)
        {
        }
        /**
         * @param string $key
         * @param array  $var
         * @param int    $filter
         * @param mixed  $options
         *
         * @return mixed|null
         */
        private function get_value($key, array $var, $filter = \FILTER_SANITIZE_STRING, $options = \null)
        {
        }
    }
    class WPML_Twig_WP_Plugin_Extension extends \WPML\Core\Twig_Extension
    {
        /**
         * Returns the name of the extension.
         * @return string The extension name
         */
        public function getName()
        {
        }
        public function getFilters()
        {
        }
        public function wp_do_action_filter($tag)
        {
        }
    }
    abstract class WPML_TM_XLIFF_Phase
    {
        public function get()
        {
        }
        protected abstract function get_data();
        protected abstract function get_phase_name();
        protected abstract function get_process_name();
    }
    class WPML_TM_Xliff_Reader_Factory extends \WPML_TM_Job_Factory_User
    {
        /**
         * @return WPML_TM_General_Xliff_Reader
         */
        public function general_xliff_reader()
        {
        }
        public function general_xliff_import()
        {
        }
        /**
         * @return WPML_TM_String_Xliff_Reader
         */
        public function string_xliff_reader()
        {
        }
    }
    abstract class WPML_TM_Xliff_Shared extends \WPML_TM_Job_Factory_User
    {
        /** @var  WP_Error $error */
        protected $error;
        /** @var WPML_TM_Validate_HTML */
        private $validator = \null;
        /**
         * @param $string
         *
         * @return mixed
         */
        protected function replace_xliff_new_line_tag_with_new_line($string)
        {
        }
        /**
         * @param SimpleXMLElement $xliff
         *
         * @return string
         */
        protected function identifier_from_xliff($xliff)
        {
        }
        /**
         * @param SimpleXMLElement $xliff
         *
         * @return stdClass|WP_Error
         */
        public function get_job_for_xliff(\SimpleXMLElement $xliff)
        {
        }
        /**
         * @param $xliff_node
         *
         * @return string
         */
        protected function get_xliff_node_target($xliff_node)
        {
        }
        /**
         * @param $validator WPML_TM_Validate_HTML
         */
        public function set_validator($validator)
        {
        }
        /**
         * @return WPML_TM_Validate_HTML
         */
        private function get_validator()
        {
        }
        protected function generate_job_data(\SimpleXMLElement $xliff, $job)
        {
        }
        /**
         * Validate XLIFF target on reading XLIFF.
         *
         * @param $target string
         *
         * @return bool
         */
        private function is_valid_target($target)
        {
        }
        protected function validate_file($name, $content, $current_user)
        {
        }
        /**
         * @param string $filename
         * @return bool
         */
        function validate_file_name($filename)
        {
        }
        protected function is_user_the_job_owner($current_user, $job)
        {
        }
        protected function not_the_job_owner_error($job)
        {
        }
        /**
         * @param string $name
         * @param string $content
         *
         * @return bool|SimpleXMLElement|WP_Error
         */
        protected function check_xml_file($name, $content)
        {
        }
        /**
         * @param $errno
         * @param $errstr
         * @param $errfile
         * @param $errline
         *
         * @throws ErrorException
         */
        protected function error_handler($errno, $errstr, $errfile, $errline)
        {
        }
        /**
         * @param string $name
         *
         * @return WP_Error
         */
        protected function not_xml_file_error($name)
        {
        }
        /**
         * @param array $missing_data
         *
         * @return WP_Error
         */
        protected function invalid_xliff_error(array $missing_data = array())
        {
        }
        /**
         * @return WP_Error
         */
        protected function does_not_belong_error()
        {
        }
    }
    abstract class WPML_TM_Xliff_Reader extends \WPML_TM_Xliff_Shared
    {
        /**
         * @param string $content Xliff file string content
         *
         * @return array
         */
        public abstract function get_data($content);
        /**
         * Parse a XML containing the XLIFF
         *
         * @param string $content
         *
         * @return SimpleXMLElement|WP_Error The parsed XLIFF or a WP error in case it could not be parsed
         */
        public function load_xliff($content)
        {
        }
    }
    class WPML_TM_General_Xliff_Reader extends \WPML_TM_Xliff_Reader
    {
        public function get_xliff_job_identifier($content)
        {
        }
        /**
         * Retrieve the translation from a XLIFF
         *
         * @param string $content The XLIFF representing a job
         *
         * @return WP_Error|array
         */
        public function get_data($content)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_XLIFF
    {
        /** @var DOMElement */
        private $body;
        /** @var DOMDocument */
        private $dom;
        /** @var DOMDocumentType */
        private $dtd;
        /** @var DOMElement */
        private $file;
        /** @var DOMElement */
        private $file_header;
        /** @var DOMElement */
        private $file_reference;
        /** @var DOMElement */
        private $phase_group;
        /** @var DOMElement */
        private $root;
        /** @var array */
        private $trans_units;
        /** @var string */
        private $xliff_version;
        /**
         * WPML_TM_XLIFF constructor.
         *
         * @param string $xliff_version
         * @param string $xml_version
         * @param string $xml_encoding
         */
        public function __construct($xliff_version = '1.2', $xml_version = '1.0', $xml_encoding = 'utf-8')
        {
        }
        /**
         * @param array $attributes
         *
         * @return $this
         */
        public function setFileAttributes($attributes)
        {
        }
        /**
         * @param array $args
         *
         * @return $this
         */
        public function setPhaseGroup(array $args)
        {
        }
        /**
         * @param array $references
         *
         * @return $this
         */
        public function setReferences(array $references)
        {
        }
        // phpcs:disable WordPress.NamingConventions.ValidFunctionName.MethodNameInvalid
        /**
         * Set translation units for xliff.
         *
         * @param array $trans_units Translation units.
         *
         * @return $this
         */
        public function setTranslationUnits($trans_units)
        {
        }
        /**
         * @param string     $type
         * @param array      $trans_unit
         * @param DOMElement $trans_unit_element
         */
        private function appendData($type, $trans_unit, $trans_unit_element)
        {
        }
        /**
         * Validate content.
         *
         * @param string $datatype Type of content data.
         * @param string $content Content.
         *
         * @return string
         */
        private function validate($datatype, $content)
        {
        }
        public function toString()
        {
        }
        private function compose()
        {
        }
        private function setRoot($version)
        {
        }
    }
    /**
     * Class WPML_TM_Xliff_Frontend
     */
    class WPML_TM_Xliff_Frontend extends \WPML_TM_Xliff_Shared
    {
        /**
         * Success admin notices
         *
         * @var array
         */
        private $success;
        /**
         * Attachments
         *
         * @var array
         */
        private $attachments = array();
        /**
         * SitePress instance
         *
         * @var SitePress
         */
        private $sitepress;
        /**
         * Name of archive
         *
         * @var string
         */
        private $export_archive_name;
        /**
         * Priority of late initialisation
         *
         * @var int
         */
        private $late_init_priority = 9999;
        /**
         * Is simple xml turned on
         *
         * @var bool
         */
        private $simplexml_on;
        /**
         * WPML_TM_Xliff_Frontend constructor
         *
         * @param WPML_Translation_Job_Factory $job_factory  Job factory.
         * @param SitePress                    $sitepress    SitePress instance.
         * @param boolean                      $simplexml_on Is simple xml turned on.
         */
        public function __construct(\WPML_Translation_Job_Factory $job_factory, \SitePress $sitepress, $simplexml_on)
        {
        }
        /**
         * Get available xliff versions
         *
         * @return array
         */
        public function get_available_xliff_versions()
        {
        }
        /**
         * Get init priority
         *
         * @return int
         */
        public function get_init_priority()
        {
        }
        /**
         * Get late init priority
         *
         * @return int
         */
        public function get_late_init_priority()
        {
        }
        /**
         * Init class
         *
         * @return bool
         * @throws Exception Throws an exception in case of errors.
         */
        public function init()
        {
        }
        /**
         * Set xliff options
         */
        public function ajax_set_xliff_options()
        {
        }
        /**
         * New job notification
         *
         * @param array $mail   Email content.
         * @param int   $job_id Job id.
         *
         * @return array
         */
        public function new_job_notification($mail, $job_id)
        {
        }
        /**
         * Get zip name from jobs
         *
         * @param array $job_ids Job ids.
         *
         * @return string
         */
        private function get_zip_name_from_jobs($job_ids)
        {
        }
        /**
         * New job notification attachments
         *
         * @param array $attachments Job notification attachments.
         *
         * @return array
         */
        public function new_job_notification_attachments($attachments)
        {
        }
        /**
         * Get xliff file
         *
         * @param int    $job_id        Job id.
         * @param string $xliff_version Xliff version.
         *
         * @return string
         */
        private function get_xliff_file($job_id, $xliff_version = \WPML_XLIFF_DEFAULT_VERSION)
        {
        }
        /**
         * Get xliff archive
         *
         * @param string     $xliff_version Xliff version.
         * @param array|null $job_ids       Job ids.
         *
         * @return wpml_zip
         *
         * @throws Exception Throws an exception in case of errors.
         */
        public function get_xliff_archive($xliff_version, $job_ids = array())
        {
        }
        /**
         * Stream xliff archive
         *
         * @param wpml_zip $archive Zip archive.
         *
         * @throws Exception Throws an exception in case of errors.
         */
        private function stream_xliff_archive($archive)
        {
        }
        /**
         * Save zip file
         *
         * @param string   $path    Where to save the archive.
         * @param wpml_zip $archive Zip archive.
         */
        private function save_zip_file($path, $archive)
        {
        }
        /**
         * Get all filtered job ids
         *
         * @return array
         */
        public function get_all_filtered_job_ids()
        {
        }
        /**
         * Stops any redirects from happening when we call the
         * translation manager to save the translations.
         *
         * @return null
         */
        public function stop_redirect()
        {
        }
        /**
         * Import xliff file
         *
         * @param array $file Xliff file data.
         *
         * @return bool|WP_Error
         */
        private function import_xliff($file)
        {
        }
        /**
         * Translation queue actions
         *
         * @param array  $actions          Actions.
         * @param string $action_name      Action name.
         * @param array  $translation_jobs Translation jobs.
         * @param string $action
         */
        public function translation_queue_xliff_select_actions($actions, $action_name, $translation_jobs, $action)
        {
        }
        /**
         * Has translation jobs
         *
         * @param array $translation_jobs Translation jobs.
         *
         * @return bool
         */
        private function has_translation_jobs($translation_jobs)
        {
        }
        /**
         * Get xliff version select options
         *
         * @return string
         */
        private function get_xliff_version_select_options()
        {
        }
        /**
         * Adds the various possible XLIFF versions to translations queue page's export actions on display
         *
         * @param array $actions Actions.
         *
         * @return array
         */
        public function translation_queue_add_actions($actions)
        {
        }
        /**
         * Export xliff
         *
         * @param array  $data          Xliff data.
         * @param string $xliff_version Xliff version.
         */
        public function translation_queue_do_actions_export_xliff($data, $xliff_version)
        {
        }
        /**
         * Show error messages in admin notices
         */
        public function admin_notices_error()
        {
        }
        /**
         * Show success messages in admin notices
         */
        public function admin_notices_success()
        {
        }
        /**
         * Check translation queue after display
         *
         * @param array $translation_jobs Translation jobs.
         */
        public function translation_queue_after_display($translation_jobs = array())
        {
        }
        /**
         * Print online js script
         */
        public function js_scripts()
        {
        }
        /**
         * Provide translator notification
         */
        public function translator_notification()
        {
        }
        /**
         * Get user xliff version
         *
         * @return bool|string
         */
        private function get_user_xliff_version()
        {
        }
    }
    class WPML_TM_String_Xliff_Reader extends \WPML_TM_Xliff_Reader
    {
        /**
         * Retrieve the string translations from a XLIFF
         *
         * @param string $content The XLIFF representing a set of strings
         *
         * @return WP_Error|array The string translation representation or WP_Error
         * on failure
         */
        public function get_data($content)
        {
        }
    }
    /**
     * Class WPML_TM_Validate_HTML
     */
    class WPML_TM_Validate_HTML
    {
        /** @var string Validated html */
        private $html = '';
        /** @var array Tags currently open */
        private $tags = array();
        /** @var int Number of errors */
        private $error_count = 0;
        /**
         * Get validated html.
         *
         * @return string
         */
        public function get_html()
        {
        }
        /**
         * Validate html.
         *
         * @param string $html HTML to process.
         *
         * @return int Number of errors.
         */
        public function validate($html)
        {
        }
        /**
         * Validate first tag in html flow and return processed html and rest.
         * In processed part broken html is replaced by wpml comment.
         *
         * @param string $html HTML to process.
         *
         * @return array|null
         */
        private function validate_next($html)
        {
        }
        /**
         * Convert WP bugs into wpml commented bugs.
         *
         * @param string $html HTML to process.
         *
         * @return false|string
         */
        private function hide_wp_bugs($html)
        {
        }
        /**
         * Callback to convert WP bugs into wpml commented bugs.
         *
         * @param array $matches
         *
         * @return string
         */
        public function hide_wp_bug_callback($matches)
        {
        }
        /**
         * Convert wpml commented bugs to WP bugs.
         *
         * @param $html
         *
         * @return false|string
         */
        private function restore_wp_bugs($html)
        {
        }
        /**
         * Callback to convert wpml commented bugs to WP bugs.
         *
         * @param array $matches
         *
         * @return mixed
         */
        public function restore_bug_callback($matches)
        {
        }
        /**
         * Convert HTML comments into wpml comments.
         *
         * @param string $html HTML to process.
         *
         * @return false|string
         */
        private function hide_comments($html)
        {
        }
        /**
         * Callback to convert HTML comment to wpml comment.
         *
         * @param array $matches
         *
         * @return string
         */
        public function hide_comment_callback($matches)
        {
        }
        /**
         * Callback to convert HTML declaration to wpml declaration.
         *
         * @param array $matches
         *
         * @return string
         */
        public function hide_declaration_callback($matches)
        {
        }
        /**
         * Convert wpml comments to HTML comments.
         *
         * @param string $html
         *
         * @return string
         */
        private function restore_comments($html)
        {
        }
        /**
         * Callback to convert wpml base64 encoded content.
         *
         * @param array $matches
         *
         * @return string
         */
        public function restore_encoded_content_callback($matches)
        {
        }
        /**
         * Convert self-closing tags to wpml self-closing tags.
         *
         * @param string $html HTML to process.
         *
         * @return false|string
         */
        private function hide_self_closing_tags($html)
        {
        }
        /**
         * Callback to convert self-closing tags to wpml self-closing tags.
         *
         * @param $matches
         *
         * @return string
         */
        public function hide_sct_callback($matches)
        {
        }
        /**
         * Convert wpml self-closing tags to HTML self-closing tags.
         *
         * @param $html
         *
         * @return false|string
         */
        private function restore_self_closing_tags($html)
        {
        }
        /**
         * Callback to convert wpml self-closing tags to self-closing tags.
         *
         * @param $matches
         *
         * @return string
         */
        public function restore_sct_callback($matches)
        {
        }
        /**
         * Convert wpml comments to initial HTML.
         *
         * @param $html
         *
         * @return false|string
         */
        public function restore_html($html)
        {
        }
        /**
         * Convert wpml fragments to HTML fragments.
         *
         * @param $html
         *
         * @return false|string
         */
        private function restore_html_fragments($html)
        {
        }
        /**
         * Callback to convert wpml fragment to HTML fragment.
         *
         * @param $matches
         *
         * @return string
         */
        public function restore_html_fragment_callback($matches)
        {
        }
        /**
         * Convert scripts to wpml scripts.
         *
         * @param string $html HTML to process.
         *
         * @return false|string
         */
        private function hide_scripts($html)
        {
        }
        /**
         * Callback to convert script to wpml script.
         *
         * @param array $matches
         *
         * @return string
         */
        public function hide_script_callback($matches)
        {
        }
        /**
         * Convert wpml scripts to scripts.
         *
         * @param $html
         *
         * @return false|string
         */
        private function restore_scripts($html)
        {
        }
        /**
         * Convert CDATA to wpml cdata.
         *
         * @param string $html HTML to process.
         *
         * @return false|string
         */
        private function hide_cdata($html)
        {
        }
        /**
         * Callback to convert CDATA to wpml cdata.
         *
         * @param array $matches
         *
         * @return string
         */
        public function hide_cdata_callback($matches)
        {
        }
        /**
         * Convert wpml cdata to CDATA.
         *
         * @param $html
         *
         * @return false|string
         */
        private function restore_cdata($html)
        {
        }
        /**
         * Convert styles to wpml scripts.
         *
         * @param string $html HTML to process.
         *
         * @return false|string
         */
        private function hide_styles($html)
        {
        }
        /**
         * Callback to convert style to wpml style.
         *
         * @param array $matches
         *
         * @return string
         */
        public function hide_style_callback($matches)
        {
        }
        /**
         * Convert wpml styles to styles.
         *
         * @param $html
         *
         * @return false|string
         */
        private function restore_styles($html)
        {
        }
        /**
         * Open tag encountered in html.
         *
         * @param string $tag Tag name.
         */
        private function open_tag($tag)
        {
        }
        /**
         * Close tag encountered in html.
         *
         * @param string $tag Tag name.
         *
         * @return bool Closed successfully.
         */
        private function close_tag($tag)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_XLIFF_Factory
    {
        const WPML_XLIFF_DEFAULT_VERSION = \WPML_XLIFF_DEFAULT_VERSION;
        const CREATE_FOR_WRITE = 'WPML_TM_Xliff_Writer';
        const CREATE_FOR_FRONT_END = 'WPML_TM_Xliff_Frontend';
        public function create_writer($xliff_version = self::WPML_XLIFF_DEFAULT_VERSION)
        {
        }
        public function create_frontend()
        {
        }
    }
    class WPML_TM_Xliff_Writer
    {
        const TAB = "\t";
        protected $job_factory;
        private $xliff_version;
        private $xliff_shortcodes;
        private $translator_notes;
        /**
         * WPML_TM_xliff constructor.
         *
         * @param WPML_Translation_Job_Factory   $job_factory
         * @param string                         $xliff_version
         * @param \WPML_TM_XLIFF_Shortcodes|null $xliff_shortcodes
         */
        public function __construct(\WPML_Translation_Job_Factory $job_factory, $xliff_version = \TRANSLATION_PROXY_XLIFF_VERSION, \WPML_TM_XLIFF_Shortcodes $xliff_shortcodes = \null)
        {
        }
        /**
         * Generate a XLIFF file for a given job.
         *
         * @param int $job_id
         *
         * @return resource XLIFF representation of the job
         */
        public function get_job_xliff_file($job_id)
        {
        }
        /**
         * Generate a XLIFF string for a given post or external type (e.g. package) job.
         *
         * @param int $job_id
         *
         * @return string XLIFF representation of the job
         */
        public function generate_job_xliff($job_id)
        {
        }
        /**
         * Generate a XLIFF file for a given set of strings.
         *
         * @param array  $strings
         * @param string $source_language
         * @param string $target_language
         *
         * @return resource XLIFF file
         */
        public function get_strings_xliff_file($strings, $source_language, $target_language)
        {
        }
        private function generate_xliff($original_id, $source_language, $target_language, array $translation_units = array(), $external_file_url = \null, $original_post_type = \null)
        {
        }
        private function get_xliff_version()
        {
        }
        /**
         * Generate translation units for a given set of strings.
         *
         * The units are the actual content to be translated
         * Represented as a source and a target
         *
         * @param array $strings
         *
         * @return array The translation units representation
         */
        private function generate_strings_translation_units_data($strings)
        {
        }
        /**
         * @param stdClass[] $strings
         * @param string     $source_lang
         * @param string     $target_lang
         *
         * @return stdClass[]
         */
        private function pre_populate_strings_with_translation_memory($strings, $source_lang, $target_lang)
        {
        }
        /**
         * @param array  $strings_to_translate
         * @param string $source_lang
         * @param string $target_lang
         *
         * @return array
         */
        private function get_original_translated_map_from_translation_memory($strings_to_translate, $source_lang, $target_lang)
        {
        }
        /**
         * Generate translation units.
         *
         * The units are the actual content to be translated
         * Represented as a source and a target
         *
         * @param stdClass $job
         *
         * @return array The translation units data
         */
        private function get_job_translation_units_data($job)
        {
        }
        /**
         * @param \stdClass $field
         * @param \stdClass $job
         *
         * @return string
         */
        private function get_field_title($field, $job)
        {
        }
        /**
         * @param array  $elements
         * @param string $source_lang
         * @param string $target_lang
         *
         * @return array
         */
        private function pre_populate_elements_with_translation_memory(array $elements, $source_lang, $target_lang)
        {
        }
        /**
         * Get translation unit data.
         *
         * @param string  $field_id                  Field ID.
         * @param string  $field_name                Field name.
         * @param string  $field_data                Field content.
         * @param string  $field_data_translated     Field translated content.
         * @param boolean $is_translated_from_memory Boolean flag - is translated from memory.
         * @param string  $field_wrap_tag            Field wrap tag (h1...h6, etc.)
         * @param string  $title
         *
         * @return array
         */
        private function get_translation_unit_data($field_id, $field_name, $field_data, $field_data_translated, $is_translated_from_memory = \false, $field_wrap_tag = '', $title = '')
        {
        }
        /**
         * @param string $string
         *
         * @return string
         */
        protected function replace_new_line_with_tag($string)
        {
        }
        private function remove_line_breaks_inside_tags($string)
        {
        }
        /**
         * @param array $matches
         *
         * @return string
         */
        private function remove_line_breaks_inside_tag_callback(array $matches)
        {
        }
        /**
         * @param string $string
         *
         * Remove all characters below 0x20 except for 0x09, 0x0A and 0x0D
         * @see https://www.w3.org/TR/xml/#charsets
         *
         * @return string
         */
        private function remove_invalid_chars($string)
        {
        }
        /**
         * Save a xliff string to a temporary file and return the file ressource
         * handle
         *
         * @param string $xliff_content
         *
         * @return resource XLIFF
         */
        private function generate_xliff_file($xliff_content)
        {
        }
        /**
         * @param $job
         *
         * @return false|null|string
         */
        private function get_external_url($job)
        {
        }
        /**
         * @param $content
         *
         * @return bool
         */
        private function is_valid_unit_content($content)
        {
        }
        private function get_translator_notes($job)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_XLIFF_Translator_Notes extends \WPML_TM_XLIFF_Phase
    {
        private $post_id;
        public function __construct($post_id = 0)
        {
        }
        /**
         * @return string
         */
        protected function get_data()
        {
        }
        protected function get_phase_name()
        {
        }
        protected function get_process_name()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_XLIFF_Shortcodes extends \WPML_TM_XLIFF_Phase
    {
        const SHORTCODE_STORE_OPTION_KEY = 'wpml_xliff_shortcodes';
        /**
         * @return string
         */
        protected function get_data()
        {
        }
        /**
         * @return array
         */
        private function get_shortcodes()
        {
        }
        private function get_sanitized_shortcodes(array $shortcodes1, array $shortcodes2)
        {
        }
        protected function get_phase_name()
        {
        }
        protected function get_process_name()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_XLIFF_Post_Type extends \WPML_TM_XLIFF_Phase
    {
        private $post_type;
        public function __construct($post_type = '')
        {
        }
        /**
         * @return string
         */
        protected function get_data()
        {
        }
        protected function get_phase_name()
        {
        }
        protected function get_process_name()
        {
        }
    }
    class WPML_TM_General_Xliff_Import extends \WPML_TM_Job_Factory_User
    {
        /**
         * @var WPML_TM_Xliff_Reader_Factory $xliff_reader_factory
         */
        private $xliff_reader_factory;
        /**
         * WPML_TM_General_Xliff_Import constructor.
         *
         * @param WPML_Translation_Job_Factory $job_factory
         * @param WPML_TM_Xliff_Reader_Factory $xliff_reader_factory
         */
        public function __construct(&$job_factory, &$xliff_reader_factory)
        {
        }
        /**
         * Imports the data in the xliff string into an array representation
         * that fits to the given target translation id.
         *
         * @param string $xliff_string
         * @param int    $target_translation_id
         *
         * @return WP_Error|array
         */
        public function import($xliff_string, $target_translation_id)
        {
        }
    }
}
namespace WPML\SuperGlobals {
    class Server
    {
        public static function getServerName()
        {
        }
    }
}
namespace {
    class WPML_TM_Parent_Filter_Ajax_Factory implements \IWPML_AJAX_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_TM_Parent_Filter_Ajax implements \IWPML_Action
    {
        /** @var SitePress $sitepress */
        private $sitepress;
        /** @var array $wp_post_types */
        private $wp_post_types;
        public function __construct(\SitePress $sitepress, array $wp_post_types)
        {
        }
        public function add_hooks()
        {
        }
        public function get_parents_dropdown()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_Privacy_Content_Factory implements \IWPML_Backend_Action_Loader
    {
        /**
         * @return IWPML_Action
         */
        public function create()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    abstract class WPML_Privacy_Content implements \IWPML_Action
    {
        public function add_hooks()
        {
        }
        public function privacy_policy()
        {
        }
        /**
         * @return string
         */
        protected abstract function get_plugin_name();
        /**
         * @return string|array a single or an array of strings (plain text or HTML). Array items will be wrapped by a paragraph tag.
         */
        protected abstract function get_privacy_policy();
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Core_Privacy_Content extends \WPML_Privacy_Content
    {
        /**
         * @return string
         */
        protected function get_plugin_name()
        {
        }
        /**
         * @return string|array
         */
        protected function get_privacy_policy()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Privacy_Content_Factory implements \IWPML_Backend_Action_Loader
    {
        /**
         * @return IWPML_Action
         */
        public function create()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_Privacy_Content extends \WPML_Privacy_Content
    {
        /**
         * @return string
         */
        protected function get_plugin_name()
        {
        }
        /**
         * @return string|array
         */
        protected function get_privacy_policy()
        {
        }
    }
    class WPML_SEO_HeadLangs
    {
        private $sitepress;
        /**
         * @var WPML_Queried_Object_Factory
         */
        private $queried_object_factory;
        /**
         * WPML_SEO_HeadLangs constructor.
         *
         * @param SitePress                   $sitepress
         * @param WPML_Queried_Object_Factory $queried_object_factory
         */
        public function __construct(\SitePress $sitepress, \WPML_Queried_Object_Factory $queried_object_factory)
        {
        }
        private function get_seo_settings()
        {
        }
        public function init_hooks()
        {
        }
        function head_langs()
        {
        }
        function render_menu()
        {
        }
        private function must_render($languages)
        {
        }
        /**
         * @return bool
         */
        private function is_home_front_or_archive_page()
        {
        }
        /**
         * @param array $lang
         *
         * @return string
         */
        private function get_hreflang_code($lang)
        {
        }
        private function is_valid_hreflang_code($code)
        {
        }
    }
    /**
     * Created by PhpStorm.
     * User: andreasciamanna
     * Date: 22/05/2018
     * Time: 08:44
     */
    class WPML_Current_Screen
    {
        private $translatable_types = array();
        private $allowed_screen_ids_for_edit_posts_list = array();
        private $allowed_screen_ids_for_edit_post = array();
        public function is_edit_posts_list()
        {
        }
        public function is_edit_post()
        {
        }
        private function get_translatable_types()
        {
        }
        private function get_allowed_screen_ids_for_edit_posts_list()
        {
        }
        private function get_allowed_screen_ids_for_edit_post()
        {
        }
        public function get_posts()
        {
        }
        private function get_post()
        {
        }
        public function get_post_type()
        {
        }
        public function id_ends_with($suffix)
        {
        }
        /**
         * @return WP_Screen|null
         */
        private function get()
        {
        }
        private function has_posts()
        {
        }
        private function has_post()
        {
        }
    }
    /**
     * Used for helping building other factories.
     *
     * @see    Usage.
     *
     * @author OnTheGo Systems
     */
    class WPML_TM_AMS_ATE_Factories
    {
        /**
         * It returns an cached instance of \WPML_TM_ATE_API.
         *
         * @return \WPML_TM_ATE_API
         */
        public function get_ate_api()
        {
        }
        /**
         * It returns an cached instance of \WPML_TM_ATE_API.
         *
         * @return \WPML_TM_AMS_API
         */
        public function get_ams_api()
        {
        }
        /**
         * If ATE is active, it returns true.
         *
         * @return bool
         */
        public function is_ate_active()
        {
        }
    }
}
namespace WPML\TM\ATE\Log {
    class EventsTypes
    {
        /** Communication errors */
        const SERVER_ATE = 1;
        const SERVER_AMS = 2;
        const SERVER_XLIFF = 3;
        /** Internal errors */
        const JOB_DOWNLOAD = 10;
        /** Retry  */
        const JOB_RETRY = 20;
        const SITE_REGISTRATION_RETRY = 21;
        /** Sync */
        const JOBS_SYNC = 30;
        public static function getLabel($eventType)
        {
        }
    }
    class Entry
    {
        /**
         * @var int $timestamp The log's creation timestamp.
         */
        public $timestamp = 0;
        /**
         * @see EventsTypes
         *
         * @var int $eventType The event code that triggered the log.
         */
        public $eventType = 0;
        /**
         * @var string $description The details of the log (e.g. exception message).
         */
        public $description = '';
        /**
         * @var int $wpmlJobId [Optional] The WPML Job ID (when applies).
         */
        public $wpmlJobId = 0;
        /**
         * @var int $ateJobId [Optional] The ATE Job ID (when applies).
         */
        public $ateJobId = 0;
        /**
         * @var array $extraData [Optional] Complementary serialized data (e.g. API request/response data).
         */
        public $extraData = [];
        /**
         * @param array $item
         *
         * @return Entry
         */
        public function __construct(array $item = null)
        {
        }
        public static function createForType($eventType, $extraData)
        {
        }
        public static function retryJob($wpmlJobId, $extraData)
        {
        }
        /**
         * @return string
         */
        public function getFormattedDate()
        {
        }
        /**
         * @return string
         */
        public function getExtraDataToString()
        {
        }
    }
    class Storage
    {
        const OPTION_GROUP = 'TM\\ATE\\Log';
        const OPTION_NAME = 'logs';
        const MAX_ENTRIES = 50;
        public static function add(\WPML\TM\ATE\Log\Entry $entry, $avoidDuplication = false)
        {
        }
        /**
         * @param Entry $entry
         */
        public static function remove(\WPML\TM\ATE\Log\Entry $entry)
        {
        }
        /**
         * @return Collection Collection of Entry objects.
         */
        public static function getAll()
        {
        }
    }
    class Hooks implements \IWPML_Backend_Action, \IWPML_DIC_Action
    {
        const SUBMENU_HANDLE = 'wpml-tm-ate-log';
        /** @var ViewFactory $viewFactory */
        private $viewFactory;
        public function __construct(\WPML\TM\ATE\Log\ViewFactory $viewFactory)
        {
        }
        public function add_hooks()
        {
        }
        public function renderSupportSection()
        {
        }
        public function addLogSubmenuPage()
        {
        }
        public function renderPage()
        {
        }
    }
    class View
    {
        /** @var Collection $logs */
        private $logs;
        public function __construct(\WPML\Collect\Support\Collection $logs)
        {
        }
        public function renderSupportSection()
        {
        }
        public function renderPage()
        {
        }
        private function renderTableHeader()
        {
        }
        public function renderTableRow(\WPML\TM\ATE\Log\Entry $entry)
        {
        }
        private function renderEmptyTable()
        {
        }
    }
    class ViewFactory
    {
        public function create()
        {
        }
    }
}
namespace {
    class WPML_TM_AMS_Translator_Activation_Records
    {
        const USER_META = 'ate_activated';
        /** @var WPML_WP_User_Factory $user_factory */
        private $user_factory;
        public function __construct(\WPML_WP_User_Factory $user_factory)
        {
        }
        public function is_activated($user_email)
        {
        }
        public function is_current_user_activated()
        {
        }
        public function is_user_activated(\WPML_User $user)
        {
        }
        public function set_activated($user_email, $state)
        {
        }
        public function update(array $translators)
        {
        }
    }
    class WPML_TM_Old_Editor implements \IWPML_Action
    {
        const ACTION = 'icl_ajx_custom_call';
        const CUSTOM_AJAX_CALL = 'icl_doc_translation_method';
        const NOTICE_ID = 'wpml-translation-management-old-editor';
        const NOTICE_GROUP = 'wpml-translation-management';
        public function add_hooks()
        {
        }
        public function handle_custom_ajax_call($call, $data)
        {
        }
        /**
         * @return bool
         */
        private function is_ate_enabled_and_manager_wizard_completed()
        {
        }
    }
    class WPML_TM_ATE_Job_Data_Fallback_Factory implements \IWPML_Backend_Action_Loader, \IWPML_REST_Action_Loader
    {
        /**
         * @return WPML_TM_ATE_Job_Data_Fallback
         */
        public function create()
        {
        }
    }
    class WPML_TM_ATE_Translator_Message_Classic_Editor_Factory implements \IWPML_Backend_Action_Loader, \IWPML_AJAX_Action_Loader
    {
        /**
         * @return \WPML_TM_ATE_Translator_Message_Classic_Editor|\IWPML_Action|null
         */
        public function create()
        {
        }
        /**
         * @return bool
         */
        private function is_editing_old_translation_and_te_is_used_for_old_translation()
        {
        }
        /**
         * @return bool
         */
        private function is_ate_enabled_and_manager_wizard_completed()
        {
        }
        /**
         * @return bool
         */
        private function is_ajax_or_translation_queue()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_AMS_Synchronize_Actions_Factory implements \IWPML_Backend_Action_Loader
    {
        /**
         * @return IWPML_Action|IWPML_Action[]|null
         */
        public function create()
        {
        }
    }
    class WPML_TM_AMS_Synchronize_Users_On_Access_Denied
    {
        const ERROR_MESSAGE = 'Authentication error, please contact your translation manager to check your subscription';
        /** @var WPML_TM_AMS_Synchronize_Actions */
        private $ams_synchronize_actions;
        /** @var WPML_TM_ATE_Jobs */
        private $ate_jobs;
        public function add_hooks()
        {
        }
        public function catch_access_error()
        {
        }
        /**
         * @return bool
         */
        private function ate_redirected_due_to_lack_of_access()
        {
        }
        /**
         * @return IWPML_Action|IWPML_Action[]|WPML_TM_AMS_Synchronize_Actions
         */
        private function get_ams_synchronize_actions()
        {
        }
        /**
         * @return WPML_TM_ATE_Jobs
         */
        private function get_ate_jobs()
        {
        }
        /**
         * @param WPML_TM_AMS_Synchronize_Actions $ams_synchronize_actions
         */
        public function set_ams_synchronize_actions(\WPML_TM_AMS_Synchronize_Actions $ams_synchronize_actions)
        {
        }
        /**
         * @param WPML_TM_ATE_Jobs $ate_jobs
         */
        public function set_ate_jobs(\WPML_TM_ATE_Jobs $ate_jobs)
        {
        }
    }
    /**
     * \WPML_TM_ATE_Translator_Login factory.
     *
     * @author OnTheGo Systems
     *
     * NOTE: This uses the Frontend loader because is_admin() returns false during wp_login
     */
    class WPML_TM_ATE_Translator_Login_Factory implements \IWPML_Frontend_Action_Loader
    {
        /**
         * It returns an instance of WPML_TM_ATE_Translator_Login is ATE is enabled and active.
         *
         * @return \WPML_TM_ATE_Translator_Logine|\IWPML_Frontend_Action_Loader|null
         */
        public function create()
        {
        }
    }
    class WPML_TM_ATE_Translator_Message_Classic_Editor implements \IWPML_Action
    {
        const ACTION = 'wpml_ate_translator_classic_editor';
        const USER_OPTION = 'wpml_ate_translator_classic_editor_minimized';
        /** @var WPML_Translation_Manager_Records */
        private $translation_manager_records;
        /** @var WPML_WP_User_Factory */
        private $user_factory;
        /** @var WPML_TM_ATE_Request_Activation_Email */
        private $activation_email;
        public function __construct(\WPML_Translation_Manager_Records $translation_manager_records, \WPML_WP_User_Factory $user_factory, \WPML_TM_ATE_Request_Activation_Email $activation_email)
        {
        }
        public function add_hooks()
        {
        }
        public function classic_editor_message()
        {
        }
        private function output_translation_manager_list()
        {
        }
        public function handle_ajax()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ATE_Post_Edit_Actions implements \IWPML_Action
    {
        private $endpoints;
        /**
         * WPML_TM_ATE_Jobs_Actions constructor.
         *
         * @param WPML_TM_ATE_AMS_Endpoints $endpoints
         */
        public function __construct(\WPML_TM_ATE_AMS_Endpoints $endpoints)
        {
        }
        public function add_hooks()
        {
        }
        public function allowed_redirect_hosts($hosts)
        {
        }
    }
}
namespace WPML\TM\ATE\Hooks {
    class JobActions implements \IWPML_Action
    {
        /** @var \WPML_TM_ATE_API $apiClient */
        private $apiClient;
        public function __construct(\WPML_TM_ATE_API $apiClient)
        {
        }
        public function add_hooks()
        {
        }
        public function cancelJobInATE(\WPML_TM_Post_Job_Entity $job)
        {
        }
        public function cancelJobsInATE(array $jobs)
        {
        }
        public function hideJobsAfterRemoveLanguage($oldLanguages)
        {
        }
        public function hideJobsAfterTranslationMethodChange($translateEverythingActive)
        {
        }
        private static function getInProgressSearch()
        {
        }
        private function hideJobs(\WPML_TM_Jobs_Search_Params $jobsSearchParams)
        {
        }
    }
}
namespace {
    /**
     * @todo Perhaps this class is redundant
     *
     * @author OnTheGo Systems
     */
    class WPML_TM_ATE_Jobs_Store_Actions_Factory implements \IWPML_Backend_Action_Loader
    {
        /**
         * @return IWPML_Action|IWPML_Action[]|null
         */
        public function create()
        {
        }
    }
    class WPML_TM_ATE_Job_Data_Fallback implements \IWPML_Action
    {
        /** @var WPML_TM_ATE_API */
        private $ate_api;
        /**
         * @param WPML_TM_ATE_API $ate_api
         */
        public function __construct(\WPML_TM_ATE_API $ate_api)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param array $data
         * @param int   $wpml_job_id
         *
         * @return array
         */
        public function get_data_from_api(array $data, $wpml_job_id)
        {
        }
    }
}
namespace WPML\TM\ATE\Hooks {
    class ReturnedJobActionsFactory implements \IWPML_Backend_Action_Loader, \IWPML_REST_Action_Loader
    {
        public function create()
        {
        }
    }
}
namespace {
    /**
     * @todo The hook 'wpml_tm_ate_jobs_store' seems to be never used so this class and its factory may be obsolete
     *
     * @author OnTheGo Systems
     */
    class WPML_TM_ATE_Jobs_Store_Actions implements \IWPML_Action
    {
        /**
         * @var WPML_TM_ATE_Jobs
         */
        private $ate_jobs;
        /**
         * WPML_TM_ATE_Jobs_Actions constructor.
         *
         * @param WPML_TM_ATE_Jobs $ate_jobs
         */
        public function __construct(\WPML_TM_ATE_Jobs $ate_jobs)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param int   $wpml_job_id
         * @param array $ate_job_data
         *
         * @return array|null
         */
        public function store($wpml_job_id, $ate_job_data)
        {
        }
    }
    class WPML_TM_AMS_Synchronize_Users_On_Access_Denied_Factory implements \IWPML_Backend_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_TM_Old_Editor_Factory implements \IWPML_Backend_Action_Loader, \IWPML_AJAX_Action_Loader
    {
        public function create()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ATE_Translator_Login implements \IWPML_Action
    {
        /** @var WPML_TM_AMS_Translator_Activation_Records */
        private $translator_activation_records;
        /** @var WPML_Translator_Records */
        private $translator_records;
        /** @var WPML_TM_AMS_API */
        private $ams_api;
        public function __construct(\WPML_TM_AMS_Translator_Activation_Records $translator_activation_records, \WPML_Translator_Records $translator_records, \WPML_TM_AMS_API $ams_api)
        {
        }
        public function add_hooks()
        {
        }
        public function wp_login($user_login, $user)
        {
        }
    }
    /**
     * Factory class for \WPML_TM_ATE_Jobs_Actions.
     *
     * @package wpml\tm
     *
     * @author  OnTheGo Systems
     */
    class WPML_TM_ATE_Jobs_Actions_Factory implements \IWPML_Backend_Action_Loader, \IWPML_REST_Action_Loader
    {
        /**
         * The instance of \WPML_Current_Screen.
         *
         * @var WPML_Current_Screen
         */
        private $current_screen;
        /**
         * It returns an instance of \WPML_TM_ATE_Jobs_Actions or null if ATE is not enabled and active.
         *
         * @return \WPML_TM_ATE_Jobs_Actions|null
         * @throws \Auryn\InjectionException
         */
        public function create()
        {
        }
        /**
         * The global instance of \Sitepress.
         *
         * @return SitePress
         */
        private function get_sitepress()
        {
        }
        /**
         * It gets the instance of \WPML_Current_Screen.
         *
         * @return \WPML_Current_Screen
         */
        private function get_current_screen()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ATE_Required_Actions_Base
    {
        private $ate_enabled;
        protected function is_ate_enabled()
        {
        }
    }
}
namespace WPML\TM\ATE\Hooks {
    class JobActionsFactory implements \IWPML_Backend_Action_Loader, \IWPML_Frontend_Action_Loader
    {
        public function create()
        {
        }
    }
}
namespace {
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ATE_Post_Edit_Actions_Factory implements \IWPML_Backend_Action_Loader
    {
        /**
         * @return IWPML_Action|IWPML_Action[]|null
         */
        public function create()
        {
        }
    }
    class WPML_TM_ATE_API_Error
    {
        public function log($message)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ATE_Jobs_Actions implements \IWPML_Action
    {
        const RESPONSE_ATE_NOT_ACTIVE_ERROR = 403;
        const RESPONSE_ATE_DUPLICATED_SOURCE_ID = 417;
        const RESPONSE_ATE_UNEXPECTED_ERROR = 500;
        const RESPONSE_ATE_ERROR_NOTICE_ID = 'ate-update-error';
        const RESPONSE_ATE_ERROR_NOTICE_GROUP = 'default';
        const CREATE_ATE_JOB_CHUNK_WORDS_LIMIT = 2000;
        /**
         * @var WPML_TM_ATE_API
         */
        private $ate_api;
        /**
         * @var WPML_TM_ATE_Jobs
         */
        private $ate_jobs;
        /**
         * @var WPML_TM_AMS_Translator_Activation_Records
         */
        private $translator_activation_records;
        /** @var bool */
        private $is_second_attempt_to_get_jobs_data = \false;
        /**
         * @var SitePress
         */
        private $sitepress;
        /**
         * @var WPML_Current_Screen
         */
        private $current_screen;
        /**
         * WPML_TM_ATE_Jobs_Actions constructor.
         *
         * @param \WPML_TM_ATE_API                           $ate_api
         * @param \WPML_TM_ATE_Jobs                          $ate_jobs
         * @param \SitePress                                 $sitepress
         * @param \WPML_Current_Screen                       $current_screen
         * @param \WPML_TM_AMS_Translator_Activation_Records $translator_activation_records
         */
        public function __construct(\WPML_TM_ATE_API $ate_api, \WPML_TM_ATE_Jobs $ate_jobs, \SitePress $sitepress, \WPML_Current_Screen $current_screen, \WPML_TM_AMS_Translator_Activation_Records $translator_activation_records)
        {
        }
        public function add_hooks()
        {
        }
        public function handle_messages()
        {
        }
        /**
         * @param int    $job_id
         * @param string $translation_service
         *
         * @throws \InvalidArgumentException
         * @throws \RuntimeException
         */
        public function added_translation_job($job_id, $translation_service)
        {
        }
        /**
         * @param array $jobs
         * @param int|null $sentFrom
         *
         * @return bool|void
         * @throws \InvalidArgumentException
         * @throws \RuntimeException
         */
        public function added_translation_jobs(array $jobs, $sentFrom = \null)
        {
        }
        private function map_response_jobs($responseJobs)
        {
        }
        /**
         * @param string      $type
         * @param string      $message
         * @param string|null $id
         */
        private function add_message($type, $message, $id = \null)
        {
        }
        /**
         * @param array    $jobsData
         * @param int|null $sentFrom
         *
         * @return mixed
         * @throws \InvalidArgumentException
         */
        public function create_jobs(array $jobsData, $sentFrom)
        {
        }
        /**
         * After implementation of wpmltm-3211 and wpmltm-3391, we should not find missing ATE IDs anymore.
         * Some code below seems dead but we'll keep it for now in case we are missing a specific context.
         *
         * @link https://onthegosystems.myjetbrains.com/youtrack/issue/wpmltm-3211
         * @link https://onthegosystems.myjetbrains.com/youtrack/issue/wpmltm-3391
         */
        private function get_ate_jobs_data(array $translation_jobs)
        {
        }
        /**
         * @param string      $default_url
         * @param int         $job_id
         * @param null|string $return_url
         *
         * @return string
         * @throws \InvalidArgumentException
         */
        public function get_editor_url($default_url, $job_id, $return_url = \null)
        {
        }
        /**
         * @param $ignore
         * @param array  $translation_jobs
         *
         * @return array
         */
        public function get_ate_jobs_data_filter($ignore, array $translation_jobs)
        {
        }
        private function get_ate_job_id($job_id)
        {
        }
        /**
         * @param mixed $response
         *
         * @throws \RuntimeException
         */
        protected function check_response_error($response)
        {
        }
        /**
         * @param $ate_job_id
         */
        private function resign_job_on_error($ate_job_id)
        {
        }
        /**
         * @param $translation_job
         *
         * @return bool
         */
        private function is_ate_translation_job($translation_job)
        {
        }
        /**
         * @param array $responses
         * @param \WPML_TM_ATE_Models_Job_Create[] $sentJobs
         *
         * @return array
         */
        private function getResponsesJobs($responses, $sentJobs)
        {
        }
        /**
         * @param \WPML_TM_ATE_Models_Job_Create[] $jobs
         *
         * @return array
         */
        private function getChunkedJobs($jobs)
        {
        }
        /**
         * @param int $jobId
         */
        private function logRetryError($jobId)
        {
        }
        /**
         * @param int $jobId
         */
        private function logError($jobId)
        {
        }
        private function getJobType($translationJob)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_AMS_Synchronize_Actions implements \IWPML_Action
    {
        const ENABLED_FOR_TRANSLATION_VIA_ATE = 'wpml_enabled_for_translation_via_ate';
        /**
         * @var WPML_TM_AMS_API
         */
        private $ams_api;
        /**
         * @var WPML_TM_AMS_Users
         */
        private $ams_user_records;
        /**
         * @var WPML_WP_User_Factory $user_factory
         */
        private $user_factory;
        /**
         * @var WPML_TM_AMS_Translator_Activation_Records
         */
        private $translator_activation_records;
        /** @var WPML_Translation_Manager_Records */
        private $tm_records;
        /** @var WPML_Translator_Records */
        private $translator_records;
        /** @var int[] */
        private $deletedManagerIds = [];
        /** @var int[] */
        private $deletedTranslatorIds = [];
        public function __construct(\WPML_TM_AMS_API $ams_api, \WPML_TM_AMS_Users $ams_user_records, \WPML_WP_User_Factory $user_factory, \WPML_TM_AMS_Translator_Activation_Records $translator_activation_records, \WPML_Translation_Manager_Records $tm_records, \WPML_Translator_Records $translator_records)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @throws \InvalidArgumentException
         */
        public function synchronize_translators()
        {
        }
        /**
         * @throws \InvalidArgumentException
         */
        public function synchronize_managers()
        {
        }
        public function enable_subscription($user_id)
        {
        }
        /**
         * @param int $user_id
         */
        public function prepare_user_deleted($user_id)
        {
        }
        /**
         * @param int $user_id
         */
        public function user_changed($user_id)
        {
        }
    }
}
namespace WPML\TM\ATE\Hooks {
    class ReturnedJobActions implements \IWPML_Action
    {
        /** @var callable :: int->string->void */
        private $addToQueue;
        /**
         * @param  callable $addToQueue
         */
        public function __construct(callable $addToQueue)
        {
        }
        public function add_hooks()
        {
        }
        public function addToQueue()
        {
        }
    }
}
namespace {
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ATE_Status
    {
        public static function is_enabled()
        {
        }
        public static function is_active()
        {
        }
        public static function is_enabled_and_activated()
        {
        }
    }
}
namespace WPML\TM\ATE\TranslateEverything {
    class UntranslatedPosts
    {
        public static function get(array $secondaryLanguages, $postType, $queueSize)
        {
        }
    }
}
namespace {
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ATE
    {
        const SITE_ID_SCOPE = 'ate';
        private $translation_method_ate_enabled;
        /**
         * @var WPML_TM_ATE_API
         */
        private $tm_ate_api;
        /**
         * @var WPML_TM_ATE_Jobs
         */
        private $tm_ate_jobs;
        public function is_translation_method_ate_enabled()
        {
        }
        /**
         * @param int    $trid
         * @param string $language
         *
         * @return bool
         */
        public function is_translation_ready_for_post($trid, $language)
        {
        }
        /**
         * @param int    $trid
         * @param string $language
         *
         * @return int|bool
         */
        public function get_translation_status_id_for_post($trid, $language)
        {
        }
        /**
         * @param int    $trid
         * @param string $language
         *
         * @return array|WP_Error
         */
        public function get_job_data_for_post($trid, $language)
        {
        }
        /**
         * @return WPML_TM_ATE_API
         */
        private function get_tm_ate_api()
        {
        }
        /**
         * @return WPML_TM_ATE_Jobs
         */
        private function get_tm_ate_jobs()
        {
        }
    }
}
namespace WPML\TM\ATE\Review {
    /**
     * Class ReviewStatus
     * @package WPML\TM\ATE\Review
     *
     * @method static callable|bool needsReview( ...$reviewStatus ) - Curried :: string->bool
     * @method static callable|bool doesJobNeedReview( ...$job ) - Curried :: \stdClass->bool
     */
    class ReviewStatus
    {
        use \WPML\Collect\Support\Traits\Macroable;
        const NEEDS_REVIEW = 'NEEDS_REVIEW';
        const EDITING = 'EDITING';
        const ACCEPTED = 'ACCEPTED';
        public static function init()
        {
        }
    }
    class AcceptTranslation implements \WPML\Ajax\IHandler
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    class ApproveTranslations
    {
        public static function run(array $jobIds)
        {
        }
    }
    /**
     * This will allow displaying private CPT reviews on the frontend.
     */
    class NonPublicCPTPreview
    {
        const POST_TYPE = 'wpmlReviewPostType';
        /**
         * @param array $args
         *
         * @return array
         */
        public static function addArgs(array $args)
        {
        }
        /**
         * @return callable
         */
        public static function allowReviewPostTypeQueryVar()
        {
        }
        /**
         * @return callable
         */
        public static function enforceReviewPostTypeIfSet()
        {
        }
    }
    class UpdateTranslation implements \WPML\Ajax\IHandler
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
        private function completeWithoutChanges($jobId)
        {
        }
    }
    class ReviewTranslation implements \IWPML_Frontend_Action, \IWPML_Backend_Action
    {
        public function add_hooks()
        {
        }
        private static function canEditLanguage($translator, $job)
        {
        }
        /**
         * This will ensure to block the standard preview
         * for non-public CPTs.
         *
         * @return bool
         */
        private static function hasValidNonce()
        {
        }
        public function handleTranslationReview()
        {
        }
        public static function printReviewToolbarAnchor()
        {
        }
        /**
         * @return null This will stop the redirection.
         */
        public static function failGracefullyOnPreviewRedirection()
        {
        }
        public function getData($jobId, $post)
        {
        }
        public function isCompletedInATE($params)
        {
        }
    }
    class StatusIcons implements \IWPML_Backend_Action
    {
        public function add_hooks()
        {
        }
        public static function getReviewTitle($langProp)
        {
        }
        public static function getEditTitle($langProp)
        {
        }
        private static function getLanguageName($langProp)
        {
        }
        private function setLink()
        {
        }
    }
    class Cancel
    {
        public static function run(array $jobIds)
        {
        }
    }
    /**
     * Class PreviewLink
     *
     * @package WPML\TM\ATE\Review
     *
     * @method static callable|string getWithSpecifiedReturnUrl( ...$returnUrl, ...$translationPostId, ...$jobId ) : Curried:: int->int->string
     * @method static callable|string get( ...$translationPostId, ...$jobId ) : Curried:: int->int->string
     * @method static callable|string getByJob( ...$job ) : Curried:: \stdClass->string
     * @method static Callable|string getNonceName( ...$translationPostId ) : Curried:: int->string
     */
    class PreviewLink
    {
        use \WPML\Collect\Support\Traits\Macroable;
        public static function init()
        {
        }
    }
    class ApplyJob implements \IWPML_Backend_Action, \IWPML_REST_Action, \IWPML_AJAX_Action
    {
        /** @var string[] */
        private static $excluded_from_review = ['st-batch', 'package'];
        public function add_hooks()
        {
        }
        private static function addJobStatusHook()
        {
        }
        private static function addTranslationCompleteHook()
        {
        }
        private static function addTranslationPreSaveHook()
        {
        }
        /**
         * @param $job
         *
         * @return bool
         */
        private static function shouldBeReviewed($job)
        {
        }
    }
    class NextTranslationLink
    {
        public static function get($currentJob)
        {
        }
        private static function getTranslationPostId()
        {
        }
        /**
         * @return \Closure :: \stdClass -> \WPML_TM_Post_Job_Entity
         */
        private static function getNextJob()
        {
        }
        /**
         * @param string   $sourceLang
         * @param string[] $targetLanguages
         *
         * @return \WPML_TM_Jobs_Search_Params
         */
        private static function buildSearchParams($sourceLang, array $targetLanguages)
        {
        }
    }
    class ReviewCompletedNotice implements \IWPML_Backend_Action
    {
        public function add_hooks()
        {
        }
    }
}
namespace WPML\TM\ATE {
    class JobRecords
    {
        const FIELD_ATE_JOB_ID = 'ate_job_id';
        const FIELD_IS_EDITING = 'is_editing';
        /** @var \wpdb $wpdb */
        private $wpdb;
        /** @var Collection $jobs */
        private $jobs;
        public function __construct(\wpdb $wpdb)
        {
        }
        /**
         * This method will retrieve data from the ATE job ID.
         * Beware of the returned data shape which is not standard.
         *
         * @param int $ateJobId
         *
         * @return array|null
         */
        public function get_data_from_ate_job_id($ateJobId)
        {
        }
        /**
         * @param int   $wpmlJobId
         * @param array $ateJobData
         */
        public function store($wpmlJobId, array $ateJobData)
        {
        }
        /**
         * @param JobRecord $job
         */
        public function persist(\WPML\TM\ATE\JobRecord $job)
        {
        }
        /**
         * This method will load in-memory the required jobs.
         *
         * @param array $wpmlJobIds
         * @param array $ateJobIds
         */
        public function warmCache(array $wpmlJobIds, array $ateJobIds = [])
        {
        }
        /**
         * @param $idPropertyName
         *
         * @return \Closure
         */
        private function isAlreadyLoaded($idPropertyName)
        {
        }
        /**
         * @param int $wpmlJobId
         *
         * @return int
         */
        public function get_ate_job_id($wpmlJobId)
        {
        }
        /**
         * @param int $wpmlJobId
         *
         * @return bool
         */
        public function is_editing_job($wpmlJobId)
        {
        }
        /**
         * @param $wpmlJobId
         *
         * @return JobRecord
         */
        public function get($wpmlJobId)
        {
        }
        /**
         * This method will try to recover the job data from ATE server,
         * and persist it in the local repository.
         *
         * @param int $wpmlJobId
         */
        private function restoreJobDataFromATE($wpmlJobId)
        {
        }
    }
}
namespace {
    class WPML_TM_AMS_User_Sync
    {
        /**@var WPML_Translation_Manager_Records */
        private $manager_records;
        /** @var WPML_Translator_Records */
        private $translator_records;
        /** @var WPML_Translator_Admin_Records $translator_admin_records */
        private $translator_admin_records;
        public function __construct(\WPML_Translation_Manager_Records $manager_records, \WPML_Translator_Records $translator_records, \WPML_Translator_Admin_Records $translator_admin_records)
        {
        }
        public function get_translators()
        {
        }
        public function get_managers()
        {
        }
        private function get_admins_that_are_not_translators()
        {
        }
    }
}
namespace WPML\TM\ATE\Sitekey {
    class Sync implements \IWPML_Backend_Action
    {
        public function add_hooks()
        {
        }
    }
    class Endpoint implements \WPML\Ajax\IHandler
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
        public static function sendSiteKey()
        {
        }
    }
}
namespace {
    /**
     * Class WPML_REST_Base
     *
     * @author OnTheGo Systems
     */
    abstract class WPML_REST_Base
    {
        const CAPABILITY_EXTERNAL = 'external';
        const REST_NAMESPACE = 'wpml/v1';
        /**
         * @var null
         */
        protected $namespace;
        /**
         * WPML_REST_Base constructor.
         *
         * @param null $namespace Defaults to `\WPML_REST_Base::REST_NAMESPACE`.
         */
        public function __construct($namespace = \null)
        {
        }
        public abstract function add_hooks();
        public function validate_permission(\WP_REST_Request $request)
        {
        }
        public abstract function get_allowed_capabilities(\WP_REST_Request $request);
        /**
         * @param string $route
         * @param array  $args
         */
        protected function register_route($route, array $args)
        {
        }
        /**
         * @param array $args
         *
         * @return array
         */
        private function ensure_permission(array $args)
        {
        }
        /**
         * @param \WP_REST_Request $request
         *
         * @return bool
         */
        private function user_has_matching_capabilities(\WP_REST_Request $request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         *
         * @return mixed|string|null
         */
        private function get_nonce(\WP_REST_Request $request)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    abstract class WPML_TM_ATE_Required_Rest_Base extends \WPML_REST_Base
    {
        const REST_NAMESPACE = 'wpml/tm/v1';
        /**
         * WPML_TM_ATE_Required_Rest_Base constructor.
         */
        public function __construct()
        {
        }
        /**
         * @param WP_REST_Request $request
         *
         * @return bool
         */
        public function validate_permission(\WP_REST_Request $request)
        {
        }
        /**
         * @param string $endpoint
         *
         * @return string
         */
        static function get_url($endpoint)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_REST_XLIFF extends \WPML_TM_ATE_Required_Rest_Base
    {
        const CAPABILITY = 'translate';
        function add_hooks()
        {
        }
        function register_routes()
        {
        }
        /**
         * @param WP_REST_Request $request
         *
         * @return array
         * @throws \InvalidArgumentException
         */
        public function fetch_xliff(\WP_REST_Request $request)
        {
        }
        function get_allowed_capabilities(\WP_REST_Request $request)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    abstract class WPML_REST_Factory_Loader implements \IWPML_REST_Action_Loader, \IWPML_Deferred_Action_Loader
    {
        const REST_API_INIT_ACTION = 'rest_api_init';
        /**
         * @return string
         */
        public function get_load_action()
        {
        }
    }
    class WPML_TM_REST_ATE_API_Factory extends \WPML_REST_Factory_Loader
    {
        /**
         * @return \WPML_TM_REST_ATE_API
         * @throws \Auryn\InjectionException
         */
        public function create()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_REST_ATE_Jobs extends \WPML_TM_ATE_Required_Rest_Base
    {
        const CAPABILITY = 'manage_translations';
        private $ate_jobs;
        /** @var WPML_TM_ATE_Job_Repository */
        private $job_repository;
        /**
         * WPML_TM_REST_ATE_Jobs constructor.
         *
         * @param WPML_TM_ATE_Jobs           $ate_jobs
         * @param WPML_TM_ATE_Job_Repository $job_repository
         */
        public function __construct(\WPML_TM_ATE_Jobs $ate_jobs, \WPML_TM_ATE_Job_Repository $job_repository)
        {
        }
        function add_hooks()
        {
        }
        function register_routes()
        {
        }
        /**
         * @param WP_REST_Request $request
         *
         * @return bool
         * @throws \InvalidArgumentException
         */
        public function store_ate_job(\WP_REST_Request $request)
        {
        }
        function get_allowed_capabilities(\WP_REST_Request $request)
        {
        }
    }
}
namespace WPML\Rest {
    interface ITarget
    {
        function get_routes();
        function get_allowed_capabilities(\WP_REST_Request $request);
        function get_namespace();
    }
    abstract class Base implements \WPML\Rest\ITarget, \IWPML_Action
    {
        /** @var Adaptor */
        private $adaptor;
        public function __construct(\WPML\Rest\Adaptor $adaptor)
        {
        }
        /**
         * @return string
         */
        public abstract function get_namespace();
        public function add_hooks()
        {
        }
        /**
         * @return array
         */
        public static function getStringType()
        {
        }
        /**
         * @return array
         */
        public static function getIntType()
        {
        }
    }
}
namespace WPML\TM\REST {
    abstract class Base extends \WPML\Rest\Base
    {
        /**
         * @return string
         */
        public function get_namespace()
        {
        }
    }
}
namespace WPML\TM\ATE\REST {
    class FixJob extends \WPML\TM\REST\Base
    {
        /**
         * @var WPML_TM_ATE_Jobs
         */
        private $ateJobs;
        /**
         * @var WPML_TM_ATE_API
         */
        private $ateApi;
        /**
         * @var WPML_TM_Jobs_Repository
         */
        private $jobsRepository;
        const PARAM_ATE_JOB_ID = 'ateJobId';
        const PARAM_WPML_JOB_ID = 'jobId';
        public function __construct(\WPML\Rest\Adaptor $adaptor, \WPML_TM_ATE_API $ateApi, \WPML_TM_ATE_Jobs $ateJobs)
        {
        }
        /**
         * @return array
         */
        public function get_routes()
        {
        }
        /**
         * @param WP_REST_Request $request
         *
         * @return array
         */
        public function get_allowed_capabilities(\WP_REST_Request $request)
        {
        }
        /**
         * @param WP_REST_Request $request
         *
         * @return bool[]
         */
        public function fix_job(\WP_REST_Request $request)
        {
        }
        /**
         * Processes the job status.
         *
         * @param $ateJobId
         * @param $wpmlJobId
         *
         * @return bool
         * @throws \Requests_Exception
         */
        public function process($ateJobId, $wpmlJobId)
        {
        }
        /**
         * @param \Exception $e
         * @param array|null  $job
         */
        private function logException(\Exception $e, $job = null)
        {
        }
    }
    class Sync extends \WPML\TM\REST\Base
    {
        /**
         * @return array
         */
        public function get_routes()
        {
        }
        /**
         * @param WP_REST_Request $request
         *
         * @return array
         */
        public function get_allowed_capabilities(\WP_REST_Request $request)
        {
        }
        /**
         * @param WP_REST_Request $request
         *
         * @return array
         * @throws \Auryn\InjectionException
         */
        public function sync(\WP_REST_Request $request)
        {
        }
        private function getJobStatuses($wpmlJobIds, $returnUrl)
        {
        }
        private function findSyncedJob($jobsFromATE)
        {
        }
        /**
         * @param array $jobs
         * @param Result|null $template
         *
         * @return Result
         */
        private function createResultWithJobs(array $jobs, \WPML\TM\ATE\Sync\Result $template = null)
        {
        }
    }
}
namespace {
    class WPML_TM_REST_XLIFF_Factory extends \WPML_REST_Factory_Loader
    {
        public function create()
        {
        }
    }
    class WPML_TM_REST_ATE_Jobs_Factory extends \WPML_REST_Factory_Loader
    {
        public function create()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_REST_ATE_API extends \WPML_TM_ATE_Required_Rest_Base
    {
        const CAPABILITY_CREATE = 'manage_translations';
        const CAPABILITY_READ = 'translate';
        private $api;
        /**
         * WPML_TM_REST_AMS_Clients constructor.
         *
         * @param WPML_TM_ATE_API $api
         */
        public function __construct(\WPML_TM_ATE_API $api)
        {
        }
        function add_hooks()
        {
        }
        function register_routes()
        {
        }
        /**
         * @param WP_REST_Request $request
         *
         * @return array|WP_Error
         * @throws \InvalidArgumentException
         */
        public function create_jobs(\WP_REST_Request $request)
        {
        }
        /**
         * @param WP_REST_Request $request
         *
         * @return array|WP_Error
         * @throws \InvalidArgumentException
         */
        public function get_job(\WP_REST_Request $request)
        {
        }
        function get_allowed_capabilities(\WP_REST_Request $request)
        {
        }
    }
    class WPML_TM_REST_AMS_Clients extends \WPML_REST_Base
    {
        private $api;
        private $ams_user_records;
        /** @var WPML_TM_AMS_Translator_Activation_Records $translator_activation_records */
        private $translator_activation_records;
        /**
         * @var WPML_TM_ATE_AMS_Endpoints
         */
        private $strings;
        public function __construct(\WPML_TM_AMS_API $api, \WPML_TM_AMS_Users $ams_user_records, \WPML_TM_AMS_Translator_Activation_Records $translator_activation_records, \WPML_TM_MCS_ATE_Strings $strings)
        {
        }
        function add_hooks()
        {
        }
        function register_routes()
        {
        }
        /**
         * @return array|WP_Error
         * @throws \InvalidArgumentException
         */
        public function register_manager()
        {
        }
        /**
         * @return array|WP_Error
         * @throws \InvalidArgumentException
         */
        public function synchronize_translators()
        {
        }
        /**
         * @return array|WP_Error
         * @throws \InvalidArgumentException
         */
        public function synchronize_managers()
        {
        }
        /**
         * @return array|mixed|null|object|WP_Error
         * @throws \InvalidArgumentException
         */
        public function get_status()
        {
        }
        public function get_console()
        {
        }
        function get_allowed_capabilities(\WP_REST_Request $request)
        {
        }
    }
    class WPML_TM_REST_AMS_Clients_Factory extends \WPML_REST_Factory_Loader
    {
        /**
         * @return \WPML_TM_REST_AMS_Clients
         * @throws \Auryn\InjectionException
         */
        public function create()
        {
        }
    }
}
namespace WPML\TM\ATE\REST {
    class Download extends \WPML\TM\REST\Base
    {
        /**
         * @return array
         */
        public function get_routes()
        {
        }
        /**
         * @param WP_REST_Request $request
         *
         * @return array
         */
        public function get_allowed_capabilities(\WP_REST_Request $request)
        {
        }
        public function download(\WP_REST_Request $request)
        {
        }
        /**
         * @param Collection $processedJobs
         * @param string $returnUrl
         *
         * @return Collection
         */
        public static function getJobs(\WPML\Collect\Support\Collection $processedJobs, $returnUrl)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class PublicReceive extends \WPML_TM_ATE_Required_Rest_Base
    {
        const CODE_UNPROCESSABLE_ENTITY = 422;
        const CODE_OK = 200;
        const ENDPOINT_JOBS_RECEIVE = '/ate/jobs/receive/';
        function add_hooks()
        {
        }
        function register_routes()
        {
        }
        public function get_allowed_capabilities(\WP_REST_Request $request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         *
         * @return true|\WP_Error
         */
        public function receive_ate_job(\WP_REST_Request $request)
        {
        }
        /**
         * @param int $wpml_job_id
         *
         * @return string
         */
        public static function get_receive_ate_job_url($wpml_job_id)
        {
        }
    }
    class Retry extends \WPML\TM\REST\Base
    {
        /**
         * @return array
         */
        public function get_routes()
        {
        }
        /**
         * @param WP_REST_Request $request
         *
         * @return array
         */
        public function get_allowed_capabilities(\WP_REST_Request $request)
        {
        }
        /**
         * @param WP_REST_Request $request
         *
         * @return array
         * @throws \Auryn\InjectionException
         */
        public function retry(\WP_REST_Request $request)
        {
        }
    }
}
namespace WPML\ATE\Proxies {
    class Widget implements \IWPML_Frontend_Action, \IWPML_DIC_Action
    {
        const QUERY_VAR_ATE_WIDGET_SCRIPT = 'wpml-app';
        const SCRIPT_NAME = 'ate-widget';
        public function add_hooks()
        {
        }
        /**
         * @return string|void
         */
        public function get_script()
        {
        }
    }
}
namespace WPML\TM\ATE {
    class Jobs
    {
        const LONGSTANDING_AT_ATE_SYNC_COUNT = 100;
        /**
         * @param array $statuses
         *
         * @return array
         */
        public static function getJobsWithStatus(array $statuses)
        {
        }
        /**
         * @return array
         */
        public static function getJobsToSync()
        {
        }
        /**
         * @return array
         */
        public static function getJobsToRetry()
        {
        }
        /**
         * @return int
         */
        public static function getTotal()
        {
        }
    }
    class SyncLock
    {
        /** @var KeyedLock */
        private $keyedLock;
        public function __construct()
        {
        }
        /**
         * @param null~string $key
         *
         * @return false|string
         */
        public function create($key = null)
        {
        }
        /**
         * @return bool
         */
        public function release()
        {
        }
    }
}
namespace WPML\TM\ATE\Download {
    class Consumer
    {
        /** @var WPML_TM_ATE_API $ateApi */
        private $ateApi;
        /** @var WPML_TM_ATE_Jobs $ateJobs */
        private $ateJobs;
        public function __construct(\WPML_TM_ATE_API $ateApi, \WPML_TM_ATE_Jobs $ateJobs)
        {
        }
        /**
         * @param  $job
         *
         * @return array|\stdClass|false
         * @throws Exception
         */
        public function process($job)
        {
        }
    }
    class Process
    {
        /** @var Consumer $consumer */
        private $consumer;
        /** @var WPML_TM_ATE_API $ateApi */
        private $ateApi;
        public function __construct(\WPML\TM\ATE\Download\Consumer $consumer, \WPML_TM_ATE_API $ateApi)
        {
        }
        /**
         * @param array $jobs
         *
         * @return Collection
         */
        public function run($jobs)
        {
        }
        private function acknowledgeAte(\WPML\Collect\Support\Collection $processedJobs)
        {
        }
        /**
         * @param Exception $e
         * @param Job|null  $job
         */
        private function logException(\Exception $e, $job = null)
        {
        }
    }
    class Job
    {
        /** @var int $ateJobId */
        public $ateJobId;
        /** @var string $url */
        public $url;
        /** @var int */
        public $ateStatus;
        /**
         * This property is not part of the database data,
         * but it can be added when the job is downloaded
         * to provide more information to the UI.
         *
         * @var int $jobId
         */
        public $jobId;
        /** @var int */
        public $status = ICL_TM_IN_PROGRESS;
        /**
         * @param \stdClass $item
         *
         * @return Job
         */
        public static function fromAteResponse(\stdClass $item)
        {
        }
        /**
         * @param \stdClass $row
         *
         * @return Job
         */
        public static function fromDb(\stdClass $row)
        {
        }
    }
}
namespace WPML\TM\ATE {
    class JobRecord
    {
        /** @var int $wpmlJobId */
        public $wpmlJobId;
        /** @var int $ateJobId */
        public $ateJobId;
        /**
         * @todo: Remove this property.
         *
         * @var int $editTimestamp
         */
        public $editTimestamp = 0;
        public function __construct(\stdClass $dbRow = null)
        {
        }
        /**
         * @todo: Remove the "$editTimestamp" and "is_editing", not handled on WPML side anymore.
         *
         * The job is considered as being edited if
         * the timestamp is not greater than 1 day.
         *
         * @return bool
         */
        public function isEditing()
        {
        }
    }
}
namespace {
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ATE_Jobs
    {
        /** @var JobRecords $records */
        private $records;
        /**
         * WPML_TM_ATE_Jobs constructor.
         *
         * @param JobRecords $records
         */
        public function __construct(\WPML\TM\ATE\JobRecords $records)
        {
        }
        /**
         * @param int $wpml_job_id
         *
         * @return int
         */
        public function get_ate_job_id($wpml_job_id)
        {
        }
        /**
         * @param int $ate_job_id
         *
         * @return int|null
         */
        public function get_wpml_job_id($ate_job_id)
        {
        }
        /**
         * @param int   $wpml_job_id
         * @param array $ate_job_data
         */
        public function store($wpml_job_id, $ate_job_data)
        {
        }
        /**
         * We update the status from ATE only for non-completed ATE statuses
         * in all other cases, we mark the job as completed when we receive it
         * from ATE in `WPML_TM_ATE_Jobs::apply` which calls `wpml_tm_save_data`.
         *
         * @param int $wpml_job_id
         * @param int $ate_status
         */
        public function set_wpml_status_from_ate($wpml_job_id, $ate_status)
        {
        }
        /**
         * @todo: Check possible duplicated code / We already have functionality to import XLIFF files from Translator's queue
         *
         * @param string $xliff
         *
         * @return bool|int
         * @throws \Requests_Exception|Exception
         */
        public function apply($xliff)
        {
        }
        private function filterJobData($jobData)
        {
        }
        /**
         * getJobTargetLanguage :: void → ( object → string|null )
         *
         * @return callback
         */
        private function getJobTargetLanguage()
        {
        }
        /**
         * @param int $wpml_job_id
         *
         * @return bool
         */
        public function is_editing_job($wpml_job_id)
        {
        }
        /**
         * @param array $wpml_job_ids
         */
        public function warm_cache(array $wpml_job_ids)
        {
        }
    }
}
namespace WPML\TM\ATE {
    /**
     * Class ReturnedJobsQueue
     *
     * @package WPML\TM\ATE
     *
     * IMPORTANT!
     * In this class `wpmlJobId` represents job_id column in icl_translate_job
     */
    class ReturnedJobsQueue
    {
        const OPTION_NAME = 'ATE_RETURNED_JOBS_QUEUE';
        const STATUS_COMPLETED = 'complete';
        const STATUS_BACK = 'back';
        /**
         * @param  int      $ateJobId
         * @param  string   $status
         * @param  callable $ateIdToWpmlId @see comment in the class description
         */
        public static function add($ateJobId, $status, callable $ateIdToWpmlId)
        {
        }
        /**
         * @param  int $wpmlJobId @see comment in the class description
         *
         * @return string|null
         */
        public static function getStatus($wpmlJobId)
        {
        }
        /**
         * @param $wpmlJobId @see comment in the class description
         */
        public static function remove($wpmlJobId)
        {
        }
    }
    class StatusIcons implements \IWPML_Backend_Action
    {
        /** @var bool */
        private $alreadyFound = false;
        public function add_hooks()
        {
        }
        private static function hasTranslatedStatusInAte()
        {
        }
        public function setSpinningIconOnPageList($default, $postId, $languageCode, $trid, $status)
        {
        }
        public function setSpinningIconInTranslationQueue($default, $job)
        {
        }
        public function getIcon($default, $job)
        {
        }
    }
}
namespace WPML\TM\ATE\API {
    class ErrorMessages
    {
        public static function serverUnavailable($uuid)
        {
        }
        public static function offline($uuid)
        {
        }
        public static function invalidResponse($uuid)
        {
        }
        public static function respondedWithError()
        {
        }
        public static function serverUnavailableHeader()
        {
        }
        public static function invalidResponseDescription($uuid)
        {
        }
        public static function getSupportLink()
        {
        }
        public static function bodyWithoutRequiredFields()
        {
        }
        public static function uuidAlreadyExists()
        {
        }
    }
}
namespace WPML\TM\ATE\ClonedSites {
    class ReportAjax implements \IWPML_Backend_Action, \IWPML_DIC_Action
    {
        /**
         * @var Report
         */
        private $reportHandler;
        /**
         * @param Report $reportHandler
         */
        public function __construct(\WPML\TM\ATE\ClonedSites\Report $reportHandler)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param string $reportType
         */
        public function handleInstallerSiteUrlDetection($reportType)
        {
        }
        public function reportSiteCloned()
        {
        }
        private function isValidRequest()
        {
        }
    }
    class ApiCommunication
    {
        const SITE_CLONED_ERROR = 426;
        /**
         * @var Lock
         */
        private $lock;
        /**
         * @param Lock $lock
         */
        public function __construct(\WPML\TM\ATE\ClonedSites\Lock $lock)
        {
        }
        public function handleClonedSiteError($response)
        {
        }
        public function checkCloneSiteLock()
        {
        }
        public function unlockClonedSite()
        {
        }
        private function handleClonedDetection($error_data)
        {
        }
    }
    class FingerprintGenerator
    {
        const SITE_FINGERPRINT_HEADER = 'SITE-FINGERPRINT';
        const NEW_SITE_FINGERPRINT_HEADER = 'NEW-SITE-FINGERPRINT';
        public function getSiteFingerprint()
        {
        }
        private function getSiteUrl()
        {
        }
        private function getDefaultSiteUrl($siteUrl)
        {
        }
    }
    class Lock
    {
        const CLONED_SITE_OPTION = 'otgs_wpml_tm_ate_cloned_site_lock';
        public function lock($lockData)
        {
        }
        private function isLockDataPresent($lockData)
        {
        }
        public function unlock()
        {
        }
        public static function isLocked()
        {
        }
    }
    class Report
    {
        const REPORT_TYPE_COPY = 'copy';
        const REPORT_TYPE_MOVE = 'move';
        /**
         * @var \WPML_TM_AMS_API
         */
        private $apiClient;
        /**
         * @var ApiCommunication
         */
        private $apiCommunicationHandler;
        /**
         * @var \WPML_TM_ATE_Job_Repository
         */
        private $ateJobsRepository;
        /**
         * Update jobs synchronisation
         *
         * @var \WPML_TP_Sync_Update_Job
         */
        private $updateJobs;
        /**
         * @var \WPML_Translation_Job_Factory
         */
        private $translationJobFactory;
        /**
         * @param \WPML_TM_AMS_API $apiClient
         * @param ApiCommunication $apiCommunicationHandler
         * @param \WPML_TM_ATE_Job_Repository $ateJobsRepository
         * @param \WPML_Translation_Job_Factory $translationJobFactory
         */
        public function __construct(\WPML_TM_AMS_API $apiClient, \WPML\TM\ATE\ClonedSites\ApiCommunication $apiCommunicationHandler, \WPML_TM_ATE_Job_Repository $ateJobsRepository, \WPML_TP_Sync_Update_Job $updateJobs, \WPML_Translation_Job_Factory $translationJobFactory)
        {
        }
        /**
         * @param string $reportType
         *
         * @return bool
         */
        public function report($reportType)
        {
        }
        private function reportCopiedSite()
        {
        }
        private function reportMovedSite()
        {
        }
    }
}
namespace {
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ATE_API
    {
        const TRANSLATED = 6;
        const DELIVERING = 7;
        const NOT_ENOUGH_CREDIT_STATUS = 31;
        const CANCELLED_STATUS = 20;
        const SHOULD_HIDE_STATUS = 42;
        private $wp_http;
        private $auth;
        private $endpoints;
        /**
         * @var ClonedSitesHandler
         */
        private $clonedSitesHandler;
        /**
         * @var FingerprintGenerator
         */
        private $fingerprintGenerator;
        /**
         * WPML_TM_ATE_API constructor.
         *
         * @param WP_Http                    $wp_http
         * @param WPML_TM_ATE_Authentication $auth
         * @param WPML_TM_ATE_AMS_Endpoints  $endpoints
         * @param ClonedSitesHandler  $clonedSitesHandler
         * @param FingerprintGenerator  $fingerprintGenerator
         */
        public function __construct(\WP_Http $wp_http, \WPML_TM_ATE_Authentication $auth, \WPML_TM_ATE_AMS_Endpoints $endpoints, \WPML\TM\ATE\ClonedSites\ApiCommunication $clonedSitesHandler, \WPML\TM\ATE\ClonedSites\FingerprintGenerator $fingerprintGenerator)
        {
        }
        /**
         * @param array $params
         *
         * @see https://bitbucket.org/emartini_crossover/ate/wiki/API/V1/jobs/create
         *
         * @return mixed
         * @throws \InvalidArgumentException
         */
        public function create_jobs(array $params)
        {
        }
        /**
         * @param int|string|array $ate_job_id
         *
         * @return array|WP_Error
         * @throws \InvalidArgumentException
         */
        public function confirm_received_job($ate_job_id)
        {
        }
        /**
         * @param array|int $jobIds
         * @param bool      $onlyFailed
         *
         * @return array|mixed|object|string|\WP_Error|null
         */
        public function cancelJobs($jobIds, $onlyFailed = \false)
        {
        }
        /**
         * @param array|int $jobIds
         * @param bool      $force
         *
         * @return array|mixed|object|string|\WP_Error|null
         */
        public function hideJobs($jobIds, $force = \false)
        {
        }
        /**
         * @param int    $job_id
         * @param string $return_url
         *
         * @return string|WP_Error
         * @throws \InvalidArgumentException
         */
        public function get_editor_url($job_id, $return_url)
        {
        }
        /**
         * @param int                          $ate_job_id
         * @param WPML_Element_Translation_Job $job_object
         * @param int|null $sentFrom
         *
         * @return array
         */
        public function clone_job($ate_job_id, \WPML_Element_Translation_Job $job_object, $sentFrom = \null)
        {
        }
        /**
         * @param int $ate_job_id
         *
         * @return array|WP_Error
         * @throws \InvalidArgumentException
         */
        public function get_job($ate_job_id)
        {
        }
        /**
         * If `$job_ids` is not an empty array,
         * the `$statuses` parameter will be ignored in ATE's endpoint.
         *
         * @see https://bitbucket.org/emartini_crossover/ate/wiki/API/V1/jobs/status
         *
         * @param null|array $job_ids
         * @param null|array $statuses
         *
         * @return array|mixed|null|object|WP_Error
         * @throws \InvalidArgumentException
         */
        public function get_jobs($job_ids, $statuses = \null)
        {
        }
        public function get_job_status_with_priority($job_id)
        {
        }
        /**
         * @param $wpml_job_ids
         *
         * @return array|mixed|object|WP_Error|null
         */
        public function get_jobs_by_wpml_ids($wpml_job_ids)
        {
        }
        /**
         * @param array $pairs
         * @see https://bitbucket.org/emartini_crossover/ate/wiki/API/V1/migration/migrate
         * @return bool
         */
        public function migrate_source_id(array $pairs)
        {
        }
        /**
         * @param LanguageMapping[] $languagesToMap
         *
         * @return Either
         */
        public function create_language_mapping(array $languagesToMap)
        {
        }
        /**
         * @param $mappingIds
         *
         * @return false|array
         */
        public function remove_language_mapping($mappingIds)
        {
        }
        /**
         * @param string[] $languageCodes
         * @param null|string $sourceLanguage
         *
         * @return Maybe
         */
        public function get_languages_supported_by_automatic_translations($languageCodes, $sourceLanguage = \null)
        {
        }
        /**
         * It returns language details from ATE including the info about translation engine supporting this language.
         *
         *  If $inTheWebsiteContext is true, then we are taking into consideration user's translation engine settings.
         *  It means that generally language may be supported e.g. by google, but when he turns off this engine, it will be reflected in the response.
         *
         * @param string $languageCode
         * @param bool $inTheWebsiteContext
         *
         * @return Maybe
         */
        public function get_language_details($languageCode, $inTheWebsiteContext = \true)
        {
        }
        /**
         * @return array
         */
        public function get_available_languages()
        {
        }
        /**
         * @return Maybe
         */
        public function get_language_mapping()
        {
        }
        private function get_response($result)
        {
        }
        private function get_response_body($result)
        {
        }
        private function get_response_errors($response)
        {
        }
        /**
         * @return array
         */
        private function json_headers()
        {
        }
        /**
         * @param array $args
         *
         * @return string
         */
        private function encode_body_args(array $args)
        {
        }
        /**
         * @param string $xliff_url
         * @param array|\stdClass|false|null $job
         *
         * @return string
         * @throws Requests_Exception
         */
        public function get_remote_xliff_content($xliff_url, $job = \null)
        {
        }
        public function override_site_id($site_id)
        {
        }
        public function get_website_id($site_url)
        {
        }
        /**
         * @see https://bitbucket.org/emartini_crossover/ate/wiki/API/V1/sync/all
         *
         * @param array $ateJobIds
         *
         * @return array|mixed|null|object|WP_Error
         * @throws \InvalidArgumentException
         */
        public function sync_all(array $ateJobIds)
        {
        }
        /**
         * @see https://bitbucket.org/emartini_crossover/ate/wiki/API/V1/sync/page
         *
         * @param string $token
         * @param int    $page
         *
         * @return array|mixed|null|object|WP_Error
         * @throws \InvalidArgumentException
         */
        public function sync_page($token, $page)
        {
        }
        /**
         * @param string $url
         * @param array  $requestArgs
         *
         * @return array|mixed|object|string|WP_Error|null
         */
        private function request($url, array $requestArgs = [])
        {
        }
        /**
         * @param string $url
         * @param array  $requestArgs
         *
         * @return array|mixed|object|string|WP_Error|null
         */
        private function requestWithLog($url, array $requestArgs = [])
        {
        }
        /**
         * @param string $xliff_url
         * @param array|\stdClass|false|null $job
         *
         * @return Entry
         */
        private function prepare_xliff_log_entry($xliff_url, $job)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_AMS_API
    {
        const HTTP_ERROR_CODE_400 = 400;
        private $auth;
        private $endpoints;
        private $wp_http;
        /**
         * @var ClonedSitesHandler
         */
        private $clonedSitesHandler;
        /**
         * @var FingerprintGenerator
         */
        private $fingerprintGenerator;
        /**
         * WPML_TM_ATE_API constructor.
         *
         * @param WP_Http                    $wp_http
         * @param WPML_TM_ATE_Authentication $auth
         * @param WPML_TM_ATE_AMS_Endpoints  $endpoints
         * @param ClonedSitesHandler         $clonedSitesHandler
         * @param FingerprintGenerator       $fingerprintGenerator
         */
        public function __construct(\WP_Http $wp_http, \WPML_TM_ATE_Authentication $auth, \WPML_TM_ATE_AMS_Endpoints $endpoints, \WPML\TM\ATE\ClonedSites\ApiCommunication $clonedSitesHandler, \WPML\TM\ATE\ClonedSites\FingerprintGenerator $fingerprintGenerator)
        {
        }
        /**
         * @param string $translator_email
         *
         * @return array|mixed|null|object|WP_Error
         * @throws \InvalidArgumentException
         */
        public function enable_subscription($translator_email)
        {
        }
        /**
         * @param string $translator_email
         *
         * @return bool|WP_Error
         */
        public function is_subscription_activated($translator_email)
        {
        }
        /**
         * @return array|mixed|null|object|WP_Error
         *
         * @throws \InvalidArgumentException Exception.
         */
        public function get_status()
        {
        }
        /**
         * Used to register a manager and, at the same time, create a website in AMS.
         * This is called only when registering the site with AMS.
         * To register new managers or translators `\WPML_TM_ATE_AMS_Endpoints::get_ams_synchronize_managers`
         * and `\WPML_TM_ATE_AMS_Endpoints::get_ams_synchronize_translators` will be used.
         *
         * @param WP_User   $manager              The WP_User instance of the manager.
         * @param WP_User[] $translators          An array of WP_User instances representing the current translators.
         * @param WP_User[] $managers             An array of WP_User instances representing the current managers.
         *
         * @return \WPML\FP\Either
         */
        public function register_manager(\WP_User $manager, array $translators, array $managers)
        {
        }
        private function makeRegistrationRequest($manager, $translators, $managers)
        {
        }
        private function logErrorResponse()
        {
        }
        private function handleErrorResponse($logErrorResponse, $getErrors)
        {
        }
        private function handle409Error($handleErrorResponse, $makeRequest)
        {
        }
        private function handleInvalidBodyError()
        {
        }
        private function saveRegistrationData($manager)
        {
        }
        /**
         * Gets the data required by AMS to register a user.
         *
         * @param WP_User $wp_user           The user from which data should be extracted.
         * @param bool    $with_name_details True if name details should be included.
         *
         * @return array
         */
        private function get_user_data(\WP_User $wp_user, $with_name_details = \false)
        {
        }
        private function prepareClonedSiteArguments($method)
        {
        }
        /**
         * @return array|WP_Error
         */
        public function reportCopiedSite()
        {
        }
        /**
         * @return array|WP_Error
         */
        public function reportMovedSite()
        {
        }
        /**
         * @param array $response Response from reportMovedSite()
         *
         * @return bool|WP_Error
         */
        public function processMoveReport($response)
        {
        }
        /**
         * @param array $response_body body from reportMovedSite() response.
         *
         * @return bool
         */
        private function storeAuthData($response_body)
        {
        }
        /**
         * @param array $response_body body from reportMovedSite() response.
         *
         * @return bool
         */
        private function updateRegistrationData($response_body)
        {
        }
        /**
         * @param array $response_body body from reportMovedSite() response.
         *
         * @return bool
         */
        private function updateSiteUuId($response_body)
        {
        }
        private function sendSiteReportConfirmation()
        {
        }
        /**
         * @param string $url
         * @param string $method
         *
         * @return array|WP_Error
         */
        private function processReport($url, $method)
        {
        }
        /**
         * @param array $response Response from reportCopiedSite()
         *
         * @return bool
         */
        public function processCopyReportConfirmation($response)
        {
        }
        /**
         * Converts an array of WP_User instances into an array of data nedded by AMS to identify users.
         *
         * @param WP_User[] $users             An array of WP_User instances.
         * @param bool      $with_name_details True if name details should be included.
         *
         * @return array
         */
        private function get_users_data(array $users, $with_name_details = \false)
        {
        }
        /**
         * Checks if a reponse has a body.
         *
         * @param array|\WP_Error $response The response of the remote request.
         *
         * @return bool
         */
        private function response_has_body($response)
        {
        }
        private function get_errors($response, $logError = \true)
        {
        }
        private function log_api_error($message, $data)
        {
        }
        private function ping_healthy_wpml_endpoint()
        {
        }
        /**
         * @param array  $ams_error
         * @param string $default
         *
         * @return string
         */
        private function get_error_message($ams_error, $default)
        {
        }
        private function response_has_keys($response)
        {
        }
        /**
         * @return array
         */
        public function get_registration_data()
        {
        }
        /**
         * @param $registration_data
         *
         * @return bool
         */
        private function set_registration_data($registration_data)
        {
        }
        /**
         * @param array $managers
         *
         * @return array|mixed|null|object|WP_Error
         * @throws \InvalidArgumentException
         */
        public function synchronize_managers(array $managers)
        {
        }
        /**
         * @param array $translators
         *
         * @return array|mixed|null|object|WP_Error
         * @throws \InvalidArgumentException
         */
        public function synchronize_translators(array $translators)
        {
        }
        /**
         * @param string     $method
         * @param string     $url
         * @param array|null $params
         *
         * @return array|WP_Error
         */
        private function request($method, $url, array $params = \null)
        {
        }
        /**
         * @param string     $verb
         * @param string     $url
         * @param array|null $params
         *
         * @return array|WP_Error
         */
        private function signed_request($verb, $url, array $params = \null)
        {
        }
        /**
         * @param $url
         *
         * @return string
         */
        private function add_versions_to_url($url)
        {
        }
        public function override_site_id($site_id)
        {
        }
        /**
         * @return array|WP_Error
         */
        public function getCredits()
        {
        }
        /**
         * @return array|WP_Error
         */
        public function resumeAll()
        {
        }
        public function send_sitekey($sitekey)
        {
        }
        /**
         * @param string     $verb
         * @param string     $url
         * @param array|null $params
         *
         * @return array|WP_Error
         */
        private function getSignedResult($verb, $url, array $params = \null)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ATE_Authentication
    {
        const AMS_DATA_KEY = 'WPML_TM_AMS';
        const AMS_STATUS_NON_ACTIVE = 'non-active';
        const AMS_STATUS_ENABLED = 'enabled';
        const AMS_STATUS_ACTIVE = 'active';
        /** @var string|null $site_id */
        private $site_id = \null;
        public function get_signed_url_with_parameters($verb, $url, $params = \null)
        {
        }
        public function signUrl($verb, $url, $params = \null)
        {
        }
        private function get_signature($verb, $url, array $params = \null)
        {
        }
        public function has_keys()
        {
        }
        private function get_secret()
        {
        }
        private function get_shared()
        {
        }
        private function get_ams_data_property($field)
        {
        }
        /**
         * @return array
         */
        private function get_ams_data()
        {
        }
        /**
         * @param string     $verb
         * @param string     $url
         * @param array|null $params
         *
         * @return string
         */
        private function add_required_arguments_to_url($verb, $url, array $params = \null)
        {
        }
        /**
         * @param string $url
         *
         * @return array
         */
        private function get_url_query($url)
        {
        }
        /**
         * @param $query
         *
         * @return mixed|string
         */
        protected function build_query($query)
        {
        }
        /**
         * @param string|null $site_id
         */
        public function override_site_id($site_id)
        {
        }
        public function get_site_id()
        {
        }
    }
}
namespace WPML\TM\ATE\API\CacheStorage {
    interface Storage
    {
        /**
         * @param string $key
         * @param mixed $default
         *
         * @return mixed
         */
        public function get($key, $default = null);
        /**
         * @param string $key
         * @param mixed $value
         */
        public function save($key, $value);
        /**
         * @param string $key
         */
        public function delete($key);
    }
    class StaticVariable implements \WPML\TM\ATE\API\CacheStorage\Storage
    {
        /** @var array */
        private static $cache = [];
        /** @var self */
        private static $instance;
        public static function getInstance()
        {
        }
        /**
         * @param string $key
         * @param mixed $default
         *
         * @return mixed
         */
        public function get($key, $default = null)
        {
        }
        /**
         * @param string $key
         * @param mixed $value
         */
        public function save($key, $value)
        {
        }
        /**
         * @param string $key
         */
        public function delete($key)
        {
        }
    }
    class Transient implements \WPML\TM\ATE\API\CacheStorage\Storage
    {
        /**
         * @param string $key
         * @param mixed $default
         *
         * @return mixed
         */
        public function get($key, $default = null)
        {
        }
        /**
         * @param string $key
         * @param mixed $value
         */
        public function save($key, $value)
        {
        }
        /**
         * @param string $key
         */
        public function delete($key)
        {
        }
    }
}
namespace WPML\TM\ATE\API {
    class CachedATEAPI
    {
        const CACHE_OPTION = 'wpml-tm-ate-api-cache';
        /** @var  \WPML_TM_ATE_API */
        private $ateAPI;
        /** @var Storage */
        private $storage;
        private $cachedFns = ['get_languages_supported_by_automatic_translations', 'get_language_details', 'get_language_mapping'];
        /**
         * @param \WPML_TM_ATE_API $ateAPI
         */
        public function __construct(\WPML_TM_ATE_API $ateAPI, \WPML\TM\ATE\API\CacheStorage\Storage $storage)
        {
        }
        public function __call($name, $args)
        {
        }
        private function callWithCache($fnName, $args)
        {
        }
        public function cacheValue($fnName = null, $args = null, $result = null)
        {
        }
    }
}
namespace WPML\TM\ATE {
    class Loader implements \IWPML_Backend_Action
    {
        const JOB_ID_PLACEHOLDER = '###';
        public function add_hooks()
        {
        }
        public static function getData()
        {
        }
        public static function getOnlyJobsCompletedInATE($jobsToSync)
        {
        }
        /**
         * @return bool
         */
        private static function isSyncRequired()
        {
        }
        /**
         * @param string $ateTab
         *
         * @return string
         */
        public static function getNotEnoughCreditPopup()
        {
        }
        public static function showAteConsoleContainer()
        {
        }
        public static function getWpmlAutoTranslateContainer()
        {
        }
        private static function getAteData($ateJobIds)
        {
        }
        private static function getEndpoints()
        {
        }
        private static function getUrls($ateTab)
        {
        }
        private static function getStrings()
        {
        }
    }
}
namespace WPML\TM\ATE\AutoTranslate\Endpoint {
    class AutoTranslate implements \WPML\Ajax\IHandler
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    class ResumeAll implements \WPML\Ajax\IHandler
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    class EnableATE implements \WPML\Ajax\IHandler
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    class CheckLanguageSupport
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    class GetCredits implements \WPML\Ajax\IHandler
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    class GetATEJobsToSync implements \WPML\Ajax\IHandler
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    class SyncLock implements \WPML\Ajax\IHandler
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    class SetForPostType
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    class GetNumberOfPosts
    {
        public function run(\WPML\Collect\Support\Collection $data, \wpdb $wpdb)
        {
        }
    }
    class ActivateLanguage
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
}
namespace {
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ATE_Job
    {
        const ATE_JOB_CREATED = 0;
        const ATE_JOB_IN_PROGRESS = 1;
        const ATE_JOB_TRANSLATED = 6;
        const ATE_JOB_DELIVERING = 7;
        const ATE_JOB_DELIVERED = 8;
    }
}
namespace WPML\TM\ATE {
    class StatusBar
    {
        public static function add_hooks()
        {
        }
        public static function add(\WP_Admin_Bar $adminBar)
        {
        }
        public static function getNotices()
        {
        }
        private static function getNoticeAboutIneligibleLanguages()
        {
        }
        public static function getNoticeMsgForLanguageWithTheSameMappingAsDefault($languages)
        {
        }
    }
}
namespace WPML\TM\ATE\Retry {
    class Result
    {
        /** @var Collection */
        public $jobsToProcess;
        /** @var array[wpmlJobId] */
        public $processed = [];
        public function __construct()
        {
        }
    }
    class Trigger
    {
        const RETRY_TIMEOUT = 10 * MINUTE_IN_SECONDS;
        const OPTION_GROUP = 'WPML\\TM\\ATE\\Retry';
        const RETRY_LAST = 'last';
        /**
         * @return bool
         */
        public function isRetryRequired()
        {
        }
        public function setLastRetry($time)
        {
        }
    }
    class Process
    {
        const JOBS_PROCESSED_PER_REQUEST = 10;
        /** @var WPML_TM_ATE_Job_Repository $ateRepository */
        private $ateRepository;
        /** @var Trigger $trigger */
        private $trigger;
        public function __construct(\WPML_TM_ATE_Job_Repository $ateRepository, \WPML\TM\ATE\Retry\Trigger $trigger)
        {
        }
        /**
         * @param array $jobsToProcess
         *
         * @return Result
         */
        public function run($jobsToProcess)
        {
        }
        /**
         * @param Result $result
         *
         * @return Result
         */
        private function runRetryInit(\WPML\TM\ATE\Retry\Result $result)
        {
        }
        /**
         * @param Result $result
         * @param Collection $jobs
         *
         * @return Result
         */
        private function retry(\WPML\TM\ATE\Retry\Result $result, \WPML\Collect\Support\Collection $jobs)
        {
        }
        /**
         * @return Collection
         */
        private function getWpmlJobIdsToRetry()
        {
        }
        /**
         * @param Collection $items
         *
         * @return array $items [[wpmlJobId, status, ateJobId], ...]
         */
        private function handleJobs(\WPML\Collect\Support\Collection $items)
        {
        }
    }
}
namespace {
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ATE_Models_Language
    {
        public $code;
        public $name;
        /**
         * @param string $code
         * @param string $name
         */
        public function __construct($code = \null, $name = \null)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ATE_Models_Job_Create
    {
        /** @var int */
        public $deadline;
        /** @var WPML_TM_ATE_Models_Job_File */
        public $file;
        /** @var bool */
        public $notify_enabled;
        /** @var string */
        public $notify_url;
        /** @var int */
        public $source_id;
        /** @var string */
        public $permalink;
        /** @var string */
        public $site_identifier;
        /** @var WPML_TM_ATE_Models_Language */
        public $source_language;
        /** @var WPML_TM_ATE_Models_Language */
        public $target_language;
        /** @var string */
        public $ate_ams_console_url;
        /** @var int */
        public $existing_ate_id;
        /**
         * WPML_TM_ATE_Models_Job_Create constructor.
         *
         * @param array $args
         *
         * @throws \Auryn\InjectionException
         */
        public function __construct(array $args = array())
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ATE_Models_Job_File
    {
        public $content;
        public $name;
        public $type;
        /**
         * WPML_TM_ATE_Models_Job_File constructor.
         *
         * @param array $args
         */
        public function __construct(array $args = array())
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_Job_Created
    {
        public $job_id;
        public $rid;
        public $translation_service;
        public $translator_id;
        public $translation_package;
        public $batch_options;
        public $data;
        /**
         * WPML_TM_Job_Created constructor.
         *
         * @param array $args
         */
        public function __construct(array $args)
        {
        }
    }
    class WPML_TM_ATE_Job_Repository
    {
        /** @var WPML_TM_Jobs_Repository */
        private $job_repository;
        public function __construct(\WPML_TM_Jobs_Repository $job_repository)
        {
        }
        /**
         * @param bool $includeManualAndLongstandingJobs
         *
         * @return WPML_TM_Jobs_Collection
         */
        public function get_jobs_to_sync($includeManualAndLongstandingJobs = \true)
        {
        }
        /**
         * @param array $ateJobIds
         *
         * @return bool
         */
        public function increment_ate_sync_count(array $ateJobIds)
        {
        }
        /**
         * @return WPML_TM_Jobs_Collection
         */
        public function get_jobs_to_retry()
        {
        }
        /**
         * @return WPML_TM_Jobs_Search_Params
         */
        private function getSearchParamsPrototype()
        {
        }
    }
}
namespace WPML\TM\ATE {
    class TranslateEverything
    {
        const LOCK_RELEASE_TIMEOUT = 2 * MINUTE_IN_SECONDS;
        const QUEUE_SIZE = 15;
        public function run(\WPML\Collect\Support\Collection $data, \WPML\TM\AutomaticTranslation\Actions\Actions $actions)
        {
        }
        /**
         * @param Actions $actions
         */
        private function translateEverything(\WPML\TM\AutomaticTranslation\Actions\Actions $actions)
        {
        }
        /**
         * @param string[] $secondaryLanguages
         *
         * @return string
         */
        private static function getPostTypeToProcess(array $secondaryLanguages)
        {
        }
        /**
         * @param array $postTypes
         * @param array $targetLanguages
         *
         * @return string[] E.g. ['post', 'page']
         */
        public static function getPostTypesToTranslate(array $postTypes, array $targetLanguages)
        {
        }
        /**
         * @param string $postType
         * @param array $targetLanguages
         *
         * @return string[] Eg. ['fr', 'de', 'es']
         */
        public static function getLanguagesToTranslate($postType, array $targetLanguages)
        {
        }
        /**
         * Checks if Translate Everything is processed for a given Post Type and Language.
         *
         * @param string $postType
         * @param string $language
         *
         * @return bool
         */
        public static function isEverythingProcessedForPostTypeAndLanguage($postType, $language)
        {
        }
        /**
         * @param bool $cached
         *
         * @return bool
         */
        public static function isEverythingProcessed($cached = false)
        {
        }
    }
}
namespace {
    /**
     * @author OnTheGo Systems
     *
     * AMS: https://git.onthegosystems.com/ate/ams/wikis/home
     * ATE: https://git.onthegosystems.com/ate/ams/wikis/home (https://bitbucket.org/emartini_crossover/ate/wiki/browse/API/V1/jobs)
     */
    class WPML_TM_ATE_AMS_Endpoints
    {
        const AMS_BASE_URL = 'https://ams.wpml.org';
        const ATE_BASE_URL = 'https://ate.wpml.org';
        const ATE_JOB_STATUS_CREATED = 0;
        const ATE_JOB_STATUS_TRANSLATING = 1;
        const ATE_JOB_STATUS_TRANSLATED = 6;
        const ATE_JOB_STATUS_DELIVERING = 7;
        const ATE_JOB_STATUS_DELIVERED = 8;
        const ATE_JOB_STATUS_EDITED = 15;
        /**
         * AMS
         */
        const ENDPOINTS_AUTO_LOGIN = '/panel/autologin';
        const ENDPOINTS_CLIENTS = '/api/wpml/clients';
        const ENDPOINTS_CONFIRM = '/api/wpml/jobs/confirm';
        const ENDPOINTS_EDITOR = '/api/wpml/jobs/{job_id}/open?translator={translator_email}&return_url={return_url}';
        const ENDPOINTS_SUBSCRIPTION = '/api/wpml/websites/translators/{translator_email}/enable';
        const ENDPOINTS_SUBSCRIPTION_STATUS = '/api/wpml/websites/{WEBSITE_UUID}/translators/{translator_email}';
        const ENDPOINTS_WEBSITES = '/api/wpml/websites';
        const ENDPOINTS_CREDITS = '/api/wpml/credits';
        const ENDPOINTS_RESUME_ALL = '/api/wpml/jobs/resume/all';
        const ENDPOINTS_SEND_SITEKEY = '/api/wpml/websites/assign_key';
        /**
         * AMS CLONED SITES
         */
        const ENDPOINTS_SITE_COPY = '/api/wpml/websites/copy';
        const ENDPOINTS_SITE_MOVE = '/api/wpml/websites/move';
        const ENDPOINTS_SITE_CONFIRM = '/api/wpml/websites/confirm';
        /**
         * ATE
         */
        const ENDPOINTS_JOB = '/api/wpml/job';
        const ENDPOINTS_JOBS = '/api/wpml/jobs';
        const ENDPOINT_JOBS_BY_WPML_JOB_IDS = '/api/wpml/jobs/wpml';
        const ENDPOINT_JOBS_STATUSES = '/api/wpml/jobs/statuses';
        const ENDPOINTS_MANAGERS = '/api/wpml/websites/translation_managers';
        const ENDPOINTS_SITE = '/api/wpml/websites/create_unique';
        const ENDPOINTS_STATUS = '/api/wpml/access_keys/{SHARED_KEY}/status';
        const ENDPOINTS_TRANSLATORS = '/api/wpml/websites/translators';
        const ENDPOINT_SOURCE_ID_MIGRATION = '/api/wpml/migration';
        const ENDPOINTS_SYNC_ALL = '/api/wpml/sync/all';
        const ENDPOINTS_SYNC_PAGE = '/api/wpml/sync/page';
        const ENDPOINTS_CLONE_JOB = '/api/wpml/jobs/%s/clone';
        const ENDPOINTS_CANCEL_JOBS = '/api/wpml/jobs/cancel';
        const ENDPOINTS_HIDE_JOBS = '/api/wpml/jobs/canceled_on_wpml';
        const ENDPOINTS_LANGUAGES = '/api/wpml/languages';
        const ENDPOINTS_LANGUAGES_MAPPING = '/api/wpml/languages/mappings';
        const ENDPOINTS_LANGUAGES_MAPPING_DELETE = '/api/wpml/languages/delete_mapping';
        const ENDPOINTS_LANGUAGES_CHECK_PAIRS = '/api/wpml/languages/check_pairs';
        const ENDPOINTS_LANGUAGES_SHOW = '/api/wpml/languages/%s';
        const SERVICE_AMS = 'ams';
        const SERVICE_ATE = 'ate';
        const STORE_JOB = '/ate/jobs/store';
        const SYNC_JOBS = '/ate/jobs/sync';
        const DOWNLOAD_JOBS = '/ate/jobs/download';
        const RETRY_JOBS = '/ate/jobs/retry';
        const FIX_JOB = '/ate/jobs/(?P<ateJobId>\\d+)/fix';
        /**
         * @return string
         * @throws \InvalidArgumentException
         */
        public function get_ams_auto_login()
        {
        }
        /**
         * @param string     $service
         * @param string     $endpoint
         * @param array|null $query_string
         *
         * @return string
         * @throws \InvalidArgumentException
         */
        public function get_endpoint_url($service, $endpoint, array $query_string = \null)
        {
        }
        /**
         * @param $service
         *
         * @return string
         * @throws \InvalidArgumentException
         */
        public function get_base_url($service)
        {
        }
        private function get_AMS_base_url()
        {
        }
        private function get_ATE_base_url()
        {
        }
        private function get_service_base_url($service)
        {
        }
        public function get_AMS_host()
        {
        }
        public function get_ATE_host()
        {
        }
        private function get_service_host($service)
        {
        }
        /**
         * @return string
         * @throws \InvalidArgumentException
         */
        public function get_ams_register_client()
        {
        }
        /**
         * @return string
         * @throws \InvalidArgumentException
         */
        public function get_ams_status()
        {
        }
        /**
         * @return string
         * @throws \InvalidArgumentException
         */
        public function get_ams_synchronize_managers()
        {
        }
        /**
         * @return string
         * @throws \InvalidArgumentException
         */
        public function get_ams_synchronize_translators()
        {
        }
        /**
         * @return string
         * @throws \InvalidArgumentException
         */
        public function get_ams_site_copy()
        {
        }
        /**
         * @return string
         * @throws \InvalidArgumentException
         */
        public function get_ams_site_move()
        {
        }
        /**
         * @return string
         * @throws \InvalidArgumentException
         */
        public function get_ams_site_confirm()
        {
        }
        /**
         * @return string
         * @throws \InvalidArgumentException
         */
        public function get_enable_subscription()
        {
        }
        /**
         * @return string
         * @throws \InvalidArgumentException
         */
        public function get_subscription_status()
        {
        }
        /**
         * @param int|string|array $job_params
         *
         * @return string
         * @throws \InvalidArgumentException
         */
        public function get_ate_confirm_job($job_params = \null)
        {
        }
        /**
         * @param null|int|string|array $job_params
         *
         * @return string
         */
        private function parse_job_params($job_params)
        {
        }
        /**
         * @return string
         * @throws \InvalidArgumentException
         */
        public function get_ate_editor()
        {
        }
        /**
         * @param null|int|string|array $job_params
         * @param null|array            $statuses
         *
         * @return string
         * @throws \InvalidArgumentException
         */
        public function get_ate_jobs($job_params = \null, array $statuses = \null)
        {
        }
        public function getAteCancelJobs()
        {
        }
        public function getAteHideJobs()
        {
        }
        public function getLanguages()
        {
        }
        public function getLanguagesMapping()
        {
        }
        public function getDeleteLanguagesMapping()
        {
        }
        public function getLanguagesCheckPairs()
        {
        }
        public function getShowLanguage()
        {
        }
        /**
         * @return string
         * @throws \InvalidArgumentException
         */
        public function get_ate_job_status()
        {
        }
        /**
         * @param int() $job_ids
         *
         * @return string
         */
        public function get_ate_jobs_by_wpml_job_ids($job_ids)
        {
        }
        /**
         * @return string
         */
        public function get_websites()
        {
        }
        /**
         * @return string
         */
        public function get_source_id_migration()
        {
        }
        /**
         * @return string
         */
        public function get_sync_all()
        {
        }
        /**
         * @param string $paginationToken
         * @param int    $page
         *
         * @return string
         */
        public function get_sync_page($paginationToken, $page)
        {
        }
        /**
         * @param int $job_id
         *
         * @return string
         */
        public function get_clone_job($job_id)
        {
        }
        /**
         * @return string
         * @throws \InvalidArgumentException
         */
        public function get_credits()
        {
        }
        /**
         * @return string
         * @throws \InvalidArgumentException
         */
        public function get_resume_all()
        {
        }
        public function get_send_sitekey()
        {
        }
    }
}
namespace WPML\TM\ATE\Sync {
    class Result
    {
        /** @var string|false|null $lockKey */
        public $lockKey;
        /** @var string|null $ateToken */
        public $ateToken;
        /** @var int|null $nextPage */
        public $nextPage;
        /** @var int|null $numberOfPages */
        public $numberOfPages;
        /** @var int $downloadQueueSize */
        public $downloadQueueSize = 0;
        /** @var array[wpmlJobId, wpmlStatus, ateStatus, wpmlJobStatus] */
        public $jobs = [];
    }
    class Trigger
    {
        const SYNC_TIMEOUT = 10 * MINUTE_IN_SECONDS;
        const OPTION_GROUP = 'WPML\\TM\\ATE\\Sync';
        const SYNC_LAST = 'last';
        const SYNC_REQUIRED_FOR_USERS = 'required_for_users';
        /** @var OptionManager $optionManager */
        private $optionManager;
        public function __construct(\WPML\WP\OptionManager $optionManager)
        {
        }
        /**
         * @return bool
         */
        public function isSyncRequired()
        {
        }
        /**
         * @return bool
         */
        private function isPeriodicSyncRequired()
        {
        }
        /**
         * @return bool
         */
        private function isUserSyncRequired()
        {
        }
        public function setSyncRequiredForCurrentUser()
        {
        }
        public function setLastSync()
        {
        }
        /**
         * @return Collection
         */
        private function getUsersNeedSync()
        {
        }
        private function setUsersNeedSync(\WPML\Collect\Support\Collection $usersNeedSync)
        {
        }
    }
    class Process
    {
        const LOCK_RELEASE_TIMEOUT = 1 * MINUTE_IN_SECONDS;
        /** @var WPML_TM_ATE_API $api */
        private $api;
        /** @var WPML_TM_ATE_Job_Repository $ateRepository */
        private $ateRepository;
        /** @var Trigger $trigger */
        private $trigger;
        public function __construct(\WPML_TM_ATE_API $api, \WPML_TM_ATE_Job_Repository $ateRepository, \WPML\TM\ATE\Sync\Trigger $trigger)
        {
        }
        /**
         * @param Arguments $args
         *
         * @return Result
         */
        public function run(\WPML\TM\ATE\Sync\Arguments $args)
        {
        }
        /**
         * This will run the sync on extra pages.
         *
         * @param Result $result
         * @param Arguments $args
         *
         * @return Result
         */
        private function runSyncOnPages(\WPML\TM\ATE\Sync\Result $result, \WPML\TM\ATE\Sync\Arguments $args)
        {
        }
        /**
         * This will run the first sync iteration.
         * We send all the job IDs we want to sync.
         *
         * @param Result $result
         * @param boolean $includeManualAndLongstandingJobs
         *
         * @return Result
         */
        private function runSyncInit(\WPML\TM\ATE\Sync\Result $result, $includeManualAndLongstandingJobs = true)
        {
        }
        /**
         * @param boolean $includeManualAndLongstandingJobs
         *
         * @return array
         */
        private function getAteJobIdsToSync($includeManualAndLongstandingJobs = true)
        {
        }
        /**
         * @param array $items
         *
         * @return Job[] $items
         */
        private function handleJobs(array $items)
        {
        }
    }
    class Arguments
    {
        /** @var string|null $lockKey */
        public $lockKey;
        /** @var string|null $ateToken */
        public $ateToken;
        /** @var int|null $page */
        public $page;
        /** @var int|null $numberOfPages */
        public $numberOfPages;
        /** @var boolean $includeManualAndLongstandingJobs */
        public $includeManualAndLongstandingJobs;
    }
}
namespace {
    class WPML_TM_AMS_Users
    {
        /**@var WPML_Translation_Manager_Records */
        private $manager_records;
        /** @var WPML_Translator_Records */
        private $translator_records;
        /** @var WPML_Translator_Admin_Records $translator_admin_records */
        private $translator_admin_records;
        public function __construct(\WPML_Translation_Manager_Records $manager_records, \WPML_Translator_Records $translator_records, \WPML_Translator_Admin_Records $translator_admin_records)
        {
        }
        public function get_translators()
        {
        }
        public function get_managers()
        {
        }
        private function get_admins_that_are_not_translators()
        {
        }
    }
    class WPML_Remove_Pages_Not_In_Current_Language
    {
        /** @var \wpdb */
        private $wpdb;
        /** @var \SitePress */
        private $sitepress;
        /**
         * @param wpdb $wpdb
         * @param SitePress $sitepress
         */
        public function __construct(\wpdb $wpdb, \SitePress $sitepress)
        {
        }
        /**
         * @param array $posts Array of posts to filter
         * @param array $get_page_arguments Arguments passed to the `get_pages` function
         * @param \WP_Post[]|array[]|int[] $posts Array of posts or post IDs to filter (post IDs are required in tests but it might not be a real case)
         *
         * @return array
         */
        function filter_pages($posts, $get_page_arguments)
        {
        }
        /**
         * @param string $post_type
         * @param string $current_language
         *
         * @return array
         */
        private function get_posts_in_current_languages($post_type, $current_language)
        {
        }
        /**
         * @param string $post_type
         * @param string $current_language
         *
         * @return array
         */
        private function get_original_posts_in_other_languages($post_type, $current_language)
        {
        }
        /**
         * @param string $query
         *
         * @return int[]
         */
        private function get_post_ids($query)
        {
        }
        /**
         * @param array<string,string> $get_page_arguments
         * @param array<string,string> $new_arr
         *
         * @return false|string
         */
        private function find_post_type($get_page_arguments, $new_arr)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Canonicals
    {
        const CANONICAL_FOR_DUPLICATED_POST = 'duplicate';
        const CANONICAL_FOR_NON_TRANSLATABLE_POST = 'non-translatable';
        /** @var SitePress */
        private $sitepress;
        /** @var WPML_Translations */
        private $wpml_translations;
        /** @var WPML_Translation_Element_Factory  */
        private $translation_element_factory;
        /**
         * WPML_Canonicals constructor.
         *
         * @param SitePress                        $sitepress
         * @param WPML_Translation_Element_Factory $translation_element_factory
         * @param WPML_Translations                $wpml_translations
         */
        public function __construct(\SitePress $sitepress, \WPML_Translation_Element_Factory $translation_element_factory, \WPML_Translations $wpml_translations = \null)
        {
        }
        /**
         * @param int $post_id
         *
         * @return bool|string
         * @throws \InvalidArgumentException
         */
        private function must_filter_permalink($post_id)
        {
        }
        /**
         * @param string $link
         * @param int    $post_id
         *
         * @return null|string
         * @throws \InvalidArgumentException
         */
        public function permalink_filter($link, $post_id)
        {
        }
        /**
         * @param string  $canonical_url
         * @param WP_Post $post
         *
         * @return string|bool
         */
        public function get_canonical_url($canonical_url, $post, $request_language)
        {
        }
        /**
         * @param string $url
         *
         * @return string
         */
        public function get_general_canonical_url($url)
        {
        }
        private function has_wp_get_canonical_url()
        {
        }
        /**
         * @return bool
         */
        private function is_permalink_filter_from_rel_canonical()
        {
        }
        /**
         * @param string $link
         *
         * @return bool|string
         */
        private function get_url_in_default_language_if_rel_canonical($link)
        {
        }
        /**
         * @param WPML_Post_Element $post_element
         *
         * @return false|string
         */
        private function get_canonical_of_duplicate($post_element)
        {
        }
        /**
         * @return bool
         */
        private function must_handle_a_canonical_url()
        {
        }
        private function init_wpml_translations()
        {
        }
    }
    /**
     * Class WPML_Canonicals_Hooks
     */
    class WPML_Canonicals_Hooks
    {
        /** @var SitePress $sitepress */
        private $sitepress;
        /** @var  WPML_URL_Converter $url_converter */
        private $url_converter;
        /** @var callable $is_current_request_root_callback */
        private $is_current_request_root_callback;
        /**
         * WPML_Canonicals_Hooks constructor.
         *
         * @param SitePress          $sitepress
         * @param WPML_URL_Converter $url_converter
         * @param callable           $is_current_request_root_callback
         */
        public function __construct(\SitePress $sitepress, \WPML_URL_Converter $url_converter, $is_current_request_root_callback)
        {
        }
        public function add_hooks()
        {
        }
        public function redirect_pages_from_root_to_default_lang_dir()
        {
        }
        /**
         * @param string $redirect
         *
         * @return bool|string
         */
        public function maybe_fix_nginx_redirection_callback($redirect)
        {
        }
        /**
         * @param string $redirect_url
         *
         * @return string|false
         */
        public function prevent_redirection_with_translated_paged_content($redirect_url)
        {
        }
    }
    class WPML_Plugins_Check
    {
        /**
         * @param string $bundle_json
         * @param string $tm_version
         * @param string $st_version
         * @param string $wcml_version
         */
        public static function disable_outdated($bundle_json, $tm_version, $st_version, $wcml_version)
        {
        }
    }
}
namespace WPML {
    class Plugins
    {
        const WPML_TM_PLUGIN = 'wpml-translation-management/plugin.php';
        const WPML_CORE_PLUGIN = 'sitepress-multilingual-cms/sitepress.php';
        const WPML_SUBSCRIPTION_TYPE_BLOG = 6718;
        const AFTER_INSTALLER = 999;
        public static function loadCoreFirst()
        {
        }
        public static function isTMAllowed()
        {
        }
        public static function updateTMAllowedOption()
        {
        }
        /**
         * @param bool $isSetupComplete
         */
        public static function loadEmbeddedTM($isSetupComplete)
        {
        }
        private static function deactivateTm()
        {
        }
        public static function isTMActive()
        {
        }
        private static function stopPluginActivation($pluginSlug)
        {
        }
        public static function showEmbeddedTMNotice()
        {
        }
    }
}
namespace {
    /**
     * Class WPML_Adjacent_Links_Hooks
     *
     * @author OnTheGoSystems
     */
    class WPML_Adjacent_Links_Hooks implements \IWPML_Action
    {
        /** @var SitePress $sitepress */
        private $sitepress;
        /** @var wpdb $wpdb */
        private $wpdb;
        /** @var WPML_Language_Where_Clause $language_where_clause */
        private $language_where_clause;
        /**
         * WPML_Adjacent_Links_Hooks constructor.
         *
         * @param SitePress                  $sitepress
         * @param wpdb                       $wpdb
         * @param WPML_Language_Where_Clause $language_where_clause
         */
        public function __construct(\SitePress $sitepress, \wpdb $wpdb, \WPML_Language_Where_Clause $language_where_clause)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param string $join_clause
         *
         * @return string
         */
        function get_adjacent_post_join($join_clause)
        {
        }
        /**
         * @param string $where_clause
         *
         * @return string
         */
        function get_adjacent_post_where($where_clause)
        {
        }
        /** @return string */
        private function get_current_post_type()
        {
        }
    }
    /**
     * Class WPML_Adjacent_Links_Hooks_Factory
     *
     * @author OnTheGoSystems
     */
    class WPML_Adjacent_Links_Hooks_Factory implements \IWPML_Frontend_Action_Loader, \IWPML_Backend_Action_Loader, \IWPML_AJAX_Action_Loader
    {
        /** @return WPML_Adjacent_Links_Hooks */
        public function create()
        {
        }
    }
    /**
     * Class WPML_Jobs_Notification_Settings
     */
    class WPML_User_Jobs_Notification_Settings
    {
        const BLOCK_NEW_NOTIFICATION_FIELD = 'wpml_block_new_email_notifications';
        public function add_hooks()
        {
        }
        /**
         * @param int $user_id
         */
        public function save_new_job_notifications_setting($user_id)
        {
        }
        public static function is_new_job_notification_enabled($user_id)
        {
        }
    }
    class WPML_User_Jobs_Notification_Settings_Render
    {
        private $section_template;
        /**
         * WPML_User_Jobs_Notification_Settings_Render constructor.
         *
         * @param WPML_User_Jobs_Notification_Settings_Template|null $notification_settings_template
         */
        public function __construct(\WPML_User_Jobs_Notification_Settings_Template $notification_settings_template)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param int $user_id
         */
        public function render_options($user_id)
        {
        }
        /**
         * @return null|WPML_User_Jobs_Notification_Settings_Template
         */
        private function get_notification_template()
        {
        }
    }
    /**
     * Class WPML_User_Jobs_Notification_Settings_Template
     */
    class WPML_User_Jobs_Notification_Settings_Template
    {
        const TEMPLATE_FILE = 'job-email-notification.twig';
        /**
         * @var WPML_Twig_Template
         */
        private $template_service;
        /**
         * WPML_User_Jobs_Notification_Settings_Template constructor.
         *
         * @param IWPML_Template_Service $template_service
         */
        public function __construct(\IWPML_Template_Service $template_service)
        {
        }
        /**
         * @param string $notification_input
         *
         * @return string
         */
        public function get_setting_section($notification_input)
        {
        }
        /**
         * @param string $notification_input
         *
         * @return array
         */
        private function get_model($notification_input)
        {
        }
    }
    abstract class WPML_Translation_Roles_Records
    {
        const USERS_WITH_CAPABILITY = 'LIKE';
        const USERS_WITHOUT_CAPABILITY = 'NOT LIKE';
        const MIN_SEARCH_LENGTH = 3;
        const CACHE_GROUP = __CLASS__;
        /** @var wpdb */
        protected $wpdb;
        /** @var WPML_WP_User_Query_Factory */
        private $user_query_factory;
        /** @var \WP_Roles */
        protected $wp_roles;
        /**
         * WPML_Translation_Roles_Records constructor.
         *
         * @param \wpdb                       $wpdb
         * @param \WPML_WP_User_Query_Factory $user_query_factory
         * @param \WP_Roles                   $wp_roles
         */
        public function __construct(\wpdb $wpdb, \WPML_WP_User_Query_Factory $user_query_factory, \WP_Roles $wp_roles)
        {
        }
        public function has_users_with_capability()
        {
        }
        /**
         * @return array
         */
        public function get_users_with_capability()
        {
        }
        /**
         * @return int
         */
        public function get_number_of_users_with_capability()
        {
        }
        /**
         * @param string $search
         * @param int    $limit
         *
         * @return array
         */
        public function search_for_users_without_capability($search = '', $limit = -1)
        {
        }
        /**
         * @param int $user_id
         *
         * @return bool
         */
        public function does_user_have_capability($user_id)
        {
        }
        /**
         * Delete records for all users
         */
        public function delete_all()
        {
        }
        /**
         * Delete the record for the user
         *
         * @param int $user_id
         */
        public function delete($user_id)
        {
        }
        /**
         * @param string $compare
         * @param string $search
         * @param int    $limit
         *
         * @return array
         */
        private function get_records($compare, $search = '', $limit = -1)
        {
        }
        /**
         * @param string $compare
         * @param string $search
         * @param int    $limit
         *
         * @return array
         */
        private function get_records_from_users_metas($compare, $search, $limit = -1)
        {
        }
        /**
         * @return string
         */
        protected abstract function get_capability();
        /**
         * @return array
         */
        protected abstract function get_required_wp_roles();
    }
    class WPML_Translation_Manager_Records extends \WPML_Translation_Roles_Records
    {
        /**
         * @return string
         */
        protected function get_capability()
        {
        }
        /**
         * @return array
         */
        protected function get_required_wp_roles()
        {
        }
        /**
         * Determine if the role can be used for a manager.
         *
         * @param \WP_Role $role The role definition.
         *
         * @return bool
         */
        public function is_required_role(\WP_Role $role)
        {
        }
    }
    class WPML_TM_Only_I_Language_Pairs implements \IWPML_AJAX_Action, \IWPML_DIC_Action
    {
        /** @var WPML_Language_Pair_Records $language_pair_records */
        private $language_pair_records;
        public function __construct(\WPML_Language_Pair_Records $language_pair_records)
        {
        }
        public function add_hooks()
        {
        }
        public function update_language_pairs()
        {
        }
    }
    class WPML_Translator_Records extends \WPML_Translation_Roles_Records
    {
        /**
         * @return string
         */
        protected function get_capability()
        {
        }
        /**
         * @return array
         */
        protected function get_required_wp_roles()
        {
        }
        /**
         * @param string $source_language
         * @param array  $target_languages
         * @param bool   $require_all_languages - Translator must have all target languages if true otherwise they need at least one.
         *
         * @return array
         */
        public function get_users_with_languages($source_language, $target_languages, $require_all_languages = \true)
        {
        }
    }
    class WPML_Translator_Admin_Records extends \WPML_Translator_Records
    {
        protected function get_required_wp_roles()
        {
        }
    }
}
namespace WPML\TM\User {
    class Hooks implements \IWPML_Backend_Action
    {
        public function add_hooks()
        {
        }
        public function cleanUserCacheAction()
        {
        }
        public function updatedUserMetaAction()
        {
        }
        public function filter_show_hidden_languages_options($show_hidden_languages_options)
        {
        }
        private function flushCache()
        {
        }
    }
}
namespace WPML\Media {
    class FrontendHooks implements \IWPML_Frontend_Action
    {
        public function add_hooks()
        {
        }
        /**
         * @param string $caption
         * @param int    $postId
         *
         * @return string
         */
        public static function translateCaption($caption, $postId)
        {
        }
    }
}
namespace {
    class WPML_Media_Exception extends \Exception
    {
    }
}
namespace WPML\Media\Setup\Endpoint {
    class PrepareSetup implements \WPML\Ajax\IHandler
    {
        const LOCK_RELEASE_TIMEOUT = 2 * MINUTE_IN_SECONDS;
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    class PerformSetup implements \WPML\Ajax\IHandler
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
}
namespace WPML\Media\Translate {
    class LanguagesUpdated implements \IWPML_AJAX_Action
    {
        public function add_hooks()
        {
        }
    }
}
namespace WPML\Media\Translate\Endpoint {
    class DuplicateFeaturedImages implements \WPML\Ajax\IHandler
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
        /**
         * @return bool
         */
        private function shouldDuplicateFeaturedImages()
        {
        }
    }
    class PrepareForTranslation implements \WPML\Ajax\IHandler
    {
        const LOCK_RELEASE_TIMEOUT = 2 * MINUTE_IN_SECONDS;
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    class TranslateExistingMedia implements \WPML\Ajax\IHandler
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    class FinishMediaTranslation implements \WPML\Ajax\IHandler
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
}
namespace {
    class WPML_Model_Attachments
    {
        const ATTACHMENT_TYPE = 'post_attachment';
        /** @var SitePress */
        private $sitepress;
        /**
         * @var WPML_Post_Status
         */
        private $status_helper;
        /**
         * @param SitePress $sitepress
         * @param WPML_Post_Status $status_helper
         */
        public function __construct(\SitePress $sitepress, \WPML_Post_Status $status_helper)
        {
        }
        /**
         * @param int $attachment_id
         * @param int $duplicated_attachment_id
         */
        public function duplicate_post_meta_data($attachment_id, $duplicated_attachment_id)
        {
        }
        /**
         * @param int $trid
         * @param string $target_language
         *
         * @return null|WP_Post
         */
        public function find_duplicated_attachment($trid, $target_language)
        {
        }
        /**
         * @param WP_Post|null $attachment
         * @param int $parent_id_of_attachement
         * @param string $target_language
         *
         * @return int|null
         */
        public function fetch_translated_parent_id($attachment, $parent_id_of_attachement, $target_language)
        {
        }
        /**
         * @param int $new_parent_id
         * @param WP_Post $attachment
         */
        public function update_parent_id_in_existing_attachment($new_parent_id, $attachment)
        {
        }
        /**
         * @param string $post_type
         *
         * @return bool
         */
        private function is_valid_post_type($post_type)
        {
        }
        /**
         * @param int $attachment_id
         * @param string $target_language
         * @param int $parent_id_in_target_language
         * @param int $trid
         *
         * @return int
         * @throws WPML_Media_Exception
         */
        public function duplicate_attachment($attachment_id, $target_language, $parent_id_in_target_language, $trid)
        {
        }
        /**
         * @param WP_Post $post
         *
         * @return int
         */
        private function insert_attachment($post)
        {
        }
        /**
         * @param int $attachment_id
         * @param int $duplicated_attachment_id
         * @param string $target_language
         * @param int $trid
         */
        private function add_language_information_to_attachment($attachment_id, $duplicated_attachment_id, $target_language, $trid)
        {
        }
    }
    class WPML_Media_Settings_Factory extends \WPML_Current_Screen_Loader_Factory
    {
        public function create_hooks()
        {
        }
        public function get_screen_regex()
        {
        }
    }
    class WPML_Media_Settings
    {
        const ID = 'ml-content-setup-sec-media';
        private $wpdb;
        public function __construct($wpdb)
        {
        }
        public function add_hooks()
        {
        }
        public function enqueue_script()
        {
        }
        public function render()
        {
        }
        public function mcsetup_navigation_links(array $mcsetup_sections)
        {
        }
    }
    /**
     * WPML_Attachment_Action class file.
     *
     * @package WPML
     */
    /**
     * Class WPML_Attachment_Action
     */
    class WPML_Attachment_Action implements \IWPML_Action
    {
        /**
         * SitePress instance.
         *
         * @var SitePress
         */
        private $sitepress;
        /**
         * Wpdb instance.
         *
         * @var wpdb
         */
        private $wpdb;
        /**
         * WPML_Attachment_Action constructor.
         *
         * @param SitePress $sitepress SitePress instance.
         * @param wpdb      $wpdb      wpdb instance.
         */
        public function __construct(\SitePress $sitepress, \wpdb $wpdb)
        {
        }
        /**
         * Add hooks.
         */
        public function add_hooks()
        {
        }
        /**
         * Check if we are in site console or xmlrpc request is active.
         *
         * @return bool
         */
        private function is_admin_or_xmlrpc()
        {
        }
        /**
         * Check if we are uploading plugin or theme.
         *
         * @return bool
         */
        private function is_uploading_plugin_or_theme()
        {
        }
        /**
         * Filter views.
         *
         * @param array $views Views.
         *
         * @return array
         */
        public function views_upload_actions($views)
        {
        }
        /**
         * Check if the image is not duplicated to another post before deleting it physically.
         *
         * @param string $file Full file name.
         *
         * @return string|null
         */
        public function delete_file_filter($file)
        {
        }
        private function get_file_name($file)
        {
        }
        /**
         * Get file name without a size, i.e. 'a-600x400.png' -> 'a.png'.
         *
         * @param string $file Full file name.
         *
         * @return mixed|string|string[]|null
         */
        private function get_file_name_without_size_from_full_name($file)
        {
        }
    }
    /**
     * WPML_Attachment_Action_Factory
     *
     * @package WPML
     */
    /**
     * Class WPML_Attachment_Action_Factory
     */
    class WPML_Attachment_Action_Factory implements \IWPML_Backend_Action_Loader, \IWPML_Frontend_Action_Loader, \IWPML_AJAX_Action_Loader, \IWPML_Deferred_Action_Loader
    {
        /**
         * Get load action.
         *
         * @return string
         */
        public function get_load_action()
        {
        }
        /**
         * Create attachment action.
         *
         * @return WPML_Attachment_Action
         */
        public function create()
        {
        }
    }
}
namespace WPML\Media {
    class Loader implements \IWPML_Backend_Action
    {
        public function add_hooks()
        {
        }
        public static function getData()
        {
        }
    }
}
namespace WPML\Media\Duplication {
    abstract class AbstractFactory implements \IWPML_Backend_Action_Loader, \IWPML_Frontend_Action_Loader
    {
        /**
         * @return bool
         */
        protected static function shouldActivateHooks()
        {
        }
    }
}
namespace {
    class WPML_Media_Attachments_Duplication_Factory extends \WPML\Media\Duplication\AbstractFactory
    {
        public function create()
        {
        }
    }
}
namespace WPML\Media\Duplication {
    class HooksFactory extends \WPML\Media\Duplication\AbstractFactory
    {
        public function create()
        {
        }
    }
}
namespace {
    class WPML_Media_Attachments_Duplication
    {
        /** @var  WPML_Model_Attachments */
        private $attachments_model;
        /** @var SitePress */
        private $sitepress;
        private $wpdb;
        private $language_resolution;
        private $original_thumbnail_ids = array();
        /**
         * WPML_Media_Attachments_Duplication constructor.
         *
         * @param SitePress              $sitepress
         * @param WPML_Model_Attachments $attachments_model
         *
         * @internal param WPML_WP_API $wpml_wp_api
         */
        public function __construct(\SitePress $sitepress, \WPML_Model_Attachments $attachments_model, \wpdb $wpdb, \WPML_Language_Resolution $language_resolution)
        {
        }
        public function add_hooks()
        {
        }
        private function add_postmeta_hooks()
        {
        }
        private function withPostMetaFiltersDisabled(callable $callback)
        {
        }
        private function is_admin_or_xmlrpc()
        {
        }
        public function save_attachment_actions($post_id)
        {
        }
        private function is_uploading_media_on_wpml_media_screen()
        {
        }
        public function wp_generate_attachment_metadata($metadata, $attachment_id)
        {
        }
        private function update_attachment_metadata($source_attachment_id)
        {
        }
        private function synchronize_attachment_metadata($metadata, $attachment_id)
        {
        }
        private function update_attachment_texts($translation)
        {
        }
        public function save_translated_attachments($post_id)
        {
        }
        private function translate_attachments($attachment_id, $source_language, $override_always_translate_media = \false)
        {
        }
        private function is_uploading_plugin_or_theme()
        {
        }
        public function make_duplicate($master_post_id, $target_lang, $post_array, $target_post_id)
        {
        }
        /**
         * @param int    $attachment_id
         * @param int    $parent_id
         * @param string $target_language
         *
         * @return int|null
         */
        public function create_duplicate_attachment($attachment_id, $parent_id, $target_language)
        {
        }
        public function sync_on_translation_complete($new_post_id, $fields, $job)
        {
        }
        public function record_original_thumbnail_ids_and_sync($meta_id, $object_id, $meta_key, $meta_value)
        {
        }
        /**
         * @param int     $pidd
         * @param WP_Post $post
         */
        function save_post_actions($pidd, $post)
        {
        }
        /**
         * @param int     $pidd
         * @param WP_Post $post
         */
        function sync_attachments($pidd, $post)
        {
        }
        /**
         * @param int      $post_id
         * @param int|null $request_post_thumbnail_id
         */
        public function sync_post_thumbnail($post_id, $request_post_thumbnail_id = \null)
        {
        }
        protected function are_post_thumbnails_still_in_sync($source_id, $source_thumbnail_id, $translation)
        {
        }
        private function are_translations_of_each_other($post_id_1, $post_id_2)
        {
        }
        function duplicate_post_attachments($pidd, $icl_trid, $source_lang = \null, $lang = \null)
        {
        }
        /**
         * @param int $post_id
         *
         * @return bool
         */
        private function is_media_marked_to_duplication($post_id)
        {
        }
        /**
         * @param int $post_id
         *
         * @return bool
         */
        private function is_feature_image_marked_to_duplication($post_id)
        {
        }
        /**
         * @param int    $source_attachment_id
         * @param int    $pidd
         * @param string $lang
         *
         * @return int|null|WP_Error
         */
        public function create_duplicate_attachment_not_static($source_attachment_id, $pidd, $lang)
        {
        }
        private function duplicate_featured_images($limit = 0, $offset = 0)
        {
        }
        /**
         * @param int $limit
         * @param int $offset Offset to use for getting thumbnails. Default: 0.
         *
         * @return array
         */
        public function get_post_thumbnail_map($limit = 0, $offset = 0)
        {
        }
        /**
         * @param \stdClass $post       contains properties `ID` and `post_type`
         * @param array     $thumbnails a map of post ID => thumbnail ID
         */
        public function duplicate_featured_image_in_post($post, $thumbnails = array())
        {
        }
        public function ajax_batch_duplicate_featured_images()
        {
        }
        public function batch_duplicate_featured_images($outputResult = \true, $featured_images_left = \null)
        {
        }
        /**
         * Returns the total number of Featured Images.
         *
         * @return int
         */
        private function get_featured_images_total_number()
        {
        }
        public function batch_duplicate_media($outputResult = \true)
        {
        }
        private function get_batch_translate_limit($active_languages)
        {
        }
        public function batch_translate_media($outputResult = \true)
        {
        }
        public function batch_set_initial_language()
        {
        }
        function batch_scan_prepare($outputResult = \true)
        {
        }
        public function batch_mark_processed($outputResult = \true)
        {
        }
        public function create_duplicated_media($attachment)
        {
        }
        function set_content_defaults_prepare()
        {
        }
        function set_content_defaults()
        {
        }
        private function set_media_duplication_meta_for_existing_posts($meta_key)
        {
        }
        private function add_missing_media_duplication_meta_values($meta_key)
        {
        }
    }
}
namespace WPML\Media\Duplication {
    class Hooks
    {
        public static function add()
        {
        }
        public static function syncAttachedFile($meta_id, $object_id, $meta_key, $meta_value)
        {
        }
    }
}
namespace {
    class WPML_Active_Plugin_Provider
    {
        /**
         * @return array
         */
        public function get_active_plugins()
        {
        }
        /**
         * @return array
         */
        public function get_active_plugin_names()
        {
        }
    }
    class WPML_Translate_Link_Target_Global_State extends \WPML_SP_User
    {
        private $rescan_required;
        const OPTION_NAME = 'WPML_Translate_Link_Target_Global_State';
        const SHOULD_FIX_CONTENT_STATE = 'WPML_Translate_Link_Target_Global_State::should_fix_content';
        public function __construct(\SitePress &$sitepress)
        {
        }
        public function should_fix_content()
        {
        }
        public function is_rescan_required()
        {
        }
        public function set_rescan_required()
        {
        }
        public function clear_rescan_required()
        {
        }
    }
    /**
     * Class WPML_Translate_Link_Targets_In_Content
     *
     * @package wpml-tm
     */
    abstract class WPML_Translate_Link_Targets_In_Content extends \WPML_WPDB_User
    {
        protected $scanning_in_progress = \false;
        protected $content_to_fix;
        protected $number_of_links_fixed;
        /* var WPML_Pro_Translation	$pro_translation */
        protected $pro_translation;
        /** @var  WPML_Translate_Link_Target_Global_State $translate_link_target_global_state */
        private $translate_link_target_global_state;
        const MAX_TO_FIX_FOR_NEW_CONTENT = 10;
        public function __construct(\WPML_Translate_Link_Target_Global_State $translate_link_target_global_state, &$wpdb, $pro_translation)
        {
        }
        public function new_content()
        {
        }
        private function do_new_content()
        {
        }
        public function get_number_of_links_that_were_fixed()
        {
        }
        public function fix($start = 0, $count = 0)
        {
        }
        protected abstract function get_contents_with_links_needing_fix($start = 0, $count = 0);
        protected abstract function get_content_type();
        public abstract function get_number_to_be_fixed($start_id = 0);
    }
    /**
     * Class WPML_Translate_Link_Targets_In_Posts
     *
     * @package wpml-tm
     */
    class WPML_Translate_Link_Targets_In_Posts extends \WPML_Translate_Link_Targets_In_Content
    {
        protected function get_contents_with_links_needing_fix($start_id = 0, $count = 0)
        {
        }
        protected function get_content_type()
        {
        }
        public function get_number_to_be_fixed($start_id = 0)
        {
        }
        protected function get_sql($start_id, $count, $return_count_only)
        {
        }
    }
    class WPML_Translate_Link_Targets_In_Posts_Global extends \WPML_Translate_Link_Targets_In_Posts
    {
        protected function get_contents_with_links_needing_fix($start_id = 0, $count = 0)
        {
        }
        public function get_number_to_be_fixed($start_id = 0)
        {
        }
        protected function get_sql($start_id, $count, $return_count_only)
        {
        }
    }
    interface IWPML_AJAX_Action_Run
    {
        public function run();
    }
    abstract class WPML_Ajax_Update_Link_Targets_In_Content extends \WPML_WPDB_User implements \IWPML_AJAX_Action_Run
    {
        /** @var WPML_Translate_Link_Targets_In_Content $translate_link_targets */
        private $translate_link_targets;
        private $post_data;
        /** @var  WPML_Translate_Link_Target_Global_State $translate_link_target_global_state */
        protected $translate_link_target_global_state;
        public function __construct(\WPML_Translate_Link_Target_Global_State $translate_link_target_global_state, &$wpdb, $post_data)
        {
        }
        public function run()
        {
        }
        protected abstract function create_translate_link_target();
    }
    class WPML_Ajax_Update_Link_Targets_In_Posts extends \WPML_Ajax_Update_Link_Targets_In_Content
    {
        private $pro_translation;
        public function __construct(\WPML_Translate_Link_Target_Global_State $translate_link_target_global_state, &$wpdb, $pro_translation, $post_data)
        {
        }
        protected function create_translate_link_target()
        {
        }
    }
    /**
     * Class WPML_Translate_Link_Targets_In_Strings
     *
     * @package wpml-tm
     */
    class WPML_Translate_Link_Targets_In_Strings extends \WPML_Translate_Link_Targets_In_Content
    {
        private $option_name = 'wpml_strings_need_links_fixed';
        /* var WPML_WP_API $wp_api */
        private $wp_api;
        public function __construct(\WPML_Translate_Link_Target_Global_State $translate_link_target_global_state, &$wpdb, $wp_api, $pro_translation)
        {
        }
        protected function get_contents_with_links_needing_fix($start = 0, $count = 0)
        {
        }
        protected function get_content_type()
        {
        }
        public function get_number_to_be_fixed($start_id = 0)
        {
        }
    }
    /**
     * Class WPML_Links_Fixed_Status_Factory
     *
     * @package wpml-translation-management
     */
    class WPML_Links_Fixed_Status_Factory extends \WPML_WPDB_User
    {
        private $wp_api;
        public function __construct(&$wpdb, $wp_api)
        {
        }
        public function create($element_id, $element_type)
        {
        }
    }
    /**
     * Class WPML_Links_Fixed_Status
     *
     * @package wpml-translation-management
     */
    abstract class WPML_Links_Fixed_Status
    {
        public abstract function set($status);
        public abstract function are_links_fixed();
    }
    /**
     * Class WPML_Links_Fixed_Status_For_Posts
     *
     * @package wpml-tm
     */
    class WPML_Links_Fixed_Status_For_Posts extends \WPML_Links_Fixed_Status
    {
        /* @var int $translation_id */
        private $translation_id;
        private $wpdb;
        public function __construct($wpdb, $element_id, $element_type)
        {
        }
        public function set($status)
        {
        }
        public function are_links_fixed()
        {
        }
        public static function clear($element_id, $element_type)
        {
        }
    }
    class WPML_Ajax_Update_Link_Targets_In_Strings extends \WPML_Ajax_Update_Link_Targets_In_Content
    {
        private $wp_api;
        private $pro_translation;
        public function __construct(\WPML_Translate_Link_Target_Global_State $translate_link_target_global_state, &$wpdb, $wp_api, $pro_translation, $post_data)
        {
        }
        protected function create_translate_link_target()
        {
        }
    }
}
namespace WPML\TranslateLinkTargets {
    class Hooks implements \IWPML_Backend_Action_Loader, \IWPML_Frontend_Action_Loader
    {
        public function create()
        {
        }
        public static function add_hooks()
        {
        }
        public static function clearStatus($postId)
        {
        }
    }
}
namespace {
    class WPML_Translate_Link_Targets_In_Strings_Global extends \WPML_Translate_Link_Targets_In_Strings
    {
        protected function get_contents_with_links_needing_fix($start_id = 0, $count = 0)
        {
        }
        public function get_number_to_be_fixed($start_id = 0)
        {
        }
    }
    /**
     * Class WPML_Links_Fixed_Status_For_Posts
     *
     * @package wpml-tm
     */
    class WPML_Links_Fixed_Status_For_Strings extends \WPML_Links_Fixed_Status
    {
        private $wp_api;
        private $string_id;
        private $option_name = 'wpml_strings_need_links_fixed';
        public function __construct(&$wp_api, $string_id)
        {
        }
        public function set($status)
        {
        }
        public function are_links_fixed()
        {
        }
        private function remove_string_from_strings_that_need_fixing()
        {
        }
        private function add_string_to_strings_that_need_fixing()
        {
        }
        private function load_strings_that_need_fixing()
        {
        }
        private function save_strings_that_need_fixing($strings_that_need_links_fixed)
        {
        }
    }
    /**
     * Class for handling a unique ID of the site.
     *
     * @author OnTheGo Systems
     */
    class WPML_Site_ID
    {
        /**
         * The name prefix of the option where the ID is stored.
         */
        const SITE_ID_KEY = 'WPML_SITE_ID';
        /**
         * The default scope.
         */
        const SITE_SCOPES_GLOBAL = 'global';
        /**
         * Memory cache of the IDs.
         *
         * @var array
         */
        private $site_ids = array();
        /**
         * Read and, if needed, generate the site ID based on the scope.
         *
         * @param string $scope      Defaults to "global".
         *                           Use a different value when the ID is used for specific scopes.
         *
         * @param bool   $create_new Forces the creation of a new ID.
         *
         * @return string|null The generated/stored ID or null if it wasn't possible to generate/store the value.
         */
        public function get_site_id($scope = self::SITE_SCOPES_GLOBAL, $create_new = \false)
        {
        }
        /**
         * Geenrates the ID.
         *
         * @param string $scope The scope of the ID.
         *
         * @return bool
         */
        private function generate_site_id($scope)
        {
        }
        /**
         * Read the value from cache, if present, or from the DB.
         *
         * @param string $scope The scope of the ID.
         *
         * @return string
         */
        private function read_value($scope)
        {
        }
        /**
         * Writes the value in DB and cache.
         *
         * @param string $value The value to write.
         * @param string $scope The scope of the ID.
         *
         * @return bool
         */
        private function write_value($value, $scope)
        {
        }
        /**
         * Gets the options key name based on the scope.
         *
         * @param string $scope The scope of the ID.
         *
         * @return string
         */
        private function get_option_key($scope)
        {
        }
        /**
         * Gets the value from the memory cache.
         *
         * @param string $scope The scope of the ID.
         *
         * @return mixed|null
         */
        private function get_from_cache($scope)
        {
        }
    }
}
namespace WPML\TM\AutomaticTranslation\Actions {
    class Actions implements \IWPML_Action
    {
        /** @see \WPML\PB\Shutdown\Hooks */
        const PRIORITY_AFTER_PB_PROCESS = 100;
        /** @var \WPML_Translation_Element_Factory */
        private $translationElementFactory;
        public function __construct(\WPML_Translation_Element_Factory $translationElementFactory)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param int $postId
         *
         * @throws \WPML\Auryn\InjectionException
         */
        public function sendToTranslation($postId)
        {
        }
        /**
         * @param \WPML_Post_Element $postElement
         * @param array              $languages
         *
         * @throws \WPML\Auryn\InjectionException
         */
        private function cancelExistingTranslationJobs(\WPML_Post_Element $postElement, $languages)
        {
        }
        /**
         * @return callable :: \stdClass -> bool
         */
        private static function isCompleteAndUpToDateJob()
        {
        }
        public function createTranslationJobs(\WPML_Post_Element $postElement, $targetLanguages)
        {
        }
        /**
         * @param int $jobId
         *
         * @return bool
         */
        private function canJobBeReTranslatedAutomatically($jobId)
        {
        }
        /**
         * @param \WPML_Post_Element $postElement
         * @param string             $language
         */
        private function createJob(\WPML_Post_Element $postElement, $language)
        {
        }
        /**
         * @param       $sourceLanguage
         * @param array $elements E.g. [ [1, 'fr'], [1, 'de'], [2, 'fr'] ]
         */
        public function createNewTranslationJobs($sourceLanguage, array $elements)
        {
        }
    }
    class ActionsFactory implements \IWPML_Backend_Action_Loader, \IWPML_Frontend_Action_Loader
    {
        /**
         * @return Actions|null
         * @throws \WPML\Auryn\InjectionException
         */
        public function create()
        {
        }
    }
}
namespace {
    class WPML_TM_Translation_Basket_Dialog_View
    {
        const TEMPLATE_FILE = 'dialog.twig';
        /** @var IWPML_Template_Service $template_service */
        private $template_service;
        /** @var WPML_WP_API $wp_api */
        private $wp_api;
        public function __construct(\IWPML_Template_Service $template_service, \WPML_WP_API $wp_api)
        {
        }
        /**
         * @return string
         */
        public function render()
        {
        }
        public static function get_strings()
        {
        }
    }
    class WPML_TM_Translation_Basket_Dialog_Hooks implements \IWPML_Action
    {
        const PRIORITY_GREATER_THAN_MEDIA_DIALOG = 5;
        /** @var WPML_TM_Translation_Basket_Dialog_View $dialog_view */
        private $dialog_view;
        private $wp_api;
        public function __construct(\WPML_TM_Translation_Basket_Dialog_View $dialog_view, \WPML_WP_API $wp_api)
        {
        }
        public function add_hooks()
        {
        }
        public function enqueue_scripts()
        {
        }
        public function display_dialog_markup()
        {
        }
    }
    class WPML_TM_Translation_Basket_Validation_Notice
    {
        const TEMPLATE_FILE = 'validation-notice.twig';
        private $template_service;
        private $basket_validation;
        private $basket;
        public function __construct(\IWPML_Template_Service $template_service, \WPML_Translation_Basket_Validation $basket_validation, \WPML_Translation_Basket $basket)
        {
        }
        public function add_hooks()
        {
        }
        public function enqueue_scripts()
        {
        }
        public function render()
        {
        }
        private function get_model()
        {
        }
        /**
         * @return array
         */
        private function get_formatted_documents()
        {
        }
    }
    class WPML_TM_Translation_Basket_Hooks_Factory implements \IWPML_Backend_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_Translation_Basket_Validation
    {
        private $basket;
        private $encoding_validation;
        private $package_helper;
        public function __construct(\WPML_Translation_Basket $basket, \WPML_Encoding_Validation $encoding_validation, \WPML_Element_Translation_Package $package_helper)
        {
        }
        /**
         * @return array
         */
        public function get_invalid_documents()
        {
        }
        /**
         * @param array  $invalid_documents
         * @param array  $basket
         * @param string $kind
         *
         * @return array
         */
        private function get_base64_encoded_documents($invalid_documents, $basket, $kind)
        {
        }
    }
}
namespace WPML\Ajax {
    class Locale implements \IWPML_AJAX_Action, \IWPML_DIC_Action
    {
        /** @var \SitePress */
        private $sitePress;
        public function __construct(\SitePress $sitePress)
        {
        }
        public function add_hooks()
        {
        }
    }
    class Factory implements \IWPML_AJAX_Action
    {
        public function add_hooks()
        {
        }
    }
}
namespace {
    class WPML_Ajax_Response
    {
        private $success;
        private $response_data;
        public function __construct($success, $response_data)
        {
        }
        public function send_json()
        {
        }
        public function is_success()
        {
        }
        public function get_response()
        {
        }
    }
    class WPML_Not_Doing_Ajax_On_Send_Exception extends \Exception
    {
        public $response;
        public function __construct($response)
        {
        }
    }
    abstract class WPML_Ajax_Factory
    {
        public function add_route(\WPML_Ajax_Route $route)
        {
        }
        abstract function get_class_names();
        abstract function create($class_name);
    }
    class WPML_Ajax_Route
    {
        const ACTION_PREFIX = 'wp_ajax_';
        const ACTION_PREFIX_LENGTH = 8;
        /** @var  WPML_Ajax_Factory $factory */
        private $factory;
        public function __construct(\WPML_Ajax_Factory $factory)
        {
        }
        public function add($class_name)
        {
        }
        public function do_ajax()
        {
        }
    }
}
namespace WPML\Ajax\Endpoint {
    class Upload implements \WPML\Ajax\IHandler
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
}
namespace {
    /**
     * WPML_Action_Filter_Loader class file
     *
     * @package WPML\Core
     */
    /**
     * Class WPML_Action_Filter_Loader
     */
    class WPML_Action_Filter_Loader
    {
        /**
         * Deferred actions
         *
         * @var  array $defered_actions
         */
        private $defered_actions = array();
        /**
         * Ajax action validation
         *
         * @var  WPML_AJAX_Action_Validation $ajax_action_validation
         */
        private $ajax_action_validation;
        /**
         * Load action filter
         *
         * @param string[] $loaders Action loaders.
         */
        public function load($loaders)
        {
        }
        /**
         * Load factory
         *
         * @param string $loader Action loader.
         * @param bool   $use_dic
         */
        private function load_factory_or_action($loader, $use_dic)
        {
        }
        /**
         * @param IWPML_Action_Loader_Factory $factory
         */
        private function load_factory(\IWPML_Action_Loader_Factory $factory)
        {
        }
        /**
         * Add deferred action
         *
         * @param IWPML_Deferred_Action_Loader $factory Action factory.
         */
        private function add_deferred_action(\IWPML_Deferred_Action_Loader $factory)
        {
        }
        /**
         * Deferred action loader
         */
        public function deferred_loader()
        {
        }
        /**
         * Get ajax action validation
         *
         * @return WPML_AJAX_Action_Validation
         */
        private function get_ajax_action_validation()
        {
        }
        /**
         * Run factory
         *
         * @param IWPML_Action_Loader_Factory $factory Action loader factory.
         */
        private function run_factory(\IWPML_Action_Loader_Factory $factory)
        {
        }
    }
    /**
     * Class WPML_AJAX_Action_Validation
     *
     * @author OnTheGoSystems
     */
    class WPML_AJAX_Action_Validation
    {
        /**
         * @param string $action_name
         *
         * @return bool
         */
        public function is_valid($action_name)
        {
        }
    }
}
namespace WPML\Action {
    /**
     * Class Type
     *
     * @package WPML\Action
     *
     * Determines the type of action that a class implements. Can be
     * one or more of:
     * backend, frontend, ajax, rest, cli or dic
     *
     * dic means that the class can be loaded via Dependency Injection Container
     */
    class Type
    {
        /**
         * @var string[] Resolved by \WPML\Action\Type::is
         */
        private $backend_actions = ['IWPML_Backend_Action_Loader', 'IWPML_Backend_Action'];
        /**
         * @var string[] Resolved by \WPML\Action\Type::is
         */
        private $frontend_actions = ['IWPML_Frontend_Action_Loader', 'IWPML_Frontend_Action'];
        /**
         * @var string[] Resolved by \WPML\Action\Type::is
         */
        private $ajax_actions = ['IWPML_AJAX_Action_Loader', 'IWPML_AJAX_Action'];
        /**
         * @var string[] Resolved by \WPML\Action\Type::is
         */
        private $rest_actions = ['IWPML_REST_Action_Loader', 'IWPML_REST_Action'];
        /**
         * @var string[] Resolved by \WPML\Action\Type::is
         */
        private $cli_actions = ['IWPML_CLI_Action_Loader', 'IWPML_CLI_Action'];
        /**
         * @var string[] Resolved by \WPML\Action\Type::is
         */
        private $dic_actions = ['IWPML_DIC_Action'];
        /** @var array */
        private $implementations;
        /**
         * Info constructor.
         *
         * @param string $class_name The class name of the action or action loader
         */
        public function __construct($class_name)
        {
        }
        /**
         * @param string $type The type of action 'backend', 'frontend', 'ajax', 'rest', 'cli' or 'dic'
         *
         * @return bool
         */
        public function is($type)
        {
        }
        /**
         * @param array $interfaces
         *
         * @return bool
         */
        private function has_implementation($interfaces)
        {
        }
    }
}
namespace WPML\CLI\Core\Commands {
    interface IWPML_Command_Factory
    {
        /**
         * @return ICommand
         */
        public function create();
    }
    interface IWPML_Core extends \WPML\CLI\Core\Commands\IWPML_Command_Factory
    {
    }
    class ClearCacheFactory implements \WPML\CLI\Core\Commands\IWPML_Core
    {
        /**
         * @return ClearCache
         * @throws \WPML\Auryn\InjectionException If it's not possible to create the instance (see \WPML\Auryn\Injector::make).
         */
        public function create()
        {
        }
    }
}
namespace WPML\CLI\Core {
    class BootStrap
    {
        const MAIN_COMMAND = 'wpml';
        /**
         * @throws \Exception The exception thrown by \WP_CLI::add_command.
         */
        public function init()
        {
        }
        /**
         * @param string   $command_text The subcommand.
         * @param callable $command      Command implementation as a class, function or closure.
         *
         * @throws \Exception The exception thrown by \WP_CLI::add_command.
         */
        private function add_command($command_text, $command)
        {
        }
        /**
         * @param ICommand $command Command implementation as a class, function or closure.
         *
         * @return string The sub command prefixed by the top-level command (all trimmed).
         */
        private function getFullCommand($command)
        {
        }
    }
}
namespace WPML\CLI\Core\Commands {
    interface ICommand
    {
        /**
         * @param string[]             $args
         * @param array<string,string> $assoc_args
         *
         * @return mixed
         */
        public function __invoke($args, $assoc_args);
        /**
         * @return string
         */
        public function get_command();
    }
    class ClearCache implements \WPML\CLI\Core\Commands\ICommand
    {
        /**
         * @var \WPML_Cache_Directory
         */
        private $cache_directory;
        public function __construct(\WPML_Cache_Directory $cache_directory)
        {
        }
        /**
         * Clear the WPML cache
         *
         * ## EXAMPLE
         *
         *     wp wpml clear-cache
         *
         * @when wpml_loaded
         *
         * {@inheritDoc}
         */
        public function __invoke($args, $assoc_args)
        {
        }
        /**
         * @return string
         */
        public function get_command()
        {
        }
    }
}
namespace {
    /**
     * Class WPML_Cookie_Admin_Scripts
     */
    class WPML_Cookie_Admin_Scripts
    {
        public function enqueue()
        {
        }
        public function enqueue_scripts()
        {
        }
    }
    /**
     * Class WPML_Cookie_Admin_UI
     */
    class WPML_Cookie_Admin_UI
    {
        const BOX_TEMPLATE = 'admin-cookie-box.twig';
        const BUTTON_ID = 'js-wpml-store-frontend-cookie';
        /**
         * @var WPML_Twig_Template
         */
        private $template_service;
        /**
         * @var WPML_Cookie_Setting
         */
        private $cookie_setting;
        /**
         * WPML_Cookie_Admin_UI constructor.
         *
         * @param WPML_Twig_Template  $template_service
         * @param WPML_Cookie_Setting $cookie_setting
         */
        public function __construct(\WPML_Twig_Template $template_service, \WPML_Cookie_Setting $cookie_setting)
        {
        }
        public function add_hooks()
        {
        }
        public function render_cookie_box()
        {
        }
        /**
         * @return array
         */
        private function get_model()
        {
        }
    }
    class WPML_Cookie
    {
        /**
         * @param string $name
         * @param string $value
         * @param int $expires
         * @param string $path
         * @param string $domain
         * @param bool $HTTPOnly
         * @param string|null $sameSite
         */
        public function set_cookie($name, $value, $expires, $path, $domain, $HTTPOnly = \false, $sameSite = \null)
        {
        }
        /**
         * @param string $name
         *
         * @return string
         */
        public function get_cookie($name)
        {
        }
        /**
         * simple wrapper for \headers_sent
         *
         * @return bool
         */
        public function headers_sent()
        {
        }
        /**
         * @param string $name
         */
        private function handle_cache_plugins($name)
        {
        }
        private function is_secure_connection()
        {
        }
    }
    /**
     * Class WPML_Cookie_Scripts
     */
    class WPML_Cookie_Scripts
    {
        /**
         * @var string
         */
        private $language_cookie_name;
        /**
         * @var string
         */
        private $current_language;
        /**
         * WPML_Cookie_Scripts constructor.
         *
         * @param string $language_cookie_name
         * @param string $current_language
         */
        public function __construct($language_cookie_name, $current_language)
        {
        }
        public function add_hooks()
        {
        }
        public function enqueue_scripts()
        {
        }
    }
    /**
     * Class WPML_Frontend_Cookie_Setting_Ajax
     */
    class WPML_Cookie_Setting_Ajax
    {
        const NONCE_COOKIE_SETTING = 'wpml-frontend-cookie-setting-nonce';
        const AJAX_RESPONSE_ID = 'icl_ajx_response_cookie';
        const ACTION = 'wpml_update_cookie_setting';
        /**
         * @var WPML_Cookie_Setting
         */
        private $wpml_frontend_cookie_setting;
        /**
         * WPML_Frontend_Cookie_Setting_Ajax constructor.
         *
         * @param WPML_Cookie_Setting $wpml_frontend_cookie_setting
         */
        public function __construct(\WPML_Cookie_Setting $wpml_frontend_cookie_setting)
        {
        }
        public function add_hooks()
        {
        }
        public function update_cookie_setting()
        {
        }
        /**
         * @return bool
         */
        private function is_valid_request()
        {
        }
    }
    /**
     * Class WPML_Frontend_Cookie_Setting
     */
    class WPML_Cookie_Setting
    {
        const COOKIE_SETTING_FIELD = 'store_frontend_cookie';
        /**
         * @var SitePress
         */
        private $sitepress;
        /**
         * WPML_Frontend_Cookie_Setting constructor.
         *
         * @param SitePress $sitepress
         */
        public function __construct(\SitePress $sitepress)
        {
        }
        /**
         * @return bool|mixed
         */
        public function get_setting()
        {
        }
        /**
         * @param mixed $value
         */
        public function set_setting($value)
        {
        }
    }
}
namespace WPML\Container {
    class Container
    {
        /** @var Container $instance */
        private static $instance = null;
        /** @var AurynInjector|null */
        private $injector = null;
        private function __construct()
        {
        }
        /**
         * @return Container
         */
        public static function get_instance()
        {
        }
        /**
         * class names or instances that should be shared.
         * Shared means that only one instance is ever created when calling the make function.
         *
         * @param array $names_or_instances
         *
         * @throws \WPML\Auryn\ConfigException
         */
        public static function share(array $names_or_instances)
        {
        }
        /**
         * This allows to define aliases classes to be used in place of type hints.
         * e.g. [
         *          // generic => specific
         *          'wpdb' => 'QM_DB',
         *      ]
         *
         * @param array $aliases
         *
         * @throws \WPML\Auryn\ConfigException
         */
        public static function alias(array $aliases)
        {
        }
        /**
         * This allows to delegate the object instantiation to a factory.
         * It can be any kind of callable (class or function).
         *
         * @param array $delegated [ $class_name => $instantiator ]
         *
         * @throws \WPML\Auryn\ConfigException
         */
        public static function delegate(array $delegated)
        {
        }
        /**
         * Make returns a new instance otherwise returns a shared instance if the
         * class_name or an instance is set as shared using the share function
         *
         * @param string $class_name
         * @param array  $args
         *
         * @return mixed
         * @throws \WPML\Auryn\InjectionException
         */
        public static function make($class_name, array $args = array())
        {
        }
        /**
         * Invoke the specified callable or class::method string, provisioning dependencies along the way
         *
         * @param mixed $callableOrMethodStr A valid PHP callable or a provisionable ClassName::methodName string
         * @param array $args Optional array specifying params with which to invoke the provisioned callable
         * @throws \WPML\Auryn\InjectionException
         * @return mixed Returns the invocation result returned from calling the generated executable
         */
        public static function execute($callableOrMethodStr, array $args = [])
        {
        }
    }
    class Config
    {
        public static function getSharedInstances()
        {
        }
        public static function getSharedClasses()
        {
        }
        public static function getAliases()
        {
        }
        public static function getDelegated()
        {
        }
    }
}
namespace WPML\TM\Container {
    class Config
    {
        public static function getDelegated()
        {
        }
        public static function getSharedClasses()
        {
        }
    }
}
namespace {
    /**
     * Class WPML_TM_API_Hook_Links
     *
     * This class provides various links by hooks
     */
    class WPML_TM_API_Hook_Links implements \IWPML_Action
    {
        public function add_hooks()
        {
        }
        public function get_post_translation_settings_link($link)
        {
        }
    }
    /**
     * Class WPML_API_Hook_Copy_Post_To_Language
     */
    class WPML_API_Hook_Copy_Post_To_Language implements \IWPML_Action
    {
        /** @var WPML_Post_Duplication $post_duplication */
        private $post_duplication;
        public function __construct(\WPML_Post_Duplication $post_duplication)
        {
        }
        public function add_hooks()
        {
        }
        public function copy_post_to_language($post_id, $target_language, $mark_as_duplicate)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_API_Hook_Translation_Element implements \IWPML_Action
    {
        private $flags_factory;
        private $sitepress;
        private $translation_element_factory;
        /**
         * WPML_API_Hook_Post constructor.
         *
         * @param SitePress                        $sitepress
         * @param WPML_Translation_Element_Factory $translation_element_factory
         * @param WPML_Flags_Factory               $flags_factory
         */
        public function __construct(\SitePress $sitepress, \WPML_Translation_Element_Factory $translation_element_factory, \WPML_Flags_Factory $flags_factory)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param string $default
         * @param int    $element_id
         * @param string $element_type any of `WPML_Translation_Element_Factory::ELEMENT_TYPE_POST`, `WPML_Translation_Element_Factory::ELEMENT_TYPE_TERM`, `WPML_Translation_Element_Factory::ELEMENT_TYPE_MENU`
         *
         * @return string
         */
        public function get_post_language_flag_url($default, $element_id, $element_type = \WPML_Translation_Element_Factory::ELEMENT_TYPE_POST)
        {
        }
    }
    class WPML_API_Hook_Permalink implements \IWPML_Action
    {
        /** @var WPML_URL_Converter $url_converter */
        private $url_converter;
        /** @var IWPML_Resolve_Object_Url $absolute_resolver */
        private $absolute_resolver;
        public function __construct(\WPML_URL_Converter $url_converter, \IWPML_Resolve_Object_Url $absolute_resolver)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param string      $url
         * @param null|string $lang
         * @param bool        $absolute_url If `true`, WPML will try to resolve the object behind the URL
         *                                  and try to find the matching translation's URL.
         *                                  WARNING: This is a heavy process which could lead to performance hit.
         *
         * @return string
         */
        public function wpml_permalink_filter($url, $lang = \null, $absolute_url = \false)
        {
        }
    }
    class WPML_API_Hooks_Factory implements \IWPML_Backend_Action_Loader, \IWPML_Frontend_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_TM_API_Hooks_Factory implements \IWPML_Backend_Action_Loader, \IWPML_Frontend_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_API_Hook_Translation_Mode implements \IWPML_Action
    {
        const OPTION_KEY = 'custom_posts_sync_option';
        /** Allowed modes */
        const DO_NOT_TRANSLATE = 'do_not_translate';
        const TRANSLATE = 'translate';
        const DISPLAY_AS_TRANSLATED = 'display_as_translated';
        /** @var WPML_Settings_Helper $settings */
        private $settings;
        public function __construct(\WPML_Settings_Helper $settings)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param string $post_type
         * @param string $translation_mode any of
         *                                 `WPML_API_Hook_Translation_Mode::DO_NOT_TRANSLATE`,
         *                                 `WPML_API_Hook_Translation_Mode::TRANSLATE`,
         *                                 `WPML_API_Hook_Translation_Mode::DISPLAY_AS_TRANSLATED`
         */
        public function set_mode_for_post_type($post_type, $translation_mode)
        {
        }
    }
    class WPML_API_Hook_Sync_Custom_Fields implements \IWPML_Action
    {
        /** @var WPML_Sync_Custom_Fields $sync_custom_fields */
        private $sync_custom_fields;
        public function __construct(\WPML_Sync_Custom_Fields $sync_custom_fields)
        {
        }
        public function add_hooks()
        {
        }
        public function sync_custom_field($post_id, $custom_field_name)
        {
        }
        public function sync_all_custom_fields($post_id)
        {
        }
    }
    /**
     * Class WPML_API_Hook_Links
     *
     * This class provides various links by hooks
     */
    class WPML_API_Hook_Links implements \IWPML_Action
    {
        const POST_TRANSLATION_SETTINGS_PRIORITY = 10;
        const LINK_TO_TRANSLATION_PRIORITY = 9;
        /** @var WPML_Post_Status_Display_Factory */
        private $post_status_display_factory;
        public function __construct(\WPML_Post_Status_Display_Factory $post_status_display_factory)
        {
        }
        public function add_hooks()
        {
        }
        public function get_post_translation_settings_link($link)
        {
        }
        public function get_link_to_edit_translation($link, $post_id, $lang)
        {
        }
    }
    class WPML_TM_REST_TP_XLIFF_Factory extends \WPML_REST_Factory_Loader
    {
        public function create()
        {
        }
    }
    class WPML_TM_REST_TP_XLIFF extends \WPML_REST_Base
    {
        /** @var WPML_TP_Translations_Repository */
        private $translation_repository;
        /** @var WPML_TM_Rest_Download_File */
        private $download_file;
        public function __construct(\WPML_TP_Translations_Repository $translation_repository, \WPML_TM_Rest_Download_File $download_file)
        {
        }
        public function add_hooks()
        {
        }
        public function register_routes()
        {
        }
        /**
         * @param WP_REST_Request $request
         *
         * @return array|string|WP_Error
         */
        public function get_job_translations_from_tp(\WP_REST_Request $request)
        {
        }
        /**
         * @param WP_REST_Request $request
         *
         * @return string
         */
        private function download_job_translation(\WP_REST_Request $request)
        {
        }
        public function get_allowed_capabilities(\WP_REST_Request $request)
        {
        }
        public function validate_job_type($value)
        {
        }
    }
}
namespace WPML\TM\ATE {
    class Proxy extends \WPML_REST_Base
    {
        /**
         * @var \WPML_TM_ATE_AMS_Endpoints
         */
        private $endpoints;
        public function __construct(\WPML_TM_ATE_AMS_Endpoints $endpoints)
        {
        }
        public function add_hooks()
        {
        }
        public function register_routes()
        {
        }
        /**
         * @param \WP_REST_Request $request
         *
         * @return array
         */
        private function get_args(\WP_REST_Request $request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         *
         * @return true|\WP_Error
         */
        private function validate_request(\WP_REST_Request $request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         */
        public function proxy(\WP_REST_Request $request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         *
         * @return string[]|string
         */
        public function get_allowed_capabilities(\WP_REST_Request $request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         *
         * @return array
         */
        private function get_request_params(\WP_REST_Request $request)
        {
        }
        private function break_the_default_response_flow()
        {
        }
    }
}
namespace {
    /**
     * @author OnTheGo Systems
     */
    class WPML_REST_Extend_Args_Factory implements \IWPML_REST_Action_Loader
    {
        /**
         * @return IWPML_Action|IWPML_Action[]|null
         */
        public function create()
        {
        }
    }
    class WPML_TM_REST_Batch_Sync_Factory extends \WPML_REST_Factory_Loader
    {
        /**
         * @return WPML_TM_REST_Batch_Sync
         */
        public function create()
        {
        }
    }
    class WPML_TM_Rest_Jobs_Package_Helper_Factory
    {
        /** @var WPML_Package_Helper */
        private $package_helper = \false;
        /**
         * @return null|WPML_Package_Helper
         */
        public function create()
        {
        }
    }
    class WPML_TM_Rest_Job_Progress
    {
        /** @var wpdb */
        private $wpdb;
        public function __construct()
        {
        }
        /**
         * @param WPML_TM_Job_Entity $job
         *
         * @return string
         */
        public function get(\WPML_TM_Job_Entity $job)
        {
        }
    }
    class WPML_TM_Rest_Job_Translator_Name
    {
        public function get($translator_id)
        {
        }
    }
    class WPML_TM_Rest_Jobs_View_Model
    {
        /** @var WPML_TM_Rest_Jobs_Translation_Service */
        private $translation_service;
        /** @var WPML_TM_Rest_Jobs_Element_Info */
        private $element_info;
        /** @var WPML_TM_Rest_Jobs_Language_Names */
        private $language_names;
        /** @var WPML_TM_Rest_Job_Translator_Name */
        private $translator_name;
        /** @var WPML_TM_Rest_Job_Progress */
        private $progress;
        /**
         * @param WPML_TM_Rest_Jobs_Translation_Service $translation_service
         * @param WPML_TM_Rest_Jobs_Element_Info        $element_info
         * @param SitePress                             $sitepress
         */
        public function __construct(\WPML_TM_Rest_Jobs_Translation_Service $translation_service, \WPML_TM_Rest_Jobs_Element_Info $element_info, \WPML_TM_Rest_Jobs_Language_Names $language_names, \WPML_TM_Rest_Job_Translator_Name $translator_name, \WPML_TM_Rest_Job_Progress $progress)
        {
        }
        /**
         * @param WPML_TM_Jobs_Collection $jobs
         * @param int                     $total_jobs_count
         *
         * @return array
         */
        public function build(\WPML_TM_Jobs_Collection $jobs, $total_jobs_count)
        {
        }
        /**
         * @param WPML_TM_Job_Entity $job
         *
         * @return array
         */
        private function map_job(\WPML_TM_Job_Entity $job)
        {
        }
    }
    class WPML_TM_Rest_Jobs_Translation_Service
    {
        /** @var WPML_WP_Cache */
        private $cache;
        /**
         * @param WPML_WP_Cache $cache
         */
        public function __construct(\WPML_WP_Cache $cache)
        {
        }
        /**
         * @param string|int $service_id
         *
         * @return string
         */
        public function get_name($service_id)
        {
        }
        private function get_translation_service($service_id)
        {
        }
        /**
         * @return WPML_TM_Rest_Jobs_Translation_Service
         */
        public static function create()
        {
        }
    }
    class WPML_TM_Rest_Jobs_Language_Names
    {
        /** @var SitePress */
        private $sitepress;
        /** @var array */
        private $active_languages;
        /**
         * @param SitePress $sitepress
         */
        public function __construct(\SitePress $sitepress)
        {
        }
        /**
         * @param string $code
         *
         * @return string
         */
        public function get($code)
        {
        }
        /**
         * @return array
         */
        public function get_active_languages()
        {
        }
    }
    class WPML_TM_Rest_Jobs_Columns
    {
        /**
         * @return array
         */
        public static function get_columns()
        {
        }
        /**
         * @return array
         */
        public static function get_sortable()
        {
        }
    }
    class WPML_TM_Rest_Jobs_Criteria_Parser
    {
        /**
         * @param WP_REST_Request $request
         *
         * @return WPML_TM_Jobs_Search_Params
         */
        public function build_criteria(\WP_REST_Request $request)
        {
        }
        /**
         * @param WPML_TM_Jobs_Search_Params $params
         * @param WP_REST_Request            $request
         *
         * @return WPML_TM_Jobs_Search_Params
         */
        private function set_scope(\WPML_TM_Jobs_Search_Params $params, \WP_REST_Request $request)
        {
        }
        /**
         * @param WPML_TM_Jobs_Search_Params $params
         * @param WP_REST_Request            $request
         *
         * @return WPML_TM_Jobs_Search_Params
         */
        private function set_pagination(\WPML_TM_Jobs_Search_Params $params, \WP_REST_Request $request)
        {
        }
        private function set_filters(\WPML_TM_Jobs_Search_Params $params, \WP_REST_Request $request)
        {
        }
        private function set_sorting(\WPML_TM_Jobs_Search_Params $params, \WP_REST_Request $request)
        {
        }
        /**
         * @param array $request_param
         *
         * @return WPML_TM_Jobs_Sorting_Param[]
         */
        private function build_sorting_params(array $request_param)
        {
        }
    }
    class WPML_TM_Rest_Jobs_Element_Info
    {
        /** @var WPML_TM_Rest_Jobs_Package_Helper_Factory */
        private $package_helper_factory;
        /**
         * @param WPML_TM_Rest_Jobs_Package_Helper_Factory $package_helper_factory
         */
        public function __construct(\WPML_TM_Rest_Jobs_Package_Helper_Factory $package_helper_factory)
        {
        }
        /**
         * @param  WPML_TM_Job_Entity $job
         *
         * @return array
         */
        public function get(\WPML_TM_Job_Entity $job)
        {
        }
        /**
         * @param int $id
         *
         * @return array
         */
        private function get_for_post($id)
        {
        }
        /**
         * @param int $id
         *
         * @return array
         */
        private function get_for_package($id)
        {
        }
        /**
         * @param string $title
         *
         * @return array
         */
        private function get_for_title($title)
        {
        }
    }
}
namespace WPML\Rest {
    class Adaptor extends \WPML_REST_Base
    {
        /** @var ITarget $target */
        private $target;
        public function set_target(\WPML\Rest\ITarget $target)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param WP_REST_Request $request
         *
         * @return array
         */
        public function get_allowed_capabilities(\WP_REST_Request $request)
        {
        }
    }
}
namespace WPML\REST\XMLConfig\Custom {
    class Factory extends \WPML_REST_Factory_Loader
    {
        public function create()
        {
        }
    }
    class Actions extends \WPML_REST_Base
    {
        /** @var array<string> */
        private $capabilities = ['manage_options'];
        /**
         * @var \WPML_Custom_XML
         */
        private $custom_xml;
        /**
         * @var \WPML_XML_Config_Validate
         */
        private $validate;
        public function __construct(\WPML_Custom_XML $custom_xml, \WPML_XML_Config_Validate $validate)
        {
        }
        function add_hooks()
        {
        }
        function register_routes()
        {
        }
        /**
         * REST
         *
         * @param \WP_REST_Request $request
         *
         * @return string
         */
        public function update_content(\WP_REST_Request $request)
        {
        }
        /**
         * REST
         *
         * @param \WP_REST_Request $request
         *
         * @return \LibXMLError[]
         */
        public function validate_content(\WP_REST_Request $request)
        {
        }
        /**
         * REST
         */
        public function read_content()
        {
        }
        function get_allowed_capabilities(\WP_REST_Request $request)
        {
        }
    }
}
namespace {
    /**
     * Class WPML_TM_REST_Jobs
     */
    class WPML_TM_REST_Jobs extends \WPML_REST_Base
    {
        const CAPABILITY = 'translate';
        /**
         * Jobs repository
         *
         * @var WPML_TM_Jobs_Repository
         */
        private $jobs_repository;
        /**
         * Rest jobs criteria parser
         *
         * @var WPML_TM_Rest_Jobs_Criteria_Parser
         */
        private $criteria_parser;
        /**
         * View model
         *
         * @var WPML_TM_Rest_Jobs_View_Model
         */
        private $view_model;
        /**
         * Update jobs synchronisation
         *
         * @var WPML_TP_Sync_Update_Job
         */
        private $update_jobs;
        /**
         * Last picked up jobs
         *
         * @var WPML_TM_Last_Picked_Up $wpml_tm_last_picked_up
         */
        private $wpml_tm_last_picked_up;
        /**
         * WPML_TM_REST_Jobs constructor.
         *
         * @param WPML_TM_Jobs_Repository           $jobs_repository        Jobs repository.
         * @param WPML_TM_Rest_Jobs_Criteria_Parser $criteria_parser        Rest jobs criteria parser.
         * @param WPML_TM_Rest_Jobs_View_Model      $view_model             View model.
         * @param WPML_TP_Sync_Update_Job           $update_jobs            Update jobs synchronisation.
         * @param WPML_TM_Last_Picked_Up            $wpml_tm_last_picked_up Last picked up jobs.
         */
        public function __construct(\WPML_TM_Jobs_Repository $jobs_repository, \WPML_TM_Rest_Jobs_Criteria_Parser $criteria_parser, \WPML_TM_Rest_Jobs_View_Model $view_model, \WPML_TP_Sync_Update_Job $update_jobs, \WPML_TM_Last_Picked_Up $wpml_tm_last_picked_up)
        {
        }
        /**
         * Add hooks
         */
        public function add_hooks()
        {
        }
        /**
         * Register routes
         */
        public function register_routes()
        {
        }
        /**
         * Get jobs
         *
         * @param WP_REST_Request $request REST request.
         *
         * @return array|WP_Error
         */
        public function get_jobs(\WP_REST_Request $request)
        {
        }
        /**
         * Assign job.
         *
         * @param WP_REST_Request $request REST request.
         *
         * @return array
         * @throws \InvalidArgumentException Exception on error.
         */
        public function assign_job(\WP_REST_Request $request)
        {
        }
        /**
         * Cancel job
         *
         * @param WP_REST_Request $request REST request.
         *
         * @return array|WP_Error
         */
        public function cancel_jobs(\WP_REST_Request $request)
        {
        }
        /**
         * Get allowed capabilities
         *
         * @param WP_REST_Request $request REST request.
         *
         * @return array|string
         */
        public function get_allowed_capabilities(\WP_REST_Request $request)
        {
        }
        /**
         * Validate sorting
         *
         * @param mixed $sorting Sorting parameters.
         *
         * @return bool
         */
        public function validate_sorting($sorting)
        {
        }
        /**
         * Validate job
         *
         * @param mixed $job Job.
         *
         * @return bool
         */
        private function validate_job($job)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     *
     * The following method can be used as REST arguments sanitation callback
     */
    class WPML_REST_Arguments_Sanitation
    {
        /**
         * @param mixed $value
         *
         * @return bool
         */
        static function boolean($value)
        {
        }
        /**
         *@param mixed $value
         *
         * @return bool
         */
        static function integer($value)
        {
        }
        /**
         *@param mixed $value
         *
         * @return bool
         */
        static function float($value)
        {
        }
        /**
         *@param mixed $value
         *
         * @return bool
         */
        static function string($value)
        {
        }
        /**
         *@param mixed $value
         *
         * @return bool
         */
        static function url($value)
        {
        }
        /**
         *@param mixed $value
         *
         * @return bool
         */
        static function email($value)
        {
        }
        /**
         *@param mixed $value
         *
         * @return array
         */
        static function array_of_integers($value)
        {
        }
    }
    class WPML_TM_REST_Batch_Sync extends \WPML_REST_Base
    {
        /** @var WPML_TP_Batch_Sync_API */
        private $batch_sync_api;
        public function __construct(\WPML_TP_Batch_Sync_API $batch_sync_api)
        {
        }
        public function add_hooks()
        {
        }
        public function register_routes()
        {
        }
        public function init(\WP_REST_Request $request)
        {
        }
        public function check_progress()
        {
        }
        public function get_allowed_capabilities(\WP_REST_Request $request)
        {
        }
        public function validate_batch_ids($batches)
        {
        }
        public function sanitize_batch_ids($batches)
        {
        }
    }
    class WPML_TM_REST_Apply_TP_Translation extends \WPML_REST_Base
    {
        /** @var WPML_TP_Apply_Translations */
        private $apply_translations;
        public function __construct(\WPML_TP_Apply_Translations $apply_translations)
        {
        }
        public function add_hooks()
        {
        }
        public function register_routes()
        {
        }
        /**
         * @return WP_Error|int|array
         */
        public function apply_translations(\WP_REST_Request $request)
        {
        }
        public function get_allowed_capabilities(\WP_REST_Request $request)
        {
        }
        public function map_jobs_to_array(\WPML_TM_Job_Entity $job)
        {
        }
        /**
         * @param array $job
         *
         * @return bool
         */
        private function validate_job(array $job)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_REST_Extend_Args implements \IWPML_Action
    {
        const REST_LANGUAGE_ARGUMENT = 'wpml_language';
        /** @var \SitePress $sitepress */
        private $sitepress;
        /** @var string $current_language_backup */
        private $current_language_backup;
        public function __construct(\SitePress $sitepress)
        {
        }
        function add_hooks()
        {
        }
        /**
         * Adds the `wpml_language` argument (optional) to all REST calls with arguments.
         *
         * @param array $endpoints
         *
         * @return array
         */
        public function rest_endpoints(array $endpoints)
        {
        }
        /**
         * If `wpml_language` is provided, backups the current language, then switch to the provided one.
         *
         * @param \WP_REST_Response|array|mixed $response
         * @param \WP_REST_Server|array|mixed   $rest_server
         * @param \WP_REST_Request              $request
         *
         * @return mixed
         */
        public function rest_request_before_callbacks($response, $rest_server, $request)
        {
        }
        /**
         * Restore the backup language, if set.
         *
         * @param \WP_REST_Response|array|mixed $response
         *
         * @return mixed
         */
        public function rest_request_after_callbacks($response)
        {
        }
        /**
         * @return array
         */
        private function get_active_language_codes()
        {
        }
    }
}
namespace WPML\TM\ATE\Factories {
    class Proxy extends \WPML_REST_Factory_Loader
    {
        /**
         * @return \WPML\TM\ATE\Proxy
         */
        public function create()
        {
        }
    }
}
namespace WPML\TM\REST {
    class FactoryLoader implements \IWPML_REST_Action_Loader, \IWPML_Deferred_Action_Loader
    {
        const REST_API_INIT_ACTION = 'rest_api_init';
        /**
         * @return string
         */
        public function get_load_action()
        {
        }
        public function create()
        {
        }
    }
}
namespace {
    /**
     * @author OnTheGo Systems
     */
    class WPML_Rest
    {
        private $http;
        /**
         * WPML_Rest constructor.
         *
         * @param WP_Http $http
         */
        public function __construct(\WP_Http $http)
        {
        }
        public function is_available()
        {
        }
        public function is_rest_request()
        {
        }
        public function has_registered_routes()
        {
        }
        public function has_discovered_routes()
        {
        }
        private function get_discovered_routes()
        {
        }
        public function get_discovery_url()
        {
        }
    }
    class WPML_TM_Rest_Download_File
    {
        public function send($file_name, $content, $content_type = 'application/x-xliff+xml')
        {
        }
        public function force_wp_rest_server_download($content)
        {
        }
    }
    class WPML_TM_REST_Apply_TP_Translation_Factory extends \WPML_REST_Factory_Loader
    {
        /**
         * @return WPML_TM_REST_Apply_TP_Translation
         */
        public function create()
        {
        }
    }
    class WPML_TM_REST_Jobs_Factory extends \WPML_REST_Factory_Loader
    {
        /**
         * @return WPML_TM_REST_Jobs
         */
        public function create()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     *
     * The following method can be used as REST arguments validation callback
     */
    class WPML_REST_Arguments_Validation
    {
        /**
         *@param mixed $value
         *
         * @return bool
         */
        static function boolean($value)
        {
        }
        /**
         *@param mixed $value
         *
         * @return bool
         */
        static function integer($value)
        {
        }
        /**
         *@param mixed $value
         *
         * @return bool
         */
        static function float($value)
        {
        }
        /**
         *@param mixed $value
         *
         * @return bool
         */
        static function url($value)
        {
        }
        /**
         *@param mixed $value
         *
         * @return bool
         */
        static function email($value)
        {
        }
        /**
         *@param mixed $value
         *
         * @return bool
         */
        static function is_array($value)
        {
        }
        /**
         * @param mixed $value
         *
         * @return bool
         */
        static function date($value)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_ICL_Client
    {
        private $error;
        /** @var WP_Http $http */
        private $http;
        /** @var WPML_WP_API $wp_api */
        private $wp_api;
        private $method = 'GET';
        private $post_data;
        /**
         * WPML_ICL_Client constructor.
         *
         * @param WP_Http     $http
         * @param WPML_WP_API $wp_api
         */
        public function __construct($http, $wp_api)
        {
        }
        function request($request_url)
        {
        }
        public function get_error()
        {
        }
        /**
         * @return array
         */
        private function get_debug_data()
        {
        }
        /**
         * @param string $request_url
         *
         * @return mixed|string
         */
        private function get_adjusted_request_url($request_url)
        {
        }
        private function adjust_post_data()
        {
        }
        /**
         * @param string $method
         */
        public function set_method($method)
        {
        }
        public function set_post_data($post_data)
        {
        }
    }
    /**
     * @package    wpml-core
     * @subpackage wpml-user-language
     */
    class WPML_User_Language_Switcher_UI
    {
        /**
         * @var \WPML_User_Language_Switcher
         */
        private $user_language_switcher;
        /**
         * @var \WPML_User_Language_Switcher_Resources
         */
        private $resources;
        /**
         * WPML_User_Language_Switcher_UI constructor.
         *
         * @param WPML_User_Language_Switcher           $WPML_User_Language_Switcher
         * @param WPML_User_Language_Switcher_Resources $WPML_User_Language_Switcher_Resources
         */
        public function __construct($WPML_User_Language_Switcher, $WPML_User_Language_Switcher_Resources)
        {
        }
        /**
         * @param array<string,mixed> $args
         * @param array<string,mixed> $model
         *
         * @return string
         * @throws \WPML\Core\Twig\Error\LoaderError
         * @throws \WPML\Core\Twig\Error\RuntimeError
         * @throws \WPML\Core\Twig\Error\SyntaxError
         */
        public function language_switcher($args, $model)
        {
        }
        /**
         * @param array<string,mixed> $model
         *
         * @return string
         * @throws \WPML\Core\Twig\Error\LoaderError
         * @throws \WPML\Core\Twig\Error\RuntimeError
         * @throws \WPML\Core\Twig\Error\SyntaxError
         */
        protected function get_view($model)
        {
        }
    }
    /**
     * @package    wpml-core
     * @subpackage wpml-user-language
     */
    class WPML_User_Language_Switcher_Hooks
    {
        private $nonce_name = 'wpml_user_language_switcher';
        /**
         * @var WPML_User_Language_Switcher_UI
         */
        private $user_language_switcher_ui;
        /**
         * @var WPML_User_Language_Switcher
         */
        private $user_language_switcher;
        /**
         * @param WPML_User_Language_Switcher $WPML_User_Language_Switcher
         * @param WPML_User_Language_Switcher_UI $WPML_User_Language_Switcher_UI
         */
        public function __construct(&$WPML_User_Language_Switcher, &$WPML_User_Language_Switcher_UI)
        {
        }
        public function language_switcher_action($args)
        {
        }
        public function language_switcher_form_ajax_callback()
        {
        }
        public function language_switcher_form_ajax()
        {
        }
        private function is_valid_data($nonce, $email)
        {
        }
    }
    /**
     * @package    wpml-core
     * @subpackage wpml-user-language
     */
    class WPML_Language_Code extends \WPML_SP_User
    {
        private $WPML_WP_API;
        function __construct(&$sitepress)
        {
        }
        function sanitize($code)
        {
        }
        function get_from_user_meta($email)
        {
        }
    }
    /**
     * @package wpml-core
     * @subpackage wpml-user-language
     */
    class WPML_Users_Languages
    {
        /**
         * @var WPML_Language_Code
         */
        private $WPML_Language_Code;
        /**
         * @var WPML_WP_API
         */
        private $WPML_WP_API;
        /**
         * @param WPML_Language_Code $WPML_Language_Code
         * @param WPML_WP_API        $WPML_WP_API
         */
        public function __construct(&$WPML_Language_Code, &$WPML_WP_API)
        {
        }
        public function register_hooks()
        {
        }
        public function wpml_user_language_filter($language, $email)
        {
        }
        private function wpml_user_language($language, $email)
        {
        }
        private function get_recipient_language($email)
        {
        }
        private function get_language_from_globals()
        {
        }
        private function get_language_from_tables($email)
        {
        }
        private function get_language_from_fallbacks()
        {
        }
    }
    /**
     * @package    wpml-core
     * @subpackage wpml-user-language
     */
    class WPML_User_Language_Switcher
    {
        /**
         * @var WPML_Language_Code
         */
        private $WPML_Language_Code;
        /**
         * WPML_User_Language_Switcher constructor.
         *
         * @param WPML_Language_Code $WPML_Language_Code
         */
        public function __construct(&$WPML_Language_Code)
        {
        }
        /**
         * @param string $email
         *
         * @return false|mixed|string|null
         */
        private function to_be_selected($email)
        {
        }
        /**
         * @param string $email
         * @param string $language
         *
         * @return bool|int
         */
        public function save_language_user_meta($email, $language)
        {
        }
        /**
         * @param string $language
         *
         * @return false|string|null
         */
        public function sanitize($language)
        {
        }
        /**
         * @param string $email
         *
         * @return array[]
         */
        public function get_model($email)
        {
        }
    }
    /**
     * @package    wpml-core
     * @subpackage wpml-user-language
     */
    class WPML_User_Language
    {
        /** @var  SitePress $sitepress */
        protected $sitepress;
        private $language_changes_history = array();
        private $admin_language_changes_history = array();
        /**
         * @var \wpdb|null
         */
        private $wpdb;
        /**
         * WPML_User_Language constructor.
         *
         * @param SitePress $sitepress
         * @param wpdb|null $wpdb
         */
        public function __construct(\SitePress $sitepress, \wpdb $wpdb = \null)
        {
        }
        public function register_hooks()
        {
        }
        /**
         * @param array $wp_languages
         *
         * @return array
         */
        public function intersect_wpml_wp_languages($wp_languages)
        {
        }
        /**
         * @param string $email
         */
        public function switch_language_for_email_action($email)
        {
        }
        /**
         * @param string $email
         */
        private function switch_language_for_email($email)
        {
        }
        public function restore_language_from_email_action()
        {
        }
        private function wpml_restore_language_from_email()
        {
        }
        /**
         * @param int $user_id
         */
        public function sync_admin_user_language_action($user_id)
        {
        }
        public function sync_default_admin_user_languages()
        {
        }
        /**
         * @param int $user_id
         */
        private function sync_admin_user_language($user_id)
        {
        }
        /**
         * @param string $wp_locale
         *
         * @return null|string
         */
        private function select_language_code_from_locale($wp_locale)
        {
        }
        private function user_needs_sync_admin_lang()
        {
        }
        private function set_language_cookie($user_language)
        {
        }
        /**
         * @param int $user_id
         *
         * @return mixed
         */
        private function user_admin_language_for_edit($user_id)
        {
        }
        /**
         * @param string $lang
         */
        public function update_user_lang_on_cookie_update($lang)
        {
        }
        private function is_editing_current_profile()
        {
        }
        private function is_editing_other_profile()
        {
        }
        public function update_user_lang_on_site_setup()
        {
        }
        public function update_user_lang_from_login($username, \WP_User $user)
        {
        }
        public function add_how_to_set_notice()
        {
        }
        public static function getNotice()
        {
        }
        public function show_ui_to_enable_login_translation()
        {
        }
    }
    /**
     * @package    wpml-core
     * @subpackage wpml-user-language
     */
    class WPML_User_Language_Switcher_Resources
    {
        private $nonce_name = 'wpml_user_language_switcher';
        public function __construct()
        {
        }
        /**
         * @param array<string,mixed> $data
         */
        public function enqueue_scripts($data)
        {
        }
    }
    class WPML_User_Admin_Language
    {
        const CACHE_GROUP = 'get_user_admin_language';
        /** @var SitePress */
        private $sitepress;
        public function __construct(\SitePress $sitepress)
        {
        }
        /**
         * @param int|string $user_id
         * @param bool       $reload
         *
         * @return bool|mixed|null|string
         */
        public function get($user_id, $reload = \false)
        {
        }
        /**
         * @param int $user_id
         *
         * @return null|false|string
         */
        private function get_from_user_settings($user_id)
        {
        }
        /**
         * @return string
         */
        private function get_from_global_settings()
        {
        }
    }
    /**
     * @package wpml-core
     * @subpackage wpml-user-language
     */
    class WPML_Users_Languages_Dependencies
    {
        public $WPML_User_Language_Switcher_Hooks;
        private $WPML_User_Language_Switcher_Resources;
        private $WPML_User_Language_Switcher_UI;
        public $WPML_Users_Languages;
        public $WPML_User_Language;
        private $WPML_User_Language_Switcher;
        private $WPML_Language_Code;
        private $WPML_WP_API;
        private $WPML_Upgrade_Admin_Users_Languages;
        function __construct(&$sitepress)
        {
        }
    }
    class WPML_TM_Post_Target_Lang_Filter extends \WPML_TM_Record_User
    {
        /** @var  WPML_TM_Translation_Status */
        private $tm_status;
        /** @var  WPML_Post_Translation $post_translations */
        private $post_translations;
        public function __construct(&$tm_records, &$tm_status, &$post_translations)
        {
        }
        /**
         * @param string[] $allowed_langs
         * @param int      $element_id
         * @param string   $element_type_prefix
         *
         * @return string[]
         */
        public function filter_target_langs($allowed_langs, $element_id, $element_type_prefix)
        {
        }
    }
    class WPML_TM_Translation_Status
    {
        /** @var WPML_TM_Records $tm_records */
        protected $tm_records;
        private $element_id_cache;
        private $wpml_cache;
        public function __construct(\WPML_TM_Records $tm_records)
        {
        }
        public function init()
        {
        }
        public function filter_translation_status($status, $trid, $target_lang_code)
        {
        }
        public function reload()
        {
        }
        public function is_in_active_job($element_id, $target_lang_code, $element_type_prefix, $return_status = \false)
        {
        }
        private function is_in_basket($element_id, $lang, $element_type_prefix)
        {
        }
        private function get_element_ids($trid)
        {
        }
    }
    class WPML_TM_Translation_Status_Display
    {
        private $statuses = array();
        private $stats_preloaded = \false;
        /**
         * @var WPML_Post_Status
         */
        private $status_helper;
        /**
         * @var WPML_Translation_Job_Factory
         */
        private $job_factory;
        /**
         * @var WPML_TM_API
         */
        protected $tm_api;
        /**
         * @var WPML_Post_Translation
         */
        private $post_translations;
        /**
         * @var SitePress
         */
        protected $sitepress;
        private $original_links = array();
        private $tm_editor_links = array();
        /**
         * @var \wpdb
         */
        private $wpdb;
        /**
         * WPML_TM_Translation_Status_Display constructor.
         *
         * @param wpdb $wpdb
         * @param SitePress $sitepress
         * @param WPML_Post_Status $status_helper
         * @param WPML_Translation_Job_Factory $job_factory
         * @param WPML_TM_API $tm_api
         */
        public function __construct(\wpdb $wpdb, \SitePress $sitepress, \WPML_Post_Status $status_helper, \WPML_Translation_Job_Factory $job_factory, \WPML_TM_API $tm_api)
        {
        }
        public function init()
        {
        }
        private function preload_stats()
        {
        }
        private function load_stats($trids)
        {
        }
        public function filter_status_css_class($css_class, $post_id, $lang, $trid)
        {
        }
        private function get_post_status($post_id)
        {
        }
        public function filter_status_text($text, $original_post_id, $lang, $trid)
        {
        }
        /**
         * @param string $link
         * @param int $post_id
         * @param string $lang
         * @param int $trid
         *
         * @return string
         */
        public function filter_status_link($link, $post_id, $lang, $trid)
        {
        }
        /**
         * @param string $html
         * @param int $post_id
         * @param string $lang
         * @param int $trid
         *
         * @return string
         */
        public function add_links_data_attributes($html, $post_id, $lang, $trid)
        {
        }
        private function get_link_for_new_job($post_id, $trid, $lang, $source_lang_code)
        {
        }
        public static function get_link_for_existing_job($job_id)
        {
        }
        private static function get_tm_editor_base_url()
        {
        }
        private static function get_return_url()
        {
        }
        /**
         * @param string $lang_to
         * @param string $lang_from
         * @param int $post_id
         *
         * @return bool
         */
        protected function is_lang_pair_allowed($lang_to, $lang_from = \null, $post_id = 0)
        {
        }
        protected function is_current_user_admin()
        {
        }
        /**
         * @param int $trid
         *
         * @todo make this into a proper active record user
         *
         */
        private function maybe_load_stats($trid)
        {
        }
        private function is_remote($trid, $lang)
        {
        }
        private function is_in_progress($trid, $lang)
        {
        }
        private function it_needs_retry($trid, $lang)
        {
        }
        private function is_in_basket($trid, $lang)
        {
        }
        /**
         * @param int $postId
         * @param string $language
         *
         * @return bool
         */
        private function isTranslateEverythingInProgress($postId, $language)
        {
        }
        private function shouldAutoTranslate($postId, $targetLang)
        {
        }
    }
    class WPML_Config_Update_Integrator
    {
        /** @var WPML_Config_Update_Log */
        private $log;
        /** @var WPML_Config_Update */
        private $worker;
        /**
         * @param WPML_Log                $log
         * @param WPML_Config_Update|null $worker
         */
        public function __construct(\WPML_Log $log, \WPML_Config_Update $worker = \null)
        {
        }
        /**
         * @return WPML_Config_Update
         */
        public function get_worker()
        {
        }
        /**
         * @param WPML_Config_Update $worker
         */
        public function set_worker(\WPML_Config_Update $worker)
        {
        }
        public function add_hooks()
        {
        }
        public function handle_requests()
        {
        }
        public function update_event()
        {
        }
        public function upgrader_process_complete_event()
        {
        }
        public function update_event_ajax()
        {
        }
        public function update_event_cron()
        {
        }
    }
}
namespace WPML {
    class DefaultCapabilities
    {
        public static function get()
        {
        }
    }
    class Roles implements \IWPML_Backend_Action, \IWPML_AJAX_Action
    {
        public function add_hooks()
        {
        }
        public static function remove_caps($userId, $role, $oldRoles)
        {
        }
    }
}
namespace {
    class WPML_Manage_Translations_Role
    {
        const CAPABILITY = 'manage_translations';
    }
    class WPML_Translator_Role
    {
        const CAPABILITY = 'translate';
    }
    /**
     * WPML_File class file.
     *
     * @package wpml-core
     */
    /**
     * Class WPML_File
     */
    class WPML_File
    {
        /**
         * WPML WP API instance.
         *
         * @var WPML_WP_API $wp_api
         */
        private $wp_api;
        /**
         * WP_Filesystem_Direct instance.
         *
         * @var WP_Filesystem_Direct
         */
        private $filesystem;
        /**
         * WPML_File constructor.
         *
         * @param WPML_WP_API|null          $wp_api     WPML WP API instance.
         * @param WP_Filesystem_Direct|null $filesystem WP_Filesystem_Direct instance.
         */
        public function __construct(\WPML_WP_API $wp_api = \null, \WP_Filesystem_Direct $filesystem = \null)
        {
        }
        /**
         * Fix directory separator if backslash is used.
         *
         * @param string $path Path to fix.
         *
         * @return string
         */
        public function fix_dir_separator($path)
        {
        }
        /**
         * Get uri from file path.
         *
         * @param string $path File path.
         *
         * @return string
         */
        public function get_uri_from_path($path)
        {
        }
        /**
         * Recursive function to pop a folder array.
         *
         * @param int      $times
         * @param string[] $folder_array
         * @return string[]
         */
        private function pop_folder_array($times, $folder_array)
        {
        }
        /**
         * Get path relative to ABSPATH.
         *
         * @param string $path File path.
         *
         * @return string
         */
        public function get_relative_path($path)
        {
        }
        /**
         * Get full file path.
         *
         * @param string $path File path.
         *
         * @return string
         */
        public function get_full_path($path)
        {
        }
        /**
         * Check if file exists.
         *
         * @param string $path File path.
         *
         * @return bool
         */
        public function file_exists($path)
        {
        }
        /**
         * Get file modification time.
         *
         * @param string $path File path.
         *
         * @return int
         */
        public function get_file_modified_timestamp($path)
        {
        }
    }
    class WPML_REST_Posts_Hooks implements \IWPML_Action
    {
        /** @var SitePress $sitepress */
        private $sitepress;
        /** @var WPML_Term_Translation $term_translations */
        private $term_translations;
        public function __construct(\SitePress $sitepress, \WPML_Term_Translation $term_translations)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param WP_REST_Response $response The response object.
         * @param WP_Post          $post     Post object.
         *
         * @return WP_REST_Response
         */
        public function prepare_post($response, $post)
        {
        }
        /**
         * @param WP_REST_Response $response The response object.
         * @param WP_Post          $post     Post object.
         *
         * @return WP_REST_Response
         */
        private function preset_terms_in_new_translation($response, $post)
        {
        }
        /**
         * @param array    $terms
         * @param stdClass $tax
         * @param array    $translatable_taxs
         * @param string   $current_lang
         *
         * @return array
         */
        private function get_translated_term_ids(array $terms, $tax, array $translatable_taxs, $current_lang)
        {
        }
        /**
         * @param WP_REST_Response $response The response object.
         * @param WP_Post          $post     Post object.
         *
         * @return WP_REST_Response
         */
        private function adjust_sample_links($response, $post)
        {
        }
        /**
         * @param WP_HTTP_Response|WP_Error $response Result to send to the client. Usually a WP_REST_Response or WP_Error.
         * @param array                     $handler  Route handler used for the request.
         * @param WP_REST_Request           $request  Request used to generate the response.
         *
         * @return WP_HTTP_Response|WP_Error
         */
        public function reload_wpml_post_translation($response, array $handler, \WP_REST_Request $request)
        {
        }
        private function is_saving_reusable_block(\WP_REST_Request $request)
        {
        }
    }
    class WPML_REST_Posts_Hooks_Factory implements \IWPML_Deferred_Action_Loader, \IWPML_Backend_Action_Loader, \IWPML_REST_Action_Loader
    {
        public function get_load_action()
        {
        }
        public function create()
        {
        }
    }
    class WPML_WP_Comments
    {
        const LANG_CODE_FIELD = 'wpml_language_code';
        /**
         * @var SitePress
         */
        private $sitepress;
        /**
         * WPML_WP_Comments constructor.
         *
         * @param SitePress $sitepress
         */
        public function __construct(\SitePress $sitepress)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @return mixed
         */
        public function add_wpml_language_field($comment_field)
        {
        }
    }
    class WPML_Post_Edit_Terms_Hooks implements \IWPML_Action
    {
        const AFTER_POST_DATA_SANITIZED_ACTION = 'init';
        /** @var IWPML_Current_Language $language */
        private $language;
        /** @var wpdb $wpdb */
        private $wpdb;
        public function __construct(\IWPML_Current_Language $current_language, \wpdb $wpdb)
        {
        }
        public function add_hooks()
        {
        }
        public function set_tags_input_with_ids()
        {
        }
        /**
         * @return array
         */
        public function get_tags_from_tax_input()
        {
        }
    }
    class WPML_Pre_Option_Page extends \WPML_WPDB_And_SP_User
    {
        const CACHE_GROUP = 'wpml_pre_option_page';
        private $switched;
        private $lang;
        public function __construct(&$wpdb, &$sitepress, $switched, $lang)
        {
        }
        public function get($type, $from_language = \null)
        {
        }
        public static function clear_cache()
        {
        }
        function fix_trashed_front_or_posts_page_settings($post_id)
        {
        }
    }
    class WPML_Post_Edit_Terms_Hooks_Factory implements \IWPML_Backend_Action_Loader
    {
        public function create()
        {
        }
        private function is_saving_post_data_with_terms()
        {
        }
    }
}
namespace WPML\PostTranslation\SpecialPage {
    class Hooks implements \IWPML_Backend_Action
    {
        public function add_hooks()
        {
        }
        public function deleteCacheOnSettingPage(\WP_Screen $currentScreen)
        {
        }
    }
}
namespace {
    class WPML_Post_Status extends \WPML_WPDB_User
    {
        private $needs_update = array();
        private $status = array();
        private $preload_done = \false;
        private $wp_api;
        public function __construct(&$wpdb, $wp_api)
        {
        }
        public function needs_update($post_id)
        {
        }
        private function maybe_preload()
        {
        }
        public function reload()
        {
        }
        public function set_update_status($post_id, $update)
        {
        }
        /**
         * @param int $post_id
         * @param int $status
         *
         * @return bool
         */
        public function set_status($post_id, $status)
        {
        }
        public function get_status($post_id, $trid = \false, $lang_code = \false)
        {
        }
        public function is_duplicate($post_id)
        {
        }
    }
}
namespace WPML\Posts {
    class CountPerPostType
    {
        public function run(\WPML\Collect\Support\Collection $data, \wpdb $wpdb)
        {
        }
    }
    class UntranslatedCount
    {
        public function run(\WPML\Collect\Support\Collection $data, \wpdb $wpdb)
        {
        }
    }
}
namespace {
    /**
     * Class WPML_Attachments_Urls_With_Identical_Slugs
     *
     * @link https://onthegosystems.myjetbrains.com/youtrack/issue/wpmlcore-4700
     */
    class WPML_Attachments_Urls_With_Identical_Slugs implements \IWPML_Action
    {
        public function add_hooks()
        {
        }
        /**
         * Translate the attachment id in the $wp_query during parse_query
         *
         * @param WP_Query $wp_query
         *
         * @return WP_Query
         */
        public function translate_attachment_id($wp_query)
        {
        }
    }
    abstract class WPML_Display_As_Translated_Query
    {
        /** @var wpdb $wpdb */
        protected $wpdb;
        /** @var string $icl_translation_table_alias */
        protected $icl_translation_table_alias;
        /**
         * WPML_Display_As_Translated_Query constructor.
         *
         * @param wpdb $wpdb
         */
        public function __construct(\wpdb $wpdb, $icl_translation_table_alias = 'wpml_translations')
        {
        }
        /**
         * @param string $current_language
         * @param string $fallback_language
         * @param array  $content_types
         * @param bool   $skip_content_type_check Ignore $content_types if true.
         *
         * @return string
         */
        public function get_language_snippet($current_language, $fallback_language, $content_types, $skip_content_type_check = \false)
        {
        }
        /**
         * @param string $language
         *
         * @return string
         */
        private function get_query_for_no_translation($language)
        {
        }
        /**
         * @param array $content_types
         *
         * @return string
         */
        protected abstract function get_content_types_query($content_types);
        /**
         * @param string $language
         *
         * @return string
         */
        protected abstract function get_query_for_translation_not_published($language);
    }
    class WPML_Display_As_Translated_Taxonomy_Query extends \WPML_Display_As_Translated_Query
    {
        /** @var string $term_taxonomy_table */
        private $term_taxonomy_table;
        /**
         * WPML_Display_As_Translated_Posts_Query constructor.
         *
         * @param wpdb   $wpdb
         * @param string $term_taxonomy_table_alias
         */
        public function __construct(\wpdb $wpdb, $term_taxonomy_table_alias = \null)
        {
        }
        /**
         * If "display as translated" mode is enabled, we check whether a category has some assigned posts or
         * its equivalent in the default language.
         *
         * @param array  $clauses
         * @param string $default_lang
         *
         * @return array
         */
        public function update_count($clauses, $default_lang)
        {
        }
        private function update_count_in_fields($fields, $default_lang)
        {
        }
        private function update_count_in_where($where, $default_lang)
        {
        }
        /**
         * @param array<string> $taxonomies
         *
         * @return string
         */
        protected function get_content_types_query($taxonomies)
        {
        }
        /**
         * @param string $language
         *
         * @return string
         */
        protected function get_query_for_translation_not_published($language)
        {
        }
    }
    class WPML_Term_Query_Filter
    {
        /** @var WPML_Term_Translation $term_translation */
        private $term_translation;
        /** @var WPML_Debug_BackTrace $debug_backtrace */
        private $debug_backtrace;
        /** @var wpdb $wpdb */
        private $wpdb;
        /** @var IWPML_Taxonomy_State $taxonomy_state */
        private $taxonomy_state;
        /** @var string $current_language */
        private $current_language;
        /** @var string $default_language */
        private $default_language;
        /** @var bool $lock */
        private $lock;
        /**
         * WPML_Term_query_Filter constructor.
         *
         * @param WPML_Term_Translation $term_translation
         * @param WPML_Debug_BackTrace  $debug_backtrace
         * @param wpdb                  $wpdb
         * @param IWPML_Taxonomy_State  $taxonomy_state
         */
        public function __construct(\WPML_Term_Translation $term_translation, \WPML_Debug_BackTrace $debug_backtrace, \wpdb $wpdb, \IWPML_Taxonomy_State $taxonomy_state)
        {
        }
        /** @param string $current_language */
        /** @param string $default_language */
        public function set_lang($current_language, $default_language)
        {
        }
        /**
         * @param array $args
         * @param array $taxonomies
         *
         * @return array
         */
        public function get_terms_args_filter($args, $taxonomies)
        {
        }
        /**
         * @param string|array $terms_ids
         * @param bool         $orderByTermId
         *
         * @return array
         */
        private function adjust_taxonomies_terms_ids($terms_ids, $orderByTermId)
        {
        }
        /**
         * @param array $args
         * @param array $taxonomies
         *
         * @return array
         */
        private function adjust_taxonomies_terms_slugs($args, array $taxonomies)
        {
        }
        /**
         * @param array $ids
         * @param bool  $orderByTermId
         *
         * @return stdClass[]
         */
        private function get_terms($ids, $orderByTermId)
        {
        }
        /**
         * @param string $slug
         * @param array  $taxonomies
         *
         * @return null|WP_Term
         */
        private function guess_term($slug, array $taxonomies)
        {
        }
        /**
         * @param string|array $source
         *
         * @return array
         */
        private function explode_and_trim($source)
        {
        }
    }
    /**
     * Created by PhpStorm.
     * User: bruce
     * Date: 27/10/17
     * Time: 4:28 PM
     */
    class WPML_Language_Where_Clause
    {
        /** @var SitePress $sitepress */
        private $sitepress;
        /** @var wpdb $wpdb */
        private $wpdb;
        /** @var WPML_Display_As_Translated_Posts_Query $display_as_translated_query */
        private $display_as_translated_query;
        public function __construct(\SitePress $sitepress, \wpdb $wpdb, \WPML_Display_As_Translated_Posts_Query $display_as_translated_query)
        {
        }
        public function get($post_type)
        {
        }
    }
    class WPML_Display_As_Translated_Tax_Query_Factory implements \IWPML_Frontend_Action_Loader
    {
        public function create()
        {
        }
    }
    /**
     * Class WPML_Query_Parser
     *
     * @since 3.2.3
     */
    class WPML_Query_Parser
    {
        const LANG_VAR = 'wpml_lang';
        /** @var  WPML_Post_Translation $post_translations */
        protected $post_translations;
        /** @var  WPML_Term_Translation $post_translations */
        protected $term_translations;
        /** @var SitePress $sitepress */
        protected $sitepress;
        /** @var wpdb $wpdb */
        public $wpdb;
        /** @var WPML_Query_Filter $query_filter */
        private $query_filter;
        /**
         * @param SitePress         $sitepress
         * @param WPML_Query_Filter $query_filter
         */
        public function __construct($sitepress, $query_filter)
        {
        }
        /**
         * @param WP_Query $q
         * @param string   $lang
         *
         * @return WP_Query
         */
        private function adjust_default_taxonomies_query_vars($q, $lang)
        {
        }
        /**
         * @param WP_Query $q
         * @param string   $key
         * @param string   $type
         *
         * @return array
         */
        private function parse_scalar_values_in_query_vars($q, $key, $type)
        {
        }
        /**
         * @param array  $values
         * @param string $type
         * @param string $taxonomy
         * @param string $lang
         *
         * @return array
         */
        private function translate_term_values($values, $type, $taxonomy, $lang)
        {
        }
        /**
         * @param string $slug
         * @param string $taxonomy
         * @param string $lang
         *
         * @return null|string
         */
        private function translate_term_slug($slug, $taxonomy, $lang)
        {
        }
        /**
         * @param WP_Query $q
         * @param string   $key
         * @param array    $translated_values
         * @param string   $glue
         *
         * @return WP_Query
         */
        private function replace_query_vars_value($q, $key, $translated_values, $glue)
        {
        }
        /**
         * @param WP_Query $q
         *
         * @return WP_Query
         */
        private function adjust_taxonomy_query($q)
        {
        }
        /**
         * Recursive method to allow conversion of nested conditions
         *
         * @param array $conditions
         *
         * @return array
         */
        private function adjust_tax_query_conditions($conditions)
        {
        }
        /**
         * @param WP_Query $q
         * @param string   $current_lang
         *
         * @return mixed
         */
        private function maybe_redirect_to_translated_taxonomy($q, $current_lang)
        {
        }
        private function get_query_taxonomy_term_slugs(\WP_Query $q)
        {
        }
        /**
         * @param WP_Query $q
         *
         * @return WP_Query
         */
        function parse_query($q)
        {
        }
        /**
         * Adjust the parent post in the query in case we're dealing with a translated
         * post type.
         *
         * @param WP_Query        $q
         * @param string|string[] $post_type
         * @param string          $current_language
         *
         * @return WP_Query  mixed
         */
        private function maybe_adjust_parent($q, $post_type, $current_language)
        {
        }
        /**
         * Tries to transform certain queries from "by name" querying to "by ID" to overcome WordPress Core functionality
         * for resolving names not being filtered by language
         *
         * @param \WP_Query $q
         *
         * @return array<\WP_Query, bool>
         */
        private function maybe_adjust_name_var($q)
        {
        }
        private function adjust_query_ids($q, $index)
        {
        }
        private function adjust_q_var_pids($q, $post_types, $index)
        {
        }
        /**
         * @param int      $post_id
         * @param WP_Query $q
         *
         * @return false|string redirect target url if redirect is needed, false otherwise
         */
        private function is_redirected($post_id, $q)
        {
        }
        public static function is_permalink_part_of_request($permalink, $request_uri)
        {
        }
        private function get_translated_post($element_id, $current_language)
        {
        }
    }
    /**
     * Class WPML_Attachments_Urls_With_Identical_Slugs_Factory
     *
     * @link https://onthegosystems.myjetbrains.com/youtrack/issue/wpmlcore-4700
     */
    class WPML_Attachments_Urls_With_Identical_Slugs_Factory implements \IWPML_Frontend_Action_Loader, \IWPML_Deferred_Action_Loader
    {
        public function get_load_action()
        {
        }
        public function create()
        {
        }
    }
    /**
     * Class WPML_404_Guess
     *
     * @package    wpml-core
     * @subpackage post-translation
     *
     * @since      3.2.3
     */
    class WPML_404_Guess extends \WPML_Slug_Resolution
    {
        /** @var  WPML_Query_Filter $query_filter */
        private $query_filter;
        /**
         * @param wpdb              $wpdb
         * @param SitePress         $sitepress
         * @param WPML_Query_Filter $query_filter
         */
        public function __construct(&$wpdb, &$sitepress, &$query_filter)
        {
        }
        /**
         * Attempts to guess the correct URL based on query vars
         *
         * @since 3.2.3
         *
         * @param string   $name
         * @param WP_Query $query
         *
         * @return array<string|bool> containing most likely name, type and whether or not a match was found
         */
        public function guess_cpt_by_name($name, $query)
        {
        }
        /**
         * Query the database to find the post type
         *
         * @param string $name
         * @param string $type
         * @param array  $types
         * @param string $date_snippet
         * @param bool $page_first
         *
         * @return array
         */
        private function find_post_type($name, $type, $types, $date_snippet, $page_first)
        {
        }
        /**
         * Retrieves year, month and day parameters from the query if they are set and builds the appropriate sql
         * snippet to filter for them.
         *
         * @param WP_Query $query
         *
         * @return string
         */
        private function by_date_snippet($query)
        {
        }
        /**
         * @param bool $has_date
         * @param bool $page_first
         *
         * @return string
         */
        private function order_by_type_and_language_snippet($has_date, $page_first)
        {
        }
        /**
         *
         * @return string
         */
        private function order_by_post_type_snippet()
        {
        }
    }
    /**
     * Class WPML_Query_Filter
     *
     * @package    wpml-core
     * @subpackage post-translation
     */
    class WPML_Query_Filter extends \WPML_Full_Translation_API
    {
        /** @var  WPML_Name_Query_Filter[] $page_name_filter */
        private $name_filter = array();
        /**
         * @param string $post_type
         *
         * @return WPML_Name_Query_Filter
         */
        public function get_page_name_filter($post_type = 'page')
        {
        }
        /**
         * @return WPML_404_Guess
         */
        public function get_404_util()
        {
        }
        /**
         * @param string $join
         * @param string $post_type
         *
         * @return string
         */
        public function filter_single_type_join($join, $post_type)
        {
        }
        /**
         * Filters comment queries so that only comments in the current language are displayed for translated post types
         *
         * @param string[] $clauses
         * @param WP_Comment_Query $obj
         *
         * @return string[]
         */
        public function comments_clauses_filter($clauses, $obj)
        {
        }
        /**
         * @param string $join
         * @param WP_Query $query
         *
         * @return string
         */
        public function posts_join_filter($join, $query)
        {
        }
        /**
         * @param string $where
         * @param string | String[] $post_type
         *
         * @return string
         */
        public function filter_single_type_where($where, $post_type)
        {
        }
        /**
         * @param string $where
         * @param WP_Query $query
         *
         * @return string
         */
        public function posts_where_filter($where, $query)
        {
        }
        /**
         * @param bool|false        $not
         * @param bool|false|string $posts_alias
         *
         * @return string
         */
        public function in_translated_types_snippet($not = \false, $posts_alias = \false)
        {
        }
        /**
         * @param bool|true $left if true the query will be filtered by a left join, allowing untranslated post types in it
         *                        simultaneous with translated ones
         *
         * @return string
         */
        private function any_post_type_join($left = \true)
        {
        }
        private function has_translated_type($core_types)
        {
        }
        /**
         * @param WP_Query $query
         * @param String   $pagenow
         *
         * @return bool
         */
        private function is_join_filter_active($query, $pagenow)
        {
        }
        /**
         * Checks whether the currently queried for object is the root page.
         *
         * @param WP_Query $query
         *
         * @return bool
         */
        private function is_queried_object_root($query)
        {
        }
        /**
         * @param String $query_type
         *
         * @return array|bool|string
         */
        private function determine_post_type($query_type)
        {
        }
        /**
         * @param WP_Query $query
         * @return String[]
         */
        private function tax_post_types_from_query($query)
        {
        }
        private function tax_types_join($join, $tax_post_types)
        {
        }
        /**
         * @param WP_Query $query
         *
         * @return String[]
         */
        private function get_tax_query_posttype($query)
        {
        }
        /**
         * @param string|string[] $post_types
         *
         * @return bool true if non of the input post types are translatable
         */
        private function posttypes_not_translated($post_types)
        {
        }
        private function all_langs_where()
        {
        }
        private function specific_lang_where($current_language, $fallback_language)
        {
        }
        private function display_as_translated_snippet($current_language, $fallback_language)
        {
        }
        /**
         * @param WP_Query $query
         *
         * @return bool
         */
        private function where_filter_active($query)
        {
        }
        private function is_media_and_cant_be_translated($post_type)
        {
        }
        /**
         * @param \WP_Comment_Query $comment_query
         *
         * @return int|null
         */
        private function get_post_id_from_comment_query(\WP_Comment_Query $comment_query)
        {
        }
        /**
         * Checks if the comment query applies to posts that are of a translated type.
         *
         * @param WP_Comment_Query $comment_query
         *
         * @return bool
         */
        private function is_comment_query_filtered($comment_query)
        {
        }
        /**
         * Adds a join with the posts table to the query only if necessary because the comment query is not filtered
         * by post variables
         *
         * @param WP_Comment_Query $comment_query
         * @return string
         */
        private function get_comment_query_join($comment_query)
        {
        }
        /**
         * @param int $requested_id
         *
         * @return bool|mixed|null|string
         */
        private function get_current_language($requested_id)
        {
        }
    }
    /**
     * Class WPML_Term_Clauses
     */
    class WPML_Term_Clauses
    {
        /** @var SitePress $sitepress */
        private $sitepress;
        /** @var wpdb $wpdb */
        private $wpdb;
        /** @var WPML_Display_As_Translated_Taxonomy_Query $display_as_translated_query */
        private $display_as_translated_query;
        /** @var WPML_Debug_BackTrace $debug_backtrace */
        private $debug_backtrace;
        /** @var array  */
        private $cache = \null;
        /**
         * WPML_Term_Clauses constructor.
         *
         * @param SitePress                                 $sitepress
         * @param wpdb                                      $wpdb
         * @param WPML_Display_As_Translated_Taxonomy_Query $display_as_translated_query
         * @param WPML_Debug_BackTrace                      $debug_backtrace
         */
        public function __construct(\SitePress $sitepress, \wpdb $wpdb, \WPML_Display_As_Translated_Taxonomy_Query $display_as_translated_query, \WPML_Debug_BackTrace $debug_backtrace)
        {
        }
        /**
         * @param array $clauses
         * @param array $taxonomies
         * @param array $args
         *
         * @return array
         */
        public function filter($clauses, $taxonomies, $args)
        {
        }
        /**
         * @return string|void
         */
        private function get_where_lang()
        {
        }
        /**
         * @param array $clauses
         *
         * @return array
         */
        private function maybe_apply_count_adjustment($clauses)
        {
        }
        /**
         * @param string $current_language
         * @param string $fallback_language
         *
         * @return string
         */
        private function get_display_as_translated_snippet($current_language, $fallback_language)
        {
        }
        /**
         * @return bool
         */
        private function should_apply_display_as_translated_adjustments()
        {
        }
        /**
         * @return array
         */
        private function get_display_as_translated_taxonomies()
        {
        }
    }
    class WPML_Display_As_Translated_Attachments_Query_Factory implements \IWPML_Frontend_Action_Loader
    {
        public function create()
        {
        }
    }
    /**
     * Class WPML_Query_Utils
     *
     * @package wpml-core
     */
    class WPML_Query_Utils
    {
        /** @var wpdb $wpdb */
        private $wpdb;
        /** @var WPML_WP_API */
        private $wp_api;
        /** @var array $display_as_translated_post_types */
        private $display_as_translated_post_types;
        /**
         * WPML_Query_Utils constructor.
         *
         * @param wpdb        $wpdb
         * @param WPML_WP_API $wp_api
         * @param array       $display_as_translated_post_types
         */
        public function __construct(\wpdb $wpdb, \WPML_WP_API $wp_api, $display_as_translated_post_types)
        {
        }
        /**
         * Returns the number of posts for a given post_type, author and language combination that is published.
         *
         * @param array|string $post_type
         * @param WP_User      $author_data
         * @param string       $lang language code to check
         * @param string       $fallback_lang
         *
         * @return bool
         *
         * @used-by \WPML_Languages::add_author_url_to_ls_lang to determine what languages to show in the Language Switcher
         */
        public function author_query_has_posts($post_type, $author_data, $lang, $fallback_lang)
        {
        }
        /**
         * Returns the number of posts for a given post_type, date and language combination that is published.
         *
         * @param string       $lang language code to check
         * @param string       $fallback_lang
         * @param null|int     $year
         * @param null|int     $month
         * @param null|int     $day
         * @param string|array $post_type
         *
         * @return bool
         *
         * @used-by \WPML_Languages::add_date_or_cpt_url_to_ls_lang to determine what languages to show in the Language Switcher
         */
        public function archive_query_has_posts($lang, $fallback_lang, $year = \null, $month = \null, $day = \null, $post_type = 'post')
        {
        }
        private function get_language_snippet($lang, $fallback_lang, $post_type)
        {
        }
    }
    class WPML_Display_As_Translated_Posts_Query extends \WPML_Display_As_Translated_Query
    {
        /** @var string $post_table */
        private $post_table;
        /**
         * WPML_Display_As_Translated_Posts_Query constructor.
         *
         * @param wpdb $wpdb
         * @param string $post_table_alias
         */
        public function __construct(\wpdb $wpdb, $post_table_alias = \null)
        {
        }
        /**
         * @param array $post_types
         *
         * @return string
         */
        protected function get_content_types_query($post_types)
        {
        }
        /**
         * @param string $language
         *
         * @return string
         */
        protected function get_query_for_translation_not_published($language)
        {
        }
    }
    class WPML_Display_As_Translated_Tax_Query implements \IWPML_Action
    {
        // Regex to find the term query.
        // eg. term_taxonomy_id IN (8)
        // We then add the fallback term to the query
        // eg. term_taxonomy_id IN (8,9)
        const TERM_REGEX = '/term_taxonomy_id\\s+(IN|in)\\s*\\(([^\\)]+)\\)/';
        /** @var SitePress $sitepress */
        private $sitepress;
        /** @var WPML_Term_Translation $term_translation */
        private $term_translation;
        public function __construct(\SitePress $sitepress, \WPML_Term_Translation $term_translation)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param string   $where
         * @param WP_Query $q
         *
         * @return string
         */
        public function posts_where_filter($where, \WP_Query $q)
        {
        }
        /**
         * @return bool
         */
        private function is_not_the_default_language()
        {
        }
        /**
         * @param WP_Query $q
         *
         * @return bool
         */
        private function is_taxonomy_archive(\WP_Query $q)
        {
        }
        /**
         * @param WP_Query $q
         *
         * @return array
         */
        private function get_linked_post_types(\WP_Query $q)
        {
        }
        /**
         * @param array $post_types
         *
         * @return bool
         */
        private function is_display_as_translated_mode($post_types)
        {
        }
        /**
         * @param string $where
         *
         * @return array
         */
        private function find_terms($where)
        {
        }
        /**
         * @param array $terms
         *
         * @return array
         */
        private function get_fallback_terms($terms)
        {
        }
        /**
         * @param string   $where
         * @param array    $fallback_terms
         * @param WP_Query $q
         *
         * @return string
         */
        private function add_fallback_terms_to_where_clause($where, $fallback_terms, \WP_Query $q)
        {
        }
        /**
         * @param string   $terms_string
         * @param array    $fallback_terms
         * @param WP_Query $q
         *
         * @return string
         */
        private function add_fallback_terms($terms_string, $fallback_terms, \WP_Query $q)
        {
        }
        private function include_term_children(\WP_Query $q)
        {
        }
    }
    class WPML_Get_Page_By_Path
    {
        /** @link https://onthegosystems.myjetbrains.com/youtrack/issue/wpmlcore-4918 */
        const BEFORE_REMOVE_PLACEHOLDER_ESCAPE_PRIORITY = -1;
        /** @var wpdb $wpdb */
        private $wpdb;
        /** @var SitePress $sitepress */
        private $sitepress;
        /** @var WPML_Debug_BackTrace $debug_backtrace */
        private $debug_backtrace;
        /** @var string $language */
        private $language;
        /** @var string $post_type */
        private $post_type;
        public function __construct(\wpdb $wpdb, \SitePress $sitepress, \WPML_Debug_BackTrace $debug_backtrace)
        {
        }
        public function get($page_name, $lang, $output = \OBJECT, $post_type = 'page')
        {
        }
        public function get_page_by_path_filter($query)
        {
        }
        /**
         * @param string $page_name
         * @param string $post_type
         *
         * @see get_page_by_path where the cache key is built
         */
        private function clear_cache($page_name, $post_type)
        {
        }
    }
    /**
     * Class WPML_Term_Adjust_Id
     */
    class WPML_Term_Adjust_Id
    {
        /** @var WPML_Debug_BackTrace */
        private $debug_backtrace;
        /** @var WPML_Term_Translation */
        private $term_translation;
        /** @var WPML_Post_Translation */
        private $post_translation;
        /** @var SitePress */
        private $sitepress;
        /**
         * WPML_Term_Adjust_Id constructor.
         *
         * @param WPML_Debug_BackTrace  $debug_backtrace
         * @param WPML_Term_Translation $term_translation
         * @param WPML_Post_Translation $post_translation
         * @param SitePress             $sitepress
         */
        public function __construct(\WPML_Debug_BackTrace $debug_backtrace, \WPML_Term_Translation $term_translation, \WPML_Post_Translation $post_translation, \SitePress $sitepress)
        {
        }
        /**
         * @param WP_Term $term
         * @param boolean $adjust_id_url_filter_off
         *
         * @return WP_Term
         */
        public function filter(\WP_Term $term, $adjust_id_url_filter_off)
        {
        }
        /**
         * @return bool
         */
        private function is_ajax_add_term_translation()
        {
        }
    }
    class WPML_Archives_Query implements \IWPML_Frontend_Action, \IWPML_DIC_Action
    {
        /** @var wpdb $wpdb */
        private $wpdb;
        /** @var WPML_Language_Where_Clause $language_where_clause */
        private $language_where_clause;
        /** @var SitePress */
        private $sitepress;
        public function __construct(\wpdb $wpdb, \WPML_Language_Where_Clause $language_where_clause, \SitePress $sitepress)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param string $join
         * @param array $args
         *
         * @return string
         */
        public function get_archives_join($join, $args)
        {
        }
        /**
         * @param string $where_clause
         * @param array $args
         *
         * @return string
         */
        public function get_archives_where($where_clause, $args)
        {
        }
    }
    class WPML_Display_As_Translated_Attachments_Query
    {
        private $sitepress;
        private $post_translation;
        public function __construct(\SitePress $sitepress, \WPML_Post_Translation $post_translation)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param \WP_Query $q
         *
         * @return \WP_Query
         */
        public function adjust_post_parent($q)
        {
        }
    }
}
namespace WPML\TM\Jobs {
    class Utils
    {
        /**
         * Inserts an element into an array, nested by keys.
         * Input ['a', 'b'] for the keys, an empty array for $array and $x for the value would lead to
         * [ 'a' => ['b' => $x ] ] being returned.
         *
         * @param string[] $keys indexes ordered from highest to lowest level.
         * @param mixed[]  $array array into which the value is to be inserted.
         * @param mixed    $value to be inserted.
         *
         * @return mixed[]
         */
        public static function insertUnderKeys($keys, $array, $value)
        {
        }
    }
}
namespace {
    class WPML_TM_Job_Layout
    {
        private $layout = array();
        private $custom_fields = array();
        private $grouped_custom_fields = array();
        private $terms = array();
        private $wp_api;
        public $wpdb;
        public function __construct(\wpdb $wpdb, \WPML_WP_API $wp_api)
        {
        }
        public function get_wpdb()
        {
        }
        public function run(array $fields, $tm_instance = \null)
        {
        }
        private function order_main_fields()
        {
        }
        private function extract_custom_fields($tm_instance)
        {
        }
        private function get_group_custom_field_belongs_to($field, $tm_instance)
        {
        }
        private function extract_terms()
        {
        }
        private function append_grouped_custom_fields()
        {
        }
        private function append_custom_fields()
        {
        }
        private function append_terms()
        {
        }
    }
}
namespace WPML\TM\Jobs {
    /**
     * Class FieldId
     *
     * @package WPML\TM\Jobs
     * @method static callable|int get_term_id( ...$field ) - Curried :: string → int
     * @method static callable|int is_a_term( ...$field ) - Curried :: string → bool
     * @method static callable|int is_a_term_description( ...$field ) - Curried :: string → bool
     * @method static callable|int is_a_term_meta( ...$field ) - Curried :: string → bool
     * @method static callable|int is_a_custom_field( ...$field ) - Curried :: string → bool
     * @method static callable|int is_any_term_field( ...$field ) - Curried :: string → bool
     * @method static callable|string forTerm( ...$termId ) - Curried :: int → string
     * @method static callable|string forTermDescription( ...$termId ) - Curried :: int → string
     * @method static callable|string forTermMeta( ...$termId, $key ) - Curried :: int → string → string
     * @method static callable|string getTermMetaKey( ...$field ) - Curried :: string → string
     */
    class FieldId
    {
        use \WPML\Collect\Support\Traits\Macroable;
        const TERM_PREFIX = 't_';
        const TERM_DESCRIPTION_PREFIX = 'tdesc_';
        const TERM_META_FIELD_PREFIX = 'tfield-';
        const CUSTOM_FIELD_PREFIX = 'field-';
        public static function init()
        {
        }
    }
    class ExtraFieldDataInEditor implements \IWPML_Backend_Action
    {
        const MAX_ALLOWED_SINGLE_LINE_LENGTH = 50;
        /** @var \WPML_Custom_Field_Editor_Settings */
        private $customFieldEditorSettings;
        public function __construct(\WPML_Custom_Field_Editor_Settings $customFieldEditorSettings)
        {
        }
        public function add_hooks()
        {
        }
        public function appendTitleAndStyle(array $fields, $job, $originalPost)
        {
        }
        private function addTitleAndAdjustStyle($job, $originalPost)
        {
        }
        private function isExternalElement($job)
        {
        }
        private function appendToExternalField($originalPost)
        {
        }
        private function appendToCustomField($field, $job, $originalPost)
        {
        }
        private function appendToTerm($field)
        {
        }
        private function applyStyleFilter($style, $type, $originalPost)
        {
        }
        private function appendToRegularField($field)
        {
        }
        private function getCustomFieldTitle($field)
        {
        }
        private function getCustomFieldStyle($field)
        {
        }
        private function getAdjustedFieldStyle(array $field, $style)
        {
        }
        private function adjustFieldStyleForUnsafeContent()
        {
        }
    }
    class ExtraFieldDataInEditorFactory implements \IWPML_Backend_Action_Loader
    {
        /**
         * @return ExtraFieldDataInEditor
         */
        public function create()
        {
        }
    }
}
namespace {
    /**
     * Class WPML_Element_Translation_Package
     *
     * @package wpml-core
     */
    class WPML_Element_Translation_Package extends \WPML_Translation_Job_Helper
    {
        /** @var WPML_WP_API $wp_api */
        private $wp_api;
        /**
         * The constructor.
         *
         * @param WPML_WP_API $wp_api An instance of the WP API.
         */
        public function __construct(\WPML_WP_API $wp_api = \null)
        {
        }
        /**
         * Create translation package
         *
         * @param \WPML_Package|\WP_Post|int $post
         *
         * @return array<string,string|array<string,string>>
         */
        public function create_translation_package($post)
        {
        }
        private function buildEntries($contents, $entries, $parentKey = '')
        {
        }
        /**
         * @param array $translation_package
         * @param int   $job_id
         * @param array $prev_translation
         */
        public function save_package_to_job(array $translation_package, $job_id, $prev_translation)
        {
        }
        /**
         * @param array $job_translate
         *
         * @return mixed|void
         */
        private function filter_non_translatable_fields($job_translate)
        {
        }
        /**
         * @param object $job
         * @param int    $post_id
         * @param array  $fields
         */
        public function save_job_custom_fields($job, $post_id, $fields)
        {
        }
        /**
         * Remove the field from the start of the string.
         *
         * @param string $field_name The field to remove.
         * @param string $field_id_string The full field identifier.
         * @return string
         */
        private function remove_field_name_from_start($field_name, $field_id_string)
        {
        }
        /**
         * @param array $fields_in_job
         * @param int   $post_id
         * @param int   $original_post_id
         */
        private function save_custom_field_values($fields_in_job, $post_id, $original_post_id)
        {
        }
        /**
         * The core function `add_post_meta` always performs
         * a `stripslashes_deep` on the value. We need to escape
         * once more before to call the function.
         *
         * @param string $value
         * @param string $encoding
         *
         * @return string
         */
        private function prevent_strip_slash_on_json($value, $encoding)
        {
        }
        /**
         * @param array  $package
         * @param object $post
         * @param array  $fields_to_translate
         * @param array  $fields_encoding
         *
         * @return array
         */
        private function add_custom_field_contents($package, $post, $fields_to_translate, $fields_encoding)
        {
        }
        /**
         * For array valued custom fields cf is given in the form field-{$field_name}-join('-', $indicies)
         *
         * @param array                 $package
         * @param string                $key
         * @param array                 $custom_field_index
         * @param array|stdClass|string $custom_field_val
         * @param string                $encoding
         *
         * @return array
         */
        private function add_single_field_content($package, $key, $custom_field_index, $custom_field_val, $encoding)
        {
        }
        /**
         * Ensure that any numerics are preserved in the given value. eg any string like '10'
         * will be converted to an integer if the corresponding original value was an integer.
         *
         * @param mixed      $value
         * @param string     $name
         * @param string|int $original_post_id
         * @param bool       $single
         *
         * @return mixed
         */
        public static function preserve_numerics($value, $name, $original_post_id, $single)
        {
        }
        /**
         * Ensure that any numerics are preserved in the given value. eg any string like '10'
         * will be converted to an integer if the corresponding original value was an integer.
         *
         * @param mixed $original
         * @param mixed $value
         *
         * @return mixed
         */
        private static function preserve_numerics_recursive($original, $value)
        {
        }
        private function get_taxonomy_fields($post)
        {
        }
        public static function getTermMetaKeysToTranslate()
        {
        }
    }
    /**
     * Class WPML_TM_Field_Type_Encoding
     */
    class WPML_TM_Field_Type_Encoding
    {
        const CUSTOM_FIELD_KEY_SEPARATOR = ':::';
        /**
         * @param string $custom_field_name
         * @param array  $attributes
         *
         * @return array
         */
        public static function encode($custom_field_name, $attributes)
        {
        }
        /**
         * @param string $string
         *
         * @return string
         */
        public static function encode_hyphen($string)
        {
        }
        /**
         * Get the custom field name and the attributes from the custom field job.
         *
         * @param string $custom_field_job_type - e.g: field-my_custom_field-0-attribute.
         *
         * @return array An array with field name and attributes
         */
        public static function decode($custom_field_job_type)
        {
        }
        /**
         * @param string $string
         *
         * @return string
         */
        public static function decode_hyphen($string)
        {
        }
    }
    /**
     * Class WPML_TM_Unsent_Jobs_Notice_Template
     */
    class WPML_TM_Unsent_Jobs_Notice_Template
    {
        const TEMPLATE_FILE = 'jobs-not-notified.twig';
        /**
         * @var WPML_Twig_Template
         */
        private $template_service;
        /**
         * WPML_TM_Unsent_Jobs_Notice_Template constructor.
         *
         * @param IWPML_Template_Service $template_service
         */
        public function __construct(\IWPML_Template_Service $template_service)
        {
        }
        /**
         * @param array $jobs
         *
         * @return string
         */
        public function get_notice_body($jobs)
        {
        }
        /**
         * @param array $jobs
         *
         * @return array
         */
        private function get_notice_model($jobs)
        {
        }
        /**
         * @param array $jobs
         *
         * @return array
         */
        private function get_formatted_jobs($jobs)
        {
        }
    }
    /**
     * Class WPML_TM_Unsent_Jobs_Notice
     */
    class WPML_TM_Unsent_Jobs_Notice
    {
        const OPT_JOBS_NOT_NOTIFIED = '_wpml_jobs_not_notified';
        const NOTICE_ID = 'job-not-notified';
        const NOTICE_GROUP_ID = 'tm-jobs-notification';
        /**
         * @var string
         */
        private $body;
        /**
         * @var WPML_WP_API
         */
        private $wp_api;
        /**
         * @var WPML_TM_Unsent_Jobs_Notice_Template
         */
        private $notice_template;
        /**
         * WPML_TM_Unsent_Jobs_Notice constructor.
         *
         * @param WPML_WP_API                              $wp_api
         * @param WPML_TM_Unsent_Jobs_Notice_Template|null $notice_template
         */
        public function __construct(\WPML_WP_API $wp_api, \WPML_TM_Unsent_Jobs_Notice_Template $notice_template = \null)
        {
        }
        private function prepare_notice_body()
        {
        }
        /**
         * @return null|WPML_TM_Unsent_Jobs_Notice_Template
         */
        private function get_notice_template()
        {
        }
        /**
         * @param WPML_Notices $wpml_admin_notices
         */
        public function add_notice(\WPML_Notices $wpml_admin_notices, $dismissed_option_key)
        {
        }
        private function remove_notice_from_dismissed_list($notice_group_id, $dismissed_option_key)
        {
        }
        /**
         * @param WPML_Notice $notice
         */
        private function add_actions(\WPML_Notice $notice)
        {
        }
        /**
         * @param array $args
         */
        public function add_job($args)
        {
        }
        /**
         * @param array $args
         */
        public function remove_job($args)
        {
        }
        /**
         * @param array $jobs
         */
        private function update_jobs_option($jobs)
        {
        }
        /**
         * @return array
         */
        private function get_jobs()
        {
        }
    }
    /**
     * Class WPML_TM_Unsent_Jobs_Notifications_Hooks
     */
    class WPML_TM_Unsent_Jobs_Notice_Hooks
    {
        /** @var string */
        protected $dismissed_option_key;
        /**
         * @var WPML_TM_Unsent_Jobs_Notice
         */
        private $wpml_tm_notice_email_notice;
        /**
         * @var WPML_Notices
         */
        private $wpml_admin_notices;
        /**
         * @var WPML_WP_API
         */
        private $wp_api;
        /**
         * WPML_TM_Unsent_Jobs_Notice_Hooks constructor.
         *
         * @param WPML_TM_Unsent_Jobs_Notice $wpml_tm_notice_email_notice
         * @param WPML_WP_API                $wp_api
         * @param string                     $dismissed_option_key
         */
        public function __construct(\WPML_TM_Unsent_Jobs_Notice $wpml_tm_notice_email_notice, \WPML_WP_API $wp_api, $dismissed_option_key)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param array $args
         */
        public function email_for_job($args)
        {
        }
        public function add_notice()
        {
        }
        public function remove_notice()
        {
        }
        /**
         * @return string
         */
        private function get_dismissed_option_key()
        {
        }
    }
}
namespace WPML\TM\Jobs {
    class TermMeta
    {
        /**
         * It returns translated term description stored inside wp_icl_translate
         *
         * @param int $iclTranslateJobId
         * @param int $termTaxonomyId
         *
         * @return string
         */
        public static function getTermDescription($iclTranslateJobId, $termTaxonomyId)
        {
        }
        /**
         * It returns term meta stored inside wp_icl_translate table.
         *
         * Data has such format:
         * [
         *   (object)[
         *     field_type => 'some_scalar_field',
         *     field_data_translated => 'Translated value'
         *   ],
         *   (object)[
         *      field_type => 'some_array_valued_field_like_checkboxes'
         *      field_data_translated => [
         *         'Translated option 1', 'Translated option 2', 'Translated option 3'
         *      ]
         *   ],
         *   (object)[
         *      field_type => 'another_array_valued_field_like_checkboxes'
         *      field_data_translated => [
         *         'option1' => ['Translated option 1'],
         *         'option2' => ['Translated option 2'],
         *      ]
         *   ]
         * ]
         *
         * @param int $iclTranslateJobId
         * @param int $term_taxonomy_id
         *
         * @return array
         */
        public static function getTermMeta($iclTranslateJobId, $term_taxonomy_id)
        {
        }
        /**
         * It returns term meta which have scalar values
         *
         * @param int $iclTranslateJobId
         * @param int $termTaxonomyId
         *
         * @return mixed[]
         */
        private static function geRegularTermMeta($iclTranslateJobId, $termTaxonomyId)
        {
        }
        /**
         * It returns term meta with array values grouped by term name.
         *
         *  Custom field created by Toolset Types example:
         *
         *  A term has checkboxes field with options: A, B, and C. They are stored in wp_icl_translate table as 3 entries under such field_type:
         *   - tfield-wpcf-jakub-checkboxes-13_wpcf-fields-checkboxes-option-6c88acb978ec7f24eb6a2bb12fc2d1c4-1_0
         *   - tfield-wpcf-jakub-checkboxes-13_wpcf-fields-checkboxes-option-6cdwwdwdwdwdwwdwddwd2bb12fc2d1c4-1_0
         *   - tfield-wpcf-jakub-checkboxes-13_wpcf-fields-checkboxes-option-611111wdwdwdwwdwddwd2bb12fc2d1c4-1_0
         *
         *  Options translations are A fr, B fr, and C fr.
         *
         *  Our goal is to group them into one entry:
         *  (object) [
         *     field_type => 'tfield-wpcf-jakub-checkboxes-13'
         *     field_data_translated => [
         *        wpcf-fields-checkboxes-option-6c88acb978ec7f24eb6a2bb12fc2d1c4-1 => [
         *           0 => 'A fr',
         *        ],
         *        wpcf-fields-checkboxes-option-6cdwwdwdwdwdwwdwddwd2bb12fc2d1c4-1 => [
         *           0 => 'B fr',
         *        ],
         *        wpcf-fields-checkboxes-option-611111wdwdwdwwdwddwd2bb12fc2d1c4-1 => [
         *           0 => 'C fr',
         *        ],
         *     ]
         *  ]
         *
         *  Custom field created by ACF example:
         *
         *  ACF stores data in a slightly different way. Again, A term has checkboxes field with options A, B, C with the same translations A fr, B fr, C fr.
         *  They are stored in wp_icl_translate in this way:
         *  - tfield-jakub_checkboxes-13_0
         *  - tfield-jakub_checkboxes-13_1
         *  - tfield-jakub_checkboxes-13_2
         *
         *  Our goal is to group them into one entry:
         *  (object)[
         *     field_type => 'tfield-jakub-checkboxes-13',
         *     field_data_translated => [
         *       0 => 'A fr',
         *       1 => 'B fr',
         *       2 => 'C fr'
         *     ]
         *  ]
         *
         * @param int $iclTranslateJobId
         * @param int $termTaxonomyId
         *
         * @return mixed[]
         */
        private static function getTermMetaWithArrayValue($iclTranslateJobId, $termTaxonomyId)
        {
        }
    }
}
namespace {
    class WPML_TM_Field_Content_Action extends \WPML_TM_Job_Factory_User
    {
        /** @var  int $job_id */
        protected $job_id;
        /**
         * WPML_TM_Field_Content_Action constructor.
         *
         * @param WPML_Translation_Job_Factory $job_factory
         * @param int                          $job_id
         *
         * @throws \InvalidArgumentException
         */
        public function __construct($job_factory, $job_id)
        {
        }
        /**
         * Returns an array containing job fields
         *
         * @return array
         * @throws \RuntimeException
         */
        public function run()
        {
        }
        /**
         * Extracts the to be retrieved content from given job elements
         *
         * @param stdClass $job
         *
         * @return array
         */
        private function content_from_elements($job)
        {
        }
        private function find_previous_version_element($element, $previous_version_elements, $index)
        {
        }
        private function has_diff($element, $previous_element)
        {
        }
        private function get_diff($element, $previous_element)
        {
        }
        /**
         * @param string $content base64-encoded translation job field content
         *
         * @return string base64-decoded field content, with linebreaks turned into
         * paragraph html tags
         */
        private function sanitize_field_content($content)
        {
        }
        private function is_html($string)
        {
        }
    }
    class WPML_TM_Job_Action_Factory extends \WPML_TM_Job_Factory_User
    {
        /**
         * @param int $job_id
         *
         * @return WPML_TM_Field_Content_Action
         * @throws \InvalidArgumentException
         */
        public function field_contents($job_id)
        {
        }
        public function save_action(array $data)
        {
        }
    }
    /**
     * Class WPML_TM_Unsent_Jobs_Notice
     *
     * @group unsent-jobs-notification
     */
    class WPML_TM_Unsent_Jobs
    {
        /**
         * @var WPML_TM_Blog_Translators
         */
        private $blog_translators;
        /**
         * @var SitePress
         */
        private $sitepress;
        /**
         * WPML_TM_Unsent_Jobs constructor.
         *
         * @param WPML_TM_Blog_Translators $blog_translators
         * @param SitePress                $sitepress
         */
        public function __construct(\WPML_TM_Blog_Translators $blog_translators, \SitePress $sitepress)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param WPML_Translation_Job $job
         * @param null                 $translator_id
         */
        public function prepare_unsent_job_for_notice(\WPML_Translation_Job $job, $translator_id = \null)
        {
        }
    }
}
namespace WPML\TM\Jobs\Dispatch {
    /**
     * Class BatchBuilder
     *
     * @method static callable|\WPML_TM_Translation_Batch|null buildPostsBatch( ...$data, ...$sourceLanguage, ...$translators ) - Curried :: array->string->array->\WPML_TM_Translation_Batch|null
     * @method static callable|\WPML_TM_Translation_Batch|null buildStringsBatch( ...$data, ...$sourceLanguage, ...$translators ) - Curried :: array->string->array->\WPML_TM_Translation_Batch|null
     * @method static callable|array getPostElements( ...$postsForTranslation, ...$sourceLanguage ) - Curried :: array->string->array
     * @method static callable|array getStringElements( ...$stringsForTranslation, ...$sourceLanguage ) - Curried :: array->string->array
     */
    class BatchBuilder
    {
        use \WPML\FP\Curryable;
        public static function init()
        {
        }
        /**
         * @param string $batchNameTemplate
         * @param callable $buildElementStrategy
         * @param array $data
         * @param string $sourceLanguage
         * @param array $translators
         *
         * @return \WPML_TM_Translation_Batch|null
         */
        private static function build($batchNameTemplate, callable $buildElementStrategy, array $data, $sourceLanguage, array $translators)
        {
        }
    }
    abstract class Elements
    {
        /**
         * @param callable $sendBatch
         * @param Messages $messages
         * @param callable $buildBatch
         * @param array    $data
         * @param string   $type
         */
        public static function dispatch(callable $sendBatch, \WPML\TM\Jobs\Dispatch\Messages $messages, callable $buildBatch, $data, $type)
        {
        }
        private static function getTargetLanguages($translationActions)
        {
        }
        private static function getTranslators($sourceLanguage, $targetLanguages)
        {
        }
        private static function getElements(\WPML\TM\Jobs\Dispatch\Messages $messages, $data, $targetLanguages)
        {
        }
        /**
         * @param int    $elementId
         * @param string $elementType
         * @param string $language
         *
         * @return bool
         */
        protected static function hasInProgressJob($elementId, $elementType, $language)
        {
        }
        /**
         * @param Messages $messages
         * @param array    $elementsData
         * @param array    $targetLanguages
         *
         * @return array
         */
        protected static abstract function filterElements(\WPML\TM\Jobs\Dispatch\Messages $messages, $elementsData, $targetLanguages);
    }
    class Messages
    {
        /**
         * @param \WP_Post $post
         * @param string $language
         *
         * @return string
         */
        public function ignoreOriginalPostMessage($post, $language)
        {
        }
        /**
         * @param \WP_Post $post
         * @param string $language
         *
         * @return string
         */
        public function ignoreInProgressPostMessage($post, $language)
        {
        }
        /**
         * @param \WPML_ST_String $string
         * @param $language
         *
         * @return string
         */
        public function ignoreInProgressStringMessage(\WPML_ST_String $string, $language)
        {
        }
        /**
         * @param \WPML_Package $package
         * @param string $language
         *
         * @return string
         */
        public function ignoreInProgressPackageMessage($package, $language)
        {
        }
        /**
         * @param \WPML_Package $package
         * @param string $language
         *
         * @return string
         */
        public function ignoreOriginalPackageMessage($package, $language)
        {
        }
        /**
         * @param array $messages
         * @param string $type
         */
        public function showForPosts(array $messages, $type)
        {
        }
        /**
         * @param array $messages
         * @param string $type
         */
        public function showForStrings(array $messages, $type)
        {
        }
        /**
         * @param string $id
         * @param array $pages
         * @param string $group
         * @param array $messages
         * @param string $type
         */
        private function show($id, array $pages, $group, array $messages, $type)
        {
        }
    }
    class Strings
    {
        /**
         * @param callable $sendBatch
         * @param \WPML\TM\Jobs\Dispatch\Messages $messages
         * @param callable $buildBatch
         * @param $stringIds
         * @param $sourceLanguage
         * @param $targetLanguages
         */
        public static function dispatch(callable $sendBatch, \WPML\TM\Jobs\Dispatch\Messages $messages, callable $buildBatch, $stringIds, $sourceLanguage, $targetLanguages)
        {
        }
        private static function filterStringsForTranslation(\WPML\TM\Jobs\Dispatch\Messages $messages, $stringIds, $targetLanguages)
        {
        }
    }
    class Packages extends \WPML\TM\Jobs\Dispatch\Elements
    {
        public static function dispatch(callable $sendBatch, \WPML\TM\Jobs\Dispatch\Messages $messages, callable $buildBatch, $data, $type = 'package')
        {
        }
        protected static function filterElements(\WPML\TM\Jobs\Dispatch\Messages $messages, $packagesData, $targetLanguages)
        {
        }
    }
    class Posts extends \WPML\TM\Jobs\Dispatch\Elements
    {
        public static function dispatch(callable $sendBatch, \WPML\TM\Jobs\Dispatch\Messages $messages, callable $buildBatch, $data, $type = 'post')
        {
        }
        protected static function filterElements(\WPML\TM\Jobs\Dispatch\Messages $messages, $postsData, $targetLanguages)
        {
        }
        private static function getPost($postId)
        {
        }
    }
}
namespace {
    class WPML_TM_Translator_Note
    {
        const META_FIELD_KEY = '_icl_translator_note';
        public static function get($post_id)
        {
        }
        public static function update($post_id, $note)
        {
        }
    }
    class WPML_Sticky_Posts_Lang_Filter
    {
        /** @var SitePress */
        private $sitepress;
        /** @var WPML_Post_Translation */
        private $post_translation;
        /** @var array */
        private $post_valid_in_all_langs_cache = array();
        /**
         * @param SitePress             $sitepress
         * @param WPML_Post_Translation $post_translation
         */
        public function __construct(\SitePress $sitepress, \WPML_Post_Translation $post_translation)
        {
        }
        /**
         * @param array $posts
         * @param string $lang
         *
         * @return array
         */
        public function filter_by_language(array $posts, $lang)
        {
        }
        /**
         * @param string $post_type
         *
         * @return bool
         */
        private function is_post_type_valid_in_any_language($post_type)
        {
        }
    }
    class WPML_Sticky_Posts_Sync
    {
        /** @var SitePress */
        private $sitepress;
        /** @var  WPML_Post_Translation $post_translation */
        private $post_translation;
        /** @var WPML_Sticky_Posts_Lang_Filter */
        private $populate_lang_option;
        /**
         * @param SitePress                     $sitepress
         * @param WPML_Post_Translation         $post_translation
         * @param WPML_Sticky_Posts_Lang_Filter $populate_lang_option
         */
        public function __construct(\SitePress $sitepress, \WPML_Post_Translation $post_translation, \WPML_Sticky_Posts_Lang_Filter $populate_lang_option)
        {
        }
        /**
         * It returns only those sticky posts which belong to a current language
         *
         * @return array|false
         */
        public function pre_option_sticky_posts_filter()
        {
        }
        /**
         * Ensure that the original main `sticky_posts` option contains sticky posts from ALL languages
         *
         * @param array $posts
         *
         * @return array
         */
        public function pre_update_option_sticky_posts($posts)
        {
        }
        /**
         * It marks as `sticky` all posts which are translation of the post or have the same original post.
         * Basically, it means that they have the same trid in icl_translations table.
         *
         * @param int $post_id
         */
        public function on_post_stuck($post_id)
        {
        }
        /**
         * It un-marks as `sticky` all posts which are translation of the post or have the same original post.
         *
         * @param int $post_id
         */
        public function on_post_unstuck($post_id)
        {
        }
        /**
         * It returns an original, unfiltered `sticky_posts` option which contains sticky posts from ALL languages
         *
         * @return array|false
         */
        public function get_unfiltered_sticky_posts_option()
        {
        }
        /**
         * @param int $post_id
         *
         * @return array
         */
        private function get_post_translations($post_id)
        {
        }
        /**
         * @param int $post_id
         */
        private function add_post_id_to_original_option($post_id)
        {
        }
        /**
         * @param string $option
         * @param int    $post_id
         */
        private function add_post_id($option, $post_id)
        {
        }
        /**
         * @param int $post_id
         */
        private function remove_post_id_from_original_option($post_id)
        {
        }
        /**
         * @param int      $post_id
         * @param callable $callback
         */
        private function update_original_option($post_id, $callback)
        {
        }
        /**
         * @param string $option
         * @param int    $post_id
         */
        private function remove_post_id($option, $post_id)
        {
        }
        /**
         * @param string $lang
         *
         * @return array
         */
        private function get_option_by_lang($lang)
        {
        }
    }
    class WPML_Sticky_Posts_Loader
    {
        /** @var SitePress */
        private $sitepress;
        /**
         * @param SitePress $sitepress
         */
        public function __construct(\SitePress $sitepress)
        {
        }
        public function add_hooks()
        {
        }
    }
    class WPML_TM_Promotions
    {
        /**
         * @var \WPML_WP_API
         */
        private $wpml_wp_api;
        /**
         * WPML_TM_Promotions constructor.
         *
         * @param \WPML_WP_API $wpml_wp_api
         */
        public function __construct($wpml_wp_api)
        {
        }
        public function promote_wcml_message()
        {
        }
    }
}
namespace WPML\AdminMenu {
    class Redirect implements \IWPML_Backend_Action
    {
        public function add_hooks()
        {
        }
        public function redirectOldMenuUrls()
        {
        }
    }
}
namespace {
    /**
     * @author OnTheGo Systems
     */
    class WPML_Admin_Menu_Item
    {
        private $capability;
        private $function;
        private $menu_slug;
        private $menu_title;
        private $order;
        private $page_title;
        private $parent_slug;
        /**
         * WPML_Menu_Item constructor.
         *
         * @param array $args
         *
         * @throws \InvalidArgumentException
         */
        public function __construct(array $args = \null)
        {
        }
        /**
         * Required by `usort` to remove duplicates, as casts array elements to string
         *
         * @return string
         */
        public function __toString()
        {
        }
        public function build($root_slug)
        {
        }
        /**
         * @return mixed
         */
        public function get_parent_slug()
        {
        }
        /**
         * @param mixed $parent_slug
         */
        public function set_parent_slug($parent_slug)
        {
        }
        /**
         * @return mixed
         */
        public function get_page_title()
        {
        }
        /**
         * @param mixed $page_title
         */
        public function set_page_title($page_title)
        {
        }
        /**
         * @return mixed
         */
        public function get_menu_title()
        {
        }
        /**
         * @param mixed $menu_title
         */
        public function set_menu_title($menu_title)
        {
        }
        /**
         * @return mixed
         */
        public function get_capability()
        {
        }
        /**
         * @param mixed $capability
         */
        public function set_capability($capability)
        {
        }
        /**
         * @return mixed
         */
        public function get_menu_slug()
        {
        }
        /**
         * @param mixed $menu_slug
         */
        public function set_menu_slug($menu_slug)
        {
        }
        /**
         * @return mixed
         */
        public function get_function()
        {
        }
        /**
         * @param mixed $function
         */
        public function set_function($function)
        {
        }
        /**
         * @return mixed
         */
        public function get_order()
        {
        }
        /**
         * @param mixed $order
         */
        public function set_order($order)
        {
        }
        /**
         * @return string
         */
        private function serialize()
        {
        }
    }
    class WPML_Admin_Menu_Root
    {
        private $capability;
        private $function;
        private $icon_url;
        private $items = array();
        private $menu_id;
        private $menu_title;
        private $page_title;
        private $position;
        /**
         * WPML_Menu_Root constructor.
         *
         * @param array|null $args
         *
         * @throws \InvalidArgumentException
         */
        public function __construct(array $args = \null)
        {
        }
        public function build()
        {
        }
        private function adjust_items()
        {
        }
        /**
         * @return string
         */
        public function get_menu_slug()
        {
        }
        /**
         * @return string
         */
        public function get_page_title()
        {
        }
        /**
         * @param string $page_title
         */
        public function set_page_title($page_title)
        {
        }
        /**
         * @return string
         */
        public function get_menu_id()
        {
        }
        /**
         * @return string
         */
        public function get_menu_title()
        {
        }
        /**
         * @param string $menu_title
         */
        public function set_menu_title($menu_title)
        {
        }
        /**
         * @return string
         */
        public function get_capability()
        {
        }
        /**
         * @param string $capability
         */
        public function set_capability($capability)
        {
        }
        /**
         * @return null|callable
         */
        public function get_function()
        {
        }
        /**
         * @param null|callable $function
         */
        public function set_function($function)
        {
        }
        /**
         * @return string
         */
        public function get_icon_url()
        {
        }
        /**
         * @param string $icon_url
         */
        public function set_icon_url($icon_url)
        {
        }
        /**
         * @return array
         */
        public function get_items()
        {
        }
        /**
         * @return int
         */
        public function get_position()
        {
        }
        /**
         * @param int $position
         */
        public function set_position($position)
        {
        }
        public function init_hooks()
        {
        }
        /**
         * @param WPML_Admin_Menu_Item $item
         *
         * @return WPML_Admin_Menu_Item
         */
        public function menu_order_fixer(\WPML_Admin_Menu_Item $item)
        {
        }
        /**
         * @param WPML_Admin_Menu_Item $a
         * @param WPML_Admin_Menu_Item $b
         *
         * @return int
         */
        public function menu_order_sorter(\WPML_Admin_Menu_Item $a, \WPML_Admin_Menu_Item $b)
        {
        }
        /**
         * @param WPML_Admin_Menu_Item|array $item
         *
         * @throws \InvalidArgumentException
         */
        public function register_menu_item($item)
        {
        }
        public function add_item(\WPML_Admin_Menu_Item $item)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Main_Admin_Menu
    {
        const MENU_ORDER_LANGUAGES = 100;
        const MENU_ORDER_THEMES_AND_PLUGINS_LOCALIZATION = 200;
        const MENU_ORDER_TAXONOMY_TRANSLATION = 900;
        const MENU_ORDER_SETTINGS = 9900;
        const MENU_ORDER_MAX = 10000;
        /** @var string */
        private $languages_menu_slug;
        /**
         * @var WPML_Admin_Menu_Root
         */
        private $root;
        /**
         * @var SitePress
         */
        private $sitepress;
        /**
         * WPML_Menu_Main constructor.
         *
         * @param SitePress $sitepress
         *
         * @throws \InvalidArgumentException
         */
        public function __construct(\SitePress $sitepress)
        {
        }
        /**
         * @throws \InvalidArgumentException
         */
        public function configure()
        {
        }
        /**
         * @throws \InvalidArgumentException
         */
        private function languages()
        {
        }
        private function wizard()
        {
        }
        /**
         * @return bool
         */
        private function is_wpml_setup_completed()
        {
        }
        /**
         * @throws \InvalidArgumentException
         */
        private function themes_and_plugins_localization()
        {
        }
        /**
         * @return bool
         */
        private function is_tm_active()
        {
        }
        /**
         * @throws \InvalidArgumentException
         */
        private function translation_options()
        {
        }
        /**
         * @throws \InvalidArgumentException
         */
        private function taxonomy_translation()
        {
        }
        /**
         * @throws \InvalidArgumentException
         */
        private function support()
        {
        }
        /**
         * @param string $parent_slug
         *
         * @throws \InvalidArgumentException
         */
        private function troubleshooting_menu($parent_slug)
        {
        }
        /**
         * @param string $parent_slug
         *
         * @throws \InvalidArgumentException
         */
        private function debug_information_menu($parent_slug)
        {
        }
    }
    class WPML_TM_Ajax_Factory extends \WPML_Ajax_Factory
    {
        private $wpdb;
        private $sitepress;
        private $post_data;
        private $wp_api;
        public function __construct($wpdb, $sitepress, $post_data)
        {
        }
        public function get_class_names()
        {
        }
        public function create($class_name)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Custom_XML_UI_Hooks
    {
        /** @var WPML_Custom_XML_UI_Resources  */
        private $resources;
        public function __construct(\WPML_Custom_XML_UI_Resources $resources)
        {
        }
        public function init()
        {
        }
        public function add_items($tab_items)
        {
        }
        public function build_content()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Custom_XML_UI_Resources
    {
        private $wpml_wp_api;
        /**
         * @var string
         */
        private $wpml_core_url;
        function __construct(\WPML_WP_API $wpml_wp_api)
        {
        }
        function admin_enqueue_scripts()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Custom_XML_Factory
    {
        public function create_resources(\WPML_WP_API $wpml_wp_api)
        {
        }
    }
    class WPML_TP_Lock
    {
        private $lockable_endpoints = array('/jobs/{job_id}/xliff.json');
        /** @var WPML_WP_API $wp_api */
        private $wp_api;
        public function __construct(\WPML_WP_API $wp_api)
        {
        }
        /**
         * @param string $url
         *
         * @return bool
         */
        public function is_locked($url)
        {
        }
        /**
         * @return string|false
         */
        public function get_locker_reason()
        {
        }
        /**
         * @param string $url
         *
         * @return bool
         */
        private function is_lockable($url)
        {
        }
    }
    class WPML_TP_Lock_Factory
    {
        public function create()
        {
        }
    }
    class WPML_TP_Lock_Notice_Factory implements \IWPML_Backend_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_TP_Lock_Notice implements \IWPML_Action
    {
        const NOTICE_GROUP = 'tp-lock';
        const NOTICE_LOCKED = 'locked';
        /** @var WPML_TP_Lock $tp_lock */
        private $tp_lock;
        /** @var WPML_Notices $notices */
        private $notices;
        public function __construct(\WPML_TP_Lock $tp_lock, \WPML_Notices $notices)
        {
        }
        public function add_hooks()
        {
        }
        public function handle_notice()
        {
        }
    }
    class WPML_TranslationProxy_Communication_Log
    {
        private $keys_to_block;
        private $sitepress;
        public function __construct(\SitePress $sitepress)
        {
        }
        public function log_call($url, $params)
        {
        }
        public function get_keys_to_block()
        {
        }
        public function log_response($response)
        {
        }
        public function log_error($message)
        {
        }
        public function log_xml_rpc($data)
        {
        }
        public function get_log()
        {
        }
        public function clear_log()
        {
        }
        public function is_logging_enabled()
        {
        }
        /**
         * @param string|array|stdClass $params
         *
         * @return array|stdClass
         */
        public function sanitize_data($params)
        {
        }
        /**
         * @param string                $key
         * @param string|array|stdClass $item
         *
         * @return string|array|stdClass
         */
        private function sanitize_data_item($key, $item)
        {
        }
        /**
         * @param $url
         *
         * @return mixed
         */
        public function sanitize_url($url)
        {
        }
        public function set_logging_state($state)
        {
        }
        public function add_com_log_link()
        {
        }
        private function now()
        {
        }
        private function add_to_log($string)
        {
        }
        private function save_log($log)
        {
        }
        /**
         * @param mixed $item
         *
         * @return bool
         */
        private function is_json($item)
        {
        }
    }
}
namespace WPML\TM\TranslationProxy\Services {
    class Authorization
    {
        /** @var Storage */
        private $storage;
        /** @var Manager */
        private $projectManager;
        /**
         * @param Storage $storage
         * @param Manager $projectManager
         */
        public function __construct(\WPML\TM\TranslationProxy\Services\Storage $storage, \WPML\TM\TranslationProxy\Services\Project\Manager $projectManager)
        {
        }
        /**
         * @param \stdClass $credentials
         *
         * @throws \RuntimeException
         * @throws \WPML_TP_API_Exception
         */
        public function authorize(\stdClass $credentials)
        {
        }
        /**
         * @param \stdClass $credentials
         *
         * @throws \WPML_TP_API_Exception
         */
        public function updateCredentials(\stdClass $credentials)
        {
        }
        /**
         * @throws \RuntimeException
         */
        public function deauthorize()
        {
        }
        /**
         * @return \stdClass
         * @throws \RuntimeException
         */
        private function getCurrentService()
        {
        }
    }
    class Storage
    {
        /** @var  \SitePress $sitepress */
        private $sitepress;
        /**
         * @param \SitePress $sitepress
         */
        public function __construct(\SitePress $sitepress)
        {
        }
        /**
         * Gets the current translation service
         *
         * @return bool|\stdClass
         */
        public function getCurrentService()
        {
        }
        /**
         * Saves the input service as the current translation service setting.
         *
         * @param \stdClass $service
         */
        public function setCurrentService(\stdClass $service)
        {
        }
    }
    class AuthorizationFactory
    {
        /**
         * @return Authorization
         * @throws \Auryn\InjectionException
         */
        public function create()
        {
        }
    }
}
namespace WPML\TM\TranslationProxy\Services\Project {
    class Storage
    {
        /** @var \SitePress */
        private $sitepress;
        /**
         * @param \SitePress $sitepress
         */
        public function __construct(\SitePress $sitepress)
        {
        }
        /**
         * @param \stdClass $service
         *
         * @return Project|null
         */
        public function getByService(\stdClass $service)
        {
        }
        /**
         * @param \stdClass $service
         * @param Project   $project
         */
        public function save(\stdClass $service, \WPML\TM\TranslationProxy\Services\Project\Project $project)
        {
        }
        /**
         * @return Collection
         */
        public function getProjects()
        {
        }
    }
    class Manager
    {
        /** @var \WPML_TP_Project_API */
        private $projectApi;
        /** @var Storage */
        private $projectStorage;
        /** @var SiteDetails */
        private $siteDetails;
        /**
         * @param \WPML_TP_Project_API $projectApi
         * @param Storage              $projectStorage
         * @param SiteDetails          $siteDetails
         */
        public function __construct(\WPML_TP_Project_API $projectApi, \WPML\TM\TranslationProxy\Services\Project\Storage $projectStorage, \WPML\TM\TranslationProxy\Services\Project\SiteDetails $siteDetails)
        {
        }
        /**
         * @param \stdClass $service
         *
         * @return Project
         * @throws \WPML_TP_API_Exception
         */
        public function create(\stdClass $service)
        {
        }
        /**
         * @param \stdClass $service
         * @param \stdClass $credentials
         *
         * @return Project|null
         * @throws \WPML_TP_API_Exception
         */
        public function updateCredentials(\stdClass $service, \stdClass $credentials)
        {
        }
        /**
         * @param \stdClass $service
         *
         * @return Project
         * @throws \WPML_TP_API_Exception
         */
        private function fromTranslationProxy(\stdClass $service)
        {
        }
        /**
         * @param \stdClass $service
         * @param \stdClass $credentials
         *
         * @return \stdClass
         */
        private function createServiceWithNewCredentials(\stdClass $service, \stdClass $credentials)
        {
        }
    }
    class SiteDetails
    {
        /** @var \SitePress */
        private $sitepress;
        /**
         * @param \SitePress $sitepress
         */
        public function __construct(\SitePress $sitepress)
        {
        }
        /**
         * @return string
         */
        public function getDeliveryMethod()
        {
        }
        /**
         * @return array
         */
        public function getBlogInfo()
        {
        }
        /**
         * @return array
         */
        public function getClientData()
        {
        }
    }
    class Project
    {
        /** @var int */
        public $id;
        /** @var string */
        public $accessKey;
        /** @var string */
        public $tsId;
        /** @var string */
        public $tsAccessKey;
        /** @var \stdClass */
        public $extraFields;
        /**
         * @return array
         */
        public function toArray()
        {
        }
        /**
         * @param array $data
         *
         * @return Project
         */
        public static function fromArray(array $data)
        {
        }
        public static function fromResponse(\stdClass $response)
        {
        }
    }
}
namespace {
    abstract class WPML_TP_Project_User
    {
        /** @var TranslationProxy_Project $project */
        protected $project;
        /**
         * WPML_TP_Project_User constructor.
         *
         * @param TranslationProxy_Project $project
         */
        public function __construct(&$project)
        {
        }
    }
    class WPML_TM_Sync_Jobs_Revision
    {
        /** @var WPML_TM_Jobs_Repository */
        private $jobs_repository;
        /** @var WPML_TP_Jobs_API */
        private $tp_api;
        /**
         * WPML_TM_Sync_Jobs_Revision constructor.
         *
         * @param WPML_TM_Jobs_Repository $jobs_repository
         * @param WPML_TP_Jobs_API        $tp_api
         */
        public function __construct(\WPML_TM_Jobs_Repository $jobs_repository, \WPML_TP_Jobs_API $tp_api)
        {
        }
        /**
         * @return WPML_TM_Job_Entity[]
         * @throws WPML_TP_API_Exception
         */
        public function sync()
        {
        }
    }
    class WPML_TP_Sync_Jobs
    {
        /** @var WPML_TM_Sync_Jobs_Status */
        private $jobs_status_sync;
        /** @var WPML_TM_Sync_Jobs_Revision */
        private $jobs_revision_sync;
        /** @var WPML_TP_Sync_Update_Job */
        private $update_job;
        /**
         * WPML_TP_Sync_Jobs constructor.
         *
         * @param WPML_TM_Sync_Jobs_Status   $jobs_status_sync
         * @param WPML_TM_Sync_Jobs_Revision $jobs_revision_sync
         * @param WPML_TP_Sync_Update_Job    $update_job
         */
        public function __construct(\WPML_TM_Sync_Jobs_Status $jobs_status_sync, \WPML_TM_Sync_Jobs_Revision $jobs_revision_sync, \WPML_TP_Sync_Update_Job $update_job)
        {
        }
        /**
         * @return WPML_TM_Jobs_Collection
         * @throws WPML_TP_API_Exception
         */
        public function sync()
        {
        }
    }
    class WPML_TP_Sync_Update_Job
    {
        private $strategies = array(\WPML_TM_Job_Entity::POST_TYPE => 'update_post_job', \WPML_TM_Job_Entity::STRING_TYPE => 'update_string_job', \WPML_TM_Job_Entity::PACKAGE_TYPE => 'update_post_job', \WPML_TM_Job_Entity::STRING_BATCH => 'update_post_job');
        /** @var wpdb */
        private $wpdb;
        /** @var SitePress */
        private $sitepress;
        /**
         * @param wpdb $wpdb
         */
        public function __construct(\wpdb $wpdb, \SitePress $sitepress)
        {
        }
        /**
         * @param WPML_TM_Job_Entity $job
         *
         * @return WPML_TM_Job_Entity
         */
        public function update_state(\WPML_TM_Job_Entity $job)
        {
        }
        /**
         * @param WPML_TM_Job_Entity $job
         *
         * @return WPML_TM_Job_Entity
         */
        private function update_string_job(\WPML_TM_Job_Entity $job)
        {
        }
        /**
         * @param WPML_TM_Job_Entity $job
         *
         * @return WPML_TM_Job_Entity
         */
        private function update_post_job(\WPML_TM_Job_Entity $job)
        {
        }
        private function get_job_prev_status($job_id)
        {
        }
        /**
         * In the db, we store the exact json format that we get from TS. It includes an extra ts_status key
         *
         * @param WPML_TM_Job_Entity $job
         *
         * @return string
         */
        private function get_ts_status_in_ts_format(\WPML_TM_Job_Entity $job)
        {
        }
    }
    class WPML_TP_Sync_Orphan_Jobs_Factory
    {
        /**
         * @return WPML_TP_Sync_Orphan_Jobs
         */
        public function create()
        {
        }
    }
    class WPML_TP_Sync_Ajax_Handler
    {
        const AJAX_ACTION = 'wpml-tp-sync-job-states';
        /** @var WPML_TP_Sync_Jobs */
        private $tp_sync;
        /** @var WPML_TM_Sync_Installer_Wrapper */
        private $installer_wrapper;
        /** @var WPML_TM_Last_Picked_Up $wpml_tm_last_picked_up */
        private $wpml_tm_last_picked_up;
        /**
         * WPML_TP_Sync_Jobs constructor.
         *
         * @param WPML_TP_Sync_Jobs              $tp_sync
         * @param WPML_TM_Sync_Installer_Wrapper $installer_wrapper
         * @param WPML_TM_Last_Picked_Up         $wpml_tm_last_picked_up
         */
        public function __construct(\WPML_TP_Sync_Jobs $tp_sync, \WPML_TM_Sync_Installer_Wrapper $installer_wrapper, \WPML_TM_Last_Picked_Up $wpml_tm_last_picked_up)
        {
        }
        public function add_hooks()
        {
        }
        public function handle()
        {
        }
        /**
         * @param WPML_TM_Job_Entity $job
         *
         * @return array
         */
        public function map_job_to_result(\WPML_TM_Job_Entity $job)
        {
        }
    }
    class WPML_TM_Sync_Jobs_Status
    {
        /** @var WPML_TM_Jobs_Repository */
        private $jobs_repository;
        /** @var WPML_TP_Jobs_API */
        private $tp_api;
        /**
         * WPML_TM_Sync_Jobs_Status constructor.
         *
         * @param WPML_TM_Jobs_Repository $jobs_repository
         * @param WPML_TP_Jobs_API        $tp_api
         */
        public function __construct(\WPML_TM_Jobs_Repository $jobs_repository, \WPML_TP_Jobs_API $tp_api)
        {
        }
        /**
         * @return WPML_TM_Jobs_Collection
         * @throws WPML_TP_API_Exception
         */
        public function sync()
        {
        }
        /**
         * @param WPML_TM_Jobs_Collection $jobs
         *
         * @return WPML_TM_Jobs_Collection
         * @throws WPML_TP_API_Exception
         */
        private function update_tp_state_of_jobs(\WPML_TM_Jobs_Collection $jobs)
        {
        }
        /**
         * @param WPML_TM_Jobs_Collection $jobs
         *
         * @return array
         */
        private function extract_tp_id_from_jobs(\WPML_TM_Jobs_Collection $jobs)
        {
        }
    }
    class WPML_TM_Sync_Installer_Wrapper
    {
        /**
         * @return bool
         */
        public function is_wpml_registered()
        {
        }
    }
    class WPML_TP_Sync_Orphan_Jobs
    {
        /** @var WPML_TM_Jobs_Repository */
        private $jobs_repository;
        /** @var WPML_TP_Sync_Update_Job */
        private $update_job;
        /**
         * @param WPML_TM_Jobs_Repository $jobs_repository
         * @param WPML_TP_Sync_Update_Job $update_job
         */
        public function __construct(\WPML_TM_Jobs_Repository $jobs_repository, \WPML_TP_Sync_Update_Job $update_job)
        {
        }
        /**
         * @return WPML_TM_Jobs_Collection
         */
        public function cancel_orphans()
        {
        }
        /**
         * @param WPML_TM_Job_Entity $job
         *
         * @return WPML_TM_Job_Entity
         */
        public function cancel_job(\WPML_TM_Job_Entity $job)
        {
        }
    }
    class WPML_TP_String_Job extends \WPML_WPDB_User
    {
        /** @var  WPML_Translation_Basket $basket */
        private $basket;
        /** @var WPML_Translation_Job_Factory $job_factory */
        private $job_factory;
        /**
         * WPML_TP_String_Job constructor.
         *
         * @param wpdb                         $wpdb
         * @param WPML_Translation_Basket      $basket
         * @param WPML_Translation_Job_Factory $job_factory
         */
        public function __construct(&$wpdb, &$basket, &$job_factory)
        {
        }
        function send_strings_to_translation_service($string_ids, $target_language, $translator_id)
        {
        }
    }
    class WPML_Update_PickUp_Method
    {
        private $sitepress;
        public function __construct($sitepress)
        {
        }
        public function update_pickup_method($data, $project = \false)
        {
        }
    }
    class WPML_TP_Translation_Collection implements \IteratorAggregate
    {
        /** @var WPML_TP_Translation[] */
        private $translations;
        /** @var string */
        private $source_language;
        /** @var string */
        private $target_language;
        /**
         * @param WPML_TP_Translation[] $translations
         * @param string                $source_language
         * @param string                $target_language
         */
        public function __construct(array $translations, $source_language, $target_language)
        {
        }
        /**
         * @return string
         */
        public function get_source_language()
        {
        }
        /**
         * @return string
         */
        public function get_target_language()
        {
        }
        public function getIterator()
        {
        }
        /**
         * @return array
         */
        public function to_array()
        {
        }
    }
    class WPML_TP_Translations_Repository
    {
        /** @var WPML_TP_XLIFF_API */
        private $xliff_api;
        /** @var WPML_TM_Jobs_Repository */
        private $jobs_repository;
        /**
         * @param WPML_TP_XLIFF_API       $xliff_api
         * @param WPML_TM_Jobs_Repository $jobs_repository
         */
        public function __construct(\WPML_TP_XLIFF_API $xliff_api, \WPML_TM_Jobs_Repository $jobs_repository)
        {
        }
        /**
         * @param int  $job_id
         * @param int  $job_type
         * @param bool $parse When true, it returns the parsed translation, otherwise, it returns the raw XLIFF.
         *
         * @return WPML_TP_Translation_Collection|string
         * @throws WPML_TP_API_Exception|InvalidArgumentException
         */
        public function get_job_translations($job_id, $job_type, $parse = \true)
        {
        }
        /**
         * @param WPML_TM_Job_Entity $job
         * @param bool               $parse When true, it returns the parsed translation, otherwise, it returns the raw XLIFF.
         *
         * @return WPML_TP_Translation_Collection|string
         * @throws WPML_TP_API_Exception
         */
        public function get_job_translations_by_job_entity(\WPML_TM_Job_Entity $job, $parse = \true)
        {
        }
    }
    class WPML_TP_Apply_Translations
    {
        /** @var WPML_TM_Jobs_Repository */
        private $jobs_repository;
        /** @var WPML_TP_Apply_Single_Job */
        private $apply_single_job;
        /** @var WPML_TP_Sync_Jobs */
        private $tp_sync;
        /**
         * @param WPML_TM_Jobs_Repository  $jobs_repository
         * @param WPML_TP_Apply_Single_Job $apply_single_job
         * @param WPML_TP_Sync_Jobs        $tp_sync
         */
        public function __construct(\WPML_TM_Jobs_Repository $jobs_repository, \WPML_TP_Apply_Single_Job $apply_single_job, \WPML_TP_Sync_Jobs $tp_sync)
        {
        }
        /**
         * @param array $params
         *
         * @return WPML_TM_Jobs_Collection
         * @throws WPML_TP_API_Exception
         */
        public function apply(array $params)
        {
        }
        /**
         * @param WPML_TM_Jobs_Collection $jobs
         *
         * @return bool
         */
        private function has_in_progress_jobs(\WPML_TM_Jobs_Collection $jobs)
        {
        }
        /**
         * @param array $params
         *
         * @return array|WPML_TM_Jobs_Collection
         */
        private function get_jobs(array $params)
        {
        }
        /**
         * @param int    $original_element_id
         * @param string $element_type
         *
         * @return WPML_TM_Jobs_Collection
         */
        private function get_jobs_by_original_element($original_element_id, $element_type)
        {
        }
        /**
         * @param array $params
         *
         * @return WPML_TM_Jobs_Collection
         */
        private function get_jobs_by_ids(array $params)
        {
        }
        /**
         * @return WPML_TM_Jobs_Collection
         */
        private function get_all_ready_jobs()
        {
        }
        /**
         * @param WPML_TM_Jobs_Collection $jobs
         *
         * @return WPML_TM_Jobs_Collection
         * @throws WPML_TP_API_Exception
         */
        private function sync_jobs(\WPML_TM_Jobs_Collection $jobs)
        {
        }
    }
    interface WPML_TP_Apply_Translation_Strategy
    {
        /**
         * @param WPML_TM_Job_Entity             $job
         * @param WPML_TP_Translation_Collection $translations
         *
         * @return void
         */
        public function apply(\WPML_TM_Job_Entity $job, \WPML_TP_Translation_Collection $translations);
    }
    class WPML_TP_Apply_Translation_Post_Strategy implements \WPML_TP_Apply_Translation_Strategy
    {
        /** @var WPML_TP_Jobs_API */
        private $jobs_api;
        /** @var wpdb */
        private $wpdb;
        /**
         * @param WPML_TP_Jobs_API $jobs_api
         */
        public function __construct(\WPML_TP_Jobs_API $jobs_api)
        {
        }
        /**
         * @param WPML_TM_Job_Entity             $job
         * @param WPML_TP_Translation_Collection $translations
         *
         * @return void
         * @throws WPML_TP_API_Exception
         */
        public function apply(\WPML_TM_Job_Entity $job, \WPML_TP_Translation_Collection $translations)
        {
        }
        /**
         * @param WPML_TM_Job_Entity             $job
         * @param WPML_TP_Translation_Collection $translations
         *
         * @return array
         */
        private function build_data(\WPML_TM_Post_Job_Entity $job, \WPML_TP_Translation_Collection $translations)
        {
        }
    }
    class WPML_TP_Apply_Translation_Strategies
    {
        /** @var WPML_TP_Apply_Translation_Post_Strategy */
        private $post_strategy;
        /** @var WPML_TP_Apply_Translation_String_Strategy */
        private $string_strategy;
        /** @var wpdb */
        private $wpdb;
        /**
         * @param wpdb $wpdb
         */
        public function __construct(\wpdb $wpdb)
        {
        }
        /**
         * @param WPML_TM_Job_Entity $job
         *
         * @return WPML_TP_Apply_Translation_Strategy
         */
        public function get(\WPML_TM_Job_Entity $job)
        {
        }
        /**
         * @return WPML_TP_Apply_Translation_Post_Strategy
         */
        private function get_post_strategy()
        {
        }
        /**
         * @return WPML_TP_Apply_Translation_String_Strategy
         */
        private function get_string_strategy()
        {
        }
    }
    class WPML_TP_Apply_Single_Job
    {
        /** @var WPML_TP_Translations_Repository */
        private $translations_repository;
        /** @var WPML_TP_Apply_Translation_Strategies */
        private $strategy_dispatcher;
        /**
         * @param WPML_TP_Translations_Repository      $translations_repository
         * @param WPML_TP_Apply_Translation_Strategies $strategy_dispatcher
         */
        public function __construct(\WPML_TP_Translations_Repository $translations_repository, \WPML_TP_Apply_Translation_Strategies $strategy_dispatcher)
        {
        }
        /**
         * @param WPML_TM_Job_Entity $job
         *
         * @return WPML_TM_Job_Entity
         * @throws WPML_TP_API_Exception
         */
        public function apply(\WPML_TM_Job_Entity $job)
        {
        }
    }
    class WPML_TP_Apply_Translation_String_Strategy implements \WPML_TP_Apply_Translation_Strategy
    {
        /** @var WPML_TP_Jobs_API */
        private $jobs_api;
        /** @var wpdb */
        private $wpdb;
        /**
         * @param WPML_TP_Jobs_API $jobs_api
         * @param wpdb             $wpdb
         */
        public function __construct(\WPML_TP_Jobs_API $jobs_api, \wpdb $wpdb)
        {
        }
        /**
         * @param WPML_TM_Job_Entity             $job
         * @param WPML_TP_Translation_Collection $translations
         *
         * @return void
         * @throws WPML_TP_API_Exception
         */
        public function apply(\WPML_TM_Job_Entity $job, \WPML_TP_Translation_Collection $translations)
        {
        }
        /**
         * @param WPML_TM_Job_Entity $job
         * @param int                $status
         */
        private function update_local_job_status(\WPML_TM_Job_Entity $job, $status)
        {
        }
        private function map_translations_to_legacy_array(\WPML_TP_Translation_Collection $translations)
        {
        }
    }
    class WPML_TP_Translation
    {
        /** @var string */
        private $field;
        /** @var string */
        private $source;
        /** @var string */
        private $target;
        /**
         * @param string $field
         * @param string $source
         * @param string $target
         */
        public function __construct($field, $source, $target)
        {
        }
        /**
         * @return string
         */
        public function get_field()
        {
        }
        /**
         * @return string
         */
        public function get_source()
        {
        }
        /**
         * @return string
         */
        public function get_target()
        {
        }
        public function to_array()
        {
        }
    }
    /**
     * Class WPML_TM_CMS_ID
     */
    class WPML_TM_CMS_ID extends \WPML_TM_Record_User
    {
        private $cms_id_parts_glue = '_';
        private $cms_id_parts_fallback_glue = '|||';
        /** @var  WPML_Translation_Job_Factory $tm_job_factory */
        private $job_factory;
        /** @var wpdb $wpdb */
        private $wpdb;
        /**
         * WPML_TM_CMS_ID constructor.
         *
         * @param WPML_TM_Records              $tm_records
         * @param WPML_Translation_Job_Factory $job_factory
         */
        public function __construct(&$tm_records, &$job_factory)
        {
        }
        /**
         * @param int    $post_id
         * @param string $post_type
         * @param string $source_language
         * @param string $target_language
         *
         * @return string
         */
        public function build_cms_id($post_id, $post_type, $source_language, $target_language)
        {
        }
        /**
         * Returns the cms_id for a given job
         *
         * @param int $job_id
         *
         * @return false|string
         */
        function cms_id_from_job_id($job_id)
        {
        }
        /**
         * @param string $cms_id
         *
         * @return array;
         */
        public function parse_cms_id($cms_id)
        {
        }
        /**
         * @param string                        $cms_id
         * @param bool|TranslationProxy_Service $translation_service
         *
         * @return int|null translation id for the given cms_id's target
         */
        public function get_translation_id($cms_id, $translation_service = \false)
        {
        }
        private function maybe_cleanup_broken_row($translation, $translation_service)
        {
        }
        /**
         * @param $cms_id
         *
         * @return bool
         */
        private function is_standard_format($cms_id)
        {
        }
    }
    class WPML_Translation_Proxy_Networking
    {
        const API_VERSION = 1.1;
        /** @var WP_Http $http */
        private $http;
        /** @var WPML_TP_Lock $tp_lock */
        private $tp_lock;
        public function __construct(\WP_Http $http, \WPML_TP_Lock $tp_lock)
        {
        }
        /**
         * @param string    $url
         * @param array     $params
         * @param string    $method
         * @param bool|true $has_return_value
         * @param bool|true $json_response
         * @param bool|true $has_api_response
         *
         * @return array|mixed|stdClass|string
         * @throws WPMLTranslationProxyApiException
         */
        public function send_request($url, $params = array(), $method = 'GET', $has_return_value = \true, $json_response = \true, $has_api_response = \true)
        {
        }
        public function get_extra_fields_remote($project)
        {
        }
        /**
         * @param string $url
         * @param array  $params
         * @param string $method
         * @param bool   $has_return_value
         *
         * @throws \WPMLTranslationProxyApiException
         *
         * @return null|string
         */
        private function call_remote_api($url, $params, $method, $has_return_value = \true)
        {
        }
        private function get_exception_message($url, $method, $context, $response)
        {
        }
        /**
         * @param array  $params request parameters
         * @param string $method HTTP request method
         *
         * @return array
         */
        private function filter_request_params($params, $method)
        {
        }
    }
    class WPML_TranslationProxy_Com_Log
    {
        private static $wrapped_class;
        /**
         * @return WPML_TranslationProxy_Communication_Log
         */
        private static function get_wrapped_class_instance()
        {
        }
        public static function log_call($url, $params)
        {
        }
        public static function get_keys_to_block()
        {
        }
        public static function log_response($response)
        {
        }
        public static function log_error($message)
        {
        }
        public static function log_xml_rpc($data)
        {
        }
        public static function get_log()
        {
        }
        public static function clear_log()
        {
        }
        public static function is_logging_enabled()
        {
        }
        /**
         * @param string|array|stdClass $params
         *
         * @return array|stdClass
         */
        public static function sanitize_data($params)
        {
        }
        /**
         * @param $url
         *
         * @return mixed
         */
        public static function sanitize_url($url)
        {
        }
        public static function set_logging_state($state)
        {
        }
        public static function add_com_log_link()
        {
        }
    }
    /**
     * Class WPML_TP_Translator
     */
    class WPML_TP_Translator
    {
        /**
         * Return translator status array.
         *
         * @param bool $force
         *
         * @return array
         */
        public function get_icl_translator_status($force = \false)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TP_Extra_Field_Display
    {
        private $fields_with_items = array('select', 'radio', 'checkbox');
        /**
         * WPML_TP_Extra_Field_Display constructor.
         */
        public function __construct()
        {
        }
        public function render($field)
        {
        }
        /**
         * @param $field
         *
         * @return bool
         */
        private function must_render($field)
        {
        }
    }
    class WPML_TP_Job_States
    {
        const RECEIVED = 'received';
        const WAITING_TRANSLATIONS = 'waiting_translation';
        const TRANSLATION_READY = 'translation_ready';
        const DELIVERED = 'delivered';
        const CANCELLED = 'cancelled';
        const ANY = 'any';
        /**
         * @return array
         */
        public static function get_possible_states()
        {
        }
        /**
         * @return string
         */
        public static function get_default_state()
        {
        }
        /**
         * @return array
         */
        public static function get_finished_states()
        {
        }
        public static function map_tp_state_to_local($tp_state)
        {
        }
    }
    abstract class WPML_TP_API
    {
        /** @var WPML_TP_API_Client */
        protected $client;
        /** @var WPML_TP_Project */
        protected $project;
        /** @var WPML_TP_API_Log_Interface */
        protected $logger;
        public function __construct(\WPML_TP_API_Client $client, \WPML_TP_Project $project, \WPML_TP_API_Log_Interface $logger = \null)
        {
        }
        protected function log($action, array $params = array())
        {
        }
    }
    class WPML_TP_API_Client
    {
        /** @var string */
        private $proxy_url;
        /** @var WP_Http $http */
        private $http;
        /** @var WPML_TP_Lock $tp_lock */
        private $tp_lock;
        /** @var WPML_TP_HTTP_Request_Filter */
        private $request_filter;
        public function __construct($proxy_url, \WP_Http $http, \WPML_TP_Lock $tp_lock, \WPML_TP_HTTP_Request_Filter $request_filter)
        {
        }
        /**
         * @param WPML_TP_API_Request $request
         * @param bool                $raw_json_response
         *
         * @return array|mixed|stdClass|string
         * @throws WPML_TP_API_Exception
         */
        public function send_request(\WPML_TP_API_Request $request, $raw_json_response = \false)
        {
        }
        /**
         * @param WPML_TP_API_Request $request
         *
         * @return null|string
         */
        private function call_remote_api(\WPML_TP_API_Request $request)
        {
        }
        /**
         * @param array  $params request parameters
         * @param string $method HTTP request method
         *
         * @return array
         */
        private function filter_request_params($params, $method)
        {
        }
        /**
         * @param WPML_TP_API_Request $request
         * @param stdClass            $response
         *
         * @return mixed
         * @throws WPML_TP_API_Exception
         */
        private function handle_json_response(\WPML_TP_API_Request $request, $response)
        {
        }
        private function generate_error_message_from_status_field($response)
        {
        }
    }
    class WPML_TP_API_Exception extends \Exception
    {
        public function __construct($message, \WPML_TP_API_Request $request = \null, $response = \null)
        {
        }
        private function get_exception_message($url, $method, $params, $response)
        {
        }
        /**
         * @param array $params
         *
         * @return array mixed
         */
        private function filter_params($params)
        {
        }
    }
    class WPML_TP_Xliff_Parser
    {
        /**
         * @param SimpleXMLElement $xliff
         *
         * @return WPML_TP_Translation_Collection
         */
        public function parse(\SimpleXMLElement $xliff)
        {
        }
        /**
         * @param SimpleXMLElement $xliff_node
         * @param string           $field
         *
         * @return string
         */
        protected function get_cdata_value(\SimpleXMLElement $xliff_node, $field)
        {
        }
        /**
         * @param string $string
         *
         * @return string
         */
        public static function restore_new_line($string)
        {
        }
    }
    interface WPML_TP_API_Log_Interface
    {
        public function log($action, $data = array());
    }
    class WPML_TM_Log implements \WPML_TP_API_Log_Interface
    {
        const LOG_WP_OPTION = '_wpml_tp_api_Logger';
        const LOG_MAX_SIZE = 500;
        public function log($action, $data = array())
        {
        }
        private function update_log($log)
        {
        }
        public function flush_log()
        {
        }
        public function get_log_data()
        {
        }
    }
    class WPML_TP_API_Request
    {
        const API_VERSION = 1.1;
        /** @var string */
        private $url;
        /** @var array */
        private $params = array('api_version' => self::API_VERSION);
        /** @var string */
        private $method = 'GET';
        /** @var bool */
        private $has_api_response = \true;
        /**
         * @param string $url
         */
        public function __construct($url)
        {
        }
        /**
         * @param array $params
         */
        public function set_params(array $params)
        {
        }
        /**
         * @param string $method
         */
        public function set_method($method)
        {
        }
        /**
         * @param bool $has_api_response
         */
        public function set_has_api_response($has_api_response)
        {
        }
        /**
         * @return string
         */
        public function get_url()
        {
        }
        /**
         * @return array
         */
        public function get_params()
        {
        }
        /**
         * @return string
         */
        public function get_method()
        {
        }
        /**
         * @return bool
         */
        public function has_api_response()
        {
        }
        private function add_parameters_to_path($url, array $params)
        {
        }
        /**
         * @param $params_used_in_path
         * @param $url
         *
         * @return string
         */
        private function add_query_parameters($params_used_in_path, $url)
        {
        }
    }
    class WPML_TP_Job_Status
    {
        /** @var int */
        private $tp_id;
        /** @var int */
        private $batch_id;
        /** @var string */
        private $status;
        /** @var int */
        private $revision;
        /** @var  WPML_TM_Job_TS_Status|null */
        private $ts_status;
        /**
         * @param int                        $tp_id
         * @param int                        $batch_id
         * @param string                     $state
         * @param WPML_TM_Job_TS_Status|null $ts_status
         * @param int                        $revision
         */
        public function __construct($tp_id, $batch_id, $state, $revision = 1, $ts_status = \null)
        {
        }
        /**
         * @return int
         */
        public function get_tp_id()
        {
        }
        /**
         * @return int
         */
        public function get_batch_id()
        {
        }
        /**
         * @return string
         */
        public function get_status()
        {
        }
        /**
         * @return int
         */
        public function get_revision()
        {
        }
        /**
         * @return WPML_TM_Job_TS_Status|null
         */
        public function get_ts_status()
        {
        }
    }
    class WPML_TP_Jobs_API extends \WPML_TP_API
    {
        const CHUNK_SIZE = 100;
        /**
         * @param int[] $tp_job_ids
         *
         * @return WPML_TP_Job_Status[]
         * @throws WPML_TP_API_Exception
         */
        public function get_jobs_statuses(array $tp_job_ids)
        {
        }
        private function get_chunk_of_job_statuses($tp_job_ids)
        {
        }
        /**
         * @param array $cms_ids
         * @param bool  $archived
         *
         * @return array|mixed|stdClass|string
         * @throws WPML_TP_API_Exception
         */
        public function get_jobs_per_cms_ids(array $cms_ids, $archived = \false)
        {
        }
        /**
         * @param WPML_TM_Job_Entity $job
         * @param string             $state
         * @param string             $post_url
         *
         * @throws WPML_TP_API_Exception
         */
        public function update_job_state(\WPML_TM_Job_Entity $job, $state = \WPML_TP_Job_States::DELIVERED, $post_url = \null)
        {
        }
        private function build_job_status(\stdClass $raw_data)
        {
        }
        /**
         * @return WPML_TP_Job_Status[]
         * @throws WPML_TP_API_Exception
         */
        public function get_revised_jobs()
        {
        }
    }
    class WPML_TP_Project_API extends \WPML_TP_API
    {
        const API_VERSION = 1.1;
        const PROJECTS_ENDPOINT = '/projects.json';
        /**
         * @throws WPML_TP_API_Exception
         */
        public function refresh_language_pairs()
        {
        }
        /**
         * @param stdClass    $service
         * @param SiteDetails $site_details
         *
         * @return stdClass
         * @throws WPML_TP_API_Exception
         */
        public function create_project(\stdClass $service, \WPML\TM\TranslationProxy\Services\Project\SiteDetails $site_details)
        {
        }
        /**
         * @param Project   $project
         * @param \stdClass $credentials
         *
         * @throws WPML_TP_API_Exception
         */
        public function update_project_credentials(\WPML\TM\TranslationProxy\Services\Project\Project $project, \stdClass $credentials)
        {
        }
        /**
         * @param Project $project
         *
         * @return array|mixed|stdClass|string
         * @throws WPML_TP_API_Exception
         */
        public function get_extra_fields(\WPML\TM\TranslationProxy\Services\Project\Project $project)
        {
        }
    }
    class WPML_TP_XLIFF_API extends \WPML_TP_API
    {
        /** @var WPML_TP_Xliff_Parser */
        private $xliff_parser;
        public function __construct(\WPML_TP_API_Client $client, \WPML_TP_Project $project, \WPML_TP_API_Log_Interface $logger, \WPML_TP_Xliff_Parser $xliff_parser)
        {
        }
        /**
         * @param int  $tp_job_id
         * @param bool $parse
         *
         * @return WPML_TP_Translation_Collection|string
         * @throws WPML_TP_API_Exception
         */
        public function get_remote_translations($tp_job_id, $parse = \true)
        {
        }
    }
    class WPML_TP_Batch_Sync_API extends \WPML_TP_API
    {
        const INIT_SYNC = '/batches/sync.json';
        const CHECK_STATUS = '/batches/sync/status.json';
        /**
         * @param array $batch_ids
         *
         * @return int[]
         * @throws WPML_TP_API_Exception
         */
        public function init_synchronization(array $batch_ids)
        {
        }
        /**
         * @return int[]
         * @throws WPML_TP_API_Exception
         */
        public function check_progress()
        {
        }
        /**
         * @param WPML_TP_API_Request $request
         *
         * @return array
         * @throws WPML_TP_API_Exception
         */
        private function handle_response(\WPML_TP_API_Request $request)
        {
        }
    }
    class WPML_TP_Services
    {
        public function get_current_project()
        {
        }
        public function get_current_service()
        {
        }
        /**
         * @param      $service_id
         * @param bool       $custom_fields
         *
         * @throws WPMLTranslationProxyApiException
         */
        public function select_service($service_id, $custom_fields = \false)
        {
        }
    }
    class WPML_TP_HTTP_Request_Filter
    {
        /**
         * @return array filtered response
         */
        public function build_request_context(array $request)
        {
        }
        /**
         * Checks if a request contains a file resource handle
         *
         * @param array $request_snippet
         *
         * @return bool
         */
        private function contains_resource(array $request_snippet)
        {
        }
        private function _prepare_multipart_request($params)
        {
        }
        private function _add_multipart_contents($boundary, $params, $context = array())
        {
        }
        private function get_file_name($params, $default = 'file')
        {
        }
    }
    class WPML_TP_Refresh_Language_Pairs
    {
        const AJAX_ACTION = 'wpml-tp-refresh-language-pairs';
        /**
         * @var WPML_TP_Project_API
         */
        private $tp_api;
        /**
         * WPML_TP_AJAX constructor.
         *
         * @param WPML_TP_Project_API $wpml_tp_api
         */
        public function __construct(\WPML_TP_Project_API $wpml_tp_api)
        {
        }
        public function add_hooks()
        {
        }
        public function refresh_language_pairs()
        {
        }
        /**
         * @return bool
         */
        private function is_valid_request()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TP_Extra_Field
    {
        /** @var string */
        public $type = 'text';
        /** @var string */
        public $label;
        /** @var string */
        public $name;
        /** @var array */
        public $items;
    }
    class WPML_TM_Translated_Field
    {
        private $original;
        private $translation;
        private $finished_state;
        /**
         * WPML_TM_Translated_Field constructor.
         *
         * @param string $original
         * @param string $translation
         * @param bool   $finished_state
         */
        public function __construct($original, $translation, $finished_state)
        {
        }
        public function get_translation()
        {
        }
        public function is_finished($original)
        {
        }
    }
    class WPML_TM_Post_Edit_TM_Editor_Select_Factory implements \IWPML_Backend_Action_Loader, \IWPML_AJAX_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_TM_Post_Edit_TM_Editor_Mode
    {
        const POST_META_KEY_USE_NATIVE = '_wpml_post_translation_editor_native';
        const TM_KEY_FOR_POST_TYPE_USE_NATIVE = 'post_translation_editor_native_for_post_type';
        const TM_KEY_GLOBAL_USE_NATIVE = 'post_translation_editor_native';
        /**
         * Check post meta first
         * Then check setting for post type
         * Then finally check global setting
         *
         * @param SitePress $sitepress
         * @param $post
         *
         * @return bool
         */
        public static function is_using_tm_editor(\SitePress $sitepress, $post_id)
        {
        }
        /**
         * @param SitePress $sitepress
         * @param int       $post_id
         *
         * @return int
         */
        private static function get_source_id(\SitePress $sitepress, $post_id)
        {
        }
        /**
         * @param SitePress $sitepress
         *
         * @return array
         */
        private static function init_settings(\SitePress $sitepress)
        {
        }
        /**
         * @param null|string $post_type
         */
        public static function delete_all_posts_option($post_type = \null)
        {
        }
    }
    class WPML_TM_Post_Edit_TM_Editor_Select implements \IWPML_Action
    {
        const SCRIPT_HANDLE = 'wpml-post-edit-tm-mode';
        const NONCE_ACTION = 'wpml-tm-editor-mode';
        /** @var SitePress $sitepress */
        private $sitepress;
        public function __construct(\SitePress $sitepress)
        {
        }
        public function add_hooks()
        {
        }
        public function enqueue_scripts()
        {
        }
        public function add_ui(\WP_Post $post)
        {
        }
        private function prevent_displaying_ui_twice()
        {
        }
        private function add_checkbox(\WP_Post $post)
        {
        }
        private function add_dialog(\WP_Post $post)
        {
        }
        public function save_mode()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_XML_Config_Log_Notice
    {
        const NOTICE_ERROR_GROUP = 'wpml-config-update';
        const NOTICE_ERROR_ID = 'wpml-config-update-error';
        /** @var WPML_Config_Update_Log */
        private $log;
        public function __construct(\WPML_Log $log)
        {
        }
        public function add_hooks()
        {
        }
        public function refresh_notices()
        {
        }
        /**
         * @return bool
         */
        private function is_admin_user_action()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_XML_Config_Log_UI
    {
        /** @var IWPML_Template_Service */
        private $template_service;
        /**
         * @var \WPML_Config_Update_Log
         */
        private $log;
        function __construct(\WPML_Config_Update_Log $log, \IWPML_Template_Service $template_service)
        {
        }
        /**
         * @return string
         */
        public function show()
        {
        }
        /** @return array */
        private function get_model()
        {
        }
        private function getDateTimeFromMicroseconds($time)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_XML_Config_Log_Factory
    {
        private $log;
        function create_log()
        {
        }
        function create_ui()
        {
        }
        function create_notice()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_XML_Config_Validate
    {
        /**
         * @var \LibXMLError[]
         */
        private $errors = [];
        private $path_to_xsd;
        function __construct($path_to_xsd = \null)
        {
        }
        /**
         * @return \LibXMLError[]
         */
        public function get_errors()
        {
        }
        /**
         * @param string $file_full_path
         *
         * @return bool
         */
        function from_file($file_full_path)
        {
        }
        /**
         * @param string $xml
         *
         * @return bool
         */
        function from_string($xml)
        {
        }
        /**
         * @param string $content The string representation of the XML file
         *
         * @return DOMDocument
         */
        private function get_xml($content)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Custom_XML extends \WPML_WP_Option
    {
        public function get_key()
        {
        }
        public function get_default()
        {
        }
    }
    class WPML_Config_Display_As_Translated
    {
        /**
         * @link https://onthegosystems.myjetbrains.com/youtrack/issue/wpmlcore-4859
         * @link https://onthegosystems.myjetbrains.com/youtrack/issue/wpmlcore-4941
         *
         * @param array $config
         *
         * @return array
         */
        public static function merge_to_translate_mode($config)
        {
        }
        private static function merge_to_translate_mode_for_key($config, $key_plural, $key_singular)
        {
        }
    }
    class WPML_Config_Built_With_Page_Builders extends \WPML_WP_Option implements \IWPML_Action, \IWPML_Backend_Action_Loader, \IWPML_AJAX_Action_Loader
    {
        const CONFIG_KEY = 'built-with-page-builder';
        public function create()
        {
        }
        public function get_key()
        {
        }
        public function get_default()
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param array $config_data
         *
         * @return array
         */
        public function wpml_config_filter($config_data)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    interface WPML_XML_Config_Read
    {
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_XML_Config_Read_Option implements \WPML_XML_Config_Read
    {
        private $option;
        private $transform;
        private $validate;
        /**
         * WPML_XML_Config_Read_Option constructor.
         *
         * @param \WPML_WP_Option           $option
         * @param \WPML_XML_Config_Validate $validate
         * @param \WPML_XML_Transform       $transform
         */
        function __construct(\WPML_WP_Option $option, \WPML_XML_Config_Validate $validate, \WPML_XML_Transform $transform)
        {
        }
        function get()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_XML_Config_Read_File implements \WPML_XML_Config_Read
    {
        private $file_full_path;
        private $transform;
        private $validate;
        function __construct($file_full_path, \WPML_XML_Config_Validate $validate, \WPML_XML_Transform $transform)
        {
        }
        function get()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    interface WPML_XML_Transform
    {
        public function get($source, $get_attributes = \true);
    }
    class WPML_XML2Array implements \WPML_XML_Transform
    {
        private $contents;
        private $get_attributes;
        public function get($contents, $get_attributes = \true)
        {
        }
        /**
         * @param mixed|null $value
         * @param array      $attributes
         *
         * @return array
         */
        private function get_item($value, array $attributes)
        {
        }
    }
    class WPML_Config
    {
        const PATH_TO_XSD = \WPML_PLUGIN_PATH . '/res/xsd/wpml-config.xsd';
        static $wpml_config_files = array();
        static $active_plugins = array();
        static function load_config()
        {
        }
        static function load_config_run()
        {
        }
        static function get_custom_fields_translation_settings($translation_actions = array(0))
        {
        }
        static function parse_wpml_config_post_process($config)
        {
        }
        static function parseTaxonomies($config)
        {
        }
        static function parsePostTypes($config)
        {
        }
        static function parseTMSetting($singular, $plural, $config)
        {
        }
        static function load_config_post_process()
        {
        }
        static function load_config_pre_process()
        {
        }
        static function load_plugins_wpml_config()
        {
        }
        static function check_on_config_file($name)
        {
        }
        static function load_theme_wpml_config()
        {
        }
        static function get_theme_wpml_config_file()
        {
        }
        static function parse_wpml_config_files()
        {
        }
        /**
         * @param array<string,array<string,mixed>> $config_files
         * @param bool|null                         $updated
         *
         * @return array
         */
        private static function append_custom_xml_config($config_files, &$updated = \null)
        {
        }
        /**
         * @param \WPML_XML_Config_Validate $validate
         * @param \WPML_XML_Transform       $transform
         *
         * @return mixed
         */
        private static function get_custom_xml_config($validate, $transform)
        {
        }
        /**
         * @param array<string,array<string,mixed>> $all_configs
         * @param array<string,array<string,mixed>> $config
         *
         * @return mixed
         */
        private static function merge_with($all_configs, $config)
        {
        }
        /**
         * @param array<string,array<string,mixed>> $config
         */
        protected static function parse_custom_fields($config)
        {
        }
        private static function parse_config_index($config_all, $wpml_config, $index_sing, $index_plur)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    interface WPML_Log
    {
        public function insert($timestamp, array $entry);
        public function get($page_size = 0, $page = 0);
        public function save(array $data);
        public function clear();
        public function is_empty();
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Config_Update_Log implements \WPML_Log
    {
        const OPTION_NAME = 'wpml-xml-config-update-log';
        public function get($page_size = 0, $page = 0)
        {
        }
        /**
         * @param string|int|float $timestamp
         * @param array            $entry
         */
        public function insert($timestamp, array $entry)
        {
        }
        public function clear()
        {
        }
        public function save(array $data)
        {
        }
        public function is_empty()
        {
        }
        /**
         * @param array $data
         * @param int   $page_size
         * @param int   $page
         *
         * @return array
         */
        protected function paginate(array $data, $page_size, $page)
        {
        }
        /**
         * @return string
         */
        public function get_log_url()
        {
        }
        /** @return string */
        public static function get_support_page_log_section()
        {
        }
    }
    class WPML_Config_Shortcode_List extends \WPML_WP_Option implements \IWPML_Action, \IWPML_Backend_Action_Loader, \IWPML_AJAX_Action_Loader
    {
        public function create()
        {
        }
        public function get_key()
        {
        }
        public function get_default()
        {
        }
        public function add_hooks()
        {
        }
        public function wpml_config_filter($config_data)
        {
        }
        public function filter_shortcode_list($shortcodes)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    interface IWPML_Template_Service
    {
        public function show($model, $template);
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Twig_Template implements \IWPML_Template_Service
    {
        private $twig;
        /**
         * WPML_Twig_Template constructor.
         *
         * @param Twig_Environment $twig
         */
        public function __construct(\WPML\Core\Twig_Environment $twig)
        {
        }
        public function show($model, $template)
        {
        }
    }
    class WPML_TM_Troubleshooting_Clear_TS_UI extends \WPML_Templates_Factory
    {
        public function get_model()
        {
        }
        public function get_template()
        {
        }
        protected function init_template_base_dir()
        {
        }
    }
}
namespace WPML\BrowserLanguageRedirect {
    class Dialog implements \IWPML_Backend_Action
    {
        const ACCEPTED = 'accepted';
        const USER_META = 'wpml-browser-redirect-dialog';
        const ACCEPT_ACTION = 'accept_wpml_browser_language_redirect_message';
        const NONCE_KEY = 'wpml-browser-language-redirect-message';
        public function add_hooks()
        {
        }
        public function enqueue_res()
        {
        }
        public function print_dialog_container()
        {
        }
        public function accept()
        {
        }
        private function should_print_dialog()
        {
        }
        private function is_accepted()
        {
        }
        private function is_languages_page()
        {
        }
    }
}
namespace {
    /**
     * Class WPML_TM_Translators_Dropdown
     */
    class WPML_TM_Translators_Dropdown
    {
        /**
         * @var WPML_TM_Blog_Translators $blog_translators
         */
        private $blog_translators;
        /**
         * @param WPML_TM_Blog_Translators $blog_translators
         */
        public function __construct($blog_translators)
        {
        }
        /**
         * @param array $args
         *
         * @return string
         */
        public function render($args = array())
        {
        }
    }
    interface IWPML_TM_Word_Count_Queue_Items
    {
        /**
         * @return array|null a tuple containing the element id and type or null if queue is empty
         */
        public function get_next();
        /**
         * @param int    $id
         * @param string $type
         */
        public function remove($id, $type);
        /** @return bool */
        public function is_completed();
        public function save();
    }
    class WPML_TM_Word_Count_Queue_Items_Requested_Types implements \IWPML_TM_Word_Count_Queue_Items
    {
        const OPTION_KEY = 'wpml_word_count_queue_items_requested_types';
        const STEP_STANDALONE_PACKAGES = 1;
        const STEP_POST_PACKAGES = 2;
        const STEP_POSTS = 3;
        const STEP_COMPLETED = 4;
        /** @var WPML_TM_Word_Count_Records $records */
        private $records;
        /** @var array $requested_types to be processed */
        private $requested_types;
        /** @var string $step */
        private $step;
        /** @var array|null $items */
        private $items = array('string' => array(), 'package' => array(), 'post' => array());
        public function __construct(\WPML_TM_Word_Count_Records $records)
        {
        }
        /**
         * @return array|null a tuple containing the element id and type or null if queue is empty
         */
        public function get_next()
        {
        }
        private function init_queue()
        {
        }
        private function restore_queue_from_db()
        {
        }
        private function init_step()
        {
        }
        private function add_standalone_packages_to_queue()
        {
        }
        private function add_post_packages_to_queue()
        {
        }
        private function add_posts_to_queue()
        {
        }
        private function make_item_keys_equals_to_id()
        {
        }
        private function maybe_move_to_next_step()
        {
        }
        /**
         * @param int    $id
         * @param string $type
         */
        public function remove($id, $type)
        {
        }
        /** @return bool */
        private function has_items()
        {
        }
        /** @return bool */
        public function is_completed()
        {
        }
        public function save()
        {
        }
        public function reset(array $requested_types)
        {
        }
    }
    abstract class WPML_TM_Word_Count_Background_Process extends \WP_Background_Process
    {
        /** @var IWPML_TM_Word_Count_Queue_Items $queue */
        protected $queue;
        /** @var IWPML_TM_Word_Count_Set[] $setters */
        private $setters;
        /**
         * @param IWPML_TM_Word_Count_Queue_Items $queue
         * @param IWPML_TM_Word_Count_Set[]       $setters
         */
        public function __construct(\IWPML_TM_Word_Count_Queue_Items $queue, array $setters)
        {
        }
        /**
         * This abstract method is not implemented because we override the `handle` method.
         */
        protected function task($item)
        {
        }
        protected function handle()
        {
        }
        protected function is_queue_empty()
        {
        }
    }
    class WPML_TM_Word_Count_Background_Process_Requested_Types extends \WPML_TM_Word_Count_Background_Process
    {
        /** @var WPML_TM_Word_Count_Queue_Items_Requested_Types $queue */
        protected $queue;
        /** @var WPML_TM_Word_Count_Records $records */
        private $records;
        /**
         * @param WPML_TM_Word_Count_Queue_Items_Requested_Types $queue_items
         * @param IWPML_TM_Word_Count_Set[]                      $setters
         */
        public function __construct(\WPML_TM_Word_Count_Queue_Items_Requested_Types $queue_items, array $setters, \WPML_TM_Word_Count_Records $records)
        {
        }
        public function init($requested_types)
        {
        }
        public function dispatch()
        {
        }
        public function complete()
        {
        }
        /**
         * Filter result of memory_exceeded() function in WP_Background_Process class.
         * Used by it get_memory_limit() function of WP_Background_Process class contains a number of bugs,
         * producing wrong result when 'memory_limit' setting in php.ini is in human readable format like '1G'.
         *
         * @return bool
         */
        public function memory_exceeded_filter()
        {
        }
        /**
         * Get memory limit in bytes.
         *
         * @return int
         */
        protected function get_memory_limit()
        {
        }
        /**
         * Converts a shorthand byte value to an integer byte value.
         *
         * @param string $value A (PHP ini) byte value, either shorthand or ordinary.
         * @return int An integer byte value.
         */
        protected function convert_shorthand_to_bytes($value)
        {
        }
    }
    class WPML_TM_Word_Count_Background_Process_Factory
    {
        const PREFIX = 'wpml_tm';
        const ACTION_REQUESTED_TYPES = 'word_count_background_process_requested_types';
        /**
         * @return WPML_TM_Word_Count_Background_Process_Requested_Types
         */
        public function create_requested_types()
        {
        }
    }
    class WPML_TM_Word_Count_Records
    {
        /** @var WPML_TM_Word_Count_Post_Records $post_records */
        private $post_records;
        /** @var WPML_ST_Word_Count_Package_Records|null $package_records */
        private $package_records;
        /** @var WPML_ST_Word_Count_String_Records|null $string_records */
        private $string_records;
        public function __construct(\WPML_TM_Word_Count_Post_Records $post_records, \WPML_ST_Word_Count_Package_Records $package_records = \null, \WPML_ST_Word_Count_String_Records $string_records = \null)
        {
        }
        /** @return array */
        public function get_all_post_ids_without_word_count()
        {
        }
        /**
         * @param $post_id
         *
         * @return WPML_TM_Count
         */
        public function get_post_word_count($post_id)
        {
        }
        /**
         * @param int           $post_id
         * @param WPML_TM_Count $word_count
         *
         * @return bool|int
         */
        public function set_post_word_count($post_id, \WPML_TM_Count $word_count)
        {
        }
        /** @return array */
        public function get_all_package_ids()
        {
        }
        /** @return array */
        public function get_packages_ids_without_word_count()
        {
        }
        /**
         * @param int $post_id
         *
         * @return WPML_TM_Count[]
         */
        public function get_packages_word_counts($post_id)
        {
        }
        /**
         * @param int           $package_id
         * @param WPML_TM_Count $word_count
         */
        public function set_package_word_count($package_id, \WPML_TM_Count $word_count)
        {
        }
        /**
         * @param int $package_id
         *
         * @return WPML_TM_Count
         */
        public function get_package_word_count($package_id)
        {
        }
        /** @return int */
        public function get_strings_total_words()
        {
        }
        /** @return array */
        public function get_all_string_values_without_word_count()
        {
        }
        /**
         * @param string   $lang
         * @param int|null $package_id
         *
         * @return int
         */
        public function get_string_words_to_translate_per_lang($lang, $package_id = \null)
        {
        }
        public function get_string_value_and_language($string_id)
        {
        }
        /**
         * @param int $id
         * @param int $word_count
         */
        public function set_string_word_count($id, $word_count)
        {
        }
        /**
         * @param int $id
         *
         * @return int
         */
        public function get_string_word_count($id)
        {
        }
        public function reset_all(array $requested_types)
        {
        }
        /**
         * @param array $kinds
         *
         * @return array
         */
        public function get_package_ids_from_kind_slugs(array $kinds)
        {
        }
        /**
         * @param array $post_types
         *
         * @return array
         */
        public function get_package_ids_from_post_types(array $post_types)
        {
        }
        /**
         * @param array $package_ids
         *
         * @return array
         */
        public function get_strings_ids_from_package_ids(array $package_ids)
        {
        }
        /**
         * @param array $package_ids
         *
         * @return array
         */
        public function get_post_source_ids_from_types(array $package_ids)
        {
        }
        /**
         * @param string $type
         *
         * @return int
         */
        public function count_items_by_type($group, $type)
        {
        }
        public function count_word_counts_by_type($group, $type)
        {
        }
        public function get_word_counts_by_type($group, $type)
        {
        }
        /**
         * @param array $raw_counts
         *
         * @return WPML_TM_Count_Composite
         */
        private function build_count_composite_from_raw_counts(array $raw_counts)
        {
        }
    }
    class WPML_TM_Word_Count_Post_Records
    {
        const META_KEY = '_wpml_word_count';
        /** @var wpdb $wpdb */
        private $wpdb;
        public function __construct(\wpdb $wpdb)
        {
        }
        /**
         * Returns only IDs in the source language
         *
         * @return array
         */
        public function get_all_ids_without_word_count()
        {
        }
        /**
         * @param int $post_id
         *
         * @return string raw word count
         */
        public function get_word_count($post_id)
        {
        }
        /**
         * @param int    $post_id
         * @param string $word_count raw word count
         *
         * @return bool|int
         */
        public function set_word_count($post_id, $word_count)
        {
        }
        public function reset_all(array $post_types)
        {
        }
        /**
         * @param array $post_types
         *
         * @return array
         */
        public function get_source_ids_from_types(array $post_types)
        {
        }
        /**
         * @param string $post_type
         *
         * @return int
         */
        public function count_source_items_by_type($post_type)
        {
        }
        public function count_word_counts_by_type($post_type)
        {
        }
        /**
         * @param string $post_type
         *
         * @return array
         */
        public function get_word_counts_by_type($post_type)
        {
        }
    }
    class WPML_TM_Word_Count_Records_Factory
    {
        /**
         * @return \WPML_TM_Word_Count_Records
         * @throws \Auryn\InjectionException
         */
        public function create()
        {
        }
    }
    abstract class WPML_TM_Translatable_Element
    {
        /** @var WPML_TM_Word_Count_Records $word_count_records */
        protected $word_count_records;
        /** @var WPML_TM_Word_Count_Single_Process $single_process */
        protected $single_process;
        /** @var int $id */
        protected $id;
        /**
         * @param int                               $id
         * @param WPML_TM_Word_Count_Records        $word_count_records
         * @param WPML_TM_Word_Count_Single_Process $single_process
         */
        public function __construct($id, \WPML_TM_Word_Count_Records $word_count_records, \WPML_TM_Word_Count_Single_Process $single_process)
        {
        }
        public function set_id($id)
        {
        }
        protected abstract function init($id);
        public abstract function get_type_name($label = \null);
        protected abstract function get_type();
        protected abstract function get_total_words();
        /** @return int */
        public function get_words_count()
        {
        }
    }
    class WPML_TM_Post extends \WPML_TM_Translatable_Element
    {
        /** @var array|null|WP_Post */
        private $wp_post;
        protected function init($id)
        {
        }
        protected function get_type()
        {
        }
        protected function get_total_words()
        {
        }
        public function get_type_name($label = \null)
        {
        }
    }
    class WPML_TM_Word_Count_Set_String
    {
        /** @var WPML_TM_Word_Count_Records $records */
        private $records;
        /** @var WPML_TM_Word_Calculator $calculator */
        private $calculator;
        public function __construct(\WPML_TM_Word_Count_Records $records, \WPML_TM_Word_Calculator $calculator)
        {
        }
        /**
         * @param int $string_id
         */
        public function process($string_id)
        {
        }
    }
    class WPML_TM_Word_Count_Setters_Factory
    {
        /**
         * @return IWPML_TM_Word_Count_Set[]
         */
        public function create()
        {
        }
    }
    class WPML_TM_Word_Count_Set_Post
    {
        /** @var WPML_Translation_Element_Factory $element_factory */
        private $element_factory;
        /** @var WPML_TM_Word_Count_Records $records */
        private $records;
        /** @var IWPML_TM_Word_Calculator_Post[] $post_calculators */
        private $post_calculators;
        /** @var array $active_langs */
        private $active_langs;
        /** @var WPML_Post_Element $post_element */
        private $post_element;
        /**
         * @param WPML_Translation_Element_Factory $element_factory
         * @param WPML_TM_Word_Count_Records       $records
         * @param IWPML_TM_Word_Calculator_Post[]  $calculators
         * @param array                            $active_langs
         */
        public function __construct(\WPML_Translation_Element_Factory $element_factory, \WPML_TM_Word_Count_Records $records, array $calculators, array $active_langs)
        {
        }
        /**
         * @param int $post_id
         */
        public function process($post_id)
        {
        }
        /**
         * @param string $lang
         *
         * @return int
         */
        private function calculate_in_lang($lang)
        {
        }
    }
    class WPML_TM_Word_Count_Single_Process_Factory
    {
        public function create()
        {
        }
    }
    class WPML_TM_Word_Count_Set_Package
    {
        /** @var WPML_ST_Package_Factory $package_factory */
        private $package_factory;
        /** @var WPML_TM_Word_Count_Records $records */
        private $records;
        /** @var array $active_langs */
        private $active_langs;
        public function __construct(\WPML_ST_Package_Factory $package_factory, \WPML_TM_Word_Count_Records $records, array $active_langs)
        {
        }
        /** @param int $package_id */
        public function process($package_id)
        {
        }
    }
    class WPML_TM_Word_Count_Single_Process
    {
        /** @var IWPML_TM_Word_Count_Set[] $setters */
        private $setters;
        /** @var WPML_ST_String_Dependencies_Builder $dependencies_builder */
        private $dependencies_builder;
        /**
         * @param IWPML_TM_Word_Count_Set[]           $setters
         * @param WPML_ST_String_Dependencies_Builder $dependencies_builder
         */
        public function __construct(array $setters, \WPML_ST_String_Dependencies_Builder $dependencies_builder = \null)
        {
        }
        /**
         * @param string $element_type
         * @param int    $element_id
         */
        public function process($element_type, $element_id)
        {
        }
    }
    interface IWPML_TM_Word_Count_Set
    {
        public function process($id);
    }
    /**
     * @see https://onthegosystems.myjetbrains.com/youtrack/issue/wpmltm-2327
     */
    class WPML_TM_Word_Calculator
    {
        const ASIAN_LANGUAGE_CHAR_SIZE = 6;
        /** @var WPML_PHP_Functions $php_functions */
        private $php_functions;
        public function __construct(\WPML_PHP_Functions $php_functions)
        {
        }
        /**
         * @param string $string
         * @param string $language_code
         *
         * @return int
         */
        public function count_words($string, $language_code)
        {
        }
        /** @return bool */
        private function exclude_shortcodes_in_words_count()
        {
        }
        /**
         * @param string $source
         *
         * @return string
         */
        private function sanitize_string($source)
        {
        }
        /**
         * @param string $string
         *
         * @return string
         */
        private function extract_content_in_shortcodes($string)
        {
        }
        /**
         * @param string $string
         *
         * @return string
         */
        private function strip_urls($string)
        {
        }
        public static function get_asian_languages()
        {
        }
    }
    interface IWPML_TM_Word_Calculator_Post
    {
        public function count_words(\WPML_Post_Element $post_element, $lang = \null);
    }
    class WPML_TM_Word_Calculator_Post_Object implements \IWPML_TM_Word_Calculator_Post
    {
        /** @var WPML_TM_Word_Calculator $calculator */
        private $calculator;
        /** @var WPML_TM_Word_Calculator_Post_Packages $packages_calculator */
        private $packages_calculator;
        public function __construct(\WPML_TM_Word_Calculator $calculator, \WPML_TM_Word_Calculator_Post_Packages $packages_calculator)
        {
        }
        /**
         * @param WPML_Post_Element $post_element
         * @param string            $lang
         *
         * @return int
         */
        public function count_words(\WPML_Post_Element $post_element, $lang = \null)
        {
        }
        private function has_string_packages(\WPML_Post_Element $post_element)
        {
        }
    }
    class WPML_TM_Word_Calculator_Post_Custom_Fields implements \IWPML_TM_Word_Calculator_Post
    {
        /** @var WPML_TM_Word_Calculator $calculator */
        private $calculator;
        /** @var array|null $cf_settings from `$sitepress_settings['translation-management']['custom_fields_translation']` */
        private $cf_settings;
        /** @var array $fields_to_count */
        private $fields_to_count = array();
        /**
         * WPML_TM_Word_Calculator_Post_Custom_Fields constructor.
         *
         * $cf_settings:
         *
         * <code>
         * $array = [
         *   'custom-field-1'      =>  WPML_TRANSLATE_CUSTOM_FIELD,
         *   'custom-field-2'      =>  WPML_COPY_CUSTOM_FIELD,
         *   'custom-field-3'      =>  WPML_IGNORE_CUSTOM_FIELD,
         *   'custom-field-4'      =>  WPML_IGNORE_CUSTOM_FIELD,
         *   'custom-field-5'      =>  WPML_COPY_ONCE_CUSTOM_FIELD,
         * ]
         * </code>
         *
         * @param \WPML_TM_Word_Calculator $calculator  An instance of WPML_TM_Word_Calculator.
         * @param array|null               $cf_settings An associative array where they key is the name of the custom field and the value is an integer representing the translation method.
         *
         * @see inc/constants.php for the values of the constsnts
         */
        public function __construct(\WPML_TM_Word_Calculator $calculator, array $cf_settings = \null)
        {
        }
        public function count_words(\WPML_Post_Element $post_element, $lang = \null)
        {
        }
        /** @return bool */
        private function is_registered_type(\WPML_Post_Element $post_element)
        {
        }
        /** @return array */
        private function get_translatable_fields_to_count($post_id)
        {
        }
    }
    class WPML_TM_Word_Calculator_Post_Packages implements \IWPML_TM_Word_Calculator_Post
    {
        /** @var WPML_TM_Word_Count_Records $records */
        private $records;
        /** @var WPML_TM_Count_Composite[] $package_counts */
        private $package_counts;
        public function __construct(\WPML_TM_Word_Count_Records $records)
        {
        }
        /**
         * @param WPML_Post_Element $post_element
         * @param string|null       $lang
         *
         * @return int
         */
        public function count_words(\WPML_Post_Element $post_element, $lang = \null)
        {
        }
        /**
         * @param WPML_Post_Element $post_element
         *
         * @return WPML_TM_Count_Composite
         */
        private function get_package_counts(\WPML_Post_Element $post_element)
        {
        }
    }
    class WPML_TM_Word_Count_Report_View
    {
        const TEMPLATE_PATH = '/templates/words-count';
        const TEMPLATE_FILE = 'report.twig';
        /** @var WPML_Twig_Template_Loader $loader */
        private $loader;
        /** @var WPML_WP_Cron_Check $cron_check */
        private $cron_check;
        public function __construct(\WPML_Twig_Template_Loader $loader, \WPML_WP_Cron_Check $cron_check)
        {
        }
        public function show(array $model)
        {
        }
        public static function get_strings()
        {
        }
    }
    class WPML_TM_Word_Count_Report
    {
        const OPTION_KEY = 'wpml_word_count_report';
        const POSTS_PER_MINUTE = 1200;
        const PACKAGES_PER_MINUTE = 5000;
        const POST_TYPES = 'post_types';
        const PACKAGE_KINDS = 'package_kinds';
        const IS_REQUESTED = 'isRequested';
        /** @var WPML_TM_Word_Count_Records $records */
        private $records;
        /** @var WPML_TM_Word_Count_Report_View $view */
        private $view;
        /** @var SitePress $sitepress */
        private $sitepress;
        /** @var array $post_types */
        private $post_types;
        /** @var WPML_Package_Helper $st_package_helper */
        private $st_package_helper;
        /** @var array $package_kinds */
        private $package_kinds = array();
        /** @var bool $requested_types_status */
        private $requested_types_status;
        /** @var array $data */
        private $data;
        /**
         * WPML_TM_Word_Count_Report constructor.
         *
         * @param WPML_TM_Word_Count_Report_View $view
         * @param WPML_TM_Word_Count_Records     $records
         * @param SitePress                      $sitepress
         * @param string|false                   $requested_types_status
         * @param WPML_Package_Helper|null       $st_package_helper
         */
        public function __construct(\WPML_TM_Word_Count_Report_View $view, \WPML_TM_Word_Count_Records $records, \SitePress $sitepress, $requested_types_status, \WPML_Package_Helper $st_package_helper = \null)
        {
        }
        /**
         * @return string
         */
        public function render()
        {
        }
        private function is_requested($group, $type)
        {
        }
        /**
         * @param string                $group
         * @param WP_Post_Type|stdClass $type_object
         *
         * @return array|null
         */
        private function build_type_row($group, $type_object)
        {
        }
        private function get_totals()
        {
        }
        public function set_requested_types(array $requested_types)
        {
        }
        private function set_requested_group($group, $types, $requested_types)
        {
        }
        private function init_data()
        {
        }
        private function save_data()
        {
        }
        private function get_post_types()
        {
        }
        public function get_package_kinds()
        {
        }
    }
    class WPML_TM_Word_Count_Refresh_Hooks implements \IWPML_Action
    {
        const PRIORITY_AFTER_PB_STRING_REGISTRATION = 50;
        /** @var WPML_TM_Word_Count_Single_Process_Factory $single_process_factory */
        private $single_process_factory;
        /** @var WPML_Translation_Element_Factory $element_factory */
        private $element_factory;
        /** @var WPML_ST_Package_Factory|null $st_package_factory */
        private $st_package_factory;
        /** @var array $packages_to_refresh */
        private $packages_to_refresh = array();
        public function __construct(\WPML_TM_Word_Count_Single_Process_Factory $single_process_factory, \WPML_Translation_Element_Factory $element_factory, \WPML_ST_Package_Factory $st_package_factory = \null)
        {
        }
        public function add_hooks()
        {
        }
        /** @param int $post_id */
        public function enqueue_post_word_count_refresh($post_id)
        {
        }
        /** @param int $post_id */
        public function get_refresh_post_word_count($post_id)
        {
        }
        /**
         * @param string $string_value
         * @param string $string_name
         * @param array  $package
         */
        public function register_string_action($string_value, $string_name, $package)
        {
        }
        /** @param array $package */
        public function delete_unused_package_strings_action($package)
        {
        }
        /**
         * @param array $translations
         * @param array $package
         */
        public function set_translated_strings_action($translations, $package)
        {
        }
        /** @param array $package_array */
        private function defer_package_refresh($package_array)
        {
        }
        public function refresh_packages_word_count()
        {
        }
    }
    class WPML_TM_Word_Count_Process_Hooks implements \IWPML_Action
    {
        /** @var WPML_TM_Word_Count_Background_Process_Factory $process_factory */
        private $process_factory;
        /**
         * @param WPML_TM_Word_Count_Background_Process_Factory $process_factory
         */
        public function __construct(\WPML_TM_Word_Count_Background_Process_Factory $process_factory)
        {
        }
        /**
         * We need to include the hooks located in WP_Async_Request::__construct.
         */
        public function add_hooks()
        {
        }
    }
    class WPML_TM_Word_Count_Admin_Hooks implements \IWPML_Action
    {
        /** @var WPML_WP_API $wp_api */
        private $wp_api;
        public function __construct(\WPML_WP_API $wp_api)
        {
        }
        public function add_hooks()
        {
        }
        public function enqueue_scripts()
        {
        }
        /**
         * @param string $default_url
         *
         * @return string
         */
        public function words_count_url_filter($default_url)
        {
        }
        public function display_dialog_open_link()
        {
        }
    }
    class WPML_TM_Word_Count_Ajax_Hooks implements \IWPML_Action
    {
        /** @var WPML_TM_Word_Count_Report $report */
        private $report;
        /** @var WPML_TM_Word_Count_Background_Process_Factory $process_factory*/
        private $process_factory;
        /** @var bool $requested_types_status */
        private $requested_types_status;
        public function __construct(\WPML_TM_Word_Count_Report $report, \WPML_TM_Word_Count_Background_Process_Factory $process_factory, $requested_types_status)
        {
        }
        public function add_hooks()
        {
        }
        public function __call($method_name, $arguments)
        {
        }
        private function get_report()
        {
        }
        private function start_count()
        {
        }
        private function cancel_count()
        {
        }
    }
    class WPML_TM_Word_Count_Hooks_Factory implements \IWPML_Backend_Action_Loader, \IWPML_Frontend_Action_Loader
    {
        const PROCESS_PENDING = 'pending';
        const PROCESS_IN_PROGRESS = 'in-progress';
        const PROCESS_COMPLETED = 'completed';
        const OPTION_KEY_REQUESTED_TYPES_STATUS = 'wpml_word_count_requested_types_status';
        const NONCE_ACTION = 'wpml_tm_word_count_ajax';
        private $hooks = array();
        private $requested_types_status;
        private $translation_element_factory;
        private $words_count_background_process_factory;
        private $words_count_single_process_factory;
        public function create()
        {
        }
        private function add_refresh_hooks()
        {
        }
        private function add_process_hooks()
        {
        }
        private function add_admin_hooks()
        {
        }
        private function add_ajax_hooks()
        {
        }
        /**
         * @return WPML_TM_Word_Count_Single_Process_Factory
         */
        private function get_words_count_single_process_factory()
        {
        }
        private function get_translation_element_factory()
        {
        }
        /**
         * @return WPML_TM_Word_Count_Background_Process_Factory
         */
        private function get_words_count_background_process_factory()
        {
        }
        /**
         * @return SitePress
         */
        private function get_sitepress()
        {
        }
        private function is_heartbeat_autosave()
        {
        }
    }
    class WPML_TM_Translatable_Element_Provider
    {
        /** @var WPML_TM_Word_Count_Records $word_count_records */
        private $word_count_records;
        /** @var WPML_TM_Word_Count_Single_Process $single_process */
        private $single_process;
        /** @var null|WPML_ST_Package_Factory $st_package_factory */
        private $st_package_factory;
        public function __construct(\WPML_TM_Word_Count_Records $word_count_records, \WPML_TM_Word_Count_Single_Process $single_process, \WPML_ST_Package_Factory $st_package_factory = \null)
        {
        }
        /**
         * @param WPML_TM_Job_Entity $job
         *
         * @return null|WPML_TM_Package_Element|WPML_TM_Post|WPML_TM_String
         */
        public function get_from_job(\WPML_TM_Job_Entity $job)
        {
        }
        /**
         * @param string $type
         * @param int    $id
         *
         * @return null|WPML_TM_Package_Element|WPML_TM_Post|WPML_TM_String
         */
        public function get_from_type($type, $id)
        {
        }
        /**
         * @param int $id
         *
         * @return WPML_TM_Post
         */
        private function get_post($id)
        {
        }
        /**
         * @param int $id
         *
         * @return WPML_TM_String
         */
        private function get_string($id)
        {
        }
        /**
         * @param int $id
         *
         * @return WPML_TM_Package_Element
         */
        private function get_package($id)
        {
        }
    }
    interface IWPML_TM_Count
    {
        public function get_total_words();
        public function get_words_to_translate($lang);
    }
    class WPML_TM_Count_Composite implements \IWPML_TM_Count
    {
        /** @var IWPML_TM_Count[] $counts */
        private $counts = array();
        public function add_count(\IWPML_TM_Count $count)
        {
        }
        /** @var IWPML_TM_Count[] $counts */
        public function add_counts($counts)
        {
        }
        /**
         * @param string $lang
         *
         * @return int
         */
        public function get_words_to_translate($lang)
        {
        }
        /** @return int */
        public function get_total_words()
        {
        }
    }
    class WPML_TM_Count implements \IWPML_TM_Count
    {
        /** @var int $total */
        private $total = 0;
        /** @var array $to_translate */
        private $to_translate;
        /**
         * @param string|null $json_data
         */
        public function __construct($json_data = \null)
        {
        }
        /** @param string $json_data */
        public function set_properties_from_json($json_data)
        {
        }
        /** @return int */
        public function get_total_words()
        {
        }
        /** @param int $total */
        public function set_total_words($total)
        {
        }
        /**
         * @param string $lang
         *
         * @return int|null
         */
        public function get_words_to_translate($lang)
        {
        }
        /** @return string */
        public function to_string()
        {
        }
        public function set_words_to_translate($lang, $quantity)
        {
        }
    }
    class WPML_TM_Package_Element extends \WPML_TM_Translatable_Element
    {
        /** @var WPML_ST_Package_Factory $st_package_factory */
        private $st_package_factory;
        /** @var WPML_Package $st_package */
        private $st_package;
        /**
         * @param int                               $id
         * @param WPML_TM_Word_Count_Records        $word_count_records
         * @param WPML_TM_Word_Count_Single_Process $single_process
         * @param WPML_ST_Package_Factory|null      $st_package_factory
         */
        public function __construct($id, \WPML_TM_Word_Count_Records $word_count_records, \WPML_TM_Word_Count_Single_Process $single_process, \WPML_ST_Package_Factory $st_package_factory = \null)
        {
        }
        /** @param int $id */
        protected function init($id)
        {
        }
        protected function get_type()
        {
        }
        /** @return int */
        protected function get_total_words()
        {
        }
        /**
         * @param null $label
         *
         * @return string
         */
        public function get_type_name($label = \null)
        {
        }
    }
    class WPML_TM_String extends \WPML_TM_Translatable_Element
    {
        protected function init($id)
        {
        }
        protected function get_type()
        {
        }
        protected function get_total_words()
        {
        }
        public function get_type_name($label = \null)
        {
        }
    }
    /**
     * Class WPML_Translation_Priorities
     */
    class WPML_TM_Translation_Priorities
    {
        const DEFAULT_TRANSLATION_PRIORITY_VALUE_SLUG = 'optional';
        const TAXONOMY = 'translation_priority';
        public function get_values()
        {
        }
        /**
         * @return int
         */
        public function get_default_value_id()
        {
        }
        /**
         * @return WP_Term
         */
        public static function get_default_term()
        {
        }
        /**
         * @param int    $term_taxonomy_id
         * @param string $original_name
         * @param string $target_language
         *
         * @return int|bool
         */
        public static function insert_missing_translation($term_taxonomy_id, $original_name, $target_language)
        {
        }
        public static function insert_missing_default_terms()
        {
        }
    }
    /**
     * Class WPML_TM_Translation_Priorities_Factory
     */
    class WPML_TM_Translation_Priorities_Factory implements \IWPML_Frontend_Action_Loader, \IWPML_Backend_Action_Loader
    {
        public function create()
        {
        }
    }
    /**
     * Class WPML_TM_Translation_Priorities_Register_Action
     */
    class WPML_TM_Translation_Priorities_Register_Action implements \IWPML_Action
    {
        /** @var SitePress */
        private $sitepress;
        const TRANSLATION_PRIORITY_TAXONOMY = 'translation_priority';
        /**
         * WPML_TM_Translation_Priorities_Register_Action constructor.
         *
         * @param SitePress $sitepress
         */
        public function __construct(\SitePress $sitepress)
        {
        }
        public function add_hooks()
        {
        }
        public function register_translation_priority_taxonomy()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_Shortcodes_Catcher_Factory implements \IWPML_Frontend_Action_Loader, \IWPML_Backend_Action_Loader, \IWPML_AJAX_Action_Loader
    {
        /**
         * @return IWPML_Action|IWPML_Action[]|null
         */
        public function create()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_Shortcodes_Catcher implements \IWPML_Action
    {
        public function add_hooks()
        {
        }
        public function register_shortcode($return, $tag)
        {
        }
    }
    /**
     * Class WPML_Language_Pair_Records
     *
     * Language pairs are stored as user meta as an array of the form
     * array( $from_lang => array( $to_lang_1 => '1', $to_lang_2 => '1' )
     */
    class WPML_Language_Pair_Records
    {
        private $meta_key;
        /** @var WPML_Language_Records $language_records */
        private $language_records;
        public function __construct(\wpdb $wpdb, \WPML_Language_Records $language_records)
        {
        }
        /**
         * @param int   $user_id
         * @param array $language_pairs
         *
         * Language pairs are an array of the form
         * array( $from_lang => array( $to_lang_1, $to_lang_2 )
         */
        public function store($user_id, $language_pairs)
        {
        }
        /**
         * @param int $user_id
         */
        public function remove_all($user_id)
        {
        }
        /**
         * @param int $user_id
         * @return array
         *
         * Language pairs are returned in an array of the form
         * array( $from_lang => array( $to_lang_1, $to_lang_2 )
         */
        public function get($user_id)
        {
        }
        private function convert_to_storage_format($language_pairs)
        {
        }
        private function is_in_storage_format($language_pairs)
        {
        }
        private function convert_from_storage_format(array $language_pairs)
        {
        }
    }
    class WPML_All_Language_Pairs
    {
        public static function get()
        {
        }
    }
    class WPML_Absolute_Url_Persisted
    {
        const OPTION_KEY = 'wpml_resolved_url_persist';
        private static $instance;
        /**
         * @var array
         */
        private $urls;
        /**
         * @return WPML_Absolute_Url_Persisted
         */
        public static function get_instance()
        {
        }
        protected function __construct()
        {
        }
        private function __clone()
        {
        }
        /**
         * @throws Exception
         */
        public function __wakeup()
        {
        }
        /**
         * Returns urls array.
         *
         * @return array Array with urls.
         */
        private function get_urls()
        {
        }
        /** @return bool */
        public function has_urls()
        {
        }
        /**
         * @param string       $original_url
         * @param string       $lang
         * @param string|false $converted_url A `false` value means that the URL could not be resolved
         */
        public function set($original_url, $lang, $converted_url)
        {
        }
        /**
         * @param string $original_url
         * @param string $lang
         *
         * @return string|false|null If the URL has already been processed but could not be resolved, it will return `false`
         */
        public function get($original_url, $lang)
        {
        }
        public function reset()
        {
        }
        public function persist()
        {
        }
        private function persist_in_shutdown()
        {
        }
    }
    interface IWPML_Resolve_Object_Url
    {
        /**
         * @param string $url
         * @param string $lang
         *
         * @return string|false Will return the resolved URL or `false` if it could not be resolved.
         */
        public function resolve_object_url($url, $lang);
    }
    class WPML_Resolve_Object_Url_Helper implements \IWPML_Resolve_Object_Url
    {
        const CACHE_GROUP = 'resolve_object_url';
        /**
         * @var bool
         */
        protected $lock = \false;
        /**
         * @var SitePress
         */
        private $sitepress;
        /**
         * @var WP_Query
         */
        private $wp_query;
        /**
         * @var WPML_Term_Translation
         */
        private $wpml_term_translations;
        /**
         * @var WPML_Post_Translation
         */
        private $wpml_post_translations;
        /**
         * @param SitePress             $sitepress
         * @param WP_Query              $wp_query
         * @param WPML_Term_Translation $wpml_term_translations
         * @param WPML_Post_Translation $wpml_post_translations
         */
        public function __construct(\SitePress &$sitepress = \null, \WP_Query &$wp_query = \null, \WPML_Term_Translation $wpml_term_translations = \null, \WPML_Post_Translation $wpml_post_translations = \null)
        {
        }
        /**
         * Try to parse the URL to find a related post or term
         *
         * @param string $url
         * @param string $lang_code
         *
         * @return string|bool
         */
        public function resolve_object_url($url, $lang_code)
        {
        }
        /**
         * @param string $url
         *
         * @return array<string,\stdClass>
         */
        private function cached_retrieve_translations($url)
        {
        }
        /**
         * @return array<string,\stdClass>
         */
        private function retrieve_translations()
        {
        }
    }
    class WPML_Resolve_Absolute_Url_Cached implements \IWPML_Resolve_Object_Url
    {
        /** @var WPML_Absolute_Url_Persisted $url_persisted */
        private $url_persisted;
        /** @var WPML_Resolve_Absolute_Url $resolve_url */
        private $resolve_url;
        public function __construct(\WPML_Absolute_Url_Persisted $url_persisted, \WPML_Resolve_Absolute_Url $resolve_url)
        {
        }
        /**
         * @param string $url
         * @param string $lang
         *
         * @return false|string Will return `false` if the URL could not be resolved
         */
        public function resolve_object_url($url, $lang)
        {
        }
    }
    class WPML_Resolve_Absolute_Url implements \IWPML_Resolve_Object_Url
    {
        /** @var SitePress $sitepress */
        private $sitepress;
        /** @var WPML_Translate_Link_Targets */
        private $translate_link_targets;
        /** @var bool */
        private $lock;
        public function __construct(\SitePress $sitepress, \WPML_Translate_Link_Targets $translate_link_targets)
        {
        }
        /**
         * @param string $url
         * @param string $lang
         *
         * @return string|false
         */
        public function resolve_object_url($url, $lang)
        {
        }
    }
    class WPML_Resolve_Object_Url_Helper_Factory
    {
        const CURRENT_URL_RESOLVER = 'current';
        const ABSOLUTE_URL_RESOLVER = 'absolute';
        /**
         * @return IWPML_Resolve_Object_Url
         */
        public function create($type = self::CURRENT_URL_RESOLVER)
        {
        }
    }
    class WPML_Absolute_Url_Persisted_Filters_Factory implements \IWPML_Backend_Action_Loader, \IWPML_AJAX_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_Absolute_Url_Persisted_Filters implements \IWPML_Action
    {
        /** @var WPML_Absolute_Url_Persisted $url_persisted */
        private $url_persisted;
        public function __construct(\WPML_Absolute_Url_Persisted $url_persisted)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param mixed $data
         *
         * @return array
         */
        public function reset($data = \null)
        {
        }
    }
    class WPML_Endpoints_Support_Factory implements \IWPML_Frontend_Action_Loader, \IWPML_Backend_Action_Loader, \IWPML_Deferred_Action_Loader
    {
        public function get_load_action()
        {
        }
        /**
         * @return WPML_Endpoints_Support
         */
        public function create()
        {
        }
        /**
         * @return bool
         */
        private function are_st_functions_loaded()
        {
        }
    }
    class WPML_Home_Url_Filter_Context
    {
        const REST_REQUEST = 'rest-request';
        const REWRITE_RULES = 'rewrite-rules';
        const PAGINATION = 'pagination';
        /**
         * @var int
         */
        private $language_negotiation_type;
        /**
         * @var string
         */
        private $orig_scheme;
        /**
         * @var WPML_Debug_BackTrace
         */
        private $debug_backtrace;
        public function __construct($language_negotiation_type, $orig_scheme, \WPML_Debug_BackTrace $debug_backtrace)
        {
        }
        /**
         * @return bool
         */
        public function should_not_filter()
        {
        }
        /**
         * @return bool
         */
        private function is_rest_request()
        {
        }
        /**
         * @return bool
         */
        private function rewriting_rules()
        {
        }
        /**
         * @return bool
         */
        private function pagination_link()
        {
        }
    }
}
namespace WPML\UrlHandling {
    class WPLoginUrlConverter implements \IWPML_Action
    {
        const PRIORITY_AFTER_URL_FILTERS = 100;
        const SETTINGS_KEY = 'wpml_login_page_translation';
        private $rewrite_rule_not_found;
        /** @var \WPML_URL_Converter $url_converter */
        private $url_converter;
        /** @var \SitePress $sitepress */
        private $sitepress;
        /**
         * @param \WPML_URL_Converter $url_converter
         * @param \SitePress          $sitepress
         */
        public function __construct($sitepress, $url_converter)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * Converts the logout URL to be translated.
         *
         * @param string $url
         * @return string
         */
        public function convert_user_logout_url($url)
        {
        }
        public function add_signup_language_field()
        {
        }
        public function redirect_to_login_url_with_lang()
        {
        }
        public function generate_rewrite_rules()
        {
        }
        /**
         * Converts the redirected string if it's the default one.
         *
         * @param string $redirect_to
         * @param string $requested_redirect_to
         * @return string
         */
        public function convert_default_redirect_url($redirect_to, $requested_redirect_to)
        {
        }
        public function filter_redirect_with_lang($redirect_to)
        {
        }
        public function wpml_login_page_language_from_url($language, $url)
        {
        }
        public function site_url($url, $path, $scheme)
        {
        }
        public function convert_url($url)
        {
        }
        public function on_request($query_vars)
        {
        }
        public static function enable()
        {
        }
        public static function disable()
        {
        }
        /**
         * @return bool
         */
        public static function isEnabled()
        {
        }
        /**
         * @param bool $state
         *
         */
        public static function saveState($state)
        {
        }
        private function should_convert_url_for_multisite($url)
        {
        }
        private function is_wp_login_url($url)
        {
        }
        private function is_wp_login_action()
        {
        }
        private function get_language_param_for_convert_url()
        {
        }
        private function is_subdomain_multisite()
        {
        }
        private function remove_language_directory_from_url($url)
        {
        }
    }
    class WPLoginUrlConverterFactory implements \IWPML_Frontend_Action_Loader, \IWPML_Backend_Action_Loader
    {
        /**
         * @return array
         */
        public function create()
        {
        }
    }
}
namespace {
    class WPML_Score_Hierarchy
    {
        private $data = array();
        private $slugs = array();
        /**
         * WPML_Score_Hierarchy constructor.
         *
         * @param object[] $data_set
         * @param string[] $slugs
         */
        public function __construct($data_set, $slugs)
        {
        }
        /**
         * Array of best matched post_ids. Better matches have a lower index!
         *
         * @return int[]
         */
        public function get_possible_ids_ordered()
        {
        }
        /**
         * Get page object by its id.
         *
         * @param int $id
         *
         * @return false|object
         */
        private function get_page_by_id($id)
        {
        }
        /**
         * @param string[] $parent_slugs
         * @param object[] $pages_with_name
         * @param object   $page
         *
         * @return int
         */
        private function calculate_score($parent_slugs, $pages_with_name, $page)
        {
        }
        /**
         * @param stdClass $page
         *
         * @return bool
         */
        private function is_exactly_matching_all_slugs_in_order($page)
        {
        }
        /**
         * @param stdClass $current_page
         *
         * @return array
         */
        private function get_slugs_for_page($current_page)
        {
        }
    }
    /**
     * Class WPML_URL_Filters
     */
    class WPML_URL_Filters
    {
        /** @var \SitePress */
        private $sitepress;
        /** @var \WPML_Post_Translation $post_translation */
        private $post_translation;
        /** @var \WPML_Canonicals */
        private $canonicals;
        /** @var \WPML_URL_Converter $url_converter */
        private $url_converter;
        /** @var \WPML_Debug_BackTrace */
        private $debug_backtrace;
        /**
         * WPML_URL_Filters constructor.
         *
         * @param \WPML_Post_Translation $post_translation
         * @param string                 $url_converter
         * @param \WPML_Canonicals        $canonicals
         * @param \SitePress             $sitepress
         * @param \WPML_Debug_BackTrace   $debug_backtrace
         */
        public function __construct(&$post_translation, &$url_converter, \WPML_Canonicals $canonicals, &$sitepress, \WPML_Debug_BackTrace $debug_backtrace)
        {
        }
        private function add_hooks()
        {
        }
        public function add_global_hooks()
        {
        }
        public function remove_global_hooks()
        {
        }
        /**
         * @param int    $post_id
         * @param string $url
         *
         * @return int
         *
         * @hook oembed_request_post_id
         */
        public function embedded_front_page_id_filter($post_id, $url)
        {
        }
        /**
         * @param string $embedded_url
         *
         * @return string
         */
        public function fix_post_embedded_url($embedded_url)
        {
        }
        /**
         * Filters the link to a post's edit screen by appending the language query argument
         *
         * @param string $link
         * @param int    $id
         * @param string $context
         *
         * @return string
         *
         * @hook get_edit_post_link
         */
        public function get_edit_post_link($link, $id, $context = 'display')
        {
        }
        /**
         * Permalink filter that is used when the site uses a root page
         *
         * @param string      $link
         * @param int|WP_Post $pid
         *
         * @return string
         */
        public function permalink_filter_root($link, $pid)
        {
        }
        /**
         * @param string $link
         * @param int $pid
         *
         * @return string|WPML_Notice|WPML_Notice_Render
         */
        public function page_link_filter_root($link, $pid)
        {
        }
        /**
         * Filters links to the root page, so that they are displayed properly in the front-end.
         *
         * @param string $url
         *
         * @return string
         */
        public function filter_root_permalink($url)
        {
        }
        /**
         * @param string      $link
         * @param int|WP_Post $post
         *
         * @return string
         */
        public function permalink_filter($link, $post)
        {
        }
        /**
         * @param string      $link
         * @param int|WP_Post $post
         *
         * @return string
         */
        public function page_link_filter($link, $post)
        {
        }
        private function has_wp_get_canonical_url()
        {
        }
        /**
         * @param string|bool $canonical_url
         * @param WP_Post     $post
         *
         * @return mixed
         * @throws \InvalidArgumentException
         */
        public function get_canonical_url_filter($canonical_url, $post)
        {
        }
        /**
         * @param string $url
         * @param string $path
         * @param string $orig_scheme
         * @param int    $blog_id
         *
         * @return string
         */
        public function home_url_filter($url, $path, $orig_scheme, $blog_id)
        {
        }
        public function frontend_uses_root()
        {
        }
        /**
         * Finds the correct language a post belongs to by handling the special case of the post edit screen.
         *
         * @param int $post_id
         *
         * @return bool|mixed|null|String
         */
        private function get_permalink_filter_lang($post_id)
        {
        }
        private function unset_page_query_vars($query)
        {
        }
        private function get_language_from_url($return_default_language_if_missing = \false)
        {
        }
        /**
         * @param string            $link
         * @param int               $post
         * @param WPML_Post_Element $post_element
         *
         * @return bool|false|mixed|string
         */
        public function get_translated_permalink($link, $post, $post_element)
        {
        }
        /**
         * @param string             $link
         * @param int                $post_id
         * @param \WPML_Post_Element $post_element
         *
         * @return bool|mixed|string
         */
        public function get_translated_page_link($link, $post_id, $post_element)
        {
        }
        public function get_request_language()
        {
        }
        private function should_use_permalink_of_post_translation(\WPML_Post_Element $post_element)
        {
        }
        private function is_display_as_translated_mode(\WPML_Post_Element $post_element)
        {
        }
        private function get_translated_post_id_for_current_language(\WPML_Post_Element $post_element)
        {
        }
        /**
         * @param string $url
         *
         * @return bool
         */
        private function is_front_page($url)
        {
        }
    }
    class WPML_Endpoints_Support
    {
        const REGISTERED_ENDPOINTS_OPTION_KEY = 'wpml_registered_endpoints';
        const STRING_CONTEXT = 'WP Endpoints';
        /**
         * @var WPML_Post_Translation
         */
        private $post_translations;
        /**
         * @var string
         */
        private $current_language;
        /**
         * @var string
         */
        private $default_language;
        public function __construct(\WPML_Post_Translation $post_translations, $current_language, $default_language)
        {
        }
        public function add_hooks()
        {
        }
        public function add_endpoints_translations()
        {
        }
        /**
         * @param WP_Rewrite $wp_rewrite
         */
        public function register_rewrite_rules_strings($wp_rewrite)
        {
        }
        /**
         * @param string $key
         * @param string $endpoint
         * @param null|string $language
         *
         * @return string
         */
        public function get_endpoint_translation($key, $endpoint, $language = \null)
        {
        }
        /**
         * @param string $key
         * @param string $endpoint
         */
        public function register_endpoint_string($key, $endpoint)
        {
        }
        /**
         * @param array $value
         *
         * @return array
         */
        public function translate_endpoints_in_rewrite_rules($value)
        {
        }
        /**
         * @param string $link
         * @param int $pid
         *
         * @return string
         */
        public function endpoint_permalink_filter($link, $pid)
        {
        }
        /**
         * @param string $endpoint
         * @param string $value
         * @param string $permalink
         * @param bool|string $page_lang
         *
         * @return string
         */
        public function get_endpoint_url($endpoint, $value = '', $permalink = '', $page_lang = \false)
        {
        }
        /**
         * @param string $url
         * @param array $data
         *
         * @return string
         */
        public function add_endpoint_to_current_ls_language_url($url, $data)
        {
        }
        /**
         * @return array
         */
        public function get_registered_endpoints()
        {
        }
        /**
         * @param string $language
         *
         * @return array
         */
        public function get_current_endpoint($language)
        {
        }
    }
    class WPML_XDomain_Data_Parser
    {
        const SCRIPT_HANDLER = 'wpml-xdomain-data';
        /**
         * @var array $settings
         */
        private $settings;
        private $encryptor;
        /**
         * WPML_XDomain_Data_Parser constructor.
         *
         * @param array<string,mixed> $settings
         * @param \WPML_Data_Encryptor $encryptor
         */
        public function __construct(&$settings, $encryptor)
        {
        }
        public function init_hooks()
        {
        }
        public function init()
        {
        }
        public function register_scripts_action()
        {
        }
        public function set_up_xdomain_language_data()
        {
        }
        public function send_xdomain_language_data()
        {
        }
        public function get_xdomain_data()
        {
        }
    }
    class WPML_WP_In_Subdir_URL_Filters_Factory implements \IWPML_Frontend_Action_Loader, \IWPML_Backend_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_Absolute_To_Permalinks
    {
        private $taxonomies_query;
        private $lang;
        /** @var SitePress $sitepress */
        private $sitepress;
        public function __construct(\SitePress $sitepress)
        {
        }
        public function convert_text($text)
        {
        }
        function show_permalinks_cb($matches)
        {
        }
        private function get_found_parts($matches)
        {
        }
        private function get_url($parts)
        {
        }
        private function get_fragment($url, $parts)
        {
        }
        private function remove_query_in_wrong_lang($fragment)
        {
        }
        private function check_for_duplicate_lang_query($fragment, $url)
        {
        }
    }
}
namespace WPML\UrlHandling {
    class WPLoginUrlConverterRules implements \IWPML_Action
    {
        const UPDATE_RULES_KEY = 'wpml_login_page_translation_update_rules';
        public function add_hooks()
        {
        }
        public static function markRulesForUpdating()
        {
        }
        public static function update()
        {
        }
    }
}
namespace {
    class WPML_WP_In_Subdir_URL_Filters implements \IWPML_Action
    {
        /** @var WPML_Debug_BackTrace $backtrace */
        private $backtrace;
        /** @var SitePress $sitepress */
        private $sitepress;
        /** @var WPML_URL_Converter $url_converter */
        private $url_converter;
        /** @var string $uri_without_subdir */
        private $uri_without_subdir;
        /**
         * @param WPML_Debug_BackTrace $backtrace
         * @param SitePress            $sitepress
         * @param WPML_URL_Converter   $url_converter
         * @param string               $uri_without_subdir
         */
        public function __construct(\WPML_Debug_BackTrace $backtrace, \SitePress $sitepress, \WPML_URL_Converter $url_converter, $uri_without_subdir)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * This filter is only applied in `WP::parse_request` in order to get
         * the proper URI cleanup base in `$home_path_regex`
         *
         * @param string $home_url
         *
         * @return string
         */
        public function home_url_filter_on_parse_request($home_url)
        {
        }
        /**
         * @return bool
         */
        private function request_uri_begins_with_lang()
        {
        }
    }
    class WPML_URL_HTTP_Referer_Factory
    {
        /**
         * @return WPML_URL_HTTP_Referer
         */
        public function create()
        {
        }
    }
    class WPML_URL_Converter_Lang_Param_Helper
    {
        /**
         * @var array
         */
        private static $cache = array();
        /**
         * @var array
         */
        private $active_languages;
        /**
         * @param array $active_languages
         */
        public function __construct(array $active_languages)
        {
        }
        /**
         *
         * @param string $url
         * @param bool   $only_admin If set to true only language parameters on Admin Screen URLs will be recognized. The
         *                           function will return null for non-Admin Screens.
         *
         * @return null|string Language code
         */
        public function lang_by_param($url, $only_admin = \true)
        {
        }
        /**
         * @param string $url
         * @param bool   $only_admin
         *
         * @return string|null
         */
        private function extract_lang_param_from_url($url, $only_admin)
        {
        }
        /**
         * @param bool  $only_admin
         * @param array $url_query_parts
         *
         * @return bool
         */
        private function has_query_part($only_admin, $url_query_parts)
        {
        }
        /**
         * @param bool  $only_admin
         * @param array $vars
         *
         * @return bool
         */
        private function can_retrieve_lang_from_query($only_admin, $vars)
        {
        }
    }
    class WPML_URL_Converter_Url_Helper
    {
        /**
         * @var wpdb
         */
        private $wpdb;
        /**
         * @var WPML_Include_Url
         */
        private $wpml_include_url_filter;
        /**
         * @var string
         */
        private $absolute_home;
        /**
         *
         * @param wpdb             $wpdb
         * @param WPML_Include_Url $wpml_include_url_filter
         */
        public function __construct(\wpdb $wpdb = \null, \WPML_Include_Url $wpml_include_url_filter = \null)
        {
        }
        /**
         * Returns the unfiltered home_url by directly retrieving it from wp_options.
         *
         * @return string
         */
        public function get_abs_home()
        {
        }
        /**
         * Checks if a $url points to a WP Admin screen.
         *
         * @param string $url
         * @return bool True if the input $url points to an admin screen.
         */
        public function is_url_admin($url)
        {
        }
        /**
         * Returns the unfiltered home option from the database.
         *
         * @uses \WPML_Include_Url::get_unfiltered_home in case the $wpml_include_url_filter global is loaded
         *
         * @return string
         */
        public function get_unfiltered_home_option()
        {
        }
    }
    interface IWPML_URL_Converter_Strategy
    {
        public function add_hooks();
        public function remove_hooks();
        public function convert_url_string($source_url, $lang);
        public function convert_admin_url_string($source_url, $lang);
        public function validate_language($language, $url);
        public function get_lang_from_url_string($url);
        public function get_home_url_relative($url, $lang);
        public function fix_trailingslashit($source_url);
        public function skip_convert_url_string($url, $lang_code);
        public function use_wp_login_url_converter();
    }
    abstract class WPML_URL_Converter_Abstract_Strategy implements \IWPML_URL_Converter_Strategy
    {
        protected $absolute_home;
        protected $default_language;
        protected $active_languages;
        protected $cache;
        /**
         * @var WPML_URL_Converter_Url_Helper
         */
        protected $url_helper;
        /**
         * @var WPML_URL_Converter_Lang_Param_Helper
         */
        protected $lang_param;
        /**
         * @var WPML_Slash_Management
         */
        protected $slash_helper;
        /**
         * @var WP_Rewrite
         */
        protected $wp_rewrite;
        /**
         * @param string                     $default_language
         * @param array<string>              $active_languages
         * @param WP_Rewrite|null            $wp_rewrite
         * @param WPML_Slash_Management|null $splash_helper
         */
        public function __construct($default_language, $active_languages, $wp_rewrite = \null, $splash_helper = \null)
        {
        }
        public function validate_language($language, $url)
        {
        }
        /**
         * @param WPML_URL_Converter_Url_Helper $url_helper
         */
        public function set_url_helper(\WPML_URL_Converter_Url_Helper $url_helper)
        {
        }
        /**
         * @return WPML_URL_Converter_Url_Helper
         */
        public function get_url_helper()
        {
        }
        /**
         * @param WPML_URL_Converter_Lang_Param_Helper $lang_param
         */
        public function set_lang_param(\WPML_URL_Converter_Lang_Param_Helper $lang_param)
        {
        }
        /**
         * @param WPML_Slash_Management $slash_helper
         */
        public function set_slash_helper(\WPML_Slash_Management $slash_helper)
        {
        }
        private function get_default_language()
        {
        }
        public function fix_trailingslashit($source_url)
        {
        }
        public function skip_convert_url_string($source_url, $lang_code)
        {
        }
        public function use_wp_login_url_converter()
        {
        }
    }
    class WPML_URL_Converter_Subdir_Strategy extends \WPML_URL_Converter_Abstract_Strategy
    {
        /** @var bool */
        private $use_directory_for_default_lang;
        /** @var array copy of $sitepress->get_settings( 'urls' ) */
        private $urls_settings;
        /** @var string|bool */
        private $root_url;
        /** @var array map of wpml codes to custom codes*/
        private $language_codes_map;
        private $language_codes_reverse_map;
        /** @var bool */
        private $is_rest_request;
        /**
         * @param bool   $use_directory_for_default_lang
         * @param string $default_language
         * @param array  $active_languages
         * @param array  $urls_settings
         */
        public function __construct($use_directory_for_default_lang, $default_language, $active_languages, $urls_settings)
        {
        }
        public function add_hooks()
        {
        }
        public function remove_hooks()
        {
        }
        /**
         * @param string $url
         *
         * @return string
         */
        public function convertRestUrl($url)
        {
        }
        public function get_lang_from_url_string($url)
        {
        }
        public function validate_language($language, $url)
        {
        }
        public function convert_url_string($source_url, $code)
        {
        }
        public function convert_admin_url_string($source_url, $lang)
        {
        }
        /**
         * @param string $url
         * @param string $language
         *
         * @return string
         */
        public function get_home_url_relative($url, $language)
        {
        }
        public function use_wp_login_url_converter()
        {
        }
        /**
         * Will return true if root URL or child of root URL
         *
         * @param string $url
         *
         * @return bool
         */
        private function is_root_url($url)
        {
        }
        /**
         * @return string|bool
         */
        private function get_root_url()
        {
        }
        /**
         * @param string $source_url
         *
         * @return string
         */
        private function filter_source_url($source_url)
        {
        }
        /**
         * @param string $url
         *
         * @return string
         */
        private function get_url_path($url)
        {
        }
        /**
         * @param string $url_path
         *
         * @return string
         */
        private function extract_lang_from_url_path($url_path)
        {
        }
        /**
         * @param string      $language_code
         * @param null|string $value_if_default_language
         *
         * @return string|null
         */
        private function get_language_of_current_dir($language_code, $value_if_default_language = \null)
        {
        }
    }
    class WPML_URL_Converter_Parameter_Strategy extends \WPML_URL_Converter_Abstract_Strategy
    {
        public function add_hooks()
        {
        }
        public function remove_hooks()
        {
        }
        public function get_lang_from_url_string($url)
        {
        }
        public function convert_url_string($source_url, $lang_code)
        {
        }
        public function convert_admin_url_string($source_url, $lang)
        {
        }
        /**
         * @param array $url_parts
         *
         * @return array
         */
        private function get_query_args(array $url_parts)
        {
        }
        /**
         * @param string $url
         * @param string $language
         *
         * @return string
         */
        public function get_home_url_relative($url, $language)
        {
        }
        /**
         * @param string $source_url
         *
         * @return string
         */
        public function fix_trailingslashit($source_url)
        {
        }
        public function use_wp_login_url_converter()
        {
        }
    }
    class WPML_URL_Converter_Domain_Strategy extends \WPML_URL_Converter_Abstract_Strategy
    {
        /** @var string[] $domains */
        private $domains = array();
        /**
         * @param array  $domains
         * @param string $default_language
         * @param array  $active_languages
         */
        public function __construct($domains, $default_language, $active_languages)
        {
        }
        public function add_hooks()
        {
        }
        public function remove_hooks()
        {
        }
        /**
         * Filter REST url to avoid CORS error in Gutenberg.
         * https://onthegosystems.myjetbrains.com/youtrack/issue/wpmlcore-7022
         *
         * @param string $url     REST URL.
         * @param string $path    REST route.
         * @param int    $blog_id Blog ID.
         * @param string $scheme  Sanitization scheme.
         *
         * @return string
         */
        public function convertRestUrlToCurrentDomain($url, $path, $blog_id, $scheme)
        {
        }
        public function get_lang_from_url_string($url)
        {
        }
        public function convert_url_string($source_url, $lang)
        {
        }
        public function convert_admin_url_string($source_url, $lang)
        {
        }
        private function convert_url($source_url, $lang)
        {
        }
        /**
         * @param string $base_url
         *
         * @return array
         */
        private function parse_domain_and_subdir($base_url)
        {
        }
        /**
         * @param string $url
         * @param string $language
         *
         * @return string
         */
        public function get_home_url_relative($url, $language)
        {
        }
        /**
         * @param string $url
         *
         * @return array|string
         */
        private function strip_protocol($url)
        {
        }
    }
    class WPML_URL_Converter
    {
        /**
         * @var IWPML_URL_Converter_Strategy
         */
        private $strategy;
        /**
         * @var string
         */
        protected $default_language;
        /**
         * @var string[]
         */
        protected $active_languages;
        /**
         * @var WPML_URL_Converter_Url_Helper
         */
        protected $home_url_helper;
        /**
         * @var WPML_URL_Converter_Lang_Param_Helper
         */
        protected $lang_param;
        /**
         * @var WPML_Slash_Management
         */
        protected $slash_helper;
        /**
         * @var WPML_Resolve_Object_Url_Helper
         */
        protected $object_url_helper;
        /**
         * @param IWPML_URL_Converter_Strategy   $strategy
         * @param WPML_Resolve_Object_Url_Helper $object_url_helper
         * @param string                         $default_language
         * @param array<string>                  $active_languages
         */
        public function __construct(\IWPML_URL_Converter_Strategy $strategy, \WPML_Resolve_Object_Url_Helper $object_url_helper, $default_language, $active_languages)
        {
        }
        /**
         * @return IWPML_URL_Converter_Strategy
         */
        public function get_strategy()
        {
        }
        /**
         * @param WPML_URL_Converter_Url_Helper $url_helper
         */
        public function set_url_helper(\WPML_URL_Converter_Url_Helper $url_helper)
        {
        }
        /**
         * @return WPML_URL_Converter_Url_Helper
         */
        public function get_url_helper()
        {
        }
        public function get_abs_home()
        {
        }
        /**
         * @param WPML_URL_Converter_Lang_Param_Helper $lang_param_helper
         */
        public function set_lang_param_helper(\WPML_URL_Converter_Lang_Param_Helper $lang_param_helper)
        {
        }
        /**
         * @param WPML_Slash_Management $slash_helper
         */
        public function set_slash_helper(\WPML_Slash_Management $slash_helper)
        {
        }
        public function get_default_site_url()
        {
        }
        /**
         * Scope of this function:
         * 1. Convert the home URL in the specified language depending on language negotiation:
         *    1. Add a language directory
         *    2. Change the domain
         *    3. Add a language parameter
         * 2. If the requested URL is equal to the current URL, the URI will be adapted
         * with potential slug translations for:
         *    - single post slugs
         *    - taxonomy term slug
         *
         * WARNING: The URI slugs won't be translated for arbitrary URL (not the current one)
         *
         * @param string $url
         * @param bool   $lang_code
         *
         * @return bool|mixed|string
         */
        public function convert_url($url, $lang_code = \false)
        {
        }
        /**
         * Takes a URL and returns the language of the document it points at
         *
         * @param string $url
         * @return string
         */
        public function get_language_from_url($url)
        {
        }
        /**
         * @param string $url
         * @param string $language
         *
         * @return string
         */
        public function get_home_url_relative($url, $language)
        {
        }
        /**
         * @param SitePress $sitepress
         *
         * @return WPLoginUrlConverter|null
         */
        public function get_wp_login_url_converter($sitepress)
        {
        }
        /**
         * @param string $url
         *
         * @return bool
         */
        private function can_resolve_object_url($url)
        {
        }
        /** @return WPML_URL_Converter */
        public static function getGlobalInstance()
        {
        }
    }
    class WPML_URL_Cached_Converter extends \WPML_URL_Converter
    {
        /** @var  string[] $cache */
        private $cache;
        /**
         * @param string      $url
         * @param string|bool $lang_code
         *
         * @return string
         */
        public function convert_url($url, $lang_code = \false)
        {
        }
        /**
         * @param string $url
         *
         * @return string
         */
        public function get_language_from_url($url)
        {
        }
    }
    class WPML_URL_Converter_CPT
    {
        /**
         * @var WPML_Slash_Management
         */
        private $slash_helper;
        /**
         * @param WPML_Slash_Management $slash_helper
         */
        public function __construct(\WPML_Slash_Management $slash_helper = \null)
        {
        }
        /**
         * Adjusts the CPT archive slug for possible slug translations from ST.
         *
         * @param string      $link
         * @param string      $post_type
         * @param null|string $language_code
         *
         * @return string
         */
        public function adjust_cpt_slug_in_url($link, $post_type, $language_code = \null)
        {
        }
    }
    class WPML_URL_Converter_Factory
    {
        /**
         * @var array
         */
        private $settings;
        /**
         * @var string
         */
        private $default_lang_code;
        /**
         * @var array
         */
        private $active_language_codes;
        /**
         * @var WPML_Resolve_Object_Url_Helper_Factory
         */
        private $object_url_helper_factory;
        /** @var  WPML_URL_Converter */
        private static $previous_url_converter;
        const SUBDIR = 1;
        const DOMAIN = 2;
        /**
         * @param array  $settings
         * @param string $default_lang_code
         * @param array  $active_language_codes
         */
        public function __construct($settings, $default_lang_code, $active_language_codes)
        {
        }
        public static function remove_previous_hooks()
        {
        }
        /**
         * @return WPML_Resolve_Object_Url_Helper_Factory
         */
        public function get_object_url_helper_factory()
        {
        }
        /**
         * @param WPML_Resolve_Object_Url_Helper_Factory $factory
         */
        public function set_object_url_helper_factory(\WPML_Resolve_Object_Url_Helper_Factory $factory)
        {
        }
        /**
         * @param int $url_type
         *
         * @return WPML_URL_Converter
         */
        public function create($url_type)
        {
        }
        /**
         * @return WPML_URL_Cached_Converter
         */
        private function create_subdir_converter()
        {
        }
        /**
         * @return WPML_URL_Cached_Converter
         */
        private function create_domain_converter()
        {
        }
        /**
         * @return WPML_URL_Cached_Converter
         */
        private function create_parameter_converter()
        {
        }
    }
    class WPML_Lang_Domain_Filters
    {
        private $wpml_url_converter;
        private $wpml_wp_api;
        private $debug_backtrace;
        private $domains = array();
        /**
         * WPML_Lang_Domain_Filters constructor.
         *
         * @param \WPML_URL_Converter $wpml_url_converter
         * @param \WPML_WP_API $wpml_wp_api
         */
        public function __construct(\WPML_URL_Converter $wpml_url_converter, \WPML_WP_API $wpml_wp_api, \WPML_Debug_BackTrace $debug_backtrace)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param string $url
         *
         * @return string
         */
        public function convert_url($url)
        {
        }
        /**
         * @param array $upload_dir
         *
         * @return array
         */
        public function upload_dir_filter_callback($upload_dir)
        {
        }
        /**
         * @param string $url
         *
         * @return string
         */
        public function siteurl_callback($url)
        {
        }
        /**
         * @return string
         */
        private function get_host_from_HTTP_HOST()
        {
        }
        /**
         * @param string $host
         *
         * @return bool
         */
        private function is_host_valid($host)
        {
        }
        /**
         * @return array
         */
        private function get_domains()
        {
        }
        /**
         * @param string $url
         * @param string $path
         *
         * @return string
         */
        public function admin_url_filter($url, $path)
        {
        }
        /**
         * Convert logout url only for front-end.
         *
         * @param string $logout_url
         *
         * @return string
         */
        public function convert_logout_url($logout_url)
        {
        }
    }
    class WPML_Lang_Parameter_Filters
    {
        public function add_hooks()
        {
        }
        public function request_filter($request)
        {
        }
        /**
         * Filters the pagination links on taxonomy archives to properly have the language parameter after the URI.
         *
         * @param string $url
         *
         * @return string
         */
        public function paginated_url_filter($url)
        {
        }
        /**
         * Filters the pagination links on paginated posts and pages, acting on the links html
         * output containing the anchor tag the link is a property of.
         *
         * @param string $link_html
         *
         * @return string
         *
         * @hook wp_link_pages_link
         */
        public function paginated_link_filter($link_html)
        {
        }
    }
    class WPML_Tax_Permalink_Filters_Factory implements \IWPML_Frontend_Action_Loader, \IWPML_Backend_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_Tax_Permalink_Filters implements \IWPML_Action
    {
        /** @var WPML_Translation_Element_Factory */
        private $term_element_factory;
        /** @var WPML_URL_Converter */
        private $url_converter;
        /** @var WPML_WP_Cache_Factory $cache_factory */
        private $cache_factory;
        /** @var WPML_Get_LS_Languages_Status  */
        private $ls_languages_status;
        public function __construct(\WPML_URL_Converter $url_converter, \WPML_WP_Cache_Factory $cache_factory, \WPML_Translation_Element_Factory $term_element_factory, \WPML_Get_LS_Languages_Status $ls_language_status)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param string                 $permalink
         * @param int|\WP_Term|\stdClass $tag
         * @param string                 $taxonomy
         *
         * @return string
         */
        public function cached_filter_tax_permalink($permalink, $tag, $taxonomy)
        {
        }
        /**
         * Filters the permalink pointing at a taxonomy archive to correctly reflect the language of its underlying term
         *
         * @param string $permalink url pointing at a term's archive
         * @param int    $tag_id
         *
         * @return string
         */
        private function filter_tax_permalink($permalink, $tag_id)
        {
        }
        private function is_display_as_translated_and_in_default_lang(\WPML_Translation_Element $element)
        {
        }
        private function is_link_for_language_switcher()
        {
        }
    }
    class WPML_Rewrite_Rules_Filter
    {
        /**
         * @var array
         */
        private $active_languages;
        /**
         * @var WPML_URL_Filters
         */
        private $wpml_url_filters;
        /**
         * @param array            $active_languages
         * @param WPML_URL_Filters $wpml_url_filters
         */
        public function __construct($active_languages, $wpml_url_filters = \null)
        {
        }
        /**
         * @param string $htaccess_string Content of the .htaccess file
         *
         * @return string .htaccess file contents with adjusted RewriteBase
         */
        public function rid_of_language_param($htaccess_string)
        {
        }
        /**
         * Check if it is permalink page in admin.
         *
         * @return bool
         */
        private function is_permalink_page()
        {
        }
        /**
         * Check if it is WooCommerce shop page in admin.
         *
         * @return bool
         */
        private function is_shop_page()
        {
        }
        /**
         * Check if it as a certain screen on admin page.
         *
         * @param string $screen_id
         *
         * @return bool
         */
        private function is_admin_screen($screen_id)
        {
        }
    }
    class WPML_Allowed_Redirect_Hosts extends \WPML_SP_User
    {
        public function __construct(&$sitepress)
        {
        }
        public function get_hosts($hosts)
        {
        }
    }
    class WPML_Absolute_Links_Blacklist
    {
        private $blacklist_requests;
        public function __construct($blacklist_requests)
        {
        }
        public function is_blacklisted($request)
        {
        }
        private function is_blacklisted_with_regex($request)
        {
        }
        private function is_regex($blacklist_request)
        {
        }
    }
    class WPML_URL_HTTP_Referer
    {
        private $rest;
        public function __construct(\WPML_Rest $rest)
        {
        }
        /**
         * @param string $backup_url
         *
         * @return string
         */
        public function get_url($backup_url)
        {
        }
        /**
         * @return bool|int
         */
        public function get_trid()
        {
        }
        /**
         * We need this in order to detect the language when adding
         * translation from inside of a Gutenberg page while
         * they don't provide a JS API which allows us to do it
         *
         * @link https://github.com/WordPress/gutenberg/issues/5958
         * @link https://onthegosystems.myjetbrains.com/youtrack/issue/wpmlcore-5265
         *
         * @return bool
         */
        public function is_rest_request_called_from_post_edit_page()
        {
        }
        public static function is_post_edit_page()
        {
        }
    }
    class WPML_Include_Url extends \WPML_WPDB_User
    {
        private $unfiltered_home_url;
        private $requested_host;
        public function __construct(&$wpdb, $requested_host)
        {
        }
        public function filter_include_url($result)
        {
        }
        public function wpml_password_form_filter($form)
        {
        }
        /**
         * Returns the value of the unfiltered home option directly from the wp_options table.
         *
         * @return string
         */
        public function get_unfiltered_home()
        {
        }
    }
    class WPML_Language_Domains
    {
        private $domains;
        public function __construct(\SitePress $sitepress, \WPML_URL_Converter_Url_Helper $converter_url_helper)
        {
        }
        public function get($lang)
        {
        }
    }
    class WPML_Root_Page
    {
        public static function init()
        {
        }
        /**
         * Checks if the value in $_SERVER['REQUEST_URI] points towards the root page.
         * Therefore this can be used to check if the current request points towards the root page.
         *
         * @return bool
         */
        public static function is_current_request_root()
        {
        }
        /**
         * @param string $requested_url
         *                       Checks if a requested url points towards the root page.
         *
         * @return bool
         */
        public static function is_root_page($requested_url)
        {
        }
        public static function uses_html_root()
        {
        }
        /**
         * Returns the id of the root page or false if it isn't set.
         *
         * @return bool|int
         */
        public static function get_root_id()
        {
        }
        /**
         * Returns the slug of the root page or false if non exists.
         *
         * @return bool|string
         */
        private static function get_root_slug()
        {
        }
        /**
         * @param string $requested_url
         *                       Takes a request_url in the format of $_SERVER['REQUEST_URI']
         *                       and returns an associative array containing its slugs ans query string.
         *
         * @return array
         */
        private static function get_slugs_and_get_query($requested_url)
        {
        }
        /**
         * @param string $path
         *              Turns a query string into an array of its slugs.
         *              The array is filtered so to not contain empty values and
         *              consecutively and numerically indexed starting at 0.
         *
         * @return array
         */
        private static function get_slugs_array($path)
        {
        }
        /**
         * @param array $slugs
         *               Checks if a given set of slugs points towards the root page or not.
         *               The result of this can always be overridden by GET parameters and is not a certain
         *               check as to being on the root page or not.
         *
         * @return bool
         */
        private static function slugs_point_to_root($slugs)
        {
        }
        /**
         * Turns a given query string into an associative array of its parameters.
         *
         * @param string $query_string
         * @return array<string,string>
         */
        private static function get_query_array_from_string($query_string)
        {
        }
        /**
         * @param string $query_string
         *                      Checks if the WP_Query functionality can decisively recognize if a querystring points
         *                      towards an archive.
         *
         * @return bool
         */
        private static function query_points_to_archive($query_string)
        {
        }
        /**
         * @param string $query_string
         *                      Checks if a given query string decisively points towards or away from the root page.
         *
         * @return int
         */
        private static function get_query_target_from_query_string($query_string)
        {
        }
        /**
         * @param array $query_params
         *                      Checks if a set of query parameters decisively points towards or away from the root page.
         *
         * @return int
         */
        private static function get_query_target_from_params_array($query_params)
        {
        }
        /**
         * @param false|WP_Post $post
         *              Filters the postID used by the preview for the case of the root page preview.
         *
         * @return null|WP_Post
         */
        public static function front_page_id_filter($post)
        {
        }
        /**
         * Filters the template that is used for the root page
         *
         * @param string $template
         *
         * @return string
         */
        public static function wpml_home_url_template_include($template)
        {
        }
        /**
         * @return string
         */
        public static function get_root_page_template()
        {
        }
    }
    // phpcs:disable PEAR.NamingConventions.ValidClassName.Invalid
    // phpcs:disable PEAR.NamingConventions.ValidClassName.StartWithCapital
    /**
     * Class icl_cache
     */
    class icl_cache
    {
        /** @var array */
        protected $data;
        /** @var string */
        protected $name;
        /** @var bool */
        protected $cache_to_option;
        /** @var bool */
        protected $cache_needs_saving;
        public function __construct($name = '', $cache_to_option = \false)
        {
        }
        public function init()
        {
        }
        public function save_cache_if_required()
        {
        }
        public function get($key)
        {
        }
        public function has_key($key)
        {
        }
        public function set($key, $value)
        {
        }
        public function clear()
        {
        }
    }
    class ICL_AdminNotifier
    {
        public static function init()
        {
        }
        public static function add_script()
        {
        }
        /**
         * @param string $message
         * @param string $type
         */
        public static function add_instant_message($message, $type = '')
        {
        }
        /**
         * @param int $message_id
         *
         * @return bool|array
         */
        public static function get_message($message_id)
        {
        }
        public static function message_id_exists($message_id)
        {
        }
        private static function get_messages()
        {
        }
        private static function save_messages($messages)
        {
        }
        /**
         * @param array<mixed> $args
         *    Args attributes:
         *    string        id - An unique identifier for the message
         *    string        msg - The actual message
         *    string        type (optional) - Any string: it will be used as css class fro the message container. A typical value is 'error', but the following strings can be also used: icl-admin-message-information, icl-admin-message-warning
         *    array         classes (optional) - Display the notice only on specific url(s)
         *    bool          hide (optional) - Enable the toggle link to permanently hide the notice
         *    bool          hide_per_user (optional) - Enable the toggle link per user basis (overrides hide option)
         *    bool          dismiss (optional) - Enable the dismiss option
         *    bool          dismiss_per_user (optional) - Enable the dismiss option per user basis (overrides dismiss option)
         *    bool|string   fallback_text (optional) - A message to show when the notice gets hidden
         *    bool|string   fallback_type (optional) - The message type to use in the fallback message (@see $type)
         *    array         fallback_classes (optional) - The message type to use in the fallback message (@see $type)
         *    bool|string   group (optional) - A way to group messages: when displaying messages stored with this method, it's possible to filter them by group (@see ICL_AdminNotifier::displayMessages)
         *    bool          admin_notice (optional) - Hook the rendering to the 'admin_notice' action
         *    string|array  limit_to_page (optional) - Display the notice only on specific page(s)
         */
        public static function add_message($args)
        {
        }
        public static function is_user_dismissed($message_data)
        {
        }
        public static function is_globally_dismissed($message_data)
        {
        }
        public static function is_globally_hidden($message_data)
        {
        }
        public static function hide_message()
        {
        }
        public static function get_message_id()
        {
        }
        public static function show_message()
        {
        }
        public static function engage_message()
        {
        }
        private static function set_message_display($message_id, $show, $action, $action_past, $action_user)
        {
        }
        public static function remove_message($message_id)
        {
        }
        public static function remove_message_group($message_group)
        {
        }
        public static function display_messages($group = \false)
        {
        }
        /**
         * @deprecated deprecated @since version 3.2. Use ICL_AdminNotifier::display_message()
         *
         * @param bool $group
         */
        public static function displayMessages($group = \false)
        {
        }
        public static function admin_notices()
        {
        }
        /**
         * @param string       $id
         * @param string       $message
         * @param string       $type
         * @param string|array $classes
         * @param bool         $hide
         * @param bool         $dismiss
         * @param bool         $admin_notice
         * @param bool         $echo
         *
         * @return string
         */
        private static function display_message($id, $message, $type = '', $classes = array(), $hide = \true, $dismiss = \false, $admin_notice = \false, $echo = \false)
        {
        }
        public static function display_instant_message($message, $type = 'information', $class = \false, $return = \false, $fadeout = \false)
        {
        }
        /**
         * @param array<mixed> $args
         *
         * @return mixed
         */
        private static function sanitize_message_args($args)
        {
        }
        static function troubleshooting_js_data($data)
        {
        }
        static function has_hidden_messages()
        {
        }
        static function troubleshooting()
        {
        }
        static function remove_notifications()
        {
        }
        static function restore_notifications()
        {
        }
        /** Deprecated methods */
        /**
         * @param int $message_id
         *
         * @return bool
         * @deprecated deprecated @since version 3.2. Use ICL_AdminNotifier::remove_message()
         *
         */
        public static function removeMessage($message_id)
        {
        }
        /**
         * @deprecated deprecated @since version 3.2
         */
        public static function hideMessage()
        {
        }
        /**
         * @deprecated deprecated @since version 3.2
         *
         * @param string $message
         * @param string $type
         */
        public static function addInstantMessage($message, $type = '')
        {
        }
        /**
         * @deprecated deprecated @since version 3.2
         */
        public static function addScript()
        {
        }
        /**
         * @deprecated deprecated @since version 3.2
         *
         * @param string $id               An unique identifier for the message
         * @param string $msg              The actual message
         * @param string $type             (optional) Any string: it will be used as css class fro the message container. A typical value is 'error', but the following strings can be also used: icl-admin-message-information, icl-admin-message-warning
         * @param bool   $hide             (optional) Enable the toggle link to permanently hide the notice
         * @param bool   $fallback_message (optional) A message to show when the notice gets hidden
         * @param bool   $fallback_type    (optional) The message type to use in the fallback message (@see $type)
         * @param bool   $group            (optional) A way to group messages: when displaying messages stored with this method, it's possible to filter them by group (@see ICL_AdminNotifier::displayMessages)
         * @param bool   $admin_notice     (optional) Hook the rendering to the 'admin_notice' action
         */
        public static function addMessage($id, $msg, $type = '', $hide = \true, $fallback_message = \false, $fallback_type = \false, $group = \false, $admin_notice = \false)
        {
        }
        /**
         * @param string $message
         * @param string $type
         * @param bool   $class
         * @param bool   $return
         *
         * @return string
         * @deprecated deprecated @since version 3.2. Use ICL_AdminNotifier::display_instant_message()
         *
         */
        public static function displayInstantMessage($message, $type = 'information', $class = \false, $return = \false)
        {
        }
        /**
         * @param string $message
         *
         * @return string
         */
        public static function sanitize_and_format_message($message)
        {
        }
    }
    /**
     * Class SitePressLanguageSwitcher
     *
     * @deprecated since 3.6.0
     */
    class SitePressLanguageSwitcher
    {
        /**
         * @deprecated since 3.6.0
         *
         * @return string
         */
        static function get_language_selector_footer()
        {
        }
        /**
         * @deprecated since 3.6.0
         */
        function language_selector_footer()
        {
        }
        /**
         * @param string $native_name
         * @param bool   $translated_name
         * @param bool   $show_native_name
         * @param bool   $show_translate_name
         * @param bool   $include_html
         *
         * @return string
         * @deprecated since 3.6.0
         *
         */
        public function language_display($native_name, $translated_name = \false, $show_native_name = \false, $show_translate_name = \false, $include_html = \true)
        {
        }
    }
    /*
     * NextGen Gallery plugin integration.
     *
     * - Filters the_content
     * -- Adjusts gallery preview image URL from default to current language (2.0.66 <=)
     */
    class WPML_Plugin_Integration_Nexgen_Gallery
    {
        function __construct()
        {
        }
        /**
         * Filters post content and fixes gallery preview images URL.
         *
         * Adjust gallery preview image URL from default to current language.
         * Allows NextGen to match and replace preview images with gallery.
         * NextGen inserts image previews with default language URL.
         *
         * @global SitePress $sitepress
         * @param string $content
         * @return string
         */
        public static function the_content_gallery_preview_images($content)
        {
        }
    }
    class WPML_Post_Comments extends \WPML_WPDB_User
    {
        /**
         * @param wpdb $wpdb
         */
        public function __construct(&$wpdb)
        {
        }
        private function hooks()
        {
        }
        public function count_orphans_action()
        {
        }
        public function get_orphan_comments($return_count = \false, $limit = 10)
        {
        }
        public function delete_orphans_action()
        {
        }
        /**
         * @param string $hook
         */
        public function enqueue_scripts($hook)
        {
        }
        public function troubleshooting_action()
        {
        }
        /**
         * @param int $how_many
         *
         * @return false|int
         */
        public function delete_orphans($how_many)
        {
        }
        /**
         * @param array<int> $post_ids
         */
        private function update_comments_count($post_ids)
        {
        }
        /**
         * @param string|array|int $comment_ids
         *
         * @return mixed
         */
        private function get_post_ids_from_comments_ids($comment_ids)
        {
        }
    }
    class WPML_Post_Edit_Ajax
    {
        const AJAX_ACTION_SWITCH_POST_LANGUAGE = 'wpml_switch_post_language';
        /**
         * For test purposes
         *
         * @var WPML_Custom_Field_Setting_Factory
         */
        public static $post_custom_field_settings;
        /**
         * Ajax handler for adding a term via Ajax.
         */
        public static function wpml_save_term_action()
        {
        }
        /**
         * @param \SitePress          $sitepress
         * @param string              $lang
         * @param string              $taxonomy
         * @param string              $slug
         * @param string              $name
         * @param int                 $trid
         * @param string              $description
         * @param array<string,mixed> $meta_data
         *
         * @return \WP_Term|false
         */
        public static function save_term_ajax($sitepress, $lang, $taxonomy, $slug, $name, $trid, $description, $meta_data)
        {
        }
        /**
         * Gets the content of a post, its excerpt as well as its title and returns it as an array
         *
         * @param string $content_type
         * @param string $excerpt_type
         * @param int    $trid
         * @param string $lang
         *
         * @return array containing all the fields information
         */
        public static function copy_from_original_fields($content_type, $excerpt_type, $trid, $lang)
        {
        }
        /**
         * Gets the content of a custom posts custom field , its excerpt as well as its title and returns it as an array
         *
         * @param \WP_Post $post
         *
         * @return array<string,string|array<string,string>>
         */
        public static function copy_from_original_custom_fields($post)
        {
        }
        /**
         * @param WP_Post $post
         * @return array
         */
        private static function copy_meta_values_from_original($post)
        {
        }
        /**
         * Ajax handler for switching the language of a post.
         */
        public static function wpml_switch_post_language()
        {
        }
        public static function wpml_get_default_lang()
        {
        }
        /**
         * @param array $term
         * @param array $meta_data
         * @param bool  $is_new_term
         *
         * @return bool
         */
        private static function add_term_metadata($term, $meta_data, $is_new_term)
        {
        }
    }
    class ICanLocalizeQuery
    {
        private $site_id;
        private $access_key;
        private $error = \null;
        private $sitepress;
        private $wpml_icl_client;
        function __construct($site_id = \null, $access_key = \null, \SitePress $sitepress = \null, $wpml_icl_client = \null)
        {
        }
        public function setting($setting)
        {
        }
        public function error()
        {
        }
        function updateAccount($data)
        {
        }
        /**
         * @param bool $force
         *
         * @return array of website details returned from a direct API call to ICL
         */
        function get_website_details($force = \false)
        {
        }
        private function request($request, $method = 'GET', $formvars = \null)
        {
        }
    }
    class WPML_Mobile_Detect
    {
        protected $scriptVersion = '2.5.7';
        // External info.
        protected $userAgent = \null;
        protected $httpHeaders;
        // Arrays holding all detection rules.
        protected $mobileDetectionRules = \null;
        protected $mobileDetectionRulesExtended = \null;
        // Type of detection to use.
        protected $detectionType = 'mobile';
        // mobile, extended @todo: refactor this.
        // List of mobile devices (phones)
        protected $phoneDevices = array(
            'iPhone' => '\\biPhone.*Mobile|\\biPod|\\biTunes',
            'BlackBerry' => 'BlackBerry|\\bBB10\\b|rim[0-9]+',
            'HTC' => 'HTC|HTC.*(Sensation|Evo|Vision|Explorer|6800|8100|8900|A7272|S510e|C110e|Legend|Desire|T8282)|APX515CKT|Qtek9090|APA9292KT|HD_mini|Sensation.*Z710e|PG86100|Z715e|Desire.*(A8181|HD)|ADR6200|ADR6425|001HT|Inspire 4G',
            'Nexus' => 'Nexus One|Nexus S|Galaxy.*Nexus|Android.*Nexus.*Mobile',
            // @todo: Is 'Dell Streak' a tablet or a phone? ;)
            'Dell' => 'Dell.*Streak|Dell.*Aero|Dell.*Venue|DELL.*Venue Pro|Dell Flash|Dell Smoke|Dell Mini 3iX|XCD28|XCD35|\\b001DL\\b|\\b101DL\\b|\\bGS01\\b',
            'Motorola' => 'Motorola|\\bDroid\\b.*Build|DROIDX|Android.*Xoom|HRI39|MOT-|A1260|A1680|A555|A853|A855|A953|A955|A956|Motorola.*ELECTRIFY|Motorola.*i1|i867|i940|MB200|MB300|MB501|MB502|MB508|MB511|MB520|MB525|MB526|MB611|MB612|MB632|MB810|MB855|MB860|MB861|MB865|MB870|ME501|ME502|ME511|ME525|ME600|ME632|ME722|ME811|ME860|ME863|ME865|MT620|MT710|MT716|MT720|MT810|MT870|MT917|Motorola.*TITANIUM|WX435|WX445|XT300|XT301|XT311|XT316|XT317|XT319|XT320|XT390|XT502|XT530|XT531|XT532|XT535|XT603|XT610|XT611|XT615|XT681|XT701|XT702|XT711|XT720|XT800|XT806|XT860|XT862|XT875|XT882|XT883|XT894|XT909|XT910|XT912|XT928',
            'Samsung' => 'Samsung|BGT-S5230|GT-B2100|GT-B2700|GT-B2710|GT-B3210|GT-B3310|GT-B3410|GT-B3730|GT-B3740|GT-B5510|GT-B5512|GT-B5722|GT-B6520|GT-B7300|GT-B7320|GT-B7330|GT-B7350|GT-B7510|GT-B7722|GT-B7800|GT-C3010|GT-C3011|GT-C3060|GT-C3200|GT-C3212|GT-C3212I|GT-C3222|GT-C3300|GT-C3300K|GT-C3303|GT-C3303K|GT-C3310|GT-C3322|GT-C3330|GT-C3350|GT-C3500|GT-C3510|GT-C3530|GT-C3630|GT-C3780|GT-C5010|GT-C5212|GT-C6620|GT-C6625|GT-C6712|GT-E1050|GT-E1070|GT-E1075|GT-E1080|GT-E1081|GT-E1085|GT-E1087|GT-E1100|GT-E1107|GT-E1110|GT-E1120|GT-E1125|GT-E1130|GT-E1160|GT-E1170|GT-E1175|GT-E1180|GT-E1182|GT-E1200|GT-E1210|GT-E1225|GT-E1230|GT-E1390|GT-E2100|GT-E2120|GT-E2121|GT-E2152|GT-E2220|GT-E2222|GT-E2230|GT-E2232|GT-E2250|GT-E2370|GT-E2550|GT-E2652|GT-E3210|GT-E3213|GT-I5500|GT-I5503|GT-I5700|GT-I5800|GT-I5801|GT-I6410|GT-I6420|GT-I7110|GT-I7410|GT-I7500|GT-I8000|GT-I8150|GT-I8160|GT-I8320|GT-I8330|GT-I8350|GT-I8530|GT-I8700|GT-I8703|GT-I8910|GT-I9000|GT-I9001|GT-I9003|GT-I9010|GT-I9020|GT-I9023|GT-I9070|GT-I9100|GT-I9103|GT-I9220|GT-I9250|GT-I9300|GT-I9300 |GT-M3510|GT-M5650|GT-M7500|GT-M7600|GT-M7603|GT-M8800|GT-M8910|GT-N7000|GT-P6810|GT-P7100|GT-S3110|GT-S3310|GT-S3350|GT-S3353|GT-S3370|GT-S3650|GT-S3653|GT-S3770|GT-S3850|GT-S5210|GT-S5220|GT-S5229|GT-S5230|GT-S5233|GT-S5250|GT-S5253|GT-S5260|GT-S5263|GT-S5270|GT-S5300|GT-S5330|GT-S5350|GT-S5360|GT-S5363|GT-S5369|GT-S5380|GT-S5380D|GT-S5560|GT-S5570|GT-S5600|GT-S5603|GT-S5610|GT-S5620|GT-S5660|GT-S5670|GT-S5690|GT-S5750|GT-S5780|GT-S5830|GT-S5839|GT-S6102|GT-S6500|GT-S7070|GT-S7200|GT-S7220|GT-S7230|GT-S7233|GT-S7250|GT-S7500|GT-S7530|GT-S7550|GT-S7562|GT-S8000|GT-S8003|GT-S8500|GT-S8530|GT-S8600|SCH-A310|SCH-A530|SCH-A570|SCH-A610|SCH-A630|SCH-A650|SCH-A790|SCH-A795|SCH-A850|SCH-A870|SCH-A890|SCH-A930|SCH-A950|SCH-A970|SCH-A990|SCH-I100|SCH-I110|SCH-I400|SCH-I405|SCH-I500|SCH-I510|SCH-I515|SCH-I600|SCH-I730|SCH-I760|SCH-I770|SCH-I830|SCH-I910|SCH-I920|SCH-LC11|SCH-N150|SCH-N300|SCH-R100|SCH-R300|SCH-R351|SCH-R400|SCH-R410|SCH-T300|SCH-U310|SCH-U320|SCH-U350|SCH-U360|SCH-U365|SCH-U370|SCH-U380|SCH-U410|SCH-U430|SCH-U450|SCH-U460|SCH-U470|SCH-U490|SCH-U540|SCH-U550|SCH-U620|SCH-U640|SCH-U650|SCH-U660|SCH-U700|SCH-U740|SCH-U750|SCH-U810|SCH-U820|SCH-U900|SCH-U940|SCH-U960|SCS-26UC|SGH-A107|SGH-A117|SGH-A127|SGH-A137|SGH-A157|SGH-A167|SGH-A177|SGH-A187|SGH-A197|SGH-A227|SGH-A237|SGH-A257|SGH-A437|SGH-A517|SGH-A597|SGH-A637|SGH-A657|SGH-A667|SGH-A687|SGH-A697|SGH-A707|SGH-A717|SGH-A727|SGH-A737|SGH-A747|SGH-A767|SGH-A777|SGH-A797|SGH-A817|SGH-A827|SGH-A837|SGH-A847|SGH-A867|SGH-A877|SGH-A887|SGH-A897|SGH-A927|SGH-B100|SGH-B130|SGH-B200|SGH-B220|SGH-C100|SGH-C110|SGH-C120|SGH-C130|SGH-C140|SGH-C160|SGH-C170|SGH-C180|SGH-C200|SGH-C207|SGH-C210|SGH-C225|SGH-C230|SGH-C417|SGH-C450|SGH-D307|SGH-D347|SGH-D357|SGH-D407|SGH-D415|SGH-D780|SGH-D807|SGH-D980|SGH-E105|SGH-E200|SGH-E315|SGH-E316|SGH-E317|SGH-E335|SGH-E590|SGH-E635|SGH-E715|SGH-E890|SGH-F300|SGH-F480|SGH-I200|SGH-I300|SGH-I320|SGH-I550|SGH-I577|SGH-I600|SGH-I607|SGH-I617|SGH-I627|SGH-I637|SGH-I677|SGH-I700|SGH-I717|SGH-I727|SGH-i747M|SGH-I777|SGH-I780|SGH-I827|SGH-I847|SGH-I857|SGH-I896|SGH-I897|SGH-I900|SGH-I907|SGH-I917|SGH-I927|SGH-I937|SGH-I997|SGH-J150|SGH-J200|SGH-L170|SGH-L700|SGH-M110|SGH-M150|SGH-M200|SGH-N105|SGH-N500|SGH-N600|SGH-N620|SGH-N625|SGH-N700|SGH-N710|SGH-P107|SGH-P207|SGH-P300|SGH-P310|SGH-P520|SGH-P735|SGH-P777|SGH-Q105|SGH-R210|SGH-R220|SGH-R225|SGH-S105|SGH-S307|SGH-T109|SGH-T119|SGH-T139|SGH-T209|SGH-T219|SGH-T229|SGH-T239|SGH-T249|SGH-T259|SGH-T309|SGH-T319|SGH-T329|SGH-T339|SGH-T349|SGH-T359|SGH-T369|SGH-T379|SGH-T409|SGH-T429|SGH-T439|SGH-T459|SGH-T469|SGH-T479|SGH-T499|SGH-T509|SGH-T519|SGH-T539|SGH-T559|SGH-T589|SGH-T609|SGH-T619|SGH-T629|SGH-T639|SGH-T659|SGH-T669|SGH-T679|SGH-T709|SGH-T719|SGH-T729|SGH-T739|SGH-T746|SGH-T749|SGH-T759|SGH-T769|SGH-T809|SGH-T819|SGH-T839|SGH-T919|SGH-T929|SGH-T939|SGH-T959|SGH-T989|SGH-U100|SGH-U200|SGH-U800|SGH-V205|SGH-V206|SGH-X100|SGH-X105|SGH-X120|SGH-X140|SGH-X426|SGH-X427|SGH-X475|SGH-X495|SGH-X497|SGH-X507|SGH-X600|SGH-X610|SGH-X620|SGH-X630|SGH-X700|SGH-X820|SGH-X890|SGH-Z130|SGH-Z150|SGH-Z170|SGH-ZX10|SGH-ZX20|SHW-M110|SPH-A120|SPH-A400|SPH-A420|SPH-A460|SPH-A500|SPH-A560|SPH-A600|SPH-A620|SPH-A660|SPH-A700|SPH-A740|SPH-A760|SPH-A790|SPH-A800|SPH-A820|SPH-A840|SPH-A880|SPH-A900|SPH-A940|SPH-A960|SPH-D600|SPH-D700|SPH-D710|SPH-D720|SPH-I300|SPH-I325|SPH-I330|SPH-I350|SPH-I500|SPH-I600|SPH-I700|SPH-L700|SPH-M100|SPH-M220|SPH-M240|SPH-M300|SPH-M305|SPH-M320|SPH-M330|SPH-M350|SPH-M360|SPH-M370|SPH-M380|SPH-M510|SPH-M540|SPH-M550|SPH-M560|SPH-M570|SPH-M580|SPH-M610|SPH-M620|SPH-M630|SPH-M800|SPH-M810|SPH-M850|SPH-M900|SPH-M910|SPH-M920|SPH-M930|SPH-N100|SPH-N200|SPH-N240|SPH-N300|SPH-N400|SPH-Z400|SWC-E100|SCH-i909|GT-N7100|GT-N8010',
            'Sony' => 'sony|SonyEricsson|SonyEricssonLT15iv|LT18i|E10i',
            'Asus' => 'Asus.*Galaxy',
            'Palm' => 'PalmSource|Palm',
            // avantgo|blazer|elaine|hiptop|plucker|xiino ; @todo - complete the regex.
            'Vertu' => 'Vertu|Vertu.*Ltd|Vertu.*Ascent|Vertu.*Ayxta|Vertu.*Constellation(F|Quest)?|Vertu.*Monika|Vertu.*Signature',
            // Just for fun ;)
            // @ref: http://www.pantech.co.kr/en/prod/prodList.do?gbrand=VEGA (PANTECH)
            // Most of the VEGA devices are legacy. PANTECH seem to be newer devices based on Android.
            'Pantech' => 'PANTECH|IM-A850S|IM-A840S|IM-A830L|IM-A830K|IM-A830S|IM-A820L|IM-A810K|IM-A810S|IM-A800S|IM-T100K|IM-A725L|IM-A780L|IM-A775C|IM-A770K|IM-A760S|IM-A750K|IM-A740S|IM-A730S|IM-A720L|IM-A710K|IM-A690L|IM-A690S|IM-A650S|IM-A630K|IM-A600S|VEGA PTL21|PT003|P8010|ADR910L|P6030|P6020|P9070|P4100|P9060|P5000|CDM8992|TXT8045|ADR8995|IS11PT|P2030|P6010|P8000|PT002|IS06|CDM8999|P9050|PT001|TXT8040|P2020|P9020|P2000|P7040|P7000|C790',
            // @ref: http://www.fly-phone.com/devices/smartphones/ ; Included only smartphones.
            'Fly' => 'IQ230|IQ444|IQ450|IQ440|IQ442|IQ441|IQ245|IQ256|IQ236|IQ255|IQ235|IQ245|IQ275|IQ240|IQ285|IQ280|IQ270|IQ260|IQ250',
            // Added simvalley mobile just for fun. They have some interesting devices.
            // @ref: http://www.simvalley.fr/telephonie---gps-_22_telephonie-mobile_telephones_.html
            'SimValley' => '\\b(SP-80|XT-930|SX-340|XT-930|SX-310|SP-360|SP60|SPT-800|SP-120|SPT-800|SP-140|SPX-5|SPX-8|SP-100|SPX-8|SPX-12)\\b',
            // @Tapatalk is a mobile app; @ref: http://support.tapatalk.com/threads/smf-2-0-2-os-and-browser-detection-plugin-and-tapatalk.15565/#post-79039
            'GenericPhone' => 'Tapatalk|PDA;|PPC;|SAGEM|mmp|pocket|psp|symbian|Smartphone|smartfon|treo|up.browser|up.link|vodafone|wap|nokia|Series40|Series60|S60|SonyEricsson|N900|MAUI.*WAP.*Browser|LG-P500',
        );
        // List of tablet devices.
        protected $tabletDevices = array(
            'iPad' => 'iPad|iPad.*Mobile',
            // @todo: check for mobile friendly emails topic.
            'NexusTablet' => '^.*Android.*Nexus(((?:(?!Mobile))|(?:(\\s(7|10).+))).)*$',
            'SamsungTablet' => 'SAMSUNG.*Tablet|Galaxy.*Tab|SC-01C|GT-P1000|GT-P1010|GT-P6210|GT-P6800|GT-P6810|GT-P7100|GT-P7300|GT-P7310|GT-P7500|GT-P7510|SCH-I800|SCH-I815|SCH-I905|SGH-I957|SGH-I987|SGH-T849|SGH-T859|SGH-T869|SPH-P100|GT-P3100|GT-P3110|GT-P5100|GT-P5110|GT-P6200|GT-P7320|GT-P7511|GT-N8000|GT-P8510|SGH-I497|SPH-P500|SGH-T779|SCH-I705|SCH-I915|GT-N8013|GT-P3113|GT-P5113|GT-P8110|GT-N8010|GT-N8005|GT-N8020|GT-P1013|GT-P6201|GT-P6810|GT-P7501',
            // @reference: http://www.labnol.org/software/kindle-user-agent-string/20378/
            'Kindle' => 'Kindle|Silk.*Accelerated',
            'AsusTablet' => 'Transformer|TF101',
            'BlackBerryTablet' => 'PlayBook|RIM Tablet',
            'HTCtablet' => 'HTC Flyer|HTC Jetstream|HTC-P715a|HTC EVO View 4G|PG41200',
            'MotorolaTablet' => 'xoom|sholest|MZ615|MZ605|MZ505|MZ601|MZ602|MZ603|MZ604|MZ606|MZ607|MZ608|MZ609|MZ615|MZ616|MZ617',
            'NookTablet' => 'Android.*Nook|NookColor|nook browser|BNTV250A|LogicPD Zoom2',
            // @ref: http://www.acer.ro/ac/ro/RO/content/drivers
            // @ref: http://www.packardbell.co.uk/pb/en/GB/content/download (Packard Bell is part of Acer)
            'AcerTablet' => 'Android.*\\b(A100|A101|A110|A200|A210|A211|A500|A501|A510|A511|A700|A701|W500|W500P|W501|W501P|W510|W511|W700|G100|G100W|B1-A71)\\b',
            // @ref: http://eu.computers.toshiba-europe.com/innovation/family/Tablets/1098744/banner_id/tablet_footerlink/
            // @ref: http://us.toshiba.com/tablets/tablet-finder
            // @ref: http://www.toshiba.co.jp/regza/tablet/
            'ToshibaTablet' => 'Android.*(AT100|AT105|AT200|AT205|AT270|AT275|AT300|AT305|AT1S5|AT500|AT570|AT700|AT830)',
            // @ref: http://www.nttdocomo.co.jp/english/service/developer/smart_phone/technical_info/spec/index.html
            'LGTablet' => '\\bL-06C|LG-V900|LG-V909',
            'YarvikTablet' => 'Android.*(TAB210|TAB211|TAB224|TAB250|TAB260|TAB264|TAB310|TAB360|TAB364|TAB410|TAB411|TAB420|TAB424|TAB450|TAB460|TAB461|TAB464|TAB465|TAB467|TAB468)',
            'MedionTablet' => 'Android.*\\bOYO\\b|LIFE.*(P9212|P9514|P9516|S9512)|LIFETAB',
            'ArnovaTablet' => 'AN10G2|AN7bG3|AN7fG3|AN8G3|AN8cG3|AN7G3|AN9G3|AN7dG3|AN7dG3ST|AN7dG3ChildPad|AN10bG3|AN10bG3DT',
            // @reference: http://wiki.archosfans.com/index.php?title=Main_Page
            'ArchosTablet' => 'Android.*ARCHOS|101G9|80G9',
            // @reference: http://en.wikipedia.org/wiki/NOVO7
            'AinolTablet' => 'NOVO7|Novo7Aurora|Novo7Basic|NOVO7PALADIN',
            // @todo: inspect http://esupport.sony.com/US/p/select-system.pl?DIRECTOR=DRIVER
            // @ref: Readers http://www.atsuhiro-me.net/ebook/sony-reader/sony-reader-web-browser
            // @ref: http://www.sony.jp/support/tablet/
            'SonyTablet' => 'Sony Tablet|Sony Tablet S|SGPT12|SGPT121|SGPT122|SGPT123|SGPT111|SGPT112|SGPT113|SGPT211|SGPT213|EBRD1101|EBRD1102|EBRD1201',
            // @ref: db + http://www.cube-tablet.com/buy-products.html
            'CubeTablet' => 'Android.*(K8GT|U9GT|U10GT|U16GT|U17GT|U18GT|U19GT|U20GT|U23GT|U30GT)|CUBE U8GT',
            // @ref: http://www.cobyusa.com/?p=pcat&pcat_id=3001
            'CobyTablet' => 'MID1042|MID1045|MID1125|MID1126|MID7012|MID7014|MID7034|MID7035|MID7036|MID7042|MID7048|MID7127|MID8042|MID8048|MID8127|MID9042|MID9740|MID9742|MID7022|MID7010',
            // @ref: http://pdadb.net/index.php?m=pdalist&list=SMiT (NoName Chinese Tablets)
            // @ref: http://www.imp3.net/14/show.php?itemid=20454
            'SMiTTablet' => 'Android.*(\\bMID\\b|MID-560|MTV-T1200|MTV-PND531|MTV-P1101|MTV-PND530)',
            // @ref: http://www.rock-chips.com/index.php?do=prod&pid=2
            'RockChipTablet' => 'Android.*(RK2818|RK2808A|RK2918|RK3066)|RK2738|RK2808A',
            // @ref: http://www.telstra.com.au/home-phone/thub-2/
            'TelstraTablet' => 'T-Hub2',
            // @ref: http://www.fly-phone.com/devices/tablets/ ; http://www.fly-phone.com/service/
            'FlyTablet' => 'IQ310|Fly Vision',
            // @ref: http://www.bqreaders.com/gb/tablets-prices-sale.html
            'bqTablet' => 'bq.*(Elcano|Curie|Edison|Maxwell|Kepler|Pascal|Tesla|Hypatia|Platon|Newton|Livingstone|Cervantes|Avant)',
            // @ref: http://www.huaweidevice.com/worldwide/productFamily.do?method=index&directoryId=5011&treeId=3290
            // @ref: http://www.huaweidevice.com/worldwide/downloadCenter.do?method=index&directoryId=3372&treeId=0&tb=1&type=software (including legacy tablets)
            'HuaweiTablet' => 'MediaPad|IDEOS S7|S7-201c|S7-202u|S7-101|S7-103|S7-104|S7-105|S7-106|S7-201|S7-Slim',
            // Nec or Medias Tab
            'NecTablet' => '\\bN-06D|\\bN-08D',
            // Broncho Tablets: http://www.broncho.cn/ (hard to find)
            'BronchoTablet' => 'Broncho.*(N701|N708|N802|a710)',
            // @ref: http://versusuk.com/support.html
            'VersusTablet' => 'TOUCHPAD.*[78910]',
            // @ref: http://www.zync.in/index.php/our-products/tablet-phablets
            'ZyncTablet' => 'z1000|Z99 2G|z99|z930|z999|z990|z909|Z919|z900',
            // @ref: https://www.nabitablet.com/
            'NabiTablet' => 'Android.*\\bNabi',
            // @note: Avoid detecting 'PLAYSTATION 3' as mobile.
            'PlaystationTablet' => 'Playstation.*(Portable|Vita)',
            'GenericTablet' => 'Android.*\\b97D\\b|Tablet(?!.*PC)|ViewPad7|MID7015|BNTV250A|LogicPD Zoom2|\\bA7EB\\b|CatNova8|A1_07|CT704|CT1002|\\bM721\\b|hp-tablet',
        );
        // List of mobile Operating Systems.
        protected $operatingSystems = array(
            'AndroidOS' => 'Android',
            'BlackBerryOS' => 'blackberry|\\bBB10\\b|rim tablet os',
            'PalmOS' => 'PalmOS|avantgo|blazer|elaine|hiptop|palm|plucker|xiino',
            'SymbianOS' => 'Symbian|SymbOS|Series60|Series40|SYB-[0-9]+|\\bS60\\b',
            // @reference: http://en.wikipedia.org/wiki/Windows_Mobile
            'WindowsMobileOS' => 'Windows CE.*(PPC|Smartphone|Mobile|[0-9]{3}x[0-9]{3})|Window Mobile|Windows Phone [0-9.]+|WCE;',
            // @reference: http://en.wikipedia.org/wiki/Windows_Phone
            // http://wifeng.cn/?r=blog&a=view&id=106
            // http://nicksnettravels.builttoroam.com/post/2011/01/10/Bogus-Windows-Phone-7-User-Agent-String.aspx
            'WindowsPhoneOS' => 'Windows Phone OS|XBLWP7|ZuneWP7',
            'iOS' => '\\biPhone.*Mobile|\\biPod|\\biPad',
            // http://en.wikipedia.org/wiki/MeeGo
            // @todo: research MeeGo in UAs
            'MeeGoOS' => 'MeeGo',
            // http://en.wikipedia.org/wiki/Maemo
            // @todo: research Maemo in UAs
            'MaemoOS' => 'Maemo',
            'JavaOS' => 'J2ME/MIDP|Java/',
            'webOS' => 'webOS|hpwOS',
            'badaOS' => '\\bBada\\b',
            'BREWOS' => 'BREW',
        );
        // List of mobile User Agents.
        protected $userAgents = array(
            // @reference: https://developers.google.com/chrome/mobile/docs/user-agent
            'Chrome' => '\\bCrMo\\b|CriOS|Android.*Chrome/[.0-9]* (Mobile)?',
            'Dolfin' => '\\bDolfin\\b',
            'Opera' => 'Opera.*Mini|Opera.*Mobi|Android.*Opera',
            'Skyfire' => 'Skyfire',
            'IE' => 'IEMobile|MSIEMobile',
            'Firefox' => 'fennec|firefox.*maemo|(Mobile|Tablet).*Firefox|Firefox.*Mobile',
            'Bolt' => 'bolt',
            'TeaShark' => 'teashark',
            'Blazer' => 'Blazer',
            // @reference: http://developer.apple.com/library/safari/#documentation/AppleApplications/Reference/SafariWebContent/OptimizingforSafarioniPhone/OptimizingforSafarioniPhone.html#//apple_ref/doc/uid/TP40006517-SW3
            'Safari' => 'Version.*Mobile.*Safari|Safari.*Mobile',
            // @ref: http://en.wikipedia.org/wiki/Midori_(web_browser)
            //'Midori'          => 'midori',
            'Tizen' => 'Tizen',
            'UCBrowser' => 'UC.*Browser|UCWEB',
            // @ref: https://github.com/serbanghita/Mobile-Detect/issues/7
            'DiigoBrowser' => 'DiigoBrowser',
            // http://www.puffinbrowser.com/index.php
            'Puffin' => 'Puffin',
            // @ref: http://mercury-browser.com/index.html
            'Mercury' => '\\bMercury\\b',
            // @reference: http://en.wikipedia.org/wiki/Minimo
            // http://en.wikipedia.org/wiki/Vision_Mobile_Browser
            'GenericBrowser' => 'NokiaBrowser|OviBrowser|SEMC.*Browser|FlyFlow|Minimo|NetFront|Novarra-Vision',
        );
        // Utilities.
        protected $utilities = array(
            'TV' => 'SonyDTV115',
            // experimental
            'WebKit' => '(webkit)[ /]([\\w.]+)',
            'Bot' => 'Googlebot|DoCoMo|YandexBot|bingbot|ia_archiver|AhrefsBot|Ezooms|GSLFbot|WBSearchBot|Twitterbot|TweetmemeBot|Twikle|PaperLiBot|Wotbox|UnwindFetchor|facebookexternalhit',
            'MobileBot' => 'Googlebot-Mobile|DoCoMo|YahooSeeker/M1A1-R2D2',
        );
        // Properties list.
        // @reference: http://user-agent-string.info/list-of-ua#Mobile Browser
        const VER = '([\\w._]+)';
        protected $properties = array(
            // Build
            'Mobile' => 'Mobile/[VER]',
            'Build' => 'Build/[VER]',
            'Version' => 'Version/[VER]',
            'VendorID' => 'VendorID/[VER]',
            // Devices
            'iPad' => 'iPad.*CPU[a-z ]+[VER]',
            'iPhone' => 'iPhone.*CPU[a-z ]+[VER]',
            'iPod' => 'iPod.*CPU[a-z ]+[VER]',
            //'BlackBerry'    => array('BlackBerry[VER]', 'BlackBerry [VER];'),
            'Kindle' => 'Kindle/[VER]',
            // Browser
            'Chrome' => 'Chrome/[VER]',
            'CriOS' => 'CriOS/[VER]',
            'Dolfin' => 'Dolfin/[VER]',
            // @reference: https://developer.mozilla.org/en-US/docs/User_Agent_Strings_Reference
            'Firefox' => 'Firefox/[VER]',
            'Fennec' => 'Fennec/[VER]',
            // @reference: http://msdn.microsoft.com/en-us/library/ms537503(v=vs.85).aspx
            'IEMobile' => array('IEMobile/[VER];', 'IEMobile [VER]'),
            'MSIE' => 'MSIE [VER];',
            // http://en.wikipedia.org/wiki/NetFront
            'NetFront' => 'NetFront/[VER]',
            'NokiaBrowser' => 'NokiaBrowser/[VER]',
            'Opera' => 'Version/[VER]',
            'Opera Mini' => 'Opera Mini/[VER]',
            'Opera Mobi' => 'Version/[VER]',
            'UC Browser' => 'UC Browser[VER]',
            'Safari' => 'Version/[VER]',
            'Skyfire' => 'Skyfire/[VER]',
            'Tizen' => 'Tizen/[VER]',
            'Webkit' => 'webkit[ /][VER]',
            // Engine
            'Gecko' => 'Gecko/[VER]',
            'Trident' => 'Trident/[VER]',
            'Presto' => 'Presto/[VER]',
            // OS
            'Android' => 'Android [VER]',
            'BlackBerry' => array('BlackBerry[\\w]+/[VER]', 'BlackBerry.*Version/[VER]'),
            'BREW' => 'BREW [VER]',
            'Java' => 'Java/[VER]',
            // @reference: http://windowsteamblog.com/windows_phone/b/wpdev/archive/2011/08/29/introducing-the-ie9-on-windows-phone-mango-user-agent-string.aspx
            // @reference: http://en.wikipedia.org/wiki/Windows_NT#Releases
            'Windows Phone OS' => 'Windows Phone OS [VER]',
            'Windows Phone' => 'Windows Phone [VER]',
            'Windows CE' => 'Windows CE/[VER]',
            // http://social.msdn.microsoft.com/Forums/en-US/windowsdeveloperpreviewgeneral/thread/6be392da-4d2f-41b4-8354-8dcee20c85cd
            'Windows NT' => 'Windows NT [VER]',
            'Symbian' => array('SymbianOS/[VER]', 'Symbian/[VER]'),
            'webOS' => array('webOS/[VER]', 'hpwOS/[VER];'),
        );
        function __construct()
        {
        }
        /**
         * Get the current script version.
         * This is useful for the demo.php file,
         * so people can check on what version they are testing
         * for mobile devices.
         */
        public function getScriptVersion()
        {
        }
        public function setHttpHeaders($httpHeaders = \null)
        {
        }
        public function getHttpHeaders()
        {
        }
        public function setUserAgent($userAgent = \null)
        {
        }
        public function getUserAgent()
        {
        }
        function setDetectionType($type = \null)
        {
        }
        public function getPhoneDevices()
        {
        }
        public function getTabletDevices()
        {
        }
        /**
         * Method sets the mobile detection rules.
         *
         * This method is used for the magic methods $detect->is*()
         */
        public function setMobileDetectionRules()
        {
        }
        /**
         * Method sets the mobile detection rules + utilities.
         * The reason this is separate is because utilities rules
         * don't necessary imply mobile.
         *
         * This method is used inside the new $detect->is('stuff') method.
         */
        public function setMobileDetectionRulesExtended()
        {
        }
        /**
         * @return array
         */
        public function getRules()
        {
        }
        /**
        * Check the HTTP headers for signs of mobile.
        * This is the fastest mobile check possible; it's used
        * inside isMobile() method.
        * @return boolean
        */
        public function checkHttpHeadersForMobile()
        {
        }
        /**
         * Magic overloading method.
         *
         * @param string $name
         * @param array $arguments
         * @return mixed
         */
        public function __call($name, $arguments)
        {
        }
        /**
         * Find a detection rule that matches the current User-agent.
         *
         * @param null $userAgent deprecated
         * @return boolean
         */
        private function matchDetectionRulesAgainstUA($userAgent = \null)
        {
        }
        /**
         * Search for a certain key in the rules array.
         * If the key is found the try to match the corresponding
         * regex agains the User-agent.
         *
         * @param string $key
         * @param null $userAgent deprecated
         * @return mixed
         */
        private function matchUAAgainstKey($key, $userAgent = \null)
        {
        }
        /**
         * Check if the device is mobile.
         * Returns true if any type of mobile device detected, including special ones
         * @param null $userAgent deprecated
         * @param null $httpHeaders deprecated
         * @return bool
         */
        public function isMobile($userAgent = \null, $httpHeaders = \null)
        {
        }
        /**
         * Check if the device is a tablet.
         * Return true if any type of tablet device is detected.
         *
         * @param null $userAgent deprecated
         * @param null $httpHeaders deprecated
         * @return bool
         */
        public function isTablet($userAgent = \null, $httpHeaders = \null)
        {
        }
        /**
         * This method checks for a certain property in the
         * userAgent.
         *
         * @param string $key
         * @param string $userAgent   deprecated
         * @param string $httpHeaders deprecated
         *
         * @return bool|int|null
         * @todo: The httpHeaders part is not yet used.
         *
         */
        public function is($key, $userAgent = \null, $httpHeaders = \null)
        {
        }
        public function getOperatingSystems()
        {
        }
        /**
         * Some detection rules are relative (not standard),
         * because of the diversity of devices, vendors and
         * their conventions in representing the User-Agent or
         * the HTTP headers.
         *
         * This method will be used to check custom regexes against
         * the User-Agent string.
         *
         * @param string $regex
         * @param string $userAgent
         *
         * @return bool
         *
         * @todo: search in the HTTP headers too.
         */
        function match($regex, $userAgent = \null)
        {
        }
        /**
         * Get the properties array.
         * @return array
         */
        function getProperties()
        {
        }
        /**
         * Prepare the version number.
         *
         * @param string $ver
         *
         * @return int
         */
        function prepareVersionNo($ver)
        {
        }
        /**
         * Check the version of the given property in the User-Agent.
         * Will return a float number. (eg. 2_0 will return 2.0, 4.3.1 will return 4.31)
         *
         * @param string $propertyName
         * @return mixed $version
         */
        function version($propertyName)
        {
        }
        function mobileGrade()
        {
        }
    }
    /**
     * Main SitePress Class
     *
     * @package wpml-core
     */
    class SitePress extends \WPML_WPDB_User implements \IWPML_Current_Language, \IWPML_Taxonomy_State, \WPML\Core\ISitePress
    {
        const AFTER_ST_PLUGIN_LOADED_HOOK = -\PHP_INT_MAX + 1;
        /** @var WPML_Taxonomy_Translation */
        private $taxonomy_translation;
        private $template_real_path;
        /** @var WPML_Post_Translation $post_translation */
        private $post_translation;
        /** @var WPML_Term_Translation $term_translation */
        private $term_translation;
        /** @var WPML_Post_Duplication $post_duplication */
        private $post_duplication;
        /** @var WPML_Term_Actions $term_actions */
        private $term_actions;
        /** @var WPML_Admin_Scripts_Setup $scripts_handler */
        private $scripts_handler;
        /** @var WPML_Set_Language $language_setter */
        private $language_setter;
        /** @var WPML_Term_Query_Filter $term_query_filter */
        private $term_query_filter;
        /** @var array $settings */
        private $settings;
        private $active_languages = array();
        private $_admin_notices = array();
        private $this_lang;
        /** @var \WP_Query */
        private $wp_query;
        private $admin_language;
        private $user_preferences = array();
        /** @var  WPML_WP_API $wp_api */
        private $wp_api;
        /** @var int $loaded_blog_id */
        private $loaded_blog_id;
        /**
         * @var string $original_language caches the initial language when calling
         * \SitePress::switch_lang() for the first time.
         */
        private $original_language;
        /**
         * @var string $original_language_cookie caches the initial language value
         * in the user's cookie when calling \SitePress::switch_lang() for the
         * first time.
         */
        private $original_language_cookie;
        /** @var  WPML_Locale $locale_utils */
        public $locale_utils;
        public $footer_preview = \false;
        /**
         * @var icl_cache
         */
        public $icl_translations_cache;
        /**
         * @var WPML_Flags
         */
        private $flags;
        /**
         * @var icl_cache
         */
        public $icl_language_name_cache;
        /**
         * @var icl_cache
         */
        public $icl_term_taxonomy_cache;
        /** @var WPML_Term_Adjust_Id */
        private $wpml_term_adjust_id = \null;
        /**
         * @var array $current_request_data - Use to store temporary information during the current request
         */
        private $current_request_data = array();
        function __construct()
        {
        }
        /**
         * @since 3.2
         */
        public function api_hooks()
        {
        }
        function init()
        {
        }
        /**
         * Sets the current language in \SitePress::$this_lang, redirects if
         * frontend requests point to incomplete or incorrect urls, un-sets the
         * $_GET['lang'] and $_GET['admin_bar'] values so that upload.php is able to
         * enqueue 'media-grid' correctly without url parameters breaking its
         * functionality.
         */
        public function maybe_set_this_lang()
        {
        }
        function load_dependencies()
        {
        }
        /**
         * Sets up all term/taxonomy actions for use outside Translations Management or the Post Edit screen
         */
        function set_term_filters_and_hooks()
        {
        }
        function remove_admin_language_switcher()
        {
        }
        function rebuild_language_information()
        {
        }
        function setup()
        {
        }
        public function user_lang_by_authcookie()
        {
        }
        function get_current_user()
        {
        }
        function ajax_setup()
        {
        }
        function check_if_admin_action_from_referer()
        {
        }
        /**
         * Check translation mangement column screen option.
         *
         * @param string $post_type Current post type.
         *
         * @return bool
         */
        public function show_management_column_content($post_type)
        {
        }
        function initialize_cache()
        {
        }
        /**
         * @return icl_cache
         */
        function get_translations_cache()
        {
        }
        /**
         * @return icl_cache
         */
        function get_language_name_cache()
        {
        }
        public function set_admin_language($admin_language = \false)
        {
        }
        function get_admin_language()
        {
        }
        public function is_wpml_switch_language_triggered()
        {
        }
        /**
         * @return bool
         */
        function is_post_edit_screen()
        {
        }
        function get_user_admin_language_filter($value, $user_id)
        {
        }
        function get_user_admin_language($user_id, $reload = \false)
        {
        }
        /**
         * @todo rename this method, has it has nothing to do with the menus
         */
        function administration_menu()
        {
        }
        private function check_and_display_missing_records_notice()
        {
        }
        function taxonomy_translation_page()
        {
        }
        /**
         * @param int|string $blog_id
         */
        function init_settings($blog_id)
        {
        }
        /**
         * @param array|null $settings
         */
        function save_settings($settings = \null)
        {
        }
        /**
         * @since 3.1
         */
        function get_settings()
        {
        }
        function filter_get_setting($value, $key)
        {
        }
        /**
         * @param string     $key
         * @param mixed|bool $default
         *
         * @since 3.1
         *
         * @return bool|mixed
         */
        function get_setting($key, $default = \false)
        {
        }
        function action_set_setting($key, $value, $save_now)
        {
        }
        /**
         * @param string $key
         * @param mixed  $value
         * @param bool   $save_now Immediately update the settings record in the DB
         *
         * @since 3.1
         *
         * @return bool Always True. If `$save_now === true`, it returns the result of `update_option`
         */
        function set_setting($key, $value, $save_now = \false)
        {
        }
        function get_user_preferences()
        {
        }
        function set_user_preferences($value)
        {
        }
        function save_user_preferences()
        {
        }
        /**
         * @param string $option_name
         *
         * @return mixed|null
         * @deprecated Use \SitePress::get_setting instead
         *
         */
        public function get_option($option_name)
        {
        }
        function verify_settings()
        {
        }
        /**
         * @param bool   $refresh
         * @param bool   $major_first
         * @param string $order_by
         *
         * @return array
         */
        function get_active_languages($refresh = \false, $major_first = \false, $order_by = 'english_name')
        {
        }
        /**
         * Returns an input array of languages, that are in the form of associative arrays,
         * ordered by the user-chosen language order
         *
         * @param array[] $languages
         *
         * @return array[]
         */
        function order_languages($languages)
        {
        }
        /**
         * @param string $lang_code
         * Checks if a given language code belongs to a currently active language.
         *
         * @return bool
         */
        function is_active_language($lang_code)
        {
        }
        public function get_languages($lang = \false, $active_only = \false, $refresh = \false, $major_first = \false, $order_by = 'english_name')
        {
        }
        function get_language_details($code)
        {
        }
        function get_language_code($english_name)
        {
        }
        function get_language_code_from_locale($locale)
        {
        }
        function get_locale_from_language_code($code)
        {
        }
        function get_default_language()
        {
        }
        private function is_valid_language($language)
        {
        }
        private function set_this_lang($new_value)
        {
        }
        public function get_this_lang()
        {
        }
        function get_current_language()
        {
        }
        /**
         * Switches whole site to the given language or back to the current language
         * that was set when first calling this function.
         *
         * @param null|string $code        language code to switch into, will revert to
         *                                 initial language if null is given
         * @param bool|string $cookie_lang optionally also switch the cookie language
         *                                 to the value given
         */
        public function switch_lang($code = \null, $cookie_lang = \false)
        {
        }
        function set_default_language($code)
        {
        }
        /**
         * Hooked to `init`
         */
        function register_assets()
        {
        }
        /**
         * Hooked to `admin_enqueue_scripts` AND `wp_enqueue_scripts`
         */
        function js_load()
        {
        }
        private function is_post_edit_script_allowed()
        {
        }
        function backend_js($setup_complete = \true)
        {
        }
        function rtl_fix()
        {
        }
        function post_edit_language_options()
        {
        }
        function set_element_language_details_action($args)
        {
        }
        /**
         * @param int         $el_id the element's ID (for terms we use the `term_taxonomy_id`)
         * @param string      $el_type
         * @param int         $trid
         * @param string      $language_code
         * @param null|string $src_language_code
         * @param bool        $check_duplicates
         *
         * @return bool|int|null|string
         */
        public function set_element_language_details($el_id, $el_type, $trid, $language_code, $src_language_code = \null, $check_duplicates = \true)
        {
        }
        public function delete_orphan_element($element_id, $element_type, $target_language)
        {
        }
        function delete_element_translation($trid, $element_type, $language_code = \false, $orphan_translation_only = \false)
        {
        }
        /**
         * @param int    $el_id
         * @param string $el_type
         *
         * @return \stdClass
         */
        function get_element_language_details($el_id, $el_type = 'post_post')
        {
        }
        public function sync_custom_field($post_id_from, $post_id_to, $meta_key)
        {
        }
        function copy_custom_fields($post_id_from, $post_id_to)
        {
        }
        /**
         * @param int|string $mode
         *
         * @return array
         */
        public function get_custom_fields_translation_settings($mode)
        {
        }
        /**
         * This method does nothing and is only there as a placeholder for backward compatibility with old Types versions!
         *
         * @param int    $meta_id
         * @param int    $object_id
         * @param string $meta_key
         * @param mixed  $_meta_value
         *
         * @deprecated Since WPML 3.1.9
         *
         */
        function update_post_meta($meta_id, $object_id, $meta_key, $_meta_value)
        {
        }
        /**
         * This method does nothing and is only there as a placeholder for backward compatibility with old Types versions!
         *
         * @deprecated Since WPML 3.1.9
         *
         * @param int $meta_id
         */
        function delete_post_meta($meta_id)
        {
        }
        /* Custom fields synchronization - END */
        function get_element_translations_filter($value, $trid, $el_type = 'post_post', $skip_empty = \false, $all_statuses = \false, $skip_cache = \false)
        {
        }
        public function get_original_element_id_filter($empty, $element_id, $element_type = 'post_post')
        {
        }
        public function get_element_trid_filter($empty, $element_id, $element_type = 'post_post')
        {
        }
        function is_original_content_filter($default, $element_id, $element_type = 'post_post')
        {
        }
        /**
         * @param int    $trid
         * @param string $el_type Use comment, post, page, {custom post time name}, nav_menu, nav_menu_item, category, post_tag, etc. (prefixed with 'post_', 'tax_', or nothing for 'comment')
         * @param bool   $skip_empty
         * @param bool   $all_statuses
         * @param bool   $skip_cache
         * @param bool   $skip_recursions
         * @param bool   $skipPrivilegeChecking
         *
         * @return array<string,\stdClass>
         */
        function get_element_translations($trid, $el_type = 'post_post', $skip_empty = \false, $all_statuses = \false, $skip_cache = \false, $skip_recursions = \false, $skipPrivilegeChecking = \false)
        {
        }
        function clear_elements_cache($ids, $taxonomy)
        {
        }
        static function get_original_element_id($element_id, $element_type = 'post_post', $skip_empty = \false, $all_statuses = \false, $skip_cache = \false)
        {
        }
        public function get_original_element_translation($trid, $element_type, $skip_empty = \false, $all_statuses = \false, $skip_cache = \false)
        {
        }
        /**
         * @param int    $element_id Use term_taxonomy_id for taxonomies, post_id for posts
         * @param string $el_type    Use comment, post, page, {custom post time name}, nav_menu, nav_menu_item, category, post_tag, etc. (prefixed with 'post_', 'tax_', or nothing for 'comment')
         *
         * @return bool|mixed|null|string
         */
        function get_element_trid($element_id, $el_type = 'post_post')
        {
        }
        /**
         * @param int $trid
         *
         * @return int|bool
         */
        static function get_original_element_id_by_trid($trid)
        {
        }
        static function get_source_language_by_trid($trid)
        {
        }
        public function get_element_translations_object($element_type)
        {
        }
        /**
         * @param int    $element_id   Use term_taxonomy_id for taxonomies, post_id for posts
         * @param string $element_type Use comment, post, page, {custom post time name}, nav_menu, nav_menu_item, category,
         *                             post_tag, etc. (prefixed with 'post_', 'tax_', or nothing for 'comment')
         *
         * @return null|string
         */
        function get_language_for_element($element_id, $element_type = 'post_post')
        {
        }
        /**
         * @param string $el_type     Use comment, post, page, {custom post time name}, nav_menu, nav_menu_item, category, post_tag, etc. (prefixed with 'post_', 'tax_', or nothing for 'comment')
         * @param string $target_lang Target language code
         * @param string $source_lang Source language code
         *
         * @return array
         */
        function get_elements_without_translations($el_type, $target_lang, $source_lang)
        {
        }
        /**
         * @param string $selected_language
         * @param string $default_language
         * @param string $post_type
         *
         * @used_by SitePress:meta_box
         *
         * @return array
         */
        function get_posts_without_translations($selected_language, $default_language, $post_type = 'post_post')
        {
        }
        public function get_orphan_translations($trid, $post_type, $source_language)
        {
        }
        /**
         * @param WP_Post $post
         */
        function meta_box($post)
        {
        }
        function meta_box_config($post)
        {
        }
        /**
         * Filters the WP_Query in case of retrieving an ajax post list,
         * e.g. links in the WYSIWYG post editor
         *
         * @param WP_Query $wpq
         *
         * @return WP_Query
         */
        function pre_get_posts($wpq)
        {
        }
        function comment_feed_join($join)
        {
        }
        /**
         * @param string[]         $clauses
         * @param WP_Comment_Query $obj
         *
         * @return string[]
         */
        function comments_clauses($clauses, $obj)
        {
        }
        function language_filter()
        {
        }
        /**
         * @param array $arr                Array of posts to filter
         * @param array $get_page_arguments Arguments passed to the `get_pages` function
         *
         * @return array
         */
        function exclude_other_language_pages2($arr, $get_page_arguments)
        {
        }
        function wp_dropdown_pages($output)
        {
        }
        /**
         * @param int                     $trid
         * @param array<string>           $active_languages
         * @param string                  $selected_language
         * @param array<string,\stdClass> $translations
         * @param string                  $type
         */
        function add_translate_options($trid, $active_languages, $selected_language, $translations, $type)
        {
        }
        /**
         * @param array|string $name
         *
         * @deprecated deprecated since version 3.1.8
         * @return array|mixed
         */
        function the_category_name_filter($name)
        {
        }
        /**
         * @param array<string,\stdClass> $terms
         *
         * @return mixed
         * @deprecated deprecated since version 3.1.8
         */
        function get_terms_filter($terms)
        {
        }
        /**
         * Wrapper for \WPML_Term_Actions::save_term_actions
         *
         * @param int    $cat_id
         * @param int    $tt_id term taxonomy id of the new term
         * @param string $taxonomy
         *
         * @uses \WPML_Term_Actions::save_term_actions to handle required actions
         *                                               when creating a term
         *
         * @hook delete_term
         */
        function create_term($cat_id, $tt_id, $taxonomy)
        {
        }
        /**
         * Wrapper for \WPML_Term_Actions::deleted_term_relationships
         *
         * @param int   $post_id
         * @param array $delete_terms
         *
         * @uses \WPML_Term_Actions::deleted_term_relationships to handle required actions
         *                                               when removing a term from a post
         *
         * @hook deleted_term_relationships
         */
        function deleted_term_relationships($post_id, $delete_terms)
        {
        }
        /**
         * Wrapper for \WPML_Term_Actions::delete_term_actions
         *
         * @param mixed  $cat
         * @param int    $tt_id term taxonomy id of the deleted term
         * @param string $taxonomy
         *
         * @uses \WPML_Term_Actions::delete_term_actions to handle required actions
         *                                               when deleting a term
         *
         * @hook delete_term
         */
        function delete_term($cat, $tt_id, $taxonomy)
        {
        }
        /**
         * @return WPML_Term_Actions
         */
        public function get_term_actions_helper()
        {
        }
        function get_terms_args_filter($args, $taxonomies)
        {
        }
        public function clear_term_query_filter()
        {
        }
        function terms_clauses($clauses, $taxonomies, $args)
        {
        }
        /**
         * Saves the current $wp_query to \SitePress::$wp_query
         *
         * @global WP_Query $wp_query
         */
        public function set_wp_query()
        {
        }
        /**
         * @return WP_Query
         */
        public function get_wp_query()
        {
        }
        /**
         * Converts WP generated url to language specific based on plugin settings
         *
         * @param string      $url
         * @param null|string $code (if null, fallback to default language for root page, or current language in all other cases)
         *
         * @return bool|string
         */
        function convert_url($url, $code = \null)
        {
        }
        /**
         * @param string $url
         * @param string $code
         *
         * @return string
         */
        function convert_url_string($url, $code)
        {
        }
        function language_url($code = \null)
        {
        }
        function post_type_archive_link_filter($link, $post_type)
        {
        }
        public function adjust_cpt_in_url($link, $post_type, $language_code = \null)
        {
        }
        /**
         * Check if "Translate base slugs (via WPML String Translation)."
         * and slug translation for given $post_type are both checked
         *
         * @param string $post_type
         *
         * @return boolean
         */
        private function cpt_slug_translation_turned_on($post_type)
        {
        }
        function home_url($url)
        {
        }
        function get_comment_link_filter($link)
        {
        }
        /**
         * @return WPML_Query_Utils
         */
        public function get_query_utils()
        {
        }
        /**
         * @return WPML_Root_Page_Actions
         */
        public function get_root_page_utils()
        {
        }
        /**
         * @return WPML_WP_API
         */
        public function get_wp_api()
        {
        }
        /**
         * @return wpdb
         */
        public function &wpdb()
        {
        }
        /**
         * @return TranslationManagement
         */
        public function &core_tm()
        {
        }
        /**
         * @return WPML_Term_Translation
         */
        function &term_translations()
        {
        }
        /**
         * @return WPML_Post_Translation
         */
        function &post_translations()
        {
        }
        /**
         * @param WPML_WP_API $wp_api
         */
        public function set_wp_api($wp_api)
        {
        }
        public function get_ls_languages($template_args = array())
        {
        }
        function get_display_single_language_name_filter($empty, $args)
        {
        }
        function get_display_language_name($lang_code, $display_code = \null)
        {
        }
        function get_flag($lang_code)
        {
        }
        function get_flag_url($code)
        {
        }
        /**
         * @param string $code
         *
         * @return string
         * @deprecated Use \SitePress::get_flag_image instead
         */
        function get_flag_img($code)
        {
        }
        /**
         * @param string $code
         * @param int[]  $size An array describing [ $width, $height ]. It defaults to [18, 12].
         * @param string $fallback_text
         * @param string[] $css_classes Array of CSS class strings.
         *
         * @return string
         */
        function get_flag_image($code, $size = [], $fallback_text = '', $css_classes = [])
        {
        }
        function clear_flags_cache()
        {
        }
        /**
         * @deprecated
         *
         * @return string
         */
        function get_desktop_language_selector()
        {
        }
        /**
         * @deprecated
         *
         * @return string
         */
        function get_mobile_language_selector()
        {
        }
        /**
         * @deprecated
         *
         * @return string
         */
        function get_language_selector()
        {
        }
        /**
         * @deprecated
         */
        function language_selector()
        {
        }
        public function add_extra_debug_info($extra_debug)
        {
        }
        function set_default_categories($def_cat)
        {
        }
        function pre_option_default_category($setting)
        {
        }
        function update_option_default_category($oldvalue, $new_value)
        {
        }
        /**
         * @param WP_Term $term
         *
         * @return WP_Term
         */
        public function get_term_adjust_id($term)
        {
        }
        public function edited_term_action()
        {
        }
        function get_pages_adjust_ids($pages, $args)
        {
        }
        private function translate_csv_page_ids($args, $index)
        {
        }
        // feeds links
        function feed_link($out)
        {
        }
        // commenting links
        function post_comments_feed_link($out)
        {
        }
        function trackback_url($out)
        {
        }
        function user_trailingslashit($string, $type_of_url)
        {
        }
        /**
         * Fixes double dashes
         *
         * @param string $url
         *
         * @return string
         */
        function author_link($url)
        {
        }
        function pre_option_home($setting = \false)
        {
        }
        /**
         *
         *
         * @param array $public_query_vars
         *
         * @return array with added 'lang' index
         */
        function query_vars($public_query_vars)
        {
        }
        function parse_query($q)
        {
        }
        function adjust_wp_list_pages_excludes($pages)
        {
        }
        function language_attributes($output)
        {
        }
        // Localization
        function plugin_localization()
        {
        }
        /**
         * @return WPML_Locale
         */
        public function get_wpml_locale()
        {
        }
        function locale_filter($default)
        {
        }
        function get_language_tag($code)
        {
        }
        function get_locale($code)
        {
        }
        function switch_locale($lang_code = \false)
        {
        }
        function get_locale_file_names()
        {
        }
        function pre_option_page_on_front()
        {
        }
        function pre_option_page_for_posts()
        {
        }
        function fix_trashed_front_or_posts_page_settings($post_id)
        {
        }
        // adds the language parameter to the admin post filtering/search
        function restrict_manage_posts()
        {
        }
        function get_edit_term_link($link, $term_id, $taxonomy, $object_type)
        {
        }
        function noscript_notice()
        {
        }
        function save_user_options()
        {
        }
        function help_admin_notice()
        {
        }
        function upgrade_notice()
        {
        }
        function display_wpml_footer()
        {
        }
        function xmlrpc_methods($methods)
        {
        }
        function xmlrpc_call_actions($action)
        {
        }
        /**
         * @param string $lang
         *
         * @return array|bool|mixed|null
         * @deprecated Use `wpml.get_languages` XMLRPC call
         * @since      3.5.0
         *
         */
        function xmlrpc_get_languages_list($lang)
        {
        }
        function xml_unprotect_wpml_meta($protected, $meta_key, $meta_type)
        {
        }
        function meta_generator_tag()
        {
        }
        function get_language_cookie()
        {
        }
        function set_admin_language_cookie($lang = \false)
        {
        }
        function get_admin_language_cookie()
        {
        }
        function reset_admin_language_cookie()
        {
        }
        function rewrite_rules_filter($value)
        {
        }
        function is_rtl($lang = \false)
        {
        }
        /**
         * Returns an array of post types that are set to be translatable
         *
         * @param array $default Set the default value, in case no posts are set to be translatable (default: array())
         *
         * @return array
         */
        function get_translatable_documents_filter($default = array())
        {
        }
        function get_translatable_documents($include_not_synced = \false)
        {
        }
        public function get_display_as_translated_documents()
        {
        }
        /**
         * @param bool   $include_not_synced
         * @param string $deprecated
         *
         * @return array
         * @internal string $deprecated
         * @since    3.8.0 $deprecated (formerly $object_type) is not used anymore
         */
        function get_translatable_taxonomies($include_not_synced = \false, $deprecated = 'post')
        {
        }
        /**
         * @param string $tax
         *
         * @return bool
         */
        function is_translated_taxonomy($tax)
        {
        }
        public function is_display_as_translated_taxonomy($tax)
        {
        }
        public function get_display_as_translated_taxonomies()
        {
        }
        public function is_translated_post_type_filter($value, $post_type)
        {
        }
        /**
         * @param string $type
         *
         * @return bool
         */
        public function is_translated_post_type($type)
        {
        }
        public function is_display_as_translated_post_type_filter($value, $post_type)
        {
        }
        public function is_display_as_translated_post_type($type)
        {
        }
        /**
         * @param null   $value
         * @param string $taxonomy
         *
         * @return int
         */
        public function is_translated_taxonomy_filter($value, $taxonomy)
        {
        }
        function verify_post_translations_action($post_types)
        {
        }
        /**
         * Sets the default language for all posts in a given post type that do not have any language set
         *
         * @param string $post_type
         */
        public function verify_post_translations($post_type)
        {
        }
        /**
         * This function is to be used on setting a taxonomy from untranslated to being translated.
         * It creates potentially missing translations and reassigns posts to the then created terms in the correct language.
         * This function affects all terms in a taxonomy and therefore, depending on the database size results in
         * heavy resource demand. It should not be used to fix term and post assignment problems other than those
         * resulting from the action of turning a translated taxonomy into an untranslated one.
         *
         * An exception is being made for the installation process assigning all existing terms the default language,
         * given no prior language information is saved about them in the database.
         *
         * @param string $taxonomy
         */
        function verify_taxonomy_translations($taxonomy)
        {
        }
        function wp_upgrade_locale($locale)
        {
        }
        function admin_language_switcher()
        {
        }
        function admin_notices($message, $class = 'updated')
        {
        }
        function _admin_notices_hook()
        {
        }
        function allowed_redirect_hosts($hosts)
        {
        }
        public static function get_installed_plugins()
        {
        }
        /**
         * @param int  $limit
         * @param bool $provide_object
         * @param bool $ignore_args
         *
         * @return array
         */
        public function get_backtrace($limit = 0, $provide_object = \false, $ignore_args = \true)
        {
        }
        /**
         * Used as filter for WordPress core function url_to_postid()
         *
         * @global AbsoluteLinks $absolute_links_object
         *
         * @param string $url URL to filter
         *
         * @return string URL changed into format ...?p={ID} or original
         */
        function url_to_postid($url)
        {
        }
        /**
         * Check if $url is in format ...?cpt-slug=cpt-title and change into ...?p={ID}
         *
         * @param string $url          URL, probably in format ?cpt-slug=cpt-title
         * @param string $original_url URL in original format (probably with permalink)
         *
         * @return string URL, if $url was in expected format ?cpt-slug format, url is now changed into ?p={ID}, otherwise, returns $url as it was passed in parameter
         */
        function cpt_url_to_id_url($url, $original_url)
        {
        }
        /**
         * Fix sticky link url to have ID of translated post (used in case both translations have same slug)
         *
         * @param string $url          - url in sticky link form
         * @param string $original_url - url in permalink form
         *
         * @return string  - url in sticky link form to correct translation
         */
        private function maybe_adjust_url($url, $original_url)
        {
        }
        /**
         * Find language of document based on given permalink
         *
         * @param string $url Local url in permalink form
         *
         * @return string language code
         */
        function get_language_from_url($url)
        {
        }
        function update_index_screen()
        {
        }
        /**
         * Filter to add language field to WordPress search form
         *
         * @param string $form HTML code of search for before filtering
         *
         * @return string HTML code of search form
         */
        function get_search_form_filter($form)
        {
        }
        /**
         * @param string $key
         *
         * @return bool|mixed
         */
        public function get_string_translation_settings($key = '')
        {
        }
        /**
         * @param array<string,mixed> $setting
         * @param string              $key
         *
         * @return bool
         */
        private function setting_array_is_set_or_has_key($setting, $key)
        {
        }
        /**
         * @param string $element_type
         * @param string $option_key
         * @param string $readonly_config_key
         * @param string $unlocked_key
         *
         * @return bool
         */
        private function is_translated_element($element_type, $option_key, $readonly_config_key, $unlocked_key)
        {
        }
        /**
         * @return array
         */
        public function get_always_translatable_post_types()
        {
        }
        /**
         * @param Integer $master_post_id The original post id for which duplicate posts are to be retrieved
         *
         * @return Integer[] An associative array with language codes as indexes and post_ids as values
         */
        function get_duplicates($master_post_id)
        {
        }
        /**
         * @param Integer $master_post_id ID of the to be duplicated post
         * @param String  $lang           Language code to which the post is to be duplicated
         *
         * @return bool|int|WP_Error
         */
        function make_duplicate($master_post_id, $lang)
        {
        }
        function get_new_post_source_id($post_id)
        {
        }
        /**
         * @param int        $element_id
         * @param string     $element_type
         * @param bool|false $return_original_if_missing
         * @param null       $language_code
         *
         * @return int|null
         */
        function get_object_id($element_id, $element_type = 'post', $return_original_if_missing = \false, $language_code = \null)
        {
        }
        private function is_troubleshooting_page()
        {
        }
        public function handle_head_hreflang()
        {
        }
        /**
         * Get previously set data for the current request.
         *
         * @param string     $key
         * @param null|mixed $default
         *
         * @return mixed|null
         */
        public function get_current_request_data($key, $default = \null)
        {
        }
        /**
         * Set temporary data for the current request that can be recalled later
         *
         * @param string $key
         * @param mixed  $data
         */
        public function set_current_request_data($key, $data)
        {
        }
        /**
         * Clear the data for the current request
         *
         * @param string $key
         */
        public function clear_current_request_data($key)
        {
        }
        /**
         * Load \TranslationManagement class.
         */
        public function load_core_tm()
        {
        }
        public function is_setup_complete()
        {
        }
        /**
         * @return bool
         */
        private function is_taxonomy_related_page()
        {
        }
        /**
         * @return bool
         */
        private function is_saving_taxonomy_labels()
        {
        }
        private function switch_to_admin_language()
        {
        }
        private function move_current_language_to_the_top()
        {
        }
        /**
         * @param array<string,mixed> $active_languages
         *
         * @return array<string,mixed>
         */
        private function maybeHideLanguages(array $active_languages)
        {
        }
        /**
         * @return bool
         */
        private function is_page_query()
        {
        }
    }
}
namespace {
    /**
     * Checks if the language switcher is to be displayed.
     * Used to check if the displayed page is a root page and the switcher is to be hidden because of it.
     *
     * @return bool true if the switcher is to be hidden
     */
    function wpml_home_url_ls_hide_check()
    {
    }
    /**
     * @package wpml-core
     */
    function icl_reset_language_data()
    {
    }
    function icl_sitepress_activate()
    {
    }
    function icl_sitepress_deactivate()
    {
    }
    function icl_enable_capabilities()
    {
    }
    /**
     * Fires at plugins_loaded action, to call icl_enable_capabilities().
     * https://onthegosystems.myjetbrains.com/youtrack/issue/wpmlcore-5695
     */
    function wpml_enable_capabilities()
    {
    }
    function icl_xml2array($contents, $get_attributes = \true)
    {
    }
    /**
     * Fetch the wpml config files for known plugins and themes
     *
     * @package wpml-core
     */
    function update_wpml_config_index_event()
    {
    }
    /* DEBUG ACTION */
    /**
     * @param \stdClass $term_object
     *
     * @return int
     */
    function get_term_taxonomy_id_from_term_object($term_object)
    {
    }
    function get_ATE_account_data()
    {
    }
    function prepare_synchronization_needed_warning($elements, $type)
    {
    }
    /**
     *
     * @return  WPML_Redirection
     */
    function _wpml_get_redirect_helper()
    {
    }
    function icl_disable_cache()
    {
    }
    function icl_cache_get($key)
    {
    }
    function icl_cache_set($key, $value = \null)
    {
    }
    function icl_cache_clear($key = \false, $key_as_prefix = \false)
    {
    }
    function w3tc_translate_cache_key_filter($key)
    {
    }
    /**
     * Returns true if the site uses ICanLocalize.
     *
     * @return bool
     */
    function wpml_site_uses_icl()
    {
    }
    /**
     * Returns the value of a given key setting.
     *
     * @param string      $key     The setting's key.
     * @param mixed|false $default The value to use if the setting does not exist.
     *
     * @return bool|mixed
     * @since      3.1
     * @deprecated 3.2 use `\wpml_setting` or 'wpml_get_setting_filter' filter instead
     */
    function icl_get_setting($key, $default = \false)
    {
    }
    /**
     * Get a WPML setting value.
     * If the Main SitePress Class cannot be accessed by the function it will read the setting from the database.
     * It will return `$default` if the requested key is not set.
     *
     * @param string     $key          The setting's key.
     * @param mixed|null $default      Required. The value to return if the settings key does not exist
     *                                 (typically it's false, but you may want to use something else).
     *
     * @return mixed The value of the requested setting, or `$default`
     * @since 4.1
     */
    function wpml_get_setting($key, $default = \null)
    {
    }
    /**
     * Get a WPML setting value.
     * If the Main SitePress Class cannot be access to the function will read the setting from the database.
     * Will return false if the requested key is not set or.
     * the default value passed in the function's second parameter.
     *
     * @param mixed|false $default     Required. The value to return if the settings key does not exist
     *                                 (typically it's false, but you may want to use something else).
     * @param string      $key         The setting's key.
     *
     * @return mixed The value of the requested setting, or $default
     * @since 3.2
     * @uses  \SitePress::api_hooks
     */
    function wpml_get_setting_filter($default, $key)
    {
    }
    /**
     * Returns the value of a given key sub-setting.
     *
     * @param string      $key         The setting's key.
     * @param string      $sub_key     The settings name key to return the value of.
     * @param mixed|false $default     Required. The value to return if the settings key does not exist
     *                                 (typically it's false, but you may want to use something else).
     *
     * @return bool|mixed
     * @since      3.1
     * @deprecated 3.2 use 'wpml_sub_setting' filter instead
     */
    function icl_get_sub_setting($key, $sub_key, $default = \false)
    {
    }
    /**
     * Gets a WPML sub setting value.
     *
     * @param mixed|false $default     Required. The value to return if the settings key does not exist
     *                                 (typically it's false, but you may want to use something else).
     * @param string      $key         The settings name key the sub key belongs to.
     * @param string      $sub_key     The sub key to return the value of.
     * @param mixed       $deprecated  Deprecated param.
     *
     * @return mixed The value of the requested setting, or $default
     * @todo  [WPML 3.3] Remove deprecated argument
     *
     * @uses  \wpml_get_setting_filter
     *
     * @since 3.2
     * @uses  \SitePress::api_hooks
     */
    function wpml_get_sub_setting_filter($default, $key, $sub_key, $deprecated = \null)
    {
    }
    /**
     * Saves the value of a given key.
     *
     * @param string $key      The settings name key the sub key belongs to.
     * @param mixed  $value    The value to assign to the given key.
     * @param bool   $save_now Must call icl_save_settings() to permanently store the value.
     *
     * @return bool Always True. If `$save_now === true`, it returns the result of `update_option`
     */
    function icl_set_setting($key, $value, $save_now = \false)
    {
    }
    /**
     * Save the settings in the db.
     */
    function icl_save_settings()
    {
    }
    /**
     * Gets all the settings.
     *
     * @return array|false
     */
    function icl_get_settings()
    {
    }
    /**
     * Add settings link to plugin page.
     *
     * @param SitePress     $sitepress
     * @param array<string> $links
     * @param string        $file
     *
     * @return array
     */
    function icl_plugin_action_links(\SitePress $sitepress, $links, $file)
    {
    }
    function _icl_deprecated_icl_debug_mode()
    {
    }
    function icl_js_escape($str)
    {
    }
    /**
     * Read and, if needed, generate the site ID based on the scope.
     *
     * @param string $scope      Defaults to "global".
     *                           Use a different value when the ID is used for specific scopes.
     *
     * @param bool   $create_new Forces the creation of a new ID.
     *
     * @return string|null The generated/stored ID or null if it wasn't possible to generate/store the value.
     */
    function wpml_get_site_id($scope = \WPML_Site_ID::SITE_SCOPES_GLOBAL, $create_new = \false)
    {
    }
    function _icl_tax_has_objects_recursive($id, $term_id = -1, $rec = 0)
    {
    }
    function _icl_trash_restore_prompt()
    {
    }
    /**
     * Build or update duplicated posts from a master post.
     *
     * @param  string $master_post_id The ID of the post to duplicate from. Master post doesn't need to be in the default language.
     *
     * @uses       SitePress
     * @uses       TranslationManagement
     * @since      unknown
     * @deprecated 3.2 use 'wpml_admin_make_duplicates' action instead
     */
    function icl_makes_duplicates($master_post_id)
    {
    }
    /**
     * Build or update duplicated posts from a master post.
     * To be used only for admin backend actions
     *
     * @param int $master_post_id     The ID of the post to duplicate from.
     *                                The ID can be that of a post, page or custom post
     *                                Master post doesn't need to be in the default language.
     *
     * @see   $iclTranslationManagement in \SitePress:: __construct
     *
     * @uses  SitePress
     * @uses  TranslationManagement
     * @since 3.2
     * @uses  \SitePress::api_hooks
     */
    function wpml_admin_make_post_duplicates_action($master_post_id)
    {
    }
    /**
     * Build duplicated posts from a master post only in case of the duplicate not being present at the time.
     *
     * @param  string $master_post_id The ID of the post to duplicate from. Master post doesn't need to be in the default language.
     *
     * @uses       SitePress
     * @since      unknown
     * @deprecated 3.2 use 'wpml_make_post_duplicates' action instead
     */
    function icl_makes_duplicates_public($master_post_id)
    {
    }
    /**
     * Build duplicated posts from a master post only in case of the duplicate not being present at the time.
     *
     * @param int $master_post_id     The ID of the post to duplicate from.
     *                                Master post doesn't need to be in the default language.
     *
     * @uses       SitePress
     * @since      3.2
     * @uses       \SitePress::api_hooks
     */
    function wpml_make_post_duplicates_action($master_post_id)
    {
    }
    /**
     * Wrapper function for deprecated like_escape() and recommended wpdb::esc_like()
     *
     * @global wpdb  $wpdb
     *
     * @param string $text
     *
     * @return string
     */
    function wpml_like_escape($text)
    {
    }
    function icl_do_not_promote()
    {
    }
    /**
     * @param string $time
     *
     * @return string
     */
    function icl_convert_to_user_time($time)
    {
    }
    /**
     * Check if given language is activated
     *
     * @global sitepress $sitepress
     *
     * @param string $language 2 letters language code
     *
     * @return boolean
     * @since      unknown
     * @deprecated 3.2 use 'wpml_language_is_active' filter instead
     */
    function icl_is_language_active($language)
    {
    }
    /**
     * Checks if given language is enabled
     *
     * @param mixed      $empty_value   This is normally the value the filter will be modifying.
     *                                  We are not filtering anything here therefore the NULL value
     *                                  This for the filter function to actually receive the full argument list:
     *                                  apply_filters('wpml_language_is_active', '', $language_code);
     * @param string     $language_code The language code to check Accepts a 2-letter language code
     *
     * @return boolean
     * @global sitepress $sitepress
     *
     * @since 3.2
     * @uses  \SitePress::api_hooks
     */
    function wpml_language_is_active_filter($empty_value, $language_code)
    {
    }
    /**
     * @param string $url url either with or without schema
     *                    Removes the subdirectory in which WordPress is installed from a url.
     *                    If WordPress is not installed in a subdirectory, then the input is returned unaltered.
     *
     * @return string the url input without the blog's subdirectory. Potentially existing schemata on the input are kept intact.
     */
    function wpml_strip_subdir_from_url($url)
    {
    }
    /**
     * Changes array of items into string of items, separated by comma and sql-escaped
     *
     * @see https://coderwall.com/p/zepnaw
     * @global wpdb       $wpdb
     *
     * @param mixed|array $items  item(s) to be joined into string
     * @param string      $format %s or %d
     *
     * @return string Items separated by comma and sql-escaped
     */
    function wpml_prepare_in($items, $format = '%s')
    {
    }
    function is_not_installing_plugins()
    {
    }
    function wpml_mb_strtolower($string)
    {
    }
    function wpml_mb_strpos($haystack, $needle, $offset = 0)
    {
    }
    function wpml_set_plugin_as_inactive()
    {
    }
    function wpml_version_is($version_to_check, $comparison = '==')
    {
    }
    /**
     * Interrupts the plugin activation process if the WPML Core Plugin could not be activated
     */
    function icl_suppress_activation()
    {
    }
    /**
     * @param SitePress $sitepress
     */
    function activate_installer($sitepress = \null)
    {
    }
    function wpml_missing_filter_input_notice()
    {
    }
    function repair_el_type_collate()
    {
    }
    /**
     * Wrapper for `parse_url` using `wp_parse_url`
     *
     * @param string $url
     * @param int    $component
     *
     * @return array|string|int|null
     */
    function wpml_parse_url($url, $component = -1)
    {
    }
    /**
     * Wrapper function to prevent ampersand to be encoded (depending on some PHP versions)
     *
     * @link http://php.net/manual/en/function.http-build-query.php#102324
     *
     * @param array|object $query_data
     *
     * @return string
     */
    function wpml_http_build_query($query_data)
    {
    }
    /**
     * @param array $array
     * @param int   $sort_flags
     *
     * @uses \wpml_array_unique_fallback
     *
     * @return array
     */
    function wpml_array_unique($array, $sort_flags = \SORT_REGULAR)
    {
    }
    /**
     * @param array<mixed> $array
     * @param bool         $keep_key_assoc
     *
     * @return array
     * @see \wpml_array_unique
     */
    function wpml_array_unique_fallback($array, $keep_key_assoc)
    {
    }
    /**
     * @return bool
     */
    function wpml_is_rest_request()
    {
    }
    /**
     * @return bool
     */
    function wpml_is_rest_enabled()
    {
    }
    function wpml_is_cli()
    {
    }
    function wpml_sticky_post_sync(\SitePress $sitepress = \null)
    {
    }
    /**
     * @return WP_Filesystem_Direct
     */
    function wpml_get_filesystem_direct()
    {
    }
    /**
     * @param array       $postarray It will be escaped inside the function
     * @param string|null $lang
     * @param bool        $wp_error
     *
     * @return int|\WP_Error
     */
    function wpml_update_escaped_post(array $postarray, $lang = \null, $wp_error = \false)
    {
    }
    /**
     * @param string $group
     *
     * @return WPML_WP_Cache
     */
    function wpml_get_cache($group = '')
    {
    }
    /**
     * wpml_is_ajax - Returns true when the page is loaded via ajax.
     *
     * @since  3.1.5
     *
     * @return bool
     */
    function wpml_is_ajax()
    {
    }
    function get_debug_info()
    {
    }
    function object_to_array($obj)
    {
    }
    /**
     * A more helpful version of `admin_url`
     * Is not called it `wpml_admin_url` because there is already a class with the same name
     *
     * @param array $args
     *
     * @return string
     */
    function wpml_get_admin_url(array $args = array())
    {
    }
    function wpml_is_setup_complete()
    {
    }
    /**
     * Loads global variables providing functionality that is used throughout the plugin.
     *
     * @param null|bool $is_admin If set to `null` it will read from `is_admin()`
     */
    function load_essential_globals($is_admin = \null)
    {
    }
    function wpml_load_post_translation($is_admin, $settings)
    {
    }
    function wpml_load_query_filter($installed)
    {
    }
    function load_wpml_url_converter($settings, $domain_validation, $default_lang_code)
    {
    }
    /**
     * @param string             $req_uri
     * @param WPML_URL_Converter $wpml_url_converter
     * @param bool               $directory
     *
     * @return string
     */
    function wpml_validate_host($req_uri, $wpml_url_converter, $directory = \true)
    {
    }
    /**
     * Checks if a given taxonomy is currently translated
     *
     * @param string $taxonomy name/slug of a taxonomy
     * @return bool true if the taxonomy is currently set to being translatable in WPML
     */
    function is_taxonomy_translated($taxonomy)
    {
    }
    /**
     * Checks if a given post_type is currently translated
     *
     * @param string $post_type name/slug of a post_type
     * @return bool true if the post_type is currently set to being translatable in WPML
     */
    function is_post_type_translated($post_type)
    {
    }
    function setup_admin_menus()
    {
    }
    function maybe_load_translated_tax_screen()
    {
    }
    /**
     * @param bool $override
     *
     * @return array
     */
    function wpml_reload_active_languages_setting($override = \false)
    {
    }
    /**
     * Returns and if necessary instantiates an instance of the WPML_Installation Class
     *
     * @return \WPML_Installation
     */
    function wpml_get_setup_instance()
    {
    }
    function wpml_load_admin_files()
    {
    }
    function wpml_get_post_status_helper()
    {
    }
    function wpml_get_create_post_helper()
    {
    }
    /**
     * @return \TranslationManagement
     */
    function wpml_load_core_tm()
    {
    }
    function wpml_get_langs_in_dirs_val($wpml_url_converter)
    {
    }
    function wpml_get_root_page_actions_obj()
    {
    }
    function wpml_get_hierarchy_sync_helper($type = 'post')
    {
    }
    function wpml_maybe_setup_post_edit()
    {
    }
    /**
     * @return \WPML_Frontend_Tax_Filters
     */
    function wpml_load_frontend_tax_filters()
    {
    }
    /**
     * @return \WPML_Settings_Helper
     */
    function wpml_load_settings_helper()
    {
    }
    function wpml_get_term_translation_util()
    {
    }
    /**
     * @return \WPML_Term_Filters
     */
    function wpml_load_term_filters()
    {
    }
    function wpml_show_user_options()
    {
    }
    /**
     * @return \WPML_Upgrade_Command_Factory
     */
    function wpml_get_upgrade_command_factory()
    {
    }
    function wpml_get_upgrade_schema()
    {
    }
    /**
     * @param string      $class_name   A class implementing \IWPML_Upgrade_Command.
     * @param array       $dependencies An array of dependencies passed to the `$class_name`'s constructor.
     * @param array       $scopes       An array of scope values. Accepted values are: `\WPML_Upgrade::SCOPE_ADMIN`, `\WPML_Upgrade::SCOPE_AJAX`, and `\WPML_Upgrade::SCOPE_FRONT_END`.
     * @param string|null $method       The method to call to run the upgrade (otherwise, it calls the "run" method),
     *
     * @return \WPML_Upgrade_Command_Definition
     */
    function wpml_create_upgrade_command_definition($class_name, array $dependencies, array $scopes, $method = \null)
    {
    }
    /**
     * @return WPML_TM_Element_Translations
     */
    function wpml_tm_load_element_translations()
    {
    }
    function wpml_tm_load_status_display_filter()
    {
    }
    /**
     * @depecated since WPML 4.5.0
     *
     * @return \WPML_TM_Page_Builders_Hooks
     */
    function wpml_tm_page_builders_hooks()
    {
    }
    /**
     * @return \WPML_Custom_XML_Factory
     */
    function wpml_tm_custom_xml_factory()
    {
    }
    /**
     * @return \WPML_Custom_XML_UI_Hooks
     */
    function wpml_tm_custom_xml_ui_hooks()
    {
    }
    /**
     * @return \WPML_Translations_Queue_Factory
     */
    function wpml_tm_translation_queue_factory()
    {
    }
    /**
     * @return \WPML_UI_Screen_Options_Factory
     */
    function wpml_ui_screen_options_factory()
    {
    }
    /**
     * @return \WPML_TM_Loader
     */
    function wpml_tm_loader()
    {
    }
    /**
     * @return \WPML_TP_Translator
     */
    function wpml_tm_translator()
    {
    }
    /**
     * It returns a single instance of \WPML_Translation_Management.
     *
     * @return \WPML_Translation_Management
     */
    function wpml_translation_management()
    {
    }
    /**
     * @return \WPML_Translation_Basket
     */
    function wpml_translation_basket()
    {
    }
    /**
     * @return \WPML_TM_Translate_Independently
     */
    function wpml_tm_translate_independently()
    {
    }
    /**
     * @return WPML_Translation_Proxy_Basket_Networking
     */
    function wpml_tm_load_basket_networking()
    {
    }
    /**
     * @return WPML_Translation_Proxy_Networking
     */
    function wpml_tm_load_tp_networking()
    {
    }
    /**
     * @return WPML_TM_Blog_Translators
     */
    function wpml_tm_load_blog_translators()
    {
    }
    /**
     * @return WPML_TM_Translators_Dropdown
     */
    function wpml_tm_get_translators_dropdown()
    {
    }
    /**
     * @return WPML_TM_Mail_Notification
     */
    function wpml_tm_init_mail_notifications()
    {
    }
    /**
     * It returns a single instance of the class.
     *
     * @return WPML_Dashboard_Ajax
     */
    function wpml_tm_load_tm_dashboard_ajax()
    {
    }
    function wpml_tm_load_and_intialize_dashboard_ajax()
    {
    }
    /**
     * It returns a single instance of the class.
     *
     * @return WPML_Translation_Job_Factory
     */
    function wpml_tm_load_job_factory()
    {
    }
    /**
     * It returns a single instance of the class.
     *
     * @return WPML_TM_XLIFF_Factory
     */
    function wpml_tm_xliff_factory()
    {
    }
    /**
     * It returns a single instance of the class.
     *
     * @return WPML_TM_XLIFF_Shortcodes
     */
    function wpml_tm_xliff_shortcodes()
    {
    }
    /**
     * It returns an instance of the class.
     *
     * @return \WPML_TM_Old_Jobs_Editor
     */
    function wpml_tm_load_old_jobs_editor()
    {
    }
    function tm_after_load()
    {
    }
    /**
     * It returns an instance of the class.
     *
     * @return WPML_TM_Records
     */
    function wpml_tm_get_records()
    {
    }
    /**
     * It returns an instance of the class.
     *
     * @return WPML_TM_Xliff_Frontend
     */
    function setup_xliff_frontend()
    {
    }
    /**
     * It returns an instance of the class.
     *
     * @param int $job_id The ID of the job.
     *
     * @return WPML_TM_ATE_Models_Job_Create
     */
    function wpml_tm_create_ATE_job_creation_model($job_id)
    {
    }
    /**
     * It returns a single instance of the class.
     *
     * @param int $job_id The ID of the job.
     *
     * @return string
     */
    function wpml_tm_get_job_xliff($job_id)
    {
    }
    /**
     * It returns a single instance of the class.
     *
     * @return \WPML_Rest
     */
    function wpml_tm_get_wpml_rest()
    {
    }
    /**
     * It returns a single instance of the class.
     *
     * @return \WPML_TP_API_Client
     */
    function wpml_tm_get_tp_api_client()
    {
    }
    /**
     * It returns a single instance of the class.
     *
     * @return \WPML_TP_Project
     */
    function wpml_tm_get_tp_project()
    {
    }
    /**
     * It returns a single instance of the class.
     *
     * @return \WPML_TP_Jobs_API
     */
    function wpml_tm_get_tp_jobs_api()
    {
    }
    /**
     * It returns a single instance of the class.
     *
     * @return \WPML_TP_Project_API
     */
    function wpml_tm_get_tp_project_api()
    {
    }
    /**
     * It returns a single instance of the class.
     *
     * @return \WPML_TP_XLIFF_API
     */
    function wpml_tm_get_tp_xliff_api()
    {
    }
    /**
     * It returns a single instance of the class.
     *
     * @param bool $forceReload
     *
     * @return \WPML_TM_Jobs_Repository
     */
    function wpml_tm_get_jobs_repository($forceReload = \false)
    {
    }
    function wpml_tm_reload_jobs_repository()
    {
    }
    /**
     * It returns an instance of the class.
     *
     * @return WPML_TM_ATE_Job_Repository
     */
    function wpml_tm_get_ate_jobs_repository()
    {
    }
    /**
     * @return \WPML\TM\ATE\JobRecords
     */
    function wpml_tm_get_ate_job_records()
    {
    }
    /**
     * It returns a single instance of the class.
     *
     * @return \WPML_TP_Sync_Jobs
     */
    function wpml_tm_get_tp_sync_jobs()
    {
    }
    /**
     * It returns a single instance of the class.
     *
     * @return \WPML_TP_Translations_Repository
     */
    function wpml_tm_get_tp_translations_repository()
    {
    }
    /**
     * It returns a single instance of the class.
     *
     * @return \WPML_WP_User_Query_Factory
     */
    function wpml_tm_get_wp_user_query_factory()
    {
    }
    /**
     * It returns a single instance of the class.
     *
     * @return \WPML_WP_User_Factory
     */
    function wpml_tm_get_wp_user_factory()
    {
    }
    /**
     * It returns a single instance of the class.
     *
     * @return \WPML_TM_Email_Twig_Template_Factory
     */
    function wpml_tm_get_email_twig_template_factory()
    {
    }
    /**
     * It returns a single instance of the class.
     *
     * @return \WPML_TM_AMS_ATE_Factories
     */
    function wpml_tm_ams_ate_factories()
    {
    }
    /**
     * @return string
     * @throws \Auryn\InjectionException
     */
    function wpml_tm_get_ams_ate_console_url()
    {
    }
    /**
     * @param \WPML\TM\ATE\Log\Entry $entry
     * @param bool $avoidDuplication
     *
     * @throws \WPML\Auryn\InjectionException
     */
    function wpml_tm_ate_ams_log(\WPML\TM\ATE\Log\Entry $entry, $avoidDuplication = \false)
    {
    }
    /**
     * @param \WPML\TM\ATE\Log\Entry $entry
     *
     * @throws \WPML\Auryn\InjectionException
     */
    function wpml_tm_ate_ams_log_remove(\WPML\TM\ATE\Log\Entry $entry)
    {
    }
    /**
     * @param string $original
     * @param string $translation
     * @param bool $finished_state
     *
     * @return WPML_TM_Translated_Field
     */
    function wpml_tm_create_translated_field($original, $translation, $finished_state)
    {
    }
    /**
     * @param int $post_id
     * @param \WP_Post $post
     * @param bool $force_set_status
     */
    function wpml_tm_save_post($post_id, $post, $force_set_status = \false)
    {
    }
    function icl_wpmuadminedit()
    {
    }
    function icl_network_administration_menu()
    {
    }
    function icl_network_reset_wpml()
    {
    }
    function icl_network_deactivate_wpml($blog_id = \false)
    {
    }
    function icl_network_activate_wpml($blog_id = \false)
    {
    }
    /**
     * @param string $input
     * @param string $default_if_invalid
     *
     * @return string
     */
    function wpml_sanitize_hex_color($input, $default_if_invalid = '')
    {
    }
    function wpml_sanitize_hex_color_array($input, $default_if_invalid = '', $bypass_non_strings = \true, $recursive = \false)
    {
    }
    /**
     * @param string $input
     *
     * @return bool
     */
    function wpml_is_valid_hex_color($input)
    {
    }
    function wpml_get_valid_hex_color_pattern()
    {
    }
    /**
     * Convert RGB color code to HEX code.
     *
     * @param array $rgb
     *
     * @return bool|string
     */
    function wpml_rgb_to_hex($rgb)
    {
    }
    function wpml_get_authenticated_action()
    {
    }
    /**
     * Validates a nonce according to the schema also used by \wpml_nonce_field
     *
     * @param string $action
     *
     * @return false|int
     */
    function wpml_is_action_authenticated($action)
    {
    }
    /**
     * Generates HTML for the hidden nonce input field following the schema
     * used by \wpml_is_action_authenticated
     *
     * @param string $action
     *
     * @return string
     */
    function wpml_nonce_field($action)
    {
    }
    function uuid_v5($name, $ns_uuid = '6ba7b811-9dad-11d1-80b4-00c04fd430c8')
    {
    }
    /**
     * @param string   $object_id
     * @param string   $object_type
     * @param int|null $timestamp   If this parameter is `null`, it will be assigned the current time
     *                              Set this parameter to 0 if the uuid should not have a time footprint
     *
     * @return string
     */
    function wpml_uuid($object_id, $object_type, $timestamp = \null)
    {
    }
    function icl_reset_wpml($blog_id = \false)
    {
    }
    /**
     * Ajax handler for type assignment fix troubleshoot action
     */
    function icl_repair_broken_type_and_language_assignments()
    {
    }
    function icl_import_xml()
    {
    }
    function icl_import_xml_start()
    {
    }
    /**
     * Registers scripts so that they can be reused throughout WPML plugins
     * Hooked to `admin_enqueue_scripts`
     */
    function wpml_register_js_scripts()
    {
    }
    /**
     * @return mixed
     */
    function icl_get_languages_names()
    {
    }
    /**
     * @return array
     */
    function icl_get_languages_codes()
    {
    }
    /**
     * @return array
     */
    function icl_get_languages_locales()
    {
    }
    function icl_incomp_plugins_warn()
    {
    }
    /**
     * Loads compatibility classes for active plugins.
     */
    function wpml_plugins_integration_setup()
    {
    }
    /**
     * Loads compatibility classes for active themes.
     */
    function wpml_themes_integration_setup()
    {
    }
    /**
     * SitePress Template functions
     *
     * @package wpml-core
     */
    /**
     * @since      3.2.3
     * @deprecated Use 'wpml_get_capabilities' instead.
     */
    function icl_sitepress_get_capabilities()
    {
    }
    function wpml_get_capabilities_names()
    {
    }
    function wpml_get_capabilities_labels()
    {
    }
    function wpml_get_capabilities()
    {
    }
    function wpml_get_read_only_capabilities_filter($empty)
    {
    }
    function wpml_get_roles()
    {
    }
    function wpml_roles_read_only_filter($empty)
    {
    }
    /**
     * @since      unknown
     * @deprecated 3.2 use 'wpml_home_url' filter instead.
     */
    function icl_get_home_url()
    {
    }
    /**
     * Get the home url in the current language
     * To be used in place of get_option('home')
     * Note: Good code will make use of get_home_url() or home_url() which apply filters natively.
     * In this case there is no need to replace anything.
     *
     * @return string
     * @since 3.2
     * @uses  \SitePress::api_hooks
     */
    function wpml_get_home_url_filter()
    {
    }
    /**
     * @since      unknown
     * @deprecated 3.2 use 'wpml_active_languages' filter instead.
     *
     * @param string $a
     *
     * @return mixed
     */
    function icl_get_languages($a = '')
    {
    }
    /**
     * Get a list of the active languages
     * Usually used to create custom language switchers
     *
     * @param mixed        $empty_value   This is normally the value the filter will be modifying.
     *                                    We are not filtering anything here therefore the NULL value
     *                                    This for the filter function to actually receive the full argument list:
     *                                    apply_filters( 'wpml_active_languages', '', $args)
     * @param array|string $args          {
     *                                    Optional A string of arguments to filter the language output
     *
     * @type bool          $skip_missing  How to treat languages with no translations. 0 | Skip language or 1 | Link to home of language for missing translations.
     * @type string        $link_empty_to Works in conjunction with skip_missing = 0 and allows using custom links for the languages that do not have translations
     *                                    for the current element. {%lang} can be used as placeholder for the language code. Empty by default.
     * @type string        $orderby       Accepts id|code|name Defaults to custom.
     *                                    The custom order can be defined in the WordPress admin under WPML > Languages > Language Switcher Options
     * @type string        $order         Accepts asc|desc
     *                                    }
     * @return array
     * @since                             3.2
     *
     * @uses                              \SitePress::api_hooks
     */
    function wpml_get_active_languages_filter($empty_value, $args = '')
    {
    }
    /**
     * @param string $native_name
     * @param bool   $translated_name
     * @param bool   $lang_native_hidden
     * @param bool   $lang_translated_hidden
     *
     * @return string
     * @deprecated 3.2 use 'wpml_display_language_names' filter instead.
     *
     * @since      unknown
     */
    function icl_disp_language($native_name, $translated_name = \false, $lang_native_hidden = \false, $lang_translated_hidden = \false)
    {
    }
    /**
     * @param mixed       $empty_value
     *
     * @param string      $native_name            Required The language native name
     * @param string|bool $translated_name        Required The language translated name Defaults to FALSE
     * @param bool        $lang_native_hidden     Optional, default is FALSE 0|false or 1|true Whether to hide the language native name or not.
     * @param bool        $lang_translated_hidden Optional, default is FALSE 0|false or 1|true Whether to hide the language translated name or not.
     *
     * @return string HTML content
     * @deprecated since 3.6.0 / See new Language Switcher API with use of Twig templates
     *
     * Get the native or translated language name or both
     * Checks if native_language_name and translated_language_name are different.
     * If so, it returns them both, otherwise, it returns only one.
     * Usually used in custom language switchers
     * @since      3.2
     *
     * @see        \wpml_get_active_languages_filter
     *
     * @uses       \SitePress::api_hooks
     */
    function wpml_display_language_names_filter($empty_value, $native_name, $translated_name = \false, $lang_native_hidden = \false, $lang_translated_hidden = \false)
    {
    }
    /**
     * @param int    $element_id
     * @param string $element_type
     * @param string $link_text
     * @param array  $optional_parameters
     * @param string $anchor
     * @param bool   $echo
     * @param bool   $return_original_if_missing
     *
     * @return string
     * @since      unknown
     * @deprecated 3.2 use 'wpml_element_link' filter instead.
     *
     */
    function icl_link_to_element($element_id, $element_type = 'post', $link_text = '', $optional_parameters = array(), $anchor = '', $echo = \true, $return_original_if_missing = \true)
    {
    }
    /**
     * Get the link to an element in the current language
     * Produces localized links for WordPress elements (post types and taxonomy terms)
     *
     * @param int    $element_id                 Required The ID of the post type (post, page) or taxonomy term (tag or category) to link to.
     * @param string $element_type               Optional The type of element to link to. Can be 'post', 'page', 'tag' or 'category'.    Defaults to 'post'
     * @param string $link_text                  Optional The link text. Defaults to the element's name.
     * @param array  $optional_parameters        Optional Arguments for the link.
     * @param string $anchor                     Optional Anchor for the link.
     * @param bool   $echo                       Optional 0|false to return or 1|true to echo the localized link. Defaults to true.
     * @param bool   $return_original_if_missing Optional, default is TRUE If set to true it will always return a value (the original value, if translation is missing)
     *
     * @return string HTML content
     * @since 3.2
     *
     * @uses  \SitePress::api_hooks
     */
    function wpml_link_to_element_filter($element_id, $element_type = 'post', $link_text = '', $optional_parameters = array(), $anchor = '', $echo = \true, $return_original_if_missing = \true)
    {
    }
    /**
     * @param int         $element_id
     * @param string      $element_type
     * @param bool        $return_original_if_missing
     * @param null|string $ulanguage_code
     *
     * @return null|int
     * @deprecated 3.2 use 'wpml_object_id' filter instead.
     *
     * @since      unknown
     */
    function icl_object_id($element_id, $element_type = 'post', $return_original_if_missing = \false, $ulanguage_code = \null)
    {
    }
    /**
     * Get the element in the current language
     *
     * @param int         $element_id                 Use term_id for taxonomies, post_id for posts
     * @param string      $element_type               Use post, page, {custom post type name}, nav_menu, nav_menu_item, category, tag, etc.
     *                                                You can also pass 'any', to let WPML guess the type, but this will only work for posts.
     * @param bool        $return_original_if_missing Optional, default is FALSE. If set to true it will always return a value (the original value, if translation is missing).
     * @param string|NULL $language_code              Optional, default is NULL. If missing, it will use the current language.
     *                                                If set to a language code, it will return a translation for that language code or
     *                                                the original if the translation is missing and $return_original_if_missing is set to TRUE.
     *
     * @return int|NULL
     * @since 3.2
     *
     * @uses  \SitePress::api_hooks
     */
    function wpml_object_id_filter($element_id, $element_type = 'post', $return_original_if_missing = \false, $language_code = \null)
    {
    }
    /**
     * @param string $lang_code
     * @param bool   $display_code
     *
     * @return string
     * @deprecated 3.2 use 'wpml_translated_language_name' filter instead
     *
     * @since      unknown
     */
    function icl_get_display_language_name($lang_code, $display_code = \false)
    {
    }
    /**
     * Returns the translated name of a language in another language.
     * The languages involved do not need to be active.
     *
     * @param mixed       $empty_value
     *
     * @param string      $lang_code          The language name will be for this language. Accepts a 2-letter code e.g. en
     * @param string|bool $display_code       The language name will display translated in this language. Accepts a 2-letter code e.g. de.
     *                                        If set to false it will return the translated name in the current language. Default is FALSE.
     *
     * @return string The language translated name
     * @see   \wpml_get_active_languages_filter
     *
     * @since 3.2
     *
     * @uses  \SitePress::api_hooks
     */
    function wpml_translated_language_name_filter($empty_value, $lang_code, $display_code = \false)
    {
    }
    /**
     * @since      unknown
     * @deprecated 3.2 use 'wpml_current_language' filter instead.
     */
    function icl_get_current_language()
    {
    }
    /**
     * Get the current language
     *
     * @since      3.2
     * @deprecated Use apply_filters('wpml_current_language', '');
     * Example: $my_current_lang = apply_filters('wpml_current_language', '');
     */
    function wpml_get_current_language_filter()
    {
    }
    /**
     * @since      unknown
     * @deprecated 3.2 use 'wpml_default_language' filter instead
     */
    function icl_get_default_language()
    {
    }
    /**
     * Get the default language
     *
     * @param mixed $empty_value
     *
     * @return string
     * @see   \wpml_get_active_languages_filter
     * @uses  \SitePress::api_hooks
     * @since 3.2
     *
     */
    function wpml_get_default_language_filter($empty_value)
    {
    }
    /**
     * Returns the default language
     *
     * @since 1.3
     * @return string
     */
    function wpml_get_default_language()
    {
    }
    /**
     * Get current language
     *
     * @since 1.3
     * @return string
     */
    function wpml_get_current_language()
    {
    }
    /**
     * @param string $folder
     *
     * @return bool
     */
    function icl_tf_determine_mo_folder($folder)
    {
    }
    /**
     * @todo: [WPML 3.3] refactor in 3.3
     *
     * @param array $attributes
     * @param bool  $checked
     * @param bool  $disabled
     *
     * @return string
     */
    // $field_prefix = 'wpml_cf_translation_preferences_option_ignore_'
    function wpml_input_field_helper($attributes = array(), $checked = \false, $disabled = \false)
    {
    }
    /**
     * @param array<string,string> $attributes
     * @param string               $caption
     *
     * @return string
     * @todo: [WPML 3.3] refactor in 3.3
     *
     */
    function wpml_label_helper($attributes, $caption)
    {
    }
    /**
     * @todo: [WPML 3.3] refactor in 3.3
     *
     * @param array<mixed> $args
     * @param string       $id_prefix
     * @param string       $value
     * @param string       $caption
     *
     * @return string
     */
    function wpml_translation_preference_input_helper($args, $id_prefix, $value, $caption)
    {
    }
    /**
     * @todo: [WPML 3.3] refactor in 3.3
     *
     * @param string $id
     * @param bool   $custom_field
     * @param string $class
     * @param bool   $ajax
     * @param string $default_value
     * @param bool   $fieldset
     * @param bool   $suppress_error
     *
     * @return string
     */
    function wpml_cf_translation_preferences($id, $custom_field = \false, $class = 'wpml', $ajax = \false, $default_value = 'ignore', $fieldset = \false, $suppress_error = \false)
    {
    }
    /**
     * @todo: [WPML 3.3] refactor in 3.3
     * wpml_get_copied_fields_for_post_edit
     * return a list of fields that are marked for copying and the
     * original post id that the fields should be copied from
     * This should be used to populate any custom field controls when
     * a new translation is selected and the field is marked as "copy" (sync)
     *
     * @param array $fields
     *
     * @return array
     */
    function wpml_get_copied_fields_for_post_edit($fields = array())
    {
    }
    /**
     * Retrieve language information of a post by its ID
     * The language information includes
     * the post locale,
     * the language text direction (True for RTL, False for LTR),
     * the post language translated name and native name and
     * whether the current language is different to the post language (True/False)
     *
     * @param mixed $empty_value
     *
     * @see  \wpml_get_active_languages_filter
     *
     * @param int   $post_id Optional The post id to retrieve information of (post, page, attachment, custom) Defaults to current post ID.
     *
     * @return array|WP_Error
     * @uses \SitePress::api_hooks
     */
    function wpml_get_language_information($empty_value = \null, $post_id = \null)
    {
    }
    /**
     * Add metabox definition to edit post type in Types
     *
     * @since x.x.x
     *
     * @param array $boxes Meta boxes in Types.
     *
     * @return array Meta boxes in Types.
     */
    function wpml_wpcf_meta_box_order_defaults($boxes)
    {
    }
    /**
     * @todo: [WPML 3.3] refactor in 3.3
     *
     * @return string
     */
    function wpml_custom_post_translation_options()
    {
    }
    /**
     * @since      unknown
     * @deprecated 3.2 use 'wpml_add_language_selector' filter instead
     */
    function icl_language_selector()
    {
    }
    /**
     * Display the drop down language selector
     *
     * @since 3.2
     * Will use the language selector settings from "Language switcher as shortcode or action"
     * @uses  \SitePress::api_hooks
     * example: do_action( 'wpml_add_language_selector' );
     */
    function wpml_add_language_selector_action()
    {
    }
    /**
     * @since      unknown
     * @deprecated 3.2 use 'wpml_footer_language_selector' filter instead
     */
    function icl_language_selector_footer()
    {
    }
    /**
     * Display the footer language selector
     *
     * @since 3.2
     * Will use the language selector include configuration from the WPML -> Language admin screen
     * @uses  \SitePress::api_hooks
     * example: do_action('wpml_footer_language_selector');
     */
    function wpml_footer_language_selector_action()
    {
    }
    /**
     * Returns an HTML hidden input field with name="lang" and value of current language
     * This is for theme authors, to make their themes compatible with WPML when using the search form.
     * In order to make the search form work properly, they should use standard WordPress template tag get_search_form()
     * In this case WPML will handle the the rest.
     * If for some reasons the template function can't be used and form is created differently,
     * authors must the following code between inside the form
     * <?php
     * if (function_exists('wpml_the_language_input_field')) {
     *    wpml_the_language_input_field();
     * }
     *
     * @global SitePress $sitepress
     * @return string|null HTML input field or null
     * @since      3.2
     * @deprecated 3.2 use 'wpml_add_language_form_field' action instead
     */
    function wpml_get_language_input_field()
    {
    }
    /**
     * Echoes the value returned by \wpml_get_language_input_field
     *
     * @since      3.1.7.3
     * @deprecated 3.2 use 'wpml_add_language_form_field' filter instead
     */
    function wpml_the_language_input_field()
    {
    }
    /**
     * @since 3.2
     * Returns an HTML hidden input field with name="lang" and as value the current language
     * In order to add a search form to your theme you would normally use the standard WordPress template tag: <code>get_search_form()</code>
     * If you are making use of the default WordPress search form, you do not need to edit anything. WPML will handle the rest.
     * However, there may be times when <code>get_search_form()</code> can't be used.
     * If you are creating a custom search form and you need to make it WPML compatible then this action hook is what you need.
     * Add the action hook  inside the form:
     * <?php
     * do_action('wpml_add_language_form_field');
     * ?>
     * @global SitePress $sitepress
     * @uses  \SitePress::api_hooks
     */
    function wpml_add_language_form_field_action()
    {
    }
    function wpml_language_form_field_shortcode()
    {
    }
    function wpml_get_language_form_field()
    {
    }
    /**
     * @since      unknown
     * @deprecated 3.2 use 'wpml_element_translation_type' filter instead
     *
     * @param int    $id
     * @param string $type
     *
     * @return bool|int
     */
    function wpml_get_translation_type($id, $type = 'post')
    {
    }
    /**
     * @since 3.2
     * Accepts the ID and type of an element and returns its translation type.
     * Values will be one of these:
     *      WPML_ELEMENT_IS_NOT_TRANSLATED  = 0
     *      WPML_ELEMENT_IS_TRANSLATED      = 1
     *      WPML_ELEMENT_IS_DUPLICATED      = 2
     *      WPML_ELEMENT_IS_A_DUPLICATE     = 3
     *
     * @param mixed  $empty_value
     *
     * @see   \wpml_get_active_languages_filter
     *
     * @param int    $element_id    The element id to retrieve the information of. Use term_id for taxonomies, post_id for posts
     * @param string $element_type  Can be a post type: post, page, attachment, nav_menu_item, {custom post key}
     *                              or taxonomy: category, post_tag, nav_menu {custom taxonomy key}
     *
     * @return int
     * @uses  \SitePress::api_hooks
     */
    function wpml_get_element_translation_type_filter($empty_value, $element_id, $element_type)
    {
    }
    /**
     * Accepts the ID of a post and returns its translation type.
     * Values will be one of these:
     *      WPML_ELEMENT_IS_NOT_TRANSLATED  = 0
     *      WPML_ELEMENT_IS_TRANSLATED      = 1
     *      WPML_ELEMENT_IS_DUPLICATED      = 2
     *      WPML_ELEMENT_IS_A_DUPLICATE     = 3
     *
     * @param int $post_id The ID of the post from which to get translation information
     *
     * @return int
     * @internal   param string $post_type
     * @since      3.2
     * @deprecated 3.2 use 'wpml_element_translation_type' filter instead
     */
    function wpml_get_post_translation_type($post_id)
    {
    }
    /**
     * @param int    $post_id
     * @param string $post_type
     *
     * @return bool
     * @since      3.2
     * @deprecated 3.2 use 'wpml_element_has_translations' filter instead
     */
    function wpml_post_has_translations($post_id, $post_type = 'post')
    {
    }
    /**
     * Checks if an element has translations
     * A translation can be a manual translation or a duplication.
     *
     * @since 3.2
     *
     * @param mixed  $empty_value
     *
     * @see   \wpml_get_active_languages_filter
     *
     * @param int    $element_id    Use term_id for taxonomies, post_id for posts
     * @param string $element_type  Can be a post type: post, page, attachment, nav_menu_item, {custom post key}
     *                              or taxonomy: category, post_tag, nav_menu {custom taxonomy key}
     *
     * @return bool
     * @uses  \SitePress::api_hooks
     */
    function wpml_element_has_translations_filter($empty_value, $element_id, $element_type = 'post')
    {
    }
    function wpml_get_content_translations_filter($empty, $post_id, $content_type = 'post')
    {
    }
    /**
     * @param int $post_id
     *
     * @return mixed
     * @since      3.2
     * @deprecated 3.2 use 'wpml_master_post_from_duplicate' filter instead
     */
    function wpml_get_master_post_from_duplicate($post_id)
    {
    }
    /**
     * Get the original post from the duplicated post
     *
     * @param int $post_id The duplicated post ID
     *
     * @return int or empty string if there is nothing to return
     * @uses \SitePress::api_hooks
     */
    function wpml_get_master_post_from_duplicate_filter($post_id)
    {
    }
    /**
     * @param int $master_post_id
     *
     * @return mixed
     * @since      3.2
     * @deprecated 3.2 use 'wpml_post_duplicates' filter instead
     */
    function wpml_get_post_duplicates($master_post_id)
    {
    }
    /**
     * Get the duplicated post ids
     * Will return an associative array with language codes as indexes and post_ids as values
     *
     * @param int $master_post_id The original post id from which duplicates exist
     *
     * @return array
     * @uses \SitePress::api_hooks
     */
    function wpml_get_post_duplicates_filter($master_post_id)
    {
    }
    /**
     * Filters a WordPress element by adding the WPML prefix 'post_', 'tax_', or nothing for 'comment' as used in icl_translations db table
     *
     * @since 3.2
     *
     * @param string $element_type    Accepts comment, post, page, attachment, nav_menu_item, {custom post key},
     *                                nav_menu, category, post_tag, {custom taxonomy key}
     *
     * @return string
     * @uses  \SitePress::api_hooks
     */
    function wpml_element_type_filter($element_type)
    {
    }
    /**
     * Retrieves language information for a translatable element
     * Checks icl_translations db table and returns an object with the element's
     * trid, source language code and language code
     *
     * @since                             3.2.2
     *
     * @param mixed $element_object       A WordPress object.
     * @param array $args                 {
     *                                    Required An array of arguments to be used
     *
     * @type int    $element_id           Use term_taxonomy_id for taxonomies, post_id for posts
     * @type string $element_type         Can be a post type: post, page, attachment, nav_menu_item, {custom post key}
     *                                    or taxonomy: category, post_tag, nav_menu {custom taxonomy key}
     *                                    }
     * @return object
     * @uses                              \SitePress::api_hooks
     */
    function wpml_element_language_details_filter($element_object, $args)
    {
    }
    /**
     * Retrieves the language code for a translatable element
     * Checks icl_translations db table and returns the element's language code
     *
     * @since                             3.2.2
     *
     * @param mixed $language_code        A 2-letter language code.
     * @param array $args                 {
     *                                    Required An array of arguments to be used
     *
     * @type int    $element_id           Use term_taxonomy_id for taxonomies, post_id for posts
     * @type string $element_type         Can be a post type: post, page, attachment, nav_menu_item, {custom post key}
     *                                    or taxonomy: category, post_tag, nav_menu {custom taxonomy key}
     *                                    }
     * @return string
     * @uses                              \SitePress::api_hooks
     */
    function wpml_element_language_code_filter($language_code, $args)
    {
    }
    /**
     * Retrieves the elements without translations
     * Queries the database and returns an array with ids
     *
     * @since                             3.2.2
     *
     * @param array $element_ids          An array of element ids.
     * @param array $args                 {
     *                                    Required An array of arguments to be used
     *
     * @type string $target_language      The target language code
     * @type string $source_language      The source language code
     * @type string $element_type         Can be a post type: post, page, attachment, nav_menu_item, {custom post key}
     *                                    or taxonomy: category, post_tag, nav_menu {custom taxonomy key}
     *                                    }
     * @return array
     * @uses                              \SitePress::api_hooks
     */
    function wpml_elements_without_translations_filter($element_ids, $args)
    {
    }
    /**
     * @deprecated Use the filter hook `wpml_permalink` instead
     *
     * Filters a WordPress permalink and converts it to a language specific permalink based on plugin settings
     *
     * @since 3.2.2
     *
     * @param string      $url           The WordPress generated url to filter
     * @param null|string $language_code if null, it falls back to default language for root page,
     *                                   or current language in all other cases.
     *
     * @return string
     */
    function wpml_permalink_filter($url, $language_code = \null)
    {
    }
    /**
     * Switches WPML's query language
     *
     * @since                           3.2.2
     * @type null|string $language_code The language code to switch  to
     *                                  If set to null it restores the original language
     *                                  If set to 'all' it will query content from all active languages
     *                                  Defaults to null
     * @uses                            \SitePress::api_hooks
     */
    function wpml_switch_language_action($language_code = \null)
    {
    }
    function icl_plugin_upgrade()
    {
    }
    function icl_upgrade_version($version, $force = \false)
    {
    }
    function icl_plugin_too_old()
    {
    }
    function icl_table_column_exists($table_name, $column_name)
    {
    }
    function icl_table_index_exists($table_name, $index_name)
    {
    }
    function icl_alter_table_columns($table_name, $column_definitions)
    {
    }
    function icl_drop_table_index($table_name, $index_name)
    {
    }
    function icl_create_table_index($table_name, $index_definition)
    {
    }
    /**
     * @param array<mixed>  $array
     * @param array<string> $required_keys
     *
     * @return bool
     */
    function icl_array_has_required_keys($array, $required_keys)
    {
    }
    function _wpml_api_allowed_content_type($content_type)
    {
    }
    /**
     * Add translatable content to the WPML translations table
     *
     * @since      1.3
     * @package    WPML
     * @subpackage WPML API
     *
     * @param string      $content_type  Content type.
     * @param int         $content_id    Content ID.
     * @param bool|string $language_code Content language code. (defaults to current language)
     * @param bool|int    $trid          Content trid - if a translation in a different language already exists.
     *
     * @return int error code
     */
    function wpml_add_translatable_content($content_type, $content_id, $language_code = \false, $trid = \false)
    {
    }
    /**
     * Update translatable content in the WPML translations table
     *
     * @since      1.3
     * @package    WPML
     * @subpackage WPML API
     *
     * @param string $content_type  Content type.
     * @param int    $content_id    Content ID.
     * @param string $language_code Content language code.
     *
     * @return int error code
     */
    function wpml_update_translatable_content($content_type, $content_id, $language_code)
    {
    }
    /**
     * Update translatable content in the WPML translations table
     *
     * @since      1.3
     * @deprecated deprecated since 3.2
     *
     * @package    WPML
     * @subpackage WPML API
     *
     * @param string      $content_type  Content type.
     * @param int         $content_id    Content ID.
     * @param bool|string $language_code Content language code. (when ommitted - delete all translations associated with the respective content)
     *
     * @return int error code
     */
    function wpml_delete_translatable_content($content_type, $content_id, $language_code = \false)
    {
    }
    /**
     * Get trid value for a specific piece of content
     *
     * @since 1.3
     * @package WPML
     * @subpackage WPML API
     *
     * @param string $content_type Content type.
     * @param int    $content_id Content ID.
     *
     * @return int trid or 0 for error
     *  */
    function wpml_get_content_trid($content_type, $content_id)
    {
    }
    /**
     * Detects the current language and returns the language relevant content id. optionally it can return the original id if a translation is not found
     * See also wpml_object_id_filter() in \template-functions.php
     *
     * @since 1.3
     * @package WPML
     * @subpackage WPML API
     *
     * @param string $content_type Content type.
     * @param int    $content_id Content ID.
     * @param bool   $return_original return the original id when translation not found.
     *
     * @return int trid or 0 for error
     */
    function wpml_get_content($content_type, $content_id, $return_original = \true)
    {
    }
    /**
     * Get translations for a certain piece of content
     *
     * @since      1.3
     * @package    WPML
     * @subpackage WPML API
     *
     * @param string $content_type Content type.
     * @param int    $content_id   Content ID.
     * @param bool   $skip_missing
     *
     * @internal   param bool $return_original return the original id when translation not found.
     *
     * @return array|int translations or error code
     */
    function wpml_get_content_translations($content_type, $content_id, $skip_missing = \true)
    {
    }
    /**
     *  Returns a certain translation for a piece of content
     *
     * @since 1.3
     * @package WPML
     * @subpackage WPML API
     *
     * @param string $content_type Content type.
     * @param int    $content_id Content ID.
     * @param bool   $language_code
     *
     * @return int|array error code or array('lang'=>element_id)
     */
    function wpml_get_content_translation($content_type, $content_id, $language_code)
    {
    }
    /**
     * Returns the list of active languages
     * See also wpml_get_active_languages_filter() in \template-functions.php
     *
     * @since 1.3
     * @package WPML
     * @subpackage WPML API
     *
     * @return array
     *  */
    function wpml_get_active_languages()
    {
    }
    /**
     *  Get contents of a specific type
     *
     * @since      1.3
     * @package    WPML
     * @subpackage WPML API
     *
     * @param string $content_type Content type.
     *
     * @param bool   $language_code
     *
     * @return int or array
     */
    function wpml_get_contents($content_type, $language_code = \false)
    {
    }
    /**
     * Returns the number of the words that will be sent to translation and a cost estimate
     *
     * @since      1.3
     * @package    WPML
     * @subpackage WPML API
     *
     * @param string      $string
     * @param bool|string $language - should be specified when the language is one of zh-hans|zh-hant|ja|ko
     *
     * @return array (count, cost)
     */
    function wpml_get_word_count($string, $language = \false)
    {
    }
    /**
     *  Check user is translator
     *
     * @since 1.3
     * @package WPML
     * @subpackage WPML API
     *
     * @param string $from_language Language to translate from
     * @param string $to_language Language to translate into
     *
     * @return bool (true if translator)
     */
    function wpml_check_user_is_translator($from_language, $to_language)
    {
    }
    /**
     *  Check user is translator
     *
     * @param int         $post_id          Post ID
     * @param int         $cred_form_id
     * @param bool|string $current_language (optional) current language
     *
     * @return bool (true if translator)
     * @package    WPML
     * @subpackage WPML API
     *
     * @internal   param int $form_id Form ID
     * @since      1.3
     */
    function wpml_generate_controls($post_id, $cred_form_id, $current_language = \false)
    {
    }
    /**
     *  Get original content
     *
     * @since      1.3
     * @package    WPML
     * @subpackage WPML API
     *
     * @param int    $post_id Post ID
     * @param string $field   Post field
     *
     * @param bool   $field_name
     *
     * @return string or array
     */
    function wpml_get_original_content($post_id, $field, $field_name = \false)
    {
    }
    /**
     *  Get synchronizing taxonomies
     *
     * @since      1.3
     * @package    WPML
     * @subpackage WPML API
     *
     * @param int    $post_id Post ID
     *
     * @param string $tax_name
     *
     * @return array
     */
    function wpml_get_synchronizing_taxonomies($post_id, $tax_name)
    {
    }
    /**
     *  Get synchronizing fields
     *
     * @since 1.3
     * @package WPML
     * @subpackage WPML API
     *
     * @param int    $post_id Post ID
     * @param string $field_name Field name
     * @return array
     */
    function wpml_get_synchronizing_fields($post_id, $field_name)
    {
    }
    function new_duplicated_terms_filter($post_ids, $duplicates_only = \true)
    {
    }
    function display_tax_sync_message($post_id)
    {
    }
    function remove_taxonomy_hierarchy_message()
    {
    }
    /**
     * @return WPML_Notices
     */
    function wpml_get_admin_notices()
    {
    }
    function wpml_validate_language_domain_action()
    {
    }
    function wpml_load_request_handler($is_admin, $active_language_codes, $default_language)
    {
    }
    /**
     * gzdecode implementation
     *
     * @see http://hu.php.net/manual/en/function.gzencode.php#44470
     *
     * @param string $data
     * @param string $filename
     * @param string $error
     * @param int    $maxlength
     * @return string
     */
    function icl_gzdecode($data, &$filename = '', &$error = '', $maxlength = \null)
    {
    }
    function wpml_disable_outdated_plugins()
    {
    }
    function wpml_init_cli()
    {
    }
    function wpml_init_language_switcher()
    {
    }
    function wpml_mlo_init()
    {
    }
    /**
     * @param SitePress $sitepress
     */
    function wpml_loaded($sitepress)
    {
    }
    function wpml_integrations_requirements()
    {
    }
    function wpml_troubleshoot_action_load()
    {
    }
    function wpml_init_language_cookie_settings()
    {
    }
}