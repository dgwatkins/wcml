<?php

namespace {
    class WPML_ST_WCML_Taxonomy_Labels_Translation implements \IWPML_Action
    {
        public function add_hooks()
        {
        }
        /**
         * @param array  $data
         * @param string $taxonomy
         *
         * @return array
         */
        public function alter_slug_translation_display($data, $taxonomy)
        {
        }
        /**
         * @param string $taxonomy
         *
         * @return bool
         */
        private function is_product_attribute($taxonomy)
        {
        }
        /**
         * @param string $taxonomy
         *
         * @return bool
         */
        private function is_shipping_class($taxonomy)
        {
        }
    }
    class WPML_ST_Taxonomy_Labels_Translation implements \IWPML_Action
    {
        const NONCE_TAXONOMY_TRANSLATION = 'wpml_taxonomy_translation_nonce';
        const PRIORITY_GET_LABEL = 10;
        /** @var WPML_ST_Taxonomy_Strings $taxonomy_strings */
        private $taxonomy_strings;
        /** @var WPML_ST_Tax_Slug_Translation_Settings $slug_translation_settings */
        private $slug_translation_settings;
        /** @var WPML_Super_Globals_Validation $super_globals */
        private $super_globals;
        /** @var array $active_languages */
        private $active_languages;
        public function __construct(\WPML_ST_Taxonomy_Strings $taxonomy_strings, \WPML_ST_Tax_Slug_Translation_Settings $slug_translation_settings, \WPML_Super_Globals_Validation $super_globals, array $active_languages)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param string $translation
         * @param string $text
         * @param string $gettext_context
         * @param string $domain
         *
         * @return mixed
         */
        public function block_translation_and_init_strings($translation, $text, $gettext_context, $domain)
        {
        }
        /**
         * @param        $false
         * @param string $taxonomy
         *
         * @return array|null
         */
        public function get_label_translations($false, $taxonomy)
        {
        }
        /**
         * @param WPML_ST_String $string
         *
         * @return array
         */
        private function get_translations(\WPML_ST_String $string)
        {
        }
        /**
         * @param string $lang
         * @param array  $translations
         *
         * @return string|null
         */
        private function get_translation_value($lang, array $translations)
        {
        }
        public function save_label_translations()
        {
        }
        private function has_slug_translation(\WPML_ST_String $slug)
        {
        }
        public function change_taxonomy_strings_language()
        {
        }
        /**
         * @param string $key
         *
         * @return false|string
         */
        private function get_string_var_from_post($key)
        {
        }
        private function check_nonce()
        {
        }
    }
    class WPML_ST_Blog_Name_And_Description_Hooks implements \IWPML_Action
    {
        const STRING_DOMAIN = 'WP';
        const STRING_NAME_BLOGNAME = 'Blog Title';
        const STRING_NAME_BLOGDESCRIPTION = 'Tagline';
        /** @var array $cache */
        private $cache = [];
        /**
         * Detect if ST is not installed on the current blog of multisite
         *
         * @var bool $is_active_on_current_blog
         */
        private $is_active_on_current_blog = \true;
        public function add_hooks()
        {
        }
        /** @return bool */
        private function is_customize_page()
        {
        }
        /**
         * @param string $blogname
         *
         * @return string
         */
        public function option_blogname_filter($blogname)
        {
        }
        /**
         * @param string $blogdescription
         *
         * @return string
         */
        public function option_blogdescription_filter($blogdescription)
        {
        }
        /**
         * @param string $name
         * @param string $value
         *
         * @return string
         */
        private function translate_option($name, $value)
        {
        }
        /**
         * As the translation depends on `WPML_String_Translation::get_current_string_language`,
         * we added this clear cache callback on `wpml_language_has_switched` as done
         * in `WPML_String_Translation::wpml_language_has_switched`.
         */
        public function clear_cache()
        {
        }
        public function switch_blog_action()
        {
        }
        /**
         * @param string string $name
         *
         * Checks whether a given string is to be translated in the Admin back-end.
         * Currently only tagline and title of a site are to be translated.
         * All other admin strings are to always be displayed in the user admin language.
         *
         * @return bool
         */
        public static function is_string($string_name)
        {
        }
    }
    class WPML_ST_Taxonomy_Labels_Translation_Factory implements \IWPML_Backend_Action_Loader, \IWPML_AJAX_Action_Loader
    {
        const AJAX_ACTION_BUILD = 'wpml_get_terms_and_labels_for_taxonomy_table';
        const AJAX_ACTION_SAVE = 'wpml_tt_save_labels_translation';
        const AJAX_ACTION_CHANGE_LANG = 'wpml_tt_change_tax_strings_language';
        const AJAX_ACTION_SET_SLUG_TRANSLATION_ENABLE = 'wpml_tt_set_slug_translation_enabled';
        public function create()
        {
        }
        private function is_taxonomy_translation_table_action()
        {
        }
        private function is_wcml_active()
        {
        }
    }
    class WPML_Autoregister_Save_Strings
    {
        const INSERT_CHUNK_SIZE = 200;
        /**
         * @var wpdb
         */
        private $wpdb;
        /**
         * @var SitePress $sitepress
         */
        private $sitepress;
        /**
         * @var array
         */
        private $data = array();
        /**
         * @var WPML_Language_Of_Domain
         */
        private $lang_of_domain;
        /**
         * @param wpdb $wpdb
         * @param SitePress $sitepress
         * @param WPML_Language_Of_Domain $language_of_domain
         */
        public function __construct(\wpdb $wpdb, \SitePress $sitepress, \WPML_Language_Of_Domain $language_of_domain = \null)
        {
        }
        /**
         * @param $value
         * @param $name
         * @param $domain
         * @param string $gettext_context
         */
        public function save($value, $name, $domain, $gettext_context = '')
        {
        }
        /**
         * @param $name
         * @param $domain
         *
         * @return string
         */
        public function get_source_lang($name, $domain)
        {
        }
        private function persist()
        {
        }
        public function shutdown()
        {
        }
    }
    class WPML_ST_Taxonomy_Strings
    {
        const CONTEXT_GENERAL = 'taxonomy general name';
        const CONTEXT_SINGULAR = 'taxonomy singular name';
        const LEGACY_NAME_PREFIX_GENERAL = 'taxonomy general name: ';
        const LEGACY_NAME_PREFIX_SINGULAR = 'taxonomy singular name: ';
        const LEGACY_STRING_DOMAIN = 'WordPress';
        /** @var WPML_Tax_Slug_Translation_Records $slug_translation_records */
        private $slug_translation_records;
        /** @var WPML_ST_String_Factory $string_factory */
        private $string_factory;
        private $translated_with_gettext_context = array();
        public function __construct(\WPML_Tax_Slug_Translation_Records $slug_translation_records, \WPML_ST_String_Factory $string_factory)
        {
        }
        /**
         * @param string $text
         * @param string $domain
         */
        public function add_to_translated_with_gettext_context($text, $domain)
        {
        }
        /**
         * @param string       $text
         * @param string       $gettext_context
         * @param string       $domain
         * @param false|string $name
         *
         * @return int
         */
        private function find_string_id($text, $gettext_context = '', $domain = '', $name = \false)
        {
        }
        /**
         * @param string       $text
         * @param string       $gettext_context
         * @param string       $domain
         * @param false|string $name
         *
         * @return int
         */
        public function create_string_if_not_exist($text, $gettext_context = '', $domain = '', $name = \false)
        {
        }
        private function get_context($domain, $gettext_context)
        {
        }
        /**
         * @param string $taxonomy_name
         *
         * @return WPML_ST_String[]
         */
        public function get_taxonomy_strings($taxonomy_name)
        {
        }
        /**
         * @param string $value
         * @param string $general_or_singular
         *
         * @return WPML_ST_String|null
         */
        private function get_label_string($value, $general_or_singular)
        {
        }
        /**
         * @param WP_Taxonomy $taxonomy
         *
         * @return WPML_ST_String
         */
        private function get_slug_string($taxonomy)
        {
        }
        /**
         * @param string $value
         * @param string $general_or_singular
         *
         * @return array
         */
        private function get_label_string_details($value, $general_or_singular)
        {
        }
        /**
         * @param string $value
         *
         * @return bool
         */
        private function is_string_translated_with_gettext_context($value)
        {
        }
        /**
         * @param string $value
         *
         * @return string
         */
        private function get_domain_for_taxonomy($value)
        {
        }
    }
    class WPML_TM_Filters
    {
        /** @var array */
        private $string_lang_codes;
        /** @var wpdb */
        private $wpdb;
        /** @var SitePress */
        private $sitepress;
        /**
         * WPML_TM_Filters constructor.
         *
         * @param wpdb $wpdb
         * @param SitePress $sitepress
         */
        public function __construct(\wpdb $wpdb, \SitePress $sitepress)
        {
        }
        /**
         * Filters the active languages to include all languages in which strings exist.
         *
         * @param WPML_Language_Collection $source_langs
         *
         * @return array[]
         */
        public function filter_tm_source_langs(\WPML_Language_Collection $source_langs)
        {
        }
        private function get_string_lang_codes()
        {
        }
        /**
         * This filters the check whether or not a job is assigned to a specific translator for local string jobs.
         * It is to be used after assigning a job, as it will update the assignment for local string jobs itself.
         *
         * @param bool       $assigned_correctly
         * @param string|int $string_translation_id
         * @param int        $translator_id
         * @param string|int $service
         *
         * @return bool
         */
        public function job_assigned_to_filter($assigned_correctly, $string_translation_id, $translator_id, $service)
        {
        }
    }
}
namespace WPML\ST\StringsFilter {
    class TranslationReceiver
    {
        /** @var \wpdb */
        private $wpdb;
        /** @var QueryBuilder $query_builder */
        private $query_builder;
        public function __construct(\wpdb $wpdb, \WPML\ST\StringsFilter\QueryBuilder $query_builder)
        {
        }
        /**
         * @param StringEntity $string
         * @param string       $language
         *
         * @return TranslationEntity
         */
        public function get(\WPML\ST\StringsFilter\StringEntity $string, $language)
        {
        }
    }
    class TranslationEntity
    {
        /** @var string */
        private $value;
        /** @var bool */
        private $hasTranslation;
        /** @var bool */
        private $stringRegistered;
        /**
         * @param string $value
         * @param bool   $hasTranslation
         * @param bool   $stringRegistered
         */
        public function __construct($value, $hasTranslation, $stringRegistered = true)
        {
        }
        /**
         * @return string
         */
        public function getValue()
        {
        }
        /**
         * @return bool
         */
        public function isStringRegistered()
        {
        }
        /**
         * @return bool
         */
        public function hasTranslation()
        {
        }
    }
    class Translator
    {
        /** @var string */
        private $language;
        /** @var TranslationReceiver */
        private $translationReceiver;
        /** @var Translations */
        private $translations;
        /**
         * @param string                $language
         * @param TranslationReceiver   $translationReceiver
         */
        public function __construct($language, \WPML\ST\StringsFilter\TranslationReceiver $translationReceiver)
        {
        }
        /**
         * @param StringEntity $string
         *
         * @return TranslationEntity
         */
        public function translate(\WPML\ST\StringsFilter\StringEntity $string)
        {
        }
    }
    class StringEntity
    {
        /** @var string */
        private $value;
        /** @var string */
        private $name;
        /** @var string */
        private $domain;
        /** @var string */
        private $context;
        /**
         * @param string $value
         * @param string $name
         * @param string $domain
         * @param string $context
         */
        public function __construct($value, $name, $domain, $context = '')
        {
        }
        /**
         * @return string
         */
        public function getValue()
        {
        }
        /**
         * @return string
         */
        public function getName()
        {
        }
        /**
         * @return string
         */
        public function getDomain()
        {
        }
        /**
         * @return string
         */
        public function getContext()
        {
        }
        /**
         * @param array $data
         *
         * @return StringEntity
         */
        public static function fromArray(array $data)
        {
        }
    }
    /**
     * This storage in used internally in "Translations" class. Unfortunately, I cannot use anonymous classes due to PHP Version limitation.
     */
    class TranslationsObjectStorage extends \SplObjectStorage
    {
        /**
         * @param StringEntity $o
         *
         * @return string
         */
        public function getHash($o)
        {
        }
    }
    class Translations
    {
        /** @var \SplObjectStorage */
        private $data;
        public function __construct()
        {
        }
        /**
         * @param StringEntity      $string
         * @param TranslationEntity $translation
         */
        public function add(\WPML\ST\StringsFilter\StringEntity $string, \WPML\ST\StringsFilter\TranslationEntity $translation)
        {
        }
        /**
         * @param StringEntity $string
         *
         * @return TranslationEntity|null
         */
        public function get(\WPML\ST\StringsFilter\StringEntity $string)
        {
        }
    }
    class Provider
    {
        /** @var WPML_String_Translation */
        private $string_translation;
        /** @var WPML_Displayed_String_Filter[]|WPML_Register_String_Filter[] */
        private $filters = [];
        public function __construct(\WPML_String_Translation $string_translation)
        {
        }
        /**
         * Get filter.
         *
         * @param string|null $lang Language.
         * @param string|null $name Language name.
         *
         * @return WPML_Displayed_String_Filter|WPML_Register_String_Filter|null
         */
        public function getFilter($lang = null, $name = null)
        {
        }
        public function clearFilters()
        {
        }
    }
    class QueryBuilder
    {
        /** @var \wpdb */
        private $wpdb;
        /** @var string|null $language */
        private $language;
        /** @var string */
        private $where;
        public function __construct(\wpdb $wpdb)
        {
        }
        /**
         * @param $language
         *
         * @return $this
         */
        public function setLanguage($language)
        {
        }
        /**
         * @param array $domains
         *
         * @return $this
         */
        public function filterByDomains(array $domains)
        {
        }
        /**
         * @param StringEntity $string
         *
         * @return $this
         */
        public function filterByString(\WPML\ST\StringsFilter\StringEntity $string)
        {
        }
        /**
         * @return string
         */
        public function build()
        {
        }
        /**
         * @return string
         */
        private function getSQL()
        {
        }
    }
}
namespace {
    /**
     * Class WPML_Displayed_String_Filter
     *
     * Handles all string translating when rendering translated strings to the user, unless auto-registering is
     * active for strings.
     */
    class WPML_Displayed_String_Filter
    {
        /** @var Translator */
        protected $translator;
        /**
         * @param Translator $translator
         */
        public function __construct(\WPML\ST\StringsFilter\Translator $translator)
        {
        }
        /**
         * Translate by name and context.
         *
         * @param string       $untranslated_text Untranslated text.
         * @param string       $name Name of the string.
         * @param string|array $context Context.
         * @param null|boolean $has_translation If string has translation.
         *
         * @return string
         */
        public function translate_by_name_and_context($untranslated_text, $name, $context = '', &$has_translation = \null)
        {
        }
        /**
         * Transform translation parameters.
         *
         * @param string       $name Name of the string.
         * @param string|array $context Context.
         *
         * @return array
         */
        protected function transform_parameters($name, $context)
        {
        }
        /**
         * Truncates a string to the maximum string table column width.
         *
         * @param string $string String to translate.
         *
         * @return string
         */
        public static function truncate_long_string($string)
        {
        }
        /**
         * Get translation of the string.
         *
         * @param string       $untranslated_text Untranslated text.
         * @param string       $name Name of the string.
         * @param string|array $context Context.
         *
         * @return TranslationEntity
         */
        protected function get_translation($untranslated_text, $name, $context)
        {
        }
    }
    /**
     * Class WPML_Register_String_Filter
     */
    class WPML_Register_String_Filter extends \WPML_Displayed_String_Filter
    {
        /**
         * WP DB instance.
         *
         * @var wpdb
         */
        protected $wpdb;
        /** @var SitePress */
        protected $sitepress;
        /**
         * @var array
         */
        private $excluded_contexts = array();
        /**
         * @var WPML_WP_Cache
         */
        private $registered_string_cache;
        /** @var  WPML_ST_String_Factory $string_factory */
        private $string_factory;
        /**
         * @var WPML_Autoregister_Save_Strings
         */
        private $save_strings;
        // Current string data.
        protected $name;
        protected $domain;
        protected $gettext_context;
        protected $name_and_gettext_context;
        protected $key;
        /** @var bool $block_save_strings */
        private $block_save_strings = \false;
        /**
         * @param wpdb                                $wpdb
         * @param SitePress                           $sitepress
         * @param WPML_ST_String_Factory              $string_factory
         * @param Translator                          $translator
         * @param array                               $excluded_contexts
         * @param WPML_Autoregister_Save_Strings|null $save_strings
         */
        public function __construct($wpdb, \SitePress $sitepress, &$string_factory, \WPML\ST\StringsFilter\Translator $translator, array $excluded_contexts = array(), \WPML_Autoregister_Save_Strings $save_strings = \null)
        {
        }
        public function translate_by_name_and_context($untranslated_text, $name, $context = '', &$has_translation = \null)
        {
        }
        private function can_register_string($original_value, $name, $context)
        {
        }
        public function force_saving_of_autoregistered_strings()
        {
        }
        public function register_string($context, $name, $value, $allow_empty_value = \false, $source_lang = '')
        {
        }
        /**
         * @param string $domain
         * @param string $context
         * @param string $name
         *
         * @return array|false
         */
        private function get_registered_string($domain, $context, $name)
        {
        }
        private function save_string($value, $allow_empty_value, $language, $domain, $context, $name)
        {
        }
        /**
         * @param array $args
         *
         * @return int
         */
        private function handle_db_error_and_resave_string(array $args)
        {
        }
        /**
         * @param array $args
         *
         * @return int
         */
        private function get_string_id_registered_in_concurrent_request(array $args)
        {
        }
        /**
         * @param string          $name
         * @param string|string[] $context
         */
        protected function initialize_current_string($name, $context)
        {
        }
        /**
         * @param string          $name
         * @param string|string[] $context
         *
         * @return array
         */
        protected function truncate_name_and_context($name, $context)
        {
        }
        protected function key_by_name_and_context($name, $context)
        {
        }
        /**
         * @return WPML_Autoregister_Save_Strings
         */
        private function get_save_strings()
        {
        }
        /**
         * @param string $domain
         *
         * @return WPML_WP_Cache
         */
        private function get_domain_cache($domain)
        {
        }
    }
    /**
     * WPML_ST_String class
     *
     * Low level access to string in Database
     *
     * NOTE: Don't use this class to process a large amount of strings as it doesn't
     * do any caching, etc.
     *
     */
    class WPML_ST_String
    {
        protected $wpdb;
        private $string_id;
        /** @var  string $language */
        private $language;
        /** @var  int $status */
        private $status;
        /** @var array|null */
        private $string_properties;
        /**
         * @param int $string_id
         * @param wpdb $wpdb
         */
        public function __construct($string_id, \wpdb $wpdb)
        {
        }
        /**
         * @return int
         */
        public function string_id()
        {
        }
        /**
         * @return string|null
         */
        public function get_language()
        {
        }
        /**
         * @return string
         */
        public function get_value()
        {
        }
        /**
         * @return int
         */
        public function get_status()
        {
        }
        /**
         * @param string $language
         */
        public function set_language($language)
        {
        }
        /**
         * @return stdClass[]
         */
        public function get_translation_statuses()
        {
        }
        public function get_translations()
        {
        }
        /**
         * For a bulk update of all strings:
         * @see WPML_ST_Bulk_Update_Strings_Status::run
         */
        public function update_status()
        {
        }
        /**
         * @param array  $translations
         * @param array  $active_languages
         * @param string $string_language
         *
         * @return bool
         */
        private function has_less_translations_than_secondary_languages(array $translations, array $active_languages, $string_language)
        {
        }
        /**
         * @param string          $language
         * @param string|null     $value
         * @param int|bool|false  $status
         * @param int|null        $translator_id
         * @param string|int|null $translation_service
         * @param int|null        $batch_id
         *
         * @return bool|int id of the translation
         */
        public function set_translation($language, $value = \null, $status = \false, $translator_id = \null, $translation_service = \null, $batch_id = \null)
        {
        }
        public function set_location($location)
        {
        }
        /**
         * Set string wrap tag.
         * Used for SEO significance, can contain values as h1 ... h6, etc.
         *
         * @param string $wrap Wrap tag.
         */
        public function set_wrap_tag($wrap_tag)
        {
        }
        /**
         * @param string $property
         * @param mixed  $value
         */
        protected function set_property($property, $value)
        {
        }
        /**
         * @param bool $translations sets whether to use original or translations table
         *
         * @return string
         */
        protected function from_where_snippet($translations = \false)
        {
        }
        public function exists()
        {
        }
        /** @return string|null */
        public function get_context()
        {
        }
        /** @return string|null */
        public function get_gettext_context()
        {
        }
        /** @return string|null */
        public function get_name()
        {
        }
        private function get_string_properties()
        {
        }
    }
}
namespace WPML\ST\Gettext\Filters {
    interface IFilter
    {
        /**
         * @param string       $translation
         * @param string       $text
         * @param string|array $domain
         * @param string|false $name
         *
         * @return string
         */
        public function filter($translation, $text, $domain, $name = false);
    }
    class StringTranslation implements \WPML\ST\Gettext\Filters\IFilter
    {
        /** @var Settings $settings */
        private $settings;
        public function __construct(\WPML\ST\Gettext\Settings $settings)
        {
        }
        /**
         * @param string       $translation
         * @param string       $text
         * @param string|array $domain
         * @param string|false $name
         *
         * @return string
         */
        public function filter($translation, $text, $domain, $name = false)
        {
        }
    }
    class StringTracking implements \WPML\ST\Gettext\Filters\IFilter
    {
        /**
         * @param string       $translation
         * @param string       $text
         * @param string|array $domain
         * @param string|false $name
         *
         * @return string
         */
        public function filter($translation, $text, $domain, $name = false)
        {
        }
        /**
         * @return bool
         */
        public function canTrackStrings()
        {
        }
    }
    class StringHighlighting implements \WPML\ST\Gettext\Filters\IFilter
    {
        /** @var Settings $settings */
        private $settings;
        public function __construct(\WPML\ST\Gettext\Settings $settings)
        {
        }
        /**
         * @param string       $translation
         * @param string       $text
         * @param string|array $domain
         * @param string|false $name
         *
         * @return string
         */
        public function filter($translation, $text, $domain, $name = false)
        {
        }
        /**
         * @param string $domain
         * @param string $text
         *
         * @return bool
         */
        private function isHighlighting($domain, $text)
        {
        }
    }
}
namespace WPML\ST\Gettext {
    /**
     * Class WPML\ST\Gettext\Hooks
     */
    class Hooks implements \IWPML_Action
    {
        /** @var Filters\IFilter[] $filters */
        private $filters = [];
        /**
         * @var SitePress SitePress
         */
        private $sitepress;
        /**
         * @var array
         */
        private $string_cache = [];
        /**
         * @var string|null
         */
        private $lang;
        public function __construct(\SitePress $sitepress)
        {
        }
        /**
         * Init hooks.
         */
        public function add_hooks()
        {
        }
        public function addFilter(\WPML\ST\Gettext\Filters\IFilter $filter)
        {
        }
        public function clearFilters()
        {
        }
        /**
         * @param string $lang
         */
        public function switch_language_hook($lang)
        {
        }
        /**
         * @deprecated since WPML ST 3.0.0
         */
        public function clear_filters()
        {
        }
        /**
         * Init gettext hooks.
         */
        public function init_gettext_hooks()
        {
        }
        /**
         * @param string       $translation
         * @param string       $text
         * @param string|array $domain
         * @param string|false $name Deprecated since WPML ST 3.0.0 (the name should be automatically created as a hash)
         *
         * @return string
         * @throws Auryn\InjectionException Auryn Exception.
         */
        public function gettext_filter($translation, $text, $domain, $name = false)
        {
        }
        /**
         * @param string $translation
         * @param string $text
         * @param string $context
         * @param string $domain
         *
         * @return string
         * @throws Auryn\InjectionException Auryn Exception.
         */
        public function gettext_with_context_filter($translation, $text, $context, $domain)
        {
        }
        /**
         * @param string       $translation
         * @param string       $single
         * @param string       $plural
         * @param string       $number
         * @param string|array $domain
         * @param string|false $context
         *
         * @return string
         * @throws Auryn\InjectionException Auryn Exception.
         */
        public function ngettext_filter($translation, $single, $plural, $number, $domain, $context = false)
        {
        }
        /**
         * @param string $translation
         * @param string $single
         * @param string $plural
         * @param string $number
         * @param string $context
         * @param string $domain
         *
         * @return string
         * @throws Auryn\InjectionException Auryn Exception.
         *
         */
        public function ngettext_with_context_filter($translation, $single, $plural, $number, $context, $domain)
        {
        }
    }
    class Settings
    {
        /** @var SitePress $sitepress */
        private $sitepress;
        /** @var AutoRegisterSettings $auto_register_settings */
        private $auto_register_settings;
        public function __construct(\SitePress $sitepress, \WPML\ST\Gettext\AutoRegisterSettings $auto_register_settings)
        {
        }
        /** @return bool */
        public function isTrackStringsEnabled()
        {
        }
        /** @return string */
        public function getTrackStringColor()
        {
        }
        /** @return bool */
        public function isAutoRegistrationEnabled()
        {
        }
        /**
         * @param string $domain
         *
         * @return bool
         */
        public function isDomainRegistrationExcluded($domain)
        {
        }
        /**
         * @param string $key
         * @param mixed  $default
         *
         * @return mixed|null
         */
        private function getSTSetting($key, $default = null)
        {
        }
    }
    class AutoRegisterSettings
    {
        const KEY_EXCLUDED_DOMAINS = 'wpml_st_auto_reg_excluded_contexts';
        const KEY_ENABLED = 'auto_register_enabled';
        const RESET_AUTOLOAD_TIMEOUT = 2 * HOUR_IN_SECONDS;
        /**
         * @var wpdb $wpdb
         */
        protected $wpdb;
        /**
         * @var WPML_ST_Settings
         */
        private $settings;
        /**
         * @var Domains
         */
        private $package_domains;
        /**
         * @var array
         */
        private $excluded_domains;
        public function __construct(\wpdb $wpdb, \WPML_ST_Settings $settings, \WPML\ST\Package\Domains $package_domains)
        {
        }
        /** @return bool */
        public function isEnabled()
        {
        }
        /**
         * @return int number of seconds before auto-disable
         */
        public function getTimeToAutoDisable()
        {
        }
        /**
         * @param string $key
         * @param mixed  $default
         *
         * @return mixed|null
         */
        private function getSetting($key, $default = null)
        {
        }
        /**
         * @return array
         */
        public function getExcludedDomains()
        {
        }
        /**
         * @param string $domain
         *
         * @return bool
         */
        public function isExcludedDomain($domain)
        {
        }
        /**
         * @return array
         * @todo: Remove this method, looks like dead code.
         */
        public function get_included_contexts()
        {
        }
        /**
         * @return array
         */
        public function getAllDomains()
        {
        }
        /**
         * @param string $domain
         *
         * @return bool
         */
        public function isAdminOrPackageDomain($domain)
        {
        }
        /**
         * @return array
         */
        public function getDomainsAndTheirExcludeStatus()
        {
        }
        public function saveExcludedContexts()
        {
        }
        /** @return string */
        public function getFeatureEnabledDescription()
        {
        }
        /** @return string */
        public function getFeatureDisabledDescription()
        {
        }
    }
    class HooksFactory implements \IWPML_Backend_Action_Loader, \IWPML_Frontend_Action_Loader
    {
        const TRACK_PARAM_TEXT = 'icl_string_track_value';
        const TRACK_PARAM_DOMAIN = 'icl_string_track_context';
        /**
         * @return \IWPML_Action|Hooks|null
         * @throws \Auryn\InjectionException
         */
        public function create()
        {
        }
        /**
         * @return Filters\IFilter[]
         * @throws \Auryn\InjectionException
         */
        private function getFilters()
        {
        }
        /**
         * @param Settings $settings
         *
         * @return bool
         */
        private function isTrackingStrings(\WPML\ST\Gettext\Settings $settings)
        {
        }
        /**
         * @return bool
         */
        private function isHighlightingStrings()
        {
        }
    }
}
namespace WPML\ST\Basket {
    class Status
    {
        public static function add(array $translations, $languages)
        {
        }
        private static function addWithProvider(array $translations, $languages, callable $statusProvider)
        {
        }
    }
}
namespace WPML\ST\Batch\Translation {
    class Hooks
    {
        public static function addHooks(callable $getBatchId, callable $setBatchRecord, callable $getBatchRecord, callable $getString)
        {
        }
        public static function addStringTranslationStatusHooks(callable $updateTranslationStatus, callable $initializeTranslation)
        {
        }
    }
    /**
     * @method static callable|void installSchema( ...$wpdb ) :: wpdb → void
     * @method static callable|int get( ...$wpdb, ...$batchId ) :: wpdb → int → [int]
     * @method static callable|void set( ...$wpdb, ...$batchId, ...$stringId ) :: wpdb → int → int → void
     */
    class Records
    {
        use \WPML\FP\Curryable;
        /** @var string */
        public static $string_batch_sql_prototype = '
	CREATE TABLE IF NOT EXISTS `%sicl_string_batches` (
	  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
	  `string_id` bigint(20) unsigned NOT NULL,
	  `batch_id` bigint(20) unsigned NOT NULL,
	  PRIMARY KEY (`id`)
		)
	';
    }
    /**
     * Class Strings
     * @package WPML\ST\Batch\Translation
     * @method static callable|object get( ...$getBatchRecord, ...$getString, ...$item, ...$id, ...$type )
     */
    class Strings
    {
        use \WPML\Collect\Support\Traits\Macroable;
        public static function init()
        {
        }
    }
    /**
     * Class Module
     * @package WPML\ST\Batch\Translation
     * @method static callable|string getString( ...$id ) :: int → string
     * @method static callable getBatchId() :: ( string → int )
     * @method static callable|void batchStringsStorage( ...$records, ...$batchId, ...$stringId, ...$sourceLang ) :: Records → int → int → string → void
     * @method static callable|void setBatchLanguage( ...$batchId, ...$sourceLang ) :: int → string → void
     */
    class Module
    {
        use \WPML\Collect\Support\Traits\Macroable;
        const EXTERNAL_TYPE = 'st-batch_strings';
        const STRING_ID_PREFIX = 'batch-string-';
        public static function init()
        {
        }
    }
    class Status
    {
        public static function add(array $translations, $languages)
        {
        }
        public static function getStatuses(\wpdb $wpdb, $batches)
        {
        }
        public static function getStatusesOfBatch(\wpdb $wpdb, $batchId)
        {
        }
    }
    /**
     * Class StringTranslations
     * @package WPML\ST\Batch\Translation
     * @method static callable|void save( ...$element_type_prefix, ...$job, ...$decoder ) :: string → object → ( string → string → string ) → void
     * @method static callable|void addExisting( ...$prevTranslations, ...$package, ...$lang ) :: [WPML_TM_Translated_Field] → object → string → [WPML_TM_Translated_Field]
     * @method static callable|bool isTranslated( ...$field ) :: object → bool
     * @method static callable|bool isBatchId( ...$str ) :: string → bool
     * @method static callable|bool isBatchField( ...$field ) :: object → bool
     * @method static callable|string decodeStringId( ...$str ) :: string → string
     * @method static callable|void markTranslationsAsInProgress( ...$getJobStatus, ...$hasTranslation, ...$addTranslation, ...$post, ...$element) :: callable -> callable -> callable -> WPML_TM_Translation_Batch_Element -> \stdClass -> void
     * @method static callable|void cancelTranslations(...$job) :: \WPML_TM_Job_Entity -> void
     * @method static callable|void updateStatus(...$element_type_prefix, ...$job) :: string -> \stdClass -> void
     */
    class StringTranslations
    {
        use \WPML\Collect\Support\Traits\Macroable;
        public static function init()
        {
        }
    }
    /**
     * Class Convert
     * @package WPML\ST\Batch\Translation
     * @method static callable|array toBatchElements( ...$getBatchId, ...$setBatchRecord, ...$elements, ...$basketName ) :: ( string → int ) → ( int → int → string ) → [WPML_TM_Translation_Batch_Element] → string → [WPML_TM_Translation_Batch_Element]
     */
    class Convert
    {
        use \WPML\Collect\Support\Traits\Macroable;
        public static function init()
        {
        }
    }
}
namespace {
    interface IWPML_St_Upgrade_Command
    {
        public function run();
        public function run_ajax();
        public function run_frontend();
        public static function get_command_id();
    }
    /**
     * WPML_ST_Upgrade_DB_Longtext_String_Value class file.
     *
     * @package wpml-string-translation
     */
    /**
     * Class WPML_ST_Upgrade_DB_Longtext_String_Value
     */
    class WPML_ST_Upgrade_DB_Longtext_String_Value implements \IWPML_St_Upgrade_Command
    {
        /**
         * WP db instance.
         *
         * @var wpdb
         */
        private $wpdb;
        /**
         * WPML_ST_Upgrade_DB_Longtext_String_Value constructor.
         *
         * @param wpdb $wpdb WP db instance.
         */
        public function __construct(\wpdb $wpdb)
        {
        }
        /**
         * Run upgrade.
         *
         * @return bool
         */
        public function run()
        {
        }
        /**
         * Run upgrade in ajax.
         *
         * @return bool
         */
        public function run_ajax()
        {
        }
        /**
         * Run upgrade on frontend.
         *
         * @return bool
         */
        public function run_frontend()
        {
        }
        /**
         * Get command id.
         *
         * @return string
         */
        public static function get_command_id()
        {
        }
    }
    /**
     * Class WPML_ST_Upgrade_Command_Factory
     */
    class WPML_ST_Upgrade_Command_Factory
    {
        /**
         * WP db instance.
         *
         * @var wpdb wpdb
         */
        private $wpdb;
        /**
         * SitePress instance.
         *
         * @var SitePress
         */
        private $sitepress;
        /**
         * WPML_ST_Upgrade_Command_Factory constructor.
         *
         * @param wpdb      $wpdb WP db instance.
         * @param SitePress $sitepress SitePress instance.
         */
        public function __construct(\wpdb $wpdb, \SitePress $sitepress)
        {
        }
        /**
         * Create upgrade commands.
         *
         * @param string $class_name Name of upgrade command class.
         *
         * @throws WPML_ST_Upgrade_Command_Not_Found_Exception Exception when command not found.
         * @return IWPML_St_Upgrade_Command
         */
        public function create($class_name)
        {
        }
    }
    /**
     * WPML_ST_Upgrade class file.
     *
     * @package wpml-string-translation
     */
    /**
     * Class WPML_ST_Upgrade
     */
    class WPML_ST_Upgrade
    {
        const TRANSIENT_UPGRADE_IN_PROGRESS = 'wpml_st_upgrade_in_progress';
        /**
         * SitePress instance.
         *
         * @var SitePress $sitepress
         */
        private $sitepress;
        /**
         * Upgrade Command Factory instance.
         *
         * @var  WPML_ST_Upgrade_Command_Factory
         */
        private $command_factory;
        /**
         * Upgrade in progress flag.
         *
         * @var bool $upgrade_in_progress
         */
        private $upgrade_in_progress;
        /**
         * WPML_ST_Upgrade constructor.
         *
         * @param SitePress                            $sitepress SitePress instance.
         * @param WPML_ST_Upgrade_Command_Factory|null $command_factory Upgrade Command Factory instance.
         */
        public function __construct(\SitePress $sitepress, \WPML_ST_Upgrade_Command_Factory $command_factory = \null)
        {
        }
        /**
         * Run upgrade.
         */
        public function run()
        {
        }
        /**
         * Add hooks.
         */
        public function add_hooks()
        {
        }
        /**
         * Run ST db cache command.
         */
        public function run_st_db_cache_command()
        {
        }
        /**
         * Run admin.
         */
        private function run_admin()
        {
        }
        /**
         * Run ajax.
         */
        private function run_ajax()
        {
        }
        /**
         * Run on frontend.
         */
        private function run_front_end()
        {
        }
        /**
         * Maybe run command.
         *
         * @param string $class Command class name.
         */
        private function maybe_run($class)
        {
        }
        /**
         * Maybe run command in ajax.
         *
         * @param string $class Command class name.
         */
        private function maybe_run_ajax($class)
        {
        }
        /**
         * Run command in ajax.
         *
         * @param string $class Command class name.
         */
        private function run_ajax_command($class)
        {
        }
        /**
         * Check nonce.
         *
         * @param string $class Command class name.
         *
         * @return bool
         */
        private function nonce_ok($class)
        {
        }
        /**
         * Check if command was executed.
         *
         * @param string $class Command class name.
         *
         * @return bool
         */
        public function has_command_been_executed($class)
        {
        }
        /**
         * Mark command as executed.
         *
         * @param string $class Command class name.
         */
        public function mark_command_as_executed($class)
        {
        }
        /**
         * Filter nonce.
         *
         * @return mixed
         */
        protected function filter_nonce_parameter()
        {
        }
        /**
         * Set flag that upgrade is in process.
         */
        private function set_upgrade_in_progress()
        {
        }
        /**
         * Mark upgrade as completed.
         */
        private function set_upgrade_completed()
        {
        }
    }
    class WPML_ST_Upgrade_String_Index
    {
        /** @var wpdb */
        private $wpdb;
        const OPTION_NAME = 'wpml_string_table_ok_for_mo_import';
        /**
         * @param wpdb $wpdb
         */
        public function __construct(\wpdb $wpdb)
        {
        }
        public function is_uc_domain_name_context_index_unique()
        {
        }
    }
    class WPML_ST_Upgrade_Db_Cache_Command implements \IWPML_St_Upgrade_Command
    {
        /** @var WPDB $wpdb */
        private $wpdb;
        /**
         * @var string
         */
        private $icl_string_pages_sql_prototype = '
	CREATE TABLE IF NOT EXISTS `%sicl_string_pages` (
	  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
	  `string_id` bigint(20) unsigned NOT NULL,
	  `url_id` bigint(20) unsigned NOT NULL,
	  PRIMARY KEY (`id`),
	  KEY `string_to_url_id` (`url_id`),
	  INDEX ( `string_id` )
		)
	';
        /**
         * @var string
         */
        private $icl_string_urls_sql_prototype = '
	CREATE TABLE IF NOT EXISTS `%sicl_string_urls` (
	  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
	  `language` varchar(7) %s DEFAULT NULL,
	  `url` varchar(255) DEFAULT NULL,
	  PRIMARY KEY (`id`),
	  UNIQUE KEY `string_string_lang_url` (`language`,`url`(191))
	)
	';
        /**
         * @param WPDB $wpdb
         */
        public function __construct($wpdb)
        {
        }
        public function run()
        {
        }
        public function run_ajax()
        {
        }
        public function run_frontend()
        {
        }
        /**
         * @return string
         */
        public static function get_command_id()
        {
        }
        /**
         * @return string
         */
        private function get_charset_collate()
        {
        }
        private function get_language_charset_and_collation()
        {
        }
    }
    class WPML_ST_Repair_Strings_Schema
    {
        const OPTION_HAS_RUN = 'wpml_st_repair_string_schema_has_run';
        /** @var IWPML_St_Upgrade_Command $upgrade_command */
        private $upgrade_command;
        /** @var WPML_Notices $notices */
        private $notices;
        /** @var array $args */
        private $args;
        /** @var string $db_error */
        private $db_error;
        /** @var array $has_run */
        private $has_run = array();
        public function __construct(\WPML_Notices $notices, array $args, $db_error)
        {
        }
        public function set_command(\IWPML_St_Upgrade_Command $upgrade_command)
        {
        }
        /** @return bool */
        public function run()
        {
        }
        /** @return bool */
        private function run_upgrade_command()
        {
        }
        private function get_command_id()
        {
        }
        /** @return bool */
        private function acquire_lock()
        {
        }
        private function release_lock()
        {
        }
        private function add_notice()
        {
        }
    }
    class WPML_ST_Upgrade_DB_String_Name_Index implements \IWPML_St_Upgrade_Command
    {
        /** @var wpdb */
        private $wpdb;
        /**
         * @param wpdb $wpdb
         */
        public function __construct(\wpdb $wpdb)
        {
        }
        public function run()
        {
        }
        public function run_ajax()
        {
        }
        public function run_frontend()
        {
        }
        public static function get_command_id()
        {
        }
    }
    class WPML_ST_Upgrade_Migrate_Originals implements \IWPML_St_Upgrade_Command
    {
        /** @var wpdb $wpdb */
        private $wpdb;
        /** @var SitePress sitepress */
        private $sitepress;
        private $translations = array();
        private $not_translated = array();
        private $active_languages;
        public function __construct(\wpdb $wpdb, \SitePress $sitepress)
        {
        }
        public static function get_command_id()
        {
        }
        public function run()
        {
        }
        function update_message()
        {
        }
        public function run_ajax()
        {
        }
        public function run_frontend()
        {
        }
        private function is_migration_required()
        {
        }
        private function get_strings_without_translations()
        {
        }
        private function get_originals_with_translations()
        {
        }
        private function migrate_translations()
        {
        }
    }
    class WPML_ST_Upgrade_DB_String_Packages_Word_Count implements \IWPML_St_Upgrade_Command
    {
        /** @var WPML_Upgrade_Schema $upgrade_schema */
        private $upgrade_schema;
        public function __construct(\WPML_Upgrade_Schema $upgrade_schema)
        {
        }
        public function run()
        {
        }
        public function run_ajax()
        {
        }
        public function run_frontend()
        {
        }
        /**
         * @return string
         */
        public static function get_command_id()
        {
        }
    }
    /**
     * Class WPML_ST_Upgrade_DB_String_Packages
     */
    class WPML_ST_Upgrade_DB_String_Packages implements \IWPML_St_Upgrade_Command
    {
        private $wpdb;
        /**
         * WPML_ST_Upgrade_DB_String_Packages constructor.
         *
         * @param WPDB $wpdb
         */
        public function __construct(\WPDB $wpdb)
        {
        }
        public function run()
        {
        }
        public function run_ajax()
        {
        }
        public function run_frontend()
        {
        }
        /**
         * @return string
         */
        public static function get_command_id()
        {
        }
    }
    class WPML_ST_Upgrade_Command_Not_Found_Exception extends \InvalidArgumentException
    {
        /**
         * @param string $class_name
         * @param int $code
         * @param Exception $previous
         */
        public function __construct($class_name, $code = 0, \Exception $previous = \null)
        {
        }
    }
}
namespace WPML\ST\Upgrade\Command {
    class RegenerateMoFilesWithStringNames implements \IWPML_St_Upgrade_Command
    {
        const WPML_VERSION_FOR_THIS_COMMAND = '4.3.4';
        /** @var Status $status */
        private $status;
        /** @var SingleSiteProcess $singleProcess */
        private $singleProcess;
        /**
         * @param Status            $status
         * @param SingleSiteProcess $singleProcess We use run the single site process because
         *                                         the migration command runs once per site.
         */
        public function __construct(\WPML\ST\MO\Generate\Process\Status $status, \WPML\ST\MO\Generate\Process\SingleSiteProcess $singleProcess)
        {
        }
        public function run()
        {
        }
        /**
         * @return bool
         */
        private function hasWpmlStartedBeforeThisCommand()
        {
        }
        public function run_ajax()
        {
        }
        public function run_frontend()
        {
        }
        public static function get_command_id()
        {
        }
    }
}
namespace {
    class WPML_ST_Upgrade_MO_Scanning implements \IWPML_St_Upgrade_Command
    {
        /** @var WPDB $wpdb */
        private $wpdb;
        private static $sql = "\n\t\tCREATE TABLE `PREFIXicl_mo_files_domains` (\n\t\t  `id` int(11) PRIMARY KEY NOT NULL AUTO_INCREMENT,\n\t\t  `file_path` varchar(250) NOT NULL,\n\t\t  `file_path_md5` varchar(32) NOT NULL,\n\t\t  `domain` varchar(160) NOT NULL,\n\t\t  `status` varchar(20) NOT NULL DEFAULT %s,\n\t\t  `num_of_strings` int(11) NOT NULL DEFAULT '0',\n\t\t  `last_modified` int(11) NOT NULL,\n\t\t  `component_type` enum('plugin','theme','other') NOT NULL DEFAULT 'other',\n  \t\t  `component_id` varchar(100) DEFAULT NULL,\n\t\t  UNIQUE KEY `file_path_md5_UNIQUE` (`file_path_md5`)\n\t\t)\n\t";
        /**
         * @param WPDB $wpdb
         */
        public function __construct(\WPDB $wpdb)
        {
        }
        public function run()
        {
        }
        private function create_table()
        {
        }
        private function add_mo_value_field_if_does_not_exist()
        {
        }
        public function run_ajax()
        {
        }
        public function run_frontend()
        {
        }
        public static function get_command_id()
        {
        }
        /**
         * @return string
         */
        private function get_charset_collate()
        {
        }
    }
    class WPML_ST_Upgrade_Display_Strings_Scan_Notices implements \IWPML_St_Upgrade_Command
    {
        /** @var WPML_ST_Themes_And_Plugins_Settings */
        private $settings;
        /**
         * WPML_ST_Upgrade_Display_Strings_Scan_Notices constructor.
         *
         * @param WPML_ST_Themes_And_Plugins_Settings $settings
         */
        public function __construct(\WPML_ST_Themes_And_Plugins_Settings $settings)
        {
        }
        public static function get_command_id()
        {
        }
        public function run()
        {
        }
        public function run_ajax()
        {
        }
        public function run_frontend()
        {
        }
        private function maybe_add_missing_setting()
        {
        }
    }
    class WPML_ST_Upgrade_DB_Strings_Add_Translation_Priority_Field implements \IWPML_St_Upgrade_Command
    {
        /** @var wpdb */
        private $wpdb;
        /**
         * @param wpdb $wpdb
         */
        public function __construct(\wpdb $wpdb)
        {
        }
        public function run()
        {
        }
        public function run_ajax()
        {
        }
        public function run_frontend()
        {
        }
        public static function get_command_id()
        {
        }
    }
    class WPML_ST_ICL_Strings extends \WPML_WPDB_User
    {
        private $table = 'icl_strings';
        private $string_id = 0;
        /**
         * WPML_TM_ICL_Strings constructor.
         *
         * @param wpdb $wpdb
         * @param int  $string_id
         */
        public function __construct(&$wpdb, $string_id)
        {
        }
        /**
         * @param array $args in the same format used by \wpdb::update()
         *
         * @return $this
         */
        public function update($args)
        {
        }
        /**
         * @return string
         */
        public function value()
        {
        }
        /**
         * @return string
         */
        public function language()
        {
        }
        /**
         * @return int
         */
        public function status()
        {
        }
    }
    class WPML_ST_Records
    {
        /** @var wpdb $wpdb */
        public $wpdb;
        /**
         * @param wpdb $wpdb
         */
        public function __construct(\wpdb $wpdb)
        {
        }
        /** @retur wpdb */
        public function get_wpdb()
        {
        }
        /**
         * @param int $string_id
         *
         * @return WPML_ST_ICL_Strings
         */
        public function icl_strings_by_string_id($string_id)
        {
        }
        /**
         * @param int    $string_id
         * @param string $language_code
         *
         * @return WPML_ST_ICL_String_Translations
         */
        public function icl_string_translations_by_string_id_and_language($string_id, $language_code)
        {
        }
    }
    class WPML_ST_ICL_String_Translations extends \WPML_WPDB_User
    {
        private $table = 'icl_string_translations';
        private $string_id = 0;
        private $lang_code;
        private $id;
        /**
         * WPML_ST_ICL_String_Translations constructor.
         *
         * @param wpdb   $wpdb
         * @param int    $string_id
         * @param string $lang_code
         */
        public function __construct(&$wpdb, $string_id, $lang_code)
        {
        }
        /**
         * @return int|string
         */
        public function translator_id()
        {
        }
        /**
         * @return string
         */
        public function value()
        {
        }
        /**
         * @return int
         */
        public function id()
        {
        }
    }
}
namespace WPML\ST\MO\JustInTime {
    class MO extends \MO
    {
        /** @var LoadedMODictionary $loaded_mo_dictionary */
        private $loaded_mo_dictionary;
        /** @var string $locale */
        protected $locale;
        /** @var string $domain */
        private $domain;
        /** @var bool $isLoading */
        private $isLoading = false;
        /**
         * @param LoadedMODictionary $loaded_mo_dictionary
         * @param string             $locale
         * @param string             $domain
         */
        public function __construct(\WPML\ST\MO\LoadedMODictionary $loaded_mo_dictionary, $locale, $domain)
        {
        }
        /**
         * @param string $singular
         * @param string $context
         *
         * @return string
         */
        public function translate($singular, $context = null)
        {
        }
        /**
         * @param string $singular
         * @param string $plural
         * @param int    $count
         * @param string $context
         *
         * @return string
         */
        public function translate_plural($singular, $plural, $count, $context = null)
        {
        }
        private function load()
        {
        }
        protected function loadTextDomain()
        {
        }
        /**
         * In some cases, themes or plugins are hooking on
         * `override_load_textdomain` so that the function
         * `load_textdomain` always returns `true` even
         * if the domain is not set on the global `$l10n`.
         *
         * That's why we need to check on the global `$l10n`.
         *
         * @return bool
         */
        private function isLoaded()
        {
        }
    }
    class DefaultMO extends \WPML\ST\MO\JustInTime\MO
    {
        public function __construct(\WPML\ST\MO\LoadedMODictionary $loaded_mo_dictionary, $locale)
        {
        }
        protected function loadTextDomain()
        {
        }
    }
    class MOFactory
    {
        /** @var LoadedMODictionary $loaded_mo_dictionary */
        private $loaded_mo_dictionary;
        public function __construct(\WPML\ST\MO\LoadedMODictionary $loaded_mo_dictionary)
        {
        }
        /**
         * We need to rely on the loaded dictionary rather than `$GLOBALS['l10n]`
         * because a domain could have been loaded in a language that
         * does not have a MO file and so it won't be added to the `$GLOBALS['l10n]`.
         *
         * @param string $locale
         * @param array  $excluded_domains
         * @param array  $cachedMoObjects
         *
         * @return array
         */
        public function get($locale, array $excluded_domains, array $cachedMoObjects)
        {
        }
    }
}
namespace WPML\ST\MO {
    class Plural implements \IWPML_Backend_Action, \IWPML_Frontend_Action
    {
        public function add_hooks()
        {
        }
        /**
         * @param string $translation Translated text.
         * @param string $single      The text to be used if the number is singular.
         * @param string $plural      The text to be used if the number is plural.
         * @param string $number      The number to compare against to use either the singular or plural form.
         * @param string $domain      Text domain. Unique identifier for retrieving translated strings.
         *
         * @return string
         */
        public function handle_plural($translation, $single, $plural, $number, $domain)
        {
        }
        /**
         * @param string $translation Translated text.
         * @param string $single      The text to be used if the number is singular.
         * @param string $plural      The text to be used if the number is plural.
         * @param string $number      The number to compare against to use either the singular or plural form.
         * @param string $context     Context information for the translators.
         * @param string $domain      Text domain. Unique identifier for retrieving translated strings.
         *
         * @return string
         */
        public function handle_plural_with_context($translation, $single, $plural, $number, $context, $domain)
        {
        }
        private function get_translation($translation, $single, $plural, $number, $callback)
        {
        }
    }
}
namespace WPML\ST\MO\File {
    class ManagerFactory
    {
        /**
         * @return Manager
         * @throws \Auryn\InjectionException
         */
        public static function create()
        {
        }
    }
    trait makeDir
    {
        /**
         * @var \WP_Filesystem_Direct
         */
        protected $filesystem;
        /** @return bool */
        public function maybeCreateSubdir()
        {
        }
    }
    class FailureHooks implements \IWPML_Backend_Action
    {
        use \WPML\ST\MO\File\makeDir;
        const NOTICE_GROUP = 'mo-failure';
        const NOTICE_ID_MISSING_FOLDER = 'missing-folder';
        /** @var Status */
        private $status;
        /** @var SingleSiteProcess $singleProcess */
        private $singleProcess;
        public function __construct(\WP_Filesystem_Direct $filesystem, \WPML\ST\MO\Generate\Process\Status $status, \WPML\ST\MO\Generate\Process\SingleSiteProcess $singleProcess)
        {
        }
        public function add_hooks()
        {
        }
        public function checkDirectories()
        {
        }
        /**
         * @param string $dir
         */
        public function displayMissingFolderNotice($dir)
        {
        }
        /**
         * @param string $dir
         *
         * @return string
         */
        public static function missingFolderNoticeContent($dir)
        {
        }
        private function displayRegenerateInProgressNotice()
        {
        }
        /**
         * @return string
         */
        public static function getSubdir()
        {
        }
        /**
         * @param string $dir
         *
         * @return bool
         */
        private function isDirectoryMissing($dir)
        {
        }
        private function resetRegenerateStatus()
        {
        }
    }
}
namespace WPML\ST\TranslationFile {
    abstract class Builder
    {
        /** @var string $plural_form */
        protected $plural_form = 'nplurals=2; plural=n != 1;';
        /** @var string $language */
        protected $language;
        /**
         * @param string $language
         *
         * @return Builder
         */
        public function set_language($language)
        {
        }
        /**
         * @param string $plural_form
         *
         * @return Builder
         */
        public function set_plural_form($plural_form)
        {
        }
        /**
         * @param StringEntity[] $strings
         * @return string
         */
        public abstract function get_content(array $strings);
    }
}
namespace WPML\ST\MO\File {
    class Builder extends \WPML\ST\TranslationFile\Builder
    {
        /** @var Generator */
        private $generator;
        public function __construct(\WPML\ST\MO\File\Generator $generator)
        {
        }
        /**
         * @param StringEntity[] $strings
         * @return string
         */
        public function get_content(array $strings)
        {
        }
    }
    class FailureHooksFactory implements \IWPML_Backend_Action_Loader
    {
        /**
         * @return FailureHooks|null
         * @throws \Auryn\InjectionException
         */
        public function create()
        {
        }
        /**
         * @return bool
         * @throws \Auryn\InjectionException
         */
        private function hasRanPreGenerateViaUi()
        {
        }
    }
}
namespace WPML\ST\TranslationFile {
    abstract class Manager
    {
        use \WPML\ST\MO\File\makeDir;
        const SUB_DIRECTORY = 'wpml';
        /** @var StringsRetrieve $strings */
        protected $strings;
        /** @var WPML_Language_Records $language_records */
        protected $language_records;
        /** @var Builder $builder */
        protected $builder;
        /** @var WPML_ST_Translations_File_Dictionary $file_dictionary */
        protected $file_dictionary;
        /** @var Domains $domains */
        protected $domains;
        public function __construct(\WPML\ST\TranslationFile\StringsRetrieve $strings, \WPML\ST\TranslationFile\Builder $builder, \WP_Filesystem_Direct $filesystem, \WPML_Language_Records $language_records, \WPML\ST\TranslationFile\Domains $domains)
        {
        }
        /**
         * @param string $domain
         * @param string $locale
         */
        public function remove($domain, $locale)
        {
        }
        /**
         * @param string $domain
         * @param string $locale
         *
         * @return bool
         */
        public function add($domain, $locale)
        {
        }
        /**
         * @param string $domain
         * @param string $locale
         *
         * @return string|null
         */
        public function get($domain, $locale)
        {
        }
        /**
         * @param string $domain
         * @param string $locale
         *
         * @return string
         */
        public function getFilepath($domain, $locale)
        {
        }
        /**
         * @param string $domain
         *
         * @return bool
         */
        public function handles($domain)
        {
        }
        /** @return string */
        public static function getSubdir()
        {
        }
        /**
         * @return string
         */
        protected abstract function getFileExtension();
        /**
         * @return bool
         */
        public abstract function isPartialFile();
        /**
         * @return Collection
         */
        protected abstract function getDomains();
    }
}
namespace WPML\ST\MO\File {
    class Manager extends \WPML\ST\TranslationFile\Manager
    {
        public function __construct(\WPML\ST\TranslationFile\StringsRetrieve $strings, \WPML\ST\MO\File\Builder $builder, \WP_Filesystem_Direct $filesystem, \WPML_Language_Records $language_records, \WPML\ST\TranslationFile\Domains $domains)
        {
        }
        /**
         * @return string
         */
        protected function getFileExtension()
        {
        }
        /**
         * @return bool
         */
        public function isPartialFile()
        {
        }
        /**
         * @return Collection
         */
        protected function getDomains()
        {
        }
        /**
         * @return bool
         */
        public static function hasFiles()
        {
        }
    }
    class Generator
    {
        /** @var MOFactory */
        private $moFactory;
        public function __construct(\WPML\ST\MO\File\MOFactory $moFactory)
        {
        }
        /**
         * @param StringEntity[] $entries
         *
         * @return string
         */
        public function getContent(array $entries)
        {
        }
        /**
         * @param Collection   $carry
         * @param StringEntity $entry
         *
         * @return Collection
         */
        public function createMOFormatEntities($carry, \WPML\ST\TranslationFile\StringEntity $entry)
        {
        }
        /**
         * @param StringEntity $entry
         * @param string       $singularField
         *
         * @return array
         */
        private function mapStringEntityToMOFormatUsing(\WPML\ST\TranslationFile\StringEntity $entry, $singularField)
        {
        }
    }
    class MOFactory
    {
        /**
         * @return \MO
         */
        public function createNewInstance()
        {
        }
    }
}
namespace WPML\ST\MO\Notice {
    class RegenerationInProgressNotice extends \WPML_Notice
    {
        const ID = 'mo-files-regeneration';
        const GROUP = 'mo-files';
        public function __construct()
        {
        }
    }
}
namespace WPML\ST\MO\Hooks {
    class Factory implements \IWPML_Backend_Action_Loader, \IWPML_Frontend_Action_Loader
    {
        /**
         * Create hooks.
         *
         * @return IWPML_Action[]
         * @throws \Auryn\InjectionException Auryn Exception.
         */
        public function create()
        {
        }
    }
    class LoadTextDomain implements \IWPML_Action
    {
        const PRIORITY_OVERRIDE = 10;
        /** @var Manager $file_manager */
        private $file_manager;
        /** @var WPML_ST_Translations_File_Locale $file_locale */
        private $file_locale;
        /** @var LoadedMODictionary $loaded_mo_dictionary */
        private $loaded_mo_dictionary;
        /** @var array $loaded_domains */
        private $loaded_domains = [];
        public function __construct(\WPML\ST\MO\File\Manager $file_manager, \WPML_ST_Translations_File_Locale $file_locale, \WPML\ST\MO\LoadedMODictionary $loaded_mo_dictionary)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * When a MO file is loaded, we override the process to load
         * the custom MO file before.
         *
         * That way, the custom MO file will be merged into the subsequent
         * native MO files and the custom MO translations will always
         * overwrite the native ones.
         *
         * This gives us the ability to build partial custom MO files
         * with only the modified translations.
         *
         * @param bool   $override Whether to override the .mo file loading. Default false.
         * @param string $domain   Text domain. Unique identifier for retrieving translated strings.
         * @param string $mofile   Path to the MO file.
         *
         * @return bool
         */
        public function overrideLoadTextDomain($override, $domain, $mofile)
        {
        }
        /**
         * @param bool $override
         * @param string $domain
         *
         * @return bool
         */
        public function overrideUnloadTextDomain($override, $domain)
        {
        }
        /**
         * @param string $domain
         *
         * @return bool
         */
        private function isCustomMOLoaded($domain)
        {
        }
        private function loadCustomMOFile($domain, $mofile, $locale)
        {
        }
        private function reloadAlreadyLoadedMOFiles()
        {
        }
        /**
         * @param string $domain
         */
        private function setCustomMOLoaded($domain)
        {
        }
        public function languageHasSwitched()
        {
        }
    }
    class DetectPrematurelyTranslatedStrings implements \IWPML_Action
    {
        /** @var string[] */
        private $domains = [];
        /** @var string[] */
        private $preloadedDomains = [];
        /** @var \SitePress */
        private $sitepress;
        /** @var Settings */
        private $gettextHooksSettings;
        /**
         * @param \SitePress $sitepress
         */
        public function __construct(\SitePress $sitepress, \WPML\ST\Gettext\Settings $settings)
        {
        }
        /**
         * Init gettext hooks.
         */
        public function add_hooks()
        {
        }
        /**
         * @param string       $translation
         * @param string       $text
         * @param string|array $domain
         *
         * @return string
         */
        public function gettext_filter($translation, $text, $domain)
        {
        }
        /**
         * @param string $translation
         * @param string $text
         * @param string $context
         * @param string $domain
         *
         * @return string
         */
        public function gettext_with_context_filter($translation, $text, $context, $domain)
        {
        }
        /**
         * @param string       $translation
         * @param string       $single
         * @param string       $plural
         * @param string       $number
         * @param string|array $domain
         *
         * @return string
         */
        public function ngettext_filter($translation, $single, $plural, $number, $domain)
        {
        }
        /**
         * @param string $translation
         * @param string $single
         * @param string $plural
         * @param string $number
         * @param string $context
         * @param string $domain
         *
         * @return string
         *
         */
        public function ngettext_with_context_filter($translation, $single, $plural, $number, $context, $domain)
        {
        }
        private function registerDomain($domain)
        {
        }
        public function registerDomainToPreloading($plugin_override, $domain)
        {
        }
    }
    class LanguageSwitch implements \IWPML_Action
    {
        /** @var MOFactory $jit_mo_factory */
        private $jit_mo_factory;
        /** @var LanguageResolution $language_resolution */
        private $language_resolution;
        /** @var null|string $current_locale */
        private static $current_locale;
        /** @var array $globals_cache */
        private static $globals_cache = [];
        public function __construct(\WPML\ST\Utils\LanguageResolution $language_resolution, \WPML\ST\MO\JustInTime\MOFactory $jit_mo_factory)
        {
        }
        public function add_hooks()
        {
        }
        /** @param string $locale */
        private function setCurrentLocale($locale)
        {
        }
        /** @return string */
        public function getCurrentLocale()
        {
        }
        public function languageHasSwitched()
        {
        }
        public function initCurrentLocale()
        {
        }
        /**
         * This method will act as the WP Core function `switch_to_locale`,
         * but in a more efficient way. It will avoid to instantly load
         * the domains loaded in the previous locale. Instead, it will let
         * the domains be loaded via the "just in time" function.
         *
         * @param string $new_locale
         */
        public function switchToLocale($new_locale)
        {
        }
        /**
         * @param string|null $locale
         */
        public static function resetCache($locale = null)
        {
        }
        /**
         * We need to take a new copy of the current locale globals
         * because some domains could have been added with the "just in time"
         * mechanism.
         */
        private function updateCurrentGlobalsCache()
        {
        }
        /**
         * @param string $new_locale
         */
        private function changeWpLocale($new_locale)
        {
        }
        /**
         * @param string $new_locale
         */
        private function changeMoObjects($new_locale)
        {
        }
        private function resetTranslationAvailabilityInformation()
        {
        }
        /**
         * @param string $locale
         *
         * @return string
         */
        public function filterLocale($locale)
        {
        }
        /**
         * @return array
         */
        private function getUnloadedDomains()
        {
        }
    }
    class LoadMissingMOFiles implements \IWPML_Action
    {
        const MISSING_MO_FILES_DIR = '/wpml/missing/';
        const OPTION_GROUP = 'ST-MO';
        const MISSING_MO_OPTION = 'missing-mo';
        const TIMEOUT = 10;
        const WPML_VERSION_INTRODUCING_ST_MO_FLOW = '4.3.0';
        /**
         * @var MissingMOFile
         */
        private $generateMissingMoFile;
        /**
         * @var OptionManager
         */
        private $optionManager;
        /** @var \WPML_ST_Translations_File_Dictionary_Storage_Table */
        private $moFilesDictionary;
        public function __construct(\WPML\ST\MO\Generate\MissingMOFile $generateMissingMoFile, \WPML\WP\OptionManager $optionManager, \WPML_ST_Translations_File_Dictionary_Storage_Table $moFilesDictionary)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param string $mofile
         * @param string $domain
         *
         * @return string
         */
        public function recordMissing($mofile, $domain)
        {
        }
        public function generateMissing()
        {
        }
        public static function isReadable($mofile)
        {
        }
        /**
         * @return \WPML\Collect\Support\Collection
         */
        private function getMissing()
        {
        }
        /**
         * @param \WPML\Collect\Support\Collection $missing
         */
        private function saveMissing(\WPML\Collect\Support\Collection $missing)
        {
        }
        public static function getTimeout()
        {
        }
        /**
         * @return bool
         */
        private function wasWpmlInstalledPriorToMoFlowChanges()
        {
        }
        /**
         * @param string $mofile
         * @param string $domain
         *
         * @return string
         */
        private function getGeneratedFileName($mofile, $domain)
        {
        }
        /**
         * There's a fallback for theme that is looking for
         * this kind of file `wp-content/themes/hybrid/ru_RU.mo`.
         * We need to add the domain otherwise it collides with
         * the MO file for the default domain.
         *
         * @param string $fileName
         * @param string $domain
         *
         * @return bool
         */
        private function isNonDefaultWithMissingDomain($fileName, $domain)
        {
        }
    }
    class PreloadThemeMoFile implements \IWPML_Action
    {
        /** @var \SitePress */
        private $sitepress;
        /** @var \wpdb */
        private $wpdb;
        public function __construct(\SitePress $sitepress, \wpdb $wpdb)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param string $domain
         * @param string $locale
         *
         * @return Collection
         */
        private function getListOfFiles($domain, $locale)
        {
        }
    }
    class Sync implements \IWPML_Frontend_Action, \IWPML_Backend_Action, \IWPML_DIC_Action
    {
        /** @var FileSync */
        private $fileSync;
        /** @var callable */
        private $useFileSynchronization;
        public function __construct(\WPML\ST\TranslationFile\Sync\FileSync $fileSync, callable $useFileSynchronization)
        {
        }
        public function add_hooks()
        {
        }
        public function syncFile($domain, $moFile)
        {
        }
        /**
         * @param  bool  $override
         * @param  string  $domain
         * @param  string  $moFile
         *
         * @return bool
         */
        public function syncCustomMoFileOnLoadTextDomain($override, $domain, $moFile)
        {
        }
    }
    class CustomTextDomains implements \IWPML_Action
    {
        /** @var Manager $manager */
        private $manager;
        /** @var Domains $domains */
        private $domains;
        /** @var LoadedMODictionary $loadedDictionary */
        private $loadedDictionary;
        /** @var callable */
        private $syncMissingFile;
        public function __construct(\WPML\ST\MO\File\Manager $file_manager, \WPML\ST\TranslationFile\Domains $domains, \WPML\ST\MO\LoadedMODictionary $loadedDictionary, callable $syncMissingFile = null)
        {
        }
        public function add_hooks()
        {
        }
    }
    class StringsLanguageChanged implements \IWPML_Action
    {
        /** @var DomainsAndLanguagesRepository */
        private $domainsAndLanguageRepository;
        /** @var Manager */
        private $manager;
        /** @var callable :: int[]->string[] */
        private $getDomainsByStringIds;
        /**
         * @param  DomainsAndLanguagesRepository  $domainsAndLanguageRepository
         * @param  Manager  $manager
         * @param  callable  $getDomainsByStringIds
         */
        public function __construct(\WPML\ST\MO\Generate\DomainsAndLanguagesRepository $domainsAndLanguageRepository, \WPML\ST\MO\File\Manager $manager, callable $getDomainsByStringIds)
        {
        }
        public function add_hooks()
        {
        }
        public function regenerateMOFiles(array $strings)
        {
        }
    }
}
namespace WPML\ST\MO\Generate {
    class MissingMOFile
    {
        use \WPML\ST\MO\File\makeDir;
        const OPTION_GROUP = 'ST-MO';
        const OPTION_NAME = 'missing-mo-processed';
        /**
         * @var Builder
         */
        private $builder;
        /**
         * @var StringsRetrieve
         */
        private $stringsRetrieve;
        /**
         * @var \WPML_Language_Records
         */
        private $languageRecords;
        /**
         * @var OptionManager
         */
        private $optionManager;
        public function __construct(\WP_Filesystem_Direct $filesystem, \WPML\ST\MO\File\Builder $builder, \WPML\ST\MO\Generate\StringsRetrieveMOOriginals $stringsRetrieve, \WPML_Language_Records $languageRecords, \WPML\WP\OptionManager $optionManager)
        {
        }
        /**
         * @param string $generateMoPath
         * @param string $domain
         */
        public function run($generateMoPath, $domain)
        {
        }
        public function isNotProcessed($generateMoPath)
        {
        }
        public static function getSubdir()
        {
        }
        /**
         * @return \WPML\Collect\Support\Collection
         */
        private function getProcessed()
        {
        }
    }
}
namespace WPML\ST\TranslationFile {
    class StringsRetrieve
    {
        // We need to store the strings by key that is a combination of original and gettext context
        // The join needs to be something that is unlikely to be in either so we can split later.
        const KEY_JOIN = '::JOIN::';
        /** @var \WPML\ST\DB\Mappers\StringsRetrieve */
        private $string_retrieve;
        /**
         * @param \WPML\ST\DB\Mappers\StringsRetrieve $string_retrieve
         */
        public function __construct(\WPML\ST\DB\Mappers\StringsRetrieve $string_retrieve)
        {
        }
        /**
         * @param string $domain
         * @param string $language
         * @param bool   $modified_mo_only
         *
         * @return StringEntity[]
         */
        public function get($domain, $language, $modified_mo_only)
        {
        }
        /**
         * @param string $language
         * @param string $domain
         * @param bool   $modified_mo_only
         *
         * @return Collection
         */
        private function loadFromDb($language, $domain, $modified_mo_only = false)
        {
        }
        /**
         * @param array $row_data
         *
         * @return array
         */
        private function parseResult(array $row_data)
        {
        }
        /**
         * @param array $row_data
         *
         * @return string|null
         */
        public static function parseTranslation(array $row_data)
        {
        }
        /**
         * @param array $string
         *
         * @return array
         */
        private function groupPluralFormsOfSameString(array $string)
        {
        }
        /**
         * Inside a domain, we can have several occurrences of strings
         * with the same original, but with different names.
         * In this situation, we should not try to group plurals.
         *
         * @param array $string
         *
         * @return mixed|string
         */
        private function getPluralGroupKey(array $string)
        {
        }
        /**
         * @param Collection $strings
         * @param string     $key
         *
         * @return StringEntity
         */
        private function buildStringEntity(\WPML\Collect\Support\Collection $strings, $key)
        {
        }
    }
}
namespace WPML\ST\MO\Generate {
    class StringsRetrieveMOOriginals extends \WPML\ST\TranslationFile\StringsRetrieve
    {
        /**
         * @param array $row_data
         *
         * @return string|null
         */
        public static function parseTranslation(array $row_data)
        {
        }
    }
}
namespace WPML\ST\MO\Generate\MultiSite {
    class Executor
    {
        const MAIN_SITE_ID = 1;
        /**
         * @param callable $callback
         *
         * @return \WPML\Collect\Support\Collection
         */
        public function withEach($callback)
        {
        }
        /**
         * @return \WPML\Collect\Support\Collection
         */
        public function getSiteIds()
        {
        }
        /**
         * @param int      $siteId
         * @param callable $callback
         *
         * @return mixed
         */
        public function executeWith($siteId, callable $callback)
        {
        }
    }
    class Condition
    {
        /**
         * @return bool
         */
        public function shouldRunWithAllSites()
        {
        }
        private function hasPostBodyParam()
        {
        }
    }
}
namespace WPML\ST\MO\Generate {
    class DomainsAndLanguagesRepository
    {
        /** @var wpdb */
        private $wpdb;
        /** @var Domains */
        private $domains;
        /** @var WPML_Locale */
        private $locale;
        /**
         * @param wpdb        $wpdb
         * @param Domains     $domains
         * @param WPML_Locale $wp_locale
         */
        public function __construct(\wpdb $wpdb, \WPML\ST\TranslationFile\Domains $domains, \WPML_Locale $wp_locale)
        {
        }
        /**
         * @return Collection
         */
        public function get()
        {
        }
        /**
         * @return Collection
         */
        private function getAllDomains()
        {
        }
        /**
         * @return bool
         */
        public static function hasTranslationFilesTable()
        {
        }
    }
}
namespace WPML\ST\MO\Generate\Process {
    class SubSiteValidator
    {
        /**
         * @return bool
         */
        public function isValid()
        {
        }
        /**
         * @return bool
         */
        private function hasTranslationFilesTable()
        {
        }
    }
    interface Process
    {
        public function runAll();
        /**
         * @return int Remaining
         */
        public function runPage();
        /**
         * @return int
         */
        public function getPagesCount();
        /**
         * @return bool
         */
        public function isCompleted();
    }
    class SingleSiteProcess implements \WPML\ST\MO\Generate\Process\Process
    {
        const TIMEOUT = 5;
        /** @var DomainsAndLanguagesRepository */
        private $domainsAndLanguagesRepository;
        /** @var Manager */
        private $manager;
        /** @var Status */
        private $status;
        /** @var Pager */
        private $pager;
        /** @var callable */
        private $migrateAdminTexts;
        /**
         * @param DomainsAndLanguagesRepository $domainsAndLanguagesRepository
         * @param Manager                       $manager
         * @param Status                        $status
         * @param Pager                         $pager
         * @param callable                      $migrateAdminTexts
         */
        public function __construct(\WPML\ST\MO\Generate\DomainsAndLanguagesRepository $domainsAndLanguagesRepository, \WPML\ST\MO\File\Manager $manager, \WPML\ST\MO\Generate\Process\Status $status, \WPML\Utils\Pager $pager, callable $migrateAdminTexts)
        {
        }
        public function runAll()
        {
        }
        /**
         * @return int Remaining
         */
        public function runPage()
        {
        }
        public function getPagesCount()
        {
        }
        private function getDomainsAndLanguages()
        {
        }
        /**
         * @return bool
         */
        public function isCompleted()
        {
        }
    }
    class ProcessFactory
    {
        const FILES_PAGER = 'wpml-st-mo-generate-files-pager';
        const FILES_PAGE_SIZE = 20;
        const SITES_PAGER = 'wpml-st-mo-generate-sites-pager';
        /** @var Condition */
        private $multiSiteCondition;
        /**
         * @param Condition $multiSiteCondition
         */
        public function __construct(\WPML\ST\MO\Generate\MultiSite\Condition $multiSiteCondition = null)
        {
        }
        /**
         * @return Process
         * @throws \Auryn\InjectionException
         */
        public function create()
        {
        }
        /**
         * @param bool $isBackgroundProcess
         *
         * @return SingleSiteProcess
         * @throws \Auryn\InjectionException
         */
        public static function createSingle($isBackgroundProcess = false)
        {
        }
        /**
         * @param bool $isBackgroundProcess
         *
         * @return mixed|\Mockery\MockInterface|Status
         * @throws \Auryn\InjectionException
         */
        public static function createStatus($isBackgroundProcess = false)
        {
        }
    }
    class MultiSiteProcess implements \WPML\ST\MO\Generate\Process\Process
    {
        /** @var Executor */
        private $multiSiteExecutor;
        /** @var SingleSiteProcess */
        private $singleSiteProcess;
        /** @var Status */
        private $status;
        /** @var Pager */
        private $pager;
        /** @var SubSiteValidator */
        private $subSiteValidator;
        /**
         * @param Executor          $multiSiteExecutor
         * @param SingleSiteProcess $singleSiteProcess
         * @param Status            $status
         * @param Pager             $pager
         * @param SubSiteValidator  $subSiteValidator
         */
        public function __construct(\WPML\ST\MO\Generate\MultiSite\Executor $multiSiteExecutor, \WPML\ST\MO\Generate\Process\SingleSiteProcess $singleSiteProcess, \WPML\ST\MO\Generate\Process\Status $status, \WPML\Utils\Pager $pager, \WPML\ST\MO\Generate\Process\SubSiteValidator $subSiteValidator)
        {
        }
        public function runAll()
        {
        }
        /**
         * @return int Is completed
         */
        public function runPage()
        {
        }
        /**
         * @return int
         */
        public function getPagesCount()
        {
        }
        /**
         * @return bool
         */
        public function isCompleted()
        {
        }
        private function runIfSetupComplete($callback)
        {
        }
    }
    class Status
    {
        /** @var \SitePress */
        private $sitepress;
        /** @var string */
        private $optionPrefix;
        /**
         * @param \SitePress  $sitepress
         * @param string|null $optionPrefix
         */
        public function __construct(\SitePress $sitepress, $optionPrefix = null)
        {
        }
        /**
         * @param bool $allSites
         */
        public function markComplete($allSites = false)
        {
        }
        /**
         * @param bool $allSites
         */
        public function markIncomplete($allSites = false)
        {
        }
        public function markIncompleteForAll()
        {
        }
        /**
         * @return bool
         */
        public function isComplete()
        {
        }
        /**
         * @return bool
         */
        public function isCompleteForAllSites()
        {
        }
        private function getOptionName($allSites)
        {
        }
    }
}
namespace WPML\ST\MO {
    class WPLocaleProxy
    {
        /**
         * @var WP_Locale|null $wp_locale
         */
        private $wp_locale;
        /**
         * @param string $method
         * @param array  $args
         *
         * @return mixed|null
         */
        public function __call($method, array $args)
        {
        }
        /**
         * @param string $property
         *
         * @return bool
         */
        public function __isset($property)
        {
        }
        /**
         * @param string $property
         *
         * @return mixed|null
         */
        public function __get($property)
        {
        }
        /**
         * @return WP_Locale|null
         */
        private function getWPLocale()
        {
        }
    }
    class LoadedMODictionary
    {
        const PATTERN_SEARCH_LOCALE = '#([-]?)([a-z]+[_A-Z]*)(\\.mo)$#i';
        const LOCALE_PLACEHOLDER = '{LOCALE}';
        /** @var array */
        private $domainsCache = [];
        /** @var Collection $mo_files */
        private $mo_files;
        public function __construct()
        {
        }
        private function collectFilesAddedBeforeInstantiation()
        {
        }
        /**
         * @param string $domain
         * @param string $mofile
         */
        public function addFile($domain, $mofile)
        {
        }
        /**
         * @param array $excluded
         *
         * @return array
         */
        public function getDomains(array $excluded = [])
        {
        }
        /**
         * @param string $domain
         * @param string $locale
         *
         * @return Collection
         */
        public function getFiles($domain, $locale)
        {
        }
        /**
         * @return Collection
         */
        public function getEntities()
        {
        }
        /**
         * @param array $excluded
         *
         * @return \Closure
         */
        private function excluded(array $excluded)
        {
        }
        /**
         * @param string $domain
         *
         * @return \Closure
         */
        private function byDomain($domain)
        {
        }
        /**
         * @param string $locale
         *
         * @return \Closure
         */
        private function getFile($locale)
        {
        }
    }
}
namespace {
    /**
     * @author OnTheGo Systems
     */
    class WPML_ST_Privacy_Content extends \WPML_Privacy_Content
    {
        /**
         * @return string
         */
        protected function get_plugin_name()
        {
        }
        /**
         * @return string|array
         */
        protected function get_privacy_policy()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_ST_Privacy_Content_Factory implements \IWPML_Backend_Action_Loader
    {
        /**
         * @return IWPML_Action
         */
        public function create()
        {
        }
    }
}
namespace WPML\ST {
    class Shortcode
    {
        const STRING_DOMAIN = 'wpml-shortcode';
        private $context;
        private $name;
        /**
         * @var \wpdb
         */
        private $wpdb;
        public function __construct(\wpdb $wpdb)
        {
        }
        function init_hooks()
        {
        }
        /**
         * @param array  $attributes
         * @param string $value
         *
         * @return string
         */
        function render($attributes, $value)
        {
        }
        /**
         * @param string $value
         */
        private function maybe_register_string($value)
        {
        }
        /**
         * @param array  $attributes
         * @param string $value
         */
        private function parse_attributes($attributes, $value)
        {
        }
        /**
         * @return \stdClass
         */
        private function get_registered_string()
        {
        }
        /**
         * @return \stdClass[]
         */
        private function get_strings_registered_in_context()
        {
        }
    }
}
namespace {
    /**
     * WPML_ST_Admin_String class
     */
    class WPML_ST_Admin_String extends \WPML_ST_String
    {
        /**
         * @var string $name
         */
        private $name;
        /**
         * @var string $value
         */
        private $value;
        /**
         * @param string $new_value
         */
        public function update_value($new_value)
        {
        }
        private function fetch_name_and_value()
        {
        }
    }
    class WPML_ST_File_Hashing
    {
        const OPTION_NAME = 'wpml-scanning-files-hashing';
        /** @var array */
        private $hashes;
        public function __construct()
        {
        }
        /**
         * @param string $file
         */
        private function set_hash($file)
        {
        }
        /**
         * @param string $file
         *
         * @return bool
         */
        public function hash_changed($file)
        {
        }
        public function save_hash()
        {
        }
        /**
         * @return array
         */
        private function get_hashes()
        {
        }
        public function clean_hashes()
        {
        }
    }
    class WPML_File_Name_Converter
    {
        /**
         * @var string
         */
        private $home_path;
        /**
         * @param string $file
         *
         * @return string
         */
        public function transform_realpath_to_reference($file)
        {
        }
        /**
         * @param string $file
         *
         * @return string
         */
        public function transform_reference_to_realpath($file)
        {
        }
        /**
         * @return string
         */
        private function get_home_path()
        {
        }
    }
    class WPML_ST_Theme_Plugin_Hooks
    {
        /**
         * @var WPML_ST_File_Hashing
         */
        private $file_hashing;
        public function __construct(\WPML_ST_File_Hashing $file_hashing)
        {
        }
        public function add_hooks()
        {
        }
    }
    interface IWPML_ST_String_Scanner
    {
        public function scan();
    }
    class WPML_ST_Theme_Plugin_Scan_Files_Ajax implements \IWPML_Action
    {
        /** @var IWPML_ST_String_Scanner */
        private $string_scanner;
        /**
         * WPML_ST_Theme_Scan_Files_Ajax constructor.
         *
         * @param IWPML_ST_String_Scanner $string_scanner
         */
        public function __construct(\IWPML_ST_String_Scanner $string_scanner)
        {
        }
        public function add_hooks()
        {
        }
        public function scan()
        {
        }
        public function clear_items_needs_scan_buffer()
        {
        }
    }
    class WPML_ST_Themes_And_Plugins_Settings
    {
        const OPTION_NAME = 'wpml_st_display_strings_scan_notices';
        const NOTICES_GROUP = 'wpml-st-string-scan';
        public function init_hooks()
        {
        }
        public function get_notices_group()
        {
        }
        public function must_display_notices()
        {
        }
        public function set_strings_scan_notices($value)
        {
        }
        public function hide_strings_scan_notices()
        {
        }
        public function display_notices_setting_is_missing()
        {
        }
        public function create_display_notices_setting()
        {
        }
        public function enqueue_scripts()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_ST_Themes_And_Plugins_Updates
    {
        const WPML_WP_UPDATED_MO_FILES = 'wpml_wp_updated_mo_files';
        const WPML_ST_ITEMS_TO_SCAN = 'wpml_items_to_scan';
        const WPML_ST_SCAN_NOTICE_ID = 'wpml_st_scan_items';
        const WPML_ST_FASTER_SETTINGS_NOTICE_ID = 'wpml_st_faster_settings';
        const WPML_ST_SCAN_ACTIVE_ITEMS_NOTICE_ID = 'wpml_st_scan_active_items';
        /** @var WPML_Notices */
        private $admin_notices;
        /** @var WPML_ST_Themes_And_Plugins_Settings */
        private $settings;
        /**
         * WPML_ST_Admin_Notices constructor.
         *
         * @param WPML_Notices                        $admin_notices
         * @param WPML_ST_Themes_And_Plugins_Settings $settings
         */
        public function __construct(\WPML_Notices $admin_notices, \WPML_ST_Themes_And_Plugins_Settings $settings)
        {
        }
        public function init_hooks()
        {
        }
        public function data_is_valid($thing)
        {
        }
        public function notices_count()
        {
        }
        public function remove_notice($id)
        {
        }
        /**
         * @param WP_Upgrader $upgrader
         * @param $language_translations
         *
         * @return bool
         */
        public function store_mo_file_update(\WP_Upgrader $upgrader, $language_translations)
        {
        }
    }
    class WPML_ST_Update_File_Hash_Ajax implements \IWPML_Action
    {
        /** @var WPML_ST_File_Hashing */
        private $file_hashing;
        /**
         * WPML_ST_Update_File_Hash_Ajax constructor.
         *
         * @param WPML_ST_File_Hashing $file_hashing
         */
        public function __construct(\WPML_ST_File_Hashing $file_hashing)
        {
        }
        public function add_hooks()
        {
        }
    }
    class WPML_ST_Strings_Stats
    {
        /**
         * @var SitePress
         */
        private $sitepress;
        /**
         * @var wpdb
         */
        private $wpdb;
        /**
         * @var array
         */
        private $stats;
        public function __construct(\wpdb $wpdb, \SitePress $sitepress)
        {
        }
        /**
         * @param string $component_name
         * @param string $type
         * @param string $domain
         */
        public function update($component_name, $type, $domain)
        {
        }
        /**
         * @param string $domain
         *
         * @return int
         */
        private function get_count($domain)
        {
        }
        private function set_stats()
        {
        }
    }
    class WPML_ST_Theme_Plugin_Scan_Dir_Ajax
    {
        /** @var WPML_ST_Scan_Dir */
        private $scan_dir;
        /** @var WPML_ST_File_Hashing */
        private $file_hashing;
        /**
         * WPML_ST_Theme_Plugin_Scan_Dir_Ajax constructor.
         *
         * @param WPML_ST_Scan_Dir $scan_dir
         * @param WPML_ST_File_Hashing $file_hashing
         */
        public function __construct(\WPML_ST_Scan_Dir $scan_dir, \WPML_ST_File_Hashing $file_hashing)
        {
        }
        public function add_hooks()
        {
        }
        public function get_files()
        {
        }
        private function clear_items_to_scan_buffer()
        {
        }
        /**
         * @param array $files
         *
         * @return array
         */
        private function filter_modified_files($files)
        {
        }
        /** @return array */
        private function get_folder()
        {
        }
        private function is_one_file_plugin()
        {
        }
        /**
         * @return array
         */
        private function get_folders_to_ignore()
        {
        }
    }
    class WPML_ST_Theme_Plugin_Hooks_Factory implements \IWPML_Backend_Action_Loader
    {
        /**
         * @return WPML_ST_Theme_Plugin_Hooks
         */
        public function create()
        {
        }
    }
    class WPML_ST_Update_File_Hash_Ajax_Factory extends \WPML_AJAX_Base_Factory implements \IWPML_Backend_Action_Loader
    {
        const AJAX_ACTION = 'update_file_hash';
        const NONCE = 'wpml-update-file-hash-nonce';
        /** @return null|WPML_ST_Update_File_Hash_Ajax */
        public function create()
        {
        }
    }
    class WPML_ST_Plugin_String_Scanner_Factory
    {
        /** @return WPML_Plugin_String_Scanner */
        public function create()
        {
        }
    }
    class WPML_ST_Theme_Plugin_Scan_Dir_Ajax_Factory extends \WPML_AJAX_Base_Factory implements \IWPML_Backend_Action_Loader
    {
        const AJAX_ACTION = 'wpml_get_files_to_scan';
        const NONCE = 'wpml-get-files-to-scan-nonce';
        /** @return null|WPML_ST_Theme_Plugin_Scan_Dir_Ajax */
        public function create()
        {
        }
    }
    class WPML_ST_Theme_String_Scanner_Factory
    {
        /** @return WPML_Theme_String_Scanner */
        public function create()
        {
        }
    }
    class WPML_ST_Theme_Plugin_Scan_Files_Ajax_Factory extends \WPML_AJAX_Base_Factory implements \IWPML_Backend_Action_Loader
    {
        const AJAX_ACTION = 'wpml_st_scan_chunk';
        const NONCE = 'wpml-scan-files-nonce';
        /** @return null|WPML_ST_Theme_Plugin_Scan_Files_Ajax */
        public function create()
        {
        }
    }
    class WPML_Language_Of_Domain
    {
        /**
         * @var SitePress
         */
        private $sitepress;
        /**
         * @var array
         */
        private $language_of_domain = array();
        /**
         * @param SitePress $sitepress
         */
        public function __construct(\SitePress $sitepress)
        {
        }
        public function get_language($domain)
        {
        }
        public function set_language($domain, $lang)
        {
        }
    }
    /**
     * Created by OnTheGoSystems
     */
    class WPML_Translation_Priority_Select extends \WPML_Templates_Factory
    {
        const NONCE = 'wpml_change_string_translation_priority_nonce';
        public function get_model()
        {
        }
        public function init_template_base_dir()
        {
        }
        public function get_template()
        {
        }
        private function enqueue_scripts()
        {
        }
    }
    class WPML_Change_String_Domain_Language_Dialog extends \WPML_WPDB_And_SP_User
    {
        /** @var  WPML_Language_Of_Domain $language_of_domain */
        private $language_of_domain;
        /** @var  WPML_ST_String_Factory $string_factory */
        private $string_factory;
        public function __construct(&$wpdb, &$sitepress, &$string_factory)
        {
        }
        public function render($domains)
        {
        }
        public function change_language_of_strings($domain, $langs, $to_lang, $set_as_default)
        {
        }
    }
    class WPML_String_Translation_Table
    {
        /** @var  array $strings */
        private $strings;
        /** @var array */
        private $active_languages;
        /** @var array */
        private $additional_columns_to_render;
        /**
         * @var string[]
         */
        private $strings_in_page;
        public function __construct($strings)
        {
        }
        public function render()
        {
        }
        private function render_table_header_or_footer($tag)
        {
        }
        public function render_string_row($string_id, $icl_string)
        {
        }
        /**
         * @param array $string
         *
         * @return string html for the checkbox and the table cell it resides in
         */
        private function render_checkbox_cell($string)
        {
        }
        private function render_view_column($string_id)
        {
        }
        /**
         * @param string $action
         * @param int $string_id
         *
         * @return string
         */
        private function get_thickbox_url($action, $string_id)
        {
        }
        private function hide_if_md5($str)
        {
        }
        /**
         * @param $string
         */
        public function updateColumnsForString($string)
        {
        }
        private function is_string_tracked($string_id)
        {
        }
    }
    class WPML_Change_String_Language_Select
    {
        /**
         * @var wpdb
         */
        private $wpdb;
        /**
         * @var SitePress
         */
        private $sitepress;
        /**
         * @param wpdb $wpdb
         * @param SitePress $sitepress
         */
        public function __construct(\wpdb $wpdb, \SitePress $sitepress)
        {
        }
        public function show()
        {
        }
        /**
         * @param int[] $strings
         * @param string $lang
         *
         * @return array
         */
        public function change_language_of_strings($strings, $lang)
        {
        }
    }
}
namespace WPML\ST\Main {
    class UI implements \IWPML_Backend_Action_Loader
    {
        /**
         * @return callable|null
         */
        public function create()
        {
        }
        public static function localize()
        {
        }
    }
}
namespace WPML\ST\Main\Ajax {
    class SaveTranslation implements \WPML\Ajax\IHandler
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
}
namespace {
    abstract class WPML_ST_String_Positions
    {
        const TEMPLATE_PATH = '/templates/string-tracking/';
        /**
         * @var WPML_ST_DB_Mappers_String_Positions $string_position_mapper
         */
        protected $string_position_mapper;
        /**
         * @var IWPML_Template_Service $template_service
         */
        protected $template_service;
        public function __construct(\WPML_ST_DB_Mappers_String_Positions $string_position_mapper, \IWPML_Template_Service $template_service)
        {
        }
        /**
         * @param int $string_id
         *
         * @return array
         */
        protected abstract function get_model($string_id);
        /** @return string */
        protected abstract function get_template_name();
        /**
         * @param int $string_id
         */
        public function dialog_render($string_id)
        {
        }
        /**
         * @return WPML_ST_DB_Mappers_String_Positions
         */
        protected function get_mapper()
        {
        }
        /**
         * @return IWPML_Template_Service
         */
        protected function get_template_service()
        {
        }
    }
    /**
     * Class WPML_ST_String_Positions_In_Source
     */
    class WPML_ST_String_Positions_In_Source extends \WPML_ST_String_Positions
    {
        const KIND = \ICL_STRING_TRANSLATION_STRING_TRACKING_TYPE_SOURCE;
        const TEMPLATE = 'positions-in-source.twig';
        /**
         * @var SitePress $sitepress
         */
        private $sitepress;
        /**
         * @var WP_Filesystem_Direct $filesystem
         */
        private $filesystem;
        /**
         * @var WPML_File_Name_Converter $filename_converter
         */
        private $filename_converter;
        /**
         * @var \WPML_WP_API
         */
        private $wp_api;
        public function __construct(\SitePress $sitePress, \WPML_ST_DB_Mappers_String_Positions $string_position_mapper, \IWPML_Template_Service $template_service, \WPML_WP_API $wp_api)
        {
        }
        protected function get_model($string_id)
        {
        }
        protected function get_template_name()
        {
        }
        /**
         * @param $string_id
         *
         * @return array
         */
        private function get_positions($string_id)
        {
        }
        /**
         * @param string $path
         *
         * @return string|false
         */
        private function maybe_transform_from_relative_path_to_absolute_path($path)
        {
        }
        /**
         * @return WP_Filesystem_Direct
         */
        private function get_filesystem()
        {
        }
        /**
         * @return WPML_WP_API
         */
        private function get_wp_api()
        {
        }
        /**
         * @return WPML_File_Name_Converter
         */
        private function get_filename_converter()
        {
        }
    }
    class WPML_ST_String_Positions_In_Page extends \WPML_ST_String_Positions
    {
        const KIND = \ICL_STRING_TRANSLATION_STRING_TRACKING_TYPE_PAGE;
        const TEMPLATE = 'positions-in-page.twig';
        /** @var WPML_ST_String_Factory $string_factory */
        private $string_factory;
        public function __construct(\WPML_ST_String_Factory $string_factory, \WPML_ST_DB_Mappers_String_Positions $string_position_mapper, \IWPML_Template_Service $template_service)
        {
        }
        protected function get_model($string_id)
        {
        }
        protected function get_template_name()
        {
        }
        private function get_pages($string_id)
        {
        }
    }
    class WPML_ST_String_Tracking_AJAX implements \IWPML_Action
    {
        /** @var WPML_ST_String_Positions $string_position */
        private $string_position;
        /** @var WPML_Super_Globals_Validation $globals_validation */
        private $globals_validation;
        /** @var string $action */
        private $action;
        /**
         * WPML_ST_String_Tracking_AJAX constructor.
         *
         * @param WPML_ST_String_Positions      $string_position
         * @param WPML_Super_Globals_Validation $globals_validation
         * @param string                        $action
         */
        public function __construct(\WPML_ST_String_Positions $string_position, \WPML_Super_Globals_Validation $globals_validation, $action)
        {
        }
        public function add_hooks()
        {
        }
        public function render_string_position()
        {
        }
    }
    class WPML_ST_String_Tracking_AJAX_Factory implements \IWPML_AJAX_Action_Loader
    {
        const ACTION_POSITION_IN_SOURCE = 'view_string_in_source';
        const ACTION_POSITION_IN_PAGE = 'view_string_in_page';
        public function create()
        {
        }
        private function is_string_position_view()
        {
        }
        /** @return WPML_ST_String_Positions_In_Page|WPML_ST_String_Positions_In_Source */
        private function get_st_string_positions()
        {
        }
        private function get_template_service()
        {
        }
    }
    class WPML_ST_Strings
    {
        const EMPTY_CONTEXT_LABEL = 'empty-context-domain';
        /**
         * @var SitePress
         */
        private $sitepress;
        /**
         * @var WP_Query
         */
        private $wp_query;
        /**
         * @var wpdb
         */
        private $wpdb;
        public function __construct($sitepress, $wpdb, $wp_query)
        {
        }
        public function get_string_translations()
        {
        }
        /**
         * @return string
         */
        private function get_value_search_query()
        {
        }
        /**
         * @return string
         */
        private function get_original_value_filter_sql()
        {
        }
        /**
         * @return string
         */
        private function get_name_filter_sql()
        {
        }
        /**
         * @return string
         */
        private function get_context_filter_sql()
        {
        }
        /**
         * @return string
         */
        private function get_translation_value_filter_sql()
        {
        }
        /**
         * @return string
         */
        private function get_mo_file_value_filter_sql()
        {
        }
        /**
         * @param string      $column
         * @param string|null $search_filter
         * @param bool|null   $exact_match
         *
         * @return string
         */
        private function get_column_filter_sql($column, $search_filter, $exact_match)
        {
        }
        public function get_per_domain_counts($status)
        {
        }
        private function get_strings_per_page()
        {
        }
        private function get_results($where_snippet, $extra_cond, $offset, $limit, $joins = array(), $selects = array())
        {
        }
        private function filter_empty_order_snippet($offset, $limit)
        {
        }
        private function set_pagination_counts($limit)
        {
        }
        private function build_sql_start($selects = array(), $joins = array())
        {
        }
        /**
         * @return string|bool
         */
        private function get_search_filter()
        {
        }
        /**
         * @return bool
         */
        private function is_exact_match()
        {
        }
        /**
         * @return array
         */
        private function get_search_context_filter()
        {
        }
        /**
         * @return bool
         */
        private function must_show_all_results()
        {
        }
    }
}
namespace WPML\ST\Shortcode {
    class Hooks implements \IWPML_DIC_Action, \IWPML_Backend_Action, \IWPML_AJAX_Action, \IWPML_REST_Action
    {
        /** @var \WPML_ST_DB_Mappers_Strings */
        private $stringMapper;
        public function __construct(\WPML_ST_DB_Mappers_Strings $stringMapper)
        {
        }
        public function add_hooks()
        {
        }
        private function defineRetrievingATEJobHooks()
        {
        }
        private function defineRetrievingProxyJobHooks()
        {
        }
        private function defineCTEHooks()
        {
        }
        /**
         * @return callable
         */
        private function appendId()
        {
        }
        private function restoreOriginalShortcodes(callable $lens)
        {
        }
        private function registerStringTranslation(callable $lens, callable $getTargetLang)
        {
        }
    }
    /**
     * Class TranslationHandler
     * @package WPML\ST\Shortcode
     *
     * @method static callable|mixed appendId(callable  ...$getStringRowByItsDomainAndValue, mixed ...$fieldData) - Curried :: (string->string->array)->mixed->mixed
     *
     * It appends "id" attribute to [wpml-string] shortcode.
     *
     * $getStringRowByItsDomainAndValue :: string->string->array
     *
     * @method static callable|mixed registerStringTranslation(callable ...$lens, mixed ...$data, callable ...$getTargetLanguage) - Curried :: callable->mixed->(mixed->string)->mixed
     *
     * It detects all [wpml-string] shortcodes in $jobData and registers string translations
     *
     * $getTargetLanguage :: mixed->string
     *
     * @method static callable|mixed restoreOriginalShortcodes(callable ...$getStringById, callable ...$lens, mixed ...$data) - Curried :: (int->string)->callable->mixed->mixed
     *
     * It detects all [wpml-string] shortcodes in $jobData and
     *  - removes "id" attribute
     *  - replaces translated inner text by its original value
     *
     * $getStringById :: int->array
     */
    class TranslationHandler
    {
        use \WPML\Collect\Support\Traits\Macroable;
        const SHORTCODE_PATTERN = '/\\[wpml-string.*?\\[\\/wpml-string\\]/';
        public static function init()
        {
        }
        // findShortcodesInJobData :: void → ( string → [shortcode, id, translation] )
        private static function findShortcodesInJobData()
        {
        }
        // appendToData :: callable -> ( array -> array )
        private static function appendToData(callable $fn)
        {
        }
        // firstMatchingGroup :: string, string|null -> ( string -> string )
        private static function firstMatchingGroup($pattern, $fallback = null)
        {
        }
        // extractInnerText :: void -> ( string -> string )
        private static function extractInnerText()
        {
        }
    }
    class LensFactory
    {
        public static function createLensForJobData()
        {
        }
        public static function createLensForProxyTranslations()
        {
        }
        public static function createLensForAssignIdInCTE()
        {
        }
    }
}
namespace {
    /**
     * Class WPML_ST_Verify_Dependencies
     *
     * Checks that the WPML Core plugin is installed and satisfies certain version
     * requirements
     */
    class WPML_ST_Verify_Dependencies
    {
        /**
         * @param string $wpml_core_version
         */
        function verify_wpml($wpml_core_version)
        {
        }
        private function maybe_show_wpml_not_installed_warning()
        {
        }
        function notice_no_wpml()
        {
        }
        function wpml_not_installed_warning()
        {
        }
        function wpml_is_outdated()
        {
        }
    }
    class WPML_ST_Reset
    {
        /**
         * @var wpdb
         */
        private $wpdb;
        /**
         * @var WPML_ST_Settings
         */
        private $settings;
        /**
         * @param wpdb $wpdb
         * @param WPML_ST_Settings $settings
         */
        public function __construct($wpdb, \WPML_ST_Settings $settings = \null)
        {
        }
        public function reset()
        {
        }
        public function remove_db_tables()
        {
        }
        /**
         * @return int
         */
        private function retrieve_current_blog_id()
        {
        }
    }
}
namespace WPML\ST\MO\Scan\UI {
    class Factory implements \IWPML_Backend_Action_Loader, \IWPML_Deferred_Action_Loader
    {
        const WPML_VERSION_INTRODUCING_ST_MO_FLOW = '4.3.0';
        const OPTION_GROUP = 'ST-MO';
        const IGNORE_WPML_VERSION = 'ignore-wpml-version';
        /**
         * @return callable|null
         * @throws \Auryn\InjectionException
         */
        public function create()
        {
        }
        public function get_load_action()
        {
        }
        /**
         * @return bool
         * @throws \Auryn\InjectionException
         */
        public static function isDismissed()
        {
        }
        /**
         * @return Collection
         * @throws \Auryn\InjectionException
         */
        private function getFilesToImport()
        {
        }
        /**
         * @return bool
         */
        private static function isPreGenerationRequired()
        {
        }
        /**
         * @return bool
         */
        private static function wpmlStartVersionBeforeMOFlow()
        {
        }
        /**
         * @return int
         * @throws \Auryn\InjectionException
         */
        public static function getDomainsToPreGenerateCount()
        {
        }
        /**
         * @return bool
         */
        public static function shouldIgnoreWpmlVersion()
        {
        }
        public static function ignoreWpmlVersion()
        {
        }
        public static function clearIgnoreWpmlVersion()
        {
        }
    }
    class Model
    {
        /**
         * @param Collection $files_to_scan
         * @param int        $domains_to_pre_generate_count
         * @param bool       $is_st_page
         * @param bool       $is_network_admin
         *
         * @return \Closure
         */
        public static function provider(\WPML\Collect\Support\Collection $files_to_scan, $domains_to_pre_generate_count, $is_st_page, $is_network_admin)
        {
        }
        /**
         * @param Collection $files_to_scan
         * @param string     $type
         *
         * @return array
         */
        private static function filterFilesByType(\WPML\Collect\Support\Collection $files_to_scan, $type)
        {
        }
    }
    class InstalledComponents
    {
        /**
         * @param Collection $components Collection of WPML_ST_Translations_File_Entry objects.
         *
         * @return Collection
         */
        public static function filter(\WPML\Collect\Support\Collection $components)
        {
        }
        /**
         * WPML_ST_Translations_File_Entry -> bool
         *
         * @return \Closure
         */
        public static function isPluginMissing()
        {
        }
        /**
         * WPML_ST_Translations_File_Entry -> bool
         *
         * @return \Closure
         */
        public static function isThemeMissing()
        {
        }
    }
    class UI
    {
        public static function add_hooks(callable $getModel, $isSTPage)
        {
        }
        public static function add_admin_notice()
        {
        }
        public static function localize($model)
        {
        }
    }
}
namespace WPML\ST\TranslationFile {
    class QueueFilter
    {
        /** @var array */
        private $plugins;
        /** @var array */
        private $themes;
        /** @var array */
        private $other;
        /**
         * @param array $plugins
         * @param array $themes
         * @param array $other
         */
        public function __construct(array $plugins, array $themes, array $other)
        {
        }
        /**
         * @param WPML_ST_Translations_File_Entry $file
         *
         * @return bool
         */
        public function isSelected(\WPML_ST_Translations_File_Entry $file)
        {
        }
    }
}
namespace {
    class WPML_ST_Translations_File_Scan_UI_Block
    {
        const NOTICES_GROUP = 'wpml-st-mo-scan';
        const NOTICES_MO_SCANNING_BLOCKED = 'mo-scanning-blocked';
        /** @var WPML_Notices */
        private $notices;
        /** @var string  */
        private $link = 'https://wpml.org/forums/topic/wpml-is-telling-me-that-it-has-a-broken-table-that-needs-fixing/';
        /**
         * @param WPML_Notices $notices
         */
        public function __construct(\WPML_Notices $notices)
        {
        }
        public function block_ui()
        {
        }
        public function unblock_ui()
        {
        }
        private function disable_option()
        {
        }
        public function disable_option_handler($model)
        {
        }
        private function get_short_notice_message()
        {
        }
        private function display_notice()
        {
        }
        private function remove_default_notice()
        {
        }
    }
    class WPML_ST_Translations_File_Scan_Storage
    {
        /** @var wpdb */
        private $wpdb;
        /** @var WPML_ST_Bulk_Strings_Insert */
        private $bulk_insert;
        /**
         * @param wpdb $wpdb
         * @param WPML_ST_Bulk_Strings_Insert $bulk_insert
         */
        public function __construct(\wpdb $wpdb, \WPML_ST_Bulk_Strings_Insert $bulk_insert)
        {
        }
        public function save(array $translations, $domain, $lang)
        {
        }
        /**
         * @param WPML_ST_Translations_File_Translation[] $translations
         * @param string                                  $domain
         *
         * @return WPML_ST_Models_String[]
         */
        private function build_string_collection(array $translations, $domain)
        {
        }
        /**
         * @param string $domain
         *
         * @return array
         */
        private function get_string_maps($domain)
        {
        }
        /**
         * @param WPML_ST_Translations_File_Translation[] $translations
         * @param string                                  $lang
         * @param array                                   $value_id_map
         *
         * @return WPML_ST_Models_String_Translation[]
         */
        private function build_string_translation_collection(array $translations, $lang, $value_id_map)
        {
        }
    }
    class WPML_ST_Translations_File_Registration
    {
        const PATH_PATTERN_SEARCH_MO = '#(-)?([a-z]+)([_A-Z]*)\\.mo$#i';
        const PATH_PATTERN_REPLACE_MO = '${1}%s.mo';
        const PATH_PATTERN_SEARCH_JSON = '#(DOMAIN_PLACEHOLDER)([a-z]+)([_A-Z]*)(-[-_a-z0-9]+)\\.json$#i';
        const PATH_PATTERN_REPLACE_JSON = '${1}%s${4}.json';
        /** @var WPML_ST_Translations_File_Dictionary */
        private $file_dictionary;
        /** @var WPML_File */
        private $wpml_file;
        /** @var WPML_ST_Translations_File_Component_Details */
        private $components_find;
        /** @var array */
        private $active_languages;
        /** @var array */
        private $cache = array();
        /**
         * @param WPML_ST_Translations_File_Dictionary        $file_dictionary
         * @param WPML_File                                   $wpml_file
         * @param WPML_ST_Translations_File_Component_Details $components_find
         * @param array                                       $active_languages
         */
        public function __construct(\WPML_ST_Translations_File_Dictionary $file_dictionary, \WPML_File $wpml_file, \WPML_ST_Translations_File_Component_Details $components_find, array $active_languages)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param bool   $override
         * @param string $domain
         * @param string $mo_file_path
         *
         * @return bool
         */
        public function cached_save_mo_file_info($override, $domain, $mo_file_path)
        {
        }
        /**
         * @param string|false $translations translations in the JED format
         * @param string       $file
         * @param string       $handle
         * @param string       $original_domain
         *
         * @return string|false
         */
        public function add_json_translations_to_import_queue($translations, $file, $handle, $original_domain)
        {
        }
        /**
         * @param string $original_domain
         * @param string $registration_domain which can be composed with the script-handle for JED files
         * @param string $file_path
         *
         * @return true
         */
        private function save_file_info($original_domain, $registration_domain, $file_path)
        {
        }
        /**
         * @param string $file_path
         * @param string $original_domain
         *
         * @return string|string[]|null
         * @throws InvalidArgumentException
         */
        private function get_file_path_pattern($file_path, $original_domain)
        {
        }
        /**
         * @param string $registration_domain
         * @param string $file_path
         */
        private function register_single_file($registration_domain, $file_path)
        {
        }
        private function isGeneratedFile($path)
        {
        }
    }
    class WPML_ST_Translations_File_Dictionary
    {
        /** @var WPML_ST_Translations_File_Dictionary_Storage */
        private $storage;
        /**
         * @param WPML_ST_Translations_File_Dictionary_Storage $storage
         */
        public function __construct(\WPML_ST_Translations_File_Dictionary_Storage $storage)
        {
        }
        /**
         * @param $file_path
         *
         * @return WPML_ST_Translations_File_Entry
         */
        public function find_file_info_by_path($file_path)
        {
        }
        /**
         * @param WPML_ST_Translations_File_Entry $file
         */
        public function save(\WPML_ST_Translations_File_Entry $file)
        {
        }
        /**
         * @return WPML_ST_Translations_File_Entry[]
         */
        public function get_not_imported_files()
        {
        }
        public function clear_skipped()
        {
        }
        /**
         * @return WPML_ST_Translations_File_Entry[]
         */
        public function get_imported_files()
        {
        }
        /**
         * @param null|string $extension
         * @param null|string $locale
         *
         * @return array
         */
        public function get_domains($extension = \null, $locale = \null)
        {
        }
    }
    class WPML_ST_Translations_File_Entry
    {
        const NOT_IMPORTED = 'not_imported';
        const IMPORTED = 'imported';
        const PARTLY_IMPORTED = 'partly_imported';
        const FINISHED = 'finished';
        const SKIPPED = 'skipped';
        const PATTERN_SEARCH_LANG_MO = '#[-]?([a-z]+[_A-Z]*)\\.mo$#i';
        const PATTERN_SEARCH_LANG_JSON = '#([a-z]+[_A-Z]*)-[-a-z0-9]+\\.json$#i';
        /** @var  string */
        private $path;
        /** @var string */
        private $domain;
        /** @var int */
        private $status;
        /** @var int */
        private $imported_strings_count = 0;
        /** @var int */
        private $last_modified;
        /** @var string */
        private $component_type;
        /** @var string */
        private $component_id;
        /**
         * @param string $path
         * @param string $domain
         * @param int $status
         *
         * @throws InvalidArgumentException
         */
        public function __construct($path, $domain, $status = self::NOT_IMPORTED)
        {
        }
        /**
         * We can't rely on ABSPATH in out tests
         *
         * @param string $path
         *
         * @return string
         */
        private function convert_to_relative_path($path)
        {
        }
        /**
         * @return string
         */
        public function get_path()
        {
        }
        public function get_full_path()
        {
        }
        /**
         * @return string
         */
        public function get_path_hash()
        {
        }
        /**
         * @return string
         */
        public function get_domain()
        {
        }
        /**
         * @return int
         */
        public function get_status()
        {
        }
        /**
         * @param int $status
         *
         * @return WPML_ST_Translations_File_Entry
         */
        public function set_status($status)
        {
        }
        /**
         * @return int
         */
        public function get_imported_strings_count()
        {
        }
        /**
         * @param int $imported_strings_count
         *
         * @return WPML_ST_Translations_File_Entry
         */
        public function set_imported_strings_count($imported_strings_count)
        {
        }
        /**
         * @return int
         */
        public function get_last_modified()
        {
        }
        /**
         * @param int $last_modified
         *
         * @return WPML_ST_Translations_File_Entry
         */
        public function set_last_modified($last_modified)
        {
        }
        public function __get($name)
        {
        }
        /**
         * It extracts locale from mo file path, examples
         * '/wp-content/languages/admin-pl_PL.mo' => 'pl'
         * '/wp-content/plugins/sitepress/sitepress-hr.mo' => 'hr'
         *
         * @param string|$mo_path
         * @throws RuntimeException
         * @return null|string
         */
        public function get_file_locale()
        {
        }
        /**
         * @return string
         */
        public function get_component_type()
        {
        }
        /**
         * @param string $component_type
         */
        public function set_component_type($component_type)
        {
        }
        /**
         * @return string
         */
        public function get_component_id()
        {
        }
        /**
         * @param string $component_id
         */
        public function set_component_id($component_id)
        {
        }
        /**
         * @param $status
         */
        private function validate_status($status)
        {
        }
        /**
         * @param string $path
         *
         * @return string
         */
        private function fix_dir_separator($path)
        {
        }
        public function get_extension()
        {
        }
    }
    class WPML_ST_Translations_File_String_Status_Update
    {
        /** @var int */
        private $number_of_secondary_languages;
        /** @var wpdb */
        private $wpdb;
        /**
         * @param int $number_of_secondary_languages
         * @param wpdb $wpdb
         */
        public function __construct($number_of_secondary_languages, \wpdb $wpdb)
        {
        }
        public function add_hooks()
        {
        }
        public function update_string_statuses(\WPML_ST_Translations_File_Entry $file)
        {
        }
    }
    interface WPML_ST_Translations_File_Components_Find
    {
        /**
         * @param string $file
         *
         * @return string|null
         */
        public function find_id($file);
    }
    class WPML_ST_Translations_File_Components_Find_Plugin implements \WPML_ST_Translations_File_Components_Find
    {
        /** @var WPML_Debug_BackTrace */
        private $debug_backtrace;
        /** @var string */
        private $plugin_dir;
        /** @var array */
        private $plugin_ids;
        /**
         * @param WPML_Debug_BackTrace $debug_backtrace
         */
        public function __construct(\WPML_Debug_BackTrace $debug_backtrace)
        {
        }
        public function find_id($file)
        {
        }
        private function find_plugin_directory($file)
        {
        }
        private function find_plugin_directory_in_backtrace()
        {
        }
        private function find_file_in_backtrace()
        {
        }
        /**
         * @param $file_path
         *
         * @return mixed
         */
        private function extract_plugin_directory($file_path)
        {
        }
        /**
         * @param string $directory
         *
         * @return string|null
         */
        private function get_plugin_id_by_directory($directory)
        {
        }
        /**
         * @return string[]
         */
        private function get_plugin_ids()
        {
        }
    }
    class WPML_ST_Translations_File_Components_Find_Theme implements \WPML_ST_Translations_File_Components_Find
    {
        /** @var WPML_Debug_BackTrace */
        private $debug_backtrace;
        /** @var WPML_File $file */
        private $file;
        /** @var string */
        private $theme_dir;
        /**
         * @param WPML_Debug_BackTrace $debug_backtrace
         * @param WPML_File            $file
         */
        public function __construct(\WPML_Debug_BackTrace $debug_backtrace, \WPML_File $file)
        {
        }
        public function find_id($file)
        {
        }
        private function find_theme_directory($file)
        {
        }
        private function find_theme_directory_in_backtrace()
        {
        }
        private function find_file_in_backtrace()
        {
        }
        /**
         * @param $file_path
         *
         * @return mixed
         */
        private function extract_theme_directory($file_path)
        {
        }
    }
    class WPML_ST_Translations_File_Component_Details
    {
        /** @var WPML_ST_Translations_File_Components_Find[] */
        private $finders;
        /** @var WPML_File $file */
        private $file;
        /** @var string */
        private $plugin_dir;
        /** @var string */
        private $theme_dir;
        /** @var string */
        private $languages_plugin_dir;
        /** @var string */
        private $languages_theme_dir;
        /** @var array */
        private $cache = array();
        /**
         * @param WPML_ST_Translations_File_Components_Find_Plugin $plugin_id_finder
         * @param WPML_ST_Translations_File_Components_Find_Theme  $theme_id_finder
         * @param WPML_File                                        $wpml_file
         */
        public function __construct(\WPML_ST_Translations_File_Components_Find_Plugin $plugin_id_finder, \WPML_ST_Translations_File_Components_Find_Theme $theme_id_finder, \WPML_File $wpml_file)
        {
        }
        /**
         * @param string $file_full_path
         *
         * @return array
         */
        public function find_details($file_full_path)
        {
        }
        /**
         * @param string $component_type
         * @param string $file_full_path
         *
         * @return null|string
         */
        public function find_id($component_type, $file_full_path)
        {
        }
        /**
         * @param string $file_full_path
         *
         * @return string
         */
        public function find_type($file_full_path)
        {
        }
        /**
         * @param string $file_full_path
         *
         * @return bool
         */
        public function is_component_active($file_full_path)
        {
        }
        private function string_contains($haystack, $needle)
        {
        }
    }
    class WPML_ST_Translations_File_Scan_Factory
    {
        private $dictionary;
        private $queue;
        private $storage;
        private $wpml_file;
        private $find_aggregate;
        public function check_core_dependencies()
        {
        }
        /**
         * @return array
         */
        public function create_hooks()
        {
        }
        /**
         * @return WPML_ST_Translations_File_Queue
         */
        public function create_queue()
        {
        }
        /**
         * @return WPML_ST_Translations_File_Scan_Storage
         */
        private function create_storage()
        {
        }
        /**
         * @return WPML_ST_Translations_File_Dictionary
         */
        private function create_dictionary()
        {
        }
        /**
         * @return int
         */
        private function get_scan_limit()
        {
        }
        private function get_sitepress()
        {
        }
        private function get_wpml_wp_api()
        {
        }
        private function get_wpml_file()
        {
        }
        /**
         * @return WPML_ST_Translations_File_Registration
         */
        private function get_translations_file_registration()
        {
        }
        /**
         * @return WPML_ST_Translations_File_Component_Stats_Update_Hooks
         */
        private function get_stats_update()
        {
        }
        /**
         * @return WPML_ST_Translations_File_Component_Details
         */
        private function get_aggregate_find_component()
        {
        }
        /**
         * @return WPML_ST_Translations_File_String_Status_Update
         */
        private function get_string_status_update()
        {
        }
    }
    class WPML_ST_Translations_File_Queue
    {
        const DEFAULT_LIMIT = 20000;
        const TIME_LIMIT = 10;
        // seconds
        const LOCK_FIELD = '_wpml_st_file_scan_in_progress';
        /** @var WPML_ST_Translations_File_Dictionary */
        private $file_dictionary;
        /** @var WPML_ST_Translations_File_Scan */
        private $file_scan;
        /** @var WPML_ST_Translations_File_Scan_Storage */
        private $file_scan_storage;
        /** @var WPML_Language_Records */
        private $language_records;
        /** @var int */
        private $limit;
        private $transient;
        /**
         * @param WPML_ST_Translations_File_Dictionary $file_dictionary
         * @param WPML_ST_Translations_File_Scan $file_scan
         * @param WPML_ST_Translations_File_Scan_Storage $file_scan_storage
         * @param WPML_Language_Records $language_records
         * @param int $limit
         * @param WPML_Transient $transient
         */
        public function __construct(\WPML_ST_Translations_File_Dictionary $file_dictionary, \WPML_ST_Translations_File_Scan $file_scan, \WPML_ST_Translations_File_Scan_Storage $file_scan_storage, \WPML_Language_Records $language_records, $limit, \WPML_Transient $transient)
        {
        }
        /**
         * @param QueueFilter|null $queueFilter
         */
        public function import(\WPML\ST\TranslationFile\QueueFilter $queueFilter = \null)
        {
        }
        /**
         * @param string $locale
         *
         * @return string
         */
        private function map_language_code($locale)
        {
        }
        /**
         * @return bool
         */
        public function is_completed()
        {
        }
        /**
         * @return string[]
         */
        public function get_processed()
        {
        }
        /**
         * @return bool
         */
        public function is_processing()
        {
        }
        /**
         * @return int
         */
        public function get_pending()
        {
        }
        public function mark_as_finished()
        {
        }
        /**
         * @param array $translations
         * @param int $offset
         * @param int $limit
         *
         * @return array
         */
        private function constrain_translations_number(array $translations, $offset, $limit)
        {
        }
        public function is_locked()
        {
        }
        private function lock()
        {
        }
        private function unlock()
        {
        }
    }
    interface IWPML_ST_Translations_File
    {
        /**
         * @return WPML_ST_Translations_File_Translation[]
         */
        public function get_translations();
    }
    class WPML_ST_Translations_File_JED implements \IWPML_ST_Translations_File
    {
        const EMPTY_PROPERTY_NAME = '_empty_';
        const DECODED_EOT_CHAR = '"\\u0004"';
        const PLURAL_SUFFIX_PATTERN = ' [plural %d]';
        /** @var string $filepath */
        private $filepath;
        /** @var string $decoded_eot_char */
        private $decoded_eot_char;
        public function __construct($filepath)
        {
        }
        /**
         * @return WPML_ST_Translations_File_Translation[]
         */
        public function get_translations()
        {
        }
        /**
         * The context is the first part of the string separated with the EOT char (\u0004)
         *
         * @param string $string
         *
         * @return array
         */
        private function get_string_and_context($string)
        {
        }
    }
    class WPML_ST_Translations_File_Locale
    {
        const PATTERN_SEARCH_LANG_JSON = '#DOMAIN_PLACEHOLDER(LOCALES_PLACEHOLDER)-[-_a-z0-9]+\\.json$#i';
        /** @var \SitePress */
        private $sitepress;
        /** @var \WPML_Locale */
        private $locale;
        /**
         * @param SitePress   $sitepress
         * @param WPML_Locale $locale
         */
        public function __construct(\SitePress $sitepress, \WPML_Locale $locale)
        {
        }
        /**
         * It extracts language code from mo file path, examples
         * '/wp-content/languages/admin-pl_PL.mo' => 'pl'
         * '/wp-content/plugins/sitepress/sitepress-hr.mo' => 'hr'
         * '/wp-content/languages/fr_FR-4gh5e6d3g5s33d6gg51zas2.json' => 'fr_FR'
         * '/wp-content/plugins/my-plugin/languages/-my-plugin-fr_FR-my-handler.json' => 'fr_FR'
         *
         * @param string $filepath
         * @param string $domain
         *
         * @return string
         */
        public function get($filepath, $domain)
        {
        }
        /**
         * @param string $filepath
         *
         * @return string|null
         */
        private function get_extension($filepath)
        {
        }
        /**
         * @param string $filepath
         *
         * @return string
         */
        private function get_from_mo_file($filepath)
        {
        }
        /**
         * @param string $filepath
         * @param string $domain
         *
         * @return string
         */
        private function get_from_json_file($filepath, $domain)
        {
        }
        /**
         * We need the original domain name to refine the regex pattern.
         * Unfortunately, the domain is concatenated with the script handler
         * in the import queue table. That's why we need to retrieve the original
         * domain from the registration domain and the filepath.
         *
         * @param string $filepath
         * @param string $domain
         *
         * @return string
         */
        private function get_original_domain_for_json($filepath, $domain)
        {
        }
        /**
         * @return \WPML\Collect\Support\Collection
         */
        private function get_locales()
        {
        }
    }
    class WPML_ST_Translations_File_MO implements \IWPML_ST_Translations_File
    {
        /** @var string $filepath */
        private $filepath;
        /**
         * @param string $filepath
         */
        public function __construct($filepath)
        {
        }
        /**
         * @return WPML_ST_Translations_File_Translation[]
         */
        public function get_translations()
        {
        }
    }
    interface WPML_ST_Translations_File_Dictionary_Storage
    {
        public function save(\WPML_ST_Translations_File_Entry $file);
        /**
         * @param null|string $path
         * @param null|string $status
         *
         * @return WPML_ST_Translations_File_Entry[]
         */
        public function find($path = \null, $status = \null);
    }
    class WPML_ST_Translations_File_Dictionary_Storage_Table implements \WPML_ST_Translations_File_Dictionary_Storage
    {
        /** @var wpdb */
        private $wpdb;
        /** @var null|array */
        private $data;
        /** @var WPML_ST_Translations_File_Entry[] */
        private $new_data = array();
        /** @var WPML_ST_Translations_File_Entry[] */
        private $updated_data = array();
        /**
         * @param wpdb $wpdb
         */
        public function __construct(\wpdb $wpdb)
        {
        }
        public function add_hooks()
        {
        }
        public function save(\WPML_ST_Translations_File_Entry $file)
        {
        }
        /**
         * We have to postpone saving of real data because target table may not be created yet by migration process
         */
        public function persist()
        {
        }
        /**
         * @param WPML_ST_Translations_File_Entry $file
         * @param array                           $data
         *
         * @return array
         */
        private function file_to_array(\WPML_ST_Translations_File_Entry $file, array $data = array())
        {
        }
        public function find($path = \null, $status = \null)
        {
        }
        private function load_data()
        {
        }
        public function reset()
        {
        }
    }
    class WPML_ST_Translations_File_Translation
    {
        /** @var string */
        private $original;
        /** @var string */
        private $translation;
        /** @var string */
        private $context;
        /**
         * @param string $original
         * @param string $translation
         * @param string $context
         */
        public function __construct($original, $translation, $context = '')
        {
        }
        /**
         * @return string
         */
        public function get_original()
        {
        }
        /**
         * @return string
         */
        public function get_translation()
        {
        }
        /**
         * @return string
         */
        public function get_context()
        {
        }
    }
    class WPML_ST_Translations_File_Unicode_Characters_Filter
    {
        /** @var string */
        private $pattern;
        public function __construct()
        {
        }
        /**
         * @param WPML_ST_Translations_File_Translation[] $translations
         *
         * @return WPML_ST_Translations_File_Translation[]
         */
        public function filter(array $translations)
        {
        }
        /**
         * @param WPML_ST_Translations_File_Translation $translations
         *
         * @return bool
         */
        public function is_valid(\WPML_ST_Translations_File_Translation $translation)
        {
        }
    }
    interface WPML_ST_Translations_File_Scan_Charset_Validation
    {
        /**
         * @return bool
         */
        public function is_valid();
    }
    class WPML_ST_Translations_File_Scan_Db_Charset_Filter_Factory
    {
        /** @var wpdb $wpdb */
        private $wpdb;
        public function __construct(\wpdb $wpdb)
        {
        }
        public function create()
        {
        }
    }
    class WPML_ST_Translations_File_Scan_Db_Charset_Validation implements \WPML_ST_Translations_File_Scan_Charset_Validation
    {
        /** @var wpdb */
        private $wpdb;
        /** @var WPML_ST_Translations_File_Scan_Db_Table_List */
        private $table_list;
        /**
         * @param wpdb                                         $wpdb
         * @param WPML_ST_Translations_File_Scan_Db_Table_List $table_list
         */
        public function __construct(\wpdb $wpdb, \WPML_ST_Translations_File_Scan_Db_Table_List $table_list)
        {
        }
        /**
         * @return bool
         */
        public function is_valid()
        {
        }
        /**
         * @param string $table
         *
         * @return array
         */
        private function get_unique_collation_list_from_table($table)
        {
        }
    }
    class WPML_ST_Translations_File_Scan_Db_Table_List
    {
        /** @var wpdb */
        private $wpdb;
        /**
         * @param wpdb $wpdb
         */
        public function __construct(\wpdb $wpdb)
        {
        }
        /**
         * @return array
         */
        public function get_tables()
        {
        }
    }
    class WPML_ST_Translations_File_Component_Stats_Update_Hooks
    {
        /** @var WPML_ST_Strings_Stats */
        private $string_stats;
        /**
         * @param WPML_ST_Strings_Stats $string_stats
         */
        public function __construct(\WPML_ST_Strings_Stats $string_stats)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param WPML_ST_Translations_File_Entry $file
         */
        public function update_stats(\WPML_ST_Translations_File_Entry $file)
        {
        }
    }
}
namespace WPML\ST\TranslationFile {
    class EntryQueries
    {
        /**
         * @param string $type
         *
         * @return \Closure
         */
        public static function isType($type)
        {
        }
        /**
         * @param $extension
         *
         * @return \Closure
         */
        public static function isExtension($extension)
        {
        }
        /**
         * @return \Closure
         */
        public static function getResourceName()
        {
        }
        /**
         * @return \Closure
         */
        public static function getDomain()
        {
        }
        /**
         * @param \WPML_ST_Translations_File_Entry $entry
         *
         * @return string
         */
        private static function getPluginName(\WPML_ST_Translations_File_Entry $entry)
        {
        }
        /**
         * @param \WPML_ST_Translations_File_Entry $entry
         *
         * @return string
         */
        private static function getThemeName(\WPML_ST_Translations_File_Entry $entry)
        {
        }
        /**
         * @param \WPML_ST_Translations_File_Entry $entry
         *
         * @return mixed|string|void
         */
        private static function getOtherName(\WPML_ST_Translations_File_Entry $entry)
        {
        }
    }
}
namespace {
    class WPML_ST_Translations_File_Scan
    {
        /**
         * @var WPML_ST_Translations_File_Scan_Db_Charset_Filter_Factory
         */
        private $charset_filter_factory;
        /**
         * @param WPML_ST_Translations_File_Scan_Db_Charset_Filter_Factory $charset_filter_factory
         */
        public function __construct(\WPML_ST_Translations_File_Scan_Db_Charset_Filter_Factory $charset_filter_factory)
        {
        }
        /**
         * @param string $file
         *
         * @return WPML_ST_Translations_File_Translation[]
         */
        public function load_translations($file)
        {
        }
    }
}
namespace WPML\ST\Troubleshooting\Cleanup {
    class Database
    {
        /** @var wpdb $wpdb */
        private $wpdb;
        /** @var WPML_ST_Translations_File_Dictionary $dictionary */
        private $dictionary;
        public function __construct(\wpdb $wpdb, \WPML_ST_Translations_File_Dictionary $dictionary)
        {
        }
        public function deleteStringsFromImportedMoFiles()
        {
        }
        private function deleteOnlyNativeMoStringTranslations(array $moDomains)
        {
        }
        private function deleteMoStringsWithNoTranslation(array $moDomains)
        {
        }
        private function optimizeStringTables()
        {
        }
        public function truncatePagesAndUrls()
        {
        }
        /**
         * @param string $table
         *
         * @return bool
         */
        private function tableExists($table)
        {
        }
    }
}
namespace WPML\ST\Troubleshooting {
    class AjaxFactory implements \IWPML_AJAX_Action_Loader
    {
        const ACTION_SHOW_GENERATE_DIALOG = 'wpml_st_mo_generate_show_dialog';
        const ACTION_CLEANUP = 'wpml_st_troubleshooting_cleanup';
        public function create()
        {
        }
        /**
         * @return \WPML\Collect\Support\Collection
         */
        public static function getActions()
        {
        }
        /**
         * @return \Closure
         */
        public static function buildHandler()
        {
        }
        /**
         * @throws \Auryn\InjectionException
         */
        public static function showGenerateDialog()
        {
        }
        /**
         * @throws \Auryn\InjectionException
         */
        public static function cleanup()
        {
        }
    }
    class BackendHooks implements \IWPML_Backend_Action, \IWPML_DIC_Action
    {
        const SCRIPT_HANDLE = 'wpml-st-troubleshooting';
        const NONCE_KEY = 'wpml-st-troubleshooting';
        /** @var DomainsAndLanguagesRepository $domainsAndLanguagesRepo */
        private $domainsAndLanguagesRepo;
        public function __construct(\WPML\ST\MO\Generate\DomainsAndLanguagesRepository $domainsAndLanguagesRepo)
        {
        }
        public function add_hooks()
        {
        }
        public function displayButtons()
        {
        }
        /**
         * @param string       $action
         * @param string       $buttonLabel
         * @param string|false $confirmationMessage A string to display or false if we want to immediately reload.
         */
        private function displayButton($action, $buttonLabel, $confirmationMessage)
        {
        }
        /**
         * @param string $hook
         */
        public function loadJS($hook)
        {
        }
    }
    class RequestHandle implements \IWPML_Action
    {
        /** @var string $action */
        private $action;
        /** @var callable $callback */
        private $callback;
        public function __construct($action, $callback)
        {
        }
        public function add_hooks()
        {
        }
        public function handle()
        {
        }
    }
}
namespace {
    class WPML_PO_Import_Strings
    {
        const NONCE_NAME = 'wpml-po-import-strings';
        private $errors;
        public function maybe_import_po_add_strings()
        {
        }
        /**
         * @return null|WPML_PO_Import
         */
        public function import_po()
        {
        }
        /**
         * @return string
         */
        public function get_errors()
        {
        }
        private function add_strings()
        {
        }
        /**
         * @param string $string_id
         * @param obj $string
         */
        private function maybe_add_translation($string_id, $string)
        {
        }
    }
    class WPML_PO_Import_Strings_Scripts
    {
        public function __construct()
        {
        }
        public function init()
        {
        }
        public function enqueue_scripts($page_hook)
        {
        }
    }
}
namespace WPML\ST\PackageTranslation {
    class Hooks implements \IWPML_Action, \IWPML_Backend_Action, \IWPML_Frontend_Action
    {
        public function add_hooks()
        {
        }
    }
}
namespace {
    class WPML_ST_Package_Cleanup
    {
        private $existing_strings_in_package = array();
        public function record_existing_strings(\WPML_Package $package)
        {
        }
        public function record_register_string(\WPML_Package $package, $string_id)
        {
        }
        public function delete_unused_strings(\WPML_Package $package)
        {
        }
    }
}
namespace WPML\ST\PackageTranslation {
    class Assign
    {
        /**
         * Assign all strings from specified domain to existing package.
         *
         * @param  string  $domainName
         * @param  int  $packageId
         *
         * @since 3.1.0
         */
        public static function stringsFromDomainToExistingPackage($domainName, $packageId)
        {
        }
        /**
         * Assign all strings from specified domain to new package which is created on fly.
         *
         * @param  string  $domainName
         * @param  array  $packageData  {
         *
         * @type string $kind_slug e.g. toolset_forms
         * @type string $kind e.g. "Toolset forms"
         * @type string $name e.g. "1"
         * @type string $title e.g. "Form 1"
         * @type string $edit_link URL to edit page of resource
         * @type string $view_link (Optional) Url to frontend view page of resource
         * @type int $page_id (optional)
         * }
         * @since 3.1.0
         */
        public static function stringsFromDomainToNewPackage($domainName, array $packageData)
        {
        }
    }
}
namespace {
    /**
     * Created by PhpStorm.
     * User: bruce
     * Date: 16/06/17
     * Time: 10:57 AM
     */
    class WPML_ST_Package_Storage
    {
        /** @var  int $package_id */
        private $package_id;
        /** @var  wpdb $this ->wpdb */
        private $wpdb;
        /**
         * WPML_ST_Package_Storage constructor.
         *
         * @param int $package_id
         * @param wpdb $this ->wpdb
         */
        public function __construct($package_id, \wpdb $wpdb)
        {
        }
        /**
         * @param string $string_title
         * @param string $string_type
         * @param string $string_value
         * @param int $string_id
         *
         * @return bool
         */
        public function update($string_title, $string_type, $string_value, $string_id)
        {
        }
        private function set_string_status_to_needs_update_if_translated($string_id)
        {
        }
        private function set_translations_to_needs_update()
        {
        }
        private function truncate_long_string($string)
        {
        }
    }
}
namespace WPML\ST\Main\Ajax {
    class FetchTranslationMemory implements \WPML\Ajax\IHandler
    {
        /** @var \WPML_ST_Translation_Memory_Records $records */
        private $records;
        public function __construct(\WPML_ST_Translation_Memory_Records $records)
        {
        }
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
        private function fetchBatchStrings($strings)
        {
        }
        public function fetchSingleString($data)
        {
        }
    }
}
namespace {
    class WPML_ST_Translation_Memory_Records
    {
        /** @var wpdb $wpdb */
        private $wpdb;
        public function __construct(\wpdb $wpdb)
        {
        }
        /**
         * @param array $strings
         * @param string $source_lang
         * @param string $target_lang
         *
         * @return array
         */
        public function get($strings, $source_lang, $target_lang)
        {
        }
        private function also_match_alternative_line_breaks($strings)
        {
        }
        private function also_include_matches_for_alternative_line_breaks($records)
        {
        }
    }
    class WPML_ST_Translation_Memory implements \IWPML_AJAX_Action, \IWPML_Backend_Action, \IWPML_DIC_Action
    {
        /** @var WPML_ST_Translation_Memory_Records $records */
        private $records;
        public function __construct(\WPML_ST_Translation_Memory_Records $records)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param array $empty_array
         * @param array $args with keys
         *                  - `strings` an array of strings
         *                  - `source_lang`
         *                  - `target_lang`
         *
         * @return stdClass[]
         */
        public function get_translation_memory($empty_array, $args)
        {
        }
    }
    class WPML_ST_String_Dependencies_Node
    {
        /** @var WPML_ST_String_Dependencies_Node|null $parent */
        private $parent;
        /** @var WPML_ST_String_Dependencies_Node[] $children */
        private $children = array();
        /** @var bool $iteration_completed */
        private $iteration_completed = \false;
        /** @var int|null $id */
        private $id;
        /** @var string|null $type */
        private $type;
        /** @var bool|null $needs_refresh */
        private $needs_refresh;
        public function __construct($id = \null, $type = \null)
        {
        }
        public function get_id()
        {
        }
        public function get_type()
        {
        }
        public function set_needs_refresh($needs_refresh)
        {
        }
        public function get_needs_refresh()
        {
        }
        public function set_parent(\WPML_ST_String_Dependencies_Node $node)
        {
        }
        public function get_parent()
        {
        }
        public function add_child(\WPML_ST_String_Dependencies_Node $node)
        {
        }
        public function remove_child(\WPML_ST_String_Dependencies_Node $node)
        {
        }
        public function detach()
        {
        }
        /**
         * Iteration DFS in post-order
         *
         * @return WPML_ST_String_Dependencies_Node
         */
        public function get_next()
        {
        }
        /**
         * Search DFS in pre-order
         *
         * @param int    $id
         * @param string $type
         *
         * @return bool|WPML_ST_String_Dependencies_Node
         */
        public function search($id, $type)
        {
        }
        public function iteration_completed()
        {
        }
        /**
         * @return string|stdClass
         */
        public function to_json()
        {
        }
        /**
         * @param string|self $object
         */
        public function from_json($object)
        {
        }
        private function get_item_properties()
        {
        }
        private function get_hash()
        {
        }
    }
    class WPML_ST_String_Dependencies_Records
    {
        /** @var wpdb $wpdb */
        private $wpdb;
        public function __construct(\wpdb $wpdb)
        {
        }
        /**
         * @param string $type
         * @param int    $id
         *
         * @return int
         */
        public function get_parent_id_from($type, $id)
        {
        }
        /**
         * @param string $type
         * @param int    $id
         *
         * @return array
         */
        public function get_child_ids_from($type, $id)
        {
        }
    }
    class WPML_ST_String_Dependencies_Builder
    {
        /** @var WPML_ST_String_Dependencies_Records $records */
        private $records;
        private $types_map = array('post' => 'package', 'package' => 'string');
        public function __construct(\WPML_ST_String_Dependencies_Records $records)
        {
        }
        /**
         * @param string $type
         * @param int    $id
         *
         * @return WPML_ST_String_Dependencies_Node
         */
        public function from($type, $id)
        {
        }
        /**
         * @param WPML_ST_String_Dependencies_Node $node
         *
         * @return WPML_ST_String_Dependencies_Node
         */
        private function populate_node(\WPML_ST_String_Dependencies_Node $node)
        {
        }
        /**
         * @param string $type
         *
         * @return false|string
         */
        private function get_parent_type($type)
        {
        }
        /**
         * @param string $type
         *
         * @return null|string
         */
        private function get_child_type($type)
        {
        }
    }
}
namespace WPML\ST\Utils {
    class LanguageResolution
    {
        /** @var SitePress $sitepress */
        private $sitepress;
        /** @var WPML_String_Translation $string_translation */
        private $string_translation;
        /** @var null|string $admin_language */
        private $admin_language;
        public function __construct(\SitePress $sitepress, \WPML_String_Translation $string_translation)
        {
        }
        /** @return bool|mixed|string|null */
        public function getCurrentLanguage()
        {
        }
        /**  */
        public function getCurrentLocale()
        {
        }
        /** @return string */
        private function getAdminLanguage()
        {
        }
    }
}
namespace {
    class WPML_ST_Scan_Dir
    {
        const PLACEHOLDERS_ROOT = '<root>';
        /**
         * @param string $folder
         * @param array $extensions
         * @param bool $single_file
         * @param array $ignore_folders
         *
         * @return array
         */
        public function scan($folder, array $extensions = array(), $single_file = \false, $ignore_folders = array())
        {
        }
    }
}
namespace WPML\ST\WP\App {
    class Resources
    {
        // enqueueApp :: string $app -> ( string $localizeData )
        public static function enqueueApp($app)
        {
        }
    }
}
namespace WPML\ST\Container {
    class Config
    {
        public static function getSharedClasses()
        {
        }
        public static function getAliases()
        {
        }
        public static function getDelegated()
        {
        }
    }
}
namespace {
    class WPML_ST_Initialize
    {
        public function load()
        {
        }
        public function run()
        {
        }
        private function hasMinimalCoreRequirements()
        {
        }
        private function includeAutoloader()
        {
        }
        private function configureDIC()
        {
        }
        private function loadEarlyHooks()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_ST_Support_Info_Filter implements \IWPML_Backend_Action, \IWPML_DIC_Action
    {
        /** @var WPML_ST_Support_Info */
        private $support_info;
        function __construct(\WPML_ST_Support_Info $support_info)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param array $blocks
         *
         * @return array
         */
        public function filter_blocks(array $blocks)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_ST_Support_Info
    {
        public function is_mbstring_extension_loaded()
        {
        }
    }
    class WPML_ST_Admin_Blog_Option extends \WPML_SP_User
    {
        /** @var WPML_ST_Admin_Option_Translation $admin_option */
        private $admin_option;
        /**
         * WPML_ST_Admin_Blog_Option constructor.
         *
         * @param SitePress               $sitepress
         * @param WPML_String_Translation $st_instance
         * @param string                  $option_name
         */
        public function __construct(&$sitepress, &$st_instance, $option_name)
        {
        }
        /**
         * @param string $old_value
         * @param string $new_value
         *
         * @return mixed
         */
        public function pre_update_filter($old_value, $new_value)
        {
        }
    }
    class WPML_ST_Admin_Option_Translation extends \WPML_SP_User
    {
        /** @var  WPML_String_Translation $st_instance */
        private $st_instance;
        /** @var  string $option_name */
        private $option_name;
        /** @var  string $option_name */
        private $language;
        /**
         * WPML_ST_Admin_Option constructor.
         *
         * @param SitePress               $sitepress
         * @param WPML_String_Translation $st_instance
         * @param string                  $option_name
         * @param string                  $language
         */
        public function __construct(&$sitepress, &$st_instance, $option_name, $language = '')
        {
        }
        /**
         *
         * @param string   $option_name
         * @param string   $new_value
         * @param int|bool $status
         * @param int      $translator_id
         * @param int      $rec_level
         *
         * @return boolean|mixed
         */
        public function update_option($option_name = '', $new_value = \null, $status = \false, $translator_id = \null, $rec_level = 0)
        {
        }
    }
    class WPML_ST_Bulk_Update_Strings_Status
    {
        /** @var wpdb $wpdb */
        private $wpdb;
        /** @var array $active_lang_codes */
        private $active_lang_codes;
        public function __construct(\wpdb $wpdb, array $active_lang_codes)
        {
        }
        /**
         * This bulk process was transposed from PHP code
         *
         * @see WPML_ST_String::update_status
         *
         * Important: The order we call each method is important because it reflects
         * the order of the conditions in WPML_ST_String::update_status. The updated IDs
         * will not be updated anymore in the subsequent calls.
         *
         * @return array updated IDs
         */
        public function run()
        {
        }
        /**
         * @return array
         */
        private function update_strings_with_no_translation()
        {
        }
        /**
         * @param array $updated_ids
         *
         * @return array
         */
        private function update_strings_with_all_translations_not_translated(array $updated_ids)
        {
        }
        /**
         * @param array $updated_ids
         *
         * @return array
         */
        private function update_strings_with_one_translation_waiting_for_translator(array $updated_ids)
        {
        }
        /**
         * @param array $updated_ids
         *
         * @return array
         */
        private function update_strings_with_one_translation_needs_update(array $updated_ids)
        {
        }
        /**
         * @param array $updated_ids
         *
         * @return array
         */
        private function update_strings_with_less_translations_than_langs_and_one_translation_completed(array $updated_ids)
        {
        }
        /**
         * @param array $updated_ids
         *
         * @return array
         */
        private function update_strings_with_less_translations_than_langs_and_no_translation_completed(array $updated_ids)
        {
        }
        /**
         * Defaults to ICL_STRING_TRANSLATION_PARTIAL if not caught before
         *
         * @param array $updated_ids
         *
         * @return array
         */
        private function update_remaining_strings_with_one_not_translated(array $updated_ids)
        {
        }
        /**
         * Defaults to ICL_TM_COMPLETE if not caught before
         *
         * @param array $updated_ids
         *
         * @return array
         */
        private function update_remaining_strings(array $updated_ids)
        {
        }
        /**
         * @param string $subquery
         * @param array  $updated_ids
         * @param int    $new_status
         *
         * @return array
         */
        private function update_string_ids_if_subquery_exists($subquery, array $updated_ids, $new_status)
        {
        }
        /**
         * Subquery for the string translations
         *
         * @return string
         */
        private function get_translations_snippet()
        {
        }
        /**
         * Subquery where translations are less than the number of secondary languages:
         * - the string translation language must be different than the string language
         * - the string translation language must be part of the active languages
         *
         * @return string
         */
        private function get_and_translations_less_than_secondary_languages_snippet()
        {
        }
        /**
         * @param array $updated_ids
         *
         * @return string
         */
        private function get_and_not_in_updated_snippet(array $updated_ids)
        {
        }
        /**
         * @param array $ids
         * @param int   $status
         */
        private function update_strings_status(array $ids, $status)
        {
        }
    }
}
namespace WPML\ST\DB\Mappers {
    class Hooks implements \IWPML_Action, \IWPML_Backend_Action, \IWPML_Frontend_Action
    {
        public function add_hooks()
        {
        }
    }
    class Update
    {
        /**
         * @param  callable  $getStringById
         * @param  int  $stringId
         * @param  string  $domain
         *
         * @return bool
         */
        public static function moveStringToDomain(callable $getStringById, $stringId, $domain)
        {
        }
        /**
         * @param $oldDomain
         * @param $newDomain
         *
         * @return int
         */
        public static function moveAllStringsToNewDomain($oldDomain, $newDomain)
        {
        }
        private static function regenerateMOFiles($oldDomain, $newDomain)
        {
        }
    }
    class StringsRetrieve
    {
        /** @var wpdb $wpdb */
        private $wpdb;
        /** @var WPML_DB_Chunk $chunk_retrieve */
        private $chunk_retrieve;
        public function __construct(\wpdb $wpdb, \WPML_DB_Chunk $chunk_retrieve)
        {
        }
        /**
         * @param string $language
         * @param string $domain
         * @param bool   $modified_mo_only
         *
         * @return array
         */
        public function get($language, $domain, $modified_mo_only = false)
        {
        }
        /**
         * @param string $language
         * @param string $domain
         * @param bool   $modified_mo_only
         *
         * @return int
         */
        private function get_number_of_strings_in_domain($language, $domain, $modified_mo_only)
        {
        }
        /**
         * @param string $language
         *
         * @return string
         */
        private function getStringTranslationJoin()
        {
        }
        /** @return string */
        private function getDomainWhere()
        {
        }
        /** @return string */
        private function getModifiedMOOnlyWhere()
        {
        }
    }
}
namespace {
    class WPML_ST_DB_Mappers_Strings
    {
        /**
         * @var wpdb
         */
        private $wpdb;
        /**
         * @param wpdb $wpdb
         */
        public function __construct(\wpdb $wpdb)
        {
        }
        /**
         * @param string $context
         *
         * @return array
         */
        public function get_all_by_context($context)
        {
        }
        /**
         * Get a single string row by its domain and value
         *
         * @param string $domain
         * @param string $value
         *
         * @return array
         */
        public function getByDomainAndValue($domain, $value)
        {
        }
        /**
         * Get a single string row by its id
         *
         * @param int $id
         *
         * @return array
         */
        public function getById($id)
        {
        }
    }
    class WPML_ST_DB_Mappers_String_Positions
    {
        /**
         * @var wpdb
         */
        private $wpdb;
        /**
         * @param wpdb $wpdb
         */
        public function __construct(\wpdb $wpdb)
        {
        }
        /**
         * @param $string_id
         * @param $kind
         *
         * @return int
         */
        public function get_count_of_positions_by_string_and_kind($string_id, $kind)
        {
        }
        /**
         * @param int $string_id
         * @param int $kind
         *
         * @return array
         */
        public function get_positions_by_string_and_kind($string_id, $kind)
        {
        }
        /**
         * @param $string_id
         * @param $position
         * @param $kind
         *
         * @return bool
         */
        public function is_string_tracked($string_id, $position, $kind)
        {
        }
        /**
         * @param $string_id
         * @param $position
         * @param $kind
         */
        public function insert($string_id, $position, $kind)
        {
        }
    }
    class WPML_ST_Bulk_Strings_Insert_Exception extends \Exception
    {
    }
    class WPML_ST_Bulk_Strings_Insert
    {
        /** @var wpdb */
        private $wpdb;
        /** @var int  */
        private $chunk_size = 1000;
        /**
         * @param wpdb $wpdb
         */
        public function __construct(\wpdb $wpdb)
        {
        }
        /**
         * @param int $chunk_size
         */
        public function set_chunk_size($chunk_size)
        {
        }
        /**
         * @param WPML_ST_Models_String[] $strings
         */
        public function insert_strings(array $strings)
        {
        }
        /**
         * @param WPML_ST_Models_String_Translation[] $translations
         */
        public function insert_string_translations(array $translations)
        {
        }
        /**
         * @param WPML_ST_Models_String $string
         *
         * @return string
         */
        private function build_string_row(\WPML_ST_Models_String $string)
        {
        }
        /**
         * @param WPML_ST_Models_String_Translation $translation
         *
         * @return string
         */
        private function build_translation_row(\WPML_ST_Models_String_Translation $translation)
        {
        }
    }
    class WPML_ST_Models_String_Translation
    {
        /** @var int */
        private $string_id;
        /** @var string */
        private $language;
        /** @var int */
        private $status;
        /** @var string */
        private $value;
        /** @var string */
        private $mo_string;
        /**
         * @param int $string_id
         * @param string $language
         * @param int $status
         * @param string $value
         */
        public function __construct($string_id, $language, $status, $value, $mo_string)
        {
        }
        /**
         * @return int
         */
        public function get_string_id()
        {
        }
        /**
         * @return string
         */
        public function get_language()
        {
        }
        /**
         * @return int
         */
        public function get_status()
        {
        }
        /**
         * @return string
         */
        public function get_value()
        {
        }
        /**
         * @return string
         */
        public function get_mo_string()
        {
        }
    }
    class WPML_ST_Models_String
    {
        /** @var string */
        private $language;
        /** @var string */
        private $domain;
        /** @var string */
        private $context;
        /** @var string */
        private $value;
        /** @var int */
        private $status;
        /** @var string */
        private $name;
        /** @var string */
        private $domain_name_context_md5;
        /**
         * @param string $language
         * @param string $domain
         * @param string $context
         * @param string $value
         * @param int $status
         * @param string|null $name
         */
        public function __construct($language, $domain, $context, $value, $status, $name = \null)
        {
        }
        /**
         * @return string
         */
        public function get_language()
        {
        }
        /**
         * @return string
         */
        public function get_domain()
        {
        }
        /**
         * @return string
         */
        public function get_context()
        {
        }
        /**
         * @return string
         */
        public function get_value()
        {
        }
        /**
         * @return int
         */
        public function get_status()
        {
        }
        /**
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * @return string
         */
        public function get_domain_name_context_md5()
        {
        }
    }
    class WPML_ST_Word_Count_Package_Records
    {
        /** @var wpdb */
        private $wpdb;
        public function __construct(\wpdb $wpdb)
        {
        }
        /** @return array */
        public function get_all_package_ids()
        {
        }
        /** @return array */
        public function get_packages_ids_without_word_count()
        {
        }
        /** @return array */
        public function get_word_counts($post_id)
        {
        }
        /**
         * @param int    $package_id
         * @param string $word_count
         */
        public function set_word_count($package_id, $word_count)
        {
        }
        /**
         * @param int $package_id
         *
         * @return null|string
         */
        public function get_word_count($package_id)
        {
        }
        public function reset_all(array $package_kinds)
        {
        }
        /**
         * @param array $kinds
         *
         * @return array
         */
        public function get_ids_from_kind_slugs(array $kinds)
        {
        }
        /**
         * @param array $post_types
         *
         * @return array
         */
        public function get_ids_from_post_types(array $post_types)
        {
        }
        /**
         * @param string $kind_slug
         *
         * @return int
         */
        public function count_items_by_kind_not_part_of_posts($kind_slug)
        {
        }
        /**
         * @param string $kind_slug
         *
         * @return int
         */
        public function count_word_counts_by_kind($kind_slug)
        {
        }
        /**
         * @param string $kind_slug
         *
         * @return array
         */
        public function get_word_counts_by_kind($kind_slug)
        {
        }
    }
    class WPML_ST_Word_Count_String_Records
    {
        const CACHE_GROUP = __CLASS__;
        /** @var wpdb */
        private $wpdb;
        public function __construct(\wpdb $wpdb)
        {
        }
        /** @return int */
        public function get_total_words()
        {
        }
        /** @return array */
        public function get_all_values_without_word_count()
        {
        }
        /**
         * @param string      $lang
         * @param null|string $package_id
         *
         * @return int
         */
        public function get_words_to_translate_per_lang($lang, $package_id = \null)
        {
        }
        /**
         * @param int $string_id
         *
         * @return stdClass
         */
        public function get_value_and_language($string_id)
        {
        }
        /**
         * @param int $string_id
         * @param int $word_count
         */
        public function set_word_count($string_id, $word_count)
        {
        }
        /**
         * @param int $string_id
         *
         * @return int
         */
        public function get_word_count($string_id)
        {
        }
        public function reset_all()
        {
        }
        /**
         * @param array $package_ids
         *
         * @return array
         */
        public function get_ids_from_package_ids(array $package_ids)
        {
        }
    }
}
namespace WPML\ST\DB\Mappers {
    class StringTranslations
    {
        /**
         * @param  \wpdb  $wpdb
         * @param  int  $stringId
         * @param  string  $language
         *
         * @return callable|bool
         */
        public static function hasTranslation($wpdb = null, $stringId = null, $language = null)
        {
        }
    }
    /**
     * Class DomainsRepository
     * @package WPML\ST\DB\Mappers
     *
     * @method static callable|array getByStringIds( ...$stringIds ) - Curried :: int[]->string[]
     *
     */
    class DomainsRepository
    {
        use \WPML\FP\Curryable;
        public static function init()
        {
        }
    }
}
namespace WPML\ST {
    class Actions
    {
        public static function get()
        {
        }
    }
}
namespace {
    class WPML_ST_Remote_String_Translation_Factory implements \IWPML_Backend_Action_Loader, \IWPML_Action
    {
        public function create()
        {
        }
        public function add_hooks()
        {
        }
        public function on_tm_loaded()
        {
        }
    }
    class WPML_ST_WP_Loaded_Action extends \WPML_SP_User
    {
        /** @var WPML_String_Translation $st_instance */
        private $st_instance;
        /** @var string $pagenow */
        private $pagenow;
        /** @var string $get_page */
        private $get_page;
        public function __construct(&$sitepress, &$st_instance, &$pagenow, $get_page)
        {
        }
        public function run()
        {
        }
    }
    class WPML_ST_DB_Troubleshooting extends \WPML_Templates_Factory
    {
        public function add_hooks()
        {
        }
        public function add_required_js()
        {
        }
        public function get_template()
        {
        }
        protected function init_template_base_dir()
        {
        }
        public function get_model()
        {
        }
    }
    class WPML_ST_Theme_Localization_Utils
    {
        /** @return array */
        public function get_theme_data()
        {
        }
    }
    class WPML_ST_Theme_Plugin_Localization_Resources
    {
        public function add_hooks()
        {
        }
        public function enqueue_scripts()
        {
        }
        private function get_active_items()
        {
        }
    }
    class WPML_ST_Plugin_Localization_Utils
    {
        /** @return array */
        public function get_plugins()
        {
        }
        /**
         * @param string $plugin_file
         *
         * @return bool
         */
        public function is_plugin_active($plugin_file)
        {
        }
        public function get_plugins_by_status($active)
        {
        }
    }
    class WPML_ST_Theme_Plugin_Localization_Options_Settings implements \IWPML_Action
    {
        public function add_hooks()
        {
        }
        /**
         * @param array $settings
         *
         * @return array
         */
        public function add_st_settings($settings)
        {
        }
    }
    class WPML_ST_Theme_Plugin_Localization_Options_UI
    {
        /** @var array */
        private $st_settings;
        /**
         * WPML_ST_Theme_Plugin_Localization_Options_UI constructor.
         *
         * @param array $st_settings
         */
        public function __construct($st_settings)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param array $model
         *
         * @return array
         */
        public function add_st_options($model)
        {
        }
    }
    class WPML_ST_Theme_Plugin_Localization_Resources_Factory implements \IWPML_Backend_Action_Loader
    {
        /** @return WPML_ST_Theme_Plugin_Localization_Resources */
        public function create()
        {
        }
    }
    class WPML_ST_Theme_Plugin_Localization_Options_UI_Factory implements \IWPML_Backend_Action_Loader, \IWPML_Deferred_Action_Loader
    {
        /** @return WPML_ST_Theme_Plugin_Localization_Options_UI */
        public function create()
        {
        }
        /** @return string */
        public function get_load_action()
        {
        }
    }
    class WPML_ST_Theme_Plugin_Localization_Options_Settings_Factory implements \IWPML_Backend_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_ST_Theme_Localization_UI_Factory
    {
        const TEMPLATE_PATH = '/templates/theme-plugin-localization/';
        /**
         * @return WPML_ST_Theme_Localization_UI
         */
        public function create()
        {
        }
    }
    class WPML_ST_Plugin_Localization_UI_Factory
    {
        /**
         * @return WPML_ST_Plugin_Localization_UI
         */
        public function create()
        {
        }
    }
    class WPML_ST_Theme_Localization_UI implements \IWPML_Theme_Plugin_Localization_UI_Strategy
    {
        /** @var WPML_ST_Theme_Localization_UI */
        private $utils;
        /** @var string */
        private $template_path;
        /** @var WPML_Localization */
        private $localization;
        /**
         * WPML_ST_Theme_Localization_UI constructor.
         *
         * @param WPML_Localization $localization
         * @param WPML_ST_Theme_Localization_Utils $utils
         * @param string $template_path
         */
        public function __construct(\WPML_Localization $localization, \WPML_ST_Theme_Localization_Utils $utils, $template_path)
        {
        }
        /** @return array */
        public function get_model()
        {
        }
        /** @return array */
        private function get_components()
        {
        }
        /**
         * @param string $domain
         * @param array $stats
         *
         * @return array
         */
        private function get_component($domain, array $stats)
        {
        }
        /** @return string */
        public function get_template()
        {
        }
    }
    class WPML_ST_Plugin_Localization_UI implements \IWPML_Theme_Plugin_Localization_UI_Strategy
    {
        /** @var WPML_ST_Plugin_Localization_Utils */
        private $utils;
        /** @var WPML_Localization */
        private $localization;
        /** @var string */
        private $base_st_url;
        /**
         * WPML_ST_Plugin_Localization_UI constructor.
         *
         * @param WPML_Localization $localization
         * @param WPML_ST_Plugin_Localization_Utils $utils
         */
        public function __construct(\WPML_Localization $localization, \WPML_ST_Plugin_Localization_Utils $utils)
        {
        }
        /**
         * @return array
         */
        public function get_model()
        {
        }
        /**
         * @param array $plugins
         * @param array $plugin_stats
         *
         * @return array
         */
        private function get_components($plugins, $plugin_stats)
        {
        }
        /**
         * @param string $domain
         * @param array $stats
         *
         * @return array
         */
        private function get_component($domain, array $stats)
        {
        }
        /** @return string */
        public function get_template()
        {
        }
    }
}
namespace WPML\ST\Rest {
    abstract class Base extends \WPML\Rest\Base
    {
        /**
         * @return string
         */
        public function get_namespace()
        {
        }
    }
    class Settings extends \WPML\ST\Rest\Base
    {
        /** @var \WPML\WP\OptionManager $option_manager */
        private $option_manager;
        public function __construct(\WPML\Rest\Adaptor $adaptor, \WPML\WP\OptionManager $option_manager)
        {
        }
        public function get_routes()
        {
        }
        public function get_allowed_capabilities(\WP_REST_Request $request)
        {
        }
        public function set(\WP_REST_Request $request)
        {
        }
    }
}
namespace WPML\ST\Rest\MO {
    class Import extends \WPML\ST\Rest\Base
    {
        /**
         * @return array
         */
        function get_routes()
        {
        }
        /**
         * @param \WP_REST_Request $request
         *
         * @return array
         */
        function get_allowed_capabilities(\WP_REST_Request $request)
        {
        }
        /**
         * @return array
         * @throws \Auryn\InjectionException
         */
        public function import(\WP_REST_Request $request)
        {
        }
    }
    class PreGenerate extends \WPML\ST\Rest\Base
    {
        /** @var Manager */
        private $manager;
        /** @var ProcessFactory */
        private $processFactory;
        public function __construct(\WPML\Rest\Adaptor $adaptor, \WPML\ST\MO\File\Manager $manager, \WPML\ST\MO\Generate\Process\ProcessFactory $processFactory)
        {
        }
        /**
         * @return array
         */
        function get_routes()
        {
        }
        function get_allowed_capabilities(\WP_REST_Request $request)
        {
        }
        public function generate()
        {
        }
    }
}
namespace WPML\ST\Rest {
    /**
     * @author OnTheGo Systems
     */
    class FactoryLoader implements \IWPML_REST_Action_Loader, \IWPML_Deferred_Action_Loader
    {
        const REST_API_INIT_ACTION = 'rest_api_init';
        /**
         * @return string
         */
        public function get_load_action()
        {
        }
        public function create()
        {
        }
        private function create_pre_generate()
        {
        }
    }
}
namespace {
    class WPML_ST_User_Fields
    {
        /**
         * @var string
         */
        private $context = 'Authors';
        /** @var SitePress */
        private $sitepress;
        /**
         * @var mixed|WP_User|null
         */
        private $authordata;
        /** @var bool */
        private $lock_get_the_author_filter;
        public function __construct(\SitePress $sitepress, &$authordata)
        {
        }
        public function init_hooks()
        {
        }
        public function add_get_the_author_field_filters()
        {
        }
        /**
         * @param int $user_id
         */
        public function profile_update_action($user_id)
        {
        }
        /**
         * @param int $user_id
         */
        private function register_user_strings($user_id)
        {
        }
        /**
         * @param string $value
         * @param int    $user_id
         * @param int    $original_user_id
         *
         * @return string
         */
        public function get_the_author_field_filter($value, $user_id, $original_user_id)
        {
        }
        /**
         * @param string $value
         * @param string $field
         * @param int    $user_id
         * @param int    $original_user_id
         *
         * @return string
         */
        private function apply_filters_for_the_author_field_output($value, $field, $user_id, $original_user_id)
        {
        }
        /**
         * This filter will only replace the "display_name" of the current author (in global $authordata)
         *
         * @param mixed|string|null $value
         *
         * @return mixed|string|null
         */
        public function the_author_filter($value)
        {
        }
        /**
         * @param string $field
         * @param string $value
         * @param mixed|int|null $user_id
         *
         * @return string
         */
        private function translate_user_meta_field($field, $value, $user_id = \null)
        {
        }
        /**
         * @return array
         */
        private function get_translatable_meta_fields()
        {
        }
        /**
         * @param int $user_id
         *
         * @return bool
         */
        public function is_user_role_translatable($user_id)
        {
        }
        /**
         * @return array
         */
        private function get_translated_roles()
        {
        }
        /**
         * @param string $field
         * @param int $user_id
         *
         * @return string
         */
        private function get_string_name($field, $user_id)
        {
        }
        /**
         * @return array
         */
        public function init_register_strings()
        {
        }
    }
    class WPML_ST_Slug_Translation_Strings_Sync implements \IWPML_Action
    {
        /** @var WPML_Slug_Translation_Records_Factory $slug_records_factory */
        private $slug_records_factory;
        /** @var WPML_ST_Slug_Translation_Settings_Factory $slug_settings_factory */
        private $slug_settings_factory;
        public function __construct(\WPML_Slug_Translation_Records_Factory $slug_records_factory, \WPML_ST_Slug_Translation_Settings_Factory $slug_settings_factory)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param string       $taxonomy
         * @param string|array $object_type
         * @param array        $taxonomy_array
         */
        public function run_taxonomy_sync($taxonomy, $object_type, $taxonomy_array)
        {
        }
        /**
         * @param string       $post_type
         * @param WP_Post_Type $post_type_object
         */
        public function run_post_type_sync($post_type, $post_type_object)
        {
        }
        /**
         * @param string $rewrite_slug
         * @param string $type
         * @param string $element_type
         */
        public function sync_element_slug($rewrite_slug, $type, $element_type)
        {
        }
    }
    class WPML_ST_Slug_Translation_UI_Factory
    {
        const POST = 'post';
        const TAX = 'taxonomy';
        const TEMPLATE_PATH = 'templates/slug-translation';
        public function create($type)
        {
        }
    }
    class WPML_ST_Slug_Translation_Settings_Factory
    {
        /**
         * @throws InvalidArgumentException
         * @param string $element_type
         *
         * @return WPML_ST_Slug_Translation_Settings
         */
        public function create($element_type = \null)
        {
        }
    }
    class WPML_Slug_Translation_Records_Factory
    {
        /**
         * @param string $type
         *
         * @return WPML_Post_Slug_Translation_Records|WPML_Tax_Slug_Translation_Records
         */
        public function create($type)
        {
        }
    }
    class WPML_ST_Slug_Custom_Type_Factory
    {
        /** @var SitePress $sitepress */
        private $sitepress;
        /** @var WPML_Slug_Translation_Records $slug_records */
        private $slug_records;
        /** @var WPML_ST_Slug_Translations */
        private $slug_translations;
        public function __construct(\SitePress $sitepress, \WPML_Slug_Translation_Records $slug_records, \WPML_ST_Slug_Translations $slug_translations)
        {
        }
        /**
         * @param string $name
         * @param bool   $display_as_translated
         *
         * @return WPML_ST_Slug_Custom_Type
         */
        public function create($name, $display_as_translated)
        {
        }
    }
    class WPML_ST_Slug_Translations
    {
        /** @var SitePress */
        private $sitepress;
        public function __construct(\SitePress $sitepress)
        {
        }
        /**
         * @param WPML_ST_Slug $slug
         * @param bool         $display_as_translated_mode
         *
         * @return string
         */
        public function get($slug, $display_as_translated_mode)
        {
        }
        private function get_slug_translation_to_lang(\WPML_ST_Slug $slug, $lang)
        {
        }
    }
    /**
     * It may represent custom posts or custom taxonomies
     */
    class WPML_ST_Slug_Custom_Type
    {
        /** @var string */
        private $name;
        /** @var bool */
        private $display_as_translated;
        /** @var string */
        private $slug;
        /** @var string */
        private $slug_translation;
        /**
         * WPML_ST_Slug_Custom_Type constructor.
         *
         * @param string $name
         * @param bool   $display_as_translated
         * @param bool   $slug
         * @param bool   $slug_translation
         */
        public function __construct($name, $display_as_translated, $slug, $slug_translation)
        {
        }
        /**
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * @return bool
         */
        public function is_display_as_translated()
        {
        }
        /**
         * @return string
         */
        public function get_slug()
        {
        }
        /**
         * @return string
         */
        public function get_slug_translation()
        {
        }
        /**
         * @return bool
         */
        public function is_using_tags()
        {
        }
    }
    interface WPML_ST_Slug_Translation_Custom_Types_Repository
    {
        /**
         * @return WPML_ST_Slug_Custom_Type[]
         */
        public function get();
    }
    class WPML_ST_Slug_Translation_Post_Custom_Types_Repository implements \WPML_ST_Slug_Translation_Custom_Types_Repository
    {
        /** @var SitePress */
        private $sitepress;
        /** @var WPML_ST_Slug_Custom_Type_Factory */
        private $custom_type_factory;
        /** @var array */
        private $post_slug_translation_settings;
        public function __construct(\SitePress $sitepress, \WPML_ST_Slug_Custom_Type_Factory $custom_type_factory)
        {
        }
        public function get()
        {
        }
        /**
         * @param string $type
         *
         * @return bool
         */
        private function filter($type)
        {
        }
        /**
         * @param string $type
         *
         * @return WPML_ST_Slug_Custom_Type
         */
        private function build_object($type)
        {
        }
        /**
         * @return array
         */
        private function get_post_slug_translation_settings()
        {
        }
        /**
         * @param string $type
         *
         * @return bool
         */
        private function is_display_as_translated($type)
        {
        }
    }
    class WPML_ST_Slug_Translation_Taxonomy_Custom_Types_Repository implements \WPML_ST_Slug_Translation_Custom_Types_Repository
    {
        /** @var SitePress */
        private $sitepress;
        /** @var WPML_ST_Slug_Custom_Type_Factory */
        private $custom_type_factory;
        /** @var WPML_ST_Tax_Slug_Translation_Settings $settings */
        private $settings_repository;
        /** @var array */
        private $settings;
        public function __construct(\SitePress $sitepress, \WPML_ST_Slug_Custom_Type_Factory $custom_type_factory, \WPML_ST_Tax_Slug_Translation_Settings $settings_repository)
        {
        }
        public function get()
        {
        }
        /**
         * @param string $type
         *
         * @return bool
         */
        private function filter($type)
        {
        }
        /**
         * @param string $type
         *
         * @return WPML_ST_Slug_Custom_Type
         */
        private function build_object($type)
        {
        }
        /**
         * @return array
         */
        private function get_taxonomy_slug_translation_settings()
        {
        }
        /**
         * @param string $type
         *
         * @return bool
         */
        private function is_display_as_translated($type)
        {
        }
    }
    abstract class WPML_Slug_Translation_Records
    {
        const CONTEXT_DEFAULT = 'default';
        const CONTEXT_WORDPRESS = 'WordPress';
        /** @var wpdb $wpdb */
        private $wpdb;
        /** @var WPML_WP_Cache_Factory $cache_factory*/
        private $cache_factory;
        public function __construct(\wpdb $wpdb, \WPML_WP_Cache_Factory $cache_factory)
        {
        }
        /**
         * @param string $type
         *
         * @return WPML_ST_Slug
         */
        public function get_slug($type)
        {
        }
        /** @return string */
        private function get_cache_group()
        {
        }
        private function flush_cache()
        {
        }
        /**
         * @deprecated use `get_slug` instead.
         *
         * @param string $type
         * @param string $lang
         *
         * @return null|string
         */
        public function get_translation($type, $lang)
        {
        }
        /**
         * @deprecated use `get_slug` instead.
         *
         * @param string $type
         * @param string $lang
         *
         * @return null|string
         */
        public function get_original($type, $lang = '')
        {
        }
        /**
         * @deprecated use `get_slug` instead.
         *
         * @param string $type
         *
         * @return int|null
         */
        public function get_slug_id($type)
        {
        }
        /**
         * @param string $type
         * @param string $slug
         *
         * @return int|null
         */
        public function register_slug($type, $slug)
        {
        }
        /**
         * @param string $type
         * @param string $slug
         */
        public function update_original_slug($type, $slug)
        {
        }
        /**
         * @deprecated use `get_slug` instead.
         *
         * @param string $type
         *
         * @return null|stdClass
         */
        public function get_original_slug_and_lang($type)
        {
        }
        /**
         * @deprecated use `get_slug` instead.
         *
         * @param string $type
         * @param bool   $only_status_complete
         *
         * @return array
         */
        public function get_element_slug_translations($type, $only_status_complete = \true)
        {
        }
        /**
         * @deprecated use `get_slug` instead.
         *
         * @param array $types
         *
         * @return array
         */
        public function get_all_slug_translations($types)
        {
        }
        /**
         * @deprecated use `get_slug` instead.
         *
         * @param string $type
         *
         * @return array
         */
        public function get_slug_translation_languages($type)
        {
        }
        /**
         * Use `WPML_ST_String` only for updating the values in the DB
         * because it does not have any caching feature.
         *
         * @param string $type
         *
         * @return null|WPML_ST_String
         */
        public function get_slug_string($type)
        {
        }
        /**
         * @param string $slug
         *
         * @return string
         */
        protected abstract function get_string_name($slug);
        /** @return string */
        protected abstract function get_element_type();
    }
    class WPML_Post_Slug_Translation_Records extends \WPML_Slug_Translation_Records
    {
        const STRING_NAME = 'URL slug: %s';
        /**
         * @param string $slug
         *
         * @return string
         */
        protected function get_string_name($slug)
        {
        }
        /** @return string */
        protected function get_element_type()
        {
        }
    }
    class WPML_ST_Slug_Translation_Settings
    {
        const KEY_ENABLED_GLOBALLY = 'wpml_base_slug_translation';
        /** @param bool $enabled */
        public function set_enabled($enabled)
        {
        }
        /** @return bool */
        public function is_enabled()
        {
        }
        public function is_translated($type_name)
        {
        }
        public function set_type($type, $is_type_enabled)
        {
        }
        public function save()
        {
        }
    }
    /**
     * @todo: Move these settings to an independent option
     *      like WPML_ST_Tax_Slug_Translation_Settings::OPTION_NAME
     */
    class WPML_ST_Post_Slug_Translation_Settings extends \WPML_ST_Slug_Translation_Settings
    {
        const KEY_IN_SITEPRESS_SETTINGS = 'posts_slug_translation';
        /** @var SitePress $sitepress */
        private $sitepress;
        private $settings;
        public function __construct(\SitePress $sitepress)
        {
        }
        /** @param bool $enabled */
        public function set_enabled($enabled)
        {
        }
        /**
         * @param string $type
         *
         * @return bool
         */
        public function is_translated($type)
        {
        }
        /**
         * @param string $type
         * @param bool   $is_enabled
         */
        public function set_type($type, $is_enabled)
        {
        }
        public function save()
        {
        }
    }
    class WPML_ST_Slug_New_Match
    {
        /** @var string */
        private $value;
        /** @var bool */
        private $preserve_original;
        /**
         * @param string $value
         * @param bool   $preserve_original
         */
        public function __construct($value, $preserve_original)
        {
        }
        /**
         * @return string
         */
        public function get_value()
        {
        }
        /**
         * @return bool
         */
        public function should_preserve_original()
        {
        }
    }
    class WPML_ST_Slug_New_Match_Finder
    {
        /**
         * @param string                     $match
         * @param WPML_ST_Slug_Custom_Type[] $custom_types
         *
         * @return WPML_ST_Slug_New_Match
         */
        public function get($match, array $custom_types)
        {
        }
        /**
         * @param string                     $match
         * @param WPML_ST_Slug_Custom_Type[] $custom_types
         *
         * @return WPML_ST_Slug_New_Match[]
         */
        private function map_to_new_matches($match, array $custom_types)
        {
        }
        /**
         * @param string                   $match
         * @param WPML_ST_Slug_Custom_Type $custom_type
         *
         * @return WPML_ST_Slug_New_Match
         */
        public function find_match_of_type($match, \WPML_ST_Slug_Custom_Type $custom_type)
        {
        }
        private function filter_slug_using_tag($slug)
        {
        }
        /**
         * @param string $match
         * @param string $slug
         * @param string $slug_translation
         *
         * @return string
         */
        private function adjust_match($match, $slug, $slug_translation)
        {
        }
        /**
         * The best is that which differs the most from the original
         *
         * @param string                   $match
         * @param WPML_ST_Slug_New_Match[] $new_matches
         *
         * @return WPML_ST_Slug_New_Match
         */
        private function find_the_best_match($match, $new_matches)
        {
        }
    }
    class WPML_ST_Slug
    {
        /** @var int $original_id */
        private $original_id;
        /** @var string $original_lang */
        private $original_lang;
        /** @var string $original_value */
        private $original_value;
        /** @var array $langs */
        private $langs = array();
        /** @param stdClass $data */
        public function set_lang_data(\stdClass $data)
        {
        }
        /** @return string */
        public function get_original_lang()
        {
        }
        /** @return string */
        public function get_original_value()
        {
        }
        /** @return int */
        public function get_original_id()
        {
        }
        /**
         * @param string $lang
         *
         * @return string
         */
        public function get_value($lang)
        {
        }
        /**
         * @param string $lang
         *
         * @return int
         */
        public function get_status($lang)
        {
        }
        /**
         * @param string $lang
         *
         * @return bool
         */
        public function is_translation_complete($lang)
        {
        }
        /** @return string|null */
        public function get_context()
        {
        }
        /** @return string|null */
        public function get_name()
        {
        }
        /** @return array */
        public function get_language_codes()
        {
        }
        /**
         * This method is used as a filter which returns the initial `$slug_value`
         * if no better value was found.
         *
         * @param string $slug_value
         * @param string $lang
         *
         * @return string
         */
        public function filter_value($slug_value, $lang)
        {
        }
    }
}
namespace WPML\ST\SlugTranslation\Hooks {
    class Hooks
    {
        /** @var \WPML_Rewrite_Rule_Filter_Factory */
        private $factory;
        /** @var \WPML_ST_Slug_Translation_Settings $slug_translation_settings */
        private $slug_translation_settings;
        /** @var array|null */
        private $cache;
        /**
         * @param \WPML_Rewrite_Rule_Filter_Factory  $factory
         * @param \WPML_ST_Slug_Translation_Settings $slug_translation_settings
         */
        public function __construct(\WPML_Rewrite_Rule_Filter_Factory $factory, \WPML_ST_Slug_Translation_Settings $slug_translation_settings)
        {
        }
        public function add_hooks()
        {
        }
        public function init()
        {
        }
        /**
         * @param array $value
         *
         * @return array
         */
        public function filter($value)
        {
        }
        public function clearCache()
        {
        }
        /**
         * @param $hard
         *
         * @return mixed
         */
        public function flushRewriteRulesHard($hard)
        {
        }
    }
    class HooksFactory
    {
        /**
         * We need a static property because there could be many instances of HooksFactory class but we need to guarantee
         * there is only a single instance of Hooks
         *
         * @var Hooks
         */
        private static $instance;
        /**
         * @return Hooks
         */
        public function create()
        {
        }
    }
}
namespace {
    interface IWPML_ST_Rewrite_Rule_Filter
    {
        public function rewrite_rules_filter($rules);
    }
    class WPML_ST_Tax_Slug_Translation_Settings extends \WPML_ST_Slug_Translation_Settings
    {
        const OPTION_NAME = "wpml_tax_slug_translation_settings";
        /** @var array $types */
        private $types = array();
        public function __construct()
        {
        }
        /** @param array $types */
        public function set_types(array $types)
        {
        }
        /** @return array */
        public function get_types()
        {
        }
        /**
         * @param string $taxonomy_name
         *
         * @return bool
         */
        public function is_translated($taxonomy_name)
        {
        }
        /**
         * @param string $taxonomy_name
         * @param bool   $is_enabled
         */
        public function set_type($taxonomy_name, $is_enabled)
        {
        }
        /** @return array */
        private function get_properties()
        {
        }
        public function init()
        {
        }
        public function save()
        {
        }
    }
    class WPML_ST_Term_Link_Filter
    {
        const CACHE_GROUP = 'WPML_ST_Term_Link_Filter::replace_base_in_permalink_structure';
        /** @var SitePress $sitepress */
        private $sitepress;
        /** @var WPML_Tax_Slug_Translation_Records $slug_records */
        private $slug_records;
        /** @var WPML_WP_Cache_Factory $cache_factory */
        private $cache_factory;
        public function __construct(\WPML_Tax_Slug_Translation_Records $slug_records, \SitePress $sitepress, \WPML_WP_Cache_Factory $cache_factory)
        {
        }
        /**
         * Filters the permalink structure for a terms before token replacement occurs
         * with the hook filter `pre_term_link` available since WP 4.9.0
         *
         * @see get_term_link
         *
         * @param false|string $termlink
         * @param WP_Term      $term
         *
         * @return false|string
         */
        public function replace_slug_in_termlink($termlink, $term)
        {
        }
        /**
         * @param string $termlink
         * @param string $original_slug
         * @param string $translated_slug
         *
         * @return string
         */
        private function replace_slug($termlink, $original_slug, $translated_slug)
        {
        }
    }
    class WPML_Tax_Slug_Translation_Records extends \WPML_Slug_Translation_Records
    {
        const STRING_NAME = 'URL %s tax slug';
        /**
         * @param string $slug
         *
         * @return string
         */
        protected function get_string_name($slug)
        {
        }
        /** @return string */
        protected function get_element_type()
        {
        }
    }
    class WPML_Slug_Translation_Factory implements \IWPML_Frontend_Action_Loader, \IWPML_Backend_Action_Loader, \IWPML_AJAX_Action_Loader
    {
        const POST = 'post';
        const TAX = 'taxonomy';
        const INIT_PRIORITY = -1000;
        public function create()
        {
        }
    }
    class WPML_ST_Slug_Translation_UI_Save implements \IWPML_Action
    {
        const ACTION_HOOK_FOR_POST = 'wpml_save_cpt_sync_settings';
        const ACTION_HOOK_FOR_TAX = 'wpml_save_taxonomy_sync_settings';
        /** @var WPML_ST_Slug_Translation_Settings $settings */
        private $settings;
        /** @var WPML_Slug_Translation_Records $records */
        private $records;
        /** @var SitePress $sitepress */
        private $sitepress;
        /** @var IWPML_WP_Element_Type $wp_element_type */
        private $wp_element_type;
        /**
         * @var string $action_hook either WPML_ST_Slug_Translation_UI_Save::ACTION_HOOK_FOR_POST
         *                          or WPML_ST_Slug_Translation_UI_Save::ACTION_HOOK_FOR_TAX
         */
        private $action_hook;
        public function __construct(\WPML_ST_Slug_Translation_Settings $settings, \WPML_Slug_Translation_Records $records, \SitePress $sitepress, \IWPML_WP_Element_Type $wp_element_type, $action_hook)
        {
        }
        public function add_hooks()
        {
        }
        public function save_element_type_slug_translation_options()
        {
        }
        /**
         * @param array $data
         *
         * @return array
         */
        private function sanitize_translate_slug_data(array $data)
        {
        }
        private function has_translation(array $data)
        {
        }
        /**
         * @param array $data
         *
         * @return array
         */
        private function get_slug_translations(array $data)
        {
        }
        /**
         * @param string $type
         * @param array  $data
         */
        private function update_slug_translations($type, array $data)
        {
        }
        /**
         * @param string $type
         *
         * @return null|WPML_ST_String
         */
        private function register_string_if_not_exit($type)
        {
        }
        /**
         * @param string $slug
         *
         * @return string
         */
        private function sanitize_slug($slug)
        {
        }
        /**
         * @param string $type_name
         *
         * @return string
         */
        private function get_registered_slug($type_name)
        {
        }
    }
    class WPML_Rewrite_Rule_Filter_Factory
    {
        /**
         * @param SitePress|null $sitepress
         *
         * @return WPML_Rewrite_Rule_Filter
         */
        public function create($sitepress = \null)
        {
        }
    }
    class WPML_Rewrite_Rule_Filter implements \IWPML_ST_Rewrite_Rule_Filter
    {
        /** @var WPML_ST_Slug_Translation_Custom_Types_Repository[] */
        private $custom_types_repositories;
        /** @var WPML_ST_Slug_New_Match_Finder */
        private $new_match_finder;
        /**
         * @param WPML_ST_Slug_Translation_Custom_Types_Repository[] $custom_types_repositories
         * @param WPML_ST_Slug_New_Match_Finder                      $new_match_finder
         */
        public function __construct(array $custom_types_repositories, \WPML_ST_Slug_New_Match_Finder $new_match_finder)
        {
        }
        /**
         * @param array|false|null $rules
         *
         * @return array
         */
        function rewrite_rules_filter($rules)
        {
        }
        private function get_custom_types()
        {
        }
    }
    class WPML_ST_Slug_Translation_API implements \IWPML_Action
    {
        /**
         * The section indexes are hardcoded in `sitepress-multilingual-cms/menu/_custom_types_translation.php`
         */
        const SECTION_INDEX_POST = 7;
        const SECTION_INDEX_TAX = 8;
        /** @var WPML_Slug_Translation_Records_Factory $records_factory */
        private $records_factory;
        /** @var WPML_ST_Slug_Translation_Settings_Factory $settings_factory */
        private $settings_factory;
        /** @var IWPML_Current_Language $current_language */
        private $current_language;
        /** @var WPML_WP_API $wp_api */
        private $wp_api;
        public function __construct(\WPML_Slug_Translation_Records_Factory $records_factory, \WPML_ST_Slug_Translation_Settings_Factory $settings_factory, \IWPML_Current_Language $current_language, \WPML_WP_API $wp_api)
        {
        }
        public function add_hooks()
        {
        }
        public function init()
        {
        }
        /**
         * @param string      $slug_value
         * @param string      $type
         * @param string|bool $language
         * @param string      $element_type WPML_Slug_Translation_Factory::POST|WPML_Slug_Translation_Factory::TAX
         *
         * @return string
         */
        public function get_translated_slug_filter($slug_value, $type, $language = \false, $element_type = \WPML_Slug_Translation_Factory::POST)
        {
        }
        /**
         * @param string $languages
         * @param string $type
         * @param string $element_type WPML_Slug_Translation_Factory::POST|WPML_Slug_Translation_Factory::TAX
         *
         * @return array
         */
        public function get_slug_translation_languages_filter($languages, $type, $element_type = \WPML_Slug_Translation_Factory::POST)
        {
        }
        /**
         * @param string      $type
         * @param string|null $slug_value
         * @param string      $element_type WPML_Slug_Translation_Factory::POST|WPML_Slug_Translation_Factory::TAX
         */
        public function activate_slug_translation_action($type, $slug_value = \null, $element_type = \WPML_Slug_Translation_Factory::POST)
        {
        }
        /**
         * @param string $url
         * @param string $element_type WPML_Slug_Translation_Factory::POST or WPML_Slug_Translation_Factory::TAX
         *
         * @return string
         */
        public function get_slug_translation_url_filter($url, $element_type = \WPML_Slug_Translation_Factory::POST)
        {
        }
        /**
         * @param bool   $is_translated
         * @param string $type
         * @param string $element_type WPML_Slug_Translation_Factory::POST or WPML_Slug_Translation_Factory::TAX
         *
         * @return bool
         */
        public function type_slug_is_translated_filter($is_translated, $type, $element_type = \WPML_Slug_Translation_Factory::POST)
        {
        }
    }
    class WPML_ST_Element_Slug_Translation_UI
    {
        const TEMPLATE_FILE = 'slug-translation-ui.twig';
        /** @var WPML_ST_Element_Slug_Translation_UI_Model $model */
        private $model;
        /** @var IWPML_Template_Service $template_service */
        private $template_service;
        public function __construct(\WPML_ST_Element_Slug_Translation_UI_Model $model, \IWPML_Template_Service $template_service)
        {
        }
        /** @return WPML_ST_Element_Slug_Translation_UI */
        public function init()
        {
        }
        /**
         * @param string                   $type_name
         * @param WP_Post_Type|WP_Taxonomy $custom_type
         *
         * @return string
         */
        public function render($type_name, $custom_type)
        {
        }
    }
    class WPML_ST_Element_Slug_Translation_UI_Model
    {
        /** @var SitePress $sitepress */
        private $sitepress;
        /** @var WPML_ST_Slug_Translation_Settings $settings */
        private $settings;
        /** @var WPML_Slug_Translation_Records $slug_records */
        private $slug_records;
        /** @var WPML_Element_Sync_Settings $sync_settings */
        private $sync_settings;
        /** @var WPML_Simple_Language_Selector $lang_selector */
        private $lang_selector;
        public function __construct(\SitePress $sitepress, \WPML_ST_Slug_Translation_Settings $settings, \WPML_Slug_Translation_Records $slug_records, \WPML_Element_Sync_Settings $sync_settings, \WPML_Simple_Language_Selector $lang_selector)
        {
        }
        /**
         * @param string                   $type_name
         * @param WP_Post_Type|WP_Taxonomy $custom_type
         *
         * @return null|array
         */
        public function get($type_name, $custom_type)
        {
        }
        /**
         * @param string                   $type_name
         * @param WP_Post_Type|WP_Taxonomy $custom_type
         *
         * @return stdClass
         */
        private function get_original_slug_and_lang($type_name, $custom_type)
        {
        }
        /**
         * @param string $type_name
         *
         * @return array
         */
        private function get_translations($type_name)
        {
        }
        /**
         * @param string $string_lang
         *
         * @return array
         */
        private function get_languages($string_lang)
        {
        }
    }
    class WPML_Slug_Translation implements \IWPML_Action
    {
        const STRING_DOMAIN = 'WordPress';
        /** @var array $post_link_cache */
        private $post_link_cache = array();
        /** @var  SitePress $sitepress */
        private $sitepress;
        /** @var WPML_Slug_Translation_Records_Factory $slug_records_factory */
        private $slug_records_factory;
        /** @var WPML_ST_Term_Link_Filter $term_link_filter */
        private $term_link_filter;
        /** @var WPML_Get_LS_Languages_Status $ls_languages_status */
        private $ls_languages_status;
        /** @var WPML_ST_Slug_Translation_Settings $slug_translation_settings */
        private $slug_translation_settings;
        private $ignore_post_type_link = \false;
        public function __construct(\SitePress $sitepress, \WPML_Slug_Translation_Records_Factory $slug_records_factory, \WPML_Get_LS_Languages_Status $ls_language_status, \WPML_ST_Term_Link_Filter $term_link_filter, \WPML_ST_Slug_Translation_Settings $slug_translation_settings)
        {
        }
        public function add_hooks()
        {
        }
        public function init()
        {
        }
        /**
         * @deprecated since 2.8.0, use the class `WPML_Post_Slug_Translation_Records` instead.
         *
         * @param string $type
         *
         * @return null|string
         */
        public static function get_slug_by_type($type)
        {
        }
        /**
         * This method is only for CPT
         *
         * @deprecated use `WPML_ST_Slug::filter_value` directly of the filter hook `wpml_get_translated_slug`
         *
         * @param string      $slug_value
         * @param string      $post_type
         * @param string|bool $language
         *
         * @return string
         */
        public function get_translated_slug($slug_value, $post_type, $language = \false)
        {
        }
        /**
         * @param array $value
         *
         * @return array
         * @deprecated Use WPML\ST\SlugTranslation\Hooks\Hooks::filter
         */
        public static function rewrite_rules_filter($value)
        {
        }
        /**
         * @param string  $post_link
         * @param WP_Post $post
         * @param bool    $leavename
         * @param bool    $sample
         *
         * @return mixed|string|WP_Error
         */
        public function post_type_link_filter($post_link, $post, $leavename, $sample)
        {
        }
        /**
         * @param int $post_ID
         * @param $post
         */
        public function clear_post_link_cache($post_ID, $post)
        {
        }
        /**
         * @return array
         */
        private function get_all_post_slug_translations()
        {
        }
        /**
         * Adds all translated custom post type slugs as valid query variables in addition to their original values
         *
         * @param array $qvars
         *
         * @return array
         */
        public function add_cpt_names($qvars)
        {
        }
        /**
         * @param WP_Query $query
         *
         * @return WP_Query
         */
        public function filter_pre_get_posts($query)
        {
        }
        /**
         * @param string $action
         */
        public static function gui_save_options($action)
        {
        }
        /**
         * @param string $slug
         *
         * @return string
         */
        public static function sanitize($slug)
        {
        }
        /**
         * @deprecated since 2.8.0, use the class `WPML_Post_Slug_Translation_Records` instead.
         */
        public static function register_string_for_slug($post_type, $slug)
        {
        }
        public function maybe_migrate_string_name()
        {
        }
        /**
         * Move global on/off setting to its own option WPML_ST_Slug_Translation_Settings::KEY_ENABLED_GLOBALLY
         */
        private function migrate_global_enabled_setting()
        {
        }
    }
}
namespace WPML\ST {
    class TranslateWpmlString
    {
        /** @var array $loadedDomains */
        private static $loadedDomains = [];
        /** @var Provider $filterProvider */
        private $filterProvider;
        /** @var LanguageSwitch $languageSwitch */
        private $languageSwitch;
        /** @var WPML_Locale $locale */
        private $locale;
        /** @var GettextSettings $gettextSettings */
        private $gettextSettings;
        /** @var Manager $fileManager */
        private $fileManager;
        /** @var bool $isAutoRegisterDisabled */
        private $isAutoRegisterDisabled;
        /** @var bool $lock */
        private $lock = false;
        public function __construct(\WPML\ST\StringsFilter\Provider $filterProvider, \WPML\ST\MO\Hooks\LanguageSwitch $languageSwitch, \WPML_Locale $locale, \WPML\ST\Gettext\Settings $gettextSettings, \WPML\ST\MO\File\Manager $fileManager)
        {
        }
        public function init()
        {
        }
        /**
         * @param string|array $wpmlContext
         * @param string       $name
         * @param bool         $value
         * @param bool         $allowEmptyValue
         * @param null|bool    $hasTranslation
         * @param null|string  $targetLang
         *
         * @return bool|string
         */
        public function translate($wpmlContext, $name, $value = false, $allowEmptyValue = false, &$hasTranslation = null, $targetLang = null)
        {
        }
        /**
         * @param string|array $wpmlContext
         * @param string       $name
         * @param bool         $value
         * @param null|bool    $hasTranslation
         * @param null|string  $targetLang
         *
         * @return string
         */
        private function translateByMOFile($wpmlContext, $name, $value, &$hasTranslation, $targetLang)
        {
        }
        /**
         * @param string|array $wpmlContext
         * @param string       $name
         * @param bool         $value
         * @param null|bool    $hasTranslation
         * @param null|string  $targetLang
         *
         * @return string
         */
        private function translateByDBQuery($wpmlContext, $name, $value, &$hasTranslation, $targetLang)
        {
        }
        /**
         * @param string $domain
         * @param string $locale
         */
        private function loadTextDomain($domain, $locale)
        {
        }
        /**
         * @param string   $targetLang
         * @param callable $function
         *
         * @return string
         */
        private function withMOLocale($targetLang, $function)
        {
        }
        /**
         * We will allow MO translation only when
         * the original is not empty.
         *
         * We also need to make sure we deal with a
         * WPML registered string (not gettext).
         *
         * If those conditions are not fulfilled,
         * we will translate from the database.
         *
         * @param string $original
         * @param string $name
         *
         * @return bool
         */
        public static function canTranslateWithMO($original, $name)
        {
        }
        /**
         * This allows to differentiate WPML registered strings
         * from gettext strings that have the default hash for
         * the name.
         *
         * But it's still possible that WPML registered strings
         * have a hash for the name.
         *
         *
         * @param string $original
         * @param string $name
         *
         * @return bool
         */
        private static function isWpmlRegisteredString($original, $name)
        {
        }
        public static function resetCache()
        {
        }
    }
}
namespace WPML\ST\TranslationFile {
    class Hooks
    {
        /** @var WPML_Action_Filter_Loader $action_loader */
        private $action_loader;
        /** @var WPML_ST_Upgrade $upgrade */
        private $upgrade;
        public function __construct(\WPML_Action_Filter_Loader $action_loader, \WPML_ST_Upgrade $upgrade)
        {
        }
        public function install()
        {
        }
        private function hasPackagesTable()
        {
        }
        private function hasTranslationFilesTables()
        {
        }
        public static function useFileSynchronization()
        {
        }
    }
    class Domains
    {
        /** @var wpdb $wpdb */
        private $wpdb;
        /** @var PackageDomains $package_domains */
        private $package_domains;
        /** @var WPML_ST_Translations_File_Dictionary $file_dictionary */
        private $file_dictionary;
        /** @var null|Collection $mo_domains */
        private static $mo_domains;
        /** @var null|Collection $jed_domains */
        private static $jed_domains;
        /**
         * Domains constructor.
         *
         * @param PackageDomains $package_domains
         * @param WPML_ST_Translations_File_Dictionary $file_dictionary
         */
        public function __construct(\wpdb $wpdb, \WPML\ST\Package\Domains $package_domains, \WPML_ST_Translations_File_Dictionary $file_dictionary)
        {
        }
        /**
         * @return Collection
         */
        public function getMODomains()
        {
        }
        /**
         * @return string
         */
        private function getCollateForContextColumn()
        {
        }
        /**
         * Returns a collection of MO domains that
         * WPML needs to automatically load.
         *
         * @return Collection
         */
        public function getCustomMODomains()
        {
        }
        /**
         * @return Collection
         */
        public function getJEDDomains()
        {
        }
        public static function resetCache()
        {
        }
        /**
         * Domains that are not handled with MO files,
         * but have direct DB queries.
         *
         * @return Collection
         */
        public static function getReservedDomains()
        {
        }
        /**
         * @return Collection
         */
        private function getPackageDomains()
        {
        }
    }
    class UpdateHooks implements \IWPML_Action
    {
        /** @var Manager $file_manager */
        private $file_manager;
        /** @var DomainsLocalesMapper $domains_locales_mapper */
        private $domains_locales_mapper;
        /** @var array $updated_translation_ids */
        private $updated_translation_ids = [];
        /** @var Collection $entities_to_update */
        private $entities_to_update;
        /** @var callable */
        private $resetDomainsCache;
        public function __construct(\WPML\ST\TranslationFile\Manager $file_manager, \WPML\ST\TranslationFile\DomainsLocalesMapper $domains_locales_mapper, callable $resetDomainsCache = null)
        {
        }
        public function add_hooks()
        {
        }
        /** @param int $string_translation_id */
        public function add_to_update_queue($string_translation_id)
        {
        }
        private function add_shutdown_action()
        {
        }
        /**
         * @return array
         */
        public function process_update_queue()
        {
        }
        /**
         * @param string     $domain
         * @param string     $name
         * @param string     $old_value
         * @param string     $new_value
         * @param bool|false $force_complete
         * @param stdClass   $string
         */
        public function refresh_after_update_original_string($domain, $name, $old_value, $new_value, $force_complete, $string)
        {
        }
        public function update_imported_file(\WPML_ST_Translations_File_Entry $file_entry)
        {
        }
        /**
         * It dispatches the regeneration of MO files for a specific domain in all active languages.
         *
         * @param string $domain
         */
        public function refresh_domain($domain)
        {
        }
        /**
         * We need to refresh before the strings are deleted,
         * otherwise we can't determine which domains to refresh.
         *
         * @param array $string_ids
         */
        public function refresh_before_remove_strings(array $string_ids)
        {
        }
        /**
         * @param string $domain
         * @param string $locale
         */
        private function update_file($domain, $locale)
        {
        }
    }
    class StringEntity
    {
        /** @var string $original */
        private $original;
        /** @var array $translations */
        private $translations = array();
        /** @var null|string $context */
        private $context;
        /** @var string|null */
        private $original_plural;
        /** @var string|null */
        private $name;
        /**
         * @param string      $original
         * @param array       $translations
         * @param null|string $context
         * @param null|string $original_plural
         * @param null|string $name
         */
        public function __construct($original, array $translations, $context = null, $original_plural = null, $name = null)
        {
        }
        /** @return string */
        public function get_original()
        {
        }
        /** @return array */
        public function get_translations()
        {
        }
        /** @return null|string */
        public function get_context()
        {
        }
        /**
         * @return string|null
         */
        public function get_original_plural()
        {
        }
        /**
         * @return string|null
         */
        public function get_name()
        {
        }
        /**
         * @param string $name
         */
        public function set_name($name)
        {
        }
    }
}
namespace {
    class WPML_ST_JED_Domain
    {
        public static function get($domain, $handler)
        {
        }
    }
    class WPML_ST_JED_File_Builder extends \WPML\ST\TranslationFile\Builder
    {
        /** @var string $decoded_eot */
        private $decoded_eot;
        public function __construct()
        {
        }
        /**
         * @param StringEntity[] $strings
         * @return string
         */
        public function get_content(array $strings)
        {
        }
        private function get_original_with_context(\WPML\ST\TranslationFile\StringEntity $string)
        {
        }
    }
    class WPML_ST_Script_Translations_Hooks implements \IWPML_Action
    {
        const PRIORITY_OVERRIDE_JED_FILE = 10;
        /** @var WPML_ST_Translations_File_Dictionary $dictionary */
        private $dictionary;
        /** @var WPML_ST_JED_File_Manager $jed_file_manager */
        private $jed_file_manager;
        /** @var WPML_File $wpml_file */
        private $wpml_file;
        public function __construct(\WPML_ST_Translations_File_Dictionary $dictionary, \WPML_ST_JED_File_Manager $jed_file_manager, \WPML_File $wpml_file)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param string $filepath
         * @param string $handler
         * @param string $domain
         *
         * @return string
         */
        public function override_jed_file($filepath, $handler, $domain)
        {
        }
        /**
         * @param string $filepath
         *
         * @return bool
         */
        private function is_file_imported($filepath)
        {
        }
        /**
         * @param string $filepath
         * @param string $domain
         *
         * @return string
         */
        private function get_file_locale($filepath, $domain)
        {
        }
    }
    class WPML_ST_JED_File_Manager extends \WPML\ST\TranslationFile\Manager
    {
        /**
         * @return string
         */
        protected function getFileExtension()
        {
        }
        /**
         * @return bool
         */
        public function isPartialFile()
        {
        }
        /**
         * @return Collection
         */
        protected function getDomains()
        {
        }
    }
}
namespace WPML\ST\JED\Hooks {
    class Sync implements \IWPML_Frontend_Action, \IWPML_Backend_Action, \IWPML_DIC_Action
    {
        /** @var FileSync */
        private $fileSync;
        public function __construct(\WPML\ST\TranslationFile\Sync\FileSync $fileSync)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param string|false $jedFile Path to the translation file to load. False if there isn't one.
         * @param string       $handler Name of the script to register a translation domain to.
         * @param string       $domain  The text domain.
         */
        public function syncCustomJedFile($jedFile, $handler, $domain)
        {
        }
    }
}
namespace {
    class WPML_ST_Script_Translations_Hooks_Factory implements \IWPML_Backend_Action_Loader, \IWPML_Frontend_Action_Loader
    {
        /**
         * Create hooks.
         *
         * @return array|IWPML_Action
         * @throws \Auryn\InjectionException Auryn Exception.
         */
        public function create()
        {
        }
        /**
         * @param WPML_ST_JED_File_Manager $jed_file_manager
         *
         * @return UpdateHooks
         */
        private function get_update_hooks($jed_file_manager)
        {
        }
        /**
         * @param WPML_ST_JED_File_Manager $jed_file_manager
         *
         * @return WPML_ST_Script_Translations_Hooks
         */
        private function get_filtering_hooks($jed_file_manager)
        {
        }
    }
}
namespace WPML\ST\TranslationFile {
    class UpdateHooksFactory
    {
        /** @return UpdateHooks */
        public static function create()
        {
        }
    }
}
namespace WPML\ST\TranslationFile\Sync {
    class TranslationUpdates
    {
        // The global constant is not defined yet.
        const ICL_STRING_TRANSLATION_COMPLETE = 10;
        /** @var \wpdb */
        private $wpdb;
        /** @var \WPML_Language_Records */
        private $languageRecords;
        /** @var null|Collection */
        private $data;
        public function __construct(\wpdb $wpdb, \WPML_Language_Records $languageRecords)
        {
        }
        /**
         * @param string $domain
         * @param string $locale
         *
         * @return int
         */
        public function getTimestamp($domain, $locale)
        {
        }
        private function loadData()
        {
        }
        public function reset()
        {
        }
    }
    class FileSync
    {
        /** @var Manager */
        private $manager;
        /** @var TranslationUpdates */
        private $translationUpdates;
        /** @var WPML_ST_Translations_File_Locale */
        private $fileLocale;
        public function __construct(\WPML\ST\TranslationFile\Manager $manager, \WPML\ST\TranslationFile\Sync\TranslationUpdates $translationUpdates, \WPML_ST_Translations_File_Locale $FileLocale)
        {
        }
        /**
         * Before to load the custom translation file, we'll:
         * - Re-generate it if it's missing or outdated.
         * - Delete it if we don't have custom translations.
         *
         * We will also sync the custom file when a native file is passed
         * because the custom file might never be loaded if it's missing.
         *
         * @param string|false $filePath
         * @param string       $domain
         */
        public function sync($filePath, $domain)
        {
        }
        /**
         * @param string $filePath
         * @param string $domain
         * @param string $locale
         *
         * @return string|null
         */
        private function getCustomFilePath($filePath, $domain, $locale)
        {
        }
        /**
         * @param string $file
         *
         * @return bool
         */
        private static function isWpmlCustomFile($file)
        {
        }
    }
}
namespace WPML\ST\TranslationFile {
    class DomainsLocalesMapper
    {
        const ALIAS_STRINGS = 's';
        const ALIAS_STRING_TRANSLATIONS = 'st';
        /** @var wpdb $wpdb */
        private $wpdb;
        /** @var WPML_Locale $locale */
        private $locale;
        public function __construct(\wpdb $wpdb, \WPML_Locale $locale)
        {
        }
        /**
         * @param array $string_translation_ids
         *
         * @return Collection of objects with properties `domain` and `locale`
         */
        public function get_from_translation_ids(array $string_translation_ids)
        {
        }
        /**
         * @param array $string_ids
         *
         * @return Collection of objects with properties `domain` and `locale`
         */
        public function get_from_string_ids(array $string_ids)
        {
        }
        /**
         * @param  callable  $getActiveLanguages
         * @param  string  $domain
         *
         * @return array
         */
        public function get_from_domain(callable $getActiveLanguages, $domain)
        {
        }
        /**
         * @param string $table_alias
         * @param array $ids
         *
         * @return Collection
         */
        private function get_results_where($table_alias, array $ids)
        {
        }
    }
}
namespace {
    class WPML_ST_String_Translation_Priority_AJAX implements \IWPML_Action
    {
        /** @var wpdb */
        private $wpdb;
        /**
         * @param wpdb $wpdb
         */
        public function __construct(\wpdb $wpdb)
        {
        }
        public function add_hooks()
        {
        }
        public function change_string_translation_priority()
        {
        }
        private function verify_ajax($ajax_action)
        {
        }
    }
    class WPML_Strings_Translation_Priority
    {
        /**
         * @var wpdb
         */
        private $wpdb;
        /**
         * @param wpdb $wpdb
         */
        public function __construct(\wpdb $wpdb)
        {
        }
        /**
         * @param int[] $strings
         * @param string $priority
         *
         * @return array
         */
        public function change_translation_priority_of_strings($strings, $priority)
        {
        }
    }
    class WPML_ST_String_Translation_AJAX_Hooks_Factory implements \IWPML_Backend_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_Admin_Notifier
    {
        public function display_instant_message($message, $type = 'information', $class = \false, $return = \false, $fadeout = \false)
        {
        }
    }
    class WPML_ST_TM_Jobs extends \WPML_WPDB_User
    {
        /**
         * @param wpdb $wpdb
         * WPML_ST_TM_Jobs constructor.
         */
        public function __construct(&$wpdb)
        {
        }
        /**
         * @param bool         $in_progress_status
         * @param array|object $job_arr
         *
         * @return bool true if a job is in progress for the given arguments
         */
        public function tm_external_job_in_progress_filter($in_progress_status, $job_arr)
        {
        }
        public function jobs_union_table_sql_filter($sql_statements, $args)
        {
        }
        /**
         * @param string $table
         *
         * @return string
         */
        public function filter_tm_post_job_table($table)
        {
        }
        private function get_jobs_table_sql_part($sql_statements, $args)
        {
        }
        /**
         * @param array $args
         *          string_where
         *          translator_id
         *          from
         *          to
         *          status
         *          service
         *
         * @return string
         */
        private function build_string_where($args)
        {
        }
    }
    class WPML_ST_Settings
    {
        const SETTINGS_KEY = 'icl_st_settings';
        /**
         * @var array
         */
        private $settings = \null;
        /**
         * @var array
         */
        private $updated_settings = array();
        /**
         * @return array
         */
        public function get_settings()
        {
        }
        /**
         * @param string $name
         *
         * @return mixed|null
         */
        public function get_setting($name)
        {
        }
        /**
         * @param string $key
         * @param mixed $value
         * @param bool $save
         */
        public function update_setting($key, $value, $save = \false)
        {
        }
        public function delete_settings()
        {
        }
        public function save_settings()
        {
        }
    }
    class WPML_ST_String_Factory
    {
        private $wpdb;
        /**
         * WPML_ST_String_Factory constructor.
         *
         * @param wpdb $wpdb
         */
        public function __construct(\wpdb $wpdb)
        {
        }
        /** @var int[] $string_id_cache */
        private $string_id_cache = array();
        /** @var WPML_ST_String $string_cache */
        private $string_cache = array();
        /**
         * @param int $string_id
         *
         * @return WPML_ST_String
         */
        public function find_by_id($string_id)
        {
        }
        /**
         * @param string $name
         *
         * @return WPML_ST_String
         */
        public function find_by_name($name)
        {
        }
        /**
         * @param string $name
         *
         * @return WPML_ST_Admin_String
         */
        public function find_admin_by_name($name)
        {
        }
        /**
         * @param string       $string
         * @param string|array $context
         * @param bool|false   $name
         *
         * @return mixed
         */
        public function get_string_id($string, $context, $name = \false)
        {
        }
    }
    /**
     * WPML_ST_String_Statuses class
     *
     * Get the translation status text for the given status
     */
    class WPML_ST_String_Statuses
    {
        public static function get_status($status)
        {
        }
    }
    class WP_Widget_Text_Icl extends \WP_Widget
    {
        const FILTER_PRIORITY = 0;
        const STRING_DOMAIN = 'Widgets';
        /**
         * WP_Widget_Text_Icl constructor.
         */
        public function __construct()
        {
        }
        function widget($args, $instance)
        {
        }
        function update($new_instance, $old_instance)
        {
        }
        function form($instance)
        {
        }
    }
}
namespace WPML\ST\Package {
    class Domains
    {
        /** @var \wpdb $wpdb */
        private $wpdb;
        /** @var array $domains */
        private $domains;
        public function __construct(\wpdb $wpdb)
        {
        }
        /**
         * @param string|null $domain
         *
         * @return bool
         */
        public function isPackage($domain)
        {
        }
        /**
         * @see \WPML_Package::get_string_context_from_package for how the package domain is built
         *
         * @return Collection
         */
        public function getDomains()
        {
        }
    }
}
namespace {
    class WPML_Package_Translation_Metabox
    {
        private $args;
        private $active_languages;
        private $container_attributes_html;
        private $dashboard_link;
        private $strings_link;
        private $default_language;
        private $main_container_attributes;
        private $show_description;
        private $show_link;
        private $show_status;
        private $show_title;
        private $status_container_attributes;
        private $status_container_attributes_html;
        private $status_container_tag;
        private $status_element_tag;
        private $title_tag;
        public $metabox_data;
        /**
         * @var SitePress
         */
        private $sitepress;
        private $translation_statuses;
        /**
         * @var WPDB
         */
        private $wpdb;
        /**
         * @var \WPML_Package
         */
        private $package;
        /**
         * @var string
         */
        private $package_language;
        public function __construct($package, $wpdb, $sitepress, $args = array())
        {
        }
        private function init_metabox_data()
        {
        }
        private function get_lang_selector()
        {
        }
        public function get_package_language_name()
        {
        }
        private function get_lang_switcher_js()
        {
        }
        function get_metabox()
        {
        }
        public function get_metabox_status()
        {
        }
        private function check_if_language_change_is_ok()
        {
        }
        /**
         * @param $attributes
         *
         * @return string
         */
        private function attributes_to_string($attributes)
        {
        }
        function get_post_translations()
        {
        }
        private function get_tag($tag, $closed = \false)
        {
        }
        /**
         * @param $args
         */
        private function parse_arguments($args)
        {
        }
        /**
         * @return bool
         */
        private function got_package()
        {
        }
        private function get_translation_statuses()
        {
        }
        private function init_translation_statuses()
        {
        }
        private function get_status_value($language_data)
        {
        }
        private function is_package_language_active()
        {
        }
    }
    class WPML_Package_Helper
    {
        const PREFIX_BATCH_STRING = 'batch-string-';
        private $default_language;
        private $last_registered_string_id;
        protected $registered_strings;
        private $package_cleanup;
        private $package_factory;
        private $cache_group;
        function __construct()
        {
        }
        public function set_package_factory(\WPML_ST_Package_Factory $factory)
        {
        }
        /**
         * @param $package_id
         */
        protected function delete_package($package_id)
        {
        }
        /**
         * @param $package_id
         *
         * @return array
         */
        protected function get_strings_ids_from_package_id($package_id)
        {
        }
        /**
         * @param $package_id
         */
        protected function delete_package_strings($package_id)
        {
        }
        protected function loaded()
        {
        }
        /**
         * @param string             $string_value
         * @param string             $string_name
         * @param array|WPML_Package $package
         * @param string             $string_title
         * @param string             $string_type
         */
        final function register_string_action($string_value, $string_name, $package, $string_title, $string_type)
        {
        }
        /**
         * @param $default
         * @param $package
         * @param $string_name
         * @param $string_value
         *
         * @return bool|int|mixed
         */
        function string_id_from_package_filter($default, $package, $string_name, $string_value)
        {
        }
        function string_title_from_id_filter($default, $string_id)
        {
        }
        /**
         * @param string             $string_value
         * @param string             $string_name
         * @param array|WPML_Package $package
         * @param string             $string_title
         * @param string             $string_type
         *
         * @return string
         */
        public final function register_string_for_translation($string_value, $string_name, $package, $string_title, $string_type)
        {
        }
        final function get_string_context_from_package($package)
        {
        }
        /**
         * @param WPML_Package $package
         * @param string       $string_name
         * @param string       $string_title
         * @param string       $string_type
         * @param string       $string_value
         *
         * @return bool|int|mixed
         */
        final function register_string_with_wpml($package, $string_name, $string_title, $string_type, $string_value)
        {
        }
        final function translate_string($string_value, $string_name, $package)
        {
        }
        final function get_translated_strings($strings, $package)
        {
        }
        final function set_translated_strings($translations, $package)
        {
        }
        final function get_translatable_types($types)
        {
        }
        /**
         * @param  WPML_Package  $item
         * @param  int|WP_Post|WPML_Package  $package
         * @param  string  $type
         *
         * @return bool|WPML_Package
         */
        public final function get_translatable_item($item, $package, $type = 'package')
        {
        }
        final function get_post_title($title, $package_id)
        {
        }
        final function get_editor_string_name($name, $package)
        {
        }
        private function empty_if_md5($str)
        {
        }
        /**
         * @param string $batch_string_name
         *
         * @return WPML_ST_String|null
         * @throws \Auryn\InjectionException
         */
        private function get_st_string_by_batch_name($batch_string_name)
        {
        }
        final function get_editor_string_style($style, $field_type, $package)
        {
        }
        public final function get_element_id_from_package_filter($default, $package_id)
        {
        }
        public final function get_package_type($type, $post_id)
        {
        }
        public final function get_package_type_prefix($type, $post_id)
        {
        }
        /**
         * @param              $language_for_element
         * @param WPML_Package $current_document
         *
         * @return mixed
         */
        public final function get_language_for_element($language_for_element, $current_document)
        {
        }
        protected final function get_package_context($package)
        {
        }
        final function delete_packages_ajax()
        {
        }
        final function delete_package_action($name, $kind)
        {
        }
        /** @param int $post_id */
        public final function remove_post_packages($post_id)
        {
        }
        protected final function delete_packages($packages_ids)
        {
        }
        final function change_package_lang_ajax()
        {
        }
        /**
         * @param $string_name
         * @param $package_id
         * @param $column
         *
         * @return mixed
         */
        private final function get_editor_string_element($string_name, $package_id, $column)
        {
        }
        private final function flush_cache()
        {
        }
        /**
         * @param WPML_Package $package
         *
         * @return int
         */
        public static final function create_new_package(\WPML_Package $package)
        {
        }
        /**
         * @param $package_id
         */
        private final function init_package_registered_strings($package_id)
        {
        }
        /**
         * @param $package_id
         * @param $string_type
         * @param $string_title
         * @param $string_name
         * @param $string_value
         */
        private final function set_package_registered_strings($package_id, $string_type, $string_title, $string_name, $string_value)
        {
        }
        /**
         * @param $package
         * @param $string_name
         * @param $string_value
         *
         * @return bool|int|mixed
         */
        private final function get_string_id_from_package($package, $string_name, $string_value)
        {
        }
        final function get_external_id_from_package($package)
        {
        }
        final function get_string_context($package)
        {
        }
        final function get_package_id($package, $from_cache = \true)
        {
        }
        public final function get_all_packages()
        {
        }
        protected final function is_a_package($element)
        {
        }
        protected function verify_ajax_call($ajax_action)
        {
        }
        protected function sanitize_string_name($string_name)
        {
        }
        public function refresh_packages()
        {
        }
        /**
         * @param WPML_Package $package
         */
        private function maybe_update_package($package)
        {
        }
        public function change_language_of_strings($strings, $lang)
        {
        }
        public function change_language_of_strings_in_domain($domain, $langs, $to_lang)
        {
        }
        private function set_packages_language($package_ids, $lang)
        {
        }
        /**
         * @param null|array $packages
         * @param int        $post_id
         *
         * @return WPML_Package[]
         */
        public function get_post_string_packages($packages, $post_id)
        {
        }
        /**
         * @param int         $string_id
         * @param string      $language
         * @param string|null $value
         * @param int|bool    $status
         * @param int|null    $translator_id
         * @param int|null    $translation_service
         * @param int|null    $batch_id
         */
        public function add_string_translation_action($string_id, $language, $value = \null, $status = \false, $translator_id = \null, $translation_service = \null, $batch_id = \null)
        {
        }
        /**
         * @param mixed $package
         * @param int   $package_id
         *
         * @return WPML_Package
         */
        public function get_string_package($package, $package_id)
        {
        }
        public function start_string_package_registration_action($package)
        {
        }
        public function delete_unused_package_strings_action($package)
        {
        }
    }
    class WPML_Package_Exception extends \Exception
    {
        public $type;
        public function __construct($type = '', $message = "", $code = 0)
        {
        }
    }
    class WPML_Package
    {
        const CACHE_GROUP = 'WPML_Package';
        public $ID;
        public $view_link;
        public $edit_link;
        public $is_translation;
        public $string_data;
        public $title;
        public $new_title;
        public $kind_slug;
        public $kind;
        public $trid;
        public $name;
        public $translation_element_type;
        public $post_id;
        private $element_type_prefix;
        /**
         * @param stdClass|WPML_Package|array|int $data_item
         */
        function __construct($data_item)
        {
        }
        private function init_from_id($id, $output = \OBJECT)
        {
        }
        public function __get($property)
        {
        }
        public function __set($property, $value)
        {
        }
        public function __isset($property)
        {
        }
        public function __unset($property)
        {
        }
        public function get_translation_element_type()
        {
        }
        public function get_package_post_id()
        {
        }
        public function get_element_type_prefix()
        {
        }
        public function set_package_post_data()
        {
        }
        public function update_strings_data()
        {
        }
        /**
         * @param bool $refresh
         *
         * @return mixed
         */
        public function get_package_strings($refresh = \false)
        {
        }
        public function set_strings_language($language_code)
        {
        }
        /**
         * @param $result
         *
         * @return string
         */
        private function get_package_string_name_from_st_name($result)
        {
        }
        private function sanitize_attributes()
        {
        }
        public function create_new_package_record()
        {
        }
        public function update_package_record()
        {
        }
        public function get_package_id()
        {
        }
        public function sanitize_string_name($string_name)
        {
        }
        function translate_string($string_value, $sanitized_string_name)
        {
        }
        function get_string_context_from_package()
        {
        }
        public function get_string_id_from_package($string_name, $string_value)
        {
        }
        function get_translated_strings($strings)
        {
        }
        function set_translated_strings($translations)
        {
        }
        private function init_from_array($args)
        {
        }
        public function has_kind_and_name()
        {
        }
        private function set_package_from_db()
        {
        }
        private function get_package_from_id()
        {
        }
        private function get_package_from_name_and_kind()
        {
        }
        private function package_name_and_kind_exists()
        {
        }
        private function package_id_exists()
        {
        }
        /**
         * @return bool|mixed
         */
        protected function package_exists()
        {
        }
        /**
         * @return bool
         */
        private function has_id()
        {
        }
        /**
         * @param $package
         */
        private function object_to_package($package)
        {
        }
        private function get_kind_from_slug()
        {
        }
        private function sanitize_kind()
        {
        }
        public function get_package_element_type()
        {
        }
        /**
         * @return string|null
         */
        public function get_package_language()
        {
        }
        public function are_all_strings_included($strings)
        {
        }
        public function flush_cache()
        {
        }
    }
    class WPML_ST_Package_Factory
    {
        /** @var WPML_WP_Cache_Factory $cache_factory */
        private $cache_factory;
        public function __construct(\WPML_WP_Cache_Factory $cache_factory = \null)
        {
        }
        /**
         * @param array|WPML_Package $package_data
         *
         * @return WPML_Package
         */
        public function create($package_data)
        {
        }
        /**
         * @param array|WPML_Package $package_data
         *
         * @return WPML_WP_Cache_Item
         */
        private function get_cache_item($package_data)
        {
        }
    }
    class WPML_Package_Translation_Schema
    {
        const OPTION_NAME = 'wpml-package-translation-db-updates-run';
        const REQUIRED_VERSION = '0.0.2';
        private static $table_name;
        static function run_update()
        {
        }
        private static function current_table_has_column($column)
        {
        }
        private static function add_string_package_id_to_icl_strings()
        {
        }
        private static function add_type_to_icl_strings()
        {
        }
        private static function add_title_to_icl_strings()
        {
        }
        public static function build_icl_strings_columns_if_required()
        {
        }
        private static function build_icl_string_packages_columns_if_required()
        {
        }
        private static function add_kind_slug_to_icl_string_packages()
        {
        }
        private static function add_view_link_to_icl_string_packages()
        {
        }
        private static function fix_icl_string_packages_ID_column()
        {
        }
        private static function build_icl_string_packages_table()
        {
        }
        private static function update_kind_slug()
        {
        }
    }
    class WPML_Package_Translation_HTML_Packages
    {
        var $load_priority = 101;
        public function __construct()
        {
        }
        public function loaded()
        {
        }
        private function set_admin_hooks()
        {
        }
        public static function package_translation_menu()
        {
        }
        public function package_translation_menu_options($package_kind_options)
        {
        }
        /**
         * @param $packages
         */
        public function package_translation_menu_body($packages)
        {
        }
        public function render_package_table_columns($position)
        {
        }
        public function render_string_package_status($string_count, $translation_in_progress, $default_package_language)
        {
        }
        private function package_translation_menu_no_packages()
        {
        }
        private function package_translation_menu_items($packages)
        {
        }
    }
    class WPML_Package_TM_Jobs
    {
        /**
         * @var WPML_Package
         */
        protected $package;
        protected function __construct($package)
        {
        }
        public final function validate_translations($create_if_missing = \true)
        {
        }
        protected final function get_trid($create_if_missing = \true)
        {
        }
        public final function set_language_details($language_code = \null)
        {
        }
        public final function get_translatable_item($package)
        {
        }
        public final function delete_translation_jobs()
        {
        }
        public final function delete_translations()
        {
        }
        public final function get_post_translations()
        {
        }
        protected final function update_translation_job_needs_update($job_id)
        {
        }
        final function update_translation_job($rid, $post)
        {
        }
        private function delete_translation_job_fields($rid, $post)
        {
        }
        /**
         * @param int          $rid
         * @param WPML_Package $post
         *
         * @return bool
         */
        private function update_translation_job_fields($rid, $post)
        {
        }
        protected function get_translation_job_id($rid)
        {
        }
        private function get_translations_job_fields($job_id)
        {
        }
        private function delete_translation_field($tid)
        {
        }
        private function insert_update_translation_job_field($field_value, $translation_fields, $field_type, $job_id)
        {
        }
        private function update_translation_field($field_data, $translation_fields, $field_type)
        {
        }
        private function insert_translation_field($job_id, $field_type, $field_data)
        {
        }
    }
    class WPML_Package_Translation extends \WPML_Package_Helper
    {
        var $load_priority = 100;
        var $package_translation_active;
        var $admin_lang_switcher = \null;
        function __construct()
        {
        }
        function loaded(\SitePress $sitepress = \null)
        {
        }
        private function add_admin_hooks()
        {
        }
        private function is_doing_xmlrpc()
        {
        }
        private function add_global_hooks()
        {
        }
        private function run_db_update()
        {
        }
        /**
         * @return bool
         */
        private function passed_dependencies()
        {
        }
        public function add_title_db_location($locations)
        {
        }
        function get_package_edit_url($url, $post_id)
        {
        }
        public function get_package_title($title, $kind, $id)
        {
        }
        function get_package_view_link($link, $post_id, $hide_if_missing_link = \false)
        {
        }
        function get_package_edit_link($link, $post_id, $hide_if_missing_link = \false)
        {
        }
        private function build_package_link($url, $title, $hide_if_missing_link = \false)
        {
        }
        /**
         * @param       $package
         * @param array $args
         */
        function show_language_selector($package, $args = array())
        {
        }
        /**
         * @param       $package
         * @param array $args
         */
        function show_admin_bar_language_selector($package, $args = array())
        {
        }
        function cleanup_translation_jobs_basket_packages($translation_jobs_basket)
        {
        }
        public function update_translation_jobs_basket($translation_jobs_cart, $translation_jobs_basket, $item_type)
        {
        }
        public function basket_items_types($item_types)
        {
        }
        /**
         * @param $package_target_languages
         *
         * @return array
         */
        private function languages_to_csv($package_target_languages)
        {
        }
        function is_external($result, $type)
        {
        }
        public function get_element_type($type, $element)
        {
        }
        /**
         * @param $attributes
         *
         * @return string
         */
        public function attributes_to_string($attributes)
        {
        }
        /**
         * @param $kind_slug
         *
         * @return string
         */
        public static function get_package_element_type($kind_slug)
        {
        }
        /**
         * @param $package
         *
         * @return bool
         */
        public function package_has_kind($package)
        {
        }
        /**
         * @param $package
         *
         * @return bool
         */
        public function package_has_name($package)
        {
        }
        /**
         * @param $package
         *
         * @return bool
         */
        public function package_has_title($package)
        {
        }
        /**
         * @param $package
         *
         * @return bool
         */
        public function package_has_kind_and_name($package)
        {
        }
        /**
         * @param $string_name
         *
         * @return mixed
         */
        public function sanitize_string_with_underscores($string_name)
        {
        }
        function new_external_item($type, $package_item, $get_string_data = \false)
        {
        }
        function get_package_from_external_id($post_id)
        {
        }
        function _get_package_strings($package_item)
        {
        }
        function get_link($item, $package_item, $anchor, $hide_empty)
        {
        }
        /**
         * Update translations
         *
         * @param      $package_id
         * @param bool $is_new       - set to true for newly created form (first save without fields)
         * @param bool $needs_update - when deleting single field we do not need to change the translation status of the form
         *
         * @internal param array $item - package information
         */
        function update_package_translations($package_id, $is_new, $needs_update = \true)
        {
        }
        /**
         * Functions to update translations when packages are modified in admin
         *
         * @param $rid
         * @param $post
         */
        function update_icl_translate($rid, $post)
        {
        }
        private function get_package_details($package_id)
        {
        }
        function get_string_context_title($context, $string_details)
        {
        }
        function get_string_title($title, $string_details)
        {
        }
        function _get_post_translations($package)
        {
        }
        function _is_translation_in_progress($package)
        {
        }
        function _delete_translation_job($package_id)
        {
        }
        public function add_to_basket($data)
        {
        }
        function _no_wpml_warning()
        {
        }
        public function tm_dashboard_sql_filter($sql)
        {
        }
        /**
         * @return bool
         */
        private function is_refresh_required()
        {
        }
        private function set_refresh_not_required()
        {
        }
        public function save_package_translations($element_type_prefix, $job, $decoder)
        {
        }
    }
    class WPML_Package_ST
    {
        public function get_string_element($string_id, $column = \false)
        {
        }
        public function get_string_title($title, $string_details)
        {
        }
    }
    class WPML_Package_Admin_Lang_Switcher
    {
        private $package;
        private $args;
        public function __construct($package, $args)
        {
        }
        function admin_language_switcher()
        {
        }
        function add_meta_box()
        {
        }
        function add_js()
        {
        }
    }
    class WPML_Package_Translation_UI
    {
        var $load_priority = 101;
        private $menu_root = '';
        const MENU_SLUG = 'wpml-package-management';
        public function __construct()
        {
        }
        public function loaded()
        {
        }
        private function passed_dependencies()
        {
        }
        private function set_admin_hooks()
        {
        }
        public function main_menu_configured($menu_id, $root_slug)
        {
        }
        /**
         * @param string $menu_id
         */
        public function menu($menu_id)
        {
        }
        function admin_register_scripts()
        {
        }
        function admin_enqueue_scripts($hook)
        {
        }
    }
    class WPML_Package_TM extends \WPML_Package_TM_Jobs
    {
        public function __construct($package)
        {
        }
        public function get_translation_statuses()
        {
        }
        /**
         * @param $package WPML_Package
         * @param $translation
         * @param $lang
         * @return mixed
         */
        private function set_translation_status($package, $translation, $lang)
        {
        }
        public function is_translation_in_progress()
        {
        }
        /**
         * Update translations
         *
         * @param bool $is_new_package
         * @param bool $needs_update - when deleting single field we do not need to change the translation status of the form
         *
         * @return bool
         */
        public function update_package_translations($is_new_package, $needs_update = \true)
        {
        }
        private function get_item_md5_translations($trid)
        {
        }
        private function get_translation_state($translation)
        {
        }
        public function add_package_to_basket($translation_action, $source_language, $target_language)
        {
        }
        private function duplicate_package($package_id)
        {
        }
        /**
         * @param $translation_action
         * @param $source_language
         *
         * @return bool
         */
        private function validate_basket_package_item($translation_action, $source_language)
        {
        }
        private function is_duplicate_or_do_nothing($translation_action)
        {
        }
        private function duplicate_or_do_nothing($translation_action, $target_language)
        {
        }
        /**
         * @param     $source_language
         * @param     $target_language
         *
         * @throws WPML_Package_Exception
         */
        public function send_package_to_basket($source_language, $target_language)
        {
        }
        /**
         * @param $job_details
         * @param $post_title
         * @param $language_name
         *
         * @return bool
         * @throws WPML_Package_Exception
         */
        private function validate_package_status($job_details, $post_title, $language_name)
        {
        }
        public function is_in_basket($target_lang)
        {
        }
    }
    class WPML_String_Scanner
    {
        const DEFAULT_DOMAIN = 'default';
        /**
         * @param string|NULL $type 'plugin' or 'theme'
         */
        protected $current_type;
        protected $current_path;
        protected $text_domain;
        private $domains;
        private $registered_strings;
        private $lang_codes;
        private $currently_scanning;
        private $domains_found;
        private $default_domain;
        /** @var WP_Filesystem_Base */
        private $wp_filesystem;
        /** @var WPML_File $wpml_file */
        private $wpml_file;
        /**
         * @var array
         */
        private $scan_stats;
        private $scanned_files;
        /**
         * @var WPML_File_Name_Converter
         */
        private $file_name_converter;
        /**
         * @var WPML_ST_DB_Mappers_String_Positions
         */
        private $string_positions_mapper;
        /**
         * @var WPML_ST_DB_Mappers_Strings
         */
        private $strings_mapper;
        /** @var WPML_ST_File_Hashing */
        protected $file_hashing;
        /**
         * WPML_String_Scanner constructor.
         *
         * @param WP_Filesystem_Base $wp_filesystem
         * @param WPML_ST_File_Hashing $file_hashing
         */
        public function __construct(\WP_Filesystem_Base $wp_filesystem, \WPML_ST_File_Hashing $file_hashing)
        {
        }
        protected function scan_starting($scanning)
        {
        }
        protected function scan_response()
        {
        }
        protected final function init_text_domain($text_domain)
        {
        }
        protected function get_domains_found()
        {
        }
        protected function get_default_domain()
        {
        }
        protected function maybe_register_string($value, $gettext_context)
        {
        }
        /**
         * Get list of files under directory.
         * @param  string $path       Directory to parse.
         * @param  object $filesystem WP_Filesystem object
         * @return array
         */
        private function extract_files($path, $filesystem)
        {
        }
        /**
         * Make sure that the last character is second argument.
         * @param  string $path
         * @param  string $separator
         * @return string
         */
        private function add_dir_separator($path, $separator = \DIRECTORY_SEPARATOR)
        {
        }
        private function fix_existing_string_with_wrong_context($original_value, $new_string_context, $gettext_context)
        {
        }
        private function get_old_context()
        {
        }
        private function get_lang_code($lang_locale)
        {
        }
        private function get_string_id($original, $domain, $gettext_context)
        {
        }
        private function fix_string_context($string_id, $new_string_context)
        {
        }
        protected function set_stats($key, $item)
        {
        }
        public function store_results($string, $domain, $_gettext_context, $file, $line)
        {
        }
        private function register_string($domain, $context, $name, $string)
        {
        }
        private function warm_cache($domain)
        {
        }
        public function track_string($text, $context, $kind = \ICL_STRING_TRANSLATION_STRING_TRACKING_TYPE_PAGE, $file = \null, $line = \null)
        {
        }
        protected function add_stat($text)
        {
        }
        protected function get_scan_stats()
        {
        }
        protected function add_scanned_file($file)
        {
        }
        protected function get_scanned_files()
        {
        }
        protected function cleanup_wrong_contexts()
        {
        }
        protected function copy_old_translations($contexts, $prefix)
        {
        }
        /**
         * @param string $context
         *
         * @return array
         */
        private function get_strings_by_context($context)
        {
        }
        /**
         * @param array $strings
         *
         * @return array
         */
        private function get_strings_translations($strings)
        {
        }
        protected function remove_notice($notice_id)
        {
        }
        /**
         * @return WPML_ST_DB_Mappers_Strings
         */
        public function get_strings_mapper()
        {
        }
        /**
         * @param WPML_ST_DB_Mappers_Strings $strings_mapper
         */
        public function set_strings_mapper(\WPML_ST_DB_Mappers_Strings $strings_mapper)
        {
        }
        /**
         * @return WPML_ST_DB_Mappers_String_Positions
         */
        public function get_string_positions_mapper()
        {
        }
        /**
         * @param WPML_ST_DB_Mappers_String_Positions $string_positions_mapper
         */
        public function set_string_positions_mapper(\WPML_ST_DB_Mappers_String_Positions $string_positions_mapper)
        {
        }
        /**
         * @return WPML_File_Name_Converter
         */
        public function get_file_name_converter()
        {
        }
        /**
         * @param WPML_File_Name_Converter $converter
         */
        public function set_file_name_converter(\WPML_File_Name_Converter $converter)
        {
        }
        /**
         * @return WPML_File
         */
        protected function get_wpml_file()
        {
        }
        private function is_string_preview()
        {
        }
        /** @return bool */
        protected function scan_php_and_mo_files()
        {
        }
        protected function scan_only_mo_files()
        {
        }
        /**
         * @param string $path
         *
         * @return string
         */
        private function format_path_for_display($path)
        {
        }
    }
    class WPML_Theme_String_Scanner extends \WPML_String_Scanner implements \IWPML_ST_String_Scanner
    {
        public function scan()
        {
        }
        private function scan_theme_files()
        {
        }
    }
    class WPML_PO_Import
    {
        private $lines;
        private $strings;
        private $error_str;
        public function __construct($file_name)
        {
        }
        private function get_string($string, $k)
        {
        }
        private function strip_slashes($string)
        {
        }
        public function has_strings()
        {
        }
        public function get_strings()
        {
        }
        public function get_errors()
        {
        }
    }
    class WPML_PO_Parser
    {
        public static function create_po($strings, $pot_only = \false)
        {
        }
        public static function get_po_file_header()
        {
        }
        private static function output_string($str)
        {
        }
        private static function addslashes($str)
        {
        }
    }
    class WPML_Plugin_String_Scanner extends \WPML_String_Scanner implements \IWPML_ST_String_Scanner
    {
        private $current_plugin_file;
        public function scan()
        {
        }
        private function scan_plugin_files($dir_or_file = \false, $recursion = 0)
        {
        }
        private function get_plugin_text_domain()
        {
        }
    }
}
namespace WPML\Ajax\ST\AdminText {
    class Register implements \WPML\Ajax\IHandler
    {
        /** @var \WPML_Admin_Texts */
        private $adminTexts;
        public function __construct(\WPML_Admin_Texts $adminTexts)
        {
        }
        /**
         * Registers or Unregisters an option for translation depending
         * on the `state` data.
         *
         * @param Collection $data
         *
         * @return Either
         */
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
        /**
         * string $state -> string [key1][key2][name] -> array [ key1 => [ key2 => [ name => $state ] ] ]
         *
         * @param string $state
         * @param string $option
         *
         * @return array
         */
        public static function flatToHierarchical($state, $option)
        {
        }
    }
}
namespace {
    abstract class WPML_Admin_Text_Functionality
    {
        public final function is_blacklisted($option_name)
        {
        }
        protected function read_admin_texts_recursive($keys, $admin_text_context, $type, &$arr_context, &$arr_type)
        {
        }
        /**
         * @param string $key     Name of option to retrieve. Expected to not be SQL-escaped.
         * @param mixed  $default Value to return in case the string does not exists
         *
         * @return mixed Value set for the option.
         */
        public function get_option_without_filtering($key, $default = \false)
        {
        }
    }
    class WPML_Admin_Text_Configuration extends \WPML_Admin_Text_Functionality
    {
        /** @var  array $config */
        private $config;
        /**
         * @param string|stdClass $file_or_object
         */
        function __construct($file_or_object = '')
        {
        }
        function get_config_array()
        {
        }
        private function fill_wildcards(array $config_array)
        {
        }
        private function get_top_level_filters(array $config_array)
        {
        }
        private function remove_unmatched(array $input, array $all_possibilities)
        {
        }
        /**
         * Creates a regex matcher from a wildcard string name definition
         *
         * @param string $wildcard
         *
         * @return string
         */
        private function wildcard_to_matcher($wildcard)
        {
        }
        private function all_strings_array(array $top_level_filters)
        {
        }
        private function reformat_array($option_value)
        {
        }
        /**
         * @param $file_or_object
         *
         * @return bool
         */
        private function can_handle_custom_xml($file_or_object)
        {
        }
    }
    class WPML_Admin_Texts extends \WPML_Admin_Text_Functionality
    {
        const DOMAIN_NAME_PREFIX = 'admin_texts_';
        const FIND_KEYS_REGEX = '#\\[([^\\]]+)\\]#';
        /** @var array $cache - A cache for each option translation */
        private $cache = [];
        /** @var array $option_names - The option names from Admin texts settings */
        private $option_names = [];
        /** @var  TranslationManagement $tm_instance */
        private $tm_instance;
        /** @var  WPML_String_Translation $st_instance */
        private $st_instance;
        /** @var bool $lock */
        private $lock = \false;
        /**
         * @param TranslationManagement   $tm_instance
         * @param WPML_String_Translation $st_instance
         */
        function __construct(&$tm_instance, &$st_instance)
        {
        }
        /**
         * @param mixed $value
         *
         * @return array|mixed|object
         */
        private static function object_to_array($value)
        {
        }
        function icl_register_admin_options($array, $key = "", $option = array())
        {
        }
        public function getModelForRender()
        {
        }
        /**
         * @param Collection $options
         *
         * @return Collection
         */
        public function getModel(\WPML\Collect\Support\Collection $options)
        {
        }
        /**
         * @param Collection $flattened
         * @param array      $item
         *
         * @return Collection
         */
        public function flattenModelItems(\WPML\Collect\Support\Collection $flattened, array $item)
        {
        }
        /**
         * @param  callable  $isRegistered  - string -> string -> bool
         * @param  mixed  $value
         * @param  string  $name
         * @param  string  $key
         * @param  array  $stack
         *
         * @return array
         */
        public function getItemModel(callable $isRegistered, $value, $name, $key = '', $stack = [])
        {
        }
        private function isOnStack(array $stack)
        {
        }
        private function is_sub_key_fixed($sub_key)
        {
        }
        private function get_context($option_key, $option_name)
        {
        }
        public function getOptions()
        {
        }
        function icl_st_set_admin_options_filters()
        {
        }
        function icl_st_translate_admin_string($option_value, $key = "", $name = "", $root_level = \true)
        {
        }
        /**
         * @param string $key - string like '[key1][key2]'
         * @param string $name
         *
         * @return bool
         */
        private function isAdminText($key, $name)
        {
        }
        /**
         * getKeys :: string [key1][key2][name] => Collection [key1, key2, name]
         *
         * @param string $option
         *
         * @return Collection
         */
        public static function getKeysParts($option)
        {
        }
        function clear_cache_for_option($option_name)
        {
        }
        /**
         * @param string|array $old_value
         * @param string|array $value
         * @param string       $option_name
         * @param string       $name
         * @param string       $sub_key
         */
        public function on_update_original_value($old_value, $value, $option_name, $name = '', $sub_key = '')
        {
        }
        public function migrate_original_values()
        {
        }
        /**
         * Returns a function to lazy load the migration
         *
         * @return Closure
         */
        public static function get_migrator()
        {
        }
        /**
         * @param mixed  $option_value
         * @param string $key
         * @param string $name
         *
         * @return array|mixed
         */
        private function translate_multiple($option_value, $key, $name)
        {
        }
        /**
         * @param string $option_value
         * @param string $key
         * @param string $name
         * @param string $option_name
         *
         * @return string
         */
        private function translate_single($option_value, $key, $name, $option_name)
        {
        }
        /**
         * @return array
         */
        private function getOptionNames()
        {
        }
        /**
         * getSubKeys :: string [key1][key2] -> string name => string [key1][key2][name]
         *
         * @param string $key - [key1][key2]
         * @param string $name
         *
         * @return string
         */
        private function getSubKey($key, $name)
        {
        }
        /**
         * getSubKeys :: string [key1][key2] -> string name => string [key1][key2]name
         *
         * @param string $key
         * @param string $name
         *
         * @return string
         */
        private function getDBStringName($key, $name)
        {
        }
        /**
         * @return Collection
         * @throws \Auryn\InjectionException
         */
        private function getStringNamesPerContext()
        {
        }
        /**
         * @param mixed $value
         *
         * @return bool
         */
        private function isMultiValue($value)
        {
        }
    }
}
namespace WPML\ST\AdminTexts {
    class UI implements \IWPML_Backend_Action_Loader
    {
        // shouldShow :: Collection -> bool
        public static function shouldShow(\WPML\Collect\Support\Collection $data)
        {
        }
        public static function localize(\WPML\Collect\Support\Collection $model)
        {
        }
        /**
         * @return callable|null
         */
        public function create()
        {
        }
    }
}
namespace {
    class WPML_Admin_Text_Import extends \WPML_Admin_Text_Functionality
    {
        /** @var WPML_ST_Records $st_records */
        private $st_records;
        /** @var WPML_WP_API $wp_api */
        private $wp_api;
        function __construct(\WPML_ST_Records $st_records, \WPML_WP_API $wp_api)
        {
        }
        /**
         * @param array  $admin_texts
         * @param string $config_handler_hash
         */
        function parse_config(array $admin_texts, $config_handler_hash)
        {
        }
        private function register_string_recursive($key, $value, $arr, $prefix = '', $suffix, $requires_upgrade, $type, $admin_text_context_old)
        {
        }
        private function migrate_3_2($type, $old_admin_text_context, $new_admin_text_context, $key)
        {
        }
    }
    class WPML_ST_String_Update
    {
        private $wpdb;
        /**
         * WPML_ST_String_Update constructor.
         *
         * @param WPDB $wpdb
         */
        public function __construct(\WPDB $wpdb)
        {
        }
        /**
         * Updates an original string without changing its id or its translations
         *
         * @param string     $domain
         * @param string     $name
         * @param string     $old_value
         * @param string     $new_value
         * @param bool|false $force_complete , @see \WPML_ST_String_Update::handle_status_change
         *
         * @return int|null
         */
        public function update_string($domain, $name, $old_value, $new_value, $force_complete = \false)
        {
        }
        /**
         * @param string $string
         * @return string
         */
        function sanitize_string($string)
        {
        }
        /**
         * Handles string status changes resulting from the string update
         *
         * @param object $string
         * @param bool   $force_complete if true, all translations will be marked as complete even though  a string's original value has been updated,
         *                               currently this applies to blogname and tagline strings
         */
        private function handle_status_change($string, $force_complete)
        {
        }
        /**
         * @param string $name
         * @param string $context
         * @param string $old_value
         * @param string $new_value
         *
         * @return object
         */
        private function get_initial_string($name, $context, $old_value, $new_value)
        {
        }
        /**
         * Reads a strings id,value,status and name directly from the database without any caching.
         *
         * @param string $name
         * @param string $context
         *
         * @return object|null
         */
        private function read_string_from_db($name, $context)
        {
        }
        /**
         * Updates a widgets string name if it's value got changed, since widget string's name and value are coupled.
         * Changes in value necessitate changes in the name. @see \icl_sw_filters_widget_title and \icl_sw_filters_widget_body
         *
         * @param string $name
         * @param string $old_value
         * @param string $new_value
         *
         * @return array
         */
        private function update_widget_name($name, $old_value, $new_value)
        {
        }
        /**
         * Writes updates to a widget strings name to the icl_strings table.
         *
         * @param string $context
         * @param string $old_name
         * @param string $new_name
         *
         * @return false|int false on error, 1 on successful update and 0 if no update took place
         */
        private function write_widget_update_to_db($context, $old_name, $new_name)
        {
        }
        private function delete_old_widget_title_string_if_new_already_exists($string)
        {
        }
    }
    /**
     * Class WPML_String_Translation
     */
    class WPML_String_Translation
    {
        const CACHE_GROUP = 'wpml-string-translation';
        private $load_priority = 400;
        private $messages = array();
        private $string_filters = array();
        private $active_languages;
        private $current_string_language_cache = array();
        /** @var  WPML_ST_String_Factory $string_factory */
        private $string_factory;
        /**
         * @var string
         */
        private $admin_language;
        /**
         * @var bool
         */
        private $is_admin_action_from_referer;
        /** @var  SitePress $sitepress */
        protected $sitepress;
        /**
         * @var WPML_WP_Cache
         */
        private $cache;
        /**
         * @param SitePress              $sitepress
         * @param WPML_ST_String_Factory $string_factory
         */
        public function __construct(\SitePress $sitepress, \WPML_ST_String_Factory $string_factory)
        {
        }
        /**
         * Sets up basic actions hooked by ST
         */
        public function set_basic_hooks()
        {
        }
        /**
         * Populates the internal cache for all language codes.
         * @used-by WPML_String_Translation::get_string_filter to not load string filters
         *                                                     for languages that do not
         *                                                     exist.
         * @used-by WPML_String_Translation::get_admin_string_filter See above.
         */
        function init_active_languages()
        {
        }
        function load()
        {
        }
        function init()
        {
        }
        function plugin_localization()
        {
        }
        /**
         * @since 2.2.3
         *
         * @param            string $context
         * @param            string $name
         * @param bool|false        string $original_value
         * @param boolean|null      $has_translation
         * @param null|string       $target_lang
         *
         * @return string|bool
         */
        function translate_string($context, $name, $original_value = \false, &$has_translation = \null, $target_lang = \null)
        {
        }
        function add_message($text, $type = 'updated')
        {
        }
        function show_messages()
        {
        }
        function ajax_calls($call, $data)
        {
        }
        /**
         * @param string $menu_id
         */
        function menu($menu_id)
        {
        }
        function plugin_action_links($links, $file)
        {
        }
        public function localization_type_ui()
        {
        }
        function scan_theme_for_strings()
        {
        }
        function scan_plugins_for_strings()
        {
        }
        function plugin_po_file_download($file = \false, $recursion = 0)
        {
        }
        /**
         * @param string $string value of a string
         * @param string $lang_code language code of the string
         *
         * @return int number of words in the string
         */
        public function estimate_word_count($string, $lang_code)
        {
        }
        function cancel_remote_translation($rid)
        {
        }
        function cancel_local_translation($id, $return_original_id = \false)
        {
        }
        /**
         * @param string $value
         * @param string $old_value
         *
         * @return array|string
         */
        function pre_update_option_blogname($value, $old_value)
        {
        }
        /**
         * @param string $value
         * @param string $old_value
         *
         * @return array|string
         */
        function pre_update_option_blogdescription($value, $old_value)
        {
        }
        /**
         * @param string       $option name of the option
         * @param string|array $value new value of the option
         * @param string|array $old_value currently saved value for the option
         *
         * @return string|array the value actually to be written into the wp_options table
         */
        function pre_update_option_settings($option, $value, $old_value)
        {
        }
        /**
         * Instantiates a new admin option translation object
         *
         * @param string $option_name
         * @param string $language_code
         *
         * @return WPML_ST_Admin_Option_Translation
         */
        public function get_admin_option($option_name, $language_code = '')
        {
        }
        /**
         * @return WPML_ST_String_Factory
         */
        public function string_factory()
        {
        }
        /**
         * @param string $lang_code
         */
        public function clear_string_filter($lang_code)
        {
        }
        /**
         * @param string $lang
         *
         * @return WPML_Displayed_String_Filter
         */
        public function get_string_filter($lang)
        {
        }
        public function get_admin_string_filter($lang)
        {
        }
        /**
         * @deprecated 3.3 - Each string has its own language now.
         */
        public function get_strings_language($language = '')
        {
        }
        public function delete_all_string_data($string_id)
        {
        }
        public function get_strings_settings()
        {
        }
        /**
         * @param null $empty   Not used, but needed for the hooked filter
         * @param int $string_id
         *
         * @return null|string
         */
        public function get_string_status_filter($empty = \null, $string_id = 0)
        {
        }
        /**
         * @param int|null $default     Set the default value to return in case no string or more than one string is found
         * @param array    $string_data {
         *
         * @type string    $context
         * @type string    $name        Optional
         *                           }
         * @return int|null If there is more than one string_id, it will return the value set in $default.
         */
        public function get_string_id_filter($default = \null, $string_data = array())
        {
        }
        private function get_string_status($string_id)
        {
        }
        /**
         * @param array $string_data {
         *
         * @type string $context
         * @type string $name        Optional
         *                           }
         * @return int|null
         */
        private function get_string_id($string_data)
        {
        }
        /**
         * @param null $empty   Not used, but needed for the hooked filter
         * @param string $domain
         * @param string $name
         *
         * @return null|string
         */
        public function get_string_language_filter($empty = \null, $domain = '', $name = '')
        {
        }
        /**
         * @param WPML_WP_Cache $cache
         */
        public function set_cache(\WPML_WP_Cache $cache)
        {
        }
        /**
         * @return WPML_WP_Cache
         */
        public function get_cache()
        {
        }
        function check_db_for_gettext_context()
        {
        }
        public function initialize_wp_and_widget_strings()
        {
        }
        /**
         * Returns the language the current string is to be translated into.
         *
         * @param string $name
         *
         * @return string
         */
        public function get_current_string_language($name)
        {
        }
        public function should_use_admin_language()
        {
        }
        /**
         * @return string
         */
        public function get_admin_language()
        {
        }
        /**
         * @return bool
         */
        private function is_admin_action_from_referer()
        {
        }
        public function wpml_language_has_switched()
        {
        }
        public function change_string_lang_ajax_callback()
        {
        }
        public function change_string_lang_of_domain_ajax_callback()
        {
        }
        private function verify_ajax_call($ajax_action)
        {
        }
    }
    class WPML_ST_MO_Downloader
    {
        const LOCALES_XML_FILE = 'http://d2pf4b3z51hfy8.cloudfront.net/wp-locales.xml.gz';
        const CONTEXT = 'WordPress';
        private $settings;
        private $xml;
        private $translation_files = array();
        /**
         * @var string[string]
         */
        private $lang_map;
        /**
         * @var string[string]
         */
        private $lang_map_rev;
        function __construct()
        {
        }
        function set_lang_map_from_csv()
        {
        }
        function updates_check($args = array())
        {
        }
        function show_updates()
        {
        }
        function save_preferences()
        {
        }
        function save_settings()
        {
        }
        function get_option($name)
        {
        }
        function load_xml()
        {
        }
        function get_mo_file_urls($wplocale)
        {
        }
        function get_translation_files()
        {
        }
        function get_translations($language, $args = array())
        {
        }
        function save_translations($data, $language, $version = \false)
        {
        }
    }
    class WPML_Localization
    {
        /**
         * @var \wpdb
         */
        private $wpdb;
        /**
         * WPML_Localization constructor.
         *
         * @param wpdb $wpdb
         */
        public function __construct(\wpdb $wpdb)
        {
        }
        public function get_theme_localization_stats($theme_localization_domains = array())
        {
        }
        private function get_domain_stats($localization_domains, $default, $no_wordpress = \false)
        {
        }
        public function get_localization_stats($component_type)
        {
        }
        private function get_localization_data($component_type)
        {
        }
        public function get_wrong_plugin_localization_stats()
        {
        }
        public function get_wrong_theme_localization_stats()
        {
        }
        public function does_theme_require_rescan()
        {
        }
        public function get_most_popular_domain($plugin)
        {
        }
        private function results_to_array($results)
        {
        }
    }
}
namespace {
    function wpml_st_pos_scan_store_results($string, $domain, $context, $file, $line)
    {
    }
    function icl_st_init()
    {
    }
    function wpml_st_init_register_widget_titles()
    {
    }
    function wpml_get_default_widget_title($id)
    {
    }
    /**
     * Registers a string for translation
     *
     * @param string|array $context           The context for the string
     * @param string       $name              A name to help the translator understand what’s being translated
     * @param string       $value             The string value
     * @param bool         $allow_empty_value This param is not being used
     * @param string       $source_lang       The language of the registered string. Defaults to 'en'
     *
     * @return int string_id of the just registered string or the id found in the database corresponding to the
     *             input parameters
     */
    function icl_register_string($context, $name, $value, $allow_empty_value = \false, $source_lang = '')
    {
    }
    /**
     * Registers a string for translation
     *
     * @api
     *
     * @param string $context The context for the string
     * @param string $name A name to help the translator understand what’s being translated
     * @param string $value The string value
     * @param bool $allow_empty_value This param is not being used
     * @param string $source_lang_code
     */
    function wpml_register_single_string_action($context, $name, $value, $allow_empty_value = \false, $source_lang_code = '')
    {
    }
    /**
     * @param string|array $context
     * @param string       $name
     * @param bool         $value
     * @param bool         $allow_empty_value
     * @param null|bool    $has_translation
     * @param null|string  $target_lang
     *
     * @return bool|string
     */
    function icl_translate($context, $name, $value = \false, $allow_empty_value = \false, &$has_translation = \null, $target_lang = \null)
    {
    }
    /**
     * @return bool
     */
    function wpml_st_is_requested_blog()
    {
    }
    /**
     * @param string $value
     * @param mixed $context
     * @param string $name
     *
     * @return string
     */
    function wpml_get_string_current_translation($value, $context, $name)
    {
    }
    function icl_st_is_registered_string($context, $name)
    {
    }
    function icl_st_string_has_translations($context, $name)
    {
    }
    function icl_update_string_status($string_id)
    {
    }
    function icl_update_string_status_all()
    {
    }
    /**
     * @param string $context
     * @param string $name
     */
    function icl_unregister_string($context, $name)
    {
    }
    /**
     * @param array $string_ids
     */
    function wpml_unregister_string_multi(array $string_ids)
    {
    }
    /**
     * @since      unknown
     * @deprecated 3.2 use 'wpml_translate_string' filter instead.
     */
    function translate_string_filter($original_value, $context, $name, $has_translation = \null, $disable_auto_register = \false, $language_code = \null)
    {
    }
    /**
     * Retrieve a string translation
     * Looks for a string with matching $context and $name.
     * If it finds it, it looks for translation in the current language or the language specified
     * If a translation exists, it will return it. Otherwise, it will return the original string.
     *
     * @api
     *
     * @param string|bool $original_value           The string's original value
     * @param string      $context                  The string's registered context
     * @param string      $name                     The string's registered name
     * @param null|string $language_code            Return the translation in this language
     *                                              Default is NULL which returns the current language
     * @param bool|null   $has_translation          Currently unused. Defaults to NULL
     *
     * @return string
     */
    function wpml_translate_single_string_filter($original_value, $context, $name, $language_code = \null, $has_translation = \null)
    {
    }
    /**
     * Retrieve a string translation
     * Looks for a string with matching $context and $name.
     * If it finds it, it looks for translation in the current language or the language specified
     * If a translation exists, it will return it. Otherwise, it will return the original string.
     *
     * @param string|bool $original_value           The string's original value
     * @param string      $context                  The string's registered context
     * @param string      $name                     The string's registered name
     * @param bool|null   $has_translation          Currently unused. Defaults to NULL
     * @param bool        $disable_auto_register    Currently unused. Set to false in calling icl_translate
     * @param null|string $language_code            Return the translation in this language
     *                                              Default is NULL which returns the current language
     *
     * @return string
     */
    function icl_t($context, $name, $original_value = \false, &$has_translation = \null, $disable_auto_register = \false, $language_code = \null)
    {
    }
    /**
     * @deprecated since WPML ST 3.0.0
     *
     * @param string $name
     *
     * @return bool
     */
    function is_translated_admin_string($name)
    {
    }
    /**
     * Helper function for icl_t()
     * @param array $result
     * @param string $original_value
     * @return boolean
     */
    function _icl_is_string_change($result, $original_value)
    {
    }
    function icl_add_string_translation($string_id, $language, $value = \null, $status = \false, $translator_id = \null, $translation_service = \null, $batch_id = \null)
    {
    }
    /**
     * Updates the string translation for an admin option
     *
     * @global SitePress               $sitepress
     * @global WPML_String_Translation $WPML_String_Translation
     *
     * @param string                   $option_name
     * @param string                   $language
     * @param string                   $new_value
     * @param int|bool                 $status
     * @param int                      $translator_id
     *
     * @return boolean|mixed
     */
    function icl_update_string_translation($option_name, $language, $new_value = \null, $status = \false, $translator_id = \null)
    {
    }
    /**
     * @param $string
     * @param $context
     * @param bool|false $name
     *
     * @return int
     */
    function icl_get_string_id($string, $context, $name = \false)
    {
    }
    function icl_get_string_translations()
    {
    }
    /** *
     * @param int          $string_id     ID of string in icl_strings DB table
     * @param string|false $language_code false, or language code
     *
     * @return string|false
     */
    function icl_get_string_by_id($string_id, $language_code = \false)
    {
    }
    function icl_get_string_translations_by_id($string_id)
    {
    }
    /**
     * @param $string_translations
     *
     * @return string[]
     */
    function icl_get_strings_tracked_in_pages($string_translations)
    {
    }
    function icl_sw_filters_widget_title($val)
    {
    }
    function icl_sw_filters_widget_text($val)
    {
    }
    /**
     * @deprecated since WPML ST 3.0.0
     *
     * @param string $translation String This parameter is not important to the filter since we filter before other filters.
     * @param string $text
     * @param string|array $domain
     * @param bool|string $name
     *
     * @return string
     * @throws Auryn\InjectionException Auryn Exception.
     */
    function icl_sw_filters_gettext($translation, $text, $domain, $name = \false)
    {
    }
    /**
     * @deprecated since WPML ST 3.0.0
     *
     * @param $sitepress_settings
     *
     * @return bool
     */
    function icl_sw_must_track_strings($sitepress_settings)
    {
    }
    function icl_st_track_string($text, $domain, $kind = \ICL_STRING_TRANSLATION_STRING_TRACKING_TYPE_PAGE)
    {
    }
    /**
     * @deprecated since WPML ST 3.0.0
     *
     * @param string $translation
     * @param string $text
     * @param string $_gettext_context
     * @param string $domain
     *
     * @return string
     * @throws Auryn\InjectionException Auryn Exception.
     */
    function icl_sw_filters_gettext_with_context($translation, $text, $_gettext_context, $domain)
    {
    }
    /**
     * @deprecated since WPML ST 3.0.0
     *
     * @param string       $translation
     * @param string       $single
     * @param string       $plural
     * @param string       $number
     * @param string|array $domain
     * @param string|false $_gettext_context
     *
     * @return string
     * @throws Auryn\InjectionException Auryn Exception.
     */
    function icl_sw_filters_ngettext($translation, $single, $plural, $number, $domain, $_gettext_context = \false)
    {
    }
    /**
     * @deprecated since WPML ST 3.0.0
     *
     * @param string $translation
     * @param string $single
     * @param string $plural
     * @param string $number
     * @param string $_gettext_context
     * @param string $domain
     *
     * @return string
     * @throws Auryn\InjectionException Auryn Exception.
     *
     */
    function icl_sw_filters_nxgettext($translation, $single, $plural, $number, $_gettext_context, $domain)
    {
    }
    /**
     * @return array Translated User IDs
     */
    function icl_st_register_user_strings_all()
    {
    }
    function icl_st_update_string_actions($context, $name, $old_value, $new_value, $force_complete = \false)
    {
    }
    function icl_st_update_widget_title_actions($old_options, $new_options)
    {
    }
    function icl_st_update_text_widgets_actions($old_options, $new_options)
    {
    }
    function icl_st_get_contexts($status)
    {
    }
    function icl_st_admin_notices()
    {
    }
    function icl_st_generate_po_file($strings)
    {
    }
    function _icl_st_get_options_writes($path)
    {
    }
    function array_unique_recursive($array)
    {
    }
    function _icl_st_filter_empty_options_out($array)
    {
    }
    function wpml_register_admin_strings($serialized_array)
    {
    }
    function icl_is_string_translation($translation)
    {
    }
    function icl_translation_add_string_translation($rid, $translation, $lang_code)
    {
    }
    function icl_st_admin_notices_string_updated()
    {
    }
    /**
     * @param string $path
     *
     * @return bool
     */
    function wpml_st_file_path_is_valid($path)
    {
    }
    /**
     * @param string|array $context
     *
     * @return array
     */
    function wpml_st_extract_context_parameters($context)
    {
    }
    function icl_widget_text_init()
    {
    }
    function icl_widget_text_widgets_init_hook()
    {
    }
    function icl_widget_text_in_widget_form_hook($widget, $return, $instance)
    {
    }
    function icl_widget_text_language_selectbox($language = 'multilingual', $field_name = 'icl_language')
    {
    }
    function icl_widget_text_is_converted($widget)
    {
    }
    function icl_widget_text_convert_to_multilingual($text_widget, $instance)
    {
    }
    function wpml_st_parse_config($file_or_object)
    {
    }
    /**
     * Action run on the wp_loaded hook that registers widget titles,
     * tagline and bloginfo as well as the current theme's strings when
     * String translation is first activated
     */
    function wpml_st_initialize_basic_strings()
    {
    }
    /**
     * @param string $old
     * @param string $new
     */
    function icl_st_update_blogname_actions($old, $new)
    {
    }
    /**
     * @param string $old
     * @param string $new
     */
    function icl_st_update_blogdescription_actions($old, $new)
    {
    }
    /**
     * @param array $source_languages
     *
     * @return array[]
     */
    function filter_tm_source_langs($source_languages)
    {
    }
    /**
     *
     * @param bool       $assigned_correctly
     * @param string     $string_translation_id in the format used by
     *                                          TM functionality as
     *                                          "string|{$string_translation_id}"
     * @param int        $translator_id
     * @param int|string $service
     *
     * @return bool
     */
    function wpml_st_filter_job_assignment($assigned_correctly, $string_translation_id, $translator_id, $service)
    {
    }
    /**
     * @deprecated since WPML ST 3.0.0
     *
     * @param string $val
     *
     * @return string
     * @throws \Auryn\InjectionException
     */
    function wpml_st_blog_title_filter($val)
    {
    }
    /**
     * @deprecated since WPML ST 3.0.0
     *
     * @param string $val
     *
     * @return string
     * @throws \Auryn\InjectionException
     */
    function wpml_st_blog_description_filter($val)
    {
    }
    /**
     * @return WPML_Admin_Texts
     */
    function wpml_st_load_admin_texts()
    {
    }
    /**
     * Process a file and put extracted information to the given parameters.
     *
     * @param $file_path
     *   Complete path to file to process.
     * @param $strip_prefix
     *   An integer denoting the number of chars to strip from filepath for output.
     * @param $save_callback
     *   Callback function to use to save the collected strings.
     * @param $version_callback
     *   Callback function to use to save collected version numbers.
     * @param $default_domain
     *   Default domain to be used if one can't be found.
     */
    function _potx_process_file($file_path, $strip_prefix = 0, $save_callback = '_potx_save_string', $version_callback = '_potx_save_version', $default_domain = '')
    {
    }
    /**
     * Escape quotes in a strings depending on the surrounding
     * quote type used.
     *
     * @param $str
     *   The strings to escape
     */
    function _potx_format_quoted_string($str)
    {
    }
    /**
     * @param string $string
     *
     * @return string
     */
    function wpml_potx_unquote_context_or_domain($string)
    {
    }
    /**
     * Output a marker error with an extract of where the error was found.
     *
     * @param $file
     *   Name of file
     * @param $line
     *   Line number of error
     * @param $marker
     *   Function name with which the error was identified
     * @param $ti
     *   Index on the token array
     * @param $error
     *   Helpful error message for users.
     * @param $docs_url
     *   Documentation reference.
     */
    function _potx_marker_error($file, $line, $marker, $ti, $error, $docs_url = \NULL)
    {
    }
    /**
     * Status notification function.
     *
     * @param $op
     *   Operation to perform or type of message text.
     *     - set:    sets the reporting mode to $value
     *               use one of the POTX_STATUS_* constants as $value
     *     - get:    returns the list of error messages recorded
     *               if $value is true, it also clears the internal message cache
     *     - error:  sends an error message in $value with optional $file and $line
     *     - status: sends a status message in $value
     * @param $value
     *   Value depending on $op.
     * @param $file
     *   Name of file the error message is related to.
     * @param $line
     *   Number of line the error message is related to.
     * @param $excerpt
     *   Excerpt of the code in question, if available.
     * @param $docs_url
     *   URL to the guidelines to follow to fix the problem.
     */
    function potx_status($op, $value = \NULL, $file = \NULL, $line = \NULL, $excerpt = \NULL, $docs_url = \NULL)
    {
    }
    /**
     * Detect all occurances of t()-like calls.
     *
     * These sequences are searched for:
     *   T_STRING("$function_name") + "(" + T_CONSTANT_ENCAPSED_STRING + ")"
     *   T_STRING("$function_name") + "(" + T_CONSTANT_ENCAPSED_STRING + ","
     *
     * @param $file
     *   Name of file parsed.
     * @param $save_callback
     *   Callback function used to save strings.
     * @param function_name
     *   The name of the function to look for (could be 't', '$t', 'st'
     *   or any other t-like function).
     * @param $string_mode
     *   String mode to use: POTX_STRING_INSTALLER, POTX_STRING_RUNTIME or
     *   POTX_STRING_BOTH.
     */
    function _potx_find_t_calls($file, $save_callback, $function_name = 't', $string_mode = \POTX_STRING_RUNTIME)
    {
    }
    /**
     * Detect all occurances of t()-like calls from Drupal 7 (with context).
     *
     * These sequences are searched for:
     *   T_STRING("$function_name") + "(" + T_CONSTANT_ENCAPSED_STRING + ")"
     *   T_STRING("$function_name") + "(" + T_CONSTANT_ENCAPSED_STRING + ","
     *   and then an optional value for the replacements and an optional array
     *   for the options with an optional context key.
     *
     * @param $file
     *   Name of file parsed.
     * @param $save_callback
     *   Callback function used to save strings.
     * @param string $function_name
     * @param string $default_domain
     * @param int $string_mode
     *   String mode to use: POTX_STRING_INSTALLER, POTX_STRING_RUNTIME or
     *   POTX_STRING_BOTH.
     *
     * @internal param $function_name The name of the function to look for (could be 't', '$t', 'st'*   The name of the function to look for (could be 't', '$t', 'st'
     *   or any other t-like function). Drupal 7 only supports context on t().
     */
    function _potx_find_t_calls_with_context($file, $save_callback, $function_name = '_e', $default_domain = '', $string_mode = \POTX_STRING_RUNTIME)
    {
    }
    /**
     * Helper function to look up the token closing the current function.
     *
     * @param $here
     *   The token at the function name
     */
    function _potx_find_end_of_function($here, $open = '{', $close = '}')
    {
    }
    /**
     * Helper to move past potx_t() and format_plural() arguments in search of context.
     *
     * @param $here
     *   The token before the start of the arguments
     */
    function _potx_skip_args($here)
    {
    }
    /**
     * Helper to find the value for 'context' on t() and format_plural().
     *
     * @param $tf
     *   Start position of the original function.
     * @param $ti
     *   Start position where we should search from.
     * @param $file
     *   Full path name of file parsed.
     * @param function_name
     *   The name of the function to look for. Either 'format_plural' or 't'
     *   given that Drupal 7 only supports context on these.
     */
    function _potx_find_context($tf, $ti, $file, $function_name)
    {
    }
    /**
     * Get the exact CVS version number from the file, so we can
     * push that into the generated output.
     *
     * @param $code
     *   Complete source code of the file parsed.
     * @param $file
     *   Name of the file parsed.
     * @param $version_callback
     *   Callback used to save the version information.
     */
    function _potx_find_version_number($code, $file, $version_callback)
    {
    }
    /**
     * Default $version_callback used by the potx system. Saves values
     * to a global array to reduce memory consumption problems when
     * passing around big chunks of values.
     *
     * @param $value
     *   The ersion number value of $file. If NULL, the collected
     *   values are returned.
     * @param $file
     *   Name of file where the version information was found.
     */
    function _potx_save_version($value = \NULL, $file = \NULL)
    {
    }
    /**
     * Default $save_callback used by the potx system. Saves values
     * to global arrays to reduce memory consumption problems when
     * passing around big chunks of values.
     *
     * @param $value
     *   The string value. If NULL, the array of collected values
     *   are returned for the given $string_mode.
     * @param $context
     *   From Drupal 7, separate contexts are supported. POTX_CONTEXT_NONE is
     *   the default, if the code does not specify a context otherwise.
     * @param $file
     *   Name of file where the string was found.
     * @param $line
     *   Line number where the string was found.
     * @param $string_mode
     *   String mode: POTX_STRING_INSTALLER, POTX_STRING_RUNTIME
     *   or POTX_STRING_BOTH.
     */
    function _potx_save_string($value = \NULL, $context = \NULL, $file = \NULL, $line = 0, $string_mode = \POTX_STRING_RUNTIME)
    {
    }
    function potx_t($string, $args = array())
    {
    }
    function context_array($contexts)
    {
    }
    function _icl_string_translation_rtl_div($language)
    {
    }
    function _icl_string_translation_rtl_textarea($language)
    {
    }
}