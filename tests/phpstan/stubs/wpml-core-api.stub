<?php

namespace WPML\Element\API;

/**
 * @method static array getActive()
 *
 * It returns an array of the active languages.
 *
 * The returned array is indexed by language code and every element has the following structure:
 * ```
 *  'fr' => [
 *      'code'           => 'fr',
 *      'id'             => 3,
 *      'english_name'   => 'French',
 *      'native_name'    => 'Français',
 *      'major'          => 1,
 *      'default_locale' => 'fr_FR',
 *      'encode_url'     => 0,
 *      'tag'            => 'fr ,
 *      'display_name'   => 'French
 *  ]
 * ```
 * @method static array|callback getLanguageDetails( ...$code ) - Curried :: string->array
 *
 * It returns details of a language.
 *
 * An example output:
 * ```
 * [
 *      'code'           => 'fr',
 *      'id'             => 3,
 *      'english_name'   => 'French',
 *      'native_name'    => 'Français',
 *      'major'          => 1,
 *      'default_locale' => 'fr_FR',
 *      'encode_url'     => 0,
 *      'tag'            => 'fr ,
 *      'display_name'   => 'French
 *  ]
 * ```
 *
 *
 * @method static array getDefault()
 *
 * It returns a default language details.
 *
 * An example output:
 *```
 *[
 *      'code'           => 'fr',
 *      'id'             => 3,
 *      'english_name'   => 'French',
 *      'native_name'    => 'Français',
 *      'major'          => 1,
 *      'default_locale' => 'fr_FR',
 *      'encode_url'     => 0,
 *      'tag'            => 'fr ,
 *      'display_name'   => 'French
 * ]
 *```
 *
 * @method static callable|string getFlagUrl( ...$code ) - Curried :: string → string
 *
 * Gets the flag url for the given language code.
 *
 * @method static callable|array withFlags( ...$langs ) - Curried :: [code => lang] → [code => lang]
 *
 * Adds the language flag url to the array of languages.
 *
 * @method static array getAll( $lang = false ) string|false → [lang]
 *
 * It returns an array of the all the languages.
 *
 * The returned array is indexed by language code and every element has the following structure:
 * ```
 *  'fr' => [
 *      'code'           => 'fr',
 *      'id'             => 3,
 *      'english_name'   => 'French',
 *      'native_name'    => 'Français',
 *      'major'          => 1,
 *      'default_locale' => 'fr_FR',
 *      'encode_url'     => 0,
 *      'tag'            => 'fr ,
 *      'display_name'   => 'French
 *  ]
 * ```
 *
 * @method static callable|int|false setLanguageTranslation(...$langCode, ...$displayLangCode, ...$name) - Curried :: string->string->string->int|false
 *
 * It sets a language translation.
 *
 * @method static callable|int|false setFlag(...$langCode, ...$flag, ...$fromTemplate) - Curried :: string->string->bool->int|false
 *
 * It sets a language flag.
 */
class Languages
{
    use \WPML\Collect\Support\Traits\Macroable;
    /**
     * @return void
     */
    public static function init()
    {
    }
    /**
     * Curried :: string → bool
     * Determine if the language is Right to Left
     *
     * @param string|null $code
     *
     * @return callable|bool
     */
    public static function isRtl($code = null)
    {
    }
    /**
     * Curried :: [code => lang] → [code => lang]
     *
     * Adds language direction, right to left, to the languages data
     *
     * @param string[] $langs
     *
     * @return callable|mixed[]
     */
    public static function withRtl($langs = null)
    {
    }
    /**
     * Curried :: string -> string|false
     *
     * Returns the language code given a locale
     *
     * @param string|null $locale
     *
     * @return callable|string|false
     */
    public static function localeToCode($locale = null)
    {
    }
    /**
     * @param string $code
     * @param string $english_name
     * @param string $default_locale
     * @param int    $major
     * @param int    $active
     * @param int    $encode_url
     * @param string $tag
     *
     * @return bool|int
     */
    public static function add($code, $english_name, $default_locale, $major = 0, $active = 0, $encode_url = 0, $tag = '')
    {
    }
}
class IfOriginalPost
{
    /**
     * Gets the element details for the translations of the given post id.
     * Returns an empty array if the id is not an original post.
     *
     * element details structure:
     * ```php
     * (object) [
     *  'original' => false,            // bool True if the element is the original, false if a translation
     *  'element_id' => 123,            // int The element id
     *  'source_language_code' => 'en', // string The source language code
     *  'language_code' => 'de',        // string The language of the element
     *  'trid' => 456,                  // int The translation id that links translations to source.
     * ]
     * ```
     *
     * @param int $id The post id. Optional. If missing then returns a callable waiting for the id.
     *
     * @return \WPML\Collect\Support\Collection<mixed>|callable
     */
    public static function getTranslations($id = null)
    {
    }
    /**
     * Get the element ids for the translations of the given post id.
     * Returns an empty array if the id is not an original post.
     *
     * @param int $id The post id. Optional. If missing then returns a callable waiting for the id.
     *
     * @return \WPML\Collect\Support\Collection<mixed>|callable
     */
    public static function getTranslationIds($id = null)
    {
    }
}
namespace WPML\API;

/**
 * Class Version
 * @package WPML\API
 *
 * @method static string firstInstallation()
 *
 * It returns the version of WPML which has been used during the first installation.
 *
 * @method static callback|bool isHigherThanInstallation( ...$version ) - Curried :: string->bool
 *
 * It compares the specified version with the version which has been used during the first installation.
 *
 * @method static string current()
 *
 * It gets the current WPML version.
 */
class Version
{
    use \WPML\Collect\Support\Traits\Macroable;
    /**
     * @return void
     */
    public static function init()
    {
    }
}
namespace WPML\Element\API;

/**
 * Class Translations
 * @package WPML\Element\API
 * @method static callable|int setLanguage( ...$el_id, ...$el_type, ...$trid, ...$language_code, ...$src_language_code, ...$check_duplicates )
 *
 * - Curried :: int → string → int|null → string → string → string|null → bool → bool|int|null|string
 *
 *          Wrapper function for SitePress::set_element_language_details
 *
 * - int         $el_id the element's ID (for terms we use the `term_taxonomy_id`)
 * - string      $el_type
 * - int         $trid
 * - string      $language_code
 * - null|string $src_language_code
 * - bool        $check_duplicates
 *
 * returns bool|int|null|string
 *
 * @method static callable|int setAsSource( ...$el_id, ...$el_type, ...$language_code )
 * @method static callable|int setAsTranslationOf( ...$el_id, ...$el_type, ...$translated_id, ...$language_code )
 * @method static callable|array get( ...$el_id, ...$el_type )
 * @method static callable|array getIfOriginal( ...$el_id, ...$el_type )
 * @method static callable|array getOriginal( ...$element_id, ...$element_type )
 * @method static callable|array getOriginalId( ...$element_id, ...$element_type )
 * @method static callable|bool isOriginal( ...$el_id, ...$translations )
 */
class Translations
{
    use \WPML\Collect\Support\Traits\Macroable;
    /**
     * @return void
     */
    public static function init()
    {
    }
}
/**
 * Class PostTranslations
 * @package WPML\Element\API
 * @method static callable|int setAsSource( ...$el_id, ...$language_code ) - Curried :: int → string → void
 * @method static callable|int setAsTranslationOf( ...$el_id, ...$translated_id, ...$language_code )
 * @method static callable|array get( ...$el_id ) - Curried :: int → [object]
 * @method static callable|array getIfOriginal( ...$el_id ) - Curried :: int → [object]
 * @method static callable|array getOriginal( ...$element_id ) - Curried :: int → object|null
 * @method static callable|array getOriginalId( ...$element_id ) - Curried :: int → int
 */
class PostTranslations
{
    use \WPML\Collect\Support\Traits\Macroable;
    /**
     * @return void
     */
    public static function init()
    {
    }
    /**
     * @param callable $fn
     *
     * @return \Closure
     */
    public static function withPostType($fn)
    {
    }
}
namespace WPML\Ajax;

interface IHandler
{
    /**
     * @param \WPML\Collect\Support\Collection<mixed> $data
     *
     * @return \WPML\FP\Either
     */
    public function run(\WPML\Collect\Support\Collection $data);
}
