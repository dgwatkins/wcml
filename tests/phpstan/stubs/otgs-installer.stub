<?php

namespace OTGS\Installer\Rest {
    class Test_Push extends \OTGS_TestCase
    {
        /**
         * @test
         */
        public function it_registers_route()
        {
        }
        /**
         * @test
         */
        public function it_fetches_subscription()
        {
        }
        /**
         * @test
         */
        public function it_does_not_fetches_subscription_if_time_interval_did_not_pass()
        {
        }
        /**
         * @test
         */
        public function it_fetches_subscription_when_last_subscriptions_update_not_set()
        {
        }
    }
}
namespace {
    class OTGS_Products_Bucket_Repository_Test extends \PHPUnit\Framework\TestCase
    {
        /**
         * @var OTGS_Installer_API_Mocker
         */
        private $api_mocker;
        private $repository_id = 'wpml';
        private $api_url = 'http://api.wpml.test';
        private $site_key = 'site-key';
        private $site_url = 'http://site-url.com';
        public function __construct()
        {
        }
        function setUp()
        {
        }
        function tearDown()
        {
        }
        /**
         * @test
         */
        public function it_returns_bucket_url_for_registered_site()
        {
        }
        /**
         * @test
         */
        public function it_returns_same_url_if_called_twice()
        {
        }
        /**
         * @test
         */
        public function it_does_not_return_products_url_if_response_is_wp_error()
        {
        }
        /**
         * @return OTGS_Products_Bucket_Repository
         */
        private function get_subject($api_urls)
        {
        }
        private function get_bucket_number($bucket_url)
        {
        }
    }
    class OTGS_Installer_Integration_Base_Test extends \PHPUnit\Framework\TestCase
    {
        protected $wp_installer_settings = [];
        protected $wp_installer_logs = [];
        /**
         * @var OTGS_Installer_API_Mocker
         */
        protected $api_mocker;
        public function __construct()
        {
        }
        function setUp()
        {
        }
        function tearDown()
        {
        }
        /**
         * @return WP_Installer
         */
        protected function get_installer_instance()
        {
        }
        public function record_installer_options_update($option, $value, $autoload = 'yes')
        {
        }
        private function is_gz_on()
        {
        }
    }
    class OTGS_Products_Repository_Test extends \OTGS_Installer_Integration_Base_Test
    {
        /**
         * @test
         */
        public function it_does_not_refresh_repositories_with_invalid_json()
        {
        }
        /**
         * @test
         */
        public function it_does_not_refresh_repository_when_wp_error_in_response()
        {
        }
        /**
         * @test
         */
        public function it_does_not_refresh_repository_when_response_code_not_200()
        {
        }
        /**
         * @test
         */
        public function it_refresh_repositories()
        {
        }
        /**
         * @test
         */
        public function it_refresh_repositories_without_invalid_products()
        {
        }
        private function prepare_installer_instance()
        {
        }
        private function assert_log($expectedLog, $logId)
        {
        }
    }
    class OTGS_Installer_Endpoint_Mock
    {
        /**
         * @var string
         */
        private $method;
        /**
         * @var string
         */
        private $endpoint_url;
        /**
         * @var array|mixed
         */
        private $response;
        /**
         * @var array|mixed
         */
        private $request;
        /**
         * @var bool
         */
        private $isWpError;
        /**
         * @param string $method
         * @param string $endpoint
         * @param string $response
         * @param bool $isWpError
         */
        public function __construct($method, $endpoint, $request, $response, $isWpError)
        {
        }
        public static function createGetMock($endpoint, $response, $isWpError = \false)
        {
        }
        public static function createPostMock($endpoint, $request, $response, $isWpError = \false)
        {
        }
        /**
         * @return string
         */
        public function getMethod()
        {
        }
        /**
         * @return string
         */
        public function getEndpointUrl()
        {
        }
        /**
         * @return string
         */
        public function getResponse()
        {
        }
        /**
         * @return array
         */
        public function getRequest()
        {
        }
        /**
         * @return string
         */
        public function getResponseBody()
        {
        }
        private function get_response_from_file($file_name)
        {
        }
        /**
         * @return string
         */
        private function get_responses_file_path($file_name)
        {
        }
        /**
         * @return bool
         */
        public function isWpError()
        {
        }
    }
    class OTGS_Installer_API_Mocker
    {
        public function mockEndpointResponse(\OTGS_Installer_Endpoint_Mock $endpoint_mock)
        {
        }
        private function mock_get(\OTGS_Installer_Endpoint_Mock $endpoint_mock)
        {
        }
        private function mock_post(\OTGS_Installer_Endpoint_Mock $endpoint_mock)
        {
        }
    }
    /**
     * Class Test_OTGS_Installer_Icons
     *
     * @group installer-393
     * @group installer-products-map
     */
    class Test_OTGS_Installer_Icons extends \OTGS_TestCase
    {
        /**
         * @test
         */
        public function it_adds_hooks()
        {
        }
        /**
         * @test
         */
        public function it_adds_icons_on_response_if_product_is_found()
        {
        }
        /**
         * @test
         * @group installer-526
         */
        public function it_fallsback_on_plugin_name_when_plugin_is_not_found_by_id_()
        {
        }
        /**
         * @test
         */
        public function it_does_not_add_icons_on_response_if_product_is_not_found()
        {
        }
        public function get_installer_mock()
        {
        }
    }
    /**
     * Class Test_OTGS_Installer_Plugin_Factory
     *
     * @group installer-465
     */
    class Test_OTGS_Installer_Plugin_Factory extends \OTGS_TestCase
    {
        /**
         * @test
         */
        public function it_creates_instance_of_plugin()
        {
        }
    }
    /**
     * Class Test_OTGS_Installer_Site_Key_Ajax
     *
     * @group site-key
     * @group installer-487
     */
    class Test_OTGS_Installer_Site_Key_Ajax extends \OTGS_TestCase
    {
        /**
         * @test
         */
        public function it_adds_hooks()
        {
        }
        /**
         * @test
         * @dataProvider dp_required_arguments
         */
        public function it_returns_json_error_when_trying_to_save_site_key_missing_required_arguments($repository, $nonce, $site_key)
        {
        }
        /**
         * @test
         */
        public function it_returns_json_error_if_nonce_is_not_valid()
        {
        }
        public function dp_required_arguments()
        {
        }
        /**
         * @test
         */
        public function it_should_catch_exception_coming_from_subscription_fetch()
        {
        }
        /**
         * @test
         */
        public function it_should_return_invalid_site_key_error()
        {
        }
        /**
         * @test
         */
        public function it_should_save_subscription()
        {
        }
        /**
         * @test
         */
        public function it_should_not_remove_subscription_if_nonce_is_invalid()
        {
        }
        /**
         * @test
         */
        public function it_should_remove_subscription()
        {
        }
        /**
         * @test
         */
        public function it_should_not_update_site_key_when_required_arguments_are_missing()
        {
        }
        /**
         * @test
         */
        public function it_should_not_update_site_key_when_it_is_not_found()
        {
        }
        /**
         * @test
         */
        public function it_should_catch_exception_coming_from_subscription_fetch_when_updating_site_key()
        {
        }
        /**
         * @test
         */
        public function it_should_remove_local_subscription_when_it_is_missing_in_the_server()
        {
        }
        /**
         * @test
         */
        public function it_should_update_subscription()
        {
        }
        /**
         * @test
         * @dataProvider dpFindUser
         */
        public function it_should_find_user($repo, $email, $json, $result)
        {
        }
        public function dpFindUser()
        {
        }
        private function get_fetch_subscription_mock()
        {
        }
        private function get_logger_mock()
        {
        }
        private function get_repositories_mock()
        {
        }
        private function get_subscription_factory_mock()
        {
        }
    }
    /**
     * Class Test_OTGS_Installer_Fetch_Subscription
     *
     * @group fetch-subscription
     * @group installer-487
     */
    class Test_OTGS_Installer_Fetch_Subscription extends \OTGS_TestCase
    {
        /**
         * @test
         * @dataProvider dp_required_fields
         * @expectedException OTGS_Installer_Fetch_Subscription_Exception
         */
        public function it_throws_exception_if_any_required_field_is_missing($repository_id, $site_key, $source)
        {
        }
        public function dp_required_fields()
        {
        }
        /**
         * @test
         * @expectedException OTGS_Installer_Fetch_Subscription_Exception
         */
        public function it_throws_exception_when_http_request_fails()
        {
        }
        /**
         * @test
         */
        public function it_returns_valid_subscription()
        {
        }
        /**
         * @test
         * @group installer-522
         */
        public function it_should_fallback_on_http_if_https_response_is_invalid()
        {
        }
        private function get_package_source_factory_mock()
        {
        }
        private function get_plugin_finder_mock()
        {
        }
        private function get_repositories_mock()
        {
        }
        private function get_logger_mock()
        {
        }
    }
    /**
     * Class Test_OTGS_Installer_Repository_Factory
     *
     * @group installer-487
     */
    class Test_OTGS_Installer_Repository_Factory extends \OTGS_TestCase
    {
        /**
         * @test
         */
        public function it_creates_repository()
        {
        }
        /**
         * @test
         */
        public function it_creates_package()
        {
        }
        /**
         * @test
         */
        public function it_creates_product()
        {
        }
    }
    /**
     * Class Test_OTGS_Installer_Repository
     *
     * @group installer-upgrade
     * @group installer-487
     */
    class Test_OTGS_Installer_Repository extends \OTGS_TestCase
    {
        /**
         * @test
         */
        public function it_gets_product_by_subscription_type()
        {
        }
        /**
         * @test
         */
        public function it_gets_product_by_subscription_type_equivalent()
        {
        }
        /**
         * @test
         */
        public function it_gets_product_by_subscription_type_on_upgrades()
        {
        }
        /**
         * @test
         */
        public function it_did_not_find_any_product()
        {
        }
        /**
         * @test
         * @group installer-271
         */
        public function it_gets_default_api_url()
        {
        }
        /**
         * @test
         * @group installer-271
         */
        public function it_gets_non_ssl_api_url()
        {
        }
    }
    /**
     * Class Test_OTGS_Installer_Repositories
     *
     * @group installer-487
     * @group repositories
     */
    class Test_OTGS_Installer_Repositories extends \OTGS_TestCase
    {
        const WPML_API = 'api.wpml.org';
        const TOOLSET_API = 'api.toolset.com';
        /**
         * @test
         */
        public function it_gets_all_repositories()
        {
        }
        /**
         * @test
         */
        public function it_gets_single_repository()
        {
        }
        /**
         * @test
         */
        public function it_returns_null_when_no_repository_is_found()
        {
        }
        private function get_setting_repositories($wpml_user_subscription, $toolset_user_subscription)
        {
        }
        /**
         * @test
         */
        public function it_refreshes_repositories_data_in_installer_settings_option()
        {
        }
        /**
         * @test
         */
        public function it_saves_repository_subscription_on_installer_settings_option()
        {
        }
        /**
         * @test
         */
        public function it_removes_subscription_from_repository_on_installer_settings_if_repository_has_no_subscription()
        {
        }
        private function get_installer_mock()
        {
        }
        private function get_repository_factory_mock()
        {
        }
        private function get_subscription_factory_mock()
        {
        }
        private function mock_create_repository_method($repository_factory, $wpml_subscription, $wpml_package, $toolset_subscription, $toolset_package, $wpml_repo, $toolset_repo)
        {
        }
        private function mock_create_package_method($repository_factory, $wpml_package_product, $toolset_package_product, $wpml_package, $toolset_package)
        {
        }
        private function mock_create_product_method($repository_factory, $wpml_package_product, $toolset_package_product)
        {
        }
    }
    /**
     * Class Test_OTGS_Installer_Upgrade_Response
     *
     * @group installer-upgrade
     * @group installer-487
     */
    class Test_OTGS_Installer_Upgrade_Response extends \OTGS_TestCase
    {
        /**
         * @test
         */
        public function it_adds_hooks()
        {
        }
        /**
         * @test
         */
        public function it_does_not_add_site_transient_update_plugins_if_not_running_installer_ajax_for_downloading_plugin()
        {
        }
        /**
         * @test
         */
        public function it_should_skip_upgrade_if_subscription_is_not_valid()
        {
        }
        /**
         * @test
         */
        public function it_should_skip_upgrade_process_if_plugin_is_already_cached_in_the_list_of_upgrades()
        {
        }
        /**
         * @test
         *
         * E.g.: Toolset Views appears in both WPML and Toolset repositories (Toolset Views Lite), when client
         * has a Toolset subscription we should take upgrades from toolset.com instead of wpml.org
         */
        public function it_should_skip_upgrade_process_if_plugin_is_registered_on_external_repo()
        {
        }
        /**
         * @test
         */
        public function it_should_skip_upgrade_process_if_plugin_is_not_registered_in_the_user_product()
        {
        }
        /**
         * @test
         * @group adriano
         */
        public function it_should_skip_upgrade_process_if_no_product_is_found_in_the_site_subscription()
        {
        }
        /**
         * @test
         */
        public function it_should_fallback_on_wporg_repository_when_user_has_no_valid_subscription_and_plugin_has_fallback_on_wporg()
        {
        }
        /**
         * @test
         */
        public function it_should_skip_upgrade_if_plugin_is_up_to_date()
        {
        }
        /**
         * @test
         */
        public function it_should_modify_the_response_of_upgrade_logic_without_appending_sitekey_when_it_is_not_found()
        {
        }
        /**
         * @test
         * @group installer-560
         */
        public function it_should_modify_the_response_of_upgrade_logic_appending_sitekey_when_it_is_found()
        {
        }
        private function get_installer_repositories_mock()
        {
        }
        private function get_installer_source_factory()
        {
        }
        private function get_installer_package_product_finder()
        {
        }
    }
    class OTGS_Products_Bucket_Repository_Factory_Test extends \PHPUnit\Framework\TestCase
    {
        /**
         * @test
         */
        public function it_creates_repository()
        {
        }
    }
    class InstallerIntegrationTest extends \OTGS_TestCase
    {
        /** @var dbhandler */
        private $dbhandler;
        public function setUp()
        {
        }
        public function tearDown()
        {
        }
        protected function register_site_in_repository($site_key, $site_url)
        {
        }
        private function current_time()
        {
        }
        public function wp_remote_post($url, $args)
        {
        }
        public function wp_remote_get($url)
        {
        }
        public function wp_remote_retrieve_body($response)
        {
        }
        private function is_api_url($url)
        {
        }
        private function is_main_product_json_url($url)
        {
        }
        private function is_bucket_json_url($url)
        {
        }
        private function get_xml_config_file()
        {
        }
        /**
         * @return string
         */
        private function get_config_file_path($file_name)
        {
        }
    }
    class TestRefreshRepositoryData extends \InstallerIntegrationTest
    {
        /** @var array $wp_installer_settings */
        private $wp_installer_settings;
        /** @var string $site_url */
        private $site_url;
        public function setUp()
        {
        }
        /**
         * @test
         */
        public function it_get_repository_from_main_CDN_when_there_is_no_bucket()
        {
        }
        /**
         * @test
         */
        public function it_get_repository_from_main_CDN_when_there_is_a_bucket_that_is_bypassed()
        {
        }
        public function record_installer_settings_update($option, $value, $autoload = 'yes')
        {
        }
        private function is_gz_on()
        {
        }
    }
    class OTGS_Products_Config_Storage_Test extends \PHPUnit\Framework\TestCase
    {
        public function setUp()
        {
        }
        public function tearDown()
        {
        }
        /**
         * @test
         */
        public function it_returns_products_url_for_repository()
        {
        }
        /**
         * @test
         */
        public function it_returns_null_when_products_url_for_repository_not_set()
        {
        }
        /**
         * @test
         */
        public function it_stores_products_url_for_repository()
        {
        }
        /**
         * @test
         */
        public function it_clears_products_url_for_repository()
        {
        }
        /**
         * @test
         */
        public function it_returns_false_when_unable_to_store_products_url_for_repository()
        {
        }
    }
    class OTGS_Products_Config_Xml_Test extends \PHPUnit\Framework\TestCase
    {
        /**
         * @test
         */
        public function it_gets_product_api_urls()
        {
        }
        /**
         * @test
         */
        public function it_gets_product_url()
        {
        }
    }
    class OTGS_Products_Manager_Test extends \PHPUnit\Framework\TestCase
    {
        /**
         * @var OTGS_Products_Config_Db_Storage
         */
        private $products_config_storage;
        /**
         * @var OTGS_Products_Bucket_Repository
         */
        private $products_bucket_repository;
        /**
         * @var WP_Installer_Channels
         */
        private $installer_channels;
        /**
         * @var OTGS_Products_Config_Xml
         */
        private $products_config_xml;
        /**
         * @var OTGS_Installer_Logger_Storage
         */
        private $logger_storage;
        public function __construct()
        {
        }
        /**
         * @test
         */
        public function it_fetches_products_url_from_endpoint()
        {
        }
        /**
         * @test
         */
        public function it_logs_exception_when_unable_to_fetch_products_url_from_endpoint()
        {
        }
        /**
         * @test
         */
        public function it_returns_product_url_from_local_config()
        {
        }
        /**
         * @test
         */
        public function it_allows_product_url_to_be_overriden_by_constant()
        {
        }
        /**
         * @test
         */
        public function it_does_not_return_product_url_from_local_config_when_site_key_empty()
        {
        }
        /**
         * @test
         */
        public function it_returns_product_url_from_endpoint()
        {
        }
        /**
         * @test
         */
        public function it_returns_product_url_from_local_configuration_file()
        {
        }
        /**
         * @test
         */
        public function it_returns_product_url_from_xml_if_bucket_is_bypassed()
        {
        }
        /**
         * @test
         */
        public function it_returns_product_url_from_xml_if_channel_not_production()
        {
        }
        /**
         * @return OTGS_Products_Manager
         */
        private function get_subject()
        {
        }
    }
    class OTGS_Installer_Products_Parser_Test extends \PHPUnit\Framework\TestCase
    {
        /**
         * @var OTGS_Installer_Logger_Storage
         */
        private $logger_storage;
        /**
         * @var WP_Installer_Channels
         */
        private $installer_channels;
        public function setUp()
        {
        }
        public function tearDown()
        {
        }
        public function __construct()
        {
        }
        /**
         * @test
         */
        public function it_parse_products_response()
        {
        }
        /**
         * @test
         *
         */
        public function it_throws_exception_when_response_invalid()
        {
        }
        /**
         * @test
         *
         */
        public function it_store_log_when_plugin_config_is_invalid()
        {
        }
    }
    class OTGS_Products_Manager_Factory_Test extends \PHPUnit\Framework\TestCase
    {
        /**
         * @test
         */
        public function it_creates_products_manager()
        {
        }
    }
    /**
     * Class Test_OTGS_Installer_WP_Components_Sender
     *
     * @group local-components
     * @group installer-370
     */
    class Test_OTGS_Installer_WP_Components_Sender extends \OTGS_TestCase
    {
        /**
         * @test
         */
        public function it_sends_request_to_server()
        {
        }
        /**
         * @test
         * @group installer-434
         */
        public function it_does_not_send_request_to_the_server_if_site_key_is_missing()
        {
        }
        /**
         * @test
         * @group installer-434
         */
        public function it_does_not_send_request_to_the_server_if_user_does_not_allow_us()
        {
        }
    }
    /**
     * Class Test_OTGS_Installer_WP_Components_Storage
     *
     * @group local-components
     * @group installer-370
     */
    class Test_OTGS_Installer_WP_Components_Storage extends \OTGS_TestCase
    {
        /**
         * @test
         */
        public function it_refreshes_cache()
        {
        }
        /**
         * @test
         */
        public function it_returns_true_because_cache_is_empty()
        {
        }
        /**
         * @test
         */
        public function it_returns_true_because_theme_has_different_version()
        {
        }
        /**
         * @test
         */
        public function it_returns_outdated_because_theme_is_different()
        {
        }
        /**
         * @test
         */
        public function it_returns_true_because_there_are_plugins_with_different_version()
        {
        }
        /**
         * @test
         */
        public function it_returns_true_because_there_are_different_plugins_activated()
        {
        }
        /**
         * @test
         */
        public function it_returns_false_because_local_components_did_not_change()
        {
        }
        /**
         * @test
         */
        public function it_gets_components()
        {
        }
    }
    /**
     * Class Test_OTGS_Installer_Plugins_Page_Notice
     *
     * @group local-components
     * @group installer-370
     */
    class Test_OTGS_Installer_Plugins_Page_Notice extends \OTGS_TestCase
    {
        const REPO = 'wpml';
        const PRODUCT = 'WPML';
        const ADMIN_URL = 'http://something/wp-admin/';
        const EXPECTED_REGISTER_MESSAGE = 'You are using an unregistered version of WPML and are not receiving compatibility and security updates. <a href="http://something/wp-admin/&repository=wpml&action=register">Register now</a>';
        const EXPECTED_EXPIRED_MESSAGE = 'You are using an expired account of WPML. <a href="http://something/wp-admin/&repository=wpml&action=expired">Extend your subscription</a>';
        const EXPECTED_REFUNDED_MESSAGE = 'Remember to remove WPML from this website. <a href="http://something/wp-admin/&repository=wpml&action=refunded">Check my order status</a>';
        /**
         * @test
         */
        public function it_adds_hooks()
        {
        }
        /**
         * @test
         * @dataProvider dpNoticeType
         */
        public function it_shows_purchase_notice_under_plugin_in_single_site($type, $model)
        {
        }
        public function dpNoticeType()
        {
        }
        /**
         * @test
         * @group installer-482
         */
        public function it_does_show_subscription_notice_under_plugin_if_it_has_external_repository_and_is_not_lite()
        {
        }
        /**
         * @test
         */
        public function it_shows_notice_if_plugin_is_lite()
        {
        }
        /**
         * @test
         */
        public function it_shows_purchase_notice_under_plugin_in_multisite_and_network_admin()
        {
        }
        /**
         * @test
         */
        public function it_shows_purchase_notice_under_plugin_in_multisite_and_not_network_admin()
        {
        }
        private function get_plugin_finder_mock()
        {
        }
        private function mockTemplateService()
        {
        }
        private function mockWPListTable()
        {
        }
        private function mockInstallerPlugin()
        {
        }
        private function mockBlogInfo()
        {
        }
        private function getExpectedRegisterModel()
        {
        }
        private function getExpectedExpiredModel()
        {
        }
        private function getExpectedRefundedModel()
        {
        }
    }
    /**
     * Class Test_OTGS_Installer_Debug_Info
     *
     * @group installer-501
     * @group debug-installer
     */
    class Test_OTGS_Installer_Debug_Info extends \OTGS_TestCase
    {
        /**
         * @test
         */
        public function it_adds_hooks()
        {
        }
        /**
         * @test
         */
        public function it_adds_installer_info()
        {
        }
    }
    /**
     * Class Test_OTGS_Installer_Plugins_Page_Notice
     *
     * @group local-components
     * @group installer-370
     */
    class Test_OTGS_Installer_WP_Components_Setting_Ajax extends \OTGS_TestCase
    {
        public function tearDown()
        {
        }
        /**
         * @test
         */
        public function it_adds_hooks()
        {
        }
        /**
         * @test
         */
        public function it_saves_setting_on_valid_request()
        {
        }
        /**
         * @test
         */
        public function it_does_not_save_setting_on_invalid_request()
        {
        }
    }
    /**
     * Class Test_OTGS_Installer_WP_Share_Local_Components_Setting
     *
     * @group local-components
     * @group installer-370
     */
    class Test_OTGS_Installer_WP_Share_Local_Components_Setting extends \OTGS_TestCase
    {
        /**
         * @test
         */
        public function it_saves_setting()
        {
        }
        /**
         * @test
         */
        public function it_checks_if_repo_is_allowed()
        {
        }
    }
    /**
     * Class Test_OTGS_Installer_Subscription
     *
     * @group installer-419
     * @group admin-notices
     */
    class Test_OTGS_Installer_Subscription extends \OTGS_TestCase
    {
        /**
         * @test
         */
        public function it_creates_instance_with_no_data()
        {
        }
        /**
         * @test
         */
        public function it_creates_instance_with_lifetime_subscription()
        {
        }
        /**
         * @test
         */
        public function it_creates_instance_with_expired_subscription_status()
        {
        }
        /**
         * @test
         */
        public function it_creates_instance_with_expired_subscription()
        {
        }
        /**
         * @test
         */
        public function it_creates_instance_with_a_valid_subscription()
        {
        }
        /**
         * @test
         */
        public function it_creates_instance_with_a_refunded_subscription()
        {
        }
        /**
         * @test
         */
        public function it_confirms_yesterday_is_invalid()
        {
        }
        /**
         * @test
         */
        public function it_confirms_tomorrow_is_valid()
        {
        }
        /**
         * @test
         */
        public function it_confirms_yesterday_is_valid_using_expired_for_period()
        {
        }
        /**
         * @test
         */
        public function it_confirms_yesterday_is_invalid_via_installer()
        {
        }
        /**
         * @test
         */
        public function it_confirms_tomorrow_is_valid_via_installer()
        {
        }
        /**
         * @test
         */
        public function it_confirms_yesterday_is_valid_using_expired_for_period_via_installer()
        {
        }
        /**
         * @test
         */
        public function it_confirms_refunded_via_installer()
        {
        }
        /**
         * @param $day
         *
         * @return array
         */
        private function createActiveSubscriptionExpired($day)
        {
        }
        /**
         * @return array
         */
        private function createRefunded()
        {
        }
    }
    /**
     * Class Test_OTGS_Installer_WP_Components_Setting_Resources
     *
     * @group local-components
     * @group installer-370
     */
    class Test_OTGS_Installer_WP_Components_Setting_Resources extends \OTGS_TestCase
    {
        public static function setUpBeforeClass()
        {
        }
        /**
         * @test
         */
        public function it_adds_hooks()
        {
        }
        /**
         * @test
         */
        public function it_enqueue_resources()
        {
        }
    }
    /**
     * Class Test_OTGS_Installer_WP_Share_Local_Components_Setting_Hooks
     *
     * @group installer-419
     */
    class Test_OTGS_Installer_WP_Share_Local_Components_Setting_Hooks extends \OTGS_TestCase
    {
        /**
         * @test
         */
        public function it_add_hooks()
        {
        }
        /**
         * @test
         * @throws \InvalidArgumentException
         */
        public function it_renders_local_components_setting()
        {
        }
        /**
         * @test
         * @throws \InvalidArgumentException
         */
        public function it_does_NOT_enqueue_the_ui()
        {
        }
        /**
         * @test
         *
         * @dataProvider dp_ui_settings
         *
         * @param bool $use_styles
         * @param bool $use_radio
         */
        public function it_enqueues_the_ui($use_styles, $use_radio)
        {
        }
        public function dp_ui_settings()
        {
        }
        /**
         * @test
         * @throws \InvalidArgumentException
         * @expectedException \InvalidArgumentException
         * @expectedExceptionMessage Arguments are missing
         */
        public function it_throws_an_exception_on_missing_arguments()
        {
        }
        /**
         * @test
         * @throws \InvalidArgumentException
         * @expectedException \InvalidArgumentException
         * @expectedExceptionMessageRegExp /.* is missing/
         */
        public function it_throws_an_exception_on_missing_required_arguments()
        {
        }
        /**
         * @return OTGS_Php_Template_Service|PHPUnit_Framework_MockObject_MockObject
         */
        private function get_template_service_mock()
        {
        }
        /**
         * @return OTGS_Installer_WP_Share_Local_Components_Setting|PHPUnit_Framework_MockObject_MockObject
         */
        private function get_setting_mock()
        {
        }
        /**
         * @return OTGS_Installer_WP_Components_Setting_Resources|PHPUnit_Framework_MockObject_MockObject
         */
        private function get_resources()
        {
        }
    }
}
namespace OTGS\Installer\Tests\Recommendations {
    class RecommendationsManagerTest extends \PHPUnit\Framework\TestCase
    {
        private $available_plugins_list = ['sitepress-multilingual-cms', 'wpml-string-translation', 'wpml-ninja-forms', 'contact-form-7-multilingual', 'gravityforms-multilingual', 'slug', 'slug2', 'wcml'];
        private $installed_plugins_list = ['sitepress-multilingual-cms/plugin.php' => ['name' => 'Sitepress'], 'wpml-string-translation/plugin.php' => ['name' => 'String Translation'], 'woocommerce/plugin.php' => ['name' => 'woocommerce']];
        private $site_key = 'sitekey';
        private $site_url = 'https://exampleurl.com';
        public function setUp()
        {
        }
        public function tearDown()
        {
        }
        /**
         * @test
         */
        public function it_gets_repository_plugins_recommendations()
        {
        }
        /**
         * @test
         */
        public function it_gets_repository_plugins_recommendations_only_inactive_and_not_installed()
        {
        }
        /**
         * @test
         */
        public function it_gets_repository_plugins_recommendations_only_when_glue_might_be_needed()
        {
        }
        private function create_plugins_settings($plugins, $sections)
        {
        }
        private function prepare_subject($settings, $storage = null)
        {
        }
        private function mock_wp_functions_for_preparing_plugin_recommendation_data($plugin_download_url)
        {
        }
    }
}
namespace {
    class Test_OTGS_Installer extends \OTGS_TestCase
    {
        public function setUp()
        {
        }
        /**
         * @test
         */
        public function it_returns_warning_when_user_has_no_capability_to_show_products()
        {
        }
    }
}
namespace OTGS\Installer {
    /**
     * Class Test_Collection
     * @package OTGS\Installer
     * @group admin-notices
     */
    class Test_Collection extends \OTGS_TestCase
    {
        /**
         * @test
         */
        public function it_lifts_array_and_returns_it()
        {
        }
        /**
         * @test
         */
        public function it_filters()
        {
        }
        /**
         * @test
         */
        public function it_plucks()
        {
        }
        /**
         * @test
         */
        public function it_reduces()
        {
        }
        /**
         * @test
         */
        public function it_gets_values()
        {
        }
    }
}
namespace {
    /**
     * Class Test_OTGS_Installer_Package_Product_Finder
     *
     * @group installer-upgrade
     * @group installer-487
     */
    class Test_OTGS_Installer_Package_Product_Finder extends \OTGS_TestCase
    {
        /**
         * @test
         */
        public function it_finds_product_by_matching_subscription_type()
        {
        }
        /**
         * @test
         */
        public function it_does_not_find_product_by_matching_subscription_type()
        {
        }
        /**
         * @test
         */
        public function it_finds_product_by_matching_subscription_type_equivalent()
        {
        }
        /**
         * @test
         */
        public function it_does_not_find_product_by_matching_subscription_type_equivalent()
        {
        }
        /**
         * @test
         */
        public function it_finds_product_by_matching_subscription_typeon_upgrades()
        {
        }
        /**
         * @test
         */
        public function it_does_not_find_product_by_matching_subscription_typeon_upgrades()
        {
        }
        /**
         * @test
         */
        public function it_didn_find_any_product()
        {
        }
        /**
         * @test
         */
        public function it_uses_repository_subscription_as_fallback_when_subscription_type_is_not_passed()
        {
        }
        /**
         * @test
         */
        public function it_returns_null_if_repository_does_not_have_a_subscription()
        {
        }
        private function get_repository_mock()
        {
        }
        private function get_subscription_mock()
        {
        }
    }
    /**
     * Class Test_OTGS_Installer_Subscription_Factory
     *
     * @group installer-487
     */
    class Test_OTGS_Installer_Subscription_Factory extends \OTGS_TestCase
    {
        /**
         * @test
         */
        public function it_creates_instance_of_subscription()
        {
        }
    }
    class Test_OTGS_Template_Service_Factory extends \PHPUnit\Framework\TestCase
    {
        /**
         * @test
         */
        public function it_creates_template_service()
        {
        }
    }
    class Test_OTGS_Template_Service_Php_Model extends \OTGS_TestCase
    {
        /**
         * @test
         */
        public function it_builds_a_model_of_primitives_attributes()
        {
        }
        /**
         * @test
         */
        public function it_access_non_defined_attributes()
        {
        }
        /**
         * @test
         */
        public function it_tells_if_an_attributes_has_a_value()
        {
        }
        /**
         * @test
         */
        public function it_tells_if_an_attributes_value_is_null()
        {
        }
        /**
         * @test
         */
        public function it_tells_if_an_attributes_value_is_empty()
        {
        }
        /**
         * @test
         */
        public function it_gets_the_attributes_of_a_model()
        {
        }
        /**
         * @test
         */
        public function it_casts_an_empty_model_to_an_empty_string()
        {
        }
        /**
         * @test
         */
        public function it_casts_a_single_attribute_model_to_a_string_representation_of_that_attribute()
        {
        }
        /**
         * @test
         */
        public function it_casts_a_multiple_attributes_model_to_a_JSON_representation_of_the_attributes()
        {
        }
        /**
         * @test
         */
        public function it_builds_a_model_of_complex_attributes()
        {
        }
    }
    /**
     * @group template-service
     * @group installer-370
     */
    class Test_OTGS_Php_Template_Service_Loader extends \OTGS_TestCase
    {
        /**
         * @test
         */
        public function it_gets_template()
        {
        }
    }
    /**
     * Class Test_OTGS_Installer_Requirements
     *
     * @group installer-518
     */
    class Test_OTGS_Installer_Requirements extends \OTGS_TestCase
    {
        /**
         * @test
         */
        public function it_gets_requirements()
        {
        }
    }
    /**
     * Class Test_OTGS_Installer_Connection_Test
     *
     * @group installer-513
     */
    class Test_OTGS_Installer_Connection_Test extends \OTGS_TestCase
    {
        /**
         * @test
         */
        public function it_returns_false_when_download_is_not_found()
        {
        }
        /**
         * @test
         * @dataProvider dp_success_code
         */
        public function it_returns_true_for_available_download_url($success_code)
        {
        }
        public function dp_success_code()
        {
        }
        /**
         * @test
         */
        public function it_returns_false_when_download_url_is_not_available()
        {
        }
        /**
         * @test
         */
        public function it_returns_false_when_request_response_is_wp_error_for_download_url()
        {
        }
        /**
         * @test
         * @dataProvider dp_success_code
         */
        public function it_returns_true_for_api_request_success($code)
        {
        }
        /**
         * @test
         */
        public function it_returns_false_for_api_request_when_it_returns_invalid_code()
        {
        }
        /**
         * @test
         */
        public function it_returns_false_when_api_request_responds_with_wp_error()
        {
        }
        private function get_repositories_mock()
        {
        }
        private function get_upgrade_response_mock()
        {
        }
        private function get_logger_storage_mock()
        {
        }
        private function get_log_factory_mock()
        {
        }
    }
    /**
     * Class Test_OTGS_Installer_Support_Template
     *
     * @group installer-508
     */
    class Test_OTGS_Installer_Support_Template extends \OTGS_TestCase
    {
        /**
         * @test
         */
        public function it_renders_template()
        {
        }
        /**
         * @test
         * @group wpmlcore-5837
         */
        public function it_renders_support_link()
        {
        }
    }
    /**
     * Class Test_OTGS_Installer_Support_Hooks
     *
     * @group installer-508
     */
    class Test_OTGS_Installer_Support_Hooks extends \OTGS_TestCase
    {
        /**
         * @test
         */
        public function it_adds_hooks()
        {
        }
        /**
         * @test
         */
        public function it_adds_support_page()
        {
        }
        /**
         * @test
         */
        public function it_renders_support_page()
        {
        }
        /**
         * @test
         * @group wpmlcore-5837
         */
        public function it_renders_support_link()
        {
        }
        /**
         * @test
         * @group installer-524
         */
        public function it_enqueues_scripts()
        {
        }
        /**
         * @test
         * @group installer-524
         */
        public function it_does_not_enqueue_scripts_when_page_is_not_installer_support()
        {
        }
    }
    /**
     * Class Test_OTGS_Installer_Connection_Test_Ajax
     *
     * @group installer-support
     * @group installer-516
     */
    class Test_OTGS_Installer_Connection_Test_Ajax extends \OTGS_TestCase
    {
        public function tearDown()
        {
        }
        /**
         * @test
         */
        public function it_adds_hooks()
        {
        }
        /**
         * @test
         * @dataProvider dp_invalid_request
         */
        public function it_returns_json_error_when_connection_is_not_valid($nonce, $type, $repository, $is_nonce_valid)
        {
        }
        public function dp_invalid_request()
        {
        }
        /**
         * @test
         */
        public function it_returns_json_error_when_api_connection_fails()
        {
        }
        /**
         * @test
         */
        public function it_returns_json_success_when_api_connection_succeed()
        {
        }
    }
}
namespace OTGS\Installer\Loader {
    class Test_Config extends \OTGS_TestCase
    {
        /**
         * @test
         */
        public function it_returns_unchanged_if_nothing_to_merge()
        {
        }
        /**
         * @test
         */
        public function it_adds_nag_from_other()
        {
        }
        /**
         * @test
         */
        public function it_mergs_nag_from_other()
        {
        }
    }
}
namespace {
    class Test_OTGS_Installer_Dependencies extends \OTGS_TestCase
    {
        private function prepare_subject($repository_id)
        {
        }
        /**
         * @test
         */
        public function it_checks_win_paths()
        {
        }
        /**
         * @test
         */
        public function it_detects_win_paths_exception()
        {
        }
        private function generate_random_filename($length = 10)
        {
        }
        /**
         * @test
         */
        public function it_does_not_check_win_paths_on_other_systems_than_windows()
        {
        }
    }
    /**
     * Class Test_OTGS_Installer_Package_Product
     *
     * @group installer-487
     */
    class Test_OTGS_Installer_Package_Product extends \OTGS_TestCase
    {
        /**
         * @test
         */
        public function it_returns_true_when_plugin_is_registered_in_the_product()
        {
        }
        /**
         * @test
         */
        public function it_returns_false_when_plugin_is_not_registered_in_the_product()
        {
        }
    }
    /**
     * Class Test_OTGS_Installer_Plugin_Finder
     *
     * @group installer-465
     * @group installer-487
     */
    class Test_OTGS_Installer_Plugin_Finder extends \OTGS_TestCase
    {
        /**
         * @test
         */
        public function it_gets_plugin()
        {
        }
        /**
         * @test
         */
        public function it_gets_plugin_without_tested_attribute()
        {
        }
        /**
         * @test
         */
        public function it_gets_plugin_without_passing_repository()
        {
        }
        /**
         * @test
         */
        public function it_returns_null_when_no_plugin_is_found()
        {
        }
        /**
         * @test
         */
        public function it_gets_plugin_even_when_fallback_on_wporg_free_on_wporg_fields_are_not_set()
        {
        }
        /**
         * @test
         */
        public function it_gets_plugin_by_name()
        {
        }
        /**
         * @test
         */
        public function it_returns_null_when_trying_to_get_plugin_by_name_and_it_is_not_found()
        {
        }
        /**
         * @test
         */
        public function it_gets_plugin_id_by_name_as_fallback_when_plugin_id_didn_not_match()
        {
        }
        /**
         * @test
         * @group installer-531
         */
        public function it_finds_plugin_even_when_its_name_contains_a_tag()
        {
        }
        private function get_repositories()
        {
        }
        private function get_repositories_without_tested_attribute()
        {
        }
        private function get_old_repositories_missing_some_default_fields()
        {
        }
        private function get_plugin_factory_mock()
        {
        }
    }
    /**
     * Class Test_Repository_Expired_Template
     * @group templates
     */
    class Test_Repository_Expired_Template extends \OTGS_TestCase
    {
        public function setUp()
        {
        }
        /**
         * @test
         */
        public function it_renders_when_end_user_product_exists()
        {
        }
        /**
         * @test
         */
        public function it_renders_only_extend_button_when_end_user_product_does_not_exist()
        {
        }
        /**
         * @param $model
         * @param $html
         */
        private function assertHasAccountLink($model, $html)
        {
        }
        /**
         * @param $model
         * @param $html
         */
        private function assertHasEndUserRenewalLink($model, $html)
        {
        }
        /**
         * @param $model
         * @param $html
         */
        private function assertNotHaveEndUserRenewalLink($model, $html)
        {
        }
        /**
         * @param object $model
         * @param string $html
         */
        private function assertHasUpdateButton($model, $html)
        {
        }
        /**
         * @param object $model
         * @param string $html
         */
        private function assertHasFindAccount($model, $html)
        {
        }
        /**
         * @param object $model
         * @param string $html
         */
        private function assertNotHaveFindAccount($model, $html)
        {
        }
    }
    /**
     * Class Test_Repository_Register_Template
     * @group templates
     */
    class Test_Repository_Register_Template extends \OTGS_TestCase
    {
        public function setUp()
        {
        }
        /**
         * @test
         */
        public function it_renders()
        {
        }
        private function assertHasRegisterButton(\DOMDocument $dom)
        {
        }
        private function assertHasFormToEnterSiteKey(\DOMDocument $dom, $model)
        {
        }
    }
    /**
     * Class Test_Repository_Refund_Template
     * @group templates
     */
    class Test_Repository_Refund_Template extends \OTGS_TestCase
    {
        public function setUp()
        {
        }
        /**
         * @test
         */
        public function it_renders()
        {
        }
        /**
         * @test
         */
        public function it_renders_without_unregister_link()
        {
        }
        private function hasLink($model, \DOMXPath $xpath, $linkXpath, $nonce)
        {
        }
        private function hasNotLink($model, \DOMXPath $xpath, $linkXpath, $nonce)
        {
        }
    }
    /**
     * Class Test_OTGS_Installer_Instances_Factory
     *
     * @group installer-521
     */
    class Test_OTGS_Installer_Instances_Factory extends \OTGS_TestCase
    {
        /**
         * @test
         */
        public function it_creates_instance_of_installer_instances()
        {
        }
    }
    /**
     * Class Test_OTGS_Installer_Instances
     *
     * @group installer-521
     */
    class Test_OTGS_Installer_Instances extends \OTGS_TestCase
    {
        /**
         * @test
         */
        public function it_get_instances()
        {
        }
    }
    /**
     * Class Test_OTGS_Installer_Package
     *
     * @group installer-upgrade
     * @group installer-487
     */
    class Test_OTGS_Installer_Package extends \OTGS_TestCase
    {
        /**
         * @test
         */
        public function it_gets_product_by_subscription_type()
        {
        }
        /**
         * @test
         */
        public function it_returns_null_when_no_product_is_found_when_getting_product_by_subscription_type()
        {
        }
        /**
         * @test
         */
        public function it_gets_product_by_subscription_type_equivalent()
        {
        }
        /**
         * @test
         */
        public function it_returns_null_when_no_product_is_found_when_getting_product_by_subscription_type_equivalent()
        {
        }
        /**
         * @test
         */
        public function it_gets_product_by_subscription_type_on_upgrades()
        {
        }
        /**
         * @test
         */
        public function it_returns_null_when_no_product_is_found_when_getting_product_by_subscription_type_on_upgrades()
        {
        }
    }
    /**
     * Class Test_OTGS_Installer_Plugins_Update_Cache_Cleaner
     *
     * @group installer-531
     */
    class Test_OTGS_Installer_Plugins_Update_Cache_Cleaner extends \OTGS_TestCase
    {
        /**
         * @test
         */
        public function it_adds_hooks()
        {
        }
        /**
         * @test
         */
        public function it_invalidates_plugins_update_cache()
        {
        }
    }
    /**
     * Class Test_OTGS_Installer_Loader
     *
     * @group installer-509
     */
    class Test_OTGS_Installer_Loader extends \OTGS_TestCase
    {
        public function setUp()
        {
        }
        /**
         * @test
         */
        public function it_runs_installer_loader()
        {
        }
        /**
         * @test
         * @group installer-509
         */
        public function it_loads_actions_after_installer_init()
        {
        }
    }
}
namespace OTGS\Installer\AdminNotices {
    trait StoreMock
    {
        private $storeData = [];
        public function setUp()
        {
        }
    }
    /**
     * Class Test_Loader
     * @package OTGS\Installer\AdminNotices
     * @group admin-notices
     */
    class Test_Loader extends \OTGS_TestCase
    {
        use \OTGS\Installer\AdminNotices\StoreMock;
        /**
         * @test
         */
        public function it_adds_hooks()
        {
        }
        /**
         * @test
         */
        public function it_adds_ajax_hooks()
        {
        }
        /**
         * @test
         */
        public function it_does_not_change_dismissed_messages_if_they_have_not_timed_out()
        {
        }
        /**
         * @test
         */
        public function it_clears_expired_dismissed_messages_from_store()
        {
        }
        /**
         * @test
         */
        public function it_allows_custom_timeout_of_dismissed_messages()
        {
        }
        /**
         * @param $messageId
         */
        private function mockMessagesFilter($repo, $messageId)
        {
        }
        /**
         * @param array $dismissed
         *
         * @return Store
         */
        private function createStore(array $dismissed)
        {
        }
    }
    /**
     * Class Test_Dismissed
     * @package OTGS\Installer\AdminNotices
     * @group admin-notices
     */
    class Test_Dismissed extends \OTGS_TestCase
    {
        private $storeData = [];
        public function setUp()
        {
        }
        /**
         * @test
         */
        public function it_dismisses_notice()
        {
        }
    }
}
namespace OTGS\Installer\AdminNotices\Notices {
    /**
     * Class Test_Account
     * @package OTGS\Installer\AdminNotices
     * @group admin-notices
     */
    class Test_Account extends \OTGS_TestCase
    {
        use \OTGS\Installer\AdminNotices\storeMock;
        /**
         * @test
         */
        public function it_gets_no_message_when_there_are_not_any()
        {
        }
        /**
         * @test
         */
        public function it_gets_register_message()
        {
        }
        /**
         * @test
         * @dataProvider dp_siteUrl
         */
        public function it_does_not_get_register_message_on_development_sites($url)
        {
        }
        /**
         * @test
         */
        public function it_should_delay_register_message_on_new_installs()
        {
        }
        public function dp_siteUrl()
        {
        }
        /**
         * @test
         */
        public function it_does_not_get_register_message_if_config_callback_returns_false()
        {
        }
        /**
         * @test
         */
        public function it_gets_expired_message()
        {
        }
        /**
         * @test
         */
        public function it_gets_refunded_message()
        {
        }
        /**
         * @test
         */
        public function it_displays_on_correct_screens()
        {
        }
        /**
         * @test
         */
        public function it_displays_on_correct_pages()
        {
        }
        /**
         * @test
         */
        public function it_has_message_texts()
        {
        }
        /**
         * @test
         */
        public function it_returns_config_with_screens_and_pages()
        {
        }
        /**
         * @test
         */
        public function it_renders_texts()
        {
        }
        private function assertHasTag($tag, $text)
        {
        }
        private static function initializeOldInstall($repo)
        {
        }
        private function assertCanDismiss(string $text)
        {
        }
        private function assertCanNotDismiss(string $text)
        {
        }
    }
    /**
     * Class Test_Texts
     * @package OTGS\Installer\AdminNotices
     * @group admin-notices
     */
    class Test_Texts extends \OTGS_TestCase
    {
        /**
         * @test
         * @dataProvider dpType
         */
        public function it_has_buttons_on_not_registered_notice($type, $repo)
        {
        }
        /**
         * @test
         * @dataProvider dpType
         */
        public function it_has_buttons_on_expired_notice($type, $repo)
        {
        }
        /**
         * @test
         * @dataProvider dpType
         */
        public function it_has_button_on_refunded_notice($type, $repo)
        {
        }
        public function dpType()
        {
        }
    }
    /**
     * @package OTGS\Installer\AdminNotices
     * @group admin-notices
     */
    class Test_Hooks extends \OTGS_TestCase
    {
        /**
         * @test
         */
        public function it_adds_hooks()
        {
        }
    }
    /**
     * @package OTGS\Installer\AdminNotices
     * @group admin-notices
     */
    class Test_Recommendation extends \OTGS_TestCase
    {
        private $storeData = [];
        public function setUp()
        {
        }
        /**
         * @test
         */
        public function it_gets_no_message_when_there_are_not_any()
        {
        }
        /**
         * @test
         */
        public function it_displays_on_correct_screens()
        {
        }
        /**
         * @test
         */
        public function it_has_message_texts()
        {
        }
        /**
         * @test
         */
        public function it_returns_config_with_screens()
        {
        }
    }
    /**
     * Class Test_Account
     * @package OTGS\Installer\AdminNotices
     * @group admin-notices
     */
    class Test_ApiConnection extends \OTGS_TestCase
    {
        use \OTGS\Installer\AdminNotices\storeMock;
        /**
         * @test
         */
        public function it_gets_no_message_when_there_are_not_any()
        {
        }
        /**
         * @test
         */
        public function it_gets_connection_issues_message()
        {
        }
        /**
         * @test
         */
        public function it_displays_on_correct_screens()
        {
        }
        /**
         * @test
         */
        public function it_displays_on_correct_pages()
        {
        }
        /**
         * @test
         */
        public function it_has_message_texts()
        {
        }
        /**
         * @test
         */
        public function it_returns_config_with_screens_and_pages()
        {
        }
        /**
         * @test
         */
        public function it_renders_texts()
        {
        }
        private function assertHasTag($tag, $text)
        {
        }
        private static function initializeOldInstall($repo)
        {
        }
        private function assertCanNotDismiss(string $text)
        {
        }
    }
}
namespace OTGS\Installer\AdminNotices {
    /**
     * Class Test_Storage
     * @package OTGS\Installer\AdminNotices
     * @group admin-notices
     */
    class Test_Storage extends \OTGS_TestCase
    {
        use \OTGS\Installer\AdminNotices\StoreMock;
        /**
         * @test
         */
        public function it_stores_state()
        {
        }
    }
    /**
     * Class Test_Display
     * @package OTGS\Installer\AdminNotices
     * @group admin-notices
     */
    class Test_Display extends \OTGS_TestCase
    {
        public function tearDown()
        {
        }
        /**
         * @test
         */
        public function it_does_not_add_hooks_if_no_notices()
        {
        }
        /**
         * @test
         */
        public function it_can_show_message_on_plugins_screen()
        {
        }
        /**
         * @test
         */
        public function it_shows_notice_on_a_configurable_page()
        {
        }
        /**
         * @test
         */
        public function it_shows_no_messages_if_on_other_pages()
        {
        }
        /**
         * @test
         */
        public function it_renders_a_notice_if_on_repo_page()
        {
        }
        /**
         * @test
         */
        public function it_renders_a_notice_if_on_configured_screen()
        {
        }
        /**
         * @test
         */
        public function it_does_not_render_a_notice_if_not_on_repo_page()
        {
        }
        /**
         * @test
         */
        public function it_does_not_render_a_notice_if_it_has_been_dismissed()
        {
        }
        /**
         * @test
         */
        public function it_enqueues_on_WP_dashboard()
        {
        }
        /**
         * @test
         */
        public function it_enqueues_scripts()
        {
        }
        private function expectAdminMessageActionAdded($subject)
        {
        }
        private function expectAdminMessageActionNotAdded(\OTGS\Installer\AdminNotices\Display $subject)
        {
        }
        private function mockOnPluginsPage()
        {
        }
        private function mockOnOtherPages()
        {
        }
        private function mockOnWPDashboard()
        {
        }
        private function mockOnScreen($screenId)
        {
        }
    }
}
namespace {
    /**
     * Class Test_OTGS_Installer_Buy_URL_Hooks
     *
     * @group installer-546
     */
    class Test_OTGS_Installer_Buy_URL_Hooks extends \OTGS_TestCase
    {
        /**
         * @test
         */
        public function it_adds_hooks()
        {
        }
        /**
         * @test
         */
        public function it_appends_installer_source()
        {
        }
    }
    /**
     * Class Test_OTGS_Installer_Filename_Hooks
     *
     * @group windows-path-size-limitation
     * @group installer-392
     */
    class Test_OTGS_Installer_Filename_Hooks extends \OTGS_TestCase
    {
        /**
         * @test
         * @dataProvider dp_win_os_names
         */
        public function it_adds_hooks_if_os_is_win($win_os_names)
        {
        }
        /**
         * @test
         */
        public function it_does_not_add_hook_when_os_is_not_win()
        {
        }
        /**
         * @test
         */
        public function it_fixes_filename()
        {
        }
        /**
         * @return array
         */
        public function dp_win_os_names()
        {
        }
        /**
         * @test
         */
        public function it_does_not_fix_filename_because_it_is_not_temp_folder()
        {
        }
    }
    /**
     * Class Test_OTGS_Installer_Logger_Storage
     *
     * @group installer-505
     * @group adriano
     */
    class Test_OTGS_Installer_Logger_Storage extends \OTGS_TestCase
    {
        /**
         * @test
         */
        public function it_gets_log_entries()
        {
        }
        /**
         * @test
         */
        public function it_adds_new_log_entry()
        {
        }
        /**
         * @test
         */
        public function it_should_cut_down_items_to_match_the_limit_when_adding_new_entry()
        {
        }
    }
    /**
     * Class Test_OTGS_Installer_Log_Factory
     *
     * @group installer-505
     */
    class Test_OTGS_Installer_Log_Factory extends \OTGS_TestCase
    {
        /**
         * @test
         */
        public function it_returns_instance_of_log()
        {
        }
    }
    /**
     * Class Test_OTGS_Installer_Logger
     *
     * @group logger
     * @group installer-487
     * @group installer-505
     */
    class Test_OTGS_Installer_Logger extends \OTGS_TestCase
    {
        /**
         * @test
         */
        public function it_gets_api_log()
        {
        }
        /**
         * @test
         */
        public function it_adds_api_log()
        {
        }
        /**
         * @test
         */
        public function it_adds_log()
        {
        }
        /**
         * @test
         */
        public function it_saves_log()
        {
        }
    }
    /**
     * Class Test_OTGS_Installer_WP_Components_Hooks
     *
     * @group local-components
     * @group installer-370
     */
    class Test_OTGS_Installer_WP_Components_Hooks extends \OTGS_TestCase
    {
        /**
         * @test
         */
        public function it_adds_hooks()
        {
        }
        /**
         * @test
         */
        public function it_schedules_components_report()
        {
        }
        /**
         * @test
         */
        public function it_does_not_schedule_components_report_because_it_is_scheduled_already()
        {
        }
        /**
         * @test
         * @group installer-431
         */
        public function it_schedules_components_report_when_saving_site_key()
        {
        }
        /**
         * @test
         * @group installer-431
         */
        public function it_does_not_schedule_components_report_when_saving_site_key_because_it_is_scheduled_already()
        {
        }
        /**
         * @test
         */
        public function it_sends_components_data()
        {
        }
        /**
         * @test
         */
        public function it_sends_components_data_by_force()
        {
        }
        /**
         * @test
         * @group installer-433
         */
        public function it_sends_components_data_and_request_to_be_processed_instantly()
        {
        }
        /**
         * @test
         */
        public function it_does_not_send_components_data_because_it_is_up_to_date()
        {
        }
        public function get_php_functions_mock()
        {
        }
    }
    /**
     * Class Test_OTGS_Installer_WP_Share_Local_Components_Setting_Hooks_Factory
     *
     * @runTestsInSeparateProcesses
     * @preserveGlobalState disabled
     *
     * @group installer-419
     * @group installer-487
     */
    class Test_OTGS_Installer_Factory extends \OTGS_TestCase
    {
        /**
         * @test
         */
        public function it_creates_instance_of_local_components_settings_hooks()
        {
        }
        /**
         * @test
         */
        public function it_creates_instance_of_site_key_ajax_handler()
        {
        }
        /**
         * @test
         */
        public function it_creates_instance_of_upgrade_response()
        {
        }
        /**
         * @test
         */
        public function it_loads_installer_support_hooks()
        {
        }
        /**
         * @test
         */
        public function it_does_not_load_installer_support_ajax_hook_when_it_is_not_an_ajax_request()
        {
        }
        private function get_installer_mock()
        {
        }
    }
    class OTGS_Installer_WP_Components_Setting_Ajax
    {
        const AJAX_ACTION = 'otgs_save_setting_share_local_components';
        const SAVE_SETTING_PRIORITY = 1;
        /**
         * @var OTGS_Installer_WP_Share_Local_Components_Setting
         */
        private $setting;
        /**
         * @var WP_Installer
         */
        private $installer;
        public function __construct(\OTGS_Installer_WP_Share_Local_Components_Setting $setting, \WP_Installer $installer)
        {
        }
        public function add_hooks()
        {
        }
        public function save()
        {
        }
        /**
         * @return bool
         */
        private function is_valid_request()
        {
        }
    }
    class OTGS_Installer_WP_Share_Local_Components_Setting
    {
        const OPTION_KEY = 'otgs_share_local_components';
        public function save(array $repos)
        {
        }
        /**
         * @param string $repo
         *
         * @return bool
         */
        public function is_repo_allowed($repo)
        {
        }
        public function has_setting($repo)
        {
        }
        public static function get_setting($repo)
        {
        }
        private static function get()
        {
        }
    }
    class OTGS_Installer_Package_Product
    {
        private $id;
        private $name;
        private $description;
        private $price;
        private $subscription_type;
        private $subscription_type_text;
        private $subscription_info;
        private $subscription_type_equivalent;
        private $url;
        private $renewals;
        private $upgrades;
        private $plugins;
        private $downloads;
        public function __construct(array $params = array())
        {
        }
        public function get_id()
        {
        }
        public function get_name()
        {
        }
        public function get_description()
        {
        }
        public function get_price()
        {
        }
        public function get_subscription_type()
        {
        }
        public function get_subscription_type_text()
        {
        }
        public function get_subscription_info()
        {
        }
        public function get_subscription_type_equivalent()
        {
        }
        public function get_url()
        {
        }
        public function get_renewals()
        {
        }
        public function get_upgrades()
        {
        }
        public function get_plugins()
        {
        }
        /**
         * @param string $slug
         *
         * @return bool
         */
        public function is_plugin_registered($slug)
        {
        }
        public function get_downloads()
        {
        }
    }
    class OTGS_Installer_Site_Key_Ajax
    {
        private $subscription_fetch;
        private $logger;
        private $repositories;
        private $subscription_factory;
        public function __construct(\OTGS_Installer_Fetch_Subscription $subscription_fetch, \OTGS_Installer_Logger $logger, \OTGS_Installer_Repositories $repositories, \OTGS_Installer_Subscription_Factory $subscription_factory)
        {
        }
        public function add_hooks()
        {
        }
        public function save()
        {
        }
        public function remove()
        {
        }
        public function update()
        {
        }
        public function find()
        {
        }
        private function get_error_message(\Exception $e, \OTGS_Installer_Repository $repository_data)
        {
        }
        private function clean_plugins_update_cache()
        {
        }
    }
    class OTGS_Installer_Fetch_Subscription
    {
        private $package_source_factory;
        private $plugin_finder;
        private $repositories;
        private $logger;
        private $log_factory;
        public function __construct(\OTGS_Installer_Source_Factory $package_source_factory, \OTGS_Installer_Plugin_Finder $plugin_finder, \OTGS_Installer_Repositories $repositories, \OTGS_Installer_Logger $logger, \OTGS_Installer_Log_Factory $log_factory)
        {
        }
        /**
         * @param string $repository_id
         * @param string $site_key
         * @param string $source
         *
         * @return bool|stdClass
         * @throws OTGS_Installer_Fetch_Subscription_Exception
         */
        public function get($repository_id, $site_key, $source)
        {
        }
        private function store_log($args, $request_url, $response)
        {
        }
        /**
         * @return array
         */
        private function get_local_product_versions()
        {
        }
        /**
         * @param string $source
         *
         * @return array
         */
        private function get_extra_url_parameters($source)
        {
        }
        /**
         * @param bool $repository_id
         *
         * @return string
         */
        private function get_installer_site_url($repository_id = \false)
        {
        }
    }
    class OTGS_Installer_Package_Product_Finder
    {
        /**
         * @param OTGS_Installer_Repository $repository
         * @param OTGS_Installer_Subscription $subscription
         *
         * @return null|OTGS_Installer_Package_Product
         */
        public function get_product_in_repository_by_subscription(\OTGS_Installer_Repository $repository, \OTGS_Installer_Subscription $subscription = \null)
        {
        }
    }
    class OTGS_Installer_Repositories_Factory
    {
        public function create(\WP_Installer $installer)
        {
        }
    }
    class OTGS_Installer_Repositories
    {
        private $installer;
        private $repositories;
        private $repository_factory;
        private $subscription_factory;
        public function __construct(\WP_Installer $installer, \OTGS_Installer_Repository_Factory $repository_factory, \OTGS_Installer_Subscription_Factory $subscription_factory)
        {
        }
        public function get_all()
        {
        }
        private function get_repositories($setting_repositories)
        {
        }
        private function get_packages($repository)
        {
        }
        private function get_products($package)
        {
        }
        /**
         * @param $id
         *
         * @return null|OTGS_Installer_Repository
         */
        public function get($id)
        {
        }
        public function refresh($bypass_bucket = \false)
        {
        }
        public function save_subscription(\OTGS_Installer_Repository $repository)
        {
        }
    }
    class OTGS_Installer_Repository_Factory
    {
        public function create_repository($params)
        {
        }
        public function create_package($params)
        {
        }
        public function create_product($params)
        {
        }
    }
    class OTGS_Installer_Repository
    {
        private $id;
        private $subscription;
        private $packages;
        private $product_name;
        private $api_url;
        public function __construct(array $params = array())
        {
        }
        /**
         * @return string
         */
        public function get_id()
        {
        }
        /**
         * @return string
         */
        public function get_product_name()
        {
        }
        /**
         * @param bool $ssl
         *
         * @return string
         */
        public function get_api_url($ssl = \true)
        {
        }
        /**
         * @return OTGS_Installer_Subscription
         */
        public function get_subscription()
        {
        }
        /**
         * @return array
         */
        public function get_packages()
        {
        }
        /**
         * @return null|OTGS_Installer_Package_Product
         */
        public function get_product_by_subscription_type()
        {
        }
        /**
         * @return null|OTGS_Installer_Package_Product
         */
        public function get_product_by_subscription_type_equivalent()
        {
        }
        /**
         * @return null|OTGS_Installer_Package_Product
         */
        public function get_product_by_subscription_type_on_upgrades()
        {
        }
        public function set_subscription(\OTGS_Installer_Subscription $subscription = \null)
        {
        }
        /**
         * @param string $function_name
         *
         * @return null|OTGS_Installer_Package_Product
         */
        private function get_product_by($function_name)
        {
        }
    }
    class OTGS_Installer_Source_Factory
    {
        public function create()
        {
        }
    }
    class OTGS_Installer_Upgrade_Response
    {
        /**
         * @var array
         */
        private $plugins;
        /**
         * @var array
         */
        private $repositories;
        /**
         * @var OTGS_Installer_Source_Factory
         */
        private $source_factory;
        /**
         * @var OTGS_Installer_Package_Product_Finder
         */
        private $product_finder;
        public function __construct(array $plugins, \OTGS_Installer_Repositories $repositories, \OTGS_Installer_Source_Factory $source_factory, \OTGS_Installer_Package_Product_Finder $product_finder)
        {
        }
        public function add_hooks()
        {
        }
        public function modify_upgrade_response($update_plugins)
        {
        }
        private function should_skip_upgrade_process(\OTGS_Installer_Plugin $plugin, $update_plugins, \OTGS_Installer_Repository $repository)
        {
        }
        private function is_plugin_registered_on_external_repo(\OTGS_Installer_Plugin $plugin)
        {
        }
        private function append_site_key_to_download_url($url, $key, $repository_id, $site_url)
        {
        }
        private function get_extra_url_parameters($source)
        {
        }
        private function should_fallback_under_wp_org_repo(\OTGS_Installer_Plugin $plugin, $site_key)
        {
        }
    }
    class OTGS_Installer_Factory
    {
        private $installer;
        private $filename_hooks;
        private $icons;
        private $installer_php_functions;
        private $local_components_ajax_setting;
        private $settings;
        /**
         * @var OTGS_Template_Service
         */
        private $template_service;
        private $wp_components_hooks;
        private $wp_components_sender;
        private $wp_components_storage;
        private $upgrade_response;
        private $plugin_finder;
        private $plugin_factory;
        private $repositories;
        public function __construct(\WP_Installer $installer)
        {
        }
        /**
         * @return OTGS_Installer_Filename_Hooks
         */
        public function create_filename_hooks()
        {
        }
        public function load_filename_hooks()
        {
        }
        /**
         * @return OTGS_Installer_Icons
         */
        public function create_icons()
        {
        }
        public function load_icons()
        {
        }
        /**
         * @return OTGS_Installer_WP_Components_Setting_Ajax
         */
        public function create_local_components_ajax_setting()
        {
        }
        public function load_local_components_ajax_settings()
        {
        }
        /**
         * @return OTGS_Installer_WP_Components_Setting_Resources
         */
        public function create_resources()
        {
        }
        public function load_resources()
        {
        }
        /**
         * @return OTGS_Installer_WP_Share_Local_Components_Setting_Hooks
         */
        public function create_settings_hooks()
        {
        }
        public function load_settings_hooks()
        {
        }
        /**
         * @return OTGS_Template_Service
         */
        private function create_template_service()
        {
        }
        /**
         * @return OTGS_Installer_WP_Share_Local_Components_Setting
         */
        private function create_settings()
        {
        }
        /**
         * @return OTGS_Installer_WP_Components_Hooks
         */
        public function create_wp_components_hooks()
        {
        }
        public function load_wp_components_hooks()
        {
        }
        /**
         * @return OTGS_Installer_WP_Components_Storage
         */
        public function create_wp_components_storage()
        {
        }
        /**
         * @return OTGS_Installer_WP_Components_Sender
         */
        public function create_wp_components_sender()
        {
        }
        /**
         * @return OTGS_Installer_PHP_Functions
         */
        public function create_installer_php_functions()
        {
        }
        /**
         * @return OTGS_Installer_Debug_Info
         */
        public function create_debug_info_hook()
        {
        }
        public function load_debug_info_hooks()
        {
        }
        /**
         * @return OTGS_Installer_Plugin_Factory
         */
        public function get_plugin_factory()
        {
        }
        /**
         * @return OTGS_Installer_Plugin_Finder
         */
        public function get_plugin_finder()
        {
        }
        /**
         * @return OTGS_Installer_Upgrade_Response
         */
        public function create_upgrade_response()
        {
        }
        public function load_upgrade_response()
        {
        }
        /**
         * @return OTGS_Installer_Site_Key_Ajax
         */
        public function create_site_key_ajax_handler()
        {
        }
        public function load_site_key_ajax_handler()
        {
        }
        public function load_installer_support_hooks()
        {
        }
        public function load_translation_service_info_hooks()
        {
        }
        /**
         * @return OTGS_Installer_Repositories
         */
        private function get_repositories()
        {
        }
        /**
         * @return $this
         */
        public function load_plugins_update_cache_cleaner()
        {
        }
        public function load_buy_url_hooks()
        {
        }
        public function load_admin_notice_hooks()
        {
        }
        /**
         * @return WP_Installer
         */
        private function get_installer()
        {
        }
    }
    class OTGS_Installer_WP_Components_Storage
    {
        const COMPONENTS_CACHE_OPTION_KEY = 'otgs_active_components';
        public function refresh_cache()
        {
        }
        public function is_outdated()
        {
        }
        public function get()
        {
        }
        /**
         * @return array
         */
        public function get_plugins()
        {
        }
    }
    class OTGS_Installer_Plugins_Update_Cache_Cleaner
    {
        public function add_hooks()
        {
        }
        public function clean_plugins_update_cache()
        {
        }
    }
    class OTGS_Installer_Package
    {
        private $key;
        private $id;
        private $name;
        private $description;
        private $image_url;
        private $order;
        private $parent;
        private $products = array();
        public function __construct(array $params = array())
        {
        }
        public function get_key()
        {
        }
        public function get_products()
        {
        }
        public function get_product_by_subscription_type($type)
        {
        }
        public function get_product_by_subscription_type_equivalent($type)
        {
        }
        public function get_product_by($function, $type)
        {
        }
        public function get_product_by_subscription_type_on_upgrades($type)
        {
        }
        public function get_id()
        {
        }
        public function get_name()
        {
        }
        public function get_description()
        {
        }
        public function get_image_url()
        {
        }
        public function get_order()
        {
        }
        public function get_parent()
        {
        }
    }
    class OTGS_Products_Bucket_Repository_Factory
    {
        /**
         * @return OTGS_Products_Bucket_Repository
         */
        public static function create($api_urls)
        {
        }
    }
    class OTGS_Products_Bucket_Repository
    {
        /**
         * @var array
         */
        private $api_urls;
        /**
         * @param array $api_urls
         */
        public function __construct($api_urls)
        {
        }
        /**
         * @param string $repository_id
         * @param string $site_key
         * @param string $site_url
         *
         * @return string|null
         */
        public function get_products_bucket_url($repository_id, $site_key, $site_url)
        {
        }
        /**
         * @param array|WP_Error $response
         *
         * @return object|null
         */
        private function get_response_data($response)
        {
        }
    }
    class OTGS_Products_Config_Xml
    {
        /**
         * @var SimpleXMLElement
         */
        private $repositories_config;
        /**
         * @param string $xml_file
         */
        public function __construct($xml_file)
        {
        }
        /**
         * @param $xml_file
         *
         * @return SimpleXMLElement|null
         */
        private function load_configuration($xml_file)
        {
        }
        /**
         * @param $repository_id
         *
         * @return string|null
         */
        public function get_repository_products_url($repository_id)
        {
        }
        /**
         * @return array
         */
        public function get_products_api_urls()
        {
        }
    }
    class OTGS_Products_Manager_Factory
    {
        /**
         * @param OTGS_Products_Config_Xml $repositories_config
         * @param OTGS_Installer_Logger_Storage $logger_storage
         *
         * @return OTGS_Products_Manager
         */
        public static function create(\OTGS_Products_Config_Xml $repositories_config, \OTGS_Installer_Logger_Storage $logger_storage)
        {
        }
    }
    class OTGS_Products_Manager
    {
        /**
         * @var OTGS_Products_Bucket_Repository
         */
        private $products_bucket_repository;
        /**
         * @var OTGS_Products_Config_Db_Storage
         */
        private $products_config_storage;
        /**
         * @var OTGS_Products_Config_Xml
         */
        private $products_config_xml;
        /**
         * @var WP_Installer_Channels
         */
        private $installer_channels;
        /**
         * @var OTGS_Installer_Logger_Storage
         */
        private $logger_storage;
        /**
         * @param OTGS_Products_Config_Db_Storage $products_config_storage
         * @param OTGS_Products_Bucket_Repository $products_bucket_repository
         * @param OTGS_Products_Config_Xml $products_config_xml
         * @param WP_Installer_Channels $installer_channels
         * @param OTGS_Installer_Logger_Storage $logger_storage
         */
        public function __construct(\OTGS_Products_Config_Db_Storage $products_config_storage, \OTGS_Products_Bucket_Repository $products_bucket_repository, \OTGS_Products_Config_Xml $products_config_xml, \WP_Installer_Channels $installer_channels, \OTGS_Installer_Logger_Storage $logger_storage)
        {
        }
        /**
         * @param string $repository_id
         * @param string $site_key
         * @param string $site_url
         * @param bool $bypass_buckets
         *
         * @return string|null
         */
        public function get_products_url($repository_id, $site_key, $site_url, $bypass_buckets)
        {
        }
        /**
         * @param string $repository_id
         *
         * @return bool
         */
        private function is_on_production_channel($repository_id)
        {
        }
        /**
         * @param string $repository_id
         * @param string $site_key
         *
         * @return string|null
         */
        private function get_products_url_from_local_config($repository_id, $site_key)
        {
        }
        /**
         * @param string $repository_id
         * @param string $site_key
         * @param string $site_url
         *
         * @return string|null
         */
        public function get_products_url_from_otgs($repository_id, $site_key, $site_url)
        {
        }
        /**
         * @param string $repository_id
         * @param string $message
         *
         * @return OTGS_Installer_Log
         */
        private function prepare_log($repository_id, $message)
        {
        }
    }
    class OTGS_Products_Config_Db_Storage
    {
        const PRODUCTS_CONFIG_KEY = 'otgs_installer_products_urls';
        /**
         * @param string $repository_id
         *
         * @return string|null
         */
        public function get_repository_products_url($repository_id)
        {
        }
        /**
         * @param string $repository_id
         * @param string $repository_products_url
         *
         * @return bool
         */
        public function store_repository_products_url($repository_id, $repository_products_url)
        {
        }
        /**
         * @param string $repository_id
         *
         * @return bool
         */
        public function clear_repository_products_url($repository_id)
        {
        }
    }
    class OTGS_Installer_Products_Parser
    {
        /**
         * @var OTGS_Installer_Logger_Storage
         */
        private $logger;
        /**
         * @var WP_Installer_Channels
         */
        private $installerChannels;
        private $product_notices = array();
        public function __construct(\WP_Installer_Channels $installerChannels, \OTGS_Installer_Logger_Storage $logger)
        {
        }
        /**
         * @param string $products_url
         * @param string $repository_id
         * @param string $response
         *
         * @return array
         * @throws OTGS_Installer_Products_Parsing_Exception
         */
        public function get_products_from_response($products_url, $repository_id, $response)
        {
        }
        /**
         * @param string $products_url
         * @param string $response
         *
         * @return array
         * @throws OTGS_Installer_Products_Parsing_Exception
         */
        private function parse_products_response($products_url, $response)
        {
        }
        /**
         * @param string $products_url
         * @param array $products
         *
         * @throws OTGS_Installer_Products_Parsing_Exception
         */
        private function validate_products_plugins($products_url, $products)
        {
        }
        /**
         * @param string $products_url
         * @param string $product_id
         */
        private function handle_product_parsing_error($products_url, $product_id)
        {
        }
        /**
         * @param string $url
         * @param string $response
         */
        private function store_log($url, $response)
        {
        }
        /**
         * @param string $repository_id
         * @param string $products
         *
         * @return array
         */
        private function prepare_products_downloads($repository_id, $products)
        {
        }
        /**
         * @param array $products_downloads
         *
         * @return array
         */
        private function add_release_notes($products_downloads)
        {
        }
        /**
         * @return array
         */
        public function get_product_notices()
        {
        }
    }
    class OTGS_Installer_Filename_Hooks
    {
        /**
         * @var OTGS_Installer_PHP_Functions
         */
        private $built_in_functions;
        public function __construct(\OTGS_Installer_PHP_Functions $built_in_functions)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param string $filename
         * @param string $ext
         * @param string $dir
         *
         * @return string
         */
        public function fix_filename_for_win($filename, $ext, $dir)
        {
        }
    }
    class OTGS_Installer_Subscription_Factory
    {
        public function create($params = array())
        {
        }
    }
}
namespace OTGS\Installer\AdminNotices {
    class Loader
    {
        /**
         * @param bool $isAjax
         */
        public static function addHooks($isAjax)
        {
        }
        public static function initDisplay()
        {
        }
        /**
         * @return array
         */
        private static function refreshDismissed()
        {
        }
        /**
         * @param int $start
         * @param string $repo
         * @param string $id
         *
         * @return bool
         */
        public static function timeOut($start, $repo, $id)
        {
        }
    }
    class MessageTexts
    {
        /**
         * @var array
         */
        private $messages;
        /**
         * MessageTexts constructor.
         *
         * @param array $messages
         */
        public function __construct(array $messages)
        {
        }
        /**
         * @param string $repo
         * @param string $messageId
         *
         * @return string|null
         */
        public function get($repo, $messageId, $parameters = [])
        {
        }
    }
    class Store
    {
        const ADMIN_NOTICES_OPTION = 'otgs_installer_admin_notices';
        /**
         * @param string $key
         * @param $data
         */
        public function save($key, $data)
        {
        }
        /**
         * @param string $key
         *
         * @return mixed
         */
        public function get($key, $default)
        {
        }
    }
    class ToolsetConfig
    {
        public static function pages()
        {
        }
    }
    class WPMLConfig
    {
        public static function pages()
        {
        }
    }
    class Config
    {
        /**
         * @var array
         */
        protected $config;
        public function __construct(array $config)
        {
        }
        /**
         * @param array $messages
         * @param string $item
         * @param string $type
         *
         * @return bool
         */
        protected function hasItem(array $messages, $item, $type)
        {
        }
    }
}
namespace OTGS\Installer\AdminNotices\Notices {
    class Recommendation
    {
        const PLUGIN_ACTIVATED = 'plugin-activated';
        public static function addHooks()
        {
        }
        /**
         * @param callable $getActivatedPlugins
         * @param array $initialNotices
         *
         * @return array
         */
        public static function getCurrentNotices($getActivatedPlugins, array $initialNotices)
        {
        }
        /**
         * @param array $initialConfig
         *
         * @return array
         */
        public static function config(array $initialConfig)
        {
        }
        /**
         * @param array $screens
         *
         * @return array
         */
        public static function screens(array $screens)
        {
        }
        /**
         * @param array $initialTexts
         *
         * @return array
         */
        public static function texts(array $initialTexts)
        {
        }
        /**
         * @param array $initialDismissions
         *
         * @return array
         */
        public static function dismissions(array $initialDismissions)
        {
        }
    }
    class Hooks
    {
        public static function addHooks($class, \WP_Installer $installer)
        {
        }
    }
    class ApiConnection
    {
        const CONNECTION_ISSUES = 'connection-issues';
        /**
         * @param \WP_Installer $installer
         * @param array $initialNotices
         *
         * @return array
         */
        public static function getCurrentNotices(\WP_Installer $installer, array $initialNotices)
        {
        }
        /**
         * @param \WP_Installer $installer
         * @param array $nag
         *
         * @return bool
         */
        public static function shouldShowConnectionIssues(\WP_Installer $installer, array $nag)
        {
        }
        public static function config(array $initialConfig)
        {
        }
        public static function pages(array $initialPages)
        {
        }
        public static function screens(array $screens)
        {
        }
        public static function texts(array $initialTexts)
        {
        }
        public static function dismissions(array $initialDismissions)
        {
        }
    }
    class Dismissions
    {
        /**
         * @param array $dismissed already dismissed notices.
         * @param array $data dismissed notice parameters.
         *
         * @return array
         */
        public static function dismissAccountNotice($dismissed, $data)
        {
        }
        /**
         * @param array $dismissed already dismissed notices.
         * @param array $data dismissed notice parameters.
         *
         * @return array
         */
        public static function dismissRecommendationNotice($dismissed, $data)
        {
        }
    }
    class Account
    {
        const NOT_REGISTERED = 'not-registered';
        const EXPIRED = 'expired';
        const REFUNDED = 'refunded';
        const GET_FIRST_INSTALL_TIME = 'get_first_install_time';
        /**
         * @param \WP_Installer $installer
         * @param array $initialNotices
         *
         * @return array
         */
        public static function getCurrentNotices(\WP_Installer $installer, array $initialNotices)
        {
        }
        /**
         * @param \WP_Installer $installer
         * @param array $nag
         *
         * @return bool
         */
        public static function shouldShowNotRegistered(\WP_Installer $installer, array $nag)
        {
        }
        /**
         * @param \WP_Installer $installer
         * @param array $nag
         *
         * @return bool
         */
        public static function shouldShowExpired(\WP_Installer $installer, array $nag)
        {
        }
        /**
         * @param \WP_Installer $installer
         * @param array $nag
         *
         * @return bool
         */
        public static function shouldShowRefunded(\WP_Installer $installer, array $nag)
        {
        }
        public static function config(array $initialConfig)
        {
        }
        public static function pages(array $initialPages)
        {
        }
        public static function screens(array $screens)
        {
        }
        public static function texts(array $initialTexts)
        {
        }
        public static function dismissions(array $initialDismissions)
        {
        }
        private static function isDevelopmentSite($url)
        {
        }
        private static function maybeDelayOneWeekOnNewInstalls($repo)
        {
        }
    }
    class Texts
    {
        protected static $repo;
        protected static $product;
        protected static $apiHost;
        protected static $communicationDetailsLink;
        protected static $supportLink;
        public static function notRegistered()
        {
        }
        public static function expired()
        {
        }
        public static function refunded()
        {
        }
        public static function connectionIssues()
        {
        }
        public static function pluginActivatedRecommendation($parameters)
        {
        }
        /**
         * @param string $type The type is used as a suffix of the `otgs-installer-notice-` CSS class.
         * @param string $html An unescaped HTML string but with escaped data (e.g. attributes, URLs, or strings in the HTML produced from any input).
         *
         * @return string
         */
        protected static function insideDiv($type, $html)
        {
        }
        private static function getRecommendationButtons($parameters)
        {
        }
        /**
         * @return string
         */
        protected static function getNotRegisteredButtons()
        {
        }
        /**
         * @return string
         */
        protected static function getExpiredButtons()
        {
        }
        /**
         * @return string
         */
        private static function getRefundedButtons()
        {
        }
        /**
         * @param string $notice_type The method takes care of escaping the string.
         *
         * @return string
         */
        protected static function getDismissHTML($notice_type)
        {
        }
        /**
         * @param string $notice_type The method takes care of escaping the string.
         *
         * @return string
         */
        private static function getDismissedAttributes($notice_type, $noticeId = null)
        {
        }
        /**
         * @param string $url The method takes care of escaping the string.
         * @param string $text The method takes care of escaping the string.
         *
         * @return string
         */
        protected static function getPrimaryButtonHTML($url, $text)
        {
        }
        /**
         * @param string $url The method takes care of escaping the string.
         * @param string $text The method takes care of escaping the string.
         *
         * @return string
         */
        protected static function getRecommendationInstallButtonHTML($text, $parameters)
        {
        }
        /**
         * @param string $url The method takes care of escaping the string.
         * @param string $text The method takes care of escaping the string.
         *
         * @return string
         */
        protected static function getRefreshButtonHTML($url, $text)
        {
        }
        /**
         * @param string $text The method takes care of escaping the string.
         *
         * @return string
         */
        protected static function getStatusHTML($text)
        {
        }
        /**
         * @param string $text The method takes care of escaping the string.
         *
         * @return string
         */
        protected static function getRecommendationDismissHTML($text, $parameters)
        {
        }
        /**
         * @param string $html An unescaped HTML string but with escaped data (e.g. attributes, URLs, or strings in the HTML produced from any input).
         *
         * @return string
         */
        private static function inButtonAreaHTML($html)
        {
        }
        /**
         * @param string $text
         *
         * @return string
         */
        private static function inLinksAreaHTML($title, $text, $communicationDetails, $supportLink)
        {
        }
        /**
         * @param string $text The method takes care of escaping the string.
         *                      If the string contains a placeholder, it will be replaced with the value of `static::$product`.
         *
         * @return string
         */
        protected static function getHeadingHTML($text)
        {
        }
        /**
         * @param string $text
         *
         * @return string
         */
        protected static function getConnectionIssueHeadingHTML($text)
        {
        }
        /**
         * @param string $text The method takes care of escaping the string.
         *                      If the string contains a placeholder, it will be replaced with the value of `static::$product`.
         *
         * @return string
         */
        protected static function getBodyHTML($text)
        {
        }
        /**
         * @param string $text  The method takes care of escaping the string.
         *                      If the string contains a placeholder, it will be replaced with the value of `static::$product`.
         *
         * @return string
         */
        protected static function getConnectionIssueBodyHTML($text)
        {
        }
        /**
         * @param string $text The method takes care of escaping the string.
         *
         * @return string
         */
        private static function getStagingButtonHTML($text)
        {
        }
        private static function getCommunicationDetailsLinkHTML($text)
        {
        }
        private static function getSupportLinkHTML($text)
        {
        }
    }
    class WPMLTexts extends \OTGS\Installer\AdminNotices\Notices\Texts
    {
        protected static $repo = 'wpml';
        protected static $product = 'WPML';
        protected static $apiHost = 'wpml.org';
        protected static $communicationDetailsLink = '/admin.php?page=otgs-installer-support';
        protected static $supportLink = 'https://wpml.org/forums/';
    }
    class Notice
    {
        /**
         * @param array $installer
         * @param array $config
         *
         * @return \Closure
         */
        public static function addNoticesForType($installer, $config)
        {
        }
        /**
         * @param string $noticeId
         * @param array $notices
         * @param string $repoId
         *
         * @return array
         */
        public static function addNotice($noticeId, array $notices, $repoId)
        {
        }
    }
    class ToolsetTexts extends \OTGS\Installer\AdminNotices\Notices\Texts
    {
        protected static $repo = 'toolset';
        protected static $product = 'Toolset';
        protected static $apiHost = 'toolset.com';
        protected static $communicationDetailsLink = '/admin.php?page=otgs-installer-support';
        protected static $supportLink = 'https://toolset.com/forums/forum/professional-support/';
    }
}
namespace OTGS\Installer\AdminNotices {
    class PageConfig extends \OTGS\Installer\AdminNotices\Config
    {
        /**
         * @param array $messages
         *
         * @return bool
         */
        public function isAnyMessageOnPage(array $messages)
        {
        }
        /**
         * @param string $repo
         * @param string $id
         *
         * @return bool
         */
        public function shouldShowMessage($repo, $id)
        {
        }
    }
    class ScreenConfig extends \OTGS\Installer\AdminNotices\Config
    {
        /**
         * @param array $messages
         *
         * @return bool
         */
        public function isAnyMessageOnPage(array $messages)
        {
        }
        /**
         * @param string $repo
         * @param string $id
         *
         * @return bool
         */
        public function shouldShowMessage($repo, $id)
        {
        }
    }
    class Display
    {
        /**
         * @var array
         */
        private $currentNotices;
        /**
         * @var PageConfig
         */
        private $pageConfig;
        /**
         * @var MessageTexts
         */
        private $messageTexts;
        /**
         * @var callable - string -> string -> bool
         */
        private $isDismissed;
        /**
         * @var ScreenConfig
         */
        private $screenConfig;
        public function __construct(array $currentNotices, array $config, \OTGS\Installer\AdminNotices\MessageTexts $messageTexts, callable $isDismissed)
        {
        }
        public function addHooks()
        {
        }
        public function addNotices()
        {
        }
        /**
         * @return bool
         */
        private function isRelevantOnPage()
        {
        }
        /**
         * @param string $repo
         * @param string $ids
         */
        private function displayNotice($repo, $id, $notice_params = [])
        {
        }
        public function addScripts()
        {
        }
    }
    class Dismissed
    {
        const STORE_KEY = 'dismissed';
        /**
         * @param array $dismissedNotices
         * @param string $repo
         * @param string $id
         *
         * @return bool
         */
        public static function isDismissed(array $dismissedNotices, $repo, $id)
        {
        }
        /**
         * @param array $dismissedNotices
         * @param callable $timeOut - int -> string -> string -> bool
         *
         * @return mixed
         */
        public static function clearExpired(array $dismissedNotices, callable $timeOut)
        {
        }
        public static function dismissNotice()
        {
        }
    }
}
namespace {
    class Installer_Dependencies
    {
        private $uploading_allowed = \null;
        private $is_win_paths_exception = array();
        private $missing_php_libraries = array();
        function __construct()
        {
        }
        public function is_win_paths_exception($repository_id)
        {
        }
        public function is_uploading_allowed()
        {
        }
        public function cant_download($repository_id)
        {
        }
        public function win_paths_exception_message()
        {
        }
        public function prevent_plugins_update_on_plugins_page()
        {
        }
        public function wp_plugin_update_row_win_exception()
        {
        }
        public function prevent_plugins_update_on_updates_screen()
        {
        }
        public function php_libraries_missing()
        {
        }
        public function missing_php_functions_notice()
        {
        }
    }
    class OTGS_Installer_PHP_Functions
    {
        /**
         * @param string $constant_name
         *
         * @return bool
         */
        public function defined($constant_name)
        {
        }
        /**
         * @param string $constant_name
         *
         * @return string|int|null
         */
        public function constant($constant_name)
        {
        }
        /**
         * @return int
         */
        public function time()
        {
        }
        public function phpversion()
        {
        }
    }
    class OTGS_Installer_Source
    {
        private $installer;
        private $file_system;
        public function __construct(\WP_Installer $installer, \WP_Filesystem_Base $file_system)
        {
        }
        /**
         * @return array|null
         */
        public function get()
        {
        }
    }
    class OTGS_Installer_Plugins_Page_Notice
    {
        const TEMPLATE = 'plugins-page';
        const DISPLAY_SUBSCRIPTION_NOTICE_KEY = 'display_subscription_notice';
        const DISPLAY_SETTING_NOTICE_KEY = 'display_setting_notice';
        private $plugins = array();
        /**
         * @var OTGS_Template_Service
         */
        private $template_service;
        private $plugin_finder;
        public function __construct(\OTGS_Template_Service $template_service, \OTGS_Installer_Plugin_Finder $plugin_finder)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @return array
         */
        public function get_plugins()
        {
        }
        public function add_plugin($plugin_id, $plugin_data)
        {
        }
        /**
         * @param string $plugin_file
         */
        public function show_purchase_notice_under_plugin($plugin_file, $plugin_data)
        {
        }
        /**
         * @return array
         */
        private function get_model($notice)
        {
        }
        private function get_toolset_lite_notice_model($plugin_name)
        {
        }
        private function get_classes()
        {
        }
    }
    class Translation_Service_Info
    {
        public function add_hooks()
        {
        }
        public function save_info($data, $repository_id)
        {
        }
    }
    class OTGS_Installer_WP_Share_Local_Components_Setting_Hooks
    {
        const TEMPLATE_CHECKBOX = 'share-local-data-setting';
        const TEMPLATE_RADIO = 'share-local-data-setting-radio';
        /**
         * @var OTGS_Template_Service
         */
        private $template_service;
        /**
         * @var OTGS_Installer_WP_Share_Local_Components_Setting
         */
        private $setting;
        public function __construct(\OTGS_Template_Service $template_service, \OTGS_Installer_WP_Share_Local_Components_Setting $setting)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param array $args
         *
         * @throws \InvalidArgumentException
         */
        public function render_local_components_setting(array $args)
        {
        }
        /**
         * @param $ignore
         * @param string $repo (wpml|toolset)
         *
         * @return bool
         */
        public function has_local_components_setting_filter($ignore, $repo)
        {
        }
        public function get_installer_repository_subscription_status($ignore, $repo)
        {
        }
        private function get_model($params)
        {
        }
        /**
         * @param array $args
         *
         * @return array
         * @throws \InvalidArgumentException
         */
        private function validate_arguments(array $args)
        {
        }
        /**
         * @param array $args
         *
         * @return bool
         */
        private function must_use_radios(array $args)
        {
        }
        /**
         * @param array  $args
         * @param string $required_argument
         *
         * @return bool
         */
        private function has_required_argument(array $args, $required_argument)
        {
        }
    }
    class OTGS_Installer_Products_Parsing_Exception extends \Exception
    {
        const RESPONSE_PARSING_ERROR_MESSAGE = 'Error in response parsing from %s.';
        public static function createForResponse($products_url)
        {
        }
    }
    class OTGS_Installer_Fetch_Subscription_Exception extends \Exception
    {
    }
    class OTGS_Installer_Site_Key_Exception extends \Exception
    {
    }
}
namespace OTGS\Installer {
    class Collection
    {
        /**
         * @var array
         */
        private $array;
        private function __construct(array $array)
        {
        }
        /**
         * @param array $array
         *
         * @return Collection
         */
        public static function of(array $array)
        {
        }
        /**
         * @param callable $fn
         *
         * @return Collection
         */
        public function filter(callable $fn)
        {
        }
        /**
         * @param callable $fn
         *
         * @return Collection
         */
        public function map(callable $fn)
        {
        }
        /**
         * Converts array from key => vales to an array of pairs [ key, value ]
         * @return Collection
         */
        public function entities()
        {
        }
        /**
         * @param string $column
         *
         * @return Collection
         */
        public function pluck($column)
        {
        }
        /**
         * @param callable $fn
         * @param mixed    $initial
         *
         * @return mixed
         */
        public function reduce(callable $fn, $initial = 0)
        {
        }
        /**
         * @return Collection
         */
        public function values()
        {
        }
        /**
         * @param Collection $other
         *
         * @return Collection
         */
        public function mergeRecursive(array $other)
        {
        }
        /**
         * @param string $key
         *
         * @return mixed|Collection|NullCollection|
         */
        public function get($key = null)
        {
        }
        public function getOrNull($key = null)
        {
        }
        public function contains($value)
        {
        }
        public function head()
        {
        }
    }
    class NullCollection
    {
        public function map(callable $fn)
        {
        }
        public function filter(callable $fn)
        {
        }
        public function head()
        {
        }
        public function pluck()
        {
        }
        public function get()
        {
        }
        public function getOrNull()
        {
        }
    }
}
namespace {
    class OTGS_Installer_WP_Components_Sender
    {
        /**
         * @var WP_Installer
         */
        private $installer;
        /**
         * @var OTGS_Installer_WP_Share_Local_Components_Setting
         */
        private $settings;
        public function __construct(\WP_Installer $installer, \OTGS_Installer_WP_Share_Local_Components_Setting $settings)
        {
        }
        public function send(array $components, $force = \false)
        {
        }
    }
    interface OTGS_Template_Service
    {
        public function show($model, $template);
    }
    class OTGS_Php_Template_Service implements \OTGS_Template_Service
    {
        const FILE_EXTENSION = '.php';
        /**
         * @var string
         */
        private $template_dir;
        /**
         * @param string $template_dir
         */
        public function __construct($template_dir)
        {
        }
        /**
         * @param array $model_params
         * @param string $template
         */
        public function show($model_params, $template)
        {
        }
        private function getTemplatePath($template)
        {
        }
    }
    class OTGS_Template_Service_Factory
    {
        /**
         * @param string $template_dir
         * @return OTGS_Php_Template_Service
         */
        public static function create($template_dir)
        {
        }
    }
    interface OTGS_Template_Service_Loader
    {
        /**
         * @return OTGS_Template_Service
         */
        public function get_service();
    }
    class OTGS_Php_Template_Service_Loader implements \OTGS_Template_Service_Loader
    {
        /**
         * @var string
         */
        private $template_dir;
        /**
         * @param string $template_dir
         */
        public function __construct($template_dir)
        {
        }
        /**
         * @return OTGS_Php_Template_Service
         */
        public function get_service()
        {
        }
    }
    class OTGS_Template_Service_Php_Model
    {
        /**
         * @var OTGS_Template_Service_Php_Model[]|mixed[]
         */
        private $attributes = [];
        /**
         * @param array $data
         */
        public function __construct($data = [])
        {
        }
        /**
         * If a property does not exist, the method will create it as an "empty" instance of `Model`
         * so that children properties can be called without throwing errors.
         *
         * @param string $name
         *
         * @return mixed|null
         * @see OTGS_Template_Service_Php_Model::__toString
         */
        public function __get($name)
        {
        }
        /**
         * It ensures that $value is always either an array or a primitive type.
         *
         * @param string $name
         * @param mixed  $value
         */
        public function __set($name, $value)
        {
        }
        /**
         * @param mixed  $value
         *
         * @return bool
         */
        private function isAssoc($value)
        {
        }
        /**
         * @param string $name
         *
         * @return bool
         */
        public function hasValue($name)
        {
        }
        /**
         * @param string $name
         *
         * @return bool
         */
        public function isNull($name)
        {
        }
        /**
         * @param string $name
         *
         * @return bool
         */
        public function isEmpty($name)
        {
        }
        /**
         * @return mixed[]|OTGS_Template_Service_Php_Model[]
         */
        public function getAttributes()
        {
        }
        /**
         * This logic allows using the model in a template even when referring to properties which do no exist.
         *
         * Example:
         * `<h1><?php echo esc_html( $model->non_existing_property->title ); ?></h1>` Will output an empty string instead of throwing an error
         *
         * @return string
         */
        public function __toString()
        {
        }
    }
    class OTGS_Installer_Connection_Test_Exception extends \Exception
    {
    }
    class OTGS_Installer_Support_Template_Factory
    {
        private $installer_path;
        public function __construct($installer_path)
        {
        }
        /**
         * @return OTGS_Installer_Support_Template
         */
        public function create()
        {
        }
    }
    class OTGS_Installer_Connection_Test_Ajax
    {
        const ACTION = 'otgs_installer_test_connection';
        private $connection_test;
        public function __construct(\OTGS_Installer_Connection_Test $connection_test)
        {
        }
        public function add_hooks()
        {
        }
        public function test_connection()
        {
        }
        /**
         * @return bool
         */
        private function is_valid_request()
        {
        }
    }
    class OTGS_Installer_Support_Template
    {
        const TEMPLATE_FILE = 'installer-support';
        const SUPPORT_LINK = 'support-link';
        private $template_service;
        private $logger_storage;
        private $requirements;
        /**
         * @var OTGS_Installer_Instance[]
         */
        private $instances;
        public function __construct(\OTGS_Template_Service $template_service, \OTGS_Installer_Logger_Storage $logger_storage, \OTGS_Installer_Requirements $requirements, \OTGS_Installer_Instances $instances)
        {
        }
        public function show()
        {
        }
        public function render_support_link($args = array())
        {
        }
        private function get_support_link_model($args = array())
        {
        }
        /**
         * @return array
         */
        private function get_model()
        {
        }
        /**
         * @return array
         */
        private function get_log_entries()
        {
        }
    }
    class OTGS_Installer_Connection_Test
    {
        private $repositories;
        private $upgrade_response;
        private $logger_storage;
        private $log_factory;
        public function __construct(\OTGS_Installer_Repositories $repositories, \OTGS_Installer_Upgrade_Response $upgrade_response, \OTGS_Installer_Logger_Storage $logger_storage, \OTGS_Installer_Log_Factory $log_factory)
        {
        }
        /**
         * @param string $repo_id
         *
         * @return null|string
         */
        public function get_api_status($repo_id)
        {
        }
        /**
         * @param string $plugin_id
         *
         * @return bool|string
         */
        public function get_download_status($plugin_id)
        {
        }
        /**
         * @param array $response
         *
         * @return bool
         */
        private function is_response_successful($response)
        {
        }
        /**
         * @param string $url
         *
         * @return bool
         */
        private function get_url_status($url)
        {
        }
        private function log($msg, $url)
        {
        }
        private function get_success_codes()
        {
        }
    }
    class OTGS_Installer_Requirements
    {
        private $requirements;
        public function get()
        {
        }
        private function get_requirements()
        {
        }
    }
    class OTGS_Installer_Support_Hooks
    {
        private $template_factory;
        public function __construct(\OTGS_Installer_Support_Template_Factory $template_factory)
        {
        }
        public function add_hooks()
        {
        }
        public function add_support_page()
        {
        }
        public function render_support_page()
        {
        }
        public function enqueue_scripts($hook)
        {
        }
        public function render_link($args = array())
        {
        }
    }
    class OTGS_Installer_Loader
    {
        private $installer_factory;
        public function __construct(\OTGS_Installer_Factory $installer_factory)
        {
        }
        public function init()
        {
        }
        public function load_actions_after_installer_init()
        {
        }
    }
}
namespace OTGS\Installer\Loader {
    class Config
    {
        public static function merge(array $delegate, array $wpInstallerInstances)
        {
        }
    }
}
namespace {
    class Installer_Upgrader_Skins extends \WP_Upgrader_Skin
    {
        function __construct($args = array())
        {
        }
        function header()
        {
        }
        function footer()
        {
        }
        function error($error)
        {
        }
        function add_strings()
        {
        }
        function feedback($string, ...$args)
        {
        }
        function before()
        {
        }
        function after()
        {
        }
        public function request_filesystem_credentials($error = \false, $context = '', $allow_relaxed_file_ownership = \false)
        {
        }
    }
    /**
     * Installer_Theme_Class
     */
    class Installer_Theme_Class
    {
        /** Theme Repository */
        private $theme_repo;
        /** Repository API */
        private $repository_api;
        /** Repository Theme Products */
        private $repository_theme_products;
        /** Site URL */
        private $installer_site_url;
        /** Site Key */
        private $installer_site_key;
        /** The Themes Option */
        protected $installer_themes_option;
        /** Update settings */
        protected $installer_themes_available_updates;
        /** The Themes */
        protected $installer_themes = array();
        /** Repository with themes */
        protected $installer_repo_with_themes;
        /** Active tab */
        protected $installer_theme_active_tab;
        /** Theme user registration */
        protected $theme_user_registration;
        /** Client active subscription */
        protected $installer_theme_subscription_type;
        public function __construct()
        {
        }
        /** Init */
        public function init()
        {
        }
        /** Enqueue scripts */
        public function installer_theme_enqueue_scripts()
        {
        }
        /** Case where user is subscribed to a subscription that does not have themes */
        protected function installer_theme_subscription_does_not_have_theme($js_array)
        {
        }
        /** Check if its the commercial plugin screen */
        private function installer_theme_is_commercial_plugin_screen($current_screen)
        {
        }
        /** Current screen */
        private function installer_theme_current_screen()
        {
        }
        /** Override WordPress Themes API */
        public function installer_theme_api_override($api_boolean, $action, $args)
        {
        }
        /** Override WordPress Themes API response with our own themes API*/
        public function installer_theme_api_override_response($res, $action, $args)
        {
        }
        /** Get Themes */
        private function installer_theme_get_themes($product_url = '', $repository_id = '')
        {
        }
        /** Format response in compatibility with WordPress Theme API response */
        private function installer_theme_format_response($themes, $action, $slug = '')
        {
        }
        /** Let's save all available themes by its slug after any latest API query */
        private function installer_theme_savethemes_by_slug($themes, $doing_query = \false)
        {
        }
        /** Available themes */
        private function installer_theme_available($repo, $subscription_type = '')
        {
        }
        /** Theme upgrade check */
        public function installer_theme_upgrade_check($the_value)
        {
        }
        /** Return repositories that has themes */
        private function installer_theme_reposities_that_has_themes($repositories, $ret_value = \true, $doing_api_query = \false)
        {
        }
        /** When WordPress queries its own Themes API, we sync with our own */
        public function installer_theme_sync_native_wp_api($response, $responsetext, $class, $args, $url)
        {
        }
        /** Returns product name by theme repo slug */
        private function installer_theme_get_repo_product_name($theme_repo)
        {
        }
        /** General query API method, returns $products */
        private function installer_theme_general_api_query()
        {
        }
        /** General method to check if themes are OTGS themes based on its slug*/
        private function installer_themes_belong_to_us($theme_slug)
        {
        }
        /** Sets active tab on init */
        public function installer_theme_sets_active_tab_on_init()
        {
        }
        /** WP Theme API compatibility- added num ratings */
        /** Installer 1.7.6+ Added updated 'rating' field */
        public function installer_theme_add_num_ratings($themes)
        {
        }
        /** When WordPress.org makes a call to its repository, let's run our own upgrade checks too */
        public function installer_theme_sync_call_wp_theme_api($locales)
        {
        }
        /** Upgrade theme check */
        private function installer_theme_upgrade_theme_check()
        {
        }
        /** When the user is on Themes install page OTG themes repository, let's the currently selected tab */
        public function installer_theme_add_query_arg_tab($url, $path, $blog_id = \null)
        {
        }
        /** Save frontend theme tab selected */
        public function installer_theme_frontend_selected_tab()
        {
        }
        /** Installer loaded aux hooks */
        public function installer_theme_loaded_hooks()
        {
        }
        /** Get themes by subscription type */
        protected function installer_theme_get_themes_by_subscription($subscription_type, $repo)
        {
        }
        /** Filter API theme response according to user subscription */
        public function installer_theme_filter_themes_by_subscription($themes, $active_tab)
        {
        }
        /** Hook to wp_loaded, fires when all Installer theme class is ready */
        public function installer_themes_support_set_up_func()
        {
        }
    }
    class OTGS_Installer_Plugin_Finder
    {
        /**
         * @var array
         */
        private $plugins = array();
        private $plugin_factory;
        private $repositories;
        /**
         * @var array
         */
        private $installed_plugins;
        public function __construct(\OTGS_Installer_Plugin_Factory $plugin_factory, array $repositories)
        {
        }
        private function load()
        {
        }
        /**
         * @return OTGS_Installer_Plugin[]
         */
        public function get_all()
        {
        }
        public function get_otgs_installed_plugins()
        {
        }
        /**
         * @param string $slug
         * @param string $repo
         *
         * @return null|OTGS_Installer_Plugin
         */
        public function get_plugin($slug, $repo = '')
        {
        }
        /**
         * @param string $name
         *
         * @return null|OTGS_Installer_Plugin
         */
        public function get_plugin_by_name($name)
        {
        }
        /**
         * @param $slug
         *
         * @return null|string
         */
        private function get_installed_plugin_id_by_slug($slug)
        {
        }
        private function get_installed_plugins()
        {
        }
        /**
         * @param string $name
         *
         * @return string|null
         */
        private function get_installed_plugin_id_by_name($name)
        {
        }
    }
    /**
     * Class WP_Installer_Channels
     * @since 1.8
     */
    class WP_Installer_Channels
    {
        const CHANNEL_PRODUCTION = 'production';
        const CHANNEL_BETA = 'beta';
        const CHANNEL_DEVELOPMENT = 'development';
        protected static $_instance = \null;
        function __construct()
        {
        }
        /**
         * @return null|WP_Installer_Channels
         */
        public static function instance()
        {
        }
        /**
         * Get the channel literal id based on the numeric id
         *
         * @param mixed $id
         *
         * @return string
         */
        public static function channel_name_by_id($id)
        {
        }
        /**
         * Initialization
         */
        public function init()
        {
        }
        /**
         * Ajax handler for channel switching
         */
        public function set_channel()
        {
        }
        /**
         * @param string $repository_id
         *
         * @return int
         */
        public function get_channel($repository_id)
        {
        }
        /**
         * @param $repository_id
         *
         * @return bool
         */
        private function get_no_prompt($repository_id)
        {
        }
        /**
         * @param string $repository_id
         * @param array $downloads
         */
        public function load_channel_selector($repository_id, $downloads)
        {
        }
        /**
         * The beta and development channels can be used only when already using the most up to date versions
         * @param array $downloads
         *
         * @return bool
         */
        public function can_use_unstable_channels($downloads)
        {
        }
        /**
         * Get available updates channels. Only include channels with actual downloads available.
         *
         * @param string $repository_id
         *
         * @return array
         */
        public function get_available_channels($repository_id)
        {
        }
        /**
         * @param string $repository_id
         * @param array $downloads
         *
         * @return array
         */
        public function filter_downloads_by_channel($repository_id, $downloads)
        {
        }
        /**
         * Get the source channel for the installed version when on the Beta or Development channel
         * @param string $version
         * @param string $repository_id
         * @param string $download_id
         * @param string $download_kind
         *
         * @return string
         */
        public function get_download_source_channel($version, $repository_id, $download_id, $download_kind)
        {
        }
    }
    class OTGS_Installer_Instance
    {
        /**
         * @var string
         */
        public $bootfile;
        /**
         * @var string
         */
        public $version;
        /**
         * @var string
         */
        public $high_priority;
        /**
         * @var bool
         */
        public $delegated;
        /**
         * @param string $bootfile
         *
         * @return $this
         */
        public function set_bootfile($bootfile)
        {
        }
        /**
         * @param string $high_priority
         *
         * @return $this
         */
        public function set_high_priority($high_priority)
        {
        }
        /**
         * @param string $version
         *
         * @return $this
         */
        public function set_version($version)
        {
        }
        /**
         * @param bool $delegated
         *
         * @return $this
         */
        public function set_delegated($delegated)
        {
        }
    }
    class OTGS_Installer_Instances_Factory
    {
        public function create()
        {
        }
    }
    class OTGS_Installer_Instances
    {
        private $instances;
        /**
         * @var OTGS_Installer_Instance[]
         */
        private $instances_obj = array();
        public function __construct($instances)
        {
        }
        public function get()
        {
        }
    }
    class OTGS_Installer_Plugin
    {
        private $name;
        private $slug;
        private $description;
        private $changelog;
        private $version;
        private $date;
        private $url;
        private $free_on_wporg;
        private $fallback_on_wporg;
        private $basename;
        private $external_repo;
        private $is_lite;
        private $repo;
        private $id;
        private $installed_version;
        private $channel;
        private $tested;
        public function __construct(array $params = array())
        {
        }
        /**
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * @return string
         */
        public function get_slug()
        {
        }
        /**
         * @return string
         */
        public function get_description()
        {
        }
        /**
         * @return string
         */
        public function get_changelog()
        {
        }
        /**
         * @return string
         */
        public function get_version()
        {
        }
        /**
         * @return string
         */
        public function get_date()
        {
        }
        /**
         * @return string
         */
        public function get_url()
        {
        }
        /**
         * @return string
         */
        public function get_repo()
        {
        }
        /**
         * @return bool
         */
        public function is_free_on_wporg()
        {
        }
        /**
         * @return bool
         */
        public function has_fallback_on_wporg()
        {
        }
        /**
         * @return string
         */
        public function get_basename()
        {
        }
        /**
         * @return string
         */
        public function get_external_repo()
        {
        }
        /**
         * @return string
         */
        public function get_id()
        {
        }
        /**
         * @return string
         */
        public function get_installed_version()
        {
        }
        /**
         * @return string
         */
        public function get_channel()
        {
        }
        /**
         * @return string
         */
        public function get_tested()
        {
        }
        /**
         * @return string
         */
        public function is_lite()
        {
        }
    }
    class OTGS_Installer_Subscription
    {
        const SUBSCRIPTION_STATUS_INACTIVE = 0;
        const SUBSCRIPTION_STATUS_ACTIVE = 1;
        const SUBSCRIPTION_STATUS_EXPIRED = 2;
        const SUBSCRIPTION_STATUS_INACTIVE_UPGRADED = 3;
        const SUBSCRIPTION_STATUS_ACTIVE_NO_EXPIRATION = 4;
        const SUBSCRIPTION_STATUS_TEXT_EXPIRED = 'expired';
        const SUBSCRIPTION_STATUS_TEXT_VALID = 'valid';
        const SUBSCRIPTION_STATUS_TEXT_REFUNDED = 'refunded';
        const SUBSCRIPTION_STATUS_TEXT_MISSING = 'missing';
        private $status;
        private $expires;
        private $site_key;
        private $site_url;
        private $type;
        private $registered_by;
        private $data;
        private $notes;
        /**
         * WPML_Installer_Subscription constructor.
         *
         * @param array|null $subscription
         */
        public function __construct($subscription = array())
        {
        }
        public function get_subscription_status_text()
        {
        }
        /**
         * @param int $expiredForPeriod
         * @return bool
         */
        private function is_expired($expiredForPeriod = 0)
        {
        }
        /**
         * @return bool
         */
        private function is_lifetime()
        {
        }
        private function get_status()
        {
        }
        private function get_expiration()
        {
        }
        public function get_site_key()
        {
        }
        public function get_site_url()
        {
        }
        public function get_type()
        {
        }
        public function get_registered_by()
        {
        }
        public function get_data()
        {
        }
        /**
         * @param int $expiredForPeriod
         * @return bool
         */
        public function is_valid($expiredForPeriod = 0)
        {
        }
        public function is_refunded()
        {
        }
    }
    class OTGS_Installer_Plugin_Factory
    {
        /**
         * @param array $params
         *
         * @return OTGS_Installer_Plugin
         */
        public function create(array $params = array())
        {
        }
    }
    class OTGS_Installer_WP_Components_Setting_Resources
    {
        /**
         * @var WP_Installer
         */
        private $installer;
        const HANDLES_OTGS_INSTALLER_UI = 'otgs-installer-ui';
        public function __construct(\WP_Installer $installer)
        {
        }
        public function add_hooks()
        {
        }
        public function enqueue_resources()
        {
        }
    }
    class OTGS_Installer_Debug_Info
    {
        private $installer;
        /**
         * @var OTGS_Products_Config_Db_Storage
         */
        private $products_config_storage;
        public function __construct(\WP_Installer $installer, \OTGS_Products_Config_Db_Storage $products_config_storage)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param array $data
         *
         * @return array
         */
        public function add_installer_config_in_debug_information($data)
        {
        }
        private function prepare_bucket_url($repo_id)
        {
        }
        private function prepare_last_subscription_fetch($repository_settings, $repo_id)
        {
        }
    }
    class OTGS_Installer_Buy_URL_Hooks
    {
        private $embedded_at;
        public function __construct($embedded_at)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param string $url
         *
         * @return string
         */
        public function append_installer_source($url)
        {
        }
    }
    class OTGS_Installer_WP_Components_Hooks
    {
        const EVENT_SEND_COMPONENTS_MONTHLY = 'otgs_send_components_data';
        const EVENT_SEND_COMPONENTS_AFTER_REGISTRATION = 'otgs_send_components_data_on_product_registration';
        const REPORT_SCHEDULING_PERIOD = '+1 month';
        /**
         * @var OTGS_Installer_WP_Components_Storage
         */
        private $storage;
        /**
         * @var OTGS_Installer_WP_Components_Sender
         */
        private $sender;
        /**
         * @var OTGS_Installer_WP_Share_Local_Components_Setting
         */
        private $setting;
        /**
         * @var OTGS_Installer_PHP_Functions
         */
        private $php_functions;
        public function __construct(\OTGS_Installer_WP_Components_Storage $storage, \OTGS_Installer_WP_Components_Sender $sender, \OTGS_Installer_WP_Share_Local_Components_Setting $setting, \OTGS_Installer_PHP_Functions $php_functions)
        {
        }
        public function add_hooks()
        {
        }
        public function schedule_components_report()
        {
        }
        public function schedule_components_report_when_product_is_registered()
        {
        }
        public function process_report_instantly()
        {
        }
        public function force_send_components_data()
        {
        }
        public function send_components_data()
        {
        }
    }
}
namespace OTGS\Installer\Rest {
    class Push
    {
        const REFRESH_INTERVAL = 7200;
        //2 hours
        const REST_NAMESPACE = 'otgs/installer/v1';
        public static function register_routes()
        {
        }
        public static function fetch_subscription()
        {
        }
    }
}
namespace {
    class OTGS_Installer_Icons
    {
        /**
         * @var WP_Installer
         */
        private $installer;
        public function __construct(\WP_Installer $installer)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param stdClass $response
         * @param string $name
         *
         * @return stdClass
         */
        public function add_icons_on_response($response, $name)
        {
        }
    }
    class OTGS_Installer_Log
    {
        private $time;
        private $request_url;
        private $request_args;
        private $response;
        private $component;
        /**
         * @return string
         */
        public function get_time()
        {
        }
        /**
         * @param string $time
         *
         * @return $this
         */
        public function set_time($time)
        {
        }
        /**
         * @return string
         */
        public function get_request_url()
        {
        }
        /**
         * @param string $request_url
         *
         * @return $this
         */
        public function set_request_url($request_url)
        {
        }
        /**
         * @return array
         */
        public function get_request_args()
        {
        }
        /**
         * @param array $request_args
         *
         * @return $this
         */
        public function set_request_args($request_args)
        {
        }
        /**
         * @return string
         */
        public function get_response()
        {
        }
        /**
         * @param string $response
         *
         * @return $this
         */
        public function set_response($response)
        {
        }
        /**
         * @return string
         */
        public function get_component()
        {
        }
        /**
         * @param string $component
         *
         * @return $this
         */
        public function set_component($component)
        {
        }
    }
    class OTGS_Installer_Log_Factory
    {
        /**
         * @return OTGS_Installer_Log
         */
        public function create()
        {
        }
    }
    class OTGS_Installer_Logger
    {
        private $installer;
        private $storage;
        private $logger_factory;
        public function __construct(\WP_Installer $installer, \OTGS_Installer_Logger_Storage $storage)
        {
        }
        public function get_api_log()
        {
        }
        public function add_api_log($log)
        {
        }
        public function save_log(\OTGS_Installer_Log $log)
        {
        }
        public function add_log($log)
        {
        }
    }
    class OTGS_Installer_Logger_Storage
    {
        const MAX_SIZE = 50;
        const OPTION_KEY = 'otgs-installer-log';
        const COMPONENT_SUBSCRIPTION = 'subscription-fetching';
        const COMPONENT_PRODUCTS_URL = 'products-url-fetching';
        const COMPONENT_DOWNLOAD = 'download';
        const COMPONENT_REPOSITORIES = 'repositories-fetching';
        const COMPONENT_PRODUCTS_PARSING = 'products-parsing';
        const API_CONNECTION_TEST = 'api-connection-test';
        const PRODUCTS_FILE_CONNECTION_TEST = 'products-connection-test';
        private $log_entries;
        private $log_factory;
        private $max_size;
        public function __construct(\OTGS_Installer_Log_Factory $log_factory, $max_size = self::MAX_SIZE)
        {
        }
        /**
         * @return array|OTGS_Installer_Log[]
         */
        public function get()
        {
        }
        public function add(\OTGS_Installer_Log $log)
        {
        }
        /**
         * @param array $log_entries
         *
         * @return array
         */
        private function convert_to_object($log_entries)
        {
        }
        /**
         * @param OTGS_Installer_Log[] $log_entries
         *
         * @return array
         */
        private function convert_to_array($log_entries)
        {
        }
    }
    class OTGS_Installer_Autoloader
    {
        private $classMap = [];
        public function initialize()
        {
        }
        public function autoload($class_name)
        {
        }
        private function getClassMap()
        {
        }
    }
    class WP_Installer_API
    {
        public static function get_product_installer_link($repository_id, $package_id = \false)
        {
        }
        public static function get_product_price($repository_id, $package_id, $product_id, $incl_discount = \false)
        {
        }
        /**
         * Retrieve the preferred translation service.
         *
         * @since 1.6.5
         *
         * @param string The repository id (e.g. wpml)
         * @return string The translation service id
         */
        public static function get_preferred_ts($repository_id = 'wpml')
        {
        }
        /**
         * Set the preferred translation service.
         *
         * @since 1.6.5
         *
         * @param string The translation service id
         * @param string The repository id (e.g. wpml)
         */
        public static function set_preferred_ts($value, $repository_id = 'wpml')
        {
        }
        /**
         * Retrieve the referring translation service (if any)
         *
         * @since 1.6.5
         *
         * @param string The repository id (e.g. wpml)
         * @return string The translation service id or false
         */
        public static function get_ts_referal($repository_id = 'wpml')
        {
        }
        /**
         * Retrieve the translation services client id for a specific repository (if any)
         *
         * @since 1.7.9
         *
         * @param string The repository id (e.g. wpml)
         * @return string The client id or false
         */
        public static function get_ts_client_id($repository_id = 'wpml')
        {
        }
        /**
         * Retrieve the site key corresponding to a repository.
         * This is a wrapper of WP_Installer::get_site_key()
         * @see WP_Installer::get_site_key()
         *
         * @since 1.7.9
         *
         * @param string The repository id (e.g. wpml)
         * @return string The site key (or false)
         */
        public static function get_site_key($repository_id = 'wpml')
        {
        }
        /**
         * Retrieve the ID of the last user who registered a repository.
         *
         * @since 1.7.16
         *
         * @param string The repository id (e.g. wpml)
         * @return int The user id (or zero)
         */
        public static function get_registering_user_id($repository_id = 'wpml')
        {
        }
    }
    class WP_Installer
    {
        const TOOLSET_TYPES = 'Toolset Types';
        protected static $_instance = \null;
        public $settings = array();
        private $repositories = array();
        protected $api_debug = '';
        private $config = array();
        protected $_plugins_renew_warnings = array();
        private $admin_messages = array();
        private $ajax_messages = array();
        private $_using_icl = \false;
        private $_wpml_version = \false;
        private $package_source = array();
        private $plugin_finder;
        const SITE_KEY_VALIDATION_SOURCE_OTHER = 0;
        const SITE_KEY_VALIDATION_SOURCE_DOWNLOAD_SPECIFIC = 1;
        const SITE_KEY_VALIDATION_SOURCE_DOWNLOAD_REPORT = 2;
        const SITE_KEY_VALIDATION_SOURCE_REGISTRATION = 3;
        const SITE_KEY_VALIDATION_SOURCE_REVALIDATION = 4;
        const SITE_KEY_VALIDATION_SOURCE_UPDATES_CHECK = 5;
        public $dependencies;
        private $components_setting;
        /** @var bool $repositories_already_refreshed */
        private $repositories_already_refreshed = \false;
        /**
         * @var OTGS_Installer_Logger_Storage
         */
        private $logger_storage;
        /**
         * @var OTGS_Products_Manager
         */
        private $products_manager;
        /**
         * @var RecommendationsManager
         */
        private $recommendations_manager;
        public static function instance()
        {
        }
        public function __construct()
        {
        }
        /**
         * @param string $name
         * @param array $plugin
         *
         * @return bool
         */
        private static function isFreeToolsetTypes($name, $plugin)
        {
        }
        public function get_repositories()
        {
        }
        /**
         * @return OTGS_Products_Manager|null
         */
        public function get_products_manager()
        {
        }
        public function set_config($key, $value)
        {
        }
        public function init()
        {
        }
        public function get_last_subscriptions_refresh()
        {
        }
        /**
         * @return OTGS_Products_Manager|null
         */
        private function prepare_products_manager()
        {
        }
        private function is_installer_running_on_otgs_plugin()
        {
        }
        private function is_commercial_page()
        {
        }
        public function log($message)
        {
        }
        public function register_admin_message($text, $type = 'updated')
        {
        }
        public function show_admin_messages()
        {
        }
        public function load_locale()
        {
        }
        public function load_embedded_plugins()
        {
        }
        public function menu_setup()
        {
        }
        public static function menu_url()
        {
        }
        private function menu_multisite_redirect()
        {
        }
        private function _pre_1_0_clean_up()
        {
        }
        public function setup_plugins_action_links()
        {
        }
        private function should_display_types_upgrade_link($name, $version)
        {
        }
        public function types_upgrade_link($links)
        {
        }
        public function plugins_action_links_registered($links)
        {
        }
        public function plugins_action_links_not_registered($links)
        {
        }
        public function plugin_is_registered($repository_id, $slug)
        {
        }
        public function version()
        {
        }
        public function plugin_path()
        {
        }
        public function plugin_url()
        {
        }
        public function vendor_url()
        {
        }
        public function get_embedded_at()
        {
        }
        public function is_repositories_page()
        {
        }
        public function res_url()
        {
        }
        public function save_settings()
        {
        }
        public function get_settings($refresh = \false)
        {
        }
        private function is_gz_on()
        {
        }
        private function load_hardcoded_site_keys()
        {
        }
        public static function get_repository_hardcoded_site_key($repository_id)
        {
        }
        //backward compatibility, add channel
        private function _pre_1_8_backwards_compatibility(&$settings)
        {
        }
        //backward compatibility - support old products list format (downloads under products instead of global downloads list)
        private function _old_products_format_backwards_compatibility($settings)
        {
        }
        public function get_installer_site_url($repository_id = \false)
        {
        }
        /**
         * @param string $repository_id
         *
         * @return string|null
         */
        public function get_registered_site_url($repository_id)
        {
        }
        public function get_site_key_nags_config()
        {
        }
        /**
         * @return array
         */
        public function getRegisteredRepositories()
        {
        }
        public function add_install_plugins_tab($tabs)
        {
        }
        public function load_repositories_list()
        {
        }
        /**
         * @return string|null
         */
        public function get_xml_config_file()
        {
        }
        /**
         * @return string
         */
        private function get_config_file_path($file_name)
        {
        }
        /**
         * @param string $id
         */
        private function set_predefined_config($id, $setting_field, $constant_suffix)
        {
        }
        public function filter_repositories_list()
        {
        }
        public function refresh_subscriptions_data()
        {
        }
        public function shouldDisplayConnectionIssueMessage($repositoryId)
        {
        }
        /**
         * @param string $repositoryId
         *
         * @return int
         */
        private function getLastSuccessSubscriptionFetch($repositoryId)
        {
        }
        /**
         * @param $repositoryId
         *
         * @return array
         */
        private function setLastSuccessSubscriptionFetch($repositoryId)
        {
        }
        private function log_subscription_update($message)
        {
        }
        public function get_recommendations($repository_id)
        {
        }
        public function refresh_repositories_data($bypass_bucket = \false)
        {
        }
        private function handle_product_parsing_notices($products_notices)
        {
        }
        public function show_products($args = array())
        {
        }
        public function get_product_price($repository_id, $package_id, $product_id, $incl_discount = \false)
        {
        }
        public function get_product_data($repository_id, $data_type)
        {
        }
        private function _render_product_packages($packages, $subscription_type, $expired, $upgrade_options, $repository_id)
        {
        }
        public function get_end_user_renewal_url($repository_id)
        {
        }
        public function get_extra_url_parameters()
        {
        }
        public function append_parameters_to_buy_url($url, $repository_id, $args = array())
        {
        }
        /**
         * @return OTGS_Installer_WP_Share_Local_Components_Setting
         */
        private function get_component_setting()
        {
        }
        public function save_site_key($args = array())
        {
        }
        /**
         * Alias for WP_Installer::get_repository_site_key
         * @see WP_Installer::get_repository_site_key()
         *
         * @param string $repository_id
         *
         * @return string (site key) or bool
         */
        public function get_site_key($repository_id)
        {
        }
        public function remove_site_key($repository_id, $refresh_repositories_data = \true)
        {
        }
        public function validate_repository_subscription()
        {
        }
        public function api_debug_log($text)
        {
        }
        public function fetch_subscription_data($repository_id, $site_key, $source = self::SITE_KEY_VALIDATION_SOURCE_OTHER)
        {
        }
        function get_local_product_versions($repository_id)
        {
        }
        public function get_repository_site_key($repository_id)
        {
        }
        /**
         * @param $repository_id
         *
         * @return OTGS_Installer_Subscription
         */
        public function get_subscription($repository_id)
        {
        }
        /**
         * @param string $repository_id
         * @param int $expiredForPeriod
         *
         * @return bool
         */
        public function repository_has_valid_subscription($repository_id, $expiredForPeriod = 0)
        {
        }
        /**
         * @param string $repository_id
         *
         * @return bool
         */
        public function repository_has_refunded_subscription($repository_id)
        {
        }
        /**
         * @return bool
         */
        public function should_display_unregister_link_on_refund_notice()
        {
        }
        private function get_hide_unregister_link_on_refund_notice_till_date()
        {
        }
        public function set_hide_unregister_link_on_refund_notice_date($hide_till_date)
        {
        }
        public function repository_has_subscription($repository_id)
        {
        }
        public function repository_has_expired_subscription($repository_id, $expiredForPeriod = 0)
        {
        }
        public function get_generic_product_name($repository_id)
        {
        }
        public function show_subscription_renew_warning($repository_id, $subscription_id)
        {
        }
        public function setup_plugins_renew_warnings()
        {
        }
        public function queue_plugins_renew_warnings()
        {
        }
        public function plugins_renew_warning($plugin_file, $plugin_data, $status)
        {
        }
        public function get_subscription_type_for_repository($repository_id)
        {
        }
        public function have_superior_subscription($subscription_type, $product)
        {
        }
        public function is_product_available_for_download($product_name, $repository_id)
        {
        }
        public function get_upgrade_options($repository_id)
        {
        }
        public function append_site_key_to_download_url($url, $key, $repository_id)
        {
        }
        public function plugin_is_installed($name, $slug, $version = \null)
        {
        }
        public function plugin_is_embedded_version($name, $slug)
        {
        }
        //Alias for plugin_is_installed
        public function get_plugin_installed_version($name, $slug)
        {
        }
        public function get_plugin_repository_version($repository_id, $slug)
        {
        }
        public function is_uploading_allowed()
        {
        }
        public function download_plugin_ajax_handler()
        {
        }
        private function is_plugin_out_of_date($plugin)
        {
        }
        public function download_plugin($slug, $url)
        {
        }
        public function activate_plugin()
        {
        }
        public function custom_plugins_api_call($result, $action, $args)
        {
        }
        private function should_fallback_under_wp_org_repo($download, $site_key)
        {
        }
        private function has_non_wporg_upgrade_available($plugin_id)
        {
        }
        public function setup_plugins_page_notices()
        {
        }
        public function localize_strings()
        {
        }
        public function get_matching_cp($repository, $args = array())
        {
        }
        public function set_filtered_prices($args = array())
        {
        }
        public function set_hierarchy_and_order()
        {
        }
        public function compare_package_order($a, $b)
        {
        }
        public function get_support_tag_by_name($name, $repository)
        {
        }
        /**
         * @return OTGS_Installer_Plugin_Finder
         */
        private function get_plugin_finder()
        {
        }
        private function clean_plugins_update_cache()
        {
        }
        public function plugin_upgrade_custom_errors()
        {
        }
        private function store_log($url, $url_args, $component, $response)
        {
        }
        public function get_api_debug()
        {
        }
        /**
         * @param string $current_repository
         * @param string $plugin_slug
         *
         * @return array
         */
        private function match_product_in_external_repository($current_repository, $plugin_slug)
        {
        }
        /**
         * @param $name
         * @param $slug
         *
         * @return bool
         */
        private function isComplementaryWithWPMLSubscription($name, $slug)
        {
        }
    }
}
namespace OTGS\Installer\Templates\Repository {
    class Registered
    {
        public static function render($model)
        {
        }
    }
    class RegisteredButtons
    {
        public static function render($model)
        {
        }
    }
    class Expired
    {
        public static function render($model)
        {
        }
    }
    class EndUsers
    {
        public static function render($withProduct, $model)
        {
        }
    }
    class Register
    {
        public static function render($model)
        {
        }
        private static function removeScheme($str)
        {
        }
        /**
         * @param $model
         *
         * @return string
         */
        private static function getAccountLink($model)
        {
        }
        /**
         * @param $model
         *
         * @return string
         */
        private static function getRegisterLink($model)
        {
        }
    }
    class Refunded
    {
        public static function render($model)
        {
        }
    }
}
namespace OTGS\Installer\Recommendations {
    class RecommendationsManager
    {
        /**
         * @var \OTGS_Installer_Repositories
         */
        private $repositories;
        /**
         * @var array
         */
        private $settings;
        /**
         * @var array
         */
        private $repositoriesForRecommendation = ['wpml'];
        /**
         * @var Storage
         */
        private $noticesStorage;
        /**
         * RecommendationsManager constructor.
         *
         * @param \OTGS_Installer_Repositories $repositories
         * @param array $settings
         * @param Storage $settings
         */
        public function __construct(\OTGS_Installer_Repositories $repositories, $settings, \OTGS\Installer\Recommendations\Storage $noticesStorage)
        {
        }
        public function addHooks()
        {
        }
        public function activatedPluginRecommendation($plugin)
        {
        }
        private function isGluePluginActive($gluePluginSlug)
        {
        }
        public function deactivatedPluginRecommendation($plugin)
        {
        }
        public function recommendationSuccess()
        {
        }
        /**
         * @param string $activatedPluginSlug
         *
         * @return array|null
         */
        private function getActivatedPluginGlue($activatedPluginSlug)
        {
        }
        private function getNotificationForLanguage($pluginData, $language)
        {
        }
        /**
         * @return array
         */
        public function getRepositoryPluginsRecommendations()
        {
        }
        private function getCurrentLanguage()
        {
        }
        /**
         * @param \OTGS_Installer_Repository $repository
         *
         * @return array
         */
        private function getAvailablePluginsForSubscription(\OTGS_Installer_Repository $repository)
        {
        }
        /**
         * @return array
         */
        private function getInstalledPlugins()
        {
        }
        /**
         * @param string $language
         * @param array $pluginData
         * @param string $siteKey
         * @param string $repositoryId
         * @param string $siteUrl
         * @param bool $isInstalled
         * @param bool $isActive
         *
         * @return array
         */
        private function preparePluginData($language, $pluginData, $siteKey, $repositoryId, $siteUrl, $isInstalled, $isActive)
        {
        }
        /**
         * @param array $pluginData
         *
         * @return bool
         */
        private function shouldBeDisplayed($pluginData)
        {
        }
        /**
         * @param string $url
         * @param string $siteKey
         * @param string $siteUrl
         *
         * @return string
         */
        private function appendSiteKeyToDownloadUrl($url, $siteKey, $siteUrl)
        {
        }
    }
    class Storage
    {
        const ADMIN_NOTICES_OPTION = 'otgs_installer_recommendations_admin_notices';
        /**
         * @param string $key
         * @param array $data
         */
        public static function save($key, $data)
        {
        }
        public static function delete($pluginSlug, $repositoryId)
        {
        }
        /**
         * @return array
         */
        public static function getAll()
        {
        }
    }
}
namespace OTGS\Installer\FP {
    /**
     * Returns new function which will behave like $function with
     * predefined left arguments passed to partial
     *
     * @param callable $function
     * @param mixed ...
     *
     * @return callable
     */
    function partial(callable $function, $dummy)
    {
    }
}
namespace {
    /**
     * Returns true if the current request is a REST one.
     *
     * @return bool
     */
    function otgs_is_rest_request()
    {
    }
    /**
     * When all plugins load pick the newest version.
     */
    function wpml_installer_instance_delegator()
    {
    }
    /**
     * $args:
     *  plugins_install_tab = true|false (default: true)
     *  repositories_include = array() (default: all)
     *  repositories_exclude = array() (default: none)
     *  template = name (default: default)
     *
     * @param int   $wp_installer_instance The WP_Installer instance.
     * @param array $args                  The repository configuration.
     *
     * phpcs:disable WordPress.NamingConventions.ValidFunctionName.FunctionNameInvalid
     */
    function WP_Installer_Setup($wp_installer_instance, $args = array())
    {
    }
    function response_header($header)
    {
    }
    // Ext function
    function WP_Installer_Show_Products($args = array())
    {
    }
    function WP_Installer_get_local_components_setting_ui($args)
    {
    }
    /**
     * @deprecated
     */
    function WP_Installer()
    {
    }
    function OTGS_Installer()
    {
    }
    function WP_Installer_Channels()
    {
    }
    function otgs_installer_get_logger_storage()
    {
    }
    function get_OTGS_Installer_Factory()
    {
    }
}